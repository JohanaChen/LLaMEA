{"id": "48c58278-b747-4dcc-ac05-adf55ee0f52d", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Differential evolution factor\n        self.cr = 0.9  # Crossover probability\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.5  # Social coefficient\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridDEPSO", "description": "A hybrid differential evolution and particle swarm optimization algorithm that dynamically adjusts search strategies to enhance exploration and exploitation across the search space.", "configspace": "", "generation": 0, "fitness": 0.2765792047272552, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8742690417211116, 0.8826109709620668, 0.8907993077252268, 0.8624531486349981, 0.18324157357509974, 0.18106353345572757, 0.9002750871960787, 0.17564537158558924, 0.882794096906857, 0.7426446172672803, 0.739756981048372, 0.7312700010357577, 0.6585640969026053, 0.6954126505481271, 0.7544888448116945, 0.7792593332663381, 0.004788528206653431, 0.7291542977044921, 0.15369442346104045, 0.14369411150737266, 0.12106503354753984, 0.1393458678735653, 0.0704784877056458, 0.06510117432375861, 0.056307105744102026, 0.11677626881178271, 0.14190051653406155, 0.15496204200888952, 0.15167872930972304, 0.10859532409323691, 0.10145238625412645, 0.14058000281897043, 0.14185495720055896, 0.12629756241790457, 0.08346410133856319, 0.11744710541230086, 0.9898279275314463, 0.9912750571534359, 0.9859424476887951, 0.994358490578444, 0.9938068704017051, 0.9909913120962163, 0.991242305646716, 0.99377076034564, 0.9895997032477911, 0.7614236254077775, 0.055421519177409895, 0.05943325669895638, 0.7401049772913573, 0.15305577241633406, 0.7250649741847632, 0.08285721334516716, 0.697383912168798, 0.7204027443500065, 0.22680823345061873, 0.22464223393287597, 0.7965937638762165, 0.16102185474291986, 0.2114628584360313, 0.1902760120086473, 0.2397218356045696, 0.14799475673767015, 0.143803561257971, 0.2788498904534972, 0.24423163947472049, 0.2488741066452539, 0.10614549933731687, 0.10551334801093615, 0.23506725008667495, 0.12948532788096712, 0.1583871605496594, 0.2610440939289089, 0.27597481029727433, 0.022160187265087172, 0.2472817023191739, 9.999999999998899e-05, 0.22290952609452275, 0.25543193510282813, 0.31187776034818604, 0.28242931198675036, 9.999999999998899e-05, 0.001723962183672656, 0.020869288754045145, 0.0014358064160232553, 0.005195493564999709, 9.999999999998899e-05, 0.0012342098717171845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11558527968125287, 0.04158631125670509, 0.05250436124917579, 0.011950840491853576, 0.055638961596976566, 0.040391175853574546, 0.007068177267481435, 0.04127210451612595, 0.05355089423413151, 0.1945143179647013, 0.03547184359748823, 9.999999999998899e-05, 0.1810970009383599, 0.09457168394024396, 0.07836918390653769, 0.098038945252239, 0.10160643746696574, 0.07154563749702825, 9.999999999998899e-05, 0.19324244719171346, 0.04268440980656962, 0.09190289062439405, 0.15906448470914114, 0.30915053983373153, 0.048452980525588774, 0.04783206842263321, 0.08298752378538665, 0.5662896894255622, 0.5764302568822629, 0.5578724803161674, 0.5668901266923324, 0.2081649611016032, 0.5998021376325866, 0.5873201393325518, 0.6253836848341554, 0.5846636269280465, 0.06290900694003321, 0.09640577075625567, 0.07011578277011754, 0.10812975788119106, 0.1274332439120004, 0.1161686599306968, 0.11674488247097092, 0.08767936837713353, 0.11390827752147725, 0.18293416238896287, 0.17330695984079392, 0.15939814683270015, 0.23556871855025163, 0.1874496545501647, 0.25260410357089336, 0.18265875866562387, 0.17480690574478885, 0.3897592563797728, 0.3238696407844103, 0.2614271292833751, 0.5820747193816593, 0.43716160662073844, 0.45294517761237874, 0.6008951962873997, 0.21023737750110205, 0.19121029884142116, 0.6027390349162056, 0.2657191241579101, 0.2478769005400877, 0.21334543014361196, 0.19633396295501948, 0.24685709252250232, 0.32449143362171895, 0.420762826085597, 0.35742472364237543, 0.2961636996140202, 0.24484745730959923, 0.20821853693530634, 0.2099966118555746, 0.22885118594239306, 0.21094874393205154, 0.19815300819432236, 0.1828611553352093, 0.1863613562789499, 0.23810707385210694, 0.22523248415691755, 0.20462825648460148, 0.22020335589866313, 0.1833858602889461, 0.24483166754213748, 0.2468450156445846, 0.1928488518274113, 0.2201980823747488, 0.1834928358314134, 0.17133923881914215, 0.1658703885521532, 0.12430981325591783, 0.19757980390315233, 0.17773000437901698, 0.14116715335440788, 0.11871846763620286, 0.17365398801008392, 0.16566570794992674, 0.11213274307649512, 0.11235978244497602, 0.15581061941263252, 0.6669542056656022, 0.16972818627019037, 0.7853966688780719, 0.770838426677686, 0.19735629150795775, 0.13437146401371014, 0.21934917803978737, 0.22490307887067862, 0.19850841225579186, 0.19304792932338533, 0.19462220446356782, 0.18094023675125814, 0.22726757835469047, 0.2222584001391641, 0.2310569715704648, 0.0757963534358792, 0.08733856255616523, 0.10231441105191175, 0.08569448740687735, 0.09070090665249808, 0.09170519949784484, 0.10246649342180025, 0.08567302268293586, 0.08565893150182124]}, "mutation_prompt": null}
{"id": "0842e580-f8fa-45d5-b8e8-5cad2bb43908", "solution": "import numpy as np\n\nclass AdaptiveHybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30  # Increased population size for better exploration\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))  # Adjusted velocity range\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.5  # Reduced DE factor for more conservative mutation\n        self.cr = 0.7  # Reduced crossover probability to preserve diversity\n        self.w = 0.3  # Reduced inertia weight for better convergence\n        self.w_max = 0.9  # Adaptive inertia weight parameters\n        self.w_min = 0.4\n        self.c1 = 1.2  # Adjusted cognitive coefficient\n        self.c2 = 1.8  # Adjusted social coefficient\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                # Adaptive inertia weight\n                self.w = self.w_max - (self.w_max - self.w_min) * (self.eval_count / self.budget)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridDEPSO", "description": "A refined hybrid differential evolution and particle swarm optimization algorithm with adaptive parameters to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 1, "fitness": 0.1971023223575171, "feedback": "The algorithm AdaptiveHybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "48c58278-b747-4dcc-ac05-adf55ee0f52d", "metadata": {"aucs": [0.4543768369787775, 0.4882906861739247, 0.49975415533869616, 0.1812445036422765, 0.5640682827482228, 0.5525623043026012, 0.17061429844267872, 0.1812046793866503, 0.5695802441527644, 0.021959018038398614, 0.16462620633322245, 0.1648985407832162, 0.21391675737175186, 0.12090944034477302, 0.22188970191705493, 0.02955137843562894, 0.017372681281766944, 0.28072471144784017, 0.12357723854203118, 0.1849510015683712, 0.11876343732464612, 0.10436924223720456, 0.17732406619088958, 0.13310213145996952, 0.1046909779644708, 0.11566532343685143, 0.09552214647736512, 0.0910680515359028, 0.10023614263227387, 0.0857900729777743, 0.11132101026294094, 0.09678927345984534, 0.08822434853288652, 0.1248989176816323, 0.07763362596712087, 0.08421914112887074, 0.9956384985330422, 0.9910453564999175, 0.9901140454922533, 0.9844881216541375, 0.9908670695057875, 0.9875633824206105, 0.9896327592797513, 0.9912322723914643, 0.9879361361256394, 0.058085537427048806, 0.054742582375740145, 0.057676537807371475, 0.32415040221227365, 0.1276707636684976, 0.35322001769083755, 0.05053318940514584, 0.08678342541353523, 0.33371176439574834, 0.13621575858104917, 0.41506969632843516, 0.2568578356303758, 0.18097281704278734, 0.18181220415334587, 0.18211177567176684, 0.12686338643560324, 0.12364139508669159, 0.11588937558680246, 0.14912394837156884, 0.1379435123788506, 0.11991152797874693, 0.07835526290084349, 0.08475529066422605, 0.0871284818609056, 0.1719734981212523, 0.11171253099480905, 0.1383167096725787, 0.1523925746524345, 0.07954792341095085, 0.12665414692212706, 0.12592415525359157, 0.13300931465202592, 0.10367730077421056, 0.16384437649684225, 0.08732393724733234, 0.024800404789763864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009134799245308356, 9.999999999998899e-05, 9.999999999998899e-05, 0.050077368060023386, 0.02185557573077912, 0.08317661629051254, 0.017736048310834307, 0.006407437445683506, 0.07901451908820423, 0.04086519317988446, 0.04661034107975881, 0.03797009771118409, 0.022545537363489854, 9.999999999998899e-05, 0.09823440744481216, 0.0438666181233035, 0.03211035123987571, 0.02922181549956482, 0.0382414367777032, 0.04507007276963837, 0.0493098161704596, 0.09783984327902362, 0.02797292889936942, 0.07341753268968365, 9.999999999998899e-05, 0.06829696963833043, 0.028887781886596908, 0.039521724321059604, 0.05692586769250707, 0.0558205925622951, 0.3963034238929426, 0.3835510111246444, 0.42117278416814996, 0.4234527302240304, 0.4376823886963985, 0.4119942267066725, 0.38985406408533385, 0.419681407765063, 0.39359919716669933, 0.05970249005163264, 0.10171866663537876, 0.048636209855857704, 0.0916365539204691, 0.08792452707979737, 0.1076031178669844, 0.05611678705256418, 0.10092500761264822, 0.078896012456111, 0.14239588983590712, 0.14627833332194695, 0.17172358394649034, 0.18565146814990308, 0.15536853551635377, 0.17957163359175865, 0.16464620896133475, 0.17560065689186855, 0.1574896363815227, 0.3221444203149023, 0.21617699908349897, 0.2196955106752978, 0.3107657120772115, 0.2706008586077976, 0.26510263450641847, 0.30563196482103583, 0.2382163152846395, 0.19098740544675907, 0.16333210092405803, 0.2055003273092293, 0.19621574819650134, 0.25263294450799656, 0.20542423856477798, 0.1909623801635657, 0.13876336657774868, 0.23453084133179514, 0.19257439416421485, 0.19300256761136914, 0.18811880062144448, 0.18705454633939367, 0.20812192174567956, 0.18856076401365207, 0.1735256384037126, 0.1839707373846119, 0.19061786579200646, 0.18688868458821284, 0.17371056186035416, 0.17019636273824867, 0.34145452332110904, 0.1726226957681931, 0.22845819544360746, 0.3613300419382057, 0.21126068976052514, 0.16990327330962407, 0.18917345062677515, 0.15029918508523354, 0.16558855660310123, 0.12783680431618027, 0.6056701009847812, 0.09572577125460813, 0.17076453835166616, 0.13482159570899366, 0.6525625421591215, 0.13804716813966644, 0.12009831459735631, 0.10961490735181412, 0.2766185021220976, 0.19841478708293103, 0.12300353838530864, 0.5128495511927298, 0.14822627759441243, 0.19483835446328301, 0.19368164591675296, 0.18984614557911572, 0.1956007974075884, 0.2012679058858512, 0.1994562580266246, 0.19156076106151554, 0.19224325180611956, 0.18461158620415075, 0.2073860188862282, 0.18628177008692082, 0.08314366564570463, 0.08110660319673157, 0.07985505355975997, 0.07481453628988366, 0.08238400669534218, 0.09500294883786631, 0.06337071965256968, 0.0882954981530012, 0.07328437051691983]}, "mutation_prompt": null}
{"id": "42d37333-0e1c-439e-83d3-233f3dc1be3b", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.9  # Differential evolution factor adjusted for higher exploration\n        self.cr = 0.85  # Slightly reduced crossover probability for diversity\n        self.w = 0.6  # Adjusted inertia weight for PSO to enhance convergence speed\n        self.c1 = 1.7  # Increased cognitive coefficient\n        self.c2 = 1.3  # Decreased social coefficient for better local search\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridDEPSO", "description": "A hybrid algorithm combining dynamic differential evolution and adaptive particle swarm optimization to balance exploration and exploitation with enhanced mutation strategies.", "configspace": "", "generation": 2, "fitness": 0.2820372362403433, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "48c58278-b747-4dcc-ac05-adf55ee0f52d", "metadata": {"aucs": [0.8315102245899659, 0.825104212650974, 0.827713046619857, 0.783356763004471, 0.8695235257240552, 0.84823740232511, 0.14942291532295404, 0.844875406489769, 0.8175958592759647, 0.6172189492732258, 0.7193251164953898, 0.6316021988278366, 0.5709079213303188, 0.5891557597437476, 0.6175668165476229, 0.6088200337725953, 0.05709322433805464, 0.05398734643117675, 0.11600879722689028, 0.17354708333878532, 0.17393066137777768, 0.1480527326123502, 0.14824749119920433, 0.14630963911061334, 0.05770709572202648, 0.1350333398663106, 0.12118502846125834, 0.1080829181613715, 0.13857168521204144, 0.10141147068387268, 0.11241824047080173, 0.11476166154173184, 0.1450118019002422, 0.12758694767949164, 0.10798117470731827, 0.12344503151176778, 0.9928019246140842, 0.9913365434916472, 0.9932438811339361, 0.9862777078422167, 0.9938062521797685, 0.9905600732398505, 0.9839443637445876, 0.993838309208914, 0.9896990158261605, 0.61256569137854, 0.5391346862734108, 0.0595633324474365, 0.1496403779756008, 0.5861323402705737, 0.6761675774648006, 0.7075996699011207, 0.5555044348547913, 0.05101716858087124, 0.7012759751219291, 0.16715182777919124, 0.214790543349341, 0.2711761848368053, 0.15876472516249673, 0.1917254261738922, 0.7345864659056877, 0.7878236431911566, 0.23328325321029109, 0.21364355842164795, 0.20443530619804384, 0.20508101223225617, 0.09984565435245762, 0.12524447216247192, 0.12875920872721147, 9.999999999998899e-05, 0.2546087134236872, 0.21061204627236785, 0.21680272349867868, 0.21391292257994887, 0.010043188366178346, 0.16230077897076045, 0.27650482669455756, 0.2240721757596481, 0.24128356984450738, 0.219297659873391, 0.2335042480111824, 0.004951721996487302, 0.02748816149949107, 9.999999999998899e-05, 0.047190186217204944, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029946147380678356, 9.999999999998899e-05, 9.999999999998899e-05, 0.07801326489119187, 0.05709463791772573, 0.05025579734801355, 0.08482435820913037, 0.031404919677097354, 0.029282313169025853, 0.06924371530191731, 0.05463786814831506, 0.11073154904769289, 9.999999999998899e-05, 0.03463579412796991, 0.0489752481534248, 9.999999999998899e-05, 0.13693921680986165, 0.08169211989237424, 0.10894472907139663, 0.11301375983500606, 0.0947061548655973, 0.010402876318379772, 0.046045222836094246, 0.0424199933363032, 0.04805432219308137, 0.15050720556106845, 0.0936502625799207, 0.07930621505201907, 0.08046556439067376, 0.07923805194229627, 0.5208977208694854, 0.5067679223115897, 0.5388627910733557, 0.5563331994247187, 0.20841930727667335, 0.5566524668349513, 0.5226365700065659, 0.5480871270353209, 0.5720794635605854, 0.15409308625598772, 0.11684933580013401, 0.10684469594973978, 0.1037540467188115, 0.08160246582409414, 0.14190848996845706, 0.13490481816529465, 0.13815782970495127, 0.14106926036775114, 0.18421518643309187, 0.22202803830374618, 0.1412706633773818, 0.23171503853462327, 0.1535668735310024, 0.19540068089129914, 0.20432980577986448, 0.17987262381575853, 0.19656857443452624, 0.4847825293313398, 0.2141039016912767, 0.4411849879948433, 0.2309932972933173, 0.527347127476029, 0.4272289588059929, 0.5849128735846753, 0.5367075321120258, 0.36956233561738583, 0.24368222935301243, 0.3253740437559133, 0.19718636765030118, 0.35339744298006115, 0.25612839949202393, 0.3255857935839055, 0.2349178264395373, 0.23202622325782418, 0.25551284420050746, 0.20006496870871904, 0.17818561904883679, 0.20182722436952782, 0.2061285948256948, 0.18999117973503044, 0.22577874434694856, 0.22526412632888992, 0.25374102157282763, 0.22145093435389762, 0.1935372506523203, 0.20811152619979978, 0.24865315676833322, 0.20427683231294136, 0.19340555690228634, 0.21667238743361572, 0.2147723103125272, 0.20566205126146464, 0.21380005274460023, 0.16605223771670086, 0.16498667972478975, 0.1967523067650152, 0.7669992315612633, 0.1772084844480405, 0.19482133434161486, 0.167217923254103, 0.14466139707067338, 0.8861170203746711, 0.2086367278539677, 0.11302344538146403, 0.6260063557629403, 0.6124750100615499, 0.20030546415559147, 0.20821150826802626, 0.1891147050642188, 0.677576651104973, 0.20681835897086043, 0.17532866902526256, 0.20603833434089347, 0.21733987071029792, 0.19773286438904092, 0.19784369441346505, 0.2170004360412624, 0.19731696304887525, 0.20432291130778923, 0.19431013608266545, 0.09225219347461666, 0.09140641070415678, 0.0845410807901491, 0.08228517326699292, 0.08816834579529709, 0.08775939819161882, 0.08971244885362828, 0.09201964602216972, 0.08325044560564798]}, "mutation_prompt": null}
{"id": "1e60d8b4-ada4-4370-80eb-75f2688e8de2", "solution": "import numpy as np\n\nclass EnhancedDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-2, 2, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adaptive differential evolution factor\n        self.cr = 0.9  # Increased crossover probability for better diversity\n        self.w = 0.5  # Reduced inertia weight for PSO to prevent overshooting\n        self.c1 = 1.5  # Balanced cognitive coefficient\n        self.c2 = 1.5  # Balanced social coefficient for global influence\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedDEPSO", "description": "An enhanced evolutionary optimizer combining dynamic differential evolution and adaptive particle swarm optimization with adaptive parameter tuning for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": 0.2657478575516103, "feedback": "The algorithm EnhancedDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "42d37333-0e1c-439e-83d3-233f3dc1be3b", "metadata": {"aucs": [0.8863419822229394, 0.863483941080846, 0.8729314850460674, 0.8857140435018633, 0.8818716546866674, 0.18213612525523326, 0.8849571665925451, 0.17504129627721743, 0.8729881576138885, 0.7362178159607234, 0.7402053356449964, 0.7284523148780034, 0.753145503801971, 0.7808911274985149, 0.7025481621665104, 0.006496026820625778, 0.739462757325438, 0.7226885123124174, 0.11430286643911736, 0.13808762819009368, 0.1322722683672355, 0.1419381980624268, 0.11304713593868487, 0.12775318268420888, 0.13260600152770274, 0.15164575459984841, 0.15484522407221923, 0.11154697245681056, 0.11110819441628206, 0.10860861231435937, 0.10697530916897036, 0.13026404609041187, 0.11579367559992859, 0.12081600566725159, 0.176268694035007, 0.11822711148110943, 0.9902760849269712, 0.9912552205735286, 0.9859990034315894, 0.9943423348988796, 0.9938990238421043, 0.9909618231485021, 0.991240477083689, 0.9936891499360634, 0.98960464230895, 0.6864090679350372, 0.114065839036264, 0.7633726071099969, 0.6971919898253927, 0.1699080222702396, 0.7510219941105564, 0.0886291771588259, 0.12562756310359058, 0.051553845171301016, 0.37227500591707363, 0.2231349511951719, 0.1699956116844853, 0.1599462018365725, 0.19288435702141438, 0.20740373116618516, 0.22712481112573701, 0.11569499588332532, 0.3703062482823333, 0.1299313465099029, 0.2508409287284319, 0.25500743609907317, 0.13076096146999683, 0.10215130378851012, 0.2389495005315988, 0.2513113352095686, 0.13309783561163335, 0.24099223899144917, 0.20732499345011135, 0.2245144752395769, 0.25553233559726873, 0.24711066667283588, 0.2592554291766894, 0.239229632254103, 0.27356913602414956, 0.1295254851279828, 0.25429274713083283, 0.00028914989071415764, 9.999999999998899e-05, 0.008299715394932683, 0.07128470027174938, 0.05943339663730496, 9.999999999998899e-05, 0.0034917376315345416, 9.999999999998899e-05, 9.999999999998899e-05, 0.08200445444769955, 0.08188631370967703, 0.07131250978923342, 0.006973622531362356, 0.0666545383814533, 0.11204104394786407, 0.06077658880938763, 0.04782318180794787, 0.0863807452317038, 0.03412243891408284, 0.046635125688290424, 0.05148750146516268, 9.999999999998899e-05, 0.09306605701062165, 0.07583893116012064, 0.09675863514825522, 0.08908514815788027, 0.0714172431765202, 0.042757499747576366, 0.15077440130398612, 0.043118305022406433, 0.11834224878262356, 9.999999999998899e-05, 0.018036467993901906, 0.0486636780050278, 0.055860488921553264, 0.1420478186170665, 0.5851626717163996, 0.5943786984676187, 0.5544961466169307, 0.5683944670638399, 0.5994384481863918, 0.5892584856260445, 0.5651382412469654, 0.5937833032156188, 0.5607769365105535, 0.08687249314176038, 0.051361183366223084, 0.07017927946321156, 0.11025670540146126, 0.11255183115427858, 0.10828712499112736, 0.07230592880485942, 0.17529358531886174, 0.15716515433341993, 0.29310766795476895, 0.18436027370892627, 0.2160301511809275, 0.1853709538777819, 0.4206797270007395, 0.22932796724270976, 0.1910150238645083, 0.18806555229960353, 0.26165258226289656, 0.25590786341776595, 0.23897182042351894, 0.29310373224207253, 0.20679536456843173, 0.3337244563348798, 0.3100823603440649, 0.2884205849358503, 0.1976285332716704, 0.6359514688509269, 0.21036954875722758, 0.18734233653798915, 0.24469030012226545, 0.1718128928845143, 0.24440173964592238, 0.3121630223362124, 0.3043556784516708, 0.1921242537870138, 0.28253434047419057, 0.21985219427634373, 0.20940543139815615, 0.21502310289981852, 0.19896198488526196, 0.20576820537709384, 0.2262446682937589, 0.233097378295002, 0.2175223398080035, 0.22656890034467114, 0.22304963854913784, 0.19792566401123102, 0.24230157338092373, 0.17888830763326313, 0.19035014351365442, 0.19148624112917212, 0.18909033216299187, 0.24827297357704103, 0.18914907010838877, 0.16687135344096093, 0.1709424051108075, 0.15262414344519948, 0.13121556427863157, 0.1879245423975202, 0.11679252148808172, 0.2087128682475221, 0.12574887284792224, 0.1500817051683121, 0.1124690064992625, 0.21042163785097656, 0.1110696213106237, 0.14035021460286135, 0.1277715823225799, 0.22500135263499188, 0.2039330932166883, 0.15502283973370523, 0.16283641694430406, 0.18160506941946297, 0.1833698009313195, 0.22491590251975513, 0.20244375764591638, 0.20209204835221228, 0.19003485898082684, 0.18839530198664178, 0.1907533744724228, 0.1975716711055424, 0.0996189617601907, 0.14594548100861193, 0.10087994426139046, 0.09775582543348282, 0.06342035096140841, 0.07757587292848944, 0.08792839234662164, 0.07898885533831401, 0.10024744411246722]}, "mutation_prompt": null}
{"id": "e11b52ca-ccca-4619-b8ed-dc30f6193787", "solution": "import numpy as np\n\nclass AdaptiveEvolutionarySwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adaptive factor for better balance\n        self.cr = 0.9  # Increased crossover probability for improved convergence\n        self.w = 0.5  # Adjusted inertia weight for better exploration\n        self.c1 = 1.5  # Balanced cognitive coefficient\n        self.c2 = 1.4  # Balanced social coefficient for global exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveEvolutionarySwarm", "description": "Adaptive Evolutionary Swarm (AES): A hybrid algorithm blending adaptive differential evolution and swarm intelligence with self-tuning parameters for dynamic exploration and exploitation.", "configspace": "", "generation": 4, "fitness": 0.2994682513736934, "feedback": "The algorithm AdaptiveEvolutionarySwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "42d37333-0e1c-439e-83d3-233f3dc1be3b", "metadata": {"aucs": [0.8922140223261009, 0.8847367245389328, 0.8821289120091705, 0.8923721540321741, 0.9024325890937305, 0.1815857777054798, 0.18223577918651812, 0.8958118729459034, 0.8720033004579256, 0.7657350504810517, 0.753532422356499, 0.7414205444648327, 0.7499746591978802, 0.7427444804054005, 0.7443428606334348, 0.05853701186431559, 0.04974306239578841, 0.7683617158781091, 0.15259033015826484, 0.14225652025750513, 0.09878253399193349, 0.1309370129880144, 0.11508149324337535, 0.17779613110683767, 0.12100632299884129, 0.15848968083371706, 0.10055543033250247, 0.10923597504498173, 0.09335130919956502, 0.10449172863704903, 0.1100200227482081, 0.098270055185536, 0.11217608096186782, 0.09313217734405932, 0.11325865472426122, 0.15103649852717083, 0.9897665400624176, 0.9912411182514189, 0.9860168671929874, 0.9943077640771694, 0.9917537213709641, 0.9902726202630627, 0.9913211637783504, 0.9903174329447468, 0.9892987511104527, 0.11524463437198318, 0.7146607940519374, 0.7715823469192946, 0.7584404691420875, 0.7478199910906169, 0.7590812958603863, 0.7388857072544983, 0.748378876963691, 0.0876721356246708, 0.8962510128863501, 0.3757091156565776, 0.37015998598850197, 0.15972027243738163, 0.20948524508979882, 0.2786804471924612, 0.11663147030990717, 0.17172556257176197, 0.1771216708197002, 0.2540997686036268, 0.4208113697398802, 0.26973786522657095, 0.25256521691653777, 0.5188369098085877, 0.25835574594364086, 0.12557136396220814, 0.25293340123675834, 0.2568818487362764, 0.2593169892001541, 0.2651102847988164, 0.24654097197982494, 0.22014254285056423, 0.2514380795640152, 0.2748384599918381, 0.29555570499660455, 0.27604394623000006, 0.2631136889593412, 0.002011113495573036, 9.999999999998899e-05, 9.999999999998899e-05, 0.007609147677409389, 0.1213239069294948, 0.12309561157599291, 0.0010087141435364266, 0.0050771576527226525, 9.999999999998899e-05, 0.08293941556586037, 0.18526986124664802, 0.06114741674999091, 0.04493491141000849, 0.0468614110462795, 0.07233982683813234, 0.013365457822642979, 0.07859581478956679, 0.08100182995249638, 9.999999999998899e-05, 9.999999999998899e-05, 0.04989581388246911, 0.09402511238886069, 0.10346679243893486, 0.07792929031178952, 0.09866882373251906, 0.10058361735922772, 0.07794403005554706, 0.14238379050160732, 0.04324507605841321, 0.17543093195200676, 0.0871216601261855, 0.22048817602732484, 0.12198909635111321, 0.11345850019462866, 0.05703027505012359, 0.1579686734436686, 0.5417779196423347, 0.6026917172451182, 0.573741592252215, 0.6448185318540689, 0.5488246852508518, 0.5726084885874122, 0.5833492028556608, 0.5837185649196138, 0.5796756493980237, 0.07122238764729538, 0.1373663890097947, 0.08472290654212067, 0.049569951050769445, 0.15842315783130945, 0.13038443659920596, 0.10700997511833577, 0.15445718855989432, 0.11511415473768993, 0.2181003109002404, 0.501500799074585, 0.18372117457324433, 0.23453050173169798, 0.28398740189073046, 0.25780678247425626, 0.28064243441008985, 0.2480226600473251, 0.20597749360058237, 0.4445973744661309, 0.41805373905022913, 0.3576987338729919, 0.19285873084272653, 0.31626685470613114, 0.32368345713218316, 0.222000147120324, 0.5039351453838683, 0.46405642489811105, 0.19818564347420542, 0.22497868698482548, 0.25944784087832395, 0.2851002561352022, 0.24936519805004553, 0.38302887444160116, 0.21626037837751955, 0.26277440640229466, 0.27984737668524684, 0.20008697843849077, 0.20330768187587522, 0.21840258391728673, 0.1833881763327848, 0.23903916083248633, 0.19891948381864244, 0.20280117334969716, 0.23423954207592956, 0.2544514841244627, 0.18866447452230672, 0.2047788678801623, 0.2295966594791038, 0.2498555321892444, 0.1991271873684295, 0.20877135867079633, 0.18019801287243242, 0.2470667417121507, 0.20646974381132843, 0.1664921235459328, 0.1728827090467464, 0.15331047796254893, 0.19840078318478904, 0.1775944352149852, 0.21102417786731054, 0.14171961963807245, 0.16784424307684764, 0.1715897836795075, 0.15317789924227565, 0.11177582212174786, 0.33100263684081654, 0.7590700695000158, 0.834892865317358, 0.1679282886741641, 0.18955964726689134, 0.8352021887549899, 0.09380756294356796, 0.1829384244263258, 0.18491046924741572, 0.22006105054412384, 0.20171813238682468, 0.20794511875661992, 0.19000193318011083, 0.20332598409450975, 0.189466805461329, 0.21337544004184084, 0.0974895050550858, 0.13476252416580536, 0.09080153446282735, 0.10270547429394972, 0.07678621281252695, 0.089605070056606, 0.09667338835330685, 0.1052315115664032, 0.09046448689940878]}, "mutation_prompt": null}
{"id": "d482ad43-95d7-4d3c-b0d6-f228c7493072", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveEvolutionarySwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.9  # Increased adaptive factor\n        self.cr = 0.85  # Slightly decreased crossover probability\n        self.w = 0.6  # Updated inertia weight\n        self.c1 = 1.7  # Enhanced cognitive coefficient\n        self.c2 = 1.5  # Enhanced social coefficient\n\n    def __call__(self, func):\n        quantum_amplitude = 0.1\n\n        while self.eval_count < self.budget:\n            # Quantum-Inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2) + quantum_amplitude * np.random.randn(self.dim)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Quantum-Inspired Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i])\n                                      + quantum_amplitude * np.random.randn(self.dim))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredAdaptiveEvolutionarySwarm", "description": "Quantum-Inspired Adaptive Evolutionary Swarm (QIAES): A hybrid algorithm incorporating quantum-inspired mechanisms into adaptive differential evolution and swarm intelligence for enhanced exploration and convergence.", "configspace": "", "generation": 5, "fitness": 0.1900260424748682, "feedback": "The algorithm QuantumInspiredAdaptiveEvolutionarySwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "e11b52ca-ccca-4619-b8ed-dc30f6193787", "metadata": {"aucs": [0.3798107918111866, 0.380828872853778, 0.369353275691765, 0.364619742424212, 0.39470083739176576, 0.36135610442793975, 0.36785861553844434, 0.37537963310089795, 0.3731355423599174, 0.01994299458904225, 0.001663560920873497, 0.007111011166540782, 0.0008569758031217178, 0.007788851943246855, 9.999999999998899e-05, 0.002399600605735741, 0.007487546261571665, 0.031713931532259765, 0.10815625990123878, 0.09620925963192972, 0.09159868903182056, 0.10388441376635515, 0.06667936338903802, 0.06436469037189163, 0.10104142438676933, 0.09314788076219682, 0.1028219067917786, 0.0972754843562601, 0.10135824054203946, 0.08575871353411257, 0.09557564787816131, 0.08504222437321607, 0.09297575201045039, 0.09500423250341372, 0.09403996652188384, 0.055940065359335156, 0.9928970874579777, 0.9911722230683431, 0.9905553867522069, 0.9931024890536354, 0.993946436588289, 0.987386160357822, 0.9894104981783278, 0.9955202755293648, 0.9904484715074067, 0.244747075364104, 0.23363864135833634, 0.24203410387982016, 0.23830557787909912, 0.2680692571057356, 0.22207612462222126, 0.2586527558944409, 0.23168179893292717, 0.22091605132043202, 0.27829662547156564, 0.28015658719968684, 0.2554213500450935, 0.25935437300405595, 0.2574667670055085, 0.18025446480074736, 0.22583205234003068, 0.23212311930877605, 0.12741255840331045, 0.11114704027974354, 0.16423969757703893, 0.132009931391873, 0.11899253506057561, 0.12374921118866333, 0.11952280201121523, 0.09793778031366018, 0.14882112051944207, 0.15772807523220944, 0.1326742502686613, 0.14265952236688406, 0.15814129089280216, 0.11963433209803265, 0.13745026322441523, 0.11537228229921204, 0.1253685740779652, 0.1239096291214119, 0.07557016751144696, 0.002688105285585163, 9.999999999998899e-05, 9.999999999998899e-05, 0.015083038969785911, 9.999999999998899e-05, 0.020775848217807646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03822134700662916, 0.02536575777292782, 0.05711359859584608, 0.04169755311798384, 0.07436276762731808, 0.008176672569907506, 0.05333927725696963, 0.026224107248271178, 0.0776139640131307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04207156225348263, 0.06371369688327433, 0.04510469787142646, 0.05163786696784323, 0.05379175486590082, 0.08149422870846879, 0.058366636377875314, 0.0621386199426226, 0.050315368341921074, 0.3607959495009725, 0.366550252093508, 0.3537648368664046, 0.3615039299684575, 0.3590345167577017, 0.34268396712813176, 0.34134429992351956, 0.3776775741103796, 0.3476646969028008, 0.0933522073577675, 0.1063271438703639, 0.07425980490295447, 0.08897129964468553, 0.10448045928164507, 0.08363524197366656, 0.07892671516129957, 0.07920965994646245, 0.10103385201629955, 0.1578654416708385, 0.21047542839025213, 0.1849769013802608, 0.13288379681163587, 0.2217011946790517, 0.1945133832320225, 0.17141273968268667, 0.21328396393162563, 0.1682130323228348, 0.2649467659912432, 0.2704688280961035, 0.24328967601536566, 0.25589780092876246, 0.25841980442271817, 0.26693965890890614, 0.2335216589139094, 0.26091633305340955, 0.25310070008799435, 0.203277575537973, 0.1833147085180893, 0.1980575938783692, 0.1659558594202073, 0.172887200116285, 0.16364541913682729, 0.16529090542698655, 0.20984788046447167, 0.1588464878482726, 0.1966964774507175, 0.18633400021020952, 0.1857447566730952, 0.20691459628020348, 0.17971892868500128, 0.1933306396442439, 0.21645461671021493, 0.19257326310833567, 0.19754061272314538, 0.1888490544153495, 0.18477268688408321, 0.17753187241225588, 0.20369949065577697, 0.17174619790190393, 0.1802185335467853, 0.18286252190910313, 0.17644702158044234, 0.17747187360070493, 0.1942684071157038, 0.1717929870393895, 0.1959005388179781, 0.5163004039798648, 0.1648639650287469, 0.1747260937921934, 0.13443945252700884, 0.12406702782986434, 0.15721378550480236, 0.2048759515616293, 0.16787459848457054, 0.15474027627478348, 0.20487153465385977, 0.5572445007706934, 0.20656446593021827, 0.20994550460642503, 0.3632830529548553, 0.2112447213836942, 0.1774391131884706, 0.17580876103932241, 0.17328028185687705, 0.18282021036711693, 0.19037098125598328, 0.19331995022307802, 0.19115620599384453, 0.1943459510075075, 0.18332123976803094, 0.0812631896514655, 0.08767967145857747, 0.07524628823808366, 0.08119420505032993, 0.08897313384999905, 0.0755978017606107, 0.08720722637085421, 0.08799937595558571, 0.0867246373201277]}, "mutation_prompt": null}
{"id": "38e9f3e6-ac8f-4946-bc68-d143f7186b40", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.9  # Slightly higher for more aggressive mutation\n        self.cr = 0.85  # Slightly reduced for diversity\n        self.w = 0.6  # Increased inertia for better balance between exploration and exploitation\n        self.c1 = 1.3  # Slightly reduced for refined cognitive search\n        self.c2 = 1.7  # Increased social influence for global cooperation\n        self.q_factor = 0.05  # Quantum parameter for probabilistic jumping\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-Inspired Mutation\n            for i in range(self.population_size):\n                if np.random.rand() < self.q_factor:\n                    quantum_jump = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    self.population[i] = quantum_jump\n                    continue\n\n                # Adaptive Differential Evolution\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredAdaptiveSwarm", "description": "Quantum-Inspired Adaptive Swarm (QIAS): Integrates quantum-inspired exploration with adaptive differential evolution and swarm intelligence for enhanced convergence.", "configspace": "", "generation": 6, "fitness": 0.20314441319489573, "feedback": "The algorithm QuantumInspiredAdaptiveSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "e11b52ca-ccca-4619-b8ed-dc30f6193787", "metadata": {"aucs": [0.5651021273985984, 0.4552114361417857, 0.48847712335257676, 0.42089890214693715, 0.5388184969162161, 0.41079528927577535, 0.39085642534807497, 0.5046399745170711, 0.5566533099926636, 0.059185292245640064, 0.03939201045066787, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03765951311320659, 0.047877757598471904, 0.03332997350781952, 0.036570446616259855, 0.11213356381079398, 0.10088732011616253, 0.13033886259348326, 0.06727165980183836, 0.10362097714649676, 0.12420176881567935, 0.0977041900399257, 0.10279322599702556, 0.09615829005522414, 0.07324333848201825, 0.0897267558753867, 0.08598255533836763, 0.11539744931678853, 0.08744648982018788, 0.07953038466372597, 0.10866750616418908, 0.0776205357832479, 0.08757167265086796, 0.9909099222010815, 0.9947545507903216, 0.9928886599733102, 0.9880804583692877, 0.9903418525711936, 0.9911419565996905, 0.993251405847455, 0.9907705702235726, 0.993758639342261, 0.2556997520682325, 0.26239196145266197, 0.2633164284716206, 0.22122084929862884, 0.14234869037994358, 0.2591596096859574, 0.39250366332491116, 0.23713986673726994, 0.18471590937618365, 0.248475455907056, 0.24267149793750875, 0.27329307486039955, 0.2948382041999875, 0.1900176595626809, 0.3320226512392843, 0.3012864107994636, 0.3058146880757252, 0.3273292368611185, 0.14619614512814627, 0.14315516759574698, 0.12111002801387472, 0.12717021965243458, 0.1675203670076416, 0.0811776511013168, 0.16145583240148464, 0.12955488619890387, 0.1032639977982075, 0.16385052934554856, 0.10913698785350012, 0.13528774461815296, 0.11001799218326902, 0.1619438758947317, 0.10411056422572273, 0.033569037522310996, 0.07458586764881525, 0.14328302326541764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014533020973488964, 0.009520194071064858, 9.999999999998899e-05, 0.012041372743156309, 9.999999999998899e-05, 0.05269894310123324, 0.014829691744726148, 0.06314337902180689, 0.05373514589894135, 0.004417570068516952, 0.07321940763696622, 0.07845647177031168, 0.06523596247074492, 0.08799466579197801, 0.003984674398289423, 0.005550933304335426, 9.999999999998899e-05, 9.999999999998899e-05, 0.01876460987823214, 0.00033562199890424527, 0.04832543342311435, 0.023833247298691407, 9.999999999998899e-05, 0.03666723655605619, 0.06345917383971877, 0.0360596289167785, 0.038868365133643556, 0.10143782464127749, 0.047420956979871476, 0.047562298052620244, 0.05007745734890379, 0.04898426435907144, 0.3758552709148625, 0.39001468107837534, 0.45481246946566023, 0.4026956387634758, 0.41802621677885055, 0.37080917870611707, 0.39546458435284393, 0.3833105114536669, 0.37692384326869277, 0.07598198174843185, 0.07960486695729319, 0.11303059163870877, 0.10091807405241104, 0.07252059182982395, 0.11024726196642809, 0.12037834174042095, 0.09997715799653228, 0.10082389955508353, 0.18037394912175841, 0.2101070085088339, 0.1752692564787509, 0.2478666101716941, 0.16820696200813945, 0.2118306789291482, 0.16613003652212444, 0.2711715037096807, 0.2522603453978598, 0.23460517948933124, 0.2956587930405711, 0.26584675723084583, 0.311079802199856, 0.2574287033774446, 0.22996821653192356, 0.278343019380488, 0.30642352457253885, 0.264949174178002, 0.18367645013332212, 0.25117567759885995, 0.21020561251904124, 0.2058946637350113, 0.172231463325337, 0.18197360726117273, 0.2534436253059148, 0.2651369978524123, 0.18042118085786663, 0.20123554523147347, 0.1996465716466379, 0.16780559769795034, 0.18121538013283323, 0.2189826981621089, 0.18557782542158097, 0.20538309104678854, 0.1835762816475226, 0.1885810926178456, 0.1842282097714274, 0.19707817685661289, 0.19766063991070482, 0.20469377410450684, 0.192052184967496, 0.18505233149543687, 0.18303906405013126, 0.18405963184483165, 0.18454783937295094, 0.14961818995863962, 0.559410886747618, 0.1806081917912694, 0.1716593955340462, 0.1666598904153176, 0.16572242231612377, 0.14308945391408834, 0.188405717725446, 0.1830654894778786, 0.160064028316375, 0.16560002323411505, 0.35557735055515893, 0.5210841599466738, 0.16595401376511598, 0.12665944483376956, 0.12644218927447104, 0.15113292730606787, 0.265542332205447, 0.18152209446792245, 0.1942474784238315, 0.1856224133189326, 0.20908605877481645, 0.20278243595703316, 0.20613431629602763, 0.1871862080320077, 0.19616507192247434, 0.18822363421867105, 0.07782375295708677, 0.09418319394643182, 0.09544264459438456, 0.08610911356612594, 0.07576459121235168, 0.07327773998000664, 0.08353844036371938, 0.08436838428961657, 0.08927395264631466]}, "mutation_prompt": null}
{"id": "69393123-7473-460c-a731-9aaec0a93095", "solution": "import numpy as np\n\nclass DynamicAdaptiveSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.9  # Slightly increased adaptive factor for enhanced search capability\n        self.cr = 0.85  # Adjusted crossover probability for better diversity\n        self.w_max = 0.9  # Maximum inertia weight \n        self.w_min = 0.4  # Minimum inertia weight \n        self.c1 = 1.6  # Optimized cognitive coefficient for individual learning\n        self.c2 = 1.7  # Enhanced social coefficient for better global cooperation\n\n    def adaptive_inertia_weight(self):\n        # Dynamic adjustment of inertia weight\n        return self.w_max - (self.w_max - self.w_min) * (self.eval_count / self.budget)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                w = self.adaptive_inertia_weight()  # Dynamic inertia weight\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "DynamicAdaptiveSwarm", "description": "Dynamic Adaptive Swarm Optimization (DASO): A refined strategy leveraging dynamic parameter adaptation and cooperative behavior to enhance convergence and accuracy on diverse optimization tasks.", "configspace": "", "generation": 7, "fitness": 0.17773977146250067, "feedback": "The algorithm DynamicAdaptiveSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "e11b52ca-ccca-4619-b8ed-dc30f6193787", "metadata": {"aucs": [0.5402416922029748, 0.526465438723126, 0.5601753009057988, 0.18741083067777786, 0.1899433956520591, 0.15675066320983133, 0.1770100566811489, 0.5242487223539789, 0.17140543788549134, 0.044829546077896354, 0.25976254128767584, 9.999999999998899e-05, 0.025551026720976422, 0.27416778958679255, 0.29768784488422995, 0.03164654441078307, 0.31301090770026085, 0.03579784062576141, 0.11142699449550508, 0.10244015496834746, 0.09072416422140828, 0.06813050751434313, 0.09998373620671264, 0.10071703183826464, 0.1121036360501042, 0.08912737677457205, 0.1111681403893997, 0.08616661809946036, 0.06677479882410609, 0.11260963061948404, 0.041210542047711574, 0.10615206645630026, 0.09389541546142444, 0.09003529728803095, 0.09571708590287076, 0.08335043360895655, 0.9928254060195966, 0.9933048629963009, 0.9932776351238736, 0.9856313825605321, 0.9926784002675595, 0.9911069901645474, 0.9823551819085488, 0.9936898303691899, 0.9896111859391139, 0.058062237492739976, 0.05358516650107792, 0.05846067535641031, 0.03858578864127615, 0.1343103510361372, 0.1300610713251119, 9.999999999998899e-05, 0.08384164147893403, 0.05008673995890933, 0.20908994806305337, 0.18321386853948451, 0.1847134472573585, 0.15150918911278421, 0.20896214389146417, 0.1780071455961213, 0.18477169924827797, 0.12278475409629663, 0.12704698124996627, 0.08349978888903575, 0.1222311270488512, 0.09314142798545633, 0.09165417627120898, 0.1322401544765598, 0.09427192829483988, 0.10037336747874814, 0.13489466618333767, 0.12863488556825542, 0.10391224454567127, 0.13187256773377043, 0.13399801750595164, 9.999999999998899e-05, 0.13328880365363183, 0.16714059337822362, 0.023563079847389368, 0.16820692838733597, 0.1037310755632781, 0.06678659652070784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04333067423756398, 0.024748195319900468, 0.07567605129767085, 0.039022639473175746, 0.007904998332625146, 9.999999999998899e-05, 0.039311581089271574, 0.04606685984693526, 0.08406336655325053, 9.999999999998899e-05, 0.13362027584914338, 0.025287632467070553, 0.036575701778489234, 9.999999999998899e-05, 0.035684128570099394, 0.03995606741359514, 0.11256034800325798, 0.056592256289359155, 0.08245386355707474, 9.999999999998899e-05, 9.999999999998899e-05, 0.11703530205284296, 9.999999999998899e-05, 0.004696051993482442, 0.057038899934168, 0.04298283235262901, 0.05954873208270706, 0.36745459140181025, 0.39109569926629373, 0.15162829845889358, 0.4131809618559017, 0.4252154807796611, 0.3844902418282097, 0.3945395218971991, 0.39162209514795177, 0.3968418125105512, 0.08538793129121225, 0.049828546311544764, 0.08186665912533897, 0.0989637026985758, 0.0993602566577434, 0.08699996736969517, 0.08422488092980696, 0.08866466107732685, 0.0935784173320442, 0.16703216691314904, 0.18050153341261665, 0.14112334693807482, 0.12882380884855416, 0.1533348481892659, 0.16030363637858358, 0.1668593581260287, 0.15686462407534507, 0.12624721541460326, 0.20392506922709452, 0.21557406401406376, 0.28303708710786635, 0.19719756804699318, 0.18493751132894287, 0.2897951234650764, 0.2983270338806613, 0.3437176919548335, 0.3429964202610868, 0.19061948438986698, 0.19546383825869984, 0.13259676099210815, 0.17290529663312848, 0.16873530600997932, 0.13916939585889343, 0.17195535512511162, 0.1345601189267236, 0.21246538345698662, 0.20549556851824713, 0.18283007516221406, 0.19616700745552018, 0.15042616141126508, 0.1813143977972982, 0.17950021638735747, 0.16986276869254413, 0.177702846572805, 0.1841563026101003, 0.18712613070741368, 0.1827369404717759, 0.177016542710837, 0.24870111018359486, 0.20214730353344612, 0.19416710549764804, 0.19541970773552453, 0.1999720250468935, 0.1900552542585371, 0.16487690428506485, 0.08282190447071913, 0.16937065589016087, 0.15847004907508888, 0.1422973059339553, 0.11550771538380522, 0.15217483888483363, 0.15403489812184235, 0.15725155562194815, 0.14888635454213184, 0.16678643587490094, 0.1614495809369526, 0.1085340928128733, 0.12233325209991541, 0.18551271987330165, 0.19599435949285526, 0.19450087028142626, 0.4682427566319659, 0.18762439451879587, 0.18079456076974243, 0.18952244345787694, 0.17863193496181917, 0.19801035289587088, 0.1806808289636208, 0.19845392449545807, 0.20470891836508853, 0.18374865301358156, 0.06446456194813222, 0.07232060062364021, 0.07748060008889679, 0.06667498516024228, 0.07668216847785714, 0.07646115117656371, 0.07897376401549061, 0.07297795127495121, 0.07701153117685755]}, "mutation_prompt": null}
{"id": "fa5da13e-dbe0-4445-8189-9737605ca469", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.7  # Adjusted factor for balance\n        self.cr = 0.85  # Slightly decreased crossover probability for robustness\n        self.w = np.random.uniform(0.4, 0.7)  # Randomized inertia weight for exploration\n        self.c1 = 2.0  # Increased cognitive coefficient for individual search\n        self.c2 = 1.7  # Increased social coefficient for better global exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridSwarmEvolution", "description": "Enhanced Hybrid Swarm Evolution (EHSE): A refined hybrid approach combining adaptive differential evolution and particle swarm optimization with probabilistic parameter adaptations for superior convergence.", "configspace": "", "generation": 8, "fitness": 0.26280394156085146, "feedback": "The algorithm EnhancedHybridSwarmEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "e11b52ca-ccca-4619-b8ed-dc30f6193787", "metadata": {"aucs": [0.7831491385939265, 0.8576504347865697, 0.834890522852561, 0.8186549244256216, 0.8653642819288574, 0.8159390380672272, 0.7802762507559147, 0.8609317463715475, 0.8305790926505388, 0.03760750045258243, 0.07380092830538776, 9.999999999998899e-05, 0.04014588446752443, 0.7439095978574559, 0.6386706859947922, 0.5394225969901061, 0.7115285946039771, 0.6473911220729518, 0.1494485409154982, 0.16310599320991404, 0.15057208589506832, 0.15206320097800596, 0.13116233788707576, 0.44586950390714153, 0.13888198739415913, 0.16371818009894434, 0.16077460880511585, 0.10164611141468527, 0.14173799605885395, 0.11894827878265712, 0.13705359669636785, 0.13339484937579305, 0.13367119880206624, 0.13680792555462373, 0.11859677462530649, 0.03842675708235643, 0.9880979550693887, 0.991506085826433, 0.9920249518301687, 0.9911255963875827, 0.9916868298953357, 0.99122921086767, 0.9885115565128079, 0.9927180648952819, 0.9926641407786202, 0.05966443060112725, 0.589826118920412, 0.6341444672599403, 0.14862017212533485, 0.15054798766701138, 0.6016531235092338, 0.12613274935883712, 0.12651649059004688, 0.12305447503018185, 0.21606678918407174, 0.6319297285818408, 0.36061996566817944, 0.20633772878919665, 0.28003956634942906, 0.36627965099196436, 0.18661651826537762, 0.22455975765331304, 0.21468121609438962, 0.1891932246974577, 0.2174533017646525, 0.12589336524693684, 0.12193702497808878, 0.12646103449345514, 0.18594867778003632, 0.18517603752537504, 0.20021883253978445, 0.1593984941060198, 0.19078953609867422, 0.2104492906068295, 0.19945058846652275, 0.20347642306118385, 0.23231595740312605, 0.2092960146876266, 0.03317835719923712, 0.23373838046942141, 0.23827426770353077, 0.00011453826659346689, 0.04342096622478042, 0.009416061649255458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035099004581116144, 9.999999999998899e-05, 0.0984641621791934, 0.02893992048955918, 0.044304493858106975, 9.999999999998899e-05, 0.018886096869205393, 0.06956980288619674, 0.01871452290545017, 0.057541078710357185, 0.11817642410939733, 9.999999999998899e-05, 0.0459929492871024, 0.04410381208606273, 0.10604094530620478, 0.07558999788335663, 0.08731312158813975, 0.09104797684564125, 0.08622239375529839, 0.1583118963290937, 0.1604632591135554, 0.051861117077522834, 0.010832418775607588, 9.999999999998899e-05, 0.17315559661822366, 0.037825864801030895, 0.046384306682707765, 0.08107367149984801, 0.056121623248239993, 0.5349421539059471, 0.5513790530056428, 0.5435418455287764, 0.5151125830085748, 0.5910041064657614, 0.5145015091693219, 0.49747471449879543, 0.5360768150087871, 0.571642370029504, 0.0746727526029437, 0.13328188943705677, 0.10182200130429886, 0.08937445007291844, 0.10448894431380962, 0.13134759470496227, 0.14677673075828168, 0.15117732971761, 0.0989976826606217, 0.14815735563241217, 0.24781546096802864, 0.1799959805354332, 0.17561607333625784, 0.1921984692265506, 0.17470830097495127, 0.1646994478335222, 0.4797338168776686, 0.18069880578041897, 0.22726706995644252, 0.49676588896150164, 0.37165003295656285, 0.4912826150756959, 0.35255600509393314, 0.32727277175622005, 0.20398296493125712, 0.34070134532360796, 0.5351567422928525, 0.28783073570029394, 0.18217891210588566, 0.19398845264986053, 0.26576316086233887, 0.3580438636978225, 0.27613567208199585, 0.1301742497598427, 0.24390272532941004, 0.22221971463381274, 0.21361022718876677, 0.221788216393922, 0.2645869956979263, 0.17785695313557504, 0.20244691446607876, 0.20244707921432692, 0.17583190515249136, 0.21115800279915076, 0.20164849893544845, 0.17696955536447256, 0.2004552749322963, 0.1943337907212146, 0.2055981475836839, 0.20441364415275243, 0.21797481817809117, 0.205692820294742, 0.2190943137854684, 0.21668525570304642, 0.12467318201578059, 0.16481165570070222, 0.8763362396535814, 0.1841532555989338, 0.1718917108758855, 0.14752129700694516, 0.12917020275343094, 0.12119079583044134, 0.16669769729584893, 0.12667175116292473, 0.15336375421844695, 0.14539339336303259, 0.1276755892532383, 0.16483011202041398, 0.628975768289294, 0.11337829614111616, 0.2042476371942431, 0.6013939178606902, 0.18268941581551534, 0.2012767008651546, 0.20674452989705727, 0.1898115416548677, 0.19453485944325588, 0.19865790427159769, 0.1870395000342696, 0.18952196479385053, 0.18898330660777318, 0.0892424893154301, 0.10102927222621305, 0.08561126680715991, 0.08041403170811301, 0.08552855510064705, 0.0901745040222317, 0.083036244758393, 0.09108973228553263, 0.06759040137809391]}, "mutation_prompt": null}
{"id": "73fd249b-7948-453b-87bc-07470836cd41", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.85  # Slightly increased adaptive factor for better exploration\n        self.cr = 0.95  # High crossover probability for effective convergence\n        self.w = 0.4  # Adjusted inertia weight to improve search dynamics\n        self.c1 = 1.6  # Slightly increased cognitive coefficient\n        self.c2 = 1.3  # Adjusted social coefficient for refined exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                # Mutation using quantum-inspired mechanism\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                phi = np.random.uniform(0, 2 * np.pi, self.dim)\n                mutant_vector = x0 + self.f * (x1 - x2) * np.cos(phi)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Dynamic Role Assignment in Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = self.w * self.velocities[i] + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i]) + self.c2 * r2 * (self.global_best_position - self.population[i])\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumInspiredSwarm", "description": "Adaptive Quantum-inspired Swarm (AQS): An enhanced strategy incorporating quantum-inspired mutation and dynamic role assignment to boost exploration and exploitation balance.", "configspace": "", "generation": 9, "fitness": 0.2969291119059976, "feedback": "The algorithm AdaptiveQuantumInspiredSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "e11b52ca-ccca-4619-b8ed-dc30f6193787", "metadata": {"aucs": [0.9150512541922219, 0.9135758942162041, 0.9247462450646895, 0.921751344399571, 0.9174734473220922, 0.19055915715941896, 0.9147910194904634, 0.9091122214917989, 0.9186544558861046, 0.8182220557386353, 0.8140004060385597, 9.999999999998899e-05, 0.8148800875927598, 0.8371661529720992, 0.7968179223478371, 0.8154790274275705, 0.05448704438611951, 0.8259844382437979, 0.14355423144709167, 0.16022891489794222, 0.16055458686837842, 0.11480968735387453, 0.16212778341095868, 0.13752781943313297, 0.13202601700496108, 0.14052513883552764, 0.11043746801938525, 0.13249440733531903, 0.11584710591541658, 0.18739834739354555, 0.10995305108726294, 0.15782757114723756, 0.1404967579421893, 0.15937760145925206, 0.11504423461466218, 0.11610739528738301, 0.9859123902589557, 0.9933660829040948, 0.9897401054386491, 0.9905153904260872, 0.9907829159382381, 0.9896160396972733, 0.9909438194836121, 0.987145344585739, 0.9900120488595757, 0.8163534442317724, 0.06000997757587989, 0.8173987288410963, 0.8044258899628655, 0.7972372397054163, 0.19192750223803134, 0.8317550116379746, 0.08854896366355947, 0.0884125670357917, 0.2795750790935645, 0.22229885422934326, 0.1648653406485462, 0.38300482461448093, 0.19391593351197767, 0.16096314738763084, 0.16566216583519633, 0.23194310963613285, 0.12952632704644962, 9.999999999998899e-05, 0.28957717280452067, 0.12476198888960166, 0.28072252986073454, 0.2644973352071238, 0.13467815665782035, 0.294150320060371, 0.31217823343674334, 9.999999999998899e-05, 0.133999945867174, 0.27566948417601356, 0.22287114726792856, 0.13339553535959836, 0.3180958012105348, 0.29231489507807906, 0.1320876202656731, 0.13231663711596697, 0.2973658009217074, 0.02546631430283719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0299435130180169, 9.999999999998899e-05, 0.002212642706271306, 0.04687415543847817, 9.999999999998899e-05, 0.11438565043460436, 0.11734683585508487, 0.07761867132027822, 0.02086910085706095, 0.0738169529066729, 0.07420291992032413, 0.10859735517502145, 0.05141543979732088, 0.010429090686578824, 9.999999999998899e-05, 0.079135185583599, 9.999999999998899e-05, 0.11003871021586442, 0.08023268406839501, 9.999999999998899e-05, 0.10628233539887366, 0.08167692755129552, 0.28510541087479746, 0.09433785180012988, 0.05408829077847599, 0.05050850563100484, 0.5222118491505736, 0.006642352199894286, 0.0067691959837349325, 0.09450121860181449, 0.049580066503794984, 0.0837766220890529, 0.5538585410589549, 0.5578446117754634, 0.6956867824799318, 0.5815020950841628, 0.562917062252429, 0.5621110065645007, 0.5961785119558638, 0.5863525189324245, 0.6053686494396108, 0.0849112847430521, 0.08890777954643858, 0.09213493313235577, 0.09247251298534798, 0.14972591351393605, 0.05044983292778016, 0.8331333893905539, 0.11502742479165062, 0.142076805828788, 0.23323921345459198, 0.17650320846633327, 0.1644734156304869, 0.17388467912272665, 0.2971926811671136, 0.33734168636735007, 0.20371114023880588, 0.15325171674677496, 0.1864805425453866, 0.34884762163579197, 0.39425775990226586, 0.36597819966964407, 0.4558866294821976, 0.6418526698468032, 0.35454336028692623, 0.5475673290208418, 0.46911515414562965, 0.43208972223064623, 0.17860724972116582, 0.38037467385803014, 0.40773545506928566, 0.18476255043097867, 0.27429196288004387, 0.17490965789367752, 0.38860922771224937, 0.2561129541091226, 0.23407116350522517, 0.21284037967065106, 0.23783906151817857, 0.23942777749327215, 0.23366233738242492, 0.1986417021722362, 0.23103708512328125, 0.26854688531435245, 0.2062830347326885, 0.22009600763644876, 0.19389163593418868, 0.2463314898029939, 0.25268805153731444, 0.1898663509770122, 0.23052420810789342, 0.19392794016831183, 0.2108378800033378, 0.21053771992083792, 0.19024737606696607, 0.1540229555753716, 0.13592113928827898, 0.1485667905797371, 0.93762001896334, 0.21380769168604408, 0.10377071767073975, 0.16569098936487503, 0.15845496112320234, 0.20001829133745108, 0.10885477048798242, 0.16180906104723802, 0.1669097374957782, 0.8236187263646992, 0.20916439859919922, 0.16749451873478116, 0.7661603868306552, 0.10512992318312808, 0.2133750133287513, 0.1983617595964695, 0.20573280784429404, 0.2092069716699575, 0.20582016318916663, 0.1891007221057316, 0.19196375629609852, 0.20087356045908822, 0.18340784963586565, 0.21258313497718628, 0.10040981184936304, 0.08744161544897322, 0.09229483876156597, 0.08206876847946987, 0.0807957765093188, 0.10892989652444718, 0.10848708631862136, 0.09914932674402976, 0.07329503757801958]}, "mutation_prompt": null}
{"id": "4d96a705-8a3d-46d5-a1a9-e1eff8ef8442", "solution": "import numpy as np\n\nclass HybridEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.85  # Slightly more aggressive mutation factor\n        self.cr = 0.85  # Adjusted crossover probability for diversity\n        self.w = 0.45  # Modified inertia weight for adaptive balance\n        self.c1 = 1.7  # Increased cognitive coefficient for local exploitation\n        self.c2 = 1.3  # Reduced social coefficient for diverse exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvolutionarySwarmOptimization", "description": "Hybrid Evolutionary and Swarm Optimization (HESO): An enhanced adaptive algorithm integrating evolutionary strategies and diverse swarm dynamics for improved convergence and scalability.", "configspace": "", "generation": 10, "fitness": 0.3041806945990189, "feedback": "The algorithm HybridEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "e11b52ca-ccca-4619-b8ed-dc30f6193787", "metadata": {"aucs": [0.8988619382158812, 0.8763416797475692, 0.9176685584587494, 0.9130212791005353, 0.9075396276681037, 0.18324133042418955, 0.916546023000525, 0.8971293262163191, 0.912402298462561, 0.794797298359353, 0.8062432626803753, 9.999999999998899e-05, 0.7619348012933825, 0.7162082837173667, 0.7888104266212521, 0.7757699621936258, 0.052939793325018636, 0.8077437756101006, 0.11549401877701349, 0.1821168674204654, 0.15522706763221705, 0.07377387876586494, 0.14297325407454176, 0.0755669846475786, 0.12768338505747634, 0.09580238462554647, 0.15497254629318902, 0.10843083515633356, 0.12491147494312993, 0.12083226023290516, 0.09530756765047677, 0.13779665105898398, 0.1566423781059617, 0.13177279332624836, 0.7619253387912641, 0.10879208126655426, 0.9900039642566214, 0.9912054886395115, 0.9892835946149235, 0.989272898705286, 0.9914234457349567, 0.9899487446407087, 0.9862712714294536, 0.9924346378955583, 0.9894236925338397, 0.06183252292731378, 0.7928155537406044, 0.8110009337735927, 0.784776980311748, 0.7515827022674024, 0.7909741483818441, 0.7584390145486468, 0.12802432823106025, 0.051815162534438186, 0.8739809071800879, 0.17110312956816653, 0.3722579147199748, 0.160258886420933, 0.21298168633354653, 0.11716648916620764, 0.8517168605390006, 0.8676236766376858, 0.2434905235354231, 0.14516719575401804, 0.24860311735758156, 0.29781877819614655, 0.13090800590083385, 0.2443589859574512, 0.1303644941326133, 0.2594327127745061, 0.2645230835523469, 0.3441445146929325, 0.2315140697613589, 0.25522423304589525, 0.25225974371736937, 0.2174912433319417, 0.2830728691986808, 0.13388793694560286, 0.28618269419577824, 0.2570342101645303, 0.2690944270466177, 9.999999999998899e-05, 0.06097252138800957, 0.0039028851888267546, 0.003477633651886358, 9.999999999998899e-05, 0.08739638045574416, 0.003809179104971916, 0.00021725199339284185, 9.999999999998899e-05, 0.08325068734809105, 0.06296948890020615, 0.1375408918757144, 0.07358551972771188, 0.03207098693312471, 0.06797916226568501, 0.07896953483165858, 0.05830805105307224, 0.01650527624830378, 0.042584952278022836, 0.09216076380221672, 0.05125854933976448, 0.08917389720783231, 0.0972682125789448, 0.0775479689135824, 0.16505206733057365, 0.22087623888785268, 0.1913546031880543, 0.112065499599167, 0.16088240290379907, 0.1534865316146521, 0.06605185127559632, 0.18944526397928962, 0.1657397216088109, 0.08370628041648798, 0.09044655453158523, 0.08368998534173666, 0.5760367622595579, 0.5645473421498871, 0.5590505319882944, 0.6291598150669143, 0.5653177404856273, 0.6046911214298636, 0.6073586107132756, 0.6229915749921491, 0.5890622430666612, 0.15860068531112903, 0.05113818293244898, 0.11123765318381718, 0.12143702979832283, 0.14120350178520058, 0.14618310985829108, 0.13918785708935788, 0.08644495781084627, 0.13168191645119864, 0.1956073197529028, 0.2106100297037068, 0.1629196053201556, 0.16739877125217195, 0.287633471038488, 0.29269468488777917, 0.18103045933226058, 0.18744967843164684, 0.22200238092604163, 0.3581045757802255, 0.3264790476814502, 0.4908168136485659, 0.4905346405928289, 0.26117848054776227, 0.5768961167476715, 0.5495540760447815, 0.6263880465288594, 0.48813714252176343, 0.2509982465498086, 0.24927269979622535, 0.29902202571453596, 0.3084116652641996, 0.222918186956663, 0.21420286611529826, 0.2572832040652858, 0.16138324469415877, 0.31990867849043314, 0.2367197614828941, 0.2095610634005003, 0.22137759949719626, 0.2126990585259828, 0.24327295061287857, 0.21924538638192592, 0.21093622630605946, 0.19523424157932967, 0.22772898703709732, 0.18557496804182683, 0.18936384237380544, 0.1819712562283443, 0.19729361379590515, 0.20263412090434485, 0.21176560955804347, 0.24295250571781912, 0.23891685138729335, 0.2080413832479765, 0.17158974791303394, 0.16608940972633446, 0.19992865041738683, 0.16617224895104887, 0.18823354609748444, 0.12255045987439683, 0.14161229201279857, 0.14700855209139796, 0.16595780785930347, 0.20921527838712084, 0.1126884955709131, 0.16852754005899262, 0.2099609744159503, 0.1665608486917961, 0.16775186982547208, 0.19959687957251016, 0.8729780092408529, 0.19768855226077198, 0.19398080043063215, 0.20347854627737638, 0.18733044774434715, 0.19831494097904, 0.1930465389154694, 0.20813212681946114, 0.19594719363045776, 0.19359573658427598, 0.1993085133582082, 0.09837696532331541, 0.11728374177815892, 0.11287652675671656, 0.0983730305891013, 0.08271539797987093, 0.10102523726284962, 0.08646611006099592, 0.10281320402580918, 0.09283788738693133]}, "mutation_prompt": null}
{"id": "7e184e28-4fd3-4fa0-bc67-7bf1046b8f30", "solution": "import numpy as np\n\nclass HybridEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.85  # Slightly more aggressive mutation factor\n        self.cr = 0.85  # Adjusted crossover probability for diversity\n        self.w = 0.45  # Modified inertia weight for adaptive balance\n        self.c1 = 1.7  # Increased cognitive coefficient for local exploitation\n        self.c2 = 1.3  # Reduced social coefficient for diverse exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvolutionarySwarmOptimization", "description": "Hybrid Evolutionary and Swarm Optimization (HESO): An enhanced adaptive algorithm integrating evolutionary strategies and diverse swarm dynamics for improved convergence and scalability.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d96a705-8a3d-46d5-a1a9-e1eff8ef8442", "metadata": {"aucs": [0.8988619382158812, 0.8763416797475692, 0.9176685584587494, 0.9130212791005353, 0.9075396276681037, 0.18324133042418955, 0.916546023000525, 0.8971293262163191, 0.912402298462561, 0.794797298359353, 0.8062432626803753, 9.999999999998899e-05, 0.7619348012933825, 0.7162082837173667, 0.7888104266212521, 0.7757699621936258, 0.052939793325018636, 0.8077437756101006, 0.11549401877701349, 0.1821168674204654, 0.15522706763221705, 0.07377387876586494, 0.14297325407454176, 0.0755669846475786, 0.12768338505747634, 0.09580238462554647, 0.15497254629318902, 0.10843083515633356, 0.12491147494312993, 0.12083226023290516, 0.09530756765047677, 0.13779665105898398, 0.1566423781059617, 0.13177279332624836, 0.7619253387912641, 0.10879208126655426, 0.9900039642566214, 0.9912054886395115, 0.9892835946149235, 0.989272898705286, 0.9914234457349567, 0.9899487446407087, 0.9862712714294536, 0.9924346378955583, 0.9894236925338397, 0.06183252292731378, 0.7928155537406044, 0.8110009337735927, 0.784776980311748, 0.7515827022674024, 0.7909741483818441, 0.7584390145486468, 0.12802432823106025, 0.051815162534438186, 0.8739809071800879, 0.17110312956816653, 0.3722579147199748, 0.160258886420933, 0.21298168633354653, 0.11716648916620764, 0.8517168605390006, 0.8676236766376858, 0.2434905235354231, 0.14516719575401804, 0.24860311735758156, 0.29781877819614655, 0.13090800590083385, 0.2443589859574512, 0.1303644941326133, 0.2594327127745061, 0.2645230835523469, 0.3441445146929325, 0.2315140697613589, 0.25522423304589525, 0.25225974371736937, 0.2174912433319417, 0.2830728691986808, 0.13388793694560286, 0.28618269419577824, 0.2570342101645303, 0.2690944270466177, 9.999999999998899e-05, 0.06097252138800957, 0.0039028851888267546, 0.003477633651886358, 9.999999999998899e-05, 0.08739638045574416, 0.003809179104971916, 0.00021725199339284185, 9.999999999998899e-05, 0.08325068734809105, 0.06296948890020615, 0.1375408918757144, 0.07358551972771188, 0.03207098693312471, 0.06797916226568501, 0.07896953483165858, 0.05830805105307224, 0.01650527624830378, 0.042584952278022836, 0.09216076380221672, 0.05125854933976448, 0.08917389720783231, 0.0972682125789448, 0.0775479689135824, 0.16505206733057365, 0.22087623888785268, 0.1913546031880543, 0.112065499599167, 0.16088240290379907, 0.1534865316146521, 0.06605185127559632, 0.18944526397928962, 0.1657397216088109, 0.08370628041648798, 0.09044655453158523, 0.08368998534173666, 0.5760367622595579, 0.5645473421498871, 0.5590505319882944, 0.6291598150669143, 0.5653177404856273, 0.6046911214298636, 0.6073586107132756, 0.6229915749921491, 0.5890622430666612, 0.15860068531112903, 0.05113818293244898, 0.11123765318381718, 0.12143702979832283, 0.14120350178520058, 0.14618310985829108, 0.13918785708935788, 0.08644495781084627, 0.13168191645119864, 0.1956073197529028, 0.2106100297037068, 0.1629196053201556, 0.16739877125217195, 0.287633471038488, 0.29269468488777917, 0.18103045933226058, 0.18744967843164684, 0.22200238092604163, 0.3581045757802255, 0.3264790476814502, 0.4908168136485659, 0.4905346405928289, 0.26117848054776227, 0.5768961167476715, 0.5495540760447815, 0.6263880465288594, 0.48813714252176343, 0.2509982465498086, 0.24927269979622535, 0.29902202571453596, 0.3084116652641996, 0.222918186956663, 0.21420286611529826, 0.2572832040652858, 0.16138324469415877, 0.31990867849043314, 0.2367197614828941, 0.2095610634005003, 0.22137759949719626, 0.2126990585259828, 0.24327295061287857, 0.21924538638192592, 0.21093622630605946, 0.19523424157932967, 0.22772898703709732, 0.18557496804182683, 0.18936384237380544, 0.1819712562283443, 0.19729361379590515, 0.20263412090434485, 0.21176560955804347, 0.24295250571781912, 0.23891685138729335, 0.2080413832479765, 0.17158974791303394, 0.16608940972633446, 0.19992865041738683, 0.16617224895104887, 0.18823354609748444, 0.12255045987439683, 0.14161229201279857, 0.14700855209139796, 0.16595780785930347, 0.20921527838712084, 0.1126884955709131, 0.16852754005899262, 0.2099609744159503, 0.1665608486917961, 0.16775186982547208, 0.19959687957251016, 0.8729780092408529, 0.19768855226077198, 0.19398080043063215, 0.20347854627737638, 0.18733044774434715, 0.19831494097904, 0.1930465389154694, 0.20813212681946114, 0.19594719363045776, 0.19359573658427598, 0.1993085133582082, 0.09837696532331541, 0.11728374177815892, 0.11287652675671656, 0.0983730305891013, 0.08271539797987093, 0.10102523726284962, 0.08646611006099592, 0.10281320402580918, 0.09283788738693133]}, "mutation_prompt": null}
{"id": "0e4da238-9e3f-44ac-b715-58da049249b6", "solution": "import numpy as np\n\nclass AdaptiveHybridEvolutionarySwarmAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.9  # More aggressive mutation factor for exploration\n        self.cr = 0.75  # Balanced crossover probability\n        self.w = 0.5  # Adjusted inertia weight for adaptive balance\n        self.c1 = 1.5  # Slightly reduced cognitive coefficient\n        self.c2 = 1.5  # Balanced social coefficient for exploration and exploitation\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridEvolutionarySwarmAlgorithm", "description": "Adaptive Hybrid Evolutionary Swarm Algorithm (AHESA): Combines dynamic differential evolution with stochastic particle swarm optimization for robust and adaptive search in complex landscapes.", "configspace": "", "generation": 12, "fitness": 0.27555580683044634, "feedback": "The algorithm AdaptiveHybridEvolutionarySwarmAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "4d96a705-8a3d-46d5-a1a9-e1eff8ef8442", "metadata": {"aucs": [0.8606279275529142, 0.8825754691253535, 0.885580240170833, 0.8686770471974625, 0.1906906214214411, 0.8933916658221572, 0.182402802507171, 0.865823396789263, 0.8671189877621708, 0.6875523255352873, 0.042004000027979216, 0.6900324311960276, 9.999999999998899e-05, 9.999999999998899e-05, 0.7029220359538713, 0.7585695885966482, 0.7435569120398489, 0.6779363571025024, 0.14081522610822517, 0.120019161648244, 0.1787866287553317, 0.076059559058971, 0.1403386130671539, 0.07465335997132316, 0.15937227249250663, 0.11591555991473856, 0.12040308035138714, 0.14754662900124327, 0.13391418940168298, 0.14271850075065196, 0.15286222969707886, 0.1154479568555673, 0.16690018595187883, 0.11326756628913848, 0.13858946212389345, 0.14784766226325996, 0.9929069313821661, 0.9934868371117109, 0.9857804324586703, 0.9895952039572669, 0.9903882880376882, 0.9942215722234262, 0.9944167736336839, 0.990502090092636, 0.9923164337369944, 0.7491886964927508, 0.11365897683783655, 0.05961615159910416, 0.1512182236384162, 0.7642889966254593, 0.7567452311618729, 0.05036148940914609, 0.703819669925635, 0.0890980168722697, 0.1705396213534477, 0.8283992840591047, 0.22497188294697412, 0.213931206058104, 0.2085743191262186, 0.1912248634909851, 0.8173816598975143, 0.23410904968587254, 0.21581520583382985, 0.28716531598081485, 0.25528380690925956, 0.2387992880320673, 0.26338505513348187, 0.23710262228226353, 0.27867312346097073, 0.21954052218084208, 0.23384027251032735, 0.23349343820782964, 0.22240231601102967, 0.2429635259397257, 0.24309854629347882, 0.16749782911276545, 0.29742710846838205, 0.27078594768421294, 0.277591189840635, 0.15291381364657008, 0.27232823109000615, 9.999999999998899e-05, 0.010813515484921488, 0.0016267940208041232, 0.030307473108899252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027041130567370564, 9.999999999998899e-05, 0.07412514005418325, 0.05069052197677848, 0.061929529045742115, 0.009392398370810628, 9.999999999998899e-05, 0.020449137520266558, 0.01958918385606756, 0.05584482647442346, 0.045675315681370066, 0.04745000421091006, 0.03570603874831291, 0.04864242016930731, 0.1287025991699431, 0.0924218377663123, 9.999999999998899e-05, 0.12840264964609815, 0.21215289460540854, 0.0703724704031139, 0.01083945244667972, 0.043045734064922736, 0.18038914197362432, 0.037821199780244896, 0.1887062682956765, 0.14665168008698315, 0.08207069973543091, 0.08599442506092947, 0.09006964543916551, 0.5502712333936037, 0.5654011044923407, 0.5836478574134871, 0.6106943267551157, 0.5638374243316042, 0.6176892041336837, 0.5685360081705191, 0.5355604763694661, 0.5983145597854485, 0.11742378426833056, 0.1021418347547165, 0.10067224346698245, 0.12788380221360507, 0.13972290564504675, 0.13784758004271314, 0.0954472349694353, 0.1599374924945427, 0.09657753761815624, 0.130532850021714, 0.2086178362267893, 0.291859500033959, 0.25771927970793596, 0.23975069686481487, 0.2099301329867953, 0.15586798081667153, 0.1917389340505472, 0.17995598534338098, 0.24015505398719184, 0.26099769427863306, 0.22337227666884674, 0.21788932398381755, 0.20413797779153775, 0.32686727804963, 0.5017170196952647, 0.3727827473122274, 0.5738374216232274, 0.283778878749971, 0.3786772089359106, 0.22081592391549454, 0.1984845777544415, 0.24121955500768566, 0.23620526071835157, 0.30342889235235315, 0.1624213072134595, 0.20133624946924478, 0.2125802304148191, 0.18751921473671607, 0.19612783476267637, 0.19868489972571024, 0.18880158677766257, 0.19603216960045955, 0.20476701944852838, 0.20097673715926645, 0.18719437795913185, 0.24088394978304029, 0.22254727836482402, 0.21328893537065075, 0.20230851554748053, 0.751869204584155, 0.24851386613809323, 0.20779258129570155, 0.20569477785283952, 0.7791946413104106, 0.1715919862716, 0.17199449958851565, 0.14809078526740482, 0.14772814691131275, 0.1877391488511948, 0.16634290316452283, 0.1357265073352697, 0.20921379349606128, 0.1732167046532852, 0.1685409131770781, 0.16888990747541544, 0.16621924602387028, 0.11007122675319447, 0.16792071609826487, 0.1561959813889462, 0.2000781112986869, 0.8395268000499997, 0.1672453131072541, 0.19460956488016878, 0.20120548754385248, 0.20107057796692906, 0.2238973926098724, 0.20159845058075443, 0.18791425736144995, 0.2224869369970458, 0.1829894398013131, 0.20049521423409, 0.08919531447277296, 0.10081666379186227, 0.10015542848145054, 0.07976017874612118, 0.09241078478328268, 0.09145509604547974, 0.09204367125672974, 0.09614006033095934, 0.09140194916817923]}, "mutation_prompt": null}
{"id": "de7c0ad9-af6e-44fa-97b7-27b5ec67f7b1", "solution": "import numpy as np\n\nclass AdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30  # Increased population for diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.9  # More aggressive mutation factor\n        self.cr = 0.9  # Higher crossover probability for exploration\n        self.w = 0.5  # Slightly higher inertia weight\n        self.c1 = 1.5  # Moderate cognitive coefficient\n        self.c2 = 1.5  # Balanced social coefficient\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveEvolutionarySwarmOptimization", "description": "Adaptive Evolutionary Swarm Optimization (AESO): A refined hybrid approach leveraging adaptive parameters for robust convergence and diverse search dynamics.", "configspace": "", "generation": 13, "fitness": 0.26586163387419787, "feedback": "The algorithm AdaptiveEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "4d96a705-8a3d-46d5-a1a9-e1eff8ef8442", "metadata": {"aucs": [0.7834154450751829, 0.8202688873694537, 0.852466936927124, 0.7899087555635529, 0.8267869815922555, 0.8327968321921768, 0.8375381578061969, 0.8512065261337416, 0.8343989187569176, 0.6313569585607207, 0.6218552570205007, 0.6213688685917115, 0.060783323346914386, 0.5870807126131636, 0.6709918052064537, 0.6285314193872144, 0.6432321973891384, 0.6357096842516852, 0.09599001811999064, 0.13514700168578242, 0.11280609810397346, 0.14987424044362374, 0.15344738102494448, 0.1364286645326176, 0.04401011252197495, 0.17826060560710122, 0.15388106466318552, 0.12030129600020523, 0.12117181400575372, 0.12182915911937231, 0.10678367762316465, 0.11302953767017587, 0.0942336294651206, 0.15232836002999461, 0.11986192185185662, 0.11183866430355083, 0.9918642911749419, 0.9911540054687352, 0.989449941762302, 0.9810239241435559, 0.9859730472977498, 0.9856820671040066, 0.9884563403300131, 0.9902719535921415, 0.9854871588999918, 0.5849486972328067, 0.6417783375519159, 0.5969179224902808, 0.6036116244531007, 0.044563087873747964, 0.5235836773694998, 0.12598530291026344, 0.62600940857151, 0.5887525358898238, 0.13598396897786225, 0.16686965982415747, 0.21277301918290592, 0.19037594442145822, 0.159803297868369, 0.2014975545369152, 0.2288140045646736, 0.13164592891004945, 0.3755055574533286, 0.21410740162741015, 0.21437592794019378, 0.22155505685260024, 0.19661741313222825, 0.2078615395181581, 0.24203610280345222, 9.999999999998899e-05, 0.2184877238111188, 0.21542997234700811, 0.022142074013392965, 0.010129942734837694, 0.05366500068996827, 0.11855267131236902, 0.2209540776416581, 0.3739221711631827, 0.10021907449041789, 0.032793616476757825, 0.03337083928295814, 0.0073603927304739525, 0.01655462634281213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10365148521057221, 0.02977370366753873, 9.999999999998899e-05, 9.999999999998899e-05, 0.05955375767404325, 0.0424297504896749, 0.08023255355051262, 0.053567313812467376, 0.0770293456966179, 0.060191921308830554, 0.09839963832313692, 0.030128961507468688, 0.012757889392997046, 0.21542869771726436, 0.03140486790120445, 9.999999999998899e-05, 0.13697672885527212, 0.08791058935527107, 0.0713402266506068, 0.09485891974691207, 0.08987800100790078, 0.18253175077452155, 0.1097499440692824, 0.20895614521537387, 0.04363679797169984, 0.006343491390001121, 0.17070306267145152, 0.006061792821946632, 0.047764676834641584, 0.08045651933429032, 0.14853801809994316, 0.5514328882931424, 0.5196301094179854, 0.5571753240915305, 0.5538649318948359, 0.5500552437636554, 0.5515638403809645, 0.563233191974968, 0.549611716458974, 0.564755935606919, 0.1337617526816477, 0.09674405721907009, 0.09345815694613413, 0.13529086950623204, 0.048613748118217726, 0.11905994493727845, 0.13584415867890898, 0.11460885178922164, 0.13379363352657325, 0.2610769291405943, 0.2836413434047683, 0.22282657928228977, 0.18556597661651608, 0.18567624887287038, 0.13817252997568485, 0.3215719571853921, 0.20520769146325435, 0.31406440246720835, 0.3141494257817059, 0.28029658705492333, 0.2295896048883106, 0.22575563688875877, 0.21576225756152145, 0.39388875516563093, 0.4195346839603695, 0.17303217505245883, 0.4935318028469379, 0.2955976984006281, 0.17893394408307373, 0.3327886290591541, 0.19321373447490064, 0.19049170311347063, 0.37351831655450973, 0.1437942842662031, 0.13856486900329856, 0.15936450260190482, 0.2074631511899272, 0.19795585136119132, 0.2068038075814438, 0.1883978693692211, 0.19236485519441215, 0.19305532607606546, 0.22409523096676798, 0.20905296095553572, 0.163870401923489, 0.21612743208015495, 0.24219436241715742, 0.20665642762895442, 0.2099642987256236, 0.19310247897857435, 0.21622925513940905, 0.20156917757554782, 0.215812819807785, 0.1973539596364211, 0.10565280607210514, 0.17091531268009497, 0.140197728080945, 0.16452613655864134, 0.09342192895285883, 0.14930822019572465, 0.1841361226729359, 0.17674886911191845, 0.20917326064668895, 0.15587774538294574, 0.1541005142862325, 0.16770870508895952, 0.20594351128913602, 0.16711264797294134, 0.6762485978744104, 0.12990845988053445, 0.20708133933016826, 0.21255711912389164, 0.1910061498211929, 0.1969235865481822, 0.18445078497839074, 0.18143678666238183, 0.1899227963165837, 0.18903069329726507, 0.20690702807421024, 0.19543376619036112, 0.18986444091381594, 0.0826569853697261, 0.09184119765156629, 0.11654516702078965, 0.09066171859360261, 0.08745312425439156, 0.10152581079476863, 0.0771631380411616, 0.08752493940254824, 0.09017013625934234]}, "mutation_prompt": null}
{"id": "2fe74cc7-4aa4-4ab2-99ef-896b490cb3ef", "solution": "import numpy as np\n\nclass SynergisticAdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.82  # Muted mutation factor for stability\n        self.cr = 0.90  # Enhanced crossover probability for exploration\n        self.w = 0.47  # Slightly increased inertia weight for balance\n        self.c1 = 1.5  # Moderated cognitive coefficient for exploration\n        self.c2 = 1.5  # Equalized social coefficient for balanced search\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "SynergisticAdaptiveEvolutionarySwarmOptimization", "description": "Synergistic Adaptive Evolutionary Swarm Optimization (SAESO): A refined hybrid algorithm integrating adaptive evolutionary strategies and swarm intelligence for robust and efficient optimization across diverse landscapes.", "configspace": "", "generation": 14, "fitness": 0.26037994407076837, "feedback": "The algorithm SynergisticAdaptiveEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.27.", "error": "", "parent_id": "4d96a705-8a3d-46d5-a1a9-e1eff8ef8442", "metadata": {"aucs": [0.8778747386352715, 0.8884702470933952, 0.8887010565888288, 0.8939585872928029, 0.9053727125582771, 0.19092601612263138, 0.8956341571636306, 0.17545970767148866, 0.17547901606858718, 0.7372242480304596, 9.999999999998899e-05, 9.999999999998899e-05, 0.7701007932859685, 0.04804419493425138, 0.7653519219243899, 0.018253838569011527, 0.7544792285348074, 0.018507689162435614, 0.12199411921698466, 0.1394514589845134, 0.1584835264825739, 0.074693905185509, 0.15954889593110633, 0.14993417011429777, 0.055351255583261816, 0.1437682216997711, 0.11704125013786049, 0.1532883528918343, 0.10553534306543266, 0.14191310423288828, 0.11401145238854282, 0.1590564357393034, 0.1381567534546626, 0.12910133207934216, 0.11479093118701844, 0.1000653816859689, 0.9898763228993191, 0.9912263059356999, 0.9858993320813358, 0.9943572727249075, 0.9938043146827229, 0.9909944982708381, 0.9912564019029076, 0.9937714689487886, 0.989297003599611, 0.059909601799699175, 0.05971408692263125, 0.7039359579269624, 0.7923492924660381, 0.7665732967301417, 0.7866780553039956, 0.08853352971169137, 0.7209933055283176, 0.7417757512356201, 0.866613064424506, 0.22166778550219335, 0.22138717075904335, 0.15512901606102025, 0.1914300669423321, 0.19020664454169378, 0.1508468084382384, 0.2280944792884414, 0.15174229419049823, 0.1202010562221052, 0.2366574535516841, 0.24949813685816113, 0.13232371709733692, 0.22797831537320823, 0.1304978276123111, 0.20520074783618358, 0.11410728806317927, 0.25650851851027245, 0.23887349674501157, 0.24535865989131556, 0.26374477084177783, 9.999999999998899e-05, 0.24477613209730875, 0.2581442978355246, 0.27214594242604184, 0.10147557757995984, 0.09967955042869159, 9.999999999998899e-05, 9.999999999998899e-05, 0.02820578800859641, 9.999999999998899e-05, 0.00011048069483299283, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037832181571612056, 9.999999999998899e-05, 0.08571085385366717, 0.06753262778226743, 0.07679090978923431, 9.999999999998899e-05, 0.019695529313641602, 0.0011215173000824752, 0.03492862297133248, 0.05032295553908839, 0.0900154563844251, 0.07693813584597431, 0.15900794445536504, 9.999999999998899e-05, 0.14850606281482925, 0.1867508860893604, 0.08421898280402251, 0.07112022390893658, 0.07241363147930902, 0.0791783181630219, 9.999999999998899e-05, 0.04287567030331407, 0.09877831989327912, 0.16561463028496404, 9.999999999998899e-05, 0.12398692302273362, 0.05984649812115639, 0.05639299379399232, 0.08341934899896386, 0.5688678811797256, 0.5625615198686917, 0.5423061438383818, 0.5521933503228833, 0.1822987223729442, 0.5675355978371224, 0.6027834016784785, 0.5799554456679866, 0.6150319758031182, 0.06841411319998059, 0.08316403977077336, 0.13494111390838592, 0.09075443698716246, 0.09097010337946798, 0.09119856989100517, 0.08574454444644142, 0.12351402188954796, 0.14175428421967695, 0.17079628213762077, 0.17620694136909676, 0.14960243247628546, 0.11812360451540371, 0.2093925056516781, 0.20703581189135334, 0.15539355083720896, 0.17394317000052129, 0.2151722082757649, 0.3215517798414754, 0.4021113512685378, 0.33141801776409274, 0.38855153458607594, 0.2870326780446152, 0.29631584266546884, 0.2941349439600546, 0.19929121264494432, 0.3055407464313382, 0.23834961970267865, 0.19192046483042557, 0.2813112147737864, 0.19126280383185512, 0.17322913680561447, 0.2275723907584848, 0.21432985208109112, 0.20959884454331978, 0.25602175579157893, 0.20681575167811583, 0.2269656358525345, 0.23516459753403962, 0.22139440637448038, 0.19340330906402126, 0.21722212325942925, 0.23620616781641568, 0.20079452929372732, 0.20846478610993868, 0.24510396160492842, 0.23792848065686567, 0.250908252562669, 0.21651494633409207, 0.24617940096357893, 0.24729310426627438, 0.21069755616097197, 0.24626384532098022, 0.1975291177405578, 0.16647604059169485, 0.16587641607866643, 0.15377270947246724, 0.16480559272967787, 0.1775613662392176, 0.8848532525904887, 0.11886652504494055, 0.1578707656755236, 0.16629304609216178, 0.11010883504580082, 0.11292665221402198, 0.16744804215949038, 0.16771769349071186, 0.7415436635741826, 0.7632022258889339, 0.20000045391283738, 0.316964728303326, 0.1643471623932481, 0.19689407248553759, 0.18305029949149565, 0.17847002032960357, 0.18248732754534236, 0.19746361937623347, 0.18956109719826797, 0.18626474957192618, 0.19592599646975895, 0.21175844291108714, 0.07935074674808218, 0.10406258854114459, 0.08855021055476431, 0.09986680534956327, 0.07965250533786727, 0.09764066301114693, 0.08516930623475405, 0.10973651962877407, 0.09765264940753116]}, "mutation_prompt": null}
{"id": "c933e417-1137-45d4-aeb5-bb0b0c21592f", "solution": "import numpy as np\n\nclass QuantumInspiredHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.9  # Enhanced mutation factor inspired by quantum strategies\n        self.cr = 0.8  # Crossover probability promoting diversity\n        self.w = 0.4  # Lower inertia weight for dynamic balance\n        self.c1 = 1.6  # Adjusted cognitive coefficient for local focus\n        self.c2 = 1.4  # Slightly higher social coefficient for global insight\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-Inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                quantum_mutant_vector = x0 + self.f * (x1 - x2) * np.random.normal(size=self.dim)\n                quantum_mutant_vector = np.clip(quantum_mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, quantum_mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredHybridOptimization", "description": "Quantum-Inspired Hybrid Optimization (QHESO): Incorporates quantum-inspired mutation strategies into hybrid evolutionary and swarm dynamics for enhanced exploration and exploitation.", "configspace": "", "generation": 15, "fitness": 0.2950941683728975, "feedback": "The algorithm QuantumInspiredHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "4d96a705-8a3d-46d5-a1a9-e1eff8ef8442", "metadata": {"aucs": [0.9124847018461945, 0.9127508135926754, 0.9184823710983941, 0.8768496717684005, 0.903507697139769, 0.9153244378874839, 0.9110548948525362, 0.9258799733554385, 0.9187334582831277, 0.8247354847984358, 0.8256149539221539, 0.8001329325565072, 0.8169662277655012, 0.04747059147492105, 0.80735778105989, 0.8279374636027441, 0.8183368115299292, 0.8101421789784227, 0.13298657785468182, 0.17962855407248257, 0.10071831622182348, 0.11533646355026161, 0.12430279801049404, 0.13176309070034897, 0.05729155648539397, 0.16194899214924063, 0.1191295763261222, 0.12799442852335086, 0.04857704150309239, 0.13168983434433612, 0.10785434199219257, 0.15735664231950564, 0.11606078045387691, 0.15469719400316606, 0.11503545518604719, 0.11377606277531027, 0.9930210574375636, 0.9863114511713655, 0.986206237896328, 0.9908504392006199, 0.9899821394807655, 0.9942002592614555, 0.9871605375202531, 0.9868457529776681, 0.9973788836292942, 0.823809143799827, 0.8523811359059511, 0.8218194037444015, 0.8235467250339121, 0.15252007054934258, 0.8180740783323335, 0.12643432971951518, 0.1280143236478214, 0.05159777193173176, 0.1620085467401584, 0.3053800090778822, 0.22575136171430787, 0.2093046012086921, 0.9386751786735474, 0.1563907213094894, 0.23484292084570135, 0.12453777727373105, 0.24440046843124896, 0.278029973971187, 0.26429499434134973, 0.13217942777862624, 0.13364439695553443, 0.26585224091534976, 0.1052420570664695, 0.4669735032505965, 0.244330557111197, 0.12043382795636426, 0.27119111751222147, 0.13318235480251028, 0.11839238233281957, 0.27004470805031267, 0.1854303221975927, 0.13434558762302007, 0.2765967517960577, 0.2962734405288119, 0.12254606026438519, 9.999999999998899e-05, 9.999999999998899e-05, 0.10595268704909044, 0.06916589118571825, 0.09313474998761306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018826668476648267, 0.028955667693854048, 0.05143314680960198, 0.08524039358857483, 0.04371427109009163, 0.006416529688112904, 0.00013221471165303367, 0.04096936189968514, 0.04723834642969016, 0.0813967547352118, 0.03646548680337036, 0.30055766832327835, 0.06528392501011426, 0.1517443516484318, 0.08066140522250276, 0.09905424857504097, 0.34216797133256227, 0.11131410223305704, 0.10554012138391211, 0.14695005048890875, 0.04432755811557232, 0.044211140762322465, 0.10359815325195831, 0.006651138543695145, 0.09825959021969488, 0.08412665865323266, 0.08352382068601383, 0.07378695084152243, 0.5851430531617797, 0.4814371415842119, 0.5529375572367334, 0.5785180483455961, 0.573440608645581, 0.6071581064861543, 0.5982221792299081, 0.5785010650252753, 0.5971232882616835, 0.08699224574355668, 0.03875587909880307, 0.15413584909996425, 0.10019651649905736, 0.11471807823182956, 0.11655451015950802, 0.11330796168245283, 0.13001088892857182, 0.1091829898331862, 0.248116024790478, 0.2036287866822034, 0.14095260699899048, 0.2809150639599942, 0.3872561683244168, 0.14018117901983063, 0.3278775389735473, 0.18249585714512717, 0.3431067800770202, 0.18051045491777362, 0.4306714590732521, 0.22432322477076894, 0.6335818125805488, 0.40572106912616124, 0.6452118663942767, 0.580575890830754, 0.43383453208764833, 0.6163116621618039, 0.18132406593864936, 0.361441259917924, 0.3301717733972891, 0.20037770119023546, 0.19749445955917577, 0.19475303445650605, 0.13243869416874854, 0.21338119965419688, 0.11094593965369859, 0.21348224351842338, 0.18937168426549256, 0.24923668426228474, 0.24457093592631585, 0.22649853260332176, 0.20122879828971107, 0.2215539426466857, 0.19572541748440675, 0.22859817959380713, 0.18836961449359935, 0.2243172930109888, 0.8033829593732654, 0.21111362750904017, 0.21007287601560998, 0.18228300271583353, 0.21186700667402825, 0.1813775759905637, 0.19113607121053788, 0.17393492743137084, 0.1886976254722168, 0.1667102536822178, 0.11708838508427255, 0.16522880512140437, 0.17984636106201446, 0.1850848796031198, 0.16768517617861112, 0.15912425155518117, 0.15669424599953485, 0.1267739502802886, 0.15267415610016066, 0.10975595188128318, 0.1690561061693494, 0.10537364060759824, 0.11287841173737179, 0.10470565929357856, 0.2135401107758862, 0.19734570274344543, 0.18323108974978897, 0.1933198166309792, 0.1840889331688672, 0.19398612881309252, 0.20334616742906808, 0.19005279717074341, 0.18468077299293928, 0.19219772237124255, 0.08768068221582637, 0.10591855128678962, 0.08922314583243218, 0.092186744326058, 0.0959301592503623, 0.09488531047221382, 0.10136884390962309, 0.12045271118997003, 0.10582946387385872]}, "mutation_prompt": null}
{"id": "fa49c1ad-6e2a-48ec-bb50-a9310035e09d", "solution": "import numpy as np\n\nclass AdaptiveQuantumHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.82  # Adjusted mutation factor for quantum effect\n        self.cr = 0.90  # Increased crossover probability for more exploration\n        self.w = 0.50  # Slightly increased inertia weight\n        self.c1 = 1.5  # Balanced cognitive coefficient\n        self.c2 = 1.5  # Balanced social coefficient\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumHybridOptimization", "description": "Adaptive Quantum Hybrid Optimization (AQHO): Integrates quantum-inspired strategies with evolutionary and swarm dynamics for enhanced exploration and exploitation.", "configspace": "", "generation": 16, "fitness": 0.2784113983817042, "feedback": "The algorithm AdaptiveQuantumHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "4d96a705-8a3d-46d5-a1a9-e1eff8ef8442", "metadata": {"aucs": [0.8473173608590915, 0.8776479443258619, 0.8889826222064627, 0.8864926372299272, 0.8726097044883188, 0.19089456717983944, 0.8891470792642536, 0.17564267414962198, 0.17541198453359397, 0.7410830414636902, 0.6992335972037534, 0.6448918712263388, 0.7209547099986746, 0.6342693876318727, 0.7476491511678729, 0.01860969250732214, 0.018341891727164827, 0.01777395614798971, 0.12759145266638494, 0.1319858817471089, 0.1150964538374818, 0.07046669305001396, 0.14087548765030156, 0.1386384072795046, 0.1025282900372344, 0.10149178373945145, 0.15477008992856678, 0.15377362219452262, 0.11969815768336578, 0.11109776834513774, 0.11367805246604168, 0.15351358550123428, 0.09773872529227756, 0.09940697071745397, 0.12363600788010631, 0.11261748090836732, 0.9898791673799134, 0.9912373561007685, 0.985925430772903, 0.9943568036956183, 0.9938096430072318, 0.9910019129529406, 0.9912361860484026, 0.9937726755429328, 0.9892964052722012, 0.7655860078917802, 0.05957597545756976, 0.6587591225118444, 0.736092294269467, 0.7343022988951804, 0.7485820885078207, 0.08868353995472533, 0.12744825077147015, 0.08778173598233041, 0.812417476536428, 0.22293724332742781, 0.902790697496738, 0.15385038225843706, 0.20557850309716486, 0.11674068093303958, 0.773306774904676, 0.15031508889848832, 0.15023370183019147, 0.1718775729287212, 0.25128925118697065, 0.13260822974838105, 0.13192520978846844, 0.12998959950086952, 0.27128337009223247, 0.13119171100818117, 0.189959211588277, 0.2583623991094435, 0.28470067740315674, 0.25745549821441693, 0.24289388629016107, 9.999999999998899e-05, 0.10859295321843287, 0.2593895458922806, 0.37632925491905334, 0.25632912790608675, 0.32604108437329105, 9.999999999998899e-05, 0.00010911769770882707, 0.004998392621067604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10526077965017289, 0.08055658994049641, 0.02040289217400082, 0.006968072584378038, 0.06087191243452528, 0.03414487264316579, 0.05473681093025384, 0.025592994820905934, 0.12531358271778514, 0.12789239762099225, 0.03372569746477727, 9.999999999998899e-05, 0.12133666916222152, 9.999999999998899e-05, 0.0938214907912478, 0.1178133191069779, 0.12252249443976304, 0.07074772377576044, 0.04313580670240558, 0.04242806505300856, 0.04270643594289758, 0.17928139842968416, 0.03904308684634472, 0.1413697013079711, 0.04934316498834668, 0.04834143347046371, 0.16392351944355577, 0.5904585347940899, 0.5231090052314492, 0.568462723285501, 0.6579423080116221, 0.5309297601975398, 0.5648560663487222, 0.5832109115783383, 0.6093364672923691, 0.5957626325631532, 0.08211565229065532, 0.06651255218233165, 0.09156961393232488, 0.09998755014474392, 0.15426121901956136, 0.10052328503498198, 0.1076345553297815, 0.10946272473843344, 0.12316814872477155, 0.16712804578144602, 0.2687305993320238, 0.6018249289513589, 0.2638094929398366, 0.14265032354509444, 0.20334943272990258, 0.14215213340020805, 0.16773856947108268, 0.21465936072733038, 0.2345954148188959, 0.27972802656180984, 0.25742245624569493, 0.39161163304384494, 0.3367895115425812, 0.3051325322741223, 0.5483155865709565, 0.19636864921789032, 0.47211809725402865, 0.26927685639567067, 0.3396040821682278, 0.27131899070008525, 0.21003438125016027, 0.25184451834517674, 0.23646071217100195, 0.2549528891573215, 0.2693837343333313, 0.39770894158270986, 0.2023336523229855, 0.2092886620835066, 0.20810998143152082, 0.18617611023730574, 0.22466738963623678, 0.22272387746377997, 0.22249188851938717, 0.21224251731272825, 0.23626691172804837, 0.24383481901293247, 0.2076113000834966, 0.2076318646436489, 0.19314488168665767, 0.18858009699231015, 0.19921091035681804, 0.22385133046084604, 0.22250942891548686, 0.19268165097107837, 0.16688806590685978, 0.16608993865908872, 0.12444017124680673, 0.1653015779513458, 0.17767591241054492, 0.2064408582427053, 0.14173813108084432, 0.15790264419868472, 0.1497528718906569, 0.11005964754573083, 0.11292227694704848, 0.1678572120525701, 0.820005450830801, 0.7287458738735613, 0.22348396341203447, 0.2133654366393234, 0.8421934039541945, 0.8305984069004464, 0.1873532894270371, 0.19914207679811535, 0.18527547038882897, 0.19733974779623864, 0.20268681501609243, 0.1883061550320625, 0.18819919752957293, 0.21111888319719763, 0.19375690151897218, 0.09683864360446803, 0.10975010282405506, 0.09711552555889125, 0.10481656874281076, 0.09044382706238596, 0.09641998807436358, 0.08171636559269935, 0.0879066489364364, 0.0871798800704926]}, "mutation_prompt": null}
{"id": "31552056-c2a6-4cdc-84ce-8c779bb6563c", "solution": "import numpy as np\n\nclass HybridEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.85  # Slightly more aggressive mutation factor\n        self.cr = 0.85  # Adjusted crossover probability for diversity\n        self.w = 0.45  # Modified inertia weight for adaptive balance\n        self.c1 = 1.7  # Increased cognitive coefficient for local exploitation\n        self.c2 = 1.3  # Reduced social coefficient for diverse exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvolutionarySwarmOptimization", "description": "Hybrid Evolutionary and Swarm Optimization (HESO): An enhanced adaptive algorithm integrating evolutionary strategies and diverse swarm dynamics for improved convergence and scalability.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d96a705-8a3d-46d5-a1a9-e1eff8ef8442", "metadata": {"aucs": [0.8988619382158812, 0.8763416797475692, 0.9176685584587494, 0.9130212791005353, 0.9075396276681037, 0.18324133042418955, 0.916546023000525, 0.8971293262163191, 0.912402298462561, 0.794797298359353, 0.8062432626803753, 9.999999999998899e-05, 0.7619348012933825, 0.7162082837173667, 0.7888104266212521, 0.7757699621936258, 0.052939793325018636, 0.8077437756101006, 0.11549401877701349, 0.1821168674204654, 0.15522706763221705, 0.07377387876586494, 0.14297325407454176, 0.0755669846475786, 0.12768338505747634, 0.09580238462554647, 0.15497254629318902, 0.10843083515633356, 0.12491147494312993, 0.12083226023290516, 0.09530756765047677, 0.13779665105898398, 0.1566423781059617, 0.13177279332624836, 0.7619253387912641, 0.10879208126655426, 0.9900039642566214, 0.9912054886395115, 0.9892835946149235, 0.989272898705286, 0.9914234457349567, 0.9899487446407087, 0.9862712714294536, 0.9924346378955583, 0.9894236925338397, 0.06183252292731378, 0.7928155537406044, 0.8110009337735927, 0.784776980311748, 0.7515827022674024, 0.7909741483818441, 0.7584390145486468, 0.12802432823106025, 0.051815162534438186, 0.8739809071800879, 0.17110312956816653, 0.3722579147199748, 0.160258886420933, 0.21298168633354653, 0.11716648916620764, 0.8517168605390006, 0.8676236766376858, 0.2434905235354231, 0.14516719575401804, 0.24860311735758156, 0.29781877819614655, 0.13090800590083385, 0.2443589859574512, 0.1303644941326133, 0.2594327127745061, 0.2645230835523469, 0.3441445146929325, 0.2315140697613589, 0.25522423304589525, 0.25225974371736937, 0.2174912433319417, 0.2830728691986808, 0.13388793694560286, 0.28618269419577824, 0.2570342101645303, 0.2690944270466177, 9.999999999998899e-05, 0.06097252138800957, 0.0039028851888267546, 0.003477633651886358, 9.999999999998899e-05, 0.08739638045574416, 0.003809179104971916, 0.00021725199339284185, 9.999999999998899e-05, 0.08325068734809105, 0.06296948890020615, 0.1375408918757144, 0.07358551972771188, 0.03207098693312471, 0.06797916226568501, 0.07896953483165858, 0.05830805105307224, 0.01650527624830378, 0.042584952278022836, 0.09216076380221672, 0.05125854933976448, 0.08917389720783231, 0.0972682125789448, 0.0775479689135824, 0.16505206733057365, 0.22087623888785268, 0.1913546031880543, 0.112065499599167, 0.16088240290379907, 0.1534865316146521, 0.06605185127559632, 0.18944526397928962, 0.1657397216088109, 0.08370628041648798, 0.09044655453158523, 0.08368998534173666, 0.5760367622595579, 0.5645473421498871, 0.5590505319882944, 0.6291598150669143, 0.5653177404856273, 0.6046911214298636, 0.6073586107132756, 0.6229915749921491, 0.5890622430666612, 0.15860068531112903, 0.05113818293244898, 0.11123765318381718, 0.12143702979832283, 0.14120350178520058, 0.14618310985829108, 0.13918785708935788, 0.08644495781084627, 0.13168191645119864, 0.1956073197529028, 0.2106100297037068, 0.1629196053201556, 0.16739877125217195, 0.287633471038488, 0.29269468488777917, 0.18103045933226058, 0.18744967843164684, 0.22200238092604163, 0.3581045757802255, 0.3264790476814502, 0.4908168136485659, 0.4905346405928289, 0.26117848054776227, 0.5768961167476715, 0.5495540760447815, 0.6263880465288594, 0.48813714252176343, 0.2509982465498086, 0.24927269979622535, 0.29902202571453596, 0.3084116652641996, 0.222918186956663, 0.21420286611529826, 0.2572832040652858, 0.16138324469415877, 0.31990867849043314, 0.2367197614828941, 0.2095610634005003, 0.22137759949719626, 0.2126990585259828, 0.24327295061287857, 0.21924538638192592, 0.21093622630605946, 0.19523424157932967, 0.22772898703709732, 0.18557496804182683, 0.18936384237380544, 0.1819712562283443, 0.19729361379590515, 0.20263412090434485, 0.21176560955804347, 0.24295250571781912, 0.23891685138729335, 0.2080413832479765, 0.17158974791303394, 0.16608940972633446, 0.19992865041738683, 0.16617224895104887, 0.18823354609748444, 0.12255045987439683, 0.14161229201279857, 0.14700855209139796, 0.16595780785930347, 0.20921527838712084, 0.1126884955709131, 0.16852754005899262, 0.2099609744159503, 0.1665608486917961, 0.16775186982547208, 0.19959687957251016, 0.8729780092408529, 0.19768855226077198, 0.19398080043063215, 0.20347854627737638, 0.18733044774434715, 0.19831494097904, 0.1930465389154694, 0.20813212681946114, 0.19594719363045776, 0.19359573658427598, 0.1993085133582082, 0.09837696532331541, 0.11728374177815892, 0.11287652675671656, 0.0983730305891013, 0.08271539797987093, 0.10102523726284962, 0.08646611006099592, 0.10281320402580918, 0.09283788738693133]}, "mutation_prompt": null}
{"id": "aeb25df1-41b2-4099-b739-3a4621c3edff", "solution": "import numpy as np\n\nclass HybridEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.85  # Slightly more aggressive mutation factor\n        self.cr = 0.85  # Adjusted crossover probability for diversity\n        self.w = 0.45  # Modified inertia weight for adaptive balance\n        self.c1 = 1.7  # Increased cognitive coefficient for local exploitation\n        self.c2 = 1.3  # Reduced social coefficient for diverse exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvolutionarySwarmOptimization", "description": "Hybrid Evolutionary and Swarm Optimization (HESO): An enhanced adaptive algorithm integrating evolutionary strategies and diverse swarm dynamics for improved convergence and scalability.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d96a705-8a3d-46d5-a1a9-e1eff8ef8442", "metadata": {"aucs": [0.8988619382158812, 0.8763416797475692, 0.9176685584587494, 0.9130212791005353, 0.9075396276681037, 0.18324133042418955, 0.916546023000525, 0.8971293262163191, 0.912402298462561, 0.794797298359353, 0.8062432626803753, 9.999999999998899e-05, 0.7619348012933825, 0.7162082837173667, 0.7888104266212521, 0.7757699621936258, 0.052939793325018636, 0.8077437756101006, 0.11549401877701349, 0.1821168674204654, 0.15522706763221705, 0.07377387876586494, 0.14297325407454176, 0.0755669846475786, 0.12768338505747634, 0.09580238462554647, 0.15497254629318902, 0.10843083515633356, 0.12491147494312993, 0.12083226023290516, 0.09530756765047677, 0.13779665105898398, 0.1566423781059617, 0.13177279332624836, 0.7619253387912641, 0.10879208126655426, 0.9900039642566214, 0.9912054886395115, 0.9892835946149235, 0.989272898705286, 0.9914234457349567, 0.9899487446407087, 0.9862712714294536, 0.9924346378955583, 0.9894236925338397, 0.06183252292731378, 0.7928155537406044, 0.8110009337735927, 0.784776980311748, 0.7515827022674024, 0.7909741483818441, 0.7584390145486468, 0.12802432823106025, 0.051815162534438186, 0.8739809071800879, 0.17110312956816653, 0.3722579147199748, 0.160258886420933, 0.21298168633354653, 0.11716648916620764, 0.8517168605390006, 0.8676236766376858, 0.2434905235354231, 0.14516719575401804, 0.24860311735758156, 0.29781877819614655, 0.13090800590083385, 0.2443589859574512, 0.1303644941326133, 0.2594327127745061, 0.2645230835523469, 0.3441445146929325, 0.2315140697613589, 0.25522423304589525, 0.25225974371736937, 0.2174912433319417, 0.2830728691986808, 0.13388793694560286, 0.28618269419577824, 0.2570342101645303, 0.2690944270466177, 9.999999999998899e-05, 0.06097252138800957, 0.0039028851888267546, 0.003477633651886358, 9.999999999998899e-05, 0.08739638045574416, 0.003809179104971916, 0.00021725199339284185, 9.999999999998899e-05, 0.08325068734809105, 0.06296948890020615, 0.1375408918757144, 0.07358551972771188, 0.03207098693312471, 0.06797916226568501, 0.07896953483165858, 0.05830805105307224, 0.01650527624830378, 0.042584952278022836, 0.09216076380221672, 0.05125854933976448, 0.08917389720783231, 0.0972682125789448, 0.0775479689135824, 0.16505206733057365, 0.22087623888785268, 0.1913546031880543, 0.112065499599167, 0.16088240290379907, 0.1534865316146521, 0.06605185127559632, 0.18944526397928962, 0.1657397216088109, 0.08370628041648798, 0.09044655453158523, 0.08368998534173666, 0.5760367622595579, 0.5645473421498871, 0.5590505319882944, 0.6291598150669143, 0.5653177404856273, 0.6046911214298636, 0.6073586107132756, 0.6229915749921491, 0.5890622430666612, 0.15860068531112903, 0.05113818293244898, 0.11123765318381718, 0.12143702979832283, 0.14120350178520058, 0.14618310985829108, 0.13918785708935788, 0.08644495781084627, 0.13168191645119864, 0.1956073197529028, 0.2106100297037068, 0.1629196053201556, 0.16739877125217195, 0.287633471038488, 0.29269468488777917, 0.18103045933226058, 0.18744967843164684, 0.22200238092604163, 0.3581045757802255, 0.3264790476814502, 0.4908168136485659, 0.4905346405928289, 0.26117848054776227, 0.5768961167476715, 0.5495540760447815, 0.6263880465288594, 0.48813714252176343, 0.2509982465498086, 0.24927269979622535, 0.29902202571453596, 0.3084116652641996, 0.222918186956663, 0.21420286611529826, 0.2572832040652858, 0.16138324469415877, 0.31990867849043314, 0.2367197614828941, 0.2095610634005003, 0.22137759949719626, 0.2126990585259828, 0.24327295061287857, 0.21924538638192592, 0.21093622630605946, 0.19523424157932967, 0.22772898703709732, 0.18557496804182683, 0.18936384237380544, 0.1819712562283443, 0.19729361379590515, 0.20263412090434485, 0.21176560955804347, 0.24295250571781912, 0.23891685138729335, 0.2080413832479765, 0.17158974791303394, 0.16608940972633446, 0.19992865041738683, 0.16617224895104887, 0.18823354609748444, 0.12255045987439683, 0.14161229201279857, 0.14700855209139796, 0.16595780785930347, 0.20921527838712084, 0.1126884955709131, 0.16852754005899262, 0.2099609744159503, 0.1665608486917961, 0.16775186982547208, 0.19959687957251016, 0.8729780092408529, 0.19768855226077198, 0.19398080043063215, 0.20347854627737638, 0.18733044774434715, 0.19831494097904, 0.1930465389154694, 0.20813212681946114, 0.19594719363045776, 0.19359573658427598, 0.1993085133582082, 0.09837696532331541, 0.11728374177815892, 0.11287652675671656, 0.0983730305891013, 0.08271539797987093, 0.10102523726284962, 0.08646611006099592, 0.10281320402580918, 0.09283788738693133]}, "mutation_prompt": null}
{"id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "solution": "import numpy as np\n\nclass AdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75  # Adjusted mutation factor for balanced exploration-exploitation\n        self.cr = 0.9  # Increased crossover probability for diversity\n        self.w = 0.4  # Lower inertia weight for increased convergence speed\n        self.c1 = 1.5  # Slightly increased cognitive coefficient for focused local search\n        self.c2 = 1.4  # Balanced social coefficient for global exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveEvolutionarySwarmOptimization", "description": "Adaptive Evolutionary Swarm Optimization (AESO): A dynamically adaptive algorithm combining evolutionary mutation and swarm-based refinement for efficient global and local search.", "configspace": "", "generation": 19, "fitness": 0.31066189386618037, "feedback": "The algorithm AdaptiveEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "4d96a705-8a3d-46d5-a1a9-e1eff8ef8442", "metadata": {"aucs": [0.9098895303544797, 0.9115178072373437, 0.924694207560767, 0.9226135980307928, 0.9213789429235442, 0.1900766100364576, 0.9154549123464074, 0.9233275811841812, 0.912286990712088, 0.7749713976522081, 0.8146813497312986, 0.7944058270879195, 0.819877932824482, 0.8155567684193846, 0.8208522262468385, 0.7871985088679044, 0.8199753474285704, 0.8169458266683542, 0.16182543305464092, 0.11597525406346354, 0.1442672864717799, 0.15807634125535897, 0.13087626601378666, 0.06459839749604068, 0.09557958392281163, 0.12327750223130951, 0.1401274187063023, 0.14162483551554472, 0.1422088157607666, 0.109088867397925, 0.11404704633774221, 0.15511479576274523, 0.0775674288310132, 0.12243140419113463, 0.10976445452848926, 0.11024666211129552, 0.9897167874084744, 0.9908282069237748, 0.9862820942843737, 0.9943120812539199, 0.991669054249653, 0.9909277418670336, 0.9937546593418108, 0.9909186110922243, 0.9895752755399376, 0.8068173182758134, 0.7860631569109648, 0.7660810184362821, 0.7700985285710885, 0.15266189605729485, 0.8182908265082428, 0.08877691764353435, 0.8012358364089429, 0.05149499470134855, 0.20917524065444715, 0.8765293307086479, 0.21680152222341087, 0.16103712316320284, 0.21329126255474073, 0.19177225132636821, 0.24181958532130832, 0.39004782423770124, 0.1506373579168978, 0.27310068214495253, 0.27604109785688413, 0.28533662312731334, 0.13287910750075294, 0.27830671808906604, 0.12860487131474163, 0.2726461882242154, 0.20485665869924474, 0.2818477596065311, 0.29157241500018327, 0.2745237901832991, 0.2819994726318774, 9.999999999998899e-05, 0.17437107273977526, 0.3223778704526503, 0.29574642859532874, 0.30263970503528526, 0.10400801349119193, 9.999999999998899e-05, 9.999999999998899e-05, 0.014591383806971336, 0.0203969072023521, 0.038547564934057976, 9.999999999998899e-05, 0.0016554509309884002, 0.014197491746561375, 9.999999999998899e-05, 0.09082177392516366, 0.05401943097120254, 0.038044108367923934, 0.03032665086804287, 0.02319777326603001, 0.04190903047424521, 0.06009884101746288, 0.08096942982358069, 0.042270679399742606, 0.03598015815548128, 9.999999999998899e-05, 0.05124001680492907, 0.22577026069062778, 0.08058396316793393, 0.07962563126860167, 0.10381914213451471, 0.21696527388759823, 0.07423947775300654, 0.05161325761397706, 0.043154747237164504, 0.17876222609379033, 0.2632584847711853, 0.06811623926715094, 0.24496160101588949, 0.06967628345745414, 0.049535649550694005, 0.08432769737118984, 0.5975491330550808, 0.6843434900476526, 0.597780483863273, 0.6274887713961803, 0.5594631957686791, 0.6104006168677094, 0.6097676931411269, 0.6028100414239653, 0.5829761916474945, 0.14161564036314211, 0.08292743932583946, 0.07022134852477158, 0.0735522076055406, 0.1554298777847316, 0.0853479021832585, 0.07106014793647297, 0.1409604981949074, 0.1460098079829122, 0.20193572551644345, 0.19603072168294566, 0.2744287601452071, 0.2006735742319169, 0.12567254401690897, 0.22164700994160125, 0.23051171369022327, 0.2251245177760658, 0.18764664177988832, 0.4793178637698835, 0.4107268162414288, 0.3632326697230389, 0.5147420463138435, 0.22412428001387608, 0.2671233514167356, 0.29362825937904313, 0.46876666722619875, 0.6015982094350851, 0.29788830563928814, 0.343897939252341, 0.2852785840064933, 0.18842819763057428, 0.3410261913832131, 0.2849756756220614, 0.173931763586626, 0.20945589284899868, 0.4282885473586914, 0.21529354579190663, 0.21852134495762898, 0.192603511808631, 0.21018737349566363, 0.22167122897768488, 0.2032321655222199, 0.24862387111705753, 0.25057032363171994, 0.19654657258944297, 0.19589629905719863, 0.24902596172805191, 0.2239061272471865, 0.1969052922601291, 0.19080293303214968, 0.211528366409781, 0.2035276813928052, 0.2088131471794935, 0.22366538065225927, 0.17347168811863833, 0.16629531769865513, 0.9133844315530291, 0.13156717527937867, 0.1883168632594302, 0.15799618882012523, 0.16970170386439587, 0.16646986002183273, 0.17161013209662634, 0.16125492340093373, 0.11226703330597321, 0.11732831125671983, 0.8733690115891128, 0.1686826876941806, 0.836605533507628, 0.21012807662733968, 0.8826820034740877, 0.15572728662020907, 0.21343814084237833, 0.2123590311018141, 0.21390874519740444, 0.19957397976592728, 0.17716381207627852, 0.205115866296802, 0.18323885805686124, 0.1816868589659888, 0.22199838456557708, 0.09712362690759013, 0.12938041427119207, 0.10451330766462275, 0.09756047927148681, 0.08980449453648676, 0.09177438084522527, 0.10809536043372026, 0.09916116760401494, 0.10193109069551443]}, "mutation_prompt": null}
{"id": "f5eb276d-589e-4922-aa08-1cc6ab224a48", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Increased mutation factor for enhanced exploration\n        self.cr = 0.85  # Balanced crossover probability for diversity\n        self.w = 0.5  # Moderate inertia weight for stability\n        self.c1 = 1.3  # Reduced cognitive coefficient for less local entrapment\n        self.c2 = 1.7  # Increased social coefficient for global exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-Inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Quantum Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredEvolutionarySwarmOptimization", "description": "Quantum-Inspired Evolutionary Swarm Optimization (QIESO): Integrates quantum superposition principles into evolutionary and swarm dynamics for enhanced exploration and exploitation.", "configspace": "", "generation": 20, "fitness": 0.2709131132455229, "feedback": "The algorithm QuantumInspiredEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.8703086523621398, 0.8674413032990363, 0.8889188547622424, 0.18963338015771602, 0.8708842322686302, 0.18327086581129592, 0.1824907140565607, 0.1760203801627631, 0.17506882799522205, 0.7145710004439122, 0.688125649680813, 0.734696830603751, 0.6542519641152145, 0.06445102843084627, 0.7502912764119953, 0.7535165316621282, 0.7074950047175002, 0.7239825847042012, 0.09963559264709132, 0.670061762314511, 0.11684077073671084, 0.0730963482665482, 0.0711351742890487, 0.06119531111163612, 0.14088500213071675, 0.15971937851164764, 0.11874991085527431, 0.11332137216529703, 0.11120519959465602, 0.10238485986548751, 0.1381194464249489, 0.14833098667586286, 0.13179477575471898, 0.10940592235902658, 0.13587986692292742, 0.08959962808020538, 0.9927943461477102, 0.9933043402166847, 0.9899415347909901, 0.9898531189364197, 0.9907463014301519, 0.9910414599586336, 0.9944104533879508, 0.9905531929597046, 0.9896209218723238, 0.7560608461316184, 0.11398173082835694, 0.7230613878233298, 0.6157332702431342, 0.7721216125756865, 0.15125500541071857, 0.6988127875720455, 0.12620375895988023, 0.08795168392227459, 0.17239084786031778, 0.36352686874547735, 0.8220304786534441, 0.8838645054119463, 0.2773758854849995, 0.27701528419192933, 0.2398478147044154, 0.398560527155988, 0.17442239968090123, 0.10989047373187621, 0.24154402334900837, 0.2790690772607126, 0.10585030512041083, 0.256706489832069, 0.24645996789209534, 0.2043496726411982, 0.19505631981408478, 0.25107906093541854, 0.24421618238261422, 0.24612316801490275, 0.23774248661135922, 9.999999999998899e-05, 0.2672226784519156, 0.2616615737206164, 0.03346006392626821, 0.27956275109348105, 0.16484352233196498, 9.999999999998899e-05, 0.002171133449076823, 0.061284651857836825, 9.999999999998899e-05, 0.0557400376109739, 0.010727204457911976, 0.003813218278346131, 9.999999999998899e-05, 9.999999999998899e-05, 0.11287687380084466, 0.04840750667911198, 0.04885935359728688, 0.04448072675103343, 0.00011598119037137256, 0.03569712693652305, 0.06175518308643746, 0.023747975836097557, 0.008920095048591259, 0.035998685451813395, 0.0324462399420028, 0.04946201452713306, 0.09368378090437379, 0.0935357638159543, 0.09313606850963785, 0.07298051222618829, 0.07454060460955714, 0.08202228538320355, 9.999999999998899e-05, 0.027902593465647274, 0.14865440498464255, 0.13862350977046212, 0.2296429116661186, 0.13196591180342254, 9.999999999998899e-05, 0.0573706617964721, 0.08356723930465537, 0.5215627372554306, 0.556880066448202, 0.5863653579717922, 0.5806657120381324, 0.5621952404125341, 0.6138638896747571, 0.5797678315227677, 0.596071728083997, 0.584747448655061, 0.09640543999762663, 0.10995648162838201, 0.12451771006508283, 0.07219646358115406, 0.0930636610271175, 0.11134872779187532, 0.09111361326981537, 0.14226502256880158, 0.08624081321830723, 0.22606389850054842, 0.17848290516777743, 0.32715857923140834, 0.2009214872741849, 0.20889867833716325, 0.19396550839504156, 0.18716231777444514, 0.1979424103396623, 0.21204207019088495, 0.2520459311095845, 0.2606497474857431, 0.4810317408901398, 0.22159222323982108, 0.26092951563641575, 0.3496756530549969, 0.41532494113651575, 0.29010557716018426, 0.6243221485310334, 0.23404065856208633, 0.18358048937853289, 0.19814062004851507, 0.2369124148928694, 0.18273462569904464, 0.40152333554123054, 0.27752050215824964, 0.2062486445856213, 0.35932421831680617, 0.2368678845560176, 0.20166674858416744, 0.22368063433431806, 0.1940935781249673, 0.18713469128475602, 0.21353510479610627, 0.1849155349440773, 0.23740757512776123, 0.2117983316474531, 0.20379236668878464, 0.22329937328728, 0.19929756198106752, 0.20402330216930364, 0.20801240759117767, 0.20856243862655632, 0.20771354769935357, 0.19138681743613428, 0.2502757657964121, 0.1666490223982532, 0.17323524773604937, 0.15564781945646755, 0.16524188901171, 0.14488112248383367, 0.11691780522437634, 0.14178328180704847, 0.15799455523047656, 0.1665006825192411, 0.2109007897793762, 0.11202624655529925, 0.16559211515128813, 0.205630653996291, 0.7234947426493994, 0.16715218905578333, 0.20977141610878125, 0.19956307335311518, 0.21002626484697662, 0.19595526999928747, 0.18356313252127898, 0.19169913842198172, 0.21250367328659547, 0.20742614984297136, 0.2296986343880657, 0.22090111605792495, 0.19894430533268703, 0.2168984916484077, 0.08550991355509885, 0.15964680924104446, 0.1021037801792336, 0.08680184388114343, 0.08559698431869567, 0.07705736239538785, 0.06215519164109995, 0.10498516373257005, 0.08481330143963983]}, "mutation_prompt": null}
{"id": "ecab8b8c-fcce-421f-9a72-dbefc9d85d17", "solution": "import numpy as np\n\nclass HybridQuantumInspiredEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Slightly increased population for diversified search\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))  # Fine-tuned velocity range\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Increased mutation factor for extensive exploration\n        self.cr = 0.85  # Lower crossover probability for strategic diversity\n        self.w = 0.3  # Further reduced inertia for faster convergence\n        self.c1 = 1.7  # Enhanced cognitive coefficient to boost personal achievement\n        self.c2 = 1.5  # Adjusted social coefficient for effective global search\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution with Quantum-inspired Mutation\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                q_bit_flip = np.random.rand(self.dim) < 0.1  # Quantum-inspired bit flip\n                mutant_vector = np.where(q_bit_flip, -mutant_vector, mutant_vector)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Quantum Jump\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                quantum_jump = np.random.rand(self.dim) < 0.05  # Quantum jump for escaping local optima\n                self.population[i] += np.where(quantum_jump, np.random.uniform(self.lower_bound, self.upper_bound, self.dim), self.velocities[i])\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridQuantumInspiredEvolutionarySwarmOptimization", "description": "Hybrid Quantum-Inspired Evolutionary Swarm Optimization (HQESO): A novel quantum-inspired mechanism enhancing evolutionary mutation and swarm intelligence for improved exploration and convergence.", "configspace": "", "generation": 21, "fitness": 0.2125897927631654, "feedback": "The algorithm HybridQuantumInspiredEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.4523897207622768, 0.4959916403031841, 0.4439067324074929, 0.4535307061610315, 0.5414684537745453, 0.551018918390464, 0.3986381493400515, 0.4833672678428137, 0.49024845452699006, 0.18328426816843357, 0.15655166150082678, 0.1800152242200136, 0.1279963893245475, 0.2326340421664932, 0.12195045355038692, 0.14528569412283687, 0.17965531028217008, 0.24046799385333284, 0.16543859800924876, 0.10728226607013402, 0.13322240689577047, 0.1085136755056646, 0.11257119100117541, 0.1137829462480211, 0.10313222244768894, 0.11205046022567045, 0.12651918981226518, 0.09672755019338419, 0.0948901730110745, 0.10656408313144672, 0.13300725671389702, 0.0799252716538782, 0.11788093127106036, 0.10865233800289786, 0.10676197786806696, 0.09860082761726785, 0.9921912789926837, 0.9926234190247587, 0.9907085953682101, 0.9866358115513228, 0.9889621669299811, 0.9915261157449123, 0.9923768076620991, 0.9872067992779662, 0.9958158870669339, 0.25790711724088644, 0.2517295244466903, 0.2642370439316918, 0.22336269964289224, 0.28029130400967694, 0.24290263966695347, 0.22659279810577304, 0.2198487052781699, 0.24267350045274116, 0.295216447305784, 0.2540075196400823, 0.2814276298407071, 0.18750913917358725, 0.20871288120605014, 0.2684046936817803, 0.22644467243797084, 0.2082829823229152, 0.1974133505518808, 0.12843344677293167, 0.14814380598241728, 0.17219510185701603, 0.17113111671656756, 0.11656893297110404, 0.13927491172839457, 0.15559285951031943, 0.14926499286026684, 0.18582250553469537, 0.11650733446106243, 0.12080075065434082, 0.1682974567456611, 0.1624893836724849, 0.1562746385708983, 0.1493739638635958, 0.21315371304024378, 0.13115394081830456, 0.03710401270027108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04373933654043671, 0.10477368654505281, 0.08394925599735692, 0.06448380990670322, 0.04999986780568, 0.061261111453855155, 0.08324419226902224, 0.05033932905833993, 0.08182327005985957, 9.999999999998899e-05, 0.0011016079526896538, 0.000673161326856131, 0.047147211983514015, 9.999999999998899e-05, 0.04640753282962029, 0.04798428144804534, 0.026595614321377026, 9.999999999998899e-05, 0.0451597133550522, 0.0531145954465424, 0.05909947557702688, 0.01024737002784204, 0.11759914705957486, 0.04954459101654052, 0.08516180202719692, 0.07558719866151953, 0.07377246397843318, 0.42270581607780555, 0.4061218103647749, 0.36946011282843816, 0.41754911028726205, 0.4050437429968202, 0.40742394667464177, 0.4477183811178044, 0.37857293007274706, 0.41143703913826846, 0.10281832054342177, 0.09753269450759705, 0.07885432187638086, 0.10635065297612711, 0.09696204222970284, 0.08641603320122415, 0.11379622526831645, 0.08907746845270526, 0.10646887782877001, 0.14992883072959373, 0.25016510903966294, 0.18337257794843032, 0.17426571169371652, 0.1478233136444378, 0.20268019989337904, 0.1669819165285681, 0.22874995445994817, 0.19379112646901153, 0.29307788008508484, 0.25144327988697923, 0.2866224426453555, 0.3243525580903872, 0.3148453724081487, 0.2441297019689429, 0.265120155299557, 0.2798500565718345, 0.2731882518781398, 0.1657416665978051, 0.1894810231562125, 0.15680664208646267, 0.18873245267819272, 0.24445003126845155, 0.17553424184371647, 0.2040415310067838, 0.23148332822579476, 0.1896723648999339, 0.19119541245644422, 0.21273562193646134, 0.19263652396759567, 0.19859536796816946, 0.18805914396689682, 0.20682302099509287, 0.21555241009096038, 0.18663750246121513, 0.2306227556226882, 0.24287020063329945, 0.21949759874078323, 0.21060497338028072, 0.20193331051744168, 0.19018371729283334, 0.21546669489213954, 0.21129584226796405, 0.19231497895671357, 0.21099838702506102, 0.15221905420885906, 0.18559739898486793, 0.6609284769876111, 0.18507895805758856, 0.558892455655678, 0.17550701940823987, 0.17799540577962203, 0.18548669565977116, 0.17344055617029064, 0.16697038729551228, 0.15403302262899565, 0.16955441568298557, 0.2039860503673191, 0.1599882754115024, 0.2047314461887495, 0.31360352813243575, 0.11156702772303584, 0.16580789689135678, 0.17824108079972556, 0.20371115560147468, 0.19445035671160849, 0.18797851892235862, 0.18188396715471522, 0.17545679643255319, 0.18088113663036198, 0.18812770342527052, 0.18332470310864857, 0.09612419777114667, 0.09147254119736048, 0.07342047886101022, 0.07723293880094972, 0.07511896971987886, 0.08942489870225123, 0.08101354158677676, 0.08752268574351074, 0.08542831178000487]}, "mutation_prompt": null}
{"id": "236a32ac-d1d6-4d50-b4b9-ffb8fd13e879", "solution": "import numpy as np\n\nclass HybridEvolutionarySwarmAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted mutation factor for improved exploration\n        self.cr = 0.85  # Optimized crossover probability for better trade-off\n        self.w = 0.5  # Adjusted inertia weight for stability\n        self.c1 = 1.6  # Enhanced cognitive coefficient for stronger local search\n        self.c2 = 1.3  # Fine-tuned social coefficient for maintaining global diversity\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvolutionarySwarmAlgorithm", "description": "Hybrid Evolutionary-Swarm Algorithm (HESA): An enhanced metaheuristic integrating adaptive DE and PSO techniques with strategic parameter tuning for improved convergence and diversity.", "configspace": "", "generation": 22, "fitness": 0.29741577094760846, "feedback": "The algorithm HybridEvolutionarySwarmAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.8935554005067368, 0.8826850116691433, 0.8906601942243554, 0.873419722813383, 0.8943732093612852, 0.8980386140871071, 0.8913123183461191, 0.9067892837912748, 0.892270112455417, 0.7591213995757082, 0.7718810421341358, 0.771427995743602, 0.7441230119144917, 0.7274889503810322, 0.7788124324006511, 0.6201933926671224, 0.7840682499523708, 0.7541948095414838, 0.12988226750338594, 0.1778310807387148, 0.15636951812662314, 0.11475592592614281, 0.10997103561157129, 0.14326325569676734, 0.6837289716671743, 0.16042824317045, 0.13184139139949513, 0.10838738803107228, 0.11346551091068213, 0.11284302190077011, 0.10650406489144493, 0.1460945406287223, 0.15584982465309127, 0.13189116411941593, 0.12067572271110272, 0.12716195660973462, 0.9896022692118613, 0.9933155777455649, 0.9875453862522254, 0.986552433496836, 0.9918076130149664, 0.9905199438053045, 0.9899938738979792, 0.9923983780241861, 0.989614193126682, 0.6812929412933818, 0.11476954003808748, 0.05849200196805582, 0.15105976819163203, 0.7809159295555755, 0.777177539226299, 0.7715182740571276, 0.7480397264129369, 0.08814921377239227, 0.18812576253557867, 0.22673850016840047, 0.35812738196136684, 0.15928099958029163, 0.16033713642595793, 0.19267481471545478, 0.11884559163736597, 0.8549342437162204, 0.23609255020143105, 0.16286569011384255, 0.228675979736631, 0.2760996751352728, 0.1346700308934936, 0.2363509122615739, 0.10973616464327696, 0.25974109085935027, 0.2505420261549046, 0.2398056972437752, 0.2441320814517709, 0.22296184490139637, 0.2831911609816812, 0.26996753780235316, 9.999999999998899e-05, 0.13292729801208536, 0.2903001960067876, 0.27821299427123536, 0.2770828492111468, 0.04745899558175992, 9.999999999998899e-05, 0.11786446109333215, 0.010160019720881652, 9.999999999998899e-05, 0.09077700684990564, 0.009100484765891315, 0.0754561559019592, 9.999999999998899e-05, 0.09753624177498965, 0.024360979450038345, 0.08318937548003247, 0.002183182563768926, 0.0242632494669609, 0.008245687342633201, 0.04556539424792061, 0.044773520602814476, 0.07243852975125387, 0.07127324250868128, 9.999999999998899e-05, 0.05060317358252797, 0.09301976394180023, 0.10993057614550905, 0.08186846066692599, 0.09111247191319094, 0.18502761443488192, 0.10323477280306304, 0.051946808563756885, 0.04457256621873984, 0.18349854660746245, 0.048180257197435794, 0.1355835540674405, 0.006523749274461643, 0.0937878080757153, 0.19288016256861273, 0.0820379994057927, 0.6047516534784888, 0.5290182922169863, 0.5475910297350702, 0.6113092784248362, 0.5721496627066067, 0.18286966220441514, 0.6138281077013252, 0.5810724859887395, 0.5918549116043244, 0.12089894365475318, 0.09350872314235181, 0.09493621120362439, 0.11128439105234589, 0.12706909464969052, 0.07893609633571119, 0.14117703490321143, 0.14068520420404784, 0.1482426075381007, 0.19545889799713245, 0.1515860279689678, 0.18536413301542454, 0.14539354383979863, 0.1922824961309939, 0.16515444068250362, 0.2395588707401214, 0.17446998537583402, 0.15462412615178966, 0.36533080537673046, 0.24596307016633956, 0.6226934928308858, 0.5405042502161603, 0.415819246117773, 0.4919100173989245, 0.5791785526945767, 0.4265850762462541, 0.5751119327282792, 0.20491646488041004, 0.2251873229606377, 0.2864125458370572, 0.19139183951262362, 0.18026888280956788, 0.23635563012224114, 0.23704079773279574, 0.3037661697188858, 0.26454015963730304, 0.24963038125954795, 0.2608942692762397, 0.2599537707872832, 0.21431007577487193, 0.21751146070009486, 0.22013508510952062, 0.2071045073740464, 0.21761353202480127, 0.23862105758963803, 0.22307384008549203, 0.20863946563614255, 0.19403050592632864, 0.18942707183045016, 0.25268384797702703, 0.20719484177686676, 0.20976886240729054, 0.22380909513732938, 0.19972305733654205, 0.17113743008981053, 0.17050011097236784, 0.9184557656839697, 0.1650793742432346, 0.17797289989306542, 0.15801510126286433, 0.1695246994678442, 0.16283985113198163, 0.1445055680803956, 0.21188267702772923, 0.11314238442336466, 0.14529133769165892, 0.168064751228866, 0.1679070711257442, 0.6475301361069621, 0.20339196536590554, 0.10498464861579337, 0.19447722467603523, 0.2053929974246942, 0.2055863771778218, 0.1769981679903907, 0.1863558376485066, 0.19363496446493045, 0.18369768728080849, 0.2361191045766119, 0.1874229291253242, 0.21711449243731162, 0.11064827774684849, 0.10741992649153931, 0.0775561395359422, 0.09293475924403594, 0.1027399380667059, 0.09307984996619578, 0.09436188516411315, 0.08770697324790089, 0.08665666021634333]}, "mutation_prompt": null}
{"id": "a8577f1d-d79c-45a7-bda0-81a5bf39ba0b", "solution": "import numpy as np\n\nclass AdaptiveEvolutionaryParticleSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted mutation factor for enhanced exploration\n        self.cr = 0.85  # Moderated crossover probability for adaptation\n        self.w_start, self.w_end = 0.9, 0.4  # Dynamic inertia weight for exploration-convergence transition\n        self.c1 = 1.6  # Increased cognitive coefficient for better local refinement\n        self.c2 = 1.3  # Slightly lower social coefficient for balanced exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Dynamic Particle Swarm Optimization\n            w = self.w_start - (self.w_start - self.w_end) * (self.eval_count / self.budget)\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveEvolutionaryParticleSwarm", "description": "Adaptive Evolutionary Particle Swarm with Dynamic Strategy (AEPDS): Integrates adaptive differential mutation with dynamic particle swarm adjustments for improved convergence and diversity.", "configspace": "", "generation": 23, "fitness": 0.21744459090692433, "feedback": "The algorithm AdaptiveEvolutionaryParticleSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.592230623185055, 0.5713527194908562, 0.6387755196230398, 0.6267967356557942, 0.6361267839099676, 0.5959813139345422, 0.610740192206918, 0.5304079511461701, 0.1789067464232139, 0.051095913399165305, 0.3136887112558556, 0.43149311349820574, 9.999999999998899e-05, 0.028047628945563674, 0.04062116974458074, 0.02876040023211557, 0.3914161991166202, 0.3318507292445334, 0.12334078809383042, 0.12070703770571711, 0.06703903650813137, 0.06675736333176974, 0.10157941844331486, 0.1571664519775351, 0.11167565597052398, 0.09029350304743966, 0.08754137602606626, 0.09292225648554087, 0.08760211218275216, 0.11032036020750002, 0.09622680846636378, 0.10013226318001567, 0.10837164068481542, 0.09155973641726889, 0.09490336803324773, 0.10216956513060427, 0.9927749736770884, 0.9933400867147438, 0.98969614737649, 0.9851295075330802, 0.9937854493219936, 0.9908847207185667, 0.9895693328788757, 0.9924430332221147, 0.9896270970225852, 0.05789863590786315, 0.39100811336798746, 0.0580436294041059, 0.352173759011843, 0.32805648426659484, 0.13586882736188932, 0.08528266743177904, 0.08515571938345345, 0.048373850198812574, 0.5408428177380271, 0.19368998820743677, 0.15220493907278854, 0.1529979390568822, 0.620132573757556, 0.17519862507557593, 0.5114706424028745, 0.12948558220113315, 0.3254542135781999, 0.08005510838460772, 0.15277318542446283, 0.15335274615720773, 0.14394641209809544, 0.11088185834812425, 0.07381759244036634, 9.999999999998899e-05, 0.1412804404870014, 0.142940780613244, 0.15505593001765683, 0.13718493209062976, 0.19420754818826824, 0.09463038421140169, 0.09078566976204605, 0.14308348190561682, 0.14974037269138118, 0.17468047154420596, 0.14942889912907176, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021909983037585734, 9.999999999998899e-05, 0.00034435441510372033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07251321441956915, 0.07106940484155388, 0.06237909295660016, 0.06330312294502205, 9.999999999998899e-05, 0.01832905852279687, 0.017933472351818636, 0.039104109180432944, 0.02724062938909666, 0.026578564092019197, 9.999999999998899e-05, 0.0357688763703492, 9.999999999998899e-05, 0.14353839149723358, 0.053897049200244185, 0.09436997165453609, 0.05606959200399253, 0.04398082045353535, 0.06643515302629344, 9.999999999998899e-05, 9.999999999998899e-05, 0.12279602158048042, 9.999999999998899e-05, 0.13921599573046006, 0.03641996299946948, 0.06473677662897048, 0.06655537315773596, 0.3870868347625688, 0.4224816697033913, 0.44344854399170086, 0.41084704339445677, 0.44321747983667603, 0.44767966591404107, 0.4449641401015366, 0.4403776362759805, 0.4758449018736226, 0.11250515189935573, 0.05399333497002046, 0.10523843488924545, 0.09712405979337313, 0.1082993218185202, 0.077479862736068, 0.10903295737781049, 0.09290056691682491, 0.10273739069213539, 0.19236093481636984, 0.14664503413511576, 0.14806412054428053, 0.14299593494715268, 0.1698568309585886, 0.16372078566261994, 0.1888587802796623, 0.21489088943468526, 0.20961021792655965, 0.34697747852189176, 0.25407463629048177, 0.27835522513076294, 0.27330546369524855, 0.1839190645060509, 0.3165946180634043, 0.3642456550631369, 0.36953302362571616, 0.4285405512238927, 0.17085578003954893, 0.20138282541990793, 0.208089028007994, 0.23765270386581605, 0.173193252956391, 0.2073053243457691, 0.2100808223037799, 0.21978794805801705, 0.22525310089351158, 0.1821052000420722, 0.20486946803468753, 0.21486430006444657, 0.18716974972296407, 0.1985973592089243, 0.18257917191037276, 0.18073817251549062, 0.17242038964741002, 0.17838566484134877, 0.1885213054594267, 0.18184872880885294, 0.19741396680179568, 0.19834099598903265, 0.1910600252387653, 0.18944859390485302, 0.4724301355986905, 0.20338281577276052, 0.16846300382532808, 0.16472895757401895, 0.12312594086458573, 0.7605304876281507, 0.16026710614727724, 0.14470632764660862, 0.2064006403566957, 0.1676360888749383, 0.1294958930901572, 0.14432126802144718, 0.18942249446547343, 0.11136296808777135, 0.5584968331618019, 0.41981900840027475, 0.19019760243398254, 0.4774782328439391, 0.1854758832356992, 0.184734981179965, 0.14891526695472734, 0.21256159573202382, 0.2013294054767193, 0.1980535018717754, 0.19630040012502892, 0.19952543905622666, 0.1963709176277154, 0.19130297217865377, 0.18859459573815762, 0.18446494743514863, 0.08601906735894049, 0.10021680320313608, 0.07432897151406503, 0.07613961998548968, 0.0835161953231478, 0.07086874155730116, 0.08572077395587252, 0.0775892214800189, 0.08065804224838047]}, "mutation_prompt": null}
{"id": "a20d8e3e-f7f7-4949-92eb-5f89bce1e194", "solution": "import numpy as np\n\nclass HybridEvolutionaryParticleGradientAdaptiveOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.85  # Adjusted mutation factor for increased exploration\n        self.cr = 0.85  # Slightly decreased crossover probability for stability\n        self.w = 0.5  # Modified inertia weight for balanced exploration and exploitation\n        self.c1 = 1.6  # Increased cognitive coefficient to improve exploitation\n        self.c2 = 1.3  # Slightly reduced social coefficient for finer global search\n        self.learning_rate = 0.1  # Learning rate for gradient adjustment\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Gradient Adjustment\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Gradient Approximation and Adjustment\n                gradient = (func(self.population[i] + self.learning_rate) - func(self.population[i] - self.learning_rate)) / (2 * self.learning_rate)\n                self.population[i] -= self.learning_rate * gradient\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvolutionaryParticleGradientAdaptiveOptimization", "description": "Hybrid Evolutionary Particle and Gradient Adaptive Optimization (HEPGAO): Combines evolutionary strategies, particle swarm dynamics, and gradient-based adjustments for robust exploration and exploitation.", "configspace": "", "generation": 24, "fitness": 0.12807146460994095, "feedback": "The algorithm HybridEvolutionaryParticleGradientAdaptiveOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.21.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.7688099130135504, 0.8067773897075019, 0.8218705247407838, 0.7959476506970992, 0.8350266203611993, 0.813719343728867, 0.820377750298247, 0.8237515135788374, 0.8210882053825171, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01793890500783668, 0.00380747812326665, 0.000208774811696677, 0.012659366469935929, 0.00873097523772648, 0.00462889395941779, 0.04207489630240924, 0.020866650903067052, 0.016951640753387065, 0.014635001520175162, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00724797254788867, 0.02334575262166072, 0.004602360841645559, 9.999999999998899e-05, 0.9570412523585821, 0.945068948079072, 0.3515087831458148, 0.3500023775653157, 0.26868470353196683, 0.3480874242469464, 0.24624746754451066, 0.31692195516153954, 0.2525779937441004, 0.006060081581300669, 0.007703218442408399, 9.999999999998899e-05, 0.00797328716390655, 9.999999999998899e-05, 0.02587637312613167, 9.999999999998899e-05, 0.03416188466307235, 0.011836594412628076, 0.08796204951237419, 0.0870221826409121, 0.08834770074574516, 0.04771212510430234, 0.027227708556813557, 9.999999999998899e-05, 0.05730646390462768, 0.02196585326260536, 0.06431255121274648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03300454259568286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019055069589750007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.49473909613096645, 0.5218321931385987, 0.553970429853117, 0.5553285842101523, 0.42901447789392055, 0.6181404943147754, 0.5605493705055195, 0.5596261443732166, 0.5924411374081844, 0.028650636089102566, 0.02903295178483678, 0.010139073182597658, 9.999999999998899e-05, 0.017495754318697765, 0.023627428903944425, 0.006460482253306532, 0.025054199348819695, 0.028219681842728606, 0.1043040166895931, 0.10916062149956729, 0.11450196112495248, 0.09794990631515232, 0.10557046657457592, 0.1013508207870989, 0.12153177448126806, 0.12287092472388617, 0.13073237836391527, 0.21509989606175295, 0.24493136041162, 0.2314237905880112, 0.2299259289322928, 0.1951838868381599, 0.15983195640237358, 0.23829572325382276, 0.23544004566009424, 0.20539518120666667, 0.06391839263916721, 0.07250040135104485, 0.08040755678482725, 0.08651351972613652, 0.06992874817790451, 0.09031419179011313, 0.08248350816407168, 0.05977007783892019, 0.05859612232585387, 0.15426314126640683, 0.14639734768291635, 0.13834783826670427, 0.1152035885224102, 0.12260987805848433, 0.17567730115959146, 0.11968631675926622, 0.13023268209699235, 0.1441706268090699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02133509370991471, 9.999999999998899e-05, 0.13351770220644754, 9.999999999998899e-05, 0.0011250037802037482, 0.16188243347381326, 0.1499832463109071, 0.14943462273217156, 0.48024888146864997, 0.47432703264385523, 0.15557413853573177, 0.12848963153457194, 0.1499344433261065, 0.1223507305803112, 0.1647907677169722, 0.15239243945535386, 0.16157690140744452, 0.20838086593394478, 0.24898010803341397, 0.14495132609955874, 0.2074061696369588, 0.13951895750730892, 0.19609470892309122, 0.17345526317690707, 0.1867585584895668, 0.1801334489640496, 0.17127286536632635, 0.1731187222985605, 0.1839484146744803, 0.20471436834313173, 0.18632768445549797, 0.1860197286982701, 0.018944603596568466, 0.02158541263558722, 0.02673440574485708, 0.017561686811079613, 0.012251635408058736, 0.02812656893922938, 0.014664945045783528, 0.02153485417583434, 0.01870779651798571]}, "mutation_prompt": null}
{"id": "13cf3b20-46b2-41ee-9865-de4f8d1593a5", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.82  # Adjusted mutation factor for enhanced exploration\n        self.cr = 0.88  # Balanced crossover probability for stability\n        self.w = 0.35  # Lower inertia weight for faster convergence\n        self.c1 = 1.6  # Increased cognitive coefficient for focused local search\n        self.c2 = 1.35  # Balanced social coefficient for global exploration\n        self.entanglement = np.random.rand(self.population_size, self.dim) * 0.05  # Quantum entanglement factor\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-Inspired Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Superposition state\n                superposition_vector = mutant_vector + self.entanglement[i]\n                superposition_vector = np.clip(superposition_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, superposition_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredAdaptiveEvolutionarySwarmOptimization", "description": "Quantum-Inspired Adaptive Evolutionary Swarm Optimization (QIAESO): Incorporates quantum-inspired superposition and entanglement principles for enhanced diversity and convergence in global search.", "configspace": "", "generation": 25, "fitness": 0.29667215848797485, "feedback": "The algorithm QuantumInspiredAdaptiveEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.9140284143053355, 0.9249538320303009, 0.9326152719168989, 0.9298067588728103, 0.9333265195219727, 0.9344765804643673, 0.8991267858842117, 0.9259777739592234, 0.9293923948504786, 0.8546970984806486, 0.8067454542465442, 0.8398260652719374, 0.7724819168308595, 0.06752212045379602, 0.8497002170726979, 0.8256700640156593, 0.8356779009744417, 0.8365589503740802, 0.18592883456167142, 0.12267131989495361, 0.07171007567553278, 0.12478626919332714, 0.14373636765764508, 0.1448275922738117, 0.1555258525325771, 0.16887684162132954, 0.09766608220762374, 0.14043417219566112, 0.0888248852426946, 0.1397421680708787, 0.12050727748772916, 0.11491827939373633, 0.11554596856226995, 0.13021936410017498, 0.13993664906152137, 0.14199768965380188, 0.9909323583369599, 0.9906972739597429, 0.9931809842967744, 0.9862813619867072, 0.9839075400296815, 0.9899009699210121, 0.9861310204744683, 0.9867669543899846, 0.9902939478941601, 0.764133392241376, 0.5639017744010423, 0.6923394162379444, 0.8272987501806915, 0.22587679289999807, 0.40216443201785057, 0.8081901255384047, 0.08883650529469667, 0.6420264812595557, 0.844790516137366, 0.17175527245318156, 0.7997460490753456, 0.16135320043293044, 0.16141221710645348, 0.11694056419720311, 0.3141258210316621, 0.24358762856247607, 0.1403296426934023, 0.2437111932242273, 0.2510318831326259, 0.25912607975014834, 0.13396665839490018, 0.2634252577703948, 0.11896622339455465, 0.26040067465829275, 0.2657523539292602, 0.1343593609323892, 0.0226553504227488, 0.12378272233488008, 0.25148573966047594, 0.11323001878818872, 0.3423989219249227, 0.26653620606820905, 0.26849810625098314, 0.10539350394336522, 0.25334924947891335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02717498834358434, 0.058869059552817626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09672912559727942, 0.05682877683286791, 0.07863423284117743, 0.03418039607356749, 0.05693755820249624, 0.06505005226603788, 0.046632176386095514, 0.04364557608870823, 0.020372499712072223, 0.06029452648281097, 0.0361450442580199, 0.05475349486923675, 9.999999999998899e-05, 0.0884906796348639, 0.10046605640544748, 0.11623703656101425, 0.07609040241863207, 0.1152039588449163, 0.08427073782254824, 0.19382133457300887, 0.2246748021841095, 0.09173594348873937, 0.05845944411699422, 0.11999801336340077, 0.058497174557041176, 0.058043025302485174, 0.09098018749074488, 0.5447911670658049, 0.5149127115701111, 0.5595480389374414, 0.525842410790643, 0.5635863384147215, 0.5422183054836858, 0.6011555004450706, 0.5819785904266216, 0.5591071394875679, 0.07199741240749458, 0.13338503069844088, 0.082185868840981, 0.09422386607761091, 0.14446618524314958, 0.13381618313922794, 0.1432582516972145, 0.13404845902050055, 0.1102588481330069, 0.2713533043537668, 0.249196334874497, 0.14867849248470244, 0.19355926232026277, 0.3338071400198649, 0.17019237735991888, 0.17053879022516538, 0.1589795693974425, 0.22029910395871122, 0.22516918042101397, 0.31469991098120187, 0.3756377606934791, 0.2899995961737424, 0.2892917541049824, 0.2474845620475239, 0.3486680840027059, 0.33485589088606604, 0.4994449559453187, 0.21532746774799916, 0.22196299527678198, 0.23142766187194352, 0.19757610291961925, 0.17553868435444042, 0.29295000801897253, 0.22692798785821178, 0.20397967871941114, 0.20955552097171104, 0.23000964842040716, 0.19605623383666526, 0.22941176796535, 0.26940222758685894, 0.2053793166184129, 0.248808415638206, 0.20254418739169677, 0.22040769558326556, 0.17188043234662542, 0.18103163247701848, 0.22937901331670862, 0.19804533801391422, 0.20871467177321656, 0.22501209343118034, 0.22916573666335782, 0.19199963766331563, 0.1903041043179282, 0.1923082739916463, 0.16485527968889946, 0.1727304505675542, 0.9412818500851241, 0.17945348822437845, 0.1505175774863624, 0.1781306102647362, 0.13638196456184937, 0.2004737207649393, 0.2141268390962755, 0.1277303145770866, 0.21101749329132025, 0.12593709216427618, 0.16811337679944405, 0.08278032916064804, 0.2070496890462329, 0.8592239252398456, 0.2045048580303449, 0.21383628297250734, 0.18144210442695274, 0.19068560512137145, 0.20763592903527484, 0.18036218844600993, 0.18816298603602533, 0.19952195258235883, 0.19160886384836429, 0.1864863559614367, 0.19772630211208575, 0.09684241217181133, 0.13991790544369964, 0.1050811952323123, 0.1058397638322307, 0.07569451032371166, 0.11029890085628558, 0.19494456920987402, 0.10129540997935349, 0.09232461356258792]}, "mutation_prompt": null}
{"id": "88b4b369-468b-4736-9abc-79da83d2fe2e", "solution": "import numpy as np\n\nclass QuantumInspiredHybridEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.85  # Adjusted mutation factor for enhanced exploratory moves\n        self.cr = 0.8  # Crossover probability for diversity\n        self.w = 0.5  # Moderate inertia weight for balance\n        self.c1 = 1.7  # Increased cognitive coefficient for stronger local search\n        self.c2 = 1.3  # Balanced social coefficient for global exploration\n    \n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-Inspired Differential Evolution\n            for i in range(self.population_size):\n                # Mutation using Quantum Mechanics\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                phi = np.random.uniform(0, 2 * np.pi, self.dim)\n                q_mutant_vector = x0 + self.f * (x1 - x2) * np.cos(phi)\n                q_mutant_vector = np.clip(q_mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, q_mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Hybrid Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredHybridEvolutionarySwarmOptimization", "description": "Quantum-Inspired Hybrid Evolutionary Swarm Optimization (QHESO): Combines quantum-inspired position updates and hybrid swarm mechanics for enhanced global exploration and local exploitation.", "configspace": "", "generation": 26, "fitness": 0.2983672950489027, "feedback": "The algorithm QuantumInspiredHybridEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.8398066457708899, 0.8659952688332508, 0.8578576467908581, 0.18248532708844212, 0.1886742451075788, 0.8650522170435446, 0.8708103871953775, 0.8711384040928638, 0.8522917472227516, 0.6956138210948797, 0.7174329509776809, 0.7246786901812973, 0.6820839378549748, 0.04576714471436494, 0.7371680612875545, 0.7164416036633177, 0.6712271375669967, 0.7407909793107161, 0.13930240622706858, 0.1557988445487939, 0.11495328267980809, 0.14691353627863313, 0.13494024882501976, 0.13438526524391725, 0.11832879962837506, 0.13303275830603978, 0.15233920730395545, 0.11023618018145531, 0.16880361884657102, 0.1529786108911454, 0.12159106153803856, 0.13463027809195716, 0.13978527706328092, 0.4945059218003407, 0.15190758833177498, 0.1097508644573485, 0.9883787964261933, 0.987556480921585, 0.9881612634681776, 0.9912036604946536, 0.989939386711873, 0.9909368304498972, 0.9888589748227582, 0.9863387239356086, 0.9913972765606479, 0.7135027888062988, 0.6603026511735075, 0.676939545209704, 0.15104695147451985, 0.691627238427797, 0.7282790752277686, 0.7060229905084909, 0.687581171726555, 0.7005672031239241, 0.2240518483263959, 0.20997485305941932, 0.3347551510045923, 0.19284089435243268, 0.8818916118137246, 0.2080419080191538, 0.14967294975044987, 0.2195996337565541, 0.6179472615560477, 0.12576742010387276, 0.23646104299188253, 0.13096869777055586, 0.25037466042410184, 0.1310255340514146, 0.13161900106272684, 0.22488790600390107, 0.246408002389219, 0.28394258747206746, 0.24254073773574425, 0.23544730391215707, 0.24103358408691467, 0.2527793312163926, 0.2583346140692584, 0.2661153254630002, 0.10094185447542625, 0.18079809798894053, 0.27537993591516563, 9.999999999998899e-05, 0.008693663423358533, 0.06648061516265225, 0.03675529941986766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11358294717898643, 0.06926572336149528, 0.08362663926779534, 0.2421301810912121, 0.001959195460501939, 0.0008448094695926445, 0.09022381101923327, 0.09488948502184935, 0.021658103440607368, 0.09061938909268141, 0.22356788688950135, 0.07714789487822549, 0.049206376756478654, 0.07363071306525415, 0.08949965994076503, 0.07525603710481832, 0.1883162789423275, 0.07327225949028782, 0.06923864339978336, 0.04298770762145543, 0.13174372477347063, 0.07394614007262046, 0.006461616385358138, 0.05317022828899676, 0.08871856531370703, 0.05550455266345122, 0.04901489669733006, 0.05721707669410647, 0.5379806201591808, 0.5479363302461469, 0.5517984471133037, 0.5344223558972174, 0.5905736852549434, 0.5620118852794177, 0.558863873729821, 0.5811354041212592, 0.5882361153820326, 0.11499339046424817, 0.07879100818888185, 0.15719585878859255, 0.15349760417581915, 0.12026070305773806, 0.10154684916804146, 0.12869254716337586, 0.08963038250206667, 0.15417775996491834, 0.19349482417945996, 0.2413944090733089, 0.269972673370534, 0.2183549192475146, 0.13967642240417932, 0.18974538901915505, 0.17766610079409206, 0.1932288000356842, 0.25930808905354874, 0.24299278127379143, 0.4186606292403441, 0.31462512132096654, 0.26489745818892685, 0.39452868475734515, 0.4996426286358697, 0.57461841960269, 0.5296158459934572, 0.5739430490374393, 0.08420810589894812, 0.20240555157722684, 0.15077206254079933, 0.20042356676106532, 0.42212889707482604, 0.2875606012371994, 0.28429959466659027, 0.17959245585432093, 0.2350375066679249, 0.21621969685538522, 0.23065697722808987, 0.2504858633110234, 0.19878022071494483, 0.20461124362031669, 0.24418458379440922, 0.21057165808437106, 0.23691110520511793, 0.2066654028325533, 0.7647943605319517, 0.19412918327468964, 0.22195295597185194, 0.184068988196191, 0.2448092444008274, 0.2430075415592683, 0.22028581985492623, 0.22152381952000066, 0.21146412243188306, 0.14179512634498515, 0.20041022529111874, 0.1878013469547778, 0.16924247326920827, 0.12699876881915717, 0.19750371250305465, 0.8852604308518291, 0.8933714862234692, 0.17702471769143358, 0.11278660722918288, 0.14591541021157262, 0.08265802866174876, 0.5625745703471021, 0.10772659705971743, 0.168282053880903, 0.16628610864698878, 0.1045791483937153, 0.12799376580383648, 0.20358072001021676, 0.19814279663804912, 0.19512856553494506, 0.1799220090128838, 0.19052710718464339, 0.22430159128849514, 0.19079456765288427, 0.21561690952458723, 0.18280230378180318, 0.12175417898008123, 0.08872223639377119, 0.10963980865783507, 0.08711096511002236, 0.10032208952064736, 0.09291101945442037, 0.09379418577567178, 0.09276206808657683, 0.11075698854952554]}, "mutation_prompt": null}
{"id": "77f36840-8a36-43b7-95b3-a1cdd324aa8b", "solution": "import numpy as np\n\nclass AdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75  # Adjusted mutation factor for balanced exploration-exploitation\n        self.cr = 0.9  # Increased crossover probability for diversity\n        self.w = 0.4  # Lower inertia weight for increased convergence speed\n        self.c1 = 1.5  # Slightly increased cognitive coefficient for focused local search\n        self.c2 = 1.4  # Balanced social coefficient for global exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveEvolutionarySwarmOptimization", "description": "Adaptive Evolutionary Swarm Optimization (AESO): A dynamically adaptive algorithm combining evolutionary mutation and swarm-based refinement for efficient global and local search.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.9098895303544797, 0.9115178072373437, 0.924694207560767, 0.9226135980307928, 0.9213789429235442, 0.1900766100364576, 0.9154549123464074, 0.9233275811841812, 0.912286990712088, 0.7749713976522081, 0.8146813497312986, 0.7944058270879195, 0.819877932824482, 0.8155567684193846, 0.8208522262468385, 0.7871985088679044, 0.8199753474285704, 0.8169458266683542, 0.16182543305464092, 0.11597525406346354, 0.1442672864717799, 0.15807634125535897, 0.13087626601378666, 0.06459839749604068, 0.09557958392281163, 0.12327750223130951, 0.1401274187063023, 0.14162483551554472, 0.1422088157607666, 0.109088867397925, 0.11404704633774221, 0.15511479576274523, 0.0775674288310132, 0.12243140419113463, 0.10976445452848926, 0.11024666211129552, 0.9897167874084744, 0.9908282069237748, 0.9862820942843737, 0.9943120812539199, 0.991669054249653, 0.9909277418670336, 0.9937546593418108, 0.9909186110922243, 0.9895752755399376, 0.8068173182758134, 0.7860631569109648, 0.7660810184362821, 0.7700985285710885, 0.15266189605729485, 0.8182908265082428, 0.08877691764353435, 0.8012358364089429, 0.05149499470134855, 0.20917524065444715, 0.8765293307086479, 0.21680152222341087, 0.16103712316320284, 0.21329126255474073, 0.19177225132636821, 0.24181958532130832, 0.39004782423770124, 0.1506373579168978, 0.27310068214495253, 0.27604109785688413, 0.28533662312731334, 0.13287910750075294, 0.27830671808906604, 0.12860487131474163, 0.2726461882242154, 0.20485665869924474, 0.2818477596065311, 0.29157241500018327, 0.2745237901832991, 0.2819994726318774, 9.999999999998899e-05, 0.17437107273977526, 0.3223778704526503, 0.29574642859532874, 0.30263970503528526, 0.10400801349119193, 9.999999999998899e-05, 9.999999999998899e-05, 0.014591383806971336, 0.0203969072023521, 0.038547564934057976, 9.999999999998899e-05, 0.0016554509309884002, 0.014197491746561375, 9.999999999998899e-05, 0.09082177392516366, 0.05401943097120254, 0.038044108367923934, 0.03032665086804287, 0.02319777326603001, 0.04190903047424521, 0.06009884101746288, 0.08096942982358069, 0.042270679399742606, 0.03598015815548128, 9.999999999998899e-05, 0.05124001680492907, 0.22577026069062778, 0.08058396316793393, 0.07962563126860167, 0.10381914213451471, 0.21696527388759823, 0.07423947775300654, 0.05161325761397706, 0.043154747237164504, 0.17876222609379033, 0.2632584847711853, 0.06811623926715094, 0.24496160101588949, 0.06967628345745414, 0.049535649550694005, 0.08432769737118984, 0.5975491330550808, 0.6843434900476526, 0.597780483863273, 0.6274887713961803, 0.5594631957686791, 0.6104006168677094, 0.6097676931411269, 0.6028100414239653, 0.5829761916474945, 0.14161564036314211, 0.08292743932583946, 0.07022134852477158, 0.0735522076055406, 0.1554298777847316, 0.0853479021832585, 0.07106014793647297, 0.1409604981949074, 0.1460098079829122, 0.20193572551644345, 0.19603072168294566, 0.2744287601452071, 0.2006735742319169, 0.12567254401690897, 0.22164700994160125, 0.23051171369022327, 0.2251245177760658, 0.18764664177988832, 0.4793178637698835, 0.4107268162414288, 0.3632326697230389, 0.5147420463138435, 0.22412428001387608, 0.2671233514167356, 0.29362825937904313, 0.46876666722619875, 0.6015982094350851, 0.29788830563928814, 0.343897939252341, 0.2852785840064933, 0.18842819763057428, 0.3410261913832131, 0.2849756756220614, 0.173931763586626, 0.20945589284899868, 0.4282885473586914, 0.21529354579190663, 0.21852134495762898, 0.192603511808631, 0.21018737349566363, 0.22167122897768488, 0.2032321655222199, 0.24862387111705753, 0.25057032363171994, 0.19654657258944297, 0.19589629905719863, 0.24902596172805191, 0.2239061272471865, 0.1969052922601291, 0.19080293303214968, 0.211528366409781, 0.2035276813928052, 0.2088131471794935, 0.22366538065225927, 0.17347168811863833, 0.16629531769865513, 0.9133844315530291, 0.13156717527937867, 0.1883168632594302, 0.15799618882012523, 0.16970170386439587, 0.16646986002183273, 0.17161013209662634, 0.16125492340093373, 0.11226703330597321, 0.11732831125671983, 0.8733690115891128, 0.1686826876941806, 0.836605533507628, 0.21012807662733968, 0.8826820034740877, 0.15572728662020907, 0.21343814084237833, 0.2123590311018141, 0.21390874519740444, 0.19957397976592728, 0.17716381207627852, 0.205115866296802, 0.18323885805686124, 0.1816868589659888, 0.22199838456557708, 0.09712362690759013, 0.12938041427119207, 0.10451330766462275, 0.09756047927148681, 0.08980449453648676, 0.09177438084522527, 0.10809536043372026, 0.09916116760401494, 0.10193109069551443]}, "mutation_prompt": null}
{"id": "033c2b18-9355-4a6d-afff-4ed766c18be6", "solution": "import numpy as np\n\nclass QuantumEnhancedAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Slightly increased mutation factor for enhanced exploration\n        self.cr = 0.85  # Balanced crossover probability for diversity\n        self.w = 0.5  # Increased inertia weight for optimal convergence speed\n        self.c1 = 1.6  # Enhanced cognitive coefficient for individual learning\n        self.c2 = 1.2  # Reduced social coefficient for better global balance\n        self.theta = np.pi / 4  # Quantum rotation angle for diversity\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-Inspired Mutation\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum Rotation\n                rotation_matrix = np.array([[np.cos(self.theta), -np.sin(self.theta)], \n                                            [np.sin(self.theta), np.cos(self.theta)]])\n                mutant_vector = np.dot(rotation_matrix, mutant_vector)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedAdaptiveSwarmOptimization", "description": "Quantum-Enhanced Adaptive Swarm Optimization (QEASO): Integrating quantum-inspired rotation gates to enhance swarm flexibility and diversity in convergence dynamics.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('shapes (2,2) and (5,) not aligned: 2 (dim 1) != 5 (dim 0)').", "error": "ValueError('shapes (2,2) and (5,) not aligned: 2 (dim 1) != 5 (dim 0)')", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {}, "mutation_prompt": null}
{"id": "5390990a-1cab-4519-8b3e-ed959f4a7bce", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75  # Adjusted mutation factor for balanced exploration-exploitation\n        self.cr = 0.9  # Increased crossover probability for diversity\n        self.w = 0.4  # Lower inertia weight for increased convergence speed\n        self.c1 = 1.5  # Slightly increased cognitive coefficient for focused local search\n        self.c2 = 1.4  # Balanced social coefficient for global exploration\n        self.quantum_prob = 0.05  # Probability of applying quantum-inspired update\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-Inspired Update\n            for i in range(self.population_size):\n                if np.random.rand() < self.quantum_prob:\n                    new_position = np.tanh(np.random.normal(0, 1, self.dim)) * (self.upper_bound - self.lower_bound) / 2\n                    new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                    score = func(new_position)\n                    self.eval_count += 1\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = new_position\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = new_position\n                    if self.eval_count >= self.budget:\n                        break\n\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredAdaptiveEvolutionarySwarmOptimization", "description": "Quantum-Inspired Adaptive Evolutionary Swarm Optimization (QIAESO): Integrates quantum superposition principles to enhance exploration capabilities while maintaining adaptive evolutionary and swarm-based search.", "configspace": "", "generation": 29, "fitness": 0.29453733259619286, "feedback": "The algorithm QuantumInspiredAdaptiveEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.9167568790209762, 0.9021327197129085, 0.9128032855540484, 0.9062185608263182, 0.9185470208963226, 0.9285380620869571, 0.8995206661638759, 0.9107848228046016, 0.9134929656267258, 0.8163541777649312, 0.8163586046742909, 0.811352151464836, 0.8080245760976521, 0.7836295208300987, 0.821484662939817, 0.01846746559460677, 0.828782974401143, 0.8229895751338446, 0.18517387268199714, 0.1570603064913837, 0.12462567724558671, 0.09955935043179232, 0.07237573070738434, 0.0964559985874146, 0.0831708123269127, 0.050284705739603086, 0.1812025667782634, 0.0711115773343689, 0.12719692058489984, 0.050596951505794796, 0.10986129851326765, 0.1446423656991327, 0.12138162604205283, 0.14184517485737802, 0.1283149163637458, 0.11503545388226832, 0.9934436942926234, 0.9915150812279079, 0.9777167225329079, 0.9902977625073212, 0.9934023703567995, 0.9936100102381176, 0.9934216664726021, 0.990323104429459, 0.9873627463856633, 0.8291349812068667, 0.28710294822787563, 0.8006667425586915, 0.8113897063001125, 0.1507122270685548, 0.8456846107772131, 0.08322767221778027, 0.08870427671780012, 0.08512217515632114, 0.22798068316393505, 0.16831870792787718, 0.21024365106581788, 0.21270989206678004, 0.1606045301296707, 0.06765099521249995, 0.35618557363575365, 0.13707579731282515, 0.17681154203781768, 0.26686029936364475, 0.29690598047851713, 0.3039063647404824, 0.28818411911015696, 0.2674103457377226, 0.1350183329269734, 0.28464657044419384, 0.276614813909134, 0.2763012592076829, 0.2764122254367585, 0.269050933429666, 0.2618064557831512, 0.25158401898562066, 0.2887284926346252, 0.26640091130959653, 0.3137951072731133, 0.2938673946949866, 0.12475939452983298, 0.006721767786662558, 0.0022137954847634145, 0.023068359090325452, 0.0011227040938800448, 0.04895932160921179, 9.999999999998899e-05, 0.0033347787434259146, 9.999999999998899e-05, 0.00317546310016259, 0.027305644855767475, 0.04723874143154594, 0.1483368340560206, 0.014984211270532621, 0.050941304049246905, 0.03278227106311116, 0.036520216802704675, 0.016079390275119287, 0.05477834493761147, 0.05143142103558618, 0.3041050350332628, 0.07651624543936619, 0.09858952400379495, 0.08202243910562179, 0.08528601383656698, 0.17964551473663593, 0.10366425887150676, 0.1039025853168134, 0.15098794474941857, 0.057174369388825474, 0.2703280546992378, 0.038978730243762416, 0.08881416281886778, 0.0067452703364108135, 0.05950963831306566, 0.08340509867194323, 0.08492518077684397, 0.5766861243321383, 0.5787694007256612, 0.5739145215390442, 0.6034910731945242, 0.6407069407935972, 0.6569891811619996, 0.6222037933270337, 0.6076243450046116, 0.63214184635234, 0.09193715002267089, 0.09879328166095802, 0.0888590957679738, 0.11571006887631063, 0.14353893956750507, 0.11248240860189274, 0.06571699393754404, 0.13041098556744035, 0.13754165644166738, 0.23296795995382846, 0.2290530414654448, 0.30976562135185803, 0.17427422777322632, 0.18983468088988242, 0.49737609607125, 0.2531696372596489, 0.27152958478371136, 0.1556252630725541, 0.46754569938034973, 0.4433647510286294, 0.21856961586122525, 0.49254198127879567, 0.3150776293708514, 0.3237735331217251, 0.2922322328021735, 0.3976545704611706, 0.25815304376918713, 0.22461657303273197, 0.10925722548807049, 0.24195238235140493, 0.186257827003109, 0.33752524916092175, 0.3527831000530477, 0.2166347328831616, 0.21030891131245055, 0.15852039465783896, 0.22495157410475697, 0.21627439159161632, 0.19955525963189247, 0.23693572296605003, 0.2539485801967718, 0.22893358601218938, 0.2149114905422964, 0.23160942242368787, 0.20537731204989518, 0.20704312858612062, 0.22431646156813612, 0.18654565669947065, 0.19526955804049995, 0.18550793123054077, 0.1816847444093873, 0.1920950460281381, 0.19115525330314742, 0.2253308394862702, 0.15689518364710597, 0.17126303430904988, 0.12245692606849823, 0.17025983585555238, 0.18813391918511346, 0.17287512921302972, 0.15986941565089385, 0.11363811957572834, 0.12673762850278347, 0.7779438223549751, 0.11257061259174606, 0.1559394658998997, 0.6468873408688791, 0.7510278236832579, 0.21240503651208342, 0.11293174889320035, 0.20626370925712867, 0.1662479018671854, 0.2088241117532924, 0.1831166142334869, 0.2302403513863185, 0.18799926454305826, 0.18951908919708327, 0.18395223670652328, 0.19097658964000297, 0.1956437657035498, 0.19794587771159822, 0.1134876356506469, 0.08449313045852413, 0.11419601277588753, 0.10591352787821762, 0.0945384605105053, 0.09550118845950606, 0.1038421594023019, 0.0841122537298239, 0.09948406109890529]}, "mutation_prompt": null}
{"id": "0b695748-14ae-45e8-9948-5b7af7521688", "solution": "import numpy as np\n\nclass HybridDynamicParticleMutationOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.6  # More exploratory mutation factor\n        self.cr = 0.85  # Balanced crossover probability\n        self.w = 0.5  # Moderated inertia weight for balance\n        self.c1 = 1.2  # Reduced cognitive coefficient for broader search\n        self.c2 = 1.6  # Increased social coefficient for enhanced convergence\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Dynamic Particle Mutation\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Swarm Adjustment\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridDynamicParticleMutationOptimization", "description": "Hybrid Dynamic Particle Mutation Optimization (HDPMO): A hybrid approach integrating dynamic particle mutation and swarm intelligence to enhance exploration and convergence balance.", "configspace": "", "generation": 30, "fitness": 0.2721312261821896, "feedback": "The algorithm HybridDynamicParticleMutationOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.8866181502635858, 0.8815875761116467, 0.8805505942318584, 0.1831118888852753, 0.8968054286753521, 0.19069432818557874, 0.8725683153117569, 0.17511488003228093, 0.8908029555977311, 0.04183851112183079, 0.7690857790543622, 0.6983327807911723, 0.7464365747701445, 0.6826615591698223, 0.7319272735266864, 0.7046772831135892, 0.7461896292482837, 0.6295604310701958, 0.13324269512406428, 0.11414551952256657, 0.10896501945685977, 0.07243767188666062, 0.12552321807972022, 0.13996575333636885, 0.1589907501616864, 0.17317605392608404, 0.034013043758509554, 0.10790245864682424, 0.12835916910494294, 0.08520481619196563, 0.10764877096341074, 0.06867003807204641, 0.02724494327889737, 0.06942342476766095, 0.13648245695323025, 0.10724645207032735, 0.9904114687713395, 0.9941167462374075, 0.9874045003535095, 0.9898576429966386, 0.9916126444352135, 0.9906699852115546, 0.9868771360226369, 0.9960573478402367, 0.9895184014539445, 0.7626378254085744, 0.05586581744181751, 0.059893346292951954, 0.7825551281581699, 0.7905084422661202, 0.15236764933324065, 0.0881594708669563, 0.7650774435206791, 0.051786916306446384, 0.13879698135537366, 0.22393141791484183, 0.1674576327885603, 0.16016271949973593, 0.37409346533059706, 0.19268422737163582, 0.24267877801593185, 0.13158490006408263, 0.11689675920134524, 0.11280309774336861, 0.27328694406098053, 0.28597054308458025, 0.25324502997486253, 0.10551188597032146, 0.2730434484192986, 0.26514045854401, 0.11418754331337144, 0.3051249133984869, 0.25596375555720063, 0.13619075627516508, 0.256350802069258, 0.3057170833527537, 0.29773859232531563, 0.2959577322803625, 0.3074774266403142, 0.2904059781427272, 0.28263434367365303, 0.008747628705889854, 0.018294013272623477, 0.0033119607889824376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026672962645493126, 9.999999999998899e-05, 0.08603152120586821, 0.1459689074219792, 0.10587894037592382, 0.10086121213786226, 0.029765436394339484, 0.05199979677306221, 0.01851559215742382, 0.11629214774619945, 0.05448473981671431, 0.09253430991044642, 0.03521803878384311, 0.21960812947075514, 9.999999999998899e-05, 0.14477767343558645, 0.07798408609263896, 0.10304475445515748, 0.14621378355297854, 0.1159102405483029, 0.01151988476911081, 0.20505383195609805, 9.999999999998899e-05, 0.04099584280397117, 0.03955420223930217, 0.3415303963917381, 0.057697971334565556, 0.05743355935153105, 0.11932648794552458, 0.5582994716910386, 0.5394517263830292, 0.544646708880026, 0.5802395190168197, 0.5737278488355289, 0.5685068448853416, 0.5638363605185177, 0.6025870767824056, 0.5809030656336954, 0.07495401242456756, 0.12826104315254727, 0.0895274233602329, 0.0889980562483601, 0.0863996949874396, 0.15757021875509292, 0.10010067700177083, 0.08139897605041047, 0.11690683379588696, 0.23042716473375147, 0.27336014676015363, 0.2741272793044405, 0.22751093516180165, 0.13721363408997278, 0.29259015351657003, 0.3076903396956081, 0.26271707095127794, 0.20003480524425676, 0.25968850534765986, 0.38658039496355845, 0.3337291308625021, 0.29616921312326594, 0.3273122581824971, 0.36546241570071214, 0.2932205757558928, 0.1983389107386513, 0.2846272518938069, 0.2309990731794379, 0.21739789838838253, 0.24692369255278213, 0.18917733709104168, 0.20553061738701095, 0.2244353720495773, 0.3439561790273352, 0.2844806088089298, 0.2741881465484908, 0.23472352392168583, 0.26504956934047474, 0.20692500343737485, 0.2521347184094076, 0.23879851692036813, 0.2501961550935503, 0.2494778196677515, 0.24807506890304631, 0.22212234090083371, 0.18445204773164736, 0.1900277319626723, 0.2457108758418972, 0.25204990012077055, 0.2297439146187834, 0.20537813618578316, 0.19543666704782037, 0.24869384794056204, 0.1951580067199249, 0.16699520347546482, 0.17228478322907081, 0.15574255774863832, 0.16164896032699982, 0.12338689677857673, 0.13246139828085524, 0.14143936871126805, 0.1577003025315149, 0.1541506973754071, 0.15356447927225747, 0.11295916073850132, 0.16862510611997839, 0.15541735908167953, 0.8372064571288712, 0.850344083385877, 0.2033762571503377, 0.19494606696525685, 0.09477276950668034, 0.20114690442673122, 0.20996666395714192, 0.1895816562217837, 0.19582130440523793, 0.22082590508752964, 0.20483621031732635, 0.1964573688723188, 0.23730727554171716, 0.21700749749739745, 0.08367558841600653, 0.08559442289114938, 0.09537404214307843, 0.07845869006021344, 0.08693554414454085, 0.08631835088831197, 0.08750077657070687, 0.10331089472316546, 0.09530162730341729]}, "mutation_prompt": null}
{"id": "c9bc9184-0b06-45f7-9b1b-64a6a2b42f98", "solution": "import numpy as np\n\nclass StochasticHybridEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Increased mutation factor for enhanced exploration\n        self.cr = 0.85  # Slightly reduced crossover probability for focused exploitation\n        self.w = np.random.uniform(0.3, 0.5)  # Dynamic inertia weight for balanced convergence\n        self.c1 = 1.6  # Enhanced cognitive coefficient for individual exploration\n        self.c2 = 1.3  # Reduced social coefficient for fine global adjustment\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "StochasticHybridEvolutionarySwarmOptimization", "description": "Stochastic Hybrid Evolutionary-Swarm Optimization (SHESO): An enhanced algorithm integrating stochastic adaptive mutation and hybrid swarm dynamics for improved exploration and exploitation balance.", "configspace": "", "generation": 31, "fitness": 0.304935770936128, "feedback": "The algorithm StochasticHybridEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.91482679697786, 0.9079257498252786, 0.9256058069995471, 0.92348167412437, 0.8907073475615759, 0.19028202007388362, 0.9253888449570601, 0.8966188678424033, 0.9269264063097961, 0.8400304161380303, 0.7294913549924871, 0.8236230291731343, 0.8370886245541251, 0.789250584284704, 0.8328382718841293, 0.060723524070946056, 0.006394494852813293, 0.018574056379652593, 0.1318062852363573, 0.13094803922213627, 0.17923346862438627, 0.06554889536409703, 0.15880862029973486, 0.07243370163489471, 0.1601012951582519, 0.18493573655160445, 0.1866403806400645, 0.09334409286493373, 0.1473433416069596, 0.0999683713265338, 0.08087728966644314, 0.11379601814327123, 0.14277380295092312, 0.1425542369195728, 0.1045173799771908, 0.09496622298687685, 0.9898545840228666, 0.9913262533919848, 0.993335099925637, 0.987320456514123, 0.9913932982998818, 0.9863430775018065, 0.9899944508347587, 0.9924554817626353, 0.9906520665025873, 0.7834806937685987, 0.8021576830563921, 0.8235364382515369, 0.7972347944218021, 0.6715757029223142, 0.8118572148172788, 0.8236738304131797, 0.7288055430874734, 0.8190820677623805, 0.2301447964044513, 0.22619457615560845, 0.2246340909793102, 0.19206368873297874, 0.1607141395312114, 0.20843664809868112, 0.24331851117611447, 0.23759893513582087, 0.8658643096589704, 0.1320232557611677, 0.2592879249425045, 0.265434094757528, 0.2799747077229576, 0.13163150443351623, 0.11469331813453376, 0.1271219768670968, 0.12334089784327684, 0.2723016993124867, 0.28311945806814487, 0.24733396056902324, 0.2643139691101387, 0.28399990392141294, 0.1113109474915045, 0.2771994180213486, 0.2901480144558727, 0.2863864924137516, 0.30969251795424, 0.005097607521404646, 0.009673693503570058, 0.017428764261933738, 9.999999999998899e-05, 9.999999999998899e-05, 0.05174057058438519, 9.999999999998899e-05, 9.999999999998899e-05, 0.000665799434970693, 0.03781429294333849, 0.04116609207105881, 0.16145844741402016, 0.051763325539761706, 9.999999999998899e-05, 0.017702853510438987, 0.04283752208798364, 0.06639807340416337, 0.06479257964576479, 0.11075193826638985, 9.999999999998899e-05, 0.03980150220612977, 0.22513856556800405, 0.09965244515689375, 0.3836420794107184, 0.34375101567783994, 0.31360547236718583, 0.07752152681722124, 0.13161076719330922, 0.05427179075640798, 0.07533227850874213, 0.03888687108593425, 0.07868848903890069, 0.09270245490650664, 0.08434781339424413, 0.15045347693287736, 0.05860692587620342, 0.5572333439563624, 0.5372030045759338, 0.5784095174942738, 0.5697523138501985, 0.6030093468558941, 0.5940317625831295, 0.6344456274029097, 0.5880765385455858, 0.5937228007578754, 0.1177752166651892, 0.05550603570576518, 0.10969231616050257, 0.05723317866438338, 0.09145235884002201, 0.09647482295575427, 0.09545508224398125, 0.10310888907263926, 0.11289186584120814, 0.18563550726386524, 0.1767903759054147, 0.7515900187684305, 0.2275534093806847, 0.1923518056299578, 0.15374207416988628, 0.19657917973666184, 0.2296087161530137, 0.18045714132128665, 0.2624536409466336, 0.2578776547257159, 0.35204737072115044, 0.21492843347363288, 0.1965036798808647, 0.26854688343588307, 0.3729776259083304, 0.19782174795345908, 0.5123381315937257, 0.31909459364768067, 0.27362447499856435, 0.3103691913399662, 0.505546962248014, 0.19836632022762324, 0.20316251065369284, 0.3198262257563719, 0.4137187671772439, 0.09347272502238979, 0.22005301540272026, 0.25160753419307835, 0.22908285736627587, 0.2218329167875448, 0.20382478841817175, 0.20064145469134065, 0.21926118223904445, 0.2177171872514191, 0.24457221819351316, 0.18116716761311125, 0.19722085128328803, 0.20556535720627533, 0.198877001292031, 0.2012675708605337, 0.24874251162259076, 0.21123608579969966, 0.20655185013306165, 0.17970251041946217, 0.17169368934088924, 0.17204968598550785, 0.18822324959776449, 0.16584357454508336, 0.18769955775600022, 0.91108243949846, 0.14175072124459587, 0.16782339024536908, 0.8927099309235811, 0.21313546427717278, 0.1125577994823328, 0.8500185528003821, 0.21007777482582246, 0.2033489054836204, 0.21185129971529604, 0.2137484648002953, 0.19476080869116896, 0.2119391333436027, 0.20706930934390977, 0.17703030615011617, 0.21292126082455776, 0.19358018011796396, 0.20651406307862497, 0.216912041387871, 0.19357323676293137, 0.23230579498055226, 0.19441323295666246, 0.08805977627361827, 0.09292440704743499, 0.07846364979190035, 0.09138529873864665, 0.09074628806815688, 0.10674180652400556, 0.08925083018935587, 0.09355637560601915, 0.0983383906462435]}, "mutation_prompt": null}
{"id": "0ba4f12c-9104-4ae1-928b-1d7fb17bdc16", "solution": "import numpy as np\n\nclass DynamicMultiPhaseDifferentialParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Increased mutation factor for exploration\n        self.cr = 0.85  # Adjusted crossover probability for balance\n        self.w = 0.5  # Adjusted inertia weight for dynamic adjustment\n        self.c1 = 1.6  # Enhanced cognitive coefficient for local exploration\n        self.c2 = 1.3  # Slightly reduced social coefficient for global influence\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Differential Evolution Phase\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Particle Swarm Phase\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "DynamicMultiPhaseDifferentialParticleSwarmOptimization", "description": "Dynamic Multi-phase Differential and Particle Swarm Optimization (DMDPSO): An algorithm that alternates between adaptive differential mutation and particle swarm adaptation with stage-based parameter tuning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 32, "fitness": 0.3047990814539722, "feedback": "The algorithm DynamicMultiPhaseDifferentialParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.8713128412615713, 0.850380178457345, 0.8564318907230827, 0.8777745047758418, 0.8592821692643222, 0.8765050274789797, 0.17461244705499612, 0.8676091038234943, 0.8450919533283681, 0.7090879097910172, 0.7202015062180509, 0.6792027073562052, 0.7124289142561242, 0.739546581996576, 0.7288414528987051, 0.7434499037283373, 0.6854532394499485, 0.7145192738449679, 0.14776649331277747, 0.18383172287311222, 0.15867423766469124, 0.16851981074475608, 0.11214916241142836, 0.12054800706936875, 0.12001605254798309, 0.04879260934684171, 0.15358815859006536, 0.1104963316671781, 0.09089584175631515, 0.13863139883044517, 0.12585006995347536, 0.15433885253617996, 0.10899042223196798, 0.14836179330928623, 0.13238772948661603, 0.10490479002871367, 0.9881618808424882, 0.9890424467288593, 0.9903563889064408, 0.9794726944071506, 0.9917197958959856, 0.9883992088696588, 0.9889791757945782, 0.9843149669075851, 0.9887003304207476, 0.7324908335974132, 0.6571106509765962, 0.06009163330616407, 0.7155647780090465, 0.494202473456692, 0.7450190610898644, 0.0882335581922169, 0.08835780551519856, 0.0883075224639922, 0.21371659734801818, 0.830233688761053, 0.3812795944322648, 0.19263589038973683, 0.19287465236599655, 0.2768010209513675, 0.16332033001810142, 0.1271115164508948, 0.134423220907663, 0.12614385125780136, 0.25358338930113034, 0.24166576875761503, 0.2252744085187195, 0.12115851594490445, 0.23146950817369039, 0.25855291603169195, 0.24354192094733462, 0.2508267942934218, 0.23456197792788747, 0.20928093830062433, 0.053953894398465874, 0.28839193404347707, 0.2873620639988027, 0.1334850007116154, 0.26670080813133734, 0.26430062676778265, 0.2599646550013618, 0.03134321527211237, 9.999999999998899e-05, 0.07018155778984259, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019298061905174135, 9.999999999998899e-05, 0.06565645296339484, 0.10020619293352062, 0.09231142246348667, 0.024505919369373297, 0.04225187542865583, 9.999999999998899e-05, 0.023127512418728347, 0.021337028091526933, 0.06238921297721811, 0.2480520654173668, 0.05917498882820127, 9.999999999998899e-05, 0.07625351059686858, 0.07389748138319152, 0.07701468690936164, 0.09721092746458149, 0.09811710216241787, 0.18628449994204188, 0.10393059796852999, 0.3992906986380147, 0.3358884718407884, 0.05558711755632195, 0.09791675566911018, 0.16492004897920465, 0.05929983866527022, 0.08353066204179271, 0.05722439622261444, 0.5397076910746063, 0.5499181208657566, 0.5361814010772568, 0.5582726636974346, 0.5501883350265472, 0.5403703137192482, 0.586148247749752, 0.6075167757245696, 0.5697438397747214, 0.07066335880712415, 0.08989300197804317, 0.11878917105305897, 0.10882362815853919, 0.10168914906185034, 0.10712038253272516, 0.10803814345233165, 0.13367586999129122, 0.12330953441773818, 0.22264264606937145, 0.21167246738959966, 0.22060851017330851, 0.13904506125544436, 0.19920704547497026, 0.29747338228751674, 0.22404189810836372, 0.2810633208245107, 0.22716015495418795, 0.43855790703015585, 0.48052890952717475, 0.3601316821893501, 0.5769356571204949, 0.26437744042857003, 0.334001142682393, 0.6202778508136504, 0.6164735592572057, 0.5547099809267333, 0.23459488726057576, 0.1989208073249813, 0.32010786927612556, 0.2588981695666436, 0.24657297248424626, 0.4326898194643156, 0.2658228995392019, 0.14732108245528164, 0.1907630591272469, 0.22816679195419132, 0.22860271742406457, 0.23992531421919638, 0.2145915585079381, 0.2517357851383326, 0.232317171876128, 0.20481984514327956, 0.2188216467111539, 0.20498882542512142, 0.1872883656737484, 0.18589395388809649, 0.2092043116263842, 0.19920220999481553, 0.1815225628068602, 0.17865946825061507, 0.2453319422101068, 0.19453311983048638, 0.746003914190104, 0.1529366572224966, 0.16830596682424748, 0.1651249287207116, 0.12248886350045063, 0.18675117164267452, 0.1478364893430969, 0.8964592971055297, 0.177625394246255, 0.16705664002950382, 0.16794984057566176, 0.12681592940118858, 0.14549495608659269, 0.6961822442476555, 0.7559156115896914, 0.7286378955035508, 0.8293740148078618, 0.19624863759949351, 0.8138354093068318, 0.19078475061268296, 0.1845053820304281, 0.20341664703400675, 0.21657271172542958, 0.1870250654420733, 0.20510832603535778, 0.190611454622033, 0.20691732718481792, 0.1957623524046268, 0.07816389507015498, 0.08865943734792403, 0.09903030136431101, 0.09155367262973191, 0.09885989069289458, 0.0884949020672795, 0.09172198807192222, 0.08787343123808, 0.09899096891928472]}, "mutation_prompt": null}
{"id": "522b4475-185c-4098-aa1e-755caa070c58", "solution": "import numpy as np\n\nclass HybridSwarmBasedEvolutionaryOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Enhanced mutation factor for extended exploration\n        self.cr = 0.95  # High crossover probability for increased diversity\n        self.w = 0.3  # Lower inertia weight for sharper convergence\n        self.c1 = 1.7  # Increased cognitive coefficient for intensified local search\n        self.c2 = 1.3  # Slightly decreased social coefficient for controlled global exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridSwarmBasedEvolutionaryOptimization", "description": "Hybrid Swarm-Based Evolutionary Optimization (HSEO): An enhanced hybrid approach combining adaptive swarm dynamics with evolutionary mutation and crossover for robust global optimization.", "configspace": "", "generation": 33, "fitness": 0.30069356894105886, "feedback": "The algorithm HybridSwarmBasedEvolutionaryOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.9315795521571643, 0.936081354498256, 0.9377980793769324, 0.9293983644964191, 0.9411554888787149, 0.9281027322053437, 0.9135262659616863, 0.9321673684321532, 0.18312355170432593, 0.8572984785999753, 0.8638874810278132, 0.8471304732730197, 0.8194062768046805, 0.8077038595279328, 0.8428014207270557, 0.8236475144559992, 0.01919225949512382, 0.8609146061877804, 0.11199163277244206, 0.11547116357153231, 0.16142009143215985, 0.0736227198109638, 0.19043020240901376, 0.07489660131730325, 0.10607525805239293, 0.1447284714441054, 0.11123099653815716, 0.15970350936913602, 0.09170224728673382, 0.11498721841014503, 0.14195539253403622, 0.15251224407388364, 0.08919304573012765, 0.11611649547926539, 0.11157919300330355, 0.07227520018232203, 0.9897875930405348, 0.9879514750890137, 0.9869408302993834, 0.9943111412437646, 0.9918155917006789, 0.9896947184482385, 0.9894063334538405, 0.9902254699614089, 0.9892738741760764, 0.7912284240325624, 0.8377395116196784, 0.7836357204677835, 0.848944174631538, 0.724071953043717, 0.1533140413779065, 0.08371710681311828, 0.08933744358059759, 0.051470430636408326, 0.9313791900522674, 0.8923350485187832, 0.20646080225107755, 0.15620080318406493, 0.23566746602589606, 0.1170426180908466, 0.23145630390632976, 0.2366616173124716, 0.17783587020375236, 0.2432177999682512, 0.2918121163241324, 0.2879758949306306, 0.1352925699112829, 0.24718769273576258, 0.25680528992092067, 0.13269926665066156, 0.27432535557036863, 0.25847964517549804, 0.25883724464494196, 0.13567949387676126, 0.2694600345187903, 0.19056503508112244, 0.25997204440136434, 0.22246130554396037, 0.2746835272589042, 0.2847036328545449, 0.13550883353009235, 0.049268366414524145, 9.999999999998899e-05, 9.999999999998899e-05, 0.04107290662772156, 0.0916314396702852, 0.052693197369246936, 0.0028314683262194995, 0.013856021871668789, 0.1116572464609129, 0.07700502640906703, 0.05854406876410789, 0.06342060631190527, 0.05853440304429314, 0.04661315659845244, 0.034988798593745374, 0.0695519714046674, 0.07035068669494393, 0.05704635538185898, 9.999999999998899e-05, 0.03778044848823958, 0.0527750601820246, 0.10019681079816833, 0.08377729875792395, 0.08311572850859206, 0.14879788240087855, 0.1894146425899531, 0.07751026082059376, 0.10330189551811986, 0.0478280983195315, 0.04385793301512608, 0.03973207437458204, 0.039931299453333846, 0.12936476055189539, 0.08478550787499861, 0.2912241415964383, 0.08517358507290917, 0.5776728460775259, 0.5617413049144181, 0.5985791647829887, 0.5935075918141967, 0.6882431485056919, 0.6297080917374176, 0.6115551130138934, 0.6389527899605727, 0.6412868237222414, 0.16106048322148458, 0.053200974827575354, 0.1319780865209077, 0.09861515676223331, 0.16004070676521842, 0.10499039175136493, 0.12445406119377678, 0.11125421622048215, 0.13049170675158617, 0.22830872854513806, 0.126047864217958, 0.2374532062529604, 0.12175939811002523, 0.17477781659346348, 0.1729357801106709, 0.22602801612648704, 0.17689471333607631, 0.25804621208895906, 0.2454578277256756, 0.2524775389039229, 0.25348013568880534, 0.32528116210795244, 0.3240775145552446, 0.2033619720483919, 0.5661791003114323, 0.6505782603640962, 0.3409800967421176, 0.20291129539440322, 0.1706186957497675, 0.2723745451529178, 0.21589711880855866, 0.2654880492408249, 0.25926522786851625, 0.2611291213855288, 0.21508497275431337, 0.31909917366018314, 0.24575265909538146, 0.2121885153424189, 0.2098910290033047, 0.20653165524895178, 0.23627033899746075, 0.175908635202762, 0.21036433226564044, 0.2453993724471859, 0.22919779426358688, 0.18188918695877154, 0.2017878206424656, 0.1852322182575139, 0.16458825119484632, 0.19373467839416303, 0.19085061291970506, 0.2242206242459842, 0.18567313349058023, 0.17641984375364428, 0.1735040820213155, 0.17319595181219216, 0.11010630982450398, 0.9261772753681659, 0.17626691179683707, 0.1881107076861921, 0.9208917264782753, 0.12815706626967271, 0.16595424633826128, 0.11256368736129607, 0.2113007714850873, 0.1575519220818522, 0.12742120586420969, 0.16915671599583826, 0.2115414515165127, 0.3179033319036725, 0.7657962870383433, 0.20994042890279385, 0.18904387565495695, 0.20404515841896087, 0.20447319177537016, 0.18630428392569343, 0.19351290757393202, 0.18720271886841544, 0.20055651059615665, 0.2203913206621514, 0.2073540974014062, 0.09674134716286786, 0.11776202789862744, 0.08812512043875032, 0.10616657611324609, 0.10127141892874458, 0.09464320075228627, 0.09273160477599651, 0.09635810013789414, 0.08804815077183537]}, "mutation_prompt": null}
{"id": "fc95f4e3-2049-4589-9d7f-4092a06b4f37", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted mutation factor for better diversity\n        self.cr = 0.85  # Modified crossover probability for increased diversity\n        self.w = 0.5  # Adjusted inertia weight for balance between exploration and exploitation\n        self.c1 = 1.7  # Increased cognitive coefficient for better local search\n        self.c2 = 1.6  # Enhanced social coefficient for effective global exploration\n        self.q_prob = 0.1  # Probability for quantum-inspired update\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution with quantum-inspired mutation\n            for i in range(self.population_size):\n                if np.random.rand() < self.q_prob:\n                    # Quantum-inspired mutation\n                    mutant_vector = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                else:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with adaptive velocity update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredAdaptiveEvolutionarySwarmOptimization", "description": "Quantum-Inspired Adaptive Evolutionary Swarm Optimization (QIAESO): Leverages quantum superposition for initialization and adaptive particle updates for enhanced exploration and convergence.", "configspace": "", "generation": 34, "fitness": 0.2829342941685408, "feedback": "The algorithm QuantumInspiredAdaptiveEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.8396779349667713, 0.8574374910340474, 0.8460912145942223, 0.8588759286800828, 0.8801789277771699, 0.41307114951043045, 0.8591478176590805, 0.8629974816224117, 0.8646733809938072, 0.6526400914356778, 0.515646866705205, 0.5726925087787269, 0.7168653583980797, 0.6827615966901527, 0.655778170970079, 0.7084376974169064, 0.5661189925112806, 0.7210706442007586, 0.1232272530840981, 0.13817391868085416, 0.14406967908410984, 0.16465241894058802, 0.07267615925243986, 0.1294689285158236, 0.15158662979142534, 0.14848953006455923, 0.13994468552522754, 0.11907476594886557, 0.14918608232785424, 0.10865842540970916, 0.14148158033520286, 0.14239652215580212, 0.18063035263502913, 0.12542194242659988, 0.15719033106462266, 0.09793296307591359, 0.9906700615953565, 0.9943552610736178, 0.9929885276256407, 0.993111901944732, 0.9900454338726005, 0.990445290851362, 0.9943932207894238, 0.9906527633690934, 0.9905167771453822, 0.5607685899339097, 0.6912300538741158, 0.679090903126528, 0.1495467180648169, 0.6953893063725739, 0.5670651476951617, 0.6765677972041259, 0.6400062206258825, 0.6612151334898937, 0.35866424442041556, 0.16756189330146876, 0.3554763436610675, 0.19315878159771904, 0.11603527855250717, 0.1603469449106304, 0.23065301073171773, 0.17455675462619635, 0.2353775033276424, 0.22640355192521444, 0.20451693753561762, 9.999999999998899e-05, 0.15364423994798726, 0.2252538584262943, 0.13057507649577926, 0.234797972672264, 0.256020557384654, 0.22126857822372148, 0.20553540270673154, 0.21949347110653772, 0.2214664576336206, 0.2403409303544074, 0.2569111819764547, 0.24977182876911797, 0.2550833666199297, 0.26228377697275596, 0.24493517416404897, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004983381162777523, 9.999999999998899e-05, 9.999999999998899e-05, 0.01688635684730888, 0.022368156267591255, 9.999999999998899e-05, 0.06659343044851918, 0.08085511316790539, 0.06786733346534968, 0.07232220305109094, 0.00045920654964792806, 0.10462769516247405, 0.05487632451425106, 0.026042287599660985, 0.043950368341462154, 9.999999999998899e-05, 9.999999999998899e-05, 0.04870542126009603, 0.11155114578701975, 9.999999999998899e-05, 0.09855846447532846, 9.999999999998899e-05, 0.06790865429546844, 0.07277597420588666, 0.04215894334301851, 0.011479353302733752, 0.06425655910807493, 0.006398362468713614, 0.03891332601704611, 0.2198208857562669, 0.04927018326739563, 0.05701681255972757, 0.08197970963124446, 0.537935529673514, 0.5447408499234583, 0.5645619079791993, 0.18307176956981075, 0.18237796633155134, 0.5475772154584047, 0.5726467625573779, 0.5868905779578616, 0.5984782135708122, 0.0866578057902081, 0.09476265370508485, 0.0990701508379741, 0.1555684524815295, 0.1286576237930971, 0.13611716486640668, 0.14223852222293754, 0.13856418716594077, 0.1459217757061726, 0.24984303818564246, 0.17632629784040088, 0.19007208479778215, 0.2374196368373056, 0.18925888624239207, 0.20521036682985017, 0.1512345434749528, 0.1715488498153369, 0.20678151988425175, 0.3145599194781894, 0.38382768615711416, 0.21779721422049947, 0.24312949945883633, 0.25304783323470914, 0.5326856671065651, 0.532343757629509, 0.5012693015872516, 0.23325993385584742, 0.19761618159638106, 0.2420529732992821, 0.24229106193087324, 0.21523488752716402, 0.26646241980492036, 0.17306080118505218, 0.3012132578508354, 0.21998755988723773, 0.3453261010271699, 0.19898787607632196, 0.21274644201914694, 0.19575607286476537, 0.20717834167247517, 0.1954261331719912, 0.2060421801684219, 0.20682404566099732, 0.18310010263513288, 0.2149491656384589, 0.22137704075743525, 0.19705223953219775, 0.20887392720110887, 0.5755756980001537, 0.24249598899440084, 0.2144582973989967, 0.19412618128530612, 0.19410934677353708, 0.23460904186321552, 0.1706440161895394, 0.17245656568392786, 0.17317759190817528, 0.16601809446786153, 0.5849436321871397, 0.8175559590082258, 0.5585034061432064, 0.1842928379699238, 0.2067813302311231, 0.21050541615204366, 0.11820608636700725, 0.1675161680421836, 0.29163173328819425, 0.12767916980629712, 0.20436538260500825, 0.19717867229989672, 0.1552068318006835, 0.1454917015543642, 0.19558620580116115, 0.17727547979443192, 0.18253737115717816, 0.18945942891649215, 0.19400734923199736, 0.18380347469675418, 0.19543014847254703, 0.23958450683075105, 0.22029278580121758, 0.09583319757404885, 0.0940597831163148, 0.09057269612295515, 0.07164397870834271, 0.11498214582564692, 0.11686053019867793, 0.08277344731517788, 0.09334793101659722, 0.09535569409707312]}, "mutation_prompt": null}
{"id": "4a858eaa-eec2-4367-a0ab-41d8e8b001d3", "solution": "import numpy as np\n\nclass AdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75  # Adjusted mutation factor for balanced exploration-exploitation\n        self.cr = 0.9  # Increased crossover probability for diversity\n        self.w = 0.4  # Lower inertia weight for increased convergence speed\n        self.c1 = 1.5  # Slightly increased cognitive coefficient for focused local search\n        self.c2 = 1.4  # Balanced social coefficient for global exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveEvolutionarySwarmOptimization", "description": "Adaptive Evolutionary Swarm Optimization (AESO): A dynamically adaptive algorithm combining evolutionary mutation and swarm-based refinement for efficient global and local search.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.9098895303544797, 0.9115178072373437, 0.924694207560767, 0.9226135980307928, 0.9213789429235442, 0.1900766100364576, 0.9154549123464074, 0.9233275811841812, 0.912286990712088, 0.7749713976522081, 0.8146813497312986, 0.7944058270879195, 0.819877932824482, 0.8155567684193846, 0.8208522262468385, 0.7871985088679044, 0.8199753474285704, 0.8169458266683542, 0.16182543305464092, 0.11597525406346354, 0.1442672864717799, 0.15807634125535897, 0.13087626601378666, 0.06459839749604068, 0.09557958392281163, 0.12327750223130951, 0.1401274187063023, 0.14162483551554472, 0.1422088157607666, 0.109088867397925, 0.11404704633774221, 0.15511479576274523, 0.0775674288310132, 0.12243140419113463, 0.10976445452848926, 0.11024666211129552, 0.9897167874084744, 0.9908282069237748, 0.9862820942843737, 0.9943120812539199, 0.991669054249653, 0.9909277418670336, 0.9937546593418108, 0.9909186110922243, 0.9895752755399376, 0.8068173182758134, 0.7860631569109648, 0.7660810184362821, 0.7700985285710885, 0.15266189605729485, 0.8182908265082428, 0.08877691764353435, 0.8012358364089429, 0.05149499470134855, 0.20917524065444715, 0.8765293307086479, 0.21680152222341087, 0.16103712316320284, 0.21329126255474073, 0.19177225132636821, 0.24181958532130832, 0.39004782423770124, 0.1506373579168978, 0.27310068214495253, 0.27604109785688413, 0.28533662312731334, 0.13287910750075294, 0.27830671808906604, 0.12860487131474163, 0.2726461882242154, 0.20485665869924474, 0.2818477596065311, 0.29157241500018327, 0.2745237901832991, 0.2819994726318774, 9.999999999998899e-05, 0.17437107273977526, 0.3223778704526503, 0.29574642859532874, 0.30263970503528526, 0.10400801349119193, 9.999999999998899e-05, 9.999999999998899e-05, 0.014591383806971336, 0.0203969072023521, 0.038547564934057976, 9.999999999998899e-05, 0.0016554509309884002, 0.014197491746561375, 9.999999999998899e-05, 0.09082177392516366, 0.05401943097120254, 0.038044108367923934, 0.03032665086804287, 0.02319777326603001, 0.04190903047424521, 0.06009884101746288, 0.08096942982358069, 0.042270679399742606, 0.03598015815548128, 9.999999999998899e-05, 0.05124001680492907, 0.22577026069062778, 0.08058396316793393, 0.07962563126860167, 0.10381914213451471, 0.21696527388759823, 0.07423947775300654, 0.05161325761397706, 0.043154747237164504, 0.17876222609379033, 0.2632584847711853, 0.06811623926715094, 0.24496160101588949, 0.06967628345745414, 0.049535649550694005, 0.08432769737118984, 0.5975491330550808, 0.6843434900476526, 0.597780483863273, 0.6274887713961803, 0.5594631957686791, 0.6104006168677094, 0.6097676931411269, 0.6028100414239653, 0.5829761916474945, 0.14161564036314211, 0.08292743932583946, 0.07022134852477158, 0.0735522076055406, 0.1554298777847316, 0.0853479021832585, 0.07106014793647297, 0.1409604981949074, 0.1460098079829122, 0.20193572551644345, 0.19603072168294566, 0.2744287601452071, 0.2006735742319169, 0.12567254401690897, 0.22164700994160125, 0.23051171369022327, 0.2251245177760658, 0.18764664177988832, 0.4793178637698835, 0.4107268162414288, 0.3632326697230389, 0.5147420463138435, 0.22412428001387608, 0.2671233514167356, 0.29362825937904313, 0.46876666722619875, 0.6015982094350851, 0.29788830563928814, 0.343897939252341, 0.2852785840064933, 0.18842819763057428, 0.3410261913832131, 0.2849756756220614, 0.173931763586626, 0.20945589284899868, 0.4282885473586914, 0.21529354579190663, 0.21852134495762898, 0.192603511808631, 0.21018737349566363, 0.22167122897768488, 0.2032321655222199, 0.24862387111705753, 0.25057032363171994, 0.19654657258944297, 0.19589629905719863, 0.24902596172805191, 0.2239061272471865, 0.1969052922601291, 0.19080293303214968, 0.211528366409781, 0.2035276813928052, 0.2088131471794935, 0.22366538065225927, 0.17347168811863833, 0.16629531769865513, 0.9133844315530291, 0.13156717527937867, 0.1883168632594302, 0.15799618882012523, 0.16970170386439587, 0.16646986002183273, 0.17161013209662634, 0.16125492340093373, 0.11226703330597321, 0.11732831125671983, 0.8733690115891128, 0.1686826876941806, 0.836605533507628, 0.21012807662733968, 0.8826820034740877, 0.15572728662020907, 0.21343814084237833, 0.2123590311018141, 0.21390874519740444, 0.19957397976592728, 0.17716381207627852, 0.205115866296802, 0.18323885805686124, 0.1816868589659888, 0.22199838456557708, 0.09712362690759013, 0.12938041427119207, 0.10451330766462275, 0.09756047927148681, 0.08980449453648676, 0.09177438084522527, 0.10809536043372026, 0.09916116760401494, 0.10193109069551443]}, "mutation_prompt": null}
{"id": "d0e3999a-068c-49c4-aa58-4a7bac1cc735", "solution": "import numpy as np\n\nclass HybridDynamicStrategyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Slightly increased population for diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))  # Reduced initial velocities for stability\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Enhanced mutation factor for broader exploration\n        self.cr = 0.85  # Adjusted crossover probability for balance\n        self.w = 0.5  # Adjusted inertia weight for balanced convergence\n        self.c1 = 1.6  # Enhanced cognitive coefficient for intensified local search\n        self.c2 = 1.3  # Reduced social coefficient for focused exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridDynamicStrategyOptimization", "description": "Hybrid Dynamic Strategy Optimization (HDSO): An adaptive hybrid algorithm integrating dynamic search strategies and feedback-driven adjustments for optimizing complex landscapes.", "configspace": "", "generation": 36, "fitness": 0.3011314143374191, "feedback": "The algorithm HybridDynamicStrategyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.8553067123663718, 0.8460736183014801, 0.864108492615363, 0.8664376300584712, 0.8713972129077862, 0.8464348525778097, 0.17487708041807715, 0.8673890497744965, 0.8601076106623096, 0.7272896718543946, 0.07521639054965235, 0.6726946039705628, 0.5731044139633401, 0.705072366808094, 0.612180807824688, 0.7440698417779039, 0.6080531645154097, 0.7097941975151885, 0.1764701696783355, 0.12091577555921262, 0.15087038354945903, 0.14021405429161238, 0.12004660198026218, 0.16924500487785388, 0.6794670220464575, 0.12561993134534188, 0.1594556605437829, 0.1382690064597325, 0.12837506199640025, 0.09947860622486715, 0.13638683141807684, 0.10969112743246201, 0.1406916281717433, 0.09844505689574057, 0.15104789814236885, 0.15136022049166242, 0.9882974099817053, 0.9890606415377347, 0.9904528749269359, 0.9801772558595311, 0.9917508114142463, 0.9884251608693976, 0.9887413778291703, 0.9820104749934491, 0.9885273611947069, 0.7114152926029733, 0.531948800053645, 0.741092924674913, 0.7151714990226489, 0.1510711750259086, 0.7295344282481036, 0.08869349207604649, 0.7225351174476, 0.08835545307217074, 0.8106764346208728, 0.16939771715624263, 0.21241333944832186, 0.3443112389385643, 0.19181194553118985, 0.2124815434639028, 0.17785684113908462, 0.8233702564084013, 0.12529543087660278, 0.252972251714376, 0.24090237529990088, 0.2474370598551694, 9.999999999998899e-05, 0.23490497147782696, 0.23133315002088295, 9.999999999998899e-05, 0.2485318042482798, 0.23587022544491942, 0.2536540094817118, 0.24414424068831075, 0.054098265907761234, 0.2560357716349788, 0.23872897648561608, 0.1298178921716946, 0.26719878060236035, 0.12989983798948435, 0.263026834393865, 0.027463055514080792, 9.999999999998899e-05, 0.0003152819998082368, 0.00011239854499167645, 9.999999999998899e-05, 9.999999999998899e-05, 0.002280325563468466, 9.999999999998899e-05, 9.999999999998899e-05, 0.07269127670623798, 0.12205863232183967, 0.07620850398397283, 0.018876799115499998, 0.09338002001220591, 9.999999999998899e-05, 0.03903342740696569, 0.04238748505459966, 0.0709310837481193, 0.07208494658454834, 0.04815997836291408, 9.999999999998899e-05, 0.09043225515531939, 0.0878963780928077, 0.07115457138692893, 0.09651212368469164, 0.18181770965711097, 0.15620522599228626, 0.07050024602486815, 0.1333285685899036, 0.214071491399763, 0.04985488880700362, 0.12989340264020666, 0.038305558596388845, 0.0570427652433847, 0.084157414630056, 0.05625391708566474, 0.5604718850270289, 0.5803623507499647, 0.5656487235194495, 0.5775646622732635, 0.566902577164111, 0.5577377470952799, 0.577957611565173, 0.5759611723500845, 0.6134099478925943, 0.0639525596755095, 0.12356116827538621, 0.10936546437956607, 0.13551119877191609, 0.0839633102065993, 0.09145698736177477, 0.11923674316678445, 0.07596832056905478, 0.14549864095260634, 0.21714087777583924, 0.25337227084245584, 0.19150435647249886, 0.1854218523968837, 0.2941229625612568, 0.17923368276714846, 0.5011166057432257, 0.21228761942260166, 0.21355530255610622, 0.37180476797879225, 0.24952098956256352, 0.4320955136782646, 0.4812462804937926, 0.47381136768902343, 0.3489574076189448, 0.6036683078848395, 0.6037635942735671, 0.476459834173961, 0.28244263230504074, 0.18795244941510814, 0.26009664963416157, 0.3097078208522934, 0.2149862037344482, 0.27384866583841305, 0.23454210205471504, 0.2845577829747149, 0.15245401045365037, 0.21880065466434562, 0.22310287894020486, 0.20908914801670753, 0.21411936363669493, 0.22939262138171412, 0.21465002559501323, 0.254041858293068, 0.21487413713439663, 0.23435952131276716, 0.18994431370995557, 0.20296688518813533, 0.24716456712696655, 0.22593191941305057, 0.24635901105748403, 0.24321475548865723, 0.22724656911110297, 0.24615889373188493, 0.2129921676290366, 0.15297684795985256, 0.16900989097667807, 0.16538013369667426, 0.1933741802274206, 0.17551908159487062, 0.16865381065357055, 0.8231316610468681, 0.8587990016029219, 0.17705603020698257, 0.1675916584583249, 0.7273805672270083, 0.15551021710765123, 0.6868295765367587, 0.12758097516159528, 0.7782987732367875, 0.16865475783298212, 0.21432389184894773, 0.1948287110905801, 0.1996834158401749, 0.1925247306092388, 0.1974842257061229, 0.1850923983730115, 0.2082663177760794, 0.19431425045598028, 0.18072058629121712, 0.1991890088038163, 0.19769092948885603, 0.0865753845179632, 0.0892832010580632, 0.0885750638093088, 0.10557850703587679, 0.09636380230777264, 0.07652211272003695, 0.10010004072122325, 0.12279852497191024, 0.10671071904413565]}, "mutation_prompt": null}
{"id": "f8483c9f-6af3-40c4-b652-43dfe6ded19b", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Slightly increased mutation factor for exploration\n        self.cr = 0.85  # Modulated crossover probability for balance\n        self.w = 0.6  # Increased inertia weight for exploration\n        self.c1 = 1.3  # Adjusted cognitive coefficient\n        self.c2 = 1.7  # Enhanced social coefficient for improved global search\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired State Update\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Quantum-inspired Parameters\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                phi = np.pi * np.random.rand(self.dim)  # Quantum phase\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * np.sin(phi) * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * np.cos(phi) * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredAdaptiveEvolutionarySwarmOptimization", "description": "Quantum-Inspired Adaptive Evolutionary Swarm Optimization (QIAESO): Introduces quantum-inspired state update and dynamic parameter adaptation for enhanced convergence and exploration.", "configspace": "", "generation": 37, "fitness": 0.17455873002112007, "feedback": "The algorithm QuantumInspiredAdaptiveEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.3174746421865061, 0.4450738130425067, 0.37561478740000354, 0.455722636974628, 0.4198642884178846, 0.40113947734542577, 0.3658648175180832, 0.35003338513597193, 0.367062941361894, 0.042362570952171, 0.12409813994176033, 0.15331068681607907, 0.033545808596615045, 0.14318002497038929, 0.048968047282970995, 0.042513709305574965, 0.018714206825136137, 0.1138365716619012, 0.08125352368565031, 0.09621851270825277, 0.10074370610425398, 0.08218554880551088, 0.07267598337299808, 0.06614409439149005, 0.09262939614992916, 0.09130234867918241, 0.10914814829956665, 0.0795498645200049, 0.08878049862198822, 0.08557141318291783, 0.08573498983009309, 0.08325341459919278, 0.0675976856828685, 0.06790900069837913, 0.07901416545516626, 0.07948658590914404, 0.9764672362356177, 0.9863041912833137, 0.9826651316411221, 0.9794599121528675, 0.9754743756091461, 0.9903736357470795, 0.9727535313451118, 0.97927051655101, 0.9909266638287043, 0.12074219549579379, 0.10273783718634222, 0.1839688489899488, 0.18108034849056998, 0.18701023272623463, 0.16362244423020145, 0.08509291973760247, 0.08644295498612575, 0.08633007353878641, 0.16681982870609668, 0.2371238246599835, 0.17247421876776048, 0.16477890886566837, 0.29742917063241625, 0.15945146041196823, 0.15130865950312034, 0.15807863944252587, 0.19046931446648407, 0.09656212134603026, 0.11053040780256429, 0.1392488116082784, 0.1135581418560192, 0.07301733442778735, 0.07404464170776703, 0.1002626436908477, 0.11646293063044433, 0.11998346558481465, 0.12400624738206656, 0.02145378005604781, 0.08677684222390436, 0.11626435117694123, 0.11126090158485824, 0.09265113460305785, 0.10417929380110436, 0.10530063879080587, 0.052831338443239506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00026111794524474874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0326917338297007, 0.029019661536208163, 0.047233762558045456, 0.018993521243804157, 0.06363006830002726, 0.04832455520938206, 0.04880405411456845, 0.06999102972466476, 0.03197533331648661, 9.999999999998899e-05, 0.02621585955821193, 0.0023406418506785043, 0.008724514278529716, 0.005503781170945299, 9.999999999998899e-05, 0.018070519218382874, 9.999999999998899e-05, 0.005757827920945591, 0.023175918115422744, 9.999999999998899e-05, 0.027226557202183144, 0.05149572653710732, 0.057722242521177525, 0.003475636430214535, 0.056103843107576545, 0.04414357796142343, 0.05416445613750387, 0.3086827059050039, 0.3372663043292038, 0.38284562952181844, 0.3406332254295612, 0.3269605394018098, 0.3458794641329648, 0.3349505731634711, 0.36146639246438395, 0.318013030137531, 0.08853876062679122, 0.07886260849735882, 0.06020230455483211, 0.07298715924431831, 0.05896050010636078, 0.08979503942605138, 0.06388593471037474, 0.0628161090592334, 0.06270803431401151, 0.1508143562618245, 0.15531055861428633, 0.33510167140388125, 0.1582049817753245, 0.17782159077186865, 0.14320716100237074, 0.14238714177257228, 0.19690692948100608, 0.2426402896619707, 0.22859231037020733, 0.21733493983810126, 0.20889984827300656, 0.20730336461062848, 0.18960821280268858, 0.2309285288266032, 0.2460871903891505, 0.24719721332357958, 0.2761303650154878, 0.18528689259903197, 0.1725781317041507, 0.14970147284393664, 0.15511433347850812, 0.16827470183412063, 0.128112436126684, 0.18845947286964893, 0.1966069131766408, 0.18340287360056207, 0.18351058036096624, 0.1772126666211845, 0.18137204045825206, 0.2045724739252195, 0.16925869667784932, 0.15833058258833044, 0.2122553675374541, 0.20069657105916572, 0.1775520554851766, 0.164805032411667, 0.17909406343486567, 0.18261117729122633, 0.16887250316441493, 0.16699401397344826, 0.1703375197919086, 0.17135199868328854, 0.17810319172770228, 0.19751150763588254, 0.16513707321270887, 0.148612500546897, 0.15514630049623068, 0.16738946782091446, 0.18294899694779576, 0.3448876630478054, 0.12425655831728533, 0.2269781103353583, 0.18406938478769308, 0.1553638374059566, 0.16272341245875654, 0.17266247939655965, 0.20649198806280933, 0.10751919118768705, 0.12215385537662382, 0.1966028732078714, 0.10844157656953035, 0.20744970069357127, 0.19220264483154237, 0.1903389359085802, 0.18056913126729612, 0.18451265442166787, 0.18689026346703996, 0.20001352924255544, 0.20128311675351984, 0.1886845793869183, 0.2002627684383086, 0.07468184174213144, 0.07072841657962492, 0.07250219011586145, 0.07005444274498773, 0.06659759658465281, 0.07143675279784878, 0.06581644736432357, 0.07214560272690107, 0.06434208186648616]}, "mutation_prompt": null}
{"id": "6f47491c-f4f0-487a-a885-c117dc65600b", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.85  # Increased mutation factor for enhanced exploration\n        self.cr = 0.85  # Adjusted crossover probability for balance\n        self.w = 0.3  # Further reduced inertia weight for faster convergence\n        self.c1 = 1.6  # Enhanced cognitive coefficient for intensified local search\n        self.c2 = 1.5  # Improved social coefficient for better global exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation with strategic diversity control\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover with probability adaptation\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveMultiStrategyEvolutionarySwarmOptimization", "description": "Adaptive Multi-Strategy Evolutionary Swarm Optimization (AMSESO): An enhanced algorithm integrating adaptive mutation, crossover, and swarm dynamics with strategic diversity control for robust global and local search.", "configspace": "", "generation": 38, "fitness": 0.30587102860934395, "feedback": "The algorithm AdaptiveMultiStrategyEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.9135439752514196, 0.9309287185314674, 0.9424314822025243, 0.9305421174994113, 0.9278583573291078, 0.18348547590501663, 0.935792369362128, 0.9297522909132957, 0.9297792838089226, 0.8538397719184765, 0.8437779330451268, 0.8585744699143468, 0.8204082498158342, 0.8361943086022259, 0.8682554661660722, 0.8453184153223796, 0.8745037024073903, 0.8427598937745828, 0.14514094595742322, 0.12391210846691103, 0.15980067182008717, 0.12920516173708962, 0.16342434351223833, 0.13368418210052424, 0.05727454014321842, 0.15917303605466293, 0.1806514157779957, 0.1107515746602239, 0.1412704429886371, 0.18103741469558332, 0.15295426310086113, 0.09151501845467014, 0.09590612412525712, 0.11546333487033811, 0.10950660722026095, 0.14203038521905886, 0.9928048140885577, 0.99077195823437, 0.9864466431737801, 0.9868128199614289, 0.9912934306893758, 0.9910382040098586, 0.9837962769388052, 0.993476140101051, 0.9896292843129924, 0.06172917872046346, 0.820708255453098, 0.7773161110347574, 0.657031047330124, 0.7751482865302726, 0.8025163748881492, 0.7909124706557212, 0.6622739442152804, 0.8104168247363297, 0.2289371078829603, 0.1700190792989974, 0.22751236551220066, 0.21342516228645048, 0.19358629097212032, 0.21471667071662381, 0.17844087245497975, 0.11694200672030142, 0.117463867394489, 0.2844715677555236, 0.26097110426118986, 0.27372132088744394, 0.29248937666009156, 0.29748597398875865, 0.26135307302472943, 0.12235655911398169, 0.250178286391171, 0.26470152246237033, 0.12970541930149226, 0.3684836009627611, 0.2591673502628753, 9.999999999998899e-05, 9.999999999998899e-05, 0.29645473168402525, 0.28390379674579347, 0.28480913045661005, 0.27348304413050417, 0.004282123666209947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03406434522754409, 9.999999999998899e-05, 0.0008105076008853018, 0.07574807486110113, 0.08433477957048907, 0.03670469103661522, 0.060390397067056845, 0.062283807888348974, 9.999999999998899e-05, 0.04412477703137374, 0.11479797497990607, 0.06651173881583217, 0.09338880010850104, 0.037987666883897875, 0.054675245103604, 0.05233530878187498, 0.08379531981798427, 0.10158806833345191, 0.1061007438053786, 0.10847194480386302, 0.23815986313472515, 0.23684639265236607, 0.011733948369786917, 0.08831842714916072, 0.10372682958324508, 0.054437312347468625, 9.999999999998899e-05, 0.006783014911250218, 0.2024920356748806, 0.04971473457888065, 0.16653729170879616, 0.6321168522084992, 0.5643001925113051, 0.5726320925184294, 0.6070768444972643, 0.602413409782046, 0.5689744637913825, 0.6128456103565277, 0.5760164261744121, 0.5954777461681771, 0.1020482888276587, 0.10084173461198065, 0.12395708523879545, 0.13394235630246676, 0.10778332820726355, 0.1336641545421231, 0.16044974313170002, 0.09626782661845468, 0.11467586615502856, 0.13414239463166666, 0.2665028427468411, 0.4351462608931259, 0.1415448297472649, 0.21739135785277086, 0.15326016903074924, 0.23322222294355022, 0.21990934918249216, 0.18753393645788285, 0.2649858632572335, 0.2408284279801025, 0.37160054005358745, 0.3684297684462443, 0.23171048464169952, 0.3995230668659304, 0.6229378019867106, 0.2974802966382677, 0.39245614493487924, 0.1589608747144866, 0.31751323777733764, 0.22327570782913786, 0.16364294987797057, 0.19368209767774525, 0.22040547110334974, 0.44102142166504166, 0.23614528315128658, 0.24169035663542093, 0.21461106171621935, 0.21096439021138913, 0.2077792802677525, 0.20238020588878802, 0.22941838256938762, 0.21513237782200045, 0.20208383409817765, 0.19402607561033092, 0.2058609676024583, 0.22953517636393417, 0.19712081054439745, 0.17820470799609633, 0.20967922060316646, 0.19440715637121342, 0.1794812862231514, 0.19477960666114158, 0.20810883628016197, 0.19314779137775795, 0.171503670912175, 0.17121337844268203, 0.18891188226162225, 0.16817147408792266, 0.1881840792087618, 0.1573035241355144, 0.09087024461746385, 0.16252348714719156, 0.14936568976331455, 0.21179507007784526, 0.21094210147224912, 0.1461419953795967, 0.1559745192000731, 0.7690880425539885, 0.8670317608458104, 0.2140276376921767, 0.8578863346335196, 0.09431280963833066, 0.22065846582780668, 0.19111496516291904, 0.20525680433208693, 0.1905625514921384, 0.19833781122522276, 0.2108507112025415, 0.18677026759372206, 0.18845105526811368, 0.20340676328816876, 0.1149467195867554, 0.10253622833346143, 0.09639194944665719, 0.07640038055946408, 0.09175738944800471, 0.10172185010875767, 0.09693725417182719, 0.10482167076123183, 0.0934279265932697]}, "mutation_prompt": null}
{"id": "eee84c0b-ac67-4345-8a5e-6c553e97fff9", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Enhanced mutation factor for quantum exploration\n        self.cr = 0.8  # Balanced crossover probability\n        self.w = 0.3  # Further reduced inertia weight for quicker convergence\n        self.c1 = 1.6  # Increased cognitive coefficient to enhance local search capability\n        self.c2 = 1.5  # Slightly higher social coefficient for better global exploration\n        self.quantum_amplitude = 0.05  # Quantum superposition amplitude\n\n    def __call__(self, func):\n        def quantum_superposition():\n            return np.random.uniform(-self.quantum_amplitude, self.quantum_amplitude, self.dim)\n\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution with Quantum Superposition\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2) + quantum_superposition()\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Quantum Interference\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i])\n                                      + quantum_superposition())\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredAdaptiveEvolutionarySwarmOptimization", "description": "Quantum-Inspired Adaptive Evolutionary Swarm Optimization (QIAESO): Introducing quantum-inspired mechanisms for enhanced exploration and convergence by simulating superposition and interference of solutions.", "configspace": "", "generation": 39, "fitness": 0.2347272084774735, "feedback": "The algorithm QuantumInspiredAdaptiveEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.5298289786641206, 0.518302318616337, 0.5136304432395179, 0.5367383740912348, 0.5218171499513657, 0.5573175974908534, 0.5386497290304894, 0.5403511376340688, 0.5694530622808496, 0.09626833337535923, 0.09651126765140505, 0.05624455996601685, 0.02407894765155616, 0.10423649389325274, 0.11996845905663067, 0.05117076025732381, 0.04779457688711697, 0.11708795672930006, 0.11336104693505, 0.21165779494703185, 0.07366210544084639, 0.1514677310237068, 0.15879148508827678, 0.15757781119564007, 0.13257936120172087, 0.10896633841694425, 0.14919168248028147, 0.13999555604616942, 0.10586268419791756, 0.12037900838181703, 0.10783580171706875, 0.10860459583923876, 0.05584313868130375, 0.14122058170323548, 0.13426097109268798, 0.11108113956829424, 0.9936203673718972, 0.990974171765049, 0.9931275985620757, 0.9937394566075727, 0.9945099639931599, 0.9880914074269267, 0.9910171639098387, 0.9950266638559984, 0.9903499729334404, 0.35771385587439286, 0.3678300777479765, 0.3698279867468487, 0.3449763429540338, 0.37231327071094833, 0.36768354486967003, 0.3626539937660176, 0.3628257623928087, 0.37412492422772614, 0.8706972680292948, 0.22371642530528046, 0.8500027849725103, 0.19253732495334308, 0.1927306032006445, 0.2778383277592352, 0.11730050246777446, 0.12580288183196897, 0.11711509851807733, 0.2019394529972489, 0.19265432735526644, 0.1819437702480704, 0.13255297263620847, 0.13322983734937066, 0.13301207182447106, 0.17304673633196688, 0.19247248297953323, 0.16264870286218103, 0.21044445740137063, 0.2722638947713347, 0.09934916620533352, 0.13322212986135984, 0.182048697850287, 0.16338380702618638, 0.1984501108166642, 0.1370673498012719, 0.10444773189373247, 9.999999999998899e-05, 0.004556712623126846, 9.999999999998899e-05, 0.0044629409367016315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004874450548056908, 0.1332603038856618, 0.0976761840524899, 0.11037355780624147, 0.07501243344353192, 0.01805033061344874, 0.025964851411204526, 0.04242542296297103, 0.03915163355303797, 0.12373665919745436, 0.0009451033457462676, 0.0021725710553520683, 9.999999999998899e-05, 0.002951121568951054, 0.007757536775990004, 9.999999999998899e-05, 0.0035133759929707464, 9.999999999998899e-05, 0.00796705847251944, 0.04969195541704463, 0.16838308813467773, 0.13309780626345868, 0.08108274528742077, 0.11992359332168412, 0.12295726105348148, 0.08256432167455419, 0.16170925805166592, 0.09087786424082456, 0.4842434075274361, 0.47369918134850053, 0.4915233779645334, 0.5068757918773165, 0.4621596196425587, 0.4531201143377691, 0.4937327909270053, 0.4683468599981002, 0.4774092435688957, 0.12324198320601698, 0.10368302490178372, 0.11280835910344345, 0.11126202954044362, 0.10380947241189475, 0.09492952655937281, 0.07405669401800985, 0.09422797484870993, 0.12403077166810128, 0.33825840397415563, 0.319187406380273, 0.3500575580485392, 0.3198536448156265, 0.17565394258343947, 0.2602500719951911, 0.1876936992130166, 0.1594533012627768, 0.1832221439860029, 0.17786563445123027, 0.25616247339073683, 0.2688053469126196, 0.23128817503712285, 0.2797724164915385, 0.32830978293401114, 0.3288354343599593, 0.32977603852071813, 0.3239503930579223, 0.24307079814813592, 0.2386915741063208, 0.23160328192118684, 0.18538221927453458, 0.1777518356447727, 0.2363992827244784, 0.23722489771837485, 0.1763857986362496, 0.12299903166186632, 0.22367231547302224, 0.2584706999939408, 0.19457227760521878, 0.2223628798147479, 0.2545636513121843, 0.18447760782962563, 0.2039502495383826, 0.20763662601501742, 0.22110239159933087, 0.19839404378269065, 0.1901086991687273, 0.19935991758949412, 0.2512818500336117, 0.202738152168914, 0.20164726130195698, 0.1858056194995651, 0.22496691519965906, 0.22375667553810652, 0.14680210744985966, 0.185602205034073, 0.1538052488277606, 0.18791083050825952, 0.1789594713250544, 0.21291830357761055, 0.21238078282307715, 0.12503278711157306, 0.7605003194326196, 0.1279403926776116, 0.11325160239780618, 0.5708236045912474, 0.2115187388867309, 0.6441128521046529, 0.21092182873276022, 0.21425720233695134, 0.21419373529731545, 0.2116208141667355, 0.17904818957938096, 0.17552164646138113, 0.18363141733638833, 0.19244594240274993, 0.17135288836982776, 0.18785028894719968, 0.18157505860219514, 0.20563366045009202, 0.17239306663887377, 0.09937547340452768, 0.09909835550130541, 0.1320285607698526, 0.08496934715361637, 0.08981485868825057, 0.11918443750218943, 0.0845449914470684, 0.08070166594854034, 0.09365415089683571]}, "mutation_prompt": null}
{"id": "343d8f6a-4845-4984-b372-35514cdc2353", "solution": "import numpy as np\n\nclass AdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75  # Adjusted mutation factor for balanced exploration-exploitation\n        self.cr = 0.9  # Increased crossover probability for diversity\n        self.w = 0.4  # Lower inertia weight for increased convergence speed\n        self.c1 = 1.5  # Slightly increased cognitive coefficient for focused local search\n        self.c2 = 1.4  # Balanced social coefficient for global exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveEvolutionarySwarmOptimization", "description": "Adaptive Evolutionary Swarm Optimization (AESO): A dynamically adaptive algorithm combining evolutionary mutation and swarm-based refinement for efficient global and local search.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.9098895303544797, 0.9115178072373437, 0.924694207560767, 0.9226135980307928, 0.9213789429235442, 0.1900766100364576, 0.9154549123464074, 0.9233275811841812, 0.912286990712088, 0.7749713976522081, 0.8146813497312986, 0.7944058270879195, 0.819877932824482, 0.8155567684193846, 0.8208522262468385, 0.7871985088679044, 0.8199753474285704, 0.8169458266683542, 0.16182543305464092, 0.11597525406346354, 0.1442672864717799, 0.15807634125535897, 0.13087626601378666, 0.06459839749604068, 0.09557958392281163, 0.12327750223130951, 0.1401274187063023, 0.14162483551554472, 0.1422088157607666, 0.109088867397925, 0.11404704633774221, 0.15511479576274523, 0.0775674288310132, 0.12243140419113463, 0.10976445452848926, 0.11024666211129552, 0.9897167874084744, 0.9908282069237748, 0.9862820942843737, 0.9943120812539199, 0.991669054249653, 0.9909277418670336, 0.9937546593418108, 0.9909186110922243, 0.9895752755399376, 0.8068173182758134, 0.7860631569109648, 0.7660810184362821, 0.7700985285710885, 0.15266189605729485, 0.8182908265082428, 0.08877691764353435, 0.8012358364089429, 0.05149499470134855, 0.20917524065444715, 0.8765293307086479, 0.21680152222341087, 0.16103712316320284, 0.21329126255474073, 0.19177225132636821, 0.24181958532130832, 0.39004782423770124, 0.1506373579168978, 0.27310068214495253, 0.27604109785688413, 0.28533662312731334, 0.13287910750075294, 0.27830671808906604, 0.12860487131474163, 0.2726461882242154, 0.20485665869924474, 0.2818477596065311, 0.29157241500018327, 0.2745237901832991, 0.2819994726318774, 9.999999999998899e-05, 0.17437107273977526, 0.3223778704526503, 0.29574642859532874, 0.30263970503528526, 0.10400801349119193, 9.999999999998899e-05, 9.999999999998899e-05, 0.014591383806971336, 0.0203969072023521, 0.038547564934057976, 9.999999999998899e-05, 0.0016554509309884002, 0.014197491746561375, 9.999999999998899e-05, 0.09082177392516366, 0.05401943097120254, 0.038044108367923934, 0.03032665086804287, 0.02319777326603001, 0.04190903047424521, 0.06009884101746288, 0.08096942982358069, 0.042270679399742606, 0.03598015815548128, 9.999999999998899e-05, 0.05124001680492907, 0.22577026069062778, 0.08058396316793393, 0.07962563126860167, 0.10381914213451471, 0.21696527388759823, 0.07423947775300654, 0.05161325761397706, 0.043154747237164504, 0.17876222609379033, 0.2632584847711853, 0.06811623926715094, 0.24496160101588949, 0.06967628345745414, 0.049535649550694005, 0.08432769737118984, 0.5975491330550808, 0.6843434900476526, 0.597780483863273, 0.6274887713961803, 0.5594631957686791, 0.6104006168677094, 0.6097676931411269, 0.6028100414239653, 0.5829761916474945, 0.14161564036314211, 0.08292743932583946, 0.07022134852477158, 0.0735522076055406, 0.1554298777847316, 0.0853479021832585, 0.07106014793647297, 0.1409604981949074, 0.1460098079829122, 0.20193572551644345, 0.19603072168294566, 0.2744287601452071, 0.2006735742319169, 0.12567254401690897, 0.22164700994160125, 0.23051171369022327, 0.2251245177760658, 0.18764664177988832, 0.4793178637698835, 0.4107268162414288, 0.3632326697230389, 0.5147420463138435, 0.22412428001387608, 0.2671233514167356, 0.29362825937904313, 0.46876666722619875, 0.6015982094350851, 0.29788830563928814, 0.343897939252341, 0.2852785840064933, 0.18842819763057428, 0.3410261913832131, 0.2849756756220614, 0.173931763586626, 0.20945589284899868, 0.4282885473586914, 0.21529354579190663, 0.21852134495762898, 0.192603511808631, 0.21018737349566363, 0.22167122897768488, 0.2032321655222199, 0.24862387111705753, 0.25057032363171994, 0.19654657258944297, 0.19589629905719863, 0.24902596172805191, 0.2239061272471865, 0.1969052922601291, 0.19080293303214968, 0.211528366409781, 0.2035276813928052, 0.2088131471794935, 0.22366538065225927, 0.17347168811863833, 0.16629531769865513, 0.9133844315530291, 0.13156717527937867, 0.1883168632594302, 0.15799618882012523, 0.16970170386439587, 0.16646986002183273, 0.17161013209662634, 0.16125492340093373, 0.11226703330597321, 0.11732831125671983, 0.8733690115891128, 0.1686826876941806, 0.836605533507628, 0.21012807662733968, 0.8826820034740877, 0.15572728662020907, 0.21343814084237833, 0.2123590311018141, 0.21390874519740444, 0.19957397976592728, 0.17716381207627852, 0.205115866296802, 0.18323885805686124, 0.1816868589659888, 0.22199838456557708, 0.09712362690759013, 0.12938041427119207, 0.10451330766462275, 0.09756047927148681, 0.08980449453648676, 0.09177438084522527, 0.10809536043372026, 0.09916116760401494, 0.10193109069551443]}, "mutation_prompt": null}
{"id": "78bb49e6-fca3-49ad-9667-bd23940fb5c8", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.85  # Enhanced mutation factor for broader exploration\n        self.cr = 0.8  # Adjusted crossover probability for better exploitation\n        self.w = 0.5  # Optimized inertia weight for dynamic convergence\n        self.c1 = 1.7  # Enhanced cognitive coefficient for increased local search\n        self.c2 = 1.3  # Slightly reduced social coefficient for refined global exploration\n\n    def quantum_mutation(self, individual):\n        return individual + np.random.normal(0, 1, individual.shape) * np.abs(self.global_best_position - individual)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-Inspired Differential Evolution\n            for i in range(self.population_size):\n                # Mutation with Quantum Concept\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_mutation(x0 + self.f * (x1 - x2))\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredAdaptiveEvolutionarySwarmOptimization", "description": "Quantum-Inspired Adaptive Evolutionary Swarm Optimization (QiAESO): Integrates quantum-inspired mutation and adaptive parameters into evolutionary swarm methods for enhanced exploration and convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {}, "mutation_prompt": null}
{"id": "8aae85bc-2732-434f-b23d-77110f6176d4", "solution": "import numpy as np\n\nclass AdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75  # Adjusted mutation factor for balanced exploration-exploitation\n        self.cr = 0.9  # Increased crossover probability for diversity\n        self.w = 0.4  # Lower inertia weight for increased convergence speed\n        self.c1 = 1.5  # Slightly increased cognitive coefficient for focused local search\n        self.c2 = 1.4  # Balanced social coefficient for global exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveEvolutionarySwarmOptimization", "description": "Adaptive Evolutionary Swarm Optimization (AESO): A dynamically adaptive algorithm combining evolutionary mutation and swarm-based refinement for efficient global and local search.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.9098895303544797, 0.9115178072373437, 0.924694207560767, 0.9226135980307928, 0.9213789429235442, 0.1900766100364576, 0.9154549123464074, 0.9233275811841812, 0.912286990712088, 0.7749713976522081, 0.8146813497312986, 0.7944058270879195, 0.819877932824482, 0.8155567684193846, 0.8208522262468385, 0.7871985088679044, 0.8199753474285704, 0.8169458266683542, 0.16182543305464092, 0.11597525406346354, 0.1442672864717799, 0.15807634125535897, 0.13087626601378666, 0.06459839749604068, 0.09557958392281163, 0.12327750223130951, 0.1401274187063023, 0.14162483551554472, 0.1422088157607666, 0.109088867397925, 0.11404704633774221, 0.15511479576274523, 0.0775674288310132, 0.12243140419113463, 0.10976445452848926, 0.11024666211129552, 0.9897167874084744, 0.9908282069237748, 0.9862820942843737, 0.9943120812539199, 0.991669054249653, 0.9909277418670336, 0.9937546593418108, 0.9909186110922243, 0.9895752755399376, 0.8068173182758134, 0.7860631569109648, 0.7660810184362821, 0.7700985285710885, 0.15266189605729485, 0.8182908265082428, 0.08877691764353435, 0.8012358364089429, 0.05149499470134855, 0.20917524065444715, 0.8765293307086479, 0.21680152222341087, 0.16103712316320284, 0.21329126255474073, 0.19177225132636821, 0.24181958532130832, 0.39004782423770124, 0.1506373579168978, 0.27310068214495253, 0.27604109785688413, 0.28533662312731334, 0.13287910750075294, 0.27830671808906604, 0.12860487131474163, 0.2726461882242154, 0.20485665869924474, 0.2818477596065311, 0.29157241500018327, 0.2745237901832991, 0.2819994726318774, 9.999999999998899e-05, 0.17437107273977526, 0.3223778704526503, 0.29574642859532874, 0.30263970503528526, 0.10400801349119193, 9.999999999998899e-05, 9.999999999998899e-05, 0.014591383806971336, 0.0203969072023521, 0.038547564934057976, 9.999999999998899e-05, 0.0016554509309884002, 0.014197491746561375, 9.999999999998899e-05, 0.09082177392516366, 0.05401943097120254, 0.038044108367923934, 0.03032665086804287, 0.02319777326603001, 0.04190903047424521, 0.06009884101746288, 0.08096942982358069, 0.042270679399742606, 0.03598015815548128, 9.999999999998899e-05, 0.05124001680492907, 0.22577026069062778, 0.08058396316793393, 0.07962563126860167, 0.10381914213451471, 0.21696527388759823, 0.07423947775300654, 0.05161325761397706, 0.043154747237164504, 0.17876222609379033, 0.2632584847711853, 0.06811623926715094, 0.24496160101588949, 0.06967628345745414, 0.049535649550694005, 0.08432769737118984, 0.5975491330550808, 0.6843434900476526, 0.597780483863273, 0.6274887713961803, 0.5594631957686791, 0.6104006168677094, 0.6097676931411269, 0.6028100414239653, 0.5829761916474945, 0.14161564036314211, 0.08292743932583946, 0.07022134852477158, 0.0735522076055406, 0.1554298777847316, 0.0853479021832585, 0.07106014793647297, 0.1409604981949074, 0.1460098079829122, 0.20193572551644345, 0.19603072168294566, 0.2744287601452071, 0.2006735742319169, 0.12567254401690897, 0.22164700994160125, 0.23051171369022327, 0.2251245177760658, 0.18764664177988832, 0.4793178637698835, 0.4107268162414288, 0.3632326697230389, 0.5147420463138435, 0.22412428001387608, 0.2671233514167356, 0.29362825937904313, 0.46876666722619875, 0.6015982094350851, 0.29788830563928814, 0.343897939252341, 0.2852785840064933, 0.18842819763057428, 0.3410261913832131, 0.2849756756220614, 0.173931763586626, 0.20945589284899868, 0.4282885473586914, 0.21529354579190663, 0.21852134495762898, 0.192603511808631, 0.21018737349566363, 0.22167122897768488, 0.2032321655222199, 0.24862387111705753, 0.25057032363171994, 0.19654657258944297, 0.19589629905719863, 0.24902596172805191, 0.2239061272471865, 0.1969052922601291, 0.19080293303214968, 0.211528366409781, 0.2035276813928052, 0.2088131471794935, 0.22366538065225927, 0.17347168811863833, 0.16629531769865513, 0.9133844315530291, 0.13156717527937867, 0.1883168632594302, 0.15799618882012523, 0.16970170386439587, 0.16646986002183273, 0.17161013209662634, 0.16125492340093373, 0.11226703330597321, 0.11732831125671983, 0.8733690115891128, 0.1686826876941806, 0.836605533507628, 0.21012807662733968, 0.8826820034740877, 0.15572728662020907, 0.21343814084237833, 0.2123590311018141, 0.21390874519740444, 0.19957397976592728, 0.17716381207627852, 0.205115866296802, 0.18323885805686124, 0.1816868589659888, 0.22199838456557708, 0.09712362690759013, 0.12938041427119207, 0.10451330766462275, 0.09756047927148681, 0.08980449453648676, 0.09177438084522527, 0.10809536043372026, 0.09916116760401494, 0.10193109069551443]}, "mutation_prompt": null}
{"id": "78a12e61-1188-455b-825f-c6d3a55f50e3", "solution": "import numpy as np\n\nclass AdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75  # Adjusted mutation factor for balanced exploration-exploitation\n        self.cr = 0.9  # Increased crossover probability for diversity\n        self.w = 0.4  # Lower inertia weight for increased convergence speed\n        self.c1 = 1.5  # Slightly increased cognitive coefficient for focused local search\n        self.c2 = 1.4  # Balanced social coefficient for global exploration\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = x0 + self.f * (x1 - x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                # Selection\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveEvolutionarySwarmOptimization", "description": "Adaptive Evolutionary Swarm Optimization (AESO): A dynamically adaptive algorithm combining evolutionary mutation and swarm-based refinement for efficient global and local search.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.9098895303544797, 0.9115178072373437, 0.924694207560767, 0.9226135980307928, 0.9213789429235442, 0.1900766100364576, 0.9154549123464074, 0.9233275811841812, 0.912286990712088, 0.7749713976522081, 0.8146813497312986, 0.7944058270879195, 0.819877932824482, 0.8155567684193846, 0.8208522262468385, 0.7871985088679044, 0.8199753474285704, 0.8169458266683542, 0.16182543305464092, 0.11597525406346354, 0.1442672864717799, 0.15807634125535897, 0.13087626601378666, 0.06459839749604068, 0.09557958392281163, 0.12327750223130951, 0.1401274187063023, 0.14162483551554472, 0.1422088157607666, 0.109088867397925, 0.11404704633774221, 0.15511479576274523, 0.0775674288310132, 0.12243140419113463, 0.10976445452848926, 0.11024666211129552, 0.9897167874084744, 0.9908282069237748, 0.9862820942843737, 0.9943120812539199, 0.991669054249653, 0.9909277418670336, 0.9937546593418108, 0.9909186110922243, 0.9895752755399376, 0.8068173182758134, 0.7860631569109648, 0.7660810184362821, 0.7700985285710885, 0.15266189605729485, 0.8182908265082428, 0.08877691764353435, 0.8012358364089429, 0.05149499470134855, 0.20917524065444715, 0.8765293307086479, 0.21680152222341087, 0.16103712316320284, 0.21329126255474073, 0.19177225132636821, 0.24181958532130832, 0.39004782423770124, 0.1506373579168978, 0.27310068214495253, 0.27604109785688413, 0.28533662312731334, 0.13287910750075294, 0.27830671808906604, 0.12860487131474163, 0.2726461882242154, 0.20485665869924474, 0.2818477596065311, 0.29157241500018327, 0.2745237901832991, 0.2819994726318774, 9.999999999998899e-05, 0.17437107273977526, 0.3223778704526503, 0.29574642859532874, 0.30263970503528526, 0.10400801349119193, 9.999999999998899e-05, 9.999999999998899e-05, 0.014591383806971336, 0.0203969072023521, 0.038547564934057976, 9.999999999998899e-05, 0.0016554509309884002, 0.014197491746561375, 9.999999999998899e-05, 0.09082177392516366, 0.05401943097120254, 0.038044108367923934, 0.03032665086804287, 0.02319777326603001, 0.04190903047424521, 0.06009884101746288, 0.08096942982358069, 0.042270679399742606, 0.03598015815548128, 9.999999999998899e-05, 0.05124001680492907, 0.22577026069062778, 0.08058396316793393, 0.07962563126860167, 0.10381914213451471, 0.21696527388759823, 0.07423947775300654, 0.05161325761397706, 0.043154747237164504, 0.17876222609379033, 0.2632584847711853, 0.06811623926715094, 0.24496160101588949, 0.06967628345745414, 0.049535649550694005, 0.08432769737118984, 0.5975491330550808, 0.6843434900476526, 0.597780483863273, 0.6274887713961803, 0.5594631957686791, 0.6104006168677094, 0.6097676931411269, 0.6028100414239653, 0.5829761916474945, 0.14161564036314211, 0.08292743932583946, 0.07022134852477158, 0.0735522076055406, 0.1554298777847316, 0.0853479021832585, 0.07106014793647297, 0.1409604981949074, 0.1460098079829122, 0.20193572551644345, 0.19603072168294566, 0.2744287601452071, 0.2006735742319169, 0.12567254401690897, 0.22164700994160125, 0.23051171369022327, 0.2251245177760658, 0.18764664177988832, 0.4793178637698835, 0.4107268162414288, 0.3632326697230389, 0.5147420463138435, 0.22412428001387608, 0.2671233514167356, 0.29362825937904313, 0.46876666722619875, 0.6015982094350851, 0.29788830563928814, 0.343897939252341, 0.2852785840064933, 0.18842819763057428, 0.3410261913832131, 0.2849756756220614, 0.173931763586626, 0.20945589284899868, 0.4282885473586914, 0.21529354579190663, 0.21852134495762898, 0.192603511808631, 0.21018737349566363, 0.22167122897768488, 0.2032321655222199, 0.24862387111705753, 0.25057032363171994, 0.19654657258944297, 0.19589629905719863, 0.24902596172805191, 0.2239061272471865, 0.1969052922601291, 0.19080293303214968, 0.211528366409781, 0.2035276813928052, 0.2088131471794935, 0.22366538065225927, 0.17347168811863833, 0.16629531769865513, 0.9133844315530291, 0.13156717527937867, 0.1883168632594302, 0.15799618882012523, 0.16970170386439587, 0.16646986002183273, 0.17161013209662634, 0.16125492340093373, 0.11226703330597321, 0.11732831125671983, 0.8733690115891128, 0.1686826876941806, 0.836605533507628, 0.21012807662733968, 0.8826820034740877, 0.15572728662020907, 0.21343814084237833, 0.2123590311018141, 0.21390874519740444, 0.19957397976592728, 0.17716381207627852, 0.205115866296802, 0.18323885805686124, 0.1816868589659888, 0.22199838456557708, 0.09712362690759013, 0.12938041427119207, 0.10451330766462275, 0.09756047927148681, 0.08980449453648676, 0.09177438084522527, 0.10809536043372026, 0.09916116760401494, 0.10193109069551443]}, "mutation_prompt": null}
{"id": "da969ca3-9768-4474-be6a-af8ec9501702", "solution": "import numpy as np\n\nclass HybridQuantumInspiredEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.4\n        self.c1 = 1.5\n        self.c2 = 1.4\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridQuantumInspiredEvolutionarySwarmOptimization", "description": "Hybrid Quantum-inspired Evolutionary and Swarm Optimization (HQESO): Integrates quantum-inspired mechanisms with adaptive evolutionary and swarm dynamics for enhanced global and local search efficiency.", "configspace": "", "generation": 44, "fitness": 0.33956509193528395, "feedback": "The algorithm HybridQuantumInspiredEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "f8177003-25d2-4b9f-bf4b-ab152ae5dc34", "metadata": {"aucs": [0.9073329010885507, 0.9145675209697296, 0.9187948790836589, 0.9255401308852773, 0.9175938494171982, 0.9110033947755507, 0.9212590727337374, 0.8992687192599251, 0.9199416188204556, 0.8200090923529961, 0.8178038971508118, 0.8303220601968938, 0.8343003169424027, 0.8342663491448821, 0.8270093173548014, 0.5553575518773137, 0.8191694034885293, 0.8339027058417152, 0.1316140675709252, 0.13213073458341862, 0.14451188302246376, 0.1589877958675786, 0.7934476383452942, 0.12477174875083452, 0.11480663644063893, 0.11809655715094702, 0.11520871352508455, 0.11620231513660839, 0.10948420650618296, 0.11950603563712647, 0.14207656123641843, 0.12905923921079843, 0.11581686635988808, 0.11270254166214944, 0.08053505421102669, 0.12412758015041658, 0.9897875423275959, 0.9902081775104054, 0.9839791065334482, 0.9905128660855812, 0.9891890996997745, 0.9870174763898998, 0.9893545247684542, 0.9891442624742471, 0.991354485290224, 0.783166751155333, 0.5541148154774814, 0.7967759739174025, 0.753986375320755, 0.6607218067221577, 0.7991221687947261, 0.7393454616339614, 0.8197534076762218, 0.7322342320088637, 0.8685514435311351, 0.17023096885508548, 0.2450559213159471, 0.20633524918238422, 0.9346469371428671, 0.2146788920545455, 0.17311421003470528, 0.17737297436059996, 0.22284730335472502, 0.2668250781466398, 0.3375231481413369, 0.2915532237662828, 0.30138992221929917, 0.24105013952598098, 0.19902668300183268, 0.17858058192332882, 0.2342091415610179, 0.2391833055789634, 0.2509571312655492, 0.2477611350872928, 0.2584438764740238, 0.2750658189747959, 0.2884253297619631, 0.2722816508265209, 0.28859979433162186, 0.2867246380574102, 0.2731977331097277, 9.999999999998899e-05, 0.0716938290329372, 0.06930042985859797, 9.999999999998899e-05, 9.999999999998899e-05, 0.13476485277343186, 0.014660802814633778, 0.055139222259306564, 0.009822689474720203, 0.07913366285388079, 0.06678281577736034, 0.11892245732926454, 0.08613429133204842, 0.0697456681224794, 0.049139819071145174, 0.054860777254936655, 0.11069106609651158, 0.18345034024412055, 0.2666926793859442, 0.07408542733494128, 0.0582857896906227, 0.11707473777471133, 0.3109629019522332, 0.08201016567929764, 0.3613861431273625, 0.07585927070207621, 0.13715064150021372, 0.44299211300228714, 0.04956494715093507, 0.0322880585403551, 0.255325570454249, 0.054219177554607034, 0.12539963861978953, 0.06412822923708061, 0.11376678847775568, 0.1061552276567822, 0.5171879482905968, 0.5658245273379796, 0.523095348366744, 0.625726876712883, 0.5660810160298575, 0.5583761324425488, 0.5567111346395144, 0.5380948210572964, 0.5904864816149353, 0.12227622825301587, 0.08645955795978821, 0.07230040508179103, 0.0620558881277129, 0.12432086492134298, 0.12704329473001985, 0.11410928021733946, 0.1104469539513886, 0.10403841472529363, 0.2152823461301464, 0.32689479427218493, 0.1696248782524199, 0.25068165626604466, 0.15978036567318543, 0.15065460541482667, 0.22674307377958836, 0.330337189578634, 0.4041301354613043, 0.41726408941324744, 0.38633350503056996, 0.2994368742205614, 0.32877062481622543, 0.3423439877284733, 0.3162523097742391, 0.27186090113591566, 0.40429069748380664, 0.39930316643493247, 0.16864289382182973, 0.2529191592778205, 0.12299706998069537, 0.26988231430222653, 0.20841344192569167, 0.18896657808948703, 0.29099208479674965, 0.2604136775833785, 0.25257268964493407, 0.2768694069989316, 0.2813838369633983, 0.26137044380030616, 0.2923050341781256, 0.2442475787248426, 0.2542753513231695, 0.2858343459457078, 0.23336512758013717, 0.278558020996316, 0.20816753801918042, 0.22526078363573465, 0.17967681241841726, 0.21116592295532932, 0.20090478827720082, 0.19910922298935352, 0.17392134384337254, 0.20260528767445163, 0.20033609687724496, 0.1885097361828686, 0.1879041981187186, 0.21067771907859134, 0.17852356532785674, 0.8787303017029495, 0.14791578240213044, 0.93072054473577, 0.9180986270939291, 0.1724220040290656, 0.16908421208085278, 0.8035641817692991, 0.851686099035303, 0.21413908557133443, 0.21100268209150497, 0.16826945667934867, 0.1568089600348267, 0.10490504972378112, 0.8669208928538691, 0.1991511883178282, 0.183556181632193, 0.22455060587210063, 0.20442514466240058, 0.1941205666320851, 0.2036452677232652, 0.1911029077803592, 0.22339647041539934, 0.19890780329694557, 0.12905097450082137, 0.11564280313674513, 0.12341650935106141, 0.07457649064480554, 0.0966666681848195, 0.08204464169942827, 0.09567162751739122, 0.0892588254208786, 0.0913949005094642]}, "mutation_prompt": null}
{"id": "e38dcdcc-63c0-4034-b282-5d707a2dacdc", "solution": "import numpy as np\n\nclass QuantumInspiredEvolutionarySwarmOptimizationAdaptiveParameters:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.7  # Adjusted for better exploration\n        self.c1 = 1.5\n        self.c2 = 1.4\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def update_parameters(self):\n        self.w = 0.4 + 0.3 * (1 - self.eval_count / self.budget)  # Linearly decreasing inertia weight\n        self.c1 = 1.5 + 0.5 * (self.eval_count / self.budget)  # Increasing cognitive component\n        self.c2 = 1.4 - 0.4 * (self.eval_count / self.budget)  # Decreasing social component\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Adaptive Parameter Update\n            self.update_parameters()\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredEvolutionarySwarmOptimizationAdaptiveParameters", "description": "Quantum-Inspired Evolutionary Swarm Optimization with Adaptive Parameters (QIESO-AP): Combines quantum principles and adaptive parameter tuning to enhance exploration and exploitation in search spaces.", "configspace": "", "generation": 45, "fitness": 0.31305335360258213, "feedback": "The algorithm QuantumInspiredEvolutionarySwarmOptimizationAdaptiveParameters got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.7859050560154356, 0.8290190351196585, 0.7743223471967433, 0.7961440692707631, 0.8015625360353302, 0.8327156380757427, 0.7824450759954393, 0.7795629680110592, 0.7766778126424719, 0.5886425397803504, 0.6345226658713919, 0.5750342383048274, 0.6160553595404002, 0.5860781347131233, 0.6148007961637234, 0.5479815413579171, 0.597838399745234, 0.6156389467764187, 0.15008933720608109, 0.11465295907466244, 0.14497645329831643, 0.14742131726486873, 0.1446999799047366, 0.13211985126322745, 0.14767275804298008, 0.15400936567932366, 0.1422112051337726, 0.15081592656360354, 0.12123063419856062, 0.11422225765788685, 0.14290915498045886, 0.13625599193369364, 0.1075303314408137, 0.10415140316950633, 0.18637180996181402, 0.11409705497452216, 0.98981352283453, 0.9908077127632449, 0.9863838994262921, 0.9896050587750621, 0.9892277590218513, 0.9905846087365145, 0.9639173915512056, 0.9873901790341253, 0.9911763945421154, 0.48202494654520245, 0.6004240931214342, 0.4989042344031245, 0.5838689486594653, 0.5876534509836975, 0.6722966210252884, 0.5969365536351845, 0.6135085321799059, 0.6412720619018344, 0.21564022070860678, 0.3607546963018956, 0.3517576037711224, 0.21068921553641706, 0.21255339931350858, 0.21671775000718008, 0.21607909866150998, 0.37753292474457345, 0.7427408431190174, 0.203486582557995, 0.19333475707228498, 0.17314614521342575, 0.19615525572149006, 0.18307024007547656, 0.19145576299580502, 0.11224349214390494, 0.17953545203156263, 0.21644201271942998, 0.25103472046148223, 0.20844338300196508, 0.2225337053735651, 0.22989495241081237, 0.20228134656652474, 0.24462735308139327, 0.22947237446607704, 0.23478871727657336, 0.2299681819985666, 9.999999999998899e-05, 0.08097542356237986, 0.0804217770504807, 9.999999999998899e-05, 9.999999999998899e-05, 0.009199610586609897, 0.007442630519014393, 9.999999999998899e-05, 9.999999999998899e-05, 0.14668238717834736, 0.11927915428747726, 0.1307601544887802, 0.06875525781575598, 0.057737956535569124, 0.0785112726383621, 0.10561993009013326, 0.1428351404102528, 0.08678527701818006, 0.19418404830278724, 0.06413017136883847, 0.054652066201141714, 0.26368369718110163, 0.08893411216446423, 0.07013602658853868, 0.08875334790741596, 0.2669487060198429, 0.08199078591218167, 0.07122921667445281, 0.09370230940985724, 0.09857050701185477, 0.0514518818275157, 0.09630499053876507, 0.0748829186675175, 0.11056238901608084, 0.15315030763500903, 0.1736105034516393, 0.4953950225164605, 0.4951123613851547, 0.5160541072228879, 0.5045668228017367, 0.548247163683317, 0.5054282614242458, 0.5179146149712914, 0.5205507262916825, 0.5263172690805535, 0.14545761303426719, 0.14472819859993746, 0.10719409715311268, 0.1434090197504847, 0.13546524449494168, 0.1394110851893805, 0.1383366340014307, 0.13164907119847735, 0.08172457441571934, 0.16766769635058987, 0.2365858884511991, 0.3039006050164721, 0.3551340087962883, 0.2818574565996427, 0.17685697419287627, 0.3497848808608114, 0.27411392312591076, 0.18145290562076133, 0.4516321720113651, 0.4009441142015301, 0.27622066623208996, 0.4108982547578536, 0.3457090600377698, 0.3583537138791949, 0.3306705991049178, 0.45453773335518377, 0.42469499138542055, 0.1845371662291263, 0.2316088586213979, 0.15283026577488668, 0.2662082921937948, 0.28290673901804353, 0.2754345739964077, 0.21120819723419582, 0.2021276957454644, 0.2886530238865912, 0.21959592019535001, 0.23826475429464533, 0.2485279579492813, 0.23263896231240744, 0.2329064951084866, 0.28800460553027074, 0.21228960262454766, 0.21599817184080794, 0.297867749517572, 0.19565392200368337, 0.20310769210850388, 0.19136735270579197, 0.18359576109792375, 0.20802882785417665, 0.22910937442859036, 0.1943386165335651, 0.6726192073522386, 0.23782632032152173, 0.8557615987983025, 0.18617647832425233, 0.15089856333392704, 0.8433130621678415, 0.18569387399803894, 0.8372810472384684, 0.12535353875813637, 0.8190766661048032, 0.827580900312414, 0.1681411457443972, 0.16821508961089326, 0.8170335810811857, 0.20880798983165016, 0.20370449404723612, 0.5100151436587332, 0.1554603007979637, 0.1256534588253062, 0.7283090431567566, 0.19359613649216167, 0.1787690898562201, 0.19645603940455636, 0.22335293296317416, 0.20918321783164495, 0.19337948147015938, 0.19280441480098975, 0.20699611559808873, 0.1982306760859457, 0.07952280093625652, 0.09069607109805433, 0.09338367514679813, 0.07970049633057186, 0.08988105099731125, 0.08317306959672388, 0.08383794755346119, 0.07815810108844656, 0.09174838054516854]}, "mutation_prompt": null}
{"id": "4c85989a-1bf1-4363-b295-1c7027929bba", "solution": "import numpy as np\n\nclass AdaptiveQuantumParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Slightly adjusted to enhance diversity\n        self.cr = 0.9\n        self.w = 0.5  # Increased inertia weight for better exploration\n        self.c1 = 1.6  # Fine-tuned cognitive component\n        self.c2 = 1.4  # Fine-tuned social component\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.uniform(0.2, 0.8)  # Adaptive alpha range for better control\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumParticleSwarmOptimization", "description": "Adaptive Quantum Particle Swarm Optimization (AQPSO): Integrates adaptive mechanisms into quantum-inspired and particle swarm dynamics for improved multi-modal search capabilities.", "configspace": "", "generation": 46, "fitness": 0.31956501683663313, "feedback": "The algorithm AdaptiveQuantumParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.8926317990812166, 0.8893978782568283, 0.9053922075694628, 0.8830259259187546, 0.8642116581282059, 0.8898848053501698, 0.8845055115443536, 0.8999635241983703, 0.8729036249824538, 0.5515138190194051, 0.7979782208948579, 0.788362638429392, 0.7194514513275783, 0.7227944406798121, 0.7768650257602352, 0.7018537057998495, 0.7464756548246306, 0.756852716304117, 0.12295874166773424, 0.1215463625537423, 0.14631223251656156, 0.1601155874678014, 0.15625974690351507, 0.7195703160692104, 0.1789073387786695, 0.1369823302267782, 0.1610613150998903, 0.1013188024227537, 0.14643113752422354, 0.12160052137445132, 0.11942458326940941, 0.14517535036222107, 0.07545421222518, 0.12218819484360499, 0.11705942942764191, 0.12805986900843358, 0.9904658286452862, 0.9866576229930193, 0.98578754920886, 0.9898198856216177, 0.9894518625481568, 0.9842504447805086, 0.9768995312450066, 0.9829651193758727, 0.9909099604780937, 0.7372464921783922, 0.702010138347726, 0.581876860135554, 0.5321275725788025, 0.6989344970409912, 0.6989794785720957, 0.6953932955240898, 0.7055253085567095, 0.7350340037277688, 0.17081476602782097, 0.2272870734903487, 0.22697250007921632, 0.27862244791416335, 0.27757401946630045, 0.37870436079376013, 0.32320072139071776, 0.2186036833168009, 0.17154728934510566, 0.2402313496316737, 0.20924938920586156, 0.3369861154023768, 0.2148366309231532, 0.39182657883934524, 0.12168123714236467, 0.2227397089094978, 0.26547196715805443, 0.22347362688304606, 0.23467742819226522, 0.2568989179590717, 0.23643510723969552, 0.2598543226474923, 0.24915287718135581, 0.2576009588691226, 0.2472685809367301, 0.26647443988633235, 0.27258655822141586, 0.007839938859103501, 0.10574792378494657, 9.999999999998899e-05, 9.999999999998899e-05, 0.04699766626173607, 9.999999999998899e-05, 0.043469935183856445, 9.999999999998899e-05, 0.015035233621293664, 0.14002684105640895, 0.028673084427647377, 0.11898389679315824, 0.0484670553678096, 0.09170707172261738, 0.14368271037210656, 0.09808159369735259, 0.08674191702359935, 0.04792779625825516, 0.03759605510676356, 0.13216794096253104, 0.03895721875774594, 0.09676569588177586, 0.09516362825173763, 0.0769714592422539, 0.09844337256985913, 0.11961767281274371, 0.21090842412696198, 0.09849462570045087, 0.07732387380382444, 0.036759063802833, 0.14174269543108653, 0.09188397746528676, 0.08365167619682357, 0.08265852270663476, 0.08237026427354066, 0.1071819707440822, 0.5072024240555701, 0.5636607616345326, 0.5194021764137986, 0.5327951100981765, 0.5499116232469139, 0.6061379177507193, 0.5347799694205645, 0.5568170813949886, 0.590833864021833, 0.15397693921228728, 0.1420636452605768, 0.11427853872847227, 0.10875168591561846, 0.12981083934368476, 0.11612848719297564, 0.11430229305183315, 0.09957319617260652, 0.14190220890816396, 0.1780575552525725, 0.23711301496499193, 0.2185725125762057, 0.19270338059162107, 0.19469298280567882, 0.2658634783124718, 0.2215221835250648, 0.25638737022420643, 0.17900766717441852, 0.26377123911315004, 0.3046233202061871, 0.30486434230793014, 0.2845861945581697, 0.3214004264554383, 0.29669346353775283, 0.22147530894732526, 0.35638473900547785, 0.3764647475139452, 0.23681979512154194, 0.2644525870044778, 0.17716590872559412, 0.35397066205117833, 0.2879608911658176, 0.1927835643742749, 0.2053139043309684, 0.2556239265778656, 0.2446577001309439, 0.28492662456654516, 0.24640426991355158, 0.2535206426484279, 0.29626301319323745, 0.2702262924889174, 0.25827444406737277, 0.2579587654357812, 0.2605783285072746, 0.23558934796829545, 0.19854341485878824, 0.22401839728521789, 0.24998792057529928, 0.2044356420126201, 0.18801145417323373, 0.18678707009119822, 0.2067547254989538, 0.22426977894876332, 0.19189658551864364, 0.6340434645736314, 0.18780759015318815, 0.18648894651229597, 0.17517104286346208, 0.17900404546147985, 0.9134703151556443, 0.9068062111337121, 0.13636624074119186, 0.1726147262240062, 0.2111689948931439, 0.823607743416533, 0.6519260538923133, 0.2108478927135361, 0.5772438597121012, 0.1551611927866814, 0.8306893954389908, 0.10488684172304363, 0.16822505921369024, 0.19478913364177108, 0.19029927693138649, 0.21899601985635297, 0.19144217695420107, 0.20578366707657858, 0.20867069771063618, 0.1864688299707915, 0.18613502292202866, 0.196248453520804, 0.09372069435329122, 0.10323649155028947, 0.08659184285218291, 0.08244877591637245, 0.08476998238843303, 0.09834078650226274, 0.09031710369793167, 0.08549226846854019, 0.08101485896957106]}, "mutation_prompt": null}
{"id": "3740cbc5-14b4-460d-8bcf-8de3fc6aace6", "solution": "import numpy as np\n\nclass HybridQuantumInspiredAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.4\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 1.5\n        self.c2 = 1.4\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def update_inertia_weight(self):\n        w_range = self.w_max - self.w_min\n        diversity = np.mean(np.std(self.population, axis=0))\n        self.w = self.w_max - w_range * (self.eval_count / self.budget) * diversity\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Update inertia weight\n            self.update_inertia_weight()\n\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Adaptive Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridQuantumInspiredAdaptiveSwarmOptimization", "description": "Hybrid Quantum-inspired Evolutionary and Adaptive Swarm Optimization (HQEASO): Enhances global and local search through adaptive weight adjustment and quantum-inspired trial generation based on the population's diversity.", "configspace": "", "generation": 47, "fitness": 0.22159283690444745, "feedback": "The algorithm HybridQuantumInspiredAdaptiveSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.4715237583790951, 0.4458940371629324, 0.42600158522332277, 0.4287790003304699, 0.4041500257503545, 0.42026414724596484, 0.3687936873753569, 0.4657973564360929, 0.42877644480169663, 0.18461466689873463, 0.1340185406404164, 0.098173186446193, 0.1686249931315057, 0.22124580053195897, 0.16278534284619273, 0.17275875191900958, 0.17026841340119137, 0.0311178468248281, 0.10736932943223676, 0.1279653002151404, 0.11182451307646046, 0.11161625731547375, 0.1342922163292124, 0.12938164794156637, 0.10755707799090908, 0.13644936638076977, 0.14592392019803646, 0.08499708522235838, 0.13100525344208713, 0.08845010050679869, 0.109535071132701, 0.09071022917021343, 0.13763843405777976, 0.10811856485737315, 0.0914434523665354, 0.10489883342717277, 0.9899546459448212, 0.9908547065326186, 0.9894014244558723, 0.9896105724166595, 0.9894619599251627, 0.991185551567337, 0.986289696487479, 0.9893385300216636, 0.9914426405809188, 0.23634235760732325, 0.2926625796075165, 0.2436526886706334, 0.216717420729156, 0.2739342871127515, 0.2962259266842654, 0.2247502757485994, 0.26180396439817555, 0.2663830796959582, 0.6849843851420772, 0.45769835723382046, 0.3418576532869889, 0.26910529143114936, 0.2453199824834592, 0.31433537453410887, 0.21601801090841277, 0.24287525566139934, 0.22236217173258988, 0.12575662555624223, 0.13120853590862958, 0.12388047875258357, 0.1238535626272691, 0.13946506763654598, 0.1402471229344735, 0.13390246239293702, 0.13659167160058805, 0.1290184041263437, 0.12742425187194617, 0.13661202175965992, 0.12691705952291799, 0.12937734813724167, 0.13456468563501545, 0.09391686860021475, 0.12661171331286347, 0.16883768490953277, 0.15180421406713518, 9.999999999998899e-05, 0.023313784624131362, 0.013194557769899307, 0.016825184742123356, 9.999999999998899e-05, 9.999999999998899e-05, 0.06780677020156856, 0.022455171605972102, 9.999999999998899e-05, 0.0896800487740298, 0.06373714506326944, 0.09194738707575156, 0.06736499280296471, 0.08224097648399253, 0.04579524651118916, 0.09201491558561226, 0.10857476284183953, 0.16102248362411486, 9.999999999998899e-05, 0.014452585725279299, 0.013320745652145694, 0.030279560259380167, 0.001701002165738652, 0.015280715163056402, 9.999999999998899e-05, 0.012144187994585942, 9.999999999998899e-05, 0.15259111873198672, 0.05713286386375016, 0.04465134439512186, 0.12264509567840154, 0.09288172617169499, 0.08221706539881357, 0.06378341312481717, 0.08893904096746885, 0.09354367230187177, 0.3637403171105247, 0.4041803415160329, 0.40031963737691567, 0.3900828510937464, 0.3554692704141851, 0.38319676835401717, 0.39948707067518685, 0.3772748019394926, 0.39422157031821203, 0.09572051463679476, 0.09480333403407348, 0.09379704299067249, 0.10816742124139345, 0.10373921120590335, 0.10913980069282536, 0.11459593842554461, 0.11169866004163886, 0.10045472079659445, 0.17512690757991245, 0.15144550988754835, 0.26739391794844936, 0.1643851748823465, 0.3008268090163765, 0.26347956046523324, 0.2383013157451509, 0.36075074583620603, 0.20202593516404688, 0.2381385603860129, 0.27315138042520093, 0.26100222418272645, 0.26110560790217985, 0.27475076404134857, 0.2781060006060485, 0.2619955383437117, 0.26591208792840093, 0.2826617113011929, 0.2160112431013299, 0.2066130162045996, 0.16820882654008673, 0.21812191357202626, 0.22745798379649884, 0.22915196254560077, 0.2149683568601869, 0.2168511794130461, 0.21395386162279506, 0.2246134731271, 0.20632924763070337, 0.20844812326682882, 0.20783565912030788, 0.21631393051238224, 0.2104237923942499, 0.2130078137421727, 0.2146087959186862, 0.2121569662580729, 0.18795538773379594, 0.19294321020741034, 0.18944746145398417, 0.1863827976776974, 0.20459823656482867, 0.1962301416627995, 0.2060554433717171, 0.17795508550823635, 0.1830741481303395, 0.49924983115305654, 0.18101765834868067, 0.15231103061382945, 0.18259937905537282, 0.6478724669287728, 0.16199619101787577, 0.5140314156048051, 0.1427286453776112, 0.17082997422980317, 0.48258082787855905, 0.16536090141613546, 0.1213728415168831, 0.20637898062083737, 0.19607665971165478, 0.4709221296715027, 0.15544126070119113, 0.20939010789942558, 0.5670838736363136, 0.1857419337258862, 0.20311955941014248, 0.20203429527429584, 0.19232140950159826, 0.1855106763448342, 0.1989214705364608, 0.1868120306628015, 0.19242423889088967, 0.1868739833477746, 0.09197401361618995, 0.07627871992400193, 0.06826401941953497, 0.08356365051060277, 0.08965399580566535, 0.07845936016566157, 0.09249173493904705, 0.09058316974513292, 0.07185287805271579]}, "mutation_prompt": null}
{"id": "5d9d5c82-f292-4ecf-95db-c9bccf79f198", "solution": "import numpy as np\n\nclass AdaptiveQuantumSwarmMemoryOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.4\n        self.c1 = 1.5\n        self.c2 = 1.4\n        self.memory = {}\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def adaptive_parameters(self):\n        self.w = 0.5 + 0.4 * np.random.rand()\n        self.c1 = 1.5 + 0.5 * np.random.rand()\n        self.c2 = 1.5 + 0.5 * np.random.rand()\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            self.adaptive_parameters()\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Memory\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                velocity_update = (self.w * self.velocities[i] \n                                   + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                   + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                \n                self.velocities[i] = velocity_update\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                    self.memory[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumSwarmMemoryOptimization", "description": "Adaptive Quantum-inspired Swarm Optimization with Memory Mechanisms (AQSM): Incorporates adaptive parameters and memory-based mechanisms for enhanced exploration-exploitation balance in dynamic landscapes.", "configspace": "", "generation": 48, "fitness": 0.24350057625562394, "feedback": "The algorithm AdaptiveQuantumSwarmMemoryOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.5948709063960894, 0.6312075353954774, 0.6106370903923133, 0.5828505471122643, 0.542738909087094, 0.5408666141420895, 0.6245452060394108, 0.6098325367302464, 0.6456451706679045, 0.25732706782068904, 0.24643597757725233, 0.20637626308178159, 0.23570930279064506, 0.28974295490840196, 0.2156384516423706, 0.05047700970139646, 0.3133983841000376, 0.13067910078975675, 0.13051978020274002, 0.13435532445275933, 0.10182879152517688, 0.10768893941040425, 0.1167072117426442, 0.10545317115380581, 0.1113538190496931, 0.13078510992177939, 0.10410946183853298, 0.1097396373268974, 0.10927719908722433, 0.10726519608905838, 0.11617256346255667, 0.08301108852512717, 0.13018182843233428, 0.11797309373133869, 0.09425314431534648, 0.10827491972633163, 0.9934386187408447, 0.9935658119184533, 0.9869731474799891, 0.9859319783488387, 0.9937314156344372, 0.9824546999169967, 0.990062591895044, 0.9902786625370182, 0.9940845761330949, 0.24629592007168755, 0.33972890829529767, 0.2544872295161088, 0.3226123085743112, 0.2988975482468156, 0.2607139529356648, 0.3407262244444591, 0.2960295793893152, 0.2773507005442871, 0.21761506795200902, 0.31104056333640895, 0.31240854450353117, 0.3418576428457253, 0.35158049920176004, 0.2492869484142186, 0.22938865981083756, 0.21277040370214673, 0.22124272701458714, 0.14815742058869874, 0.1507446352227345, 0.13420786116428174, 0.14286891291185133, 0.12775431185819452, 0.11494963498893396, 0.1499745581646783, 0.14024111328576871, 0.1512601185675816, 0.15358582021619072, 0.18895134307521855, 0.17266235749586412, 0.11101241284462138, 0.12416533974035138, 0.13218119852298205, 0.1169878951771317, 0.18657419622143057, 0.16917074852523417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05742511584932741, 9.999999999998899e-05, 0.07485264658235025, 0.09857520430476874, 0.044957159706566774, 0.060390209588322086, 0.1151848068968786, 0.10901356730100109, 0.06887097776657503, 0.0667547685248131, 0.030465131645972865, 0.01666943665483811, 0.08055079145137911, 0.014737445193802934, 0.08806500073257484, 0.15097142792538998, 0.02895682623021789, 0.054877459100528214, 0.08560667953619983, 0.1534135547379607, 0.18672823859627707, 0.08470165014860809, 0.04881642503701933, 0.13607481108456398, 0.13337779362104152, 0.1253557312168896, 0.19296610715842277, 0.06732286509963559, 0.07147489447514255, 0.4419356767300502, 0.43312692408657016, 0.387594519142084, 0.4557856864500305, 0.4452078887085821, 0.4188444628557332, 0.4686187478372338, 0.444066439844511, 0.38163809604708865, 0.10307071069284068, 0.09362125081204198, 0.08863046075534964, 0.11728352242045237, 0.09144973922906297, 0.11531397518237574, 0.09405891605729633, 0.10437263486007164, 0.09410271608864373, 0.18255747956295942, 0.24207089249800662, 0.15226690087870542, 0.1475446138188119, 0.20834759663504787, 0.20608750182086322, 0.17197248054619485, 0.23853692406998772, 0.19888700500939382, 0.2951426702907103, 0.27892471485926784, 0.2707222842458171, 0.31717265719472165, 0.2869730187590157, 0.306494444882509, 0.2785193721258462, 0.3036496167303535, 0.3328688302823706, 0.2537780022112679, 0.2218786055715838, 0.213459547848998, 0.21820199920141714, 0.24252445327449945, 0.19520249833025816, 0.19496878147859953, 0.23314635945220996, 0.23055566034693942, 0.22334405727512407, 0.21662887485089022, 0.2121488086903568, 0.21460000376955934, 0.21741754644698252, 0.1959994366385146, 0.19332090708890537, 0.19702374359841301, 0.21874293470307793, 0.20299721585612152, 0.2072003249364196, 0.18563863592590613, 0.1844935953800002, 0.21544806611090483, 0.18031383160634118, 0.19259128191710317, 0.19701114660990982, 0.20417770198002771, 0.18270425167613558, 0.1833817655885981, 0.18102513048259383, 0.7347620880487999, 0.17805447858938972, 0.544523952451855, 0.8187081866735706, 0.7314475258042468, 0.16899648502230502, 0.1679718524798567, 0.48646624205713085, 0.46937475519977423, 0.6586339063063971, 0.20078630493949046, 0.5273173343665107, 0.21100604742791151, 0.21245536861477898, 0.1259444612618027, 0.1974276174584325, 0.18287871889753038, 0.20438824444791526, 0.20262849009848616, 0.20958011867865778, 0.18834495342400814, 0.21136392455250164, 0.19627002255614046, 0.1899893439271817, 0.0840839019574039, 0.07079667310038984, 0.06525363613598134, 0.08237654998265842, 0.09011429971229823, 0.08106934162309265, 0.08230068060182583, 0.11584857289763217, 0.0916830065488804]}, "mutation_prompt": null}
{"id": "93842ebf-531d-4668-90ac-7aa5e60359bb", "solution": "import numpy as np\n\nclass HybridQuantumInspiredEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.4\n        self.c1 = 1.5\n        self.c2 = 1.4\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridQuantumInspiredEvolutionarySwarmOptimization", "description": "Hybrid Quantum-inspired Evolutionary and Swarm Optimization (HQESO): Integrates quantum-inspired mechanisms with adaptive evolutionary and swarm dynamics for enhanced global and local search efficiency.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.9073329010885507, 0.9145675209697296, 0.9187948790836589, 0.9255401308852773, 0.9175938494171982, 0.9110033947755507, 0.9212590727337374, 0.8992687192599251, 0.9199416188204556, 0.8200090923529961, 0.8178038971508118, 0.8303220601968938, 0.8343003169424027, 0.8342663491448821, 0.8270093173548014, 0.5553575518773137, 0.8191694034885293, 0.8339027058417152, 0.1316140675709252, 0.13213073458341862, 0.14451188302246376, 0.1589877958675786, 0.7934476383452942, 0.12477174875083452, 0.11480663644063893, 0.11809655715094702, 0.11520871352508455, 0.11620231513660839, 0.10948420650618296, 0.11950603563712647, 0.14207656123641843, 0.12905923921079843, 0.11581686635988808, 0.11270254166214944, 0.08053505421102669, 0.12412758015041658, 0.9897875423275959, 0.9902081775104054, 0.9839791065334482, 0.9905128660855812, 0.9891890996997745, 0.9870174763898998, 0.9893545247684542, 0.9891442624742471, 0.991354485290224, 0.783166751155333, 0.5541148154774814, 0.7967759739174025, 0.753986375320755, 0.6607218067221577, 0.7991221687947261, 0.7393454616339614, 0.8197534076762218, 0.7322342320088637, 0.8685514435311351, 0.17023096885508548, 0.2450559213159471, 0.20633524918238422, 0.9346469371428671, 0.2146788920545455, 0.17311421003470528, 0.17737297436059996, 0.22284730335472502, 0.2668250781466398, 0.3375231481413369, 0.2915532237662828, 0.30138992221929917, 0.24105013952598098, 0.19902668300183268, 0.17858058192332882, 0.2342091415610179, 0.2391833055789634, 0.2509571312655492, 0.2477611350872928, 0.2584438764740238, 0.2750658189747959, 0.2884253297619631, 0.2722816508265209, 0.28859979433162186, 0.2867246380574102, 0.2731977331097277, 9.999999999998899e-05, 0.0716938290329372, 0.06930042985859797, 9.999999999998899e-05, 9.999999999998899e-05, 0.13476485277343186, 0.014660802814633778, 0.055139222259306564, 0.009822689474720203, 0.07913366285388079, 0.06678281577736034, 0.11892245732926454, 0.08613429133204842, 0.0697456681224794, 0.049139819071145174, 0.054860777254936655, 0.11069106609651158, 0.18345034024412055, 0.2666926793859442, 0.07408542733494128, 0.0582857896906227, 0.11707473777471133, 0.3109629019522332, 0.08201016567929764, 0.3613861431273625, 0.07585927070207621, 0.13715064150021372, 0.44299211300228714, 0.04956494715093507, 0.0322880585403551, 0.255325570454249, 0.054219177554607034, 0.12539963861978953, 0.06412822923708061, 0.11376678847775568, 0.1061552276567822, 0.5171879482905968, 0.5658245273379796, 0.523095348366744, 0.625726876712883, 0.5660810160298575, 0.5583761324425488, 0.5567111346395144, 0.5380948210572964, 0.5904864816149353, 0.12227622825301587, 0.08645955795978821, 0.07230040508179103, 0.0620558881277129, 0.12432086492134298, 0.12704329473001985, 0.11410928021733946, 0.1104469539513886, 0.10403841472529363, 0.2152823461301464, 0.32689479427218493, 0.1696248782524199, 0.25068165626604466, 0.15978036567318543, 0.15065460541482667, 0.22674307377958836, 0.330337189578634, 0.4041301354613043, 0.41726408941324744, 0.38633350503056996, 0.2994368742205614, 0.32877062481622543, 0.3423439877284733, 0.3162523097742391, 0.27186090113591566, 0.40429069748380664, 0.39930316643493247, 0.16864289382182973, 0.2529191592778205, 0.12299706998069537, 0.26988231430222653, 0.20841344192569167, 0.18896657808948703, 0.29099208479674965, 0.2604136775833785, 0.25257268964493407, 0.2768694069989316, 0.2813838369633983, 0.26137044380030616, 0.2923050341781256, 0.2442475787248426, 0.2542753513231695, 0.2858343459457078, 0.23336512758013717, 0.278558020996316, 0.20816753801918042, 0.22526078363573465, 0.17967681241841726, 0.21116592295532932, 0.20090478827720082, 0.19910922298935352, 0.17392134384337254, 0.20260528767445163, 0.20033609687724496, 0.1885097361828686, 0.1879041981187186, 0.21067771907859134, 0.17852356532785674, 0.8787303017029495, 0.14791578240213044, 0.93072054473577, 0.9180986270939291, 0.1724220040290656, 0.16908421208085278, 0.8035641817692991, 0.851686099035303, 0.21413908557133443, 0.21100268209150497, 0.16826945667934867, 0.1568089600348267, 0.10490504972378112, 0.8669208928538691, 0.1991511883178282, 0.183556181632193, 0.22455060587210063, 0.20442514466240058, 0.1941205666320851, 0.2036452677232652, 0.1911029077803592, 0.22339647041539934, 0.19890780329694557, 0.12905097450082137, 0.11564280313674513, 0.12341650935106141, 0.07457649064480554, 0.0966666681848195, 0.08204464169942827, 0.09567162751739122, 0.0892588254208786, 0.0913949005094642]}, "mutation_prompt": null}
{"id": "a273188d-b18e-4a51-b197-ebd3f9cb29e9", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredGeneticSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.adaptive_factors = np.random.uniform(0.5, 0.9, self.population_size)\n        self.cr = 0.9\n        self.w = 0.4\n        self.c1 = 1.5\n        self.c2 = 1.4\n\n    def adaptive_superposition(self, x0, x1, x2, i):\n        alpha = np.random.rand()\n        return alpha * x0 + self.adaptive_factors[i] * (x1 - x2)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.adaptive_superposition(x0, x1, x2, i)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumInspiredGeneticSwarmOptimization", "description": "Adaptive Quantum-inspired Genetic and Swarm Optimization (AQGSO): Fuses adaptive mechanisms with quantum-inspired genetic and swarm dynamics for improved exploration and exploitation balance.", "configspace": "", "generation": 50, "fitness": 0.3204946552023837, "feedback": "The algorithm AdaptiveQuantumInspiredGeneticSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.9141205030449086, 0.9146025478557831, 0.9248585287461892, 0.9104388310365675, 0.9106130831230881, 0.9223179490882581, 0.8989001488177971, 0.9217625172564631, 0.918391278569107, 0.8071087059152714, 0.8388117311867168, 0.8289296223611081, 0.824512323672347, 0.7883470638607155, 0.8302167826610716, 0.8221945119097099, 0.7779029968751741, 0.7972207135473213, 0.15096841864825183, 0.1083107802419716, 0.09191313962659475, 0.13885544818132856, 0.13082890644586875, 0.12309821071146543, 0.12959092374701142, 0.1795160166450298, 0.12092776843929676, 0.11293881808487716, 0.11524691578245205, 0.13253522545263607, 0.11111623564687156, 0.13300408790261864, 0.09550940351031367, 0.09934362730984525, 0.11010704887078504, 0.1343159943347264, 0.9910774600363179, 0.9838307692222824, 0.9910772807106648, 0.983039813998262, 0.9865043655009803, 0.9868915107539884, 0.9905078426271655, 0.9905833072986012, 0.9879317631679587, 0.6132297621676746, 0.32314490025031806, 0.7556360949872905, 0.3767181936589692, 0.7067628833168906, 0.6479357046388999, 0.6914957733384077, 0.7348958832571916, 0.7864172531428354, 0.1709696428797437, 0.17096282433748766, 0.38160035324725494, 0.1932685310782023, 0.2778814082300871, 0.28113769592103244, 0.2236863142721428, 0.23552917543606544, 0.2374166121897049, 0.24861396491850063, 0.13131158565078827, 0.2165062190621203, 0.13101367041919076, 0.15704622423968162, 0.22520886576455212, 0.13391172106328886, 0.42406678332595804, 0.26686577179770754, 0.32092200217343747, 0.25385747043816365, 0.2526979230442432, 0.2879864136225021, 0.275209104435577, 0.2743946640838614, 0.3023845973956776, 0.2766008132904765, 0.2796986331919751, 9.999999999998899e-05, 0.04182760107959416, 0.1101639277089238, 0.003247519939634902, 0.053729759033534386, 9.999999999998899e-05, 0.06034307279847673, 0.08673234951001174, 0.05136759857713513, 0.0556916082162483, 0.19146031462977153, 0.0938432178162657, 0.07587017732202894, 0.05782632945137922, 0.09684678555426485, 0.06808512346769602, 0.06165001709821771, 0.14997133021181086, 0.13783803580572407, 0.15524534114437505, 0.259532934919661, 0.0810415745649058, 0.08395938793712954, 0.10670599534511005, 0.19775738865850678, 0.38768680665770894, 0.14615747846529326, 0.2093983173899533, 0.22995045533730707, 0.11459984304234927, 0.047530729590536835, 0.17193786751387574, 0.017067778634719755, 0.057547914514791576, 0.07369144244659132, 0.3073491923029694, 0.5611049342939083, 0.5302830340221698, 0.5163425665867931, 0.5691306942795047, 0.549242658209907, 0.5716102943857033, 0.555474735251074, 0.6013327588717733, 0.5418174711632848, 0.07766206551629418, 0.12397342741670614, 0.1325507326319506, 0.12437262955208095, 0.09816292426606776, 0.140242896422607, 0.09203300536066394, 0.11371092233858038, 0.11148804044686111, 0.1809076014256339, 0.30134195147192244, 0.20162347395722613, 0.23032272760807848, 0.2523020468296183, 0.17876778223025436, 0.3605676108287833, 0.16498644517937777, 0.2864089011867811, 0.3750644520083546, 0.3540160224649864, 0.3380882355881635, 0.5820540799719252, 0.39663967574665704, 0.3296408905282773, 0.3545131342178782, 0.30422915151666274, 0.3986934744025209, 0.2316874070251297, 0.238802993572806, 0.3063074658450692, 0.20889800544405357, 0.2998381617635093, 0.3026966119435719, 0.20159564365738747, 0.16451718114751124, 0.28922974779422916, 0.2607615616424428, 0.24125642659647584, 0.246066212409899, 0.2400770906651546, 0.2287965421078496, 0.3275442249218429, 0.2535000814056465, 0.2500735826423993, 0.2711643012600333, 0.2262497432321201, 0.19930719213641412, 0.19401048939039078, 0.19353479483873004, 0.185002513136017, 0.18217269277003856, 0.19932644865348048, 0.22420318474777046, 0.17150701837879445, 0.1878291036344587, 0.21329560905955713, 0.18841837336150857, 0.12340671619318166, 0.18585198151141724, 0.9340805964586691, 0.9115878901977293, 0.1725483636888061, 0.12314900820608565, 0.11329650806591651, 0.867570777610252, 0.1562263249799971, 0.15681693563308874, 0.20613106892965838, 0.16855126069785564, 0.09411517595495411, 0.8141638710685567, 0.12841399028961786, 0.18948372939356128, 0.17646677446389314, 0.18468357677240488, 0.1875613811256942, 0.186326444704754, 0.20613641118892378, 0.17893593974565558, 0.1811902625859293, 0.19399261102297904, 0.09185310520617773, 0.08876393958637419, 0.10116135532136328, 0.09603292094818938, 0.11038609008954825, 0.09398197147839948, 0.09216835246156807, 0.12085331191828241, 0.0909214494718934]}, "mutation_prompt": null}
{"id": "87631360-02cd-4372-8d10-bf54e29bf843", "solution": "import numpy as np\n\nclass QuantumEnhancedDifferentialSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # slightly increased population size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))  # initialized to zero for stability\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # slightly increased mutation factor\n        self.cr = 0.85  # adjusted crossover rate\n        self.w = 0.5  # adjusted inertia weight\n        self.c1 = 1.3  # adjusted cognitive coefficient\n        self.c2 = 1.7  # adjusted social coefficient\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand(self.dim)  # vectorized alpha for dimension-wise control\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedDifferentialSwarmOptimization", "description": "Quantum-Enhanced Differential Swarm Optimization (QEDSO): Combines quantum superposition with adaptive differential and swarm dynamics for improved exploration and convergence.", "configspace": "", "generation": 51, "fitness": 0.3204247433627742, "feedback": "The algorithm QuantumEnhancedDifferentialSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.8239600624585367, 0.8588646218419932, 0.8580114521000292, 0.8460101980333585, 0.8245110923677121, 0.8245552509708107, 0.8574872057497551, 0.8517115344945858, 0.8383067473445147, 0.6343772977300278, 0.6833336338386944, 0.6155802108440943, 0.6468732082366221, 0.7091957310792123, 0.7196838958324882, 0.6690182128727388, 0.6897733832444941, 0.5956760495108302, 0.13156447046832365, 0.13884806722359067, 0.13799826482103184, 0.3429278337151568, 0.12034093074841823, 0.14773090972328917, 0.1536907598654027, 0.1269277799952344, 0.1476042162794785, 0.10724445345372191, 0.13039948589422945, 0.12432252367215957, 0.10314074605325463, 0.11402833112331212, 0.12912001004808704, 0.11125491070466342, 0.10738217864938993, 0.12122064051307557, 0.9920465196291441, 0.9910488718364541, 0.9884511924491051, 0.9914961287704951, 0.9917000604422729, 0.9927422167249393, 0.9927773015917603, 0.9913780488022994, 0.9839906509692001, 0.6499804218993064, 0.6581019203724743, 0.6211939084803559, 0.25221672097026326, 0.6652412861376569, 0.5788794884111038, 0.6530435808765619, 0.6902180900859085, 0.6482758105465087, 0.22400958396779247, 0.836188738444215, 0.22773782781552698, 0.19536118041764128, 0.381591087786047, 0.22045430414442024, 0.24568009268411573, 0.22511962198885982, 0.15133721651688625, 0.21609620353506365, 0.202787527734689, 0.23117003945193426, 0.2290572738005454, 0.2341156276061498, 0.1258038261365908, 0.2119696125848608, 0.21151677993092932, 0.22488892331541688, 0.21513733669566015, 0.2213247100665554, 0.1313910694260385, 0.252135382991289, 0.25385506738664676, 0.2687229648389634, 0.25852883816404115, 0.2477648191256957, 0.25121152168077576, 0.08504206255047031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013651622188512347, 0.02211451733233205, 0.12664652244507602, 0.09152617521390571, 0.04267210023091772, 0.06977143930031549, 0.10223211959141154, 0.06143963728396484, 0.04972106680923394, 0.03938013303500543, 0.05894467603064735, 0.17757325209662045, 0.10047323647474682, 0.14183297441889076, 0.13451219954457883, 0.06024881632916235, 0.1292165802550269, 0.08978764959057295, 0.09191166735004319, 0.19314410167300644, 0.09219583632400585, 0.09432931269292932, 0.2762811361469356, 0.1476550019189804, 0.15908572722345948, 0.09954632674072361, 0.0062621437989246465, 0.140301008489086, 0.10790160093642043, 0.08117478491778762, 0.08088911436650237, 0.08145411562380467, 0.536244511038634, 0.5712821190465313, 0.5266979517758025, 0.5701623496677173, 0.5408751880455285, 0.5698373821920983, 0.5472278528475416, 0.5333433311825304, 0.5282434378078198, 0.12036634510643285, 0.1202338065564329, 0.09308505252452337, 0.1366940467964598, 0.15061255700703113, 0.13079293775426382, 0.1398905746961303, 0.10208181566734398, 0.10245970077734878, 0.3195287847093107, 0.18455178625065038, 0.2697453451406222, 0.1795911747939961, 0.1989236598916615, 0.25356938410561447, 0.2503403394744981, 0.19882777590607315, 0.21164097189295772, 0.3426164328458542, 0.349925551736857, 0.38546935455510134, 0.42333075885206695, 0.37199200850956593, 0.33829507302191886, 0.5228809477829595, 0.4605765334203106, 0.30995204502745544, 0.2945442601332925, 0.2850283780787981, 0.3626645230942751, 0.2727005578607361, 0.2352600826039104, 0.24679663586461142, 0.2069483124763909, 0.2463686740020865, 0.2651849884382754, 0.2793655165977623, 0.23358414661756088, 0.25033138605618976, 0.22687021979275146, 0.2656394492175578, 0.2737673203879908, 0.2594088048647587, 0.25673735952036547, 0.3290940996099291, 0.1763150475041253, 0.20764847669271091, 0.2014996516025096, 0.17947480135002547, 0.19252179858642038, 0.29709625193700573, 0.1923911787177809, 0.20090639585518733, 0.1709125853716632, 0.1881448069348779, 0.186515727020226, 0.158011726904979, 0.9053800773945017, 0.1577305990308494, 0.9092881212489151, 0.8590541075973585, 0.16444127580661405, 0.10850896753833827, 0.8072235878150762, 0.1693827378153262, 0.6208789446894372, 0.854476369151757, 0.21133731369203357, 0.7241296956544581, 0.11265274095869682, 0.25009058151238783, 0.6773782195954852, 0.21388884952707143, 0.20278040472325964, 0.19746954505913794, 0.21649259730682935, 0.1901112248382204, 0.18384523071513703, 0.20012640190679598, 0.1884413484574844, 0.2198979193741193, 0.08451213810213398, 0.0914444852539813, 0.08761674420068777, 0.08477532576952385, 0.09493340517759175, 0.08876114590557316, 0.09569796924788043, 0.09402077249180041, 0.09171930903888281]}, "mutation_prompt": null}
{"id": "fdab956c-50e3-48b5-921c-9962ca624492", "solution": "import numpy as np\n\nclass QuantumGuidedEvolutionaryParticleSwarmFusion:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30  # Increased to diversify the search\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))  # Adjusted initial velocity range\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.65  # Slightly reduced to enhance stability\n        self.cr = 0.85  # Modified for a balance between exploration and exploitation\n        self.w = 0.5  # Adjusted to control inertia\n        self.c1 = 1.7  # Enhanced cognitive component\n        self.c2 = 1.5  # Slightly adjusted social component\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumGuidedEvolutionaryParticleSwarmFusion", "description": "Quantum-Guided Evolutionary Particle Swarm Fusion (QGEPSF): Enhances exploration and exploitation by merging quantum-inspired differential evolution with dynamic particle swarm adjustments.", "configspace": "", "generation": 52, "fitness": 0.3182848678777952, "feedback": "The algorithm QuantumGuidedEvolutionaryParticleSwarmFusion got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.8472993231023984, 0.8399520076727476, 0.8377763001612246, 0.8444211526427515, 0.870482602481232, 0.8059999524176525, 0.8115896329913735, 0.8297429471231593, 0.8017421870336897, 0.6511600284924322, 0.6247802216802383, 0.6061761355889459, 0.6086160919932959, 0.6356140638982452, 0.5893053541862783, 0.6418167786834879, 0.6285029150845303, 0.6068531079794441, 0.10775399939938635, 0.13999223430883234, 0.10694093775875513, 0.16418168708036773, 0.11759301165672364, 0.22081946547092413, 0.11536039085150784, 0.3538041189810953, 0.11569656504179893, 0.10726757860369107, 0.12624122822435824, 0.10023183119971124, 0.11474103208880737, 0.11039462198207328, 0.12229966911103607, 0.13706099629332769, 0.17463046284628125, 0.14264526059091243, 0.9798397914050284, 0.9804269335663607, 0.9901733377776268, 0.9852599752866913, 0.9906981810655704, 0.9904319059082701, 0.9908567260501508, 0.9858157640907285, 0.9863026687309919, 0.6585207073846766, 0.6102405676049965, 0.6061715487568493, 0.595270342621407, 0.6146759858834588, 0.5420051441287483, 0.6313898599326591, 0.6486181806682201, 0.5761618914419537, 0.37249494241934666, 0.22373059096850123, 0.16905243045702822, 0.27032596912246953, 0.8245115931077007, 0.20673798268458898, 0.2239064756137421, 0.3347724687859035, 0.19111690820152727, 0.21300016482909345, 0.19636941905052696, 0.24370227530021316, 0.20298364127880164, 0.2117097988472939, 0.19382130477718973, 0.22362947497742292, 0.22052561662199066, 0.19059009180301623, 0.20903686004602295, 0.2367394148144908, 0.22362614751007837, 0.23750405494349358, 0.27043300403234494, 0.219251986234828, 0.2494371719637446, 0.2315098363192808, 0.23366322754301394, 9.999999999998899e-05, 9.999999999998899e-05, 0.03835057518881291, 9.999999999998899e-05, 9.999999999998899e-05, 0.03231892341688547, 0.038110638651551176, 0.008632277858940829, 0.006886500350817393, 0.12588608284954061, 0.11081749708335353, 0.048735370740356165, 0.048070692130070314, 0.15911055261047258, 0.10279576699744908, 0.06434161482504519, 0.14154837353182614, 0.14465317876053996, 0.11966813970111156, 0.03373505746051797, 0.1722141944288107, 0.0663596746589663, 0.08402851873811468, 0.07860410549574004, 0.13840573225658104, 0.1405918414039885, 0.09653778981938377, 0.10911121542497271, 0.1639906238652713, 0.12525205985081556, 0.22966358648460905, 0.09517352608476726, 0.04486624364956515, 0.10029350203784959, 0.08645730407215646, 0.08011748371544214, 0.49642379710337214, 0.5089875669455032, 0.5208303565794061, 0.5110141549169046, 0.5602005344743819, 0.5203428373851258, 0.5371743480237972, 0.5311573008681032, 0.49823948481440206, 0.13252345326498183, 0.13461585580992508, 0.1037348773000234, 0.17447126645354127, 0.09491495608010869, 0.12236963110896082, 0.0983750950714104, 0.11286403643033405, 0.08933688299411535, 0.2036937747568669, 0.35090678288273913, 0.5165692282848049, 0.24830652027780964, 0.16780372948747024, 0.17812360384109216, 0.17960516501468615, 0.16639285594323827, 0.2214439923767776, 0.3111094180081494, 0.3523828925994362, 0.312168373349341, 0.351117952168545, 0.35552643957345154, 0.45373454467223184, 0.3147996150413864, 0.5772945259413667, 0.4964453621316711, 0.2601388933034101, 0.28917191763342376, 0.3671832219560366, 0.3345266350504559, 0.31433184391961233, 0.244981543717947, 0.3433080967850898, 0.3563173487775704, 0.3238097634610456, 0.22770949050589417, 0.2592438013392121, 0.23171023459444895, 0.2085367363256161, 0.2124295423244673, 0.2524044946563998, 0.2821665728591817, 0.23480911476549182, 0.2704799912092417, 0.24046558817265318, 0.20832423153569102, 0.21840850870360262, 0.21486031494805302, 0.2354404846132171, 0.19470033569487388, 0.2170495016591394, 0.19514495681955935, 0.20780269824532993, 0.8282165886000347, 0.17661000147080264, 0.17656733003691005, 0.8569249967009667, 0.1975510014269356, 0.16985967883230113, 0.16129057557208604, 0.8593160920300413, 0.8568221505835154, 0.8291009559628407, 0.5758473998480809, 0.6638880470180595, 0.20902823711713658, 0.2071756114512513, 0.20855405622041467, 0.16712557316161292, 0.1551614469106396, 0.556937887569158, 0.20596632798410341, 0.19840800246959778, 0.1818224649371124, 0.19407330974315384, 0.19841616069932122, 0.18498650709207698, 0.19596147056458235, 0.18267349445107617, 0.18673773396674753, 0.08513525652863574, 0.08756788893527445, 0.08252316436781892, 0.11275425864715727, 0.08246502206254214, 0.0852577841121025, 0.12955696553087148, 0.07833684520106254, 0.08819719484052879]}, "mutation_prompt": null}
{"id": "3340086e-5530-4a91-98ce-c82ffeaa0ac4", "solution": "import numpy as np\n\nclass QuantumEnhancedAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Slightly increased population size for diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.85  # Adjusted scaling factor for differential evolution\n        self.cr = 0.85  # Adjusted crossover probability\n        self.w = 0.5  # Increased inertia weight for swarm stability\n        self.c1 = 1.7  # Adjusted cognitive component\n        self.c2 = 1.3  # Adjusted social component\n\n    def quantum_superposition(self, x0, x1, x2, x3):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2) + self.f * (x3 - x0)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 4, replace=False)\n                x0, x1, x2, x3 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2, x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedAdaptiveSwarmOptimization", "description": "Quantum-Enhanced Adaptive Swarm Optimization (QEASO): Combines quantum-inspired evolution with adaptive swarm intelligence to improve convergence in diverse optimization landscapes.", "configspace": "", "generation": 53, "fitness": 0.31003678981433797, "feedback": "The algorithm QuantumEnhancedAdaptiveSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.8616436839578503, 0.8636083666851537, 0.8576196548335258, 0.8746872003998357, 0.872065228959116, 0.8774336587756906, 0.875587873034344, 0.8645164122437783, 0.8576379664009394, 0.6913710565688973, 0.7047136468644565, 0.6903739213893648, 0.6877939428172009, 0.6991885305032808, 0.7544472095533028, 0.7017536080890685, 0.6505003503590012, 0.7117813020654835, 0.13615577809846813, 0.3956889845367588, 0.17506313349329217, 0.13147548001441134, 0.1563271394730742, 0.1543403115451858, 0.12482156290079327, 0.13463448783280163, 0.6582238620373151, 0.1478851262052604, 0.1063605831171961, 0.1017744914330202, 0.11446072456536383, 0.1197942259895306, 0.12231153336530043, 0.13980376962290408, 0.10336886715850357, 0.15355483818431637, 0.9879362774945066, 0.9906840509777443, 0.9832521233320828, 0.9909732028870203, 0.9916391924141496, 0.9913287489802733, 0.9877124086679986, 0.9826301416777143, 0.9827859209474132, 0.7026653987768474, 0.6749269362789082, 0.7021468207326902, 0.669803995441174, 0.7326248762921708, 0.7051670694349959, 0.6620081630167669, 0.639534265643736, 0.6852931205953627, 0.22263052493891466, 0.25259853877422933, 0.32897885525196846, 0.19260752333616038, 0.21222268478351392, 0.27674233643232105, 0.23106167737931393, 0.24016960239696183, 0.2350989693952681, 0.21416280100111018, 0.11028190074245359, 0.22653727501159826, 0.20217780784753348, 0.1306631781607681, 0.2337068888277316, 0.2328295941067079, 0.12868547369662842, 0.1305192160939208, 0.23251633185553755, 0.12006982518848286, 0.18764889871393398, 0.15711458295742053, 0.24730766895652434, 0.23049048912511205, 0.25697424099259447, 0.22836470942005638, 0.2480890964394309, 9.999999999998899e-05, 0.02301433800215369, 0.04870402457612544, 9.999999999998899e-05, 0.00010044894351957101, 9.999999999998899e-05, 0.12205873720839677, 0.0010937866887062997, 0.09744989381600977, 0.06654011791523062, 0.06887943426543675, 0.055299358026686396, 0.0651469079155953, 0.06901491469381704, 0.055245426419880506, 0.05435224710136077, 0.14253228582017796, 0.11610223381788587, 0.04860046844287991, 0.1202948631532128, 0.034462090479378094, 0.08709168261894717, 0.14229654766281563, 0.0823746058424869, 0.10564885774908894, 0.2040095891411774, 0.07237379927256848, 0.30458321265630584, 0.043091968267299, 0.12561393709444746, 0.17132776535979044, 0.10287419174692602, 0.08389483768124595, 0.27578460044899755, 0.11709322016653934, 0.08271851093318161, 0.558882659024342, 0.5615508823779596, 0.5190684135873069, 0.5759719397270934, 0.5477151271957934, 0.5866857547869302, 0.6173464443651641, 0.5677920872656108, 0.5369946330651396, 0.11887176370271013, 0.12658316770274758, 0.12625103484596512, 0.12018851796150953, 0.13451589725476987, 0.12317401109654424, 0.06992231643832492, 0.17618506737552542, 0.10830728732750283, 0.19045050845700873, 0.21328155259559212, 0.24949641006237722, 0.1830659922636535, 0.1896455257300902, 0.21026413819533596, 0.27530166921510824, 0.20879086985970685, 0.21027544521628128, 0.44295816501866925, 0.38234823186114064, 0.22339009986843394, 0.3945546661181262, 0.40758383179267366, 0.29112545122115174, 0.37722885247844695, 0.4952213997950936, 0.3178178464583352, 0.2540082389911008, 0.35511439426959523, 0.29463648896991734, 0.2851197406108298, 0.3127973860667207, 0.22629159249294106, 0.32579239338682486, 0.2549304137966637, 0.24741752273635398, 0.24186104399272812, 0.24264376753394867, 0.20990067661631284, 0.2209057948018157, 0.2524369795790663, 0.23799994558900683, 0.2344038484565505, 0.26574123393313664, 0.2347039984933892, 0.2238794346345413, 0.1964740819093821, 0.18816858740023323, 0.18528809895106269, 0.18279276059777838, 0.18394539113586272, 0.18049472756756457, 0.21502904505910214, 0.21054801275066914, 0.1885138553322494, 0.1543839989398995, 0.1871149770433468, 0.9031509301336915, 0.1867370450396787, 0.91827835013543, 0.11458825778480419, 0.16873114767725894, 0.21225791850372655, 0.5632408011680491, 0.16943236468286782, 0.5013417487751906, 0.21081147339084982, 0.12803718673829045, 0.20984070675016708, 0.10477875697156291, 0.16748275603297758, 0.1039953856324406, 0.19336013610774472, 0.1977780924635083, 0.19015947417634038, 0.19115091589006739, 0.18752771361920917, 0.19657167915077767, 0.20438684871542245, 0.19751686318997053, 0.2165388472507057, 0.07653739170808127, 0.10043572220986885, 0.08291239445406628, 0.12724419901694584, 0.09253028092587279, 0.08099179554128, 0.09876496138874113, 0.10532342122840022, 0.09726411807646107]}, "mutation_prompt": null}
{"id": "5c3b9a48-b56a-4786-9ea0-13bbfbdc29f6", "solution": "import numpy as np\n\nclass QuantumEnhancedAdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5  # Slight adjustment for inertia weight\n        self.c1 = 1.6  # Slight adjustment for cognitive component\n        self.c2 = 1.5  # Slight adjustment for social component\n    \n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def adaptive_parameters(self):\n        iteration_ratio = self.eval_count / self.budget\n        self.w = 0.4 + 0.6 * (1 - iteration_ratio)  # Adaptive inertia\n        self.c1 = 1.5 + 0.5 * iteration_ratio  # Adaptive cognitive component\n        self.c2 = 1.5 + 0.5 * (1 - iteration_ratio)  # Adaptive social component\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            self.adaptive_parameters()\n            \n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedAdaptiveEvolutionarySwarmOptimization", "description": "Quantum-Enhanced Adaptive Evolutionary Swarm Optimization: Utilizes adaptive parameter control and quantum-inspired dynamics to synergize evolutionary and swarm search strategies for enhanced optimization performance.", "configspace": "", "generation": 54, "fitness": 0.21270206683012013, "feedback": "The algorithm QuantumEnhancedAdaptiveEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.46500182636125187, 0.5009066963927133, 0.4232740020647563, 0.5053382670850974, 0.4553759802551711, 0.491989688977549, 0.5185072369294007, 0.46841222283482087, 0.4850535768797618, 0.17837569054005376, 0.20006475533335777, 0.17521380308905043, 0.15793528710634708, 0.13766564529326353, 0.16651913100671423, 0.14308791158388334, 0.18901890830673207, 0.03674285678643574, 0.1124615937171708, 0.09486101966945448, 0.09410550565560172, 0.11794883380348165, 0.09760547378801387, 0.10574589251883937, 0.08469503103477072, 0.10682027160237084, 0.08916416359202017, 0.08923751592834028, 0.09714594551997491, 0.07617249856549102, 0.08491463400007648, 0.07344126277227936, 0.07287868163095812, 0.08672312859826636, 0.09191049519377448, 0.0703836193935573, 0.9936334903932711, 0.9940997581629282, 0.9867604410268189, 0.9905904396384426, 0.9937175287387157, 0.9939640013174469, 0.9890537543678882, 0.9932000166248848, 0.9909510635887266, 0.25862529600894146, 0.23880590265633872, 0.26601304193755027, 0.20136609288718377, 0.19831355634400372, 0.24282014244623984, 0.23632779232107237, 0.19424465905511956, 0.23315019806044057, 0.4636441219792373, 0.21665608436383432, 0.3558702930719504, 0.23072043446834012, 0.3381525255258382, 0.22072850695873403, 0.2060298338565547, 0.17376436124277117, 0.2283146590156121, 0.10593562458036299, 0.1109928917715508, 0.11649919465408853, 0.12350954726096064, 0.10141961557494628, 0.09344043374755184, 0.1030553422970939, 0.11956476970764984, 0.09264434577054814, 0.08476336673338114, 0.11121108628578891, 0.10736307887492347, 0.10580554674218234, 0.087044362367235, 0.10764391875346879, 0.10428124319271426, 0.11455557668764582, 0.1615967732002146, 0.0004838285637331907, 0.01365293194356787, 0.02623102763875318, 9.999999999998899e-05, 0.005019559080778002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009485021491080214, 0.05831863652127467, 0.055030731218057016, 0.06652663010603521, 0.09316958669749853, 0.06952301090533652, 0.15422726778993168, 0.046810153575898794, 0.06316935376242327, 0.08836128822898859, 0.04874968258587542, 0.016056285771274048, 0.013577099860945241, 0.027199887805994694, 0.023161295882775823, 0.04665895326218539, 0.0577015709516987, 0.03295961131880254, 0.02914188036227061, 0.051171757938557993, 0.028697354316358337, 0.13230307236223648, 0.10181591484942942, 0.0983482651507307, 0.12713000628283722, 0.07362726245745033, 0.12496509227451369, 0.05691905017521037, 0.35875198224256544, 0.34796830117535293, 0.3667583822772037, 0.3393822910239833, 0.35575851695559946, 0.3383080802417616, 0.3653848082698248, 0.35372671862615224, 0.35532439446722597, 0.10762166894659819, 0.11511001472393034, 0.12754169695614204, 0.06673051408496722, 0.09391565951719671, 0.08449208110772866, 0.09206610306141594, 0.10544059664803407, 0.1034695982075775, 0.15279471874663764, 0.17530900933191462, 0.16184288956448056, 0.1699764776576218, 0.25042159944200215, 0.20280074460882092, 0.17984360726284543, 0.16412611449502257, 0.21509887647929204, 0.24841019348806093, 0.26296011892888704, 0.2501925076557824, 0.2840303842401598, 0.2657504865754714, 0.2717567710788451, 0.29918165755660964, 0.2376306986609662, 0.26550001334449247, 0.17871071606713662, 0.18896755581994817, 0.2154586103194106, 0.17752977171088968, 0.16598565345132232, 0.16567607429075815, 0.17850686067960564, 0.13256897161968495, 0.17405819578234383, 0.18519292013716582, 0.20552143074797347, 0.1945560009311278, 0.18484407513155443, 0.1860755363986205, 0.19695391769042836, 0.17682873334905413, 0.18609832011408, 0.19961028451892593, 0.17036760977226373, 0.32921293611795654, 0.17328962124088576, 0.18118442872167162, 0.16750611725871534, 0.21630456680402887, 0.1813465398723796, 0.17660798887190543, 0.17255161244407569, 0.1921112392467984, 0.17653450293307926, 0.14933522683839728, 0.5015606644238658, 0.1728574632848957, 0.536406495049942, 0.5316471587963124, 0.4355736603115391, 0.14969129789295732, 0.3786753316947956, 0.16631024224560642, 0.30134802789007564, 0.39944269401332344, 0.32440764278990963, 0.46990982802926606, 0.4898163397910672, 0.2048364777235382, 0.20635164757567903, 0.20122913355734162, 0.18404197691681567, 0.19975868993476464, 0.18319819174300978, 0.1934476320324202, 0.17718666389978677, 0.19225040127766024, 0.21900724592172827, 0.1958220177453771, 0.07044359439074999, 0.06808339168645539, 0.07447455885708454, 0.06447890795073563, 0.07746750952352233, 0.07330580506291007, 0.07456595266924082, 0.07187548156999346, 0.08169969265769583]}, "mutation_prompt": null}
{"id": "b2cddaa1-3129-4895-81ac-7826b43a5eb1", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8\n        self.cr = 0.85\n        self.w = 0.5\n        self.c1 = 1.7\n        self.c2 = 1.3\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Adaptive Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedQuantumInspiredAdaptiveSwarmOptimization", "description": "Enhanced Quantum-inspired Adaptive Swarm Optimization (EQASO): Integrates quantum-inspired mutation and adaptive velocity adjustment strategies for robust exploration and exploitation.", "configspace": "", "generation": 55, "fitness": 0.3341446559591801, "feedback": "The algorithm EnhancedQuantumInspiredAdaptiveSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.8940244153252007, 0.8966738218691344, 0.8744770207277256, 0.8835120004836455, 0.8921458371032366, 0.9008132732993803, 0.8977687228874243, 0.8794094941012611, 0.8978389291542891, 0.7395436299384834, 0.7615013201285585, 0.771558645579685, 0.762968565149793, 0.7656844591094196, 0.805002170652161, 0.7863027344043659, 0.72821310546314, 0.8051086785902076, 0.15068677979851963, 0.5603972346253318, 0.1100224209391013, 0.14382837047582475, 0.13660818108133643, 0.1313201650024255, 0.15399105057161833, 0.1404193403471572, 0.18225353955437484, 0.11449958374114577, 0.15873373883747188, 0.11618987644663936, 0.11431264953638054, 0.11109327508860134, 0.1373522778263525, 0.15338986649692377, 0.15374119357667748, 0.15253666885464556, 0.989280255733226, 0.9901301275369284, 0.9881992359395689, 0.9902356779728705, 0.9890156442841117, 0.9843945927568354, 0.9834568331653744, 0.98013209759624, 0.9909514267502821, 0.73326421428174, 0.7379532875673862, 0.7535912091239387, 0.718391908168732, 0.7348447133180716, 0.7568616842363085, 0.7555790150685342, 0.6918066573484155, 0.5265732079303842, 0.3519136453611492, 0.35111651617676376, 0.38693707685468604, 0.19101391860306283, 0.1924332507744433, 0.19334972289786578, 0.2325002873049168, 0.1764592577354075, 0.22273971987877128, 0.3485520725053428, 0.13484295760805454, 0.23426723713695097, 0.3669836713230561, 0.2153707917664538, 0.2862927817593113, 0.16645078716467976, 0.23970597458347054, 0.22472449996298471, 0.25723252359338655, 0.2581684889747258, 0.23851452399402018, 0.2566570361883498, 0.26645839925544, 0.2772287863610966, 0.13183557755790387, 0.24694378483963375, 0.2656242747737635, 0.011942971614676168, 0.05951934087969568, 0.09502566949364277, 0.08351128876439162, 0.039013347618397476, 0.014810183354650341, 0.01601857770352466, 0.013270599191467003, 9.999999999998899e-05, 0.04389968093725072, 0.10081174934267345, 0.08112851716520786, 0.07786404924615375, 0.07503660330528761, 0.07189515007747027, 0.08493164457250646, 0.06457548058677853, 0.13975516256109954, 0.263376330231183, 0.21126095960004299, 0.062176824296545585, 0.09731753069054994, 0.17555918601040832, 0.12564460439385605, 0.09989022800070502, 0.11379283636160287, 0.1502105853981036, 0.16750911311958772, 0.13816640237329902, 0.04989318710794599, 0.1646449349989927, 0.08115890008228055, 0.21942009324511913, 0.18356524110778083, 0.2632100410471905, 0.09856555415828894, 0.5599819179090384, 0.5543368365151438, 0.5307389083623758, 0.6007128235630215, 0.5000122788986379, 0.5539619068615607, 0.5680090435535281, 0.559276098436473, 0.5481447409154175, 0.15975622878503348, 0.13991963768596105, 0.10606635507892281, 0.12111977915867478, 0.10009591833381204, 0.12989538958118196, 0.11473306898004854, 0.1201868524492673, 0.10744682175904852, 0.2735761129950742, 0.3321155639678467, 0.6448167713112984, 0.20822275723107653, 0.5450051933800057, 0.2596249118928785, 0.2344905363218147, 0.18417183278947746, 0.30750893263949675, 0.4008582781664177, 0.3610671561933505, 0.3751071830073994, 0.2292027508334037, 0.42078245363188316, 0.39247604625896126, 0.4335732281761375, 0.46786885271504264, 0.3353318474677214, 0.24140488729539988, 0.24796978084203214, 0.1836879416020688, 0.25362371071910894, 0.2452680959819078, 0.40681279886329924, 0.25327979576773885, 0.2504294404219932, 0.2111740746002586, 0.2422859472622274, 0.21393462110713157, 0.23607421074024582, 0.24279327945012752, 0.24409086658921264, 0.2709805329995413, 0.24134157439283033, 0.24151282251991812, 0.2554019253815585, 0.1847257600754143, 0.19293817768831978, 0.19423316928340018, 0.20375833696713985, 0.19293786691721804, 0.18827123357507147, 0.20485144370995045, 0.1845061231902988, 0.18724110990186604, 0.8713463221210314, 0.1996274537682341, 0.18841078876541206, 0.198415642714575, 0.90067689209415, 0.16617425215925996, 0.15278535033667684, 0.16231545178345697, 0.1661963702418756, 0.21172347873691677, 0.6078399850902056, 0.6934929139629897, 0.2129009212598948, 0.21014220965100938, 0.5279504436830416, 0.779993667082723, 0.8212200897118472, 0.1285003986965395, 0.1930349518343385, 0.22516910542712631, 0.19118853818221726, 0.18672252321002136, 0.20492642133132932, 0.18857042588343298, 0.18829381463597417, 0.22600039199094168, 0.19919220846687602, 0.11061519873334125, 0.08598436770319362, 0.08982279577535734, 0.1005155260277859, 0.10491034252219722, 0.08610791792049166, 0.09938149169954291, 0.09946116337579336, 0.08853636783075469]}, "mutation_prompt": null}
{"id": "98bebfa8-fb5a-4f51-b337-87ac0a1a67f6", "solution": "import numpy as np\n\nclass AdaptiveQuantumEvolutionaryParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.4\n        self.c1 = 1.5\n        self.c2 = 1.4\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def adaptive_parameters(self):\n        # Adaptively adjust parameters based on progress\n        self.w = 0.5 + 0.5 * np.random.rand()\n        self.f = 0.5 + np.random.rand() * 0.5\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            self.adaptive_parameters()\n\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumEvolutionaryParticleOptimization", "description": "Adaptive Quantum and Evolutionary Particle Optimization (AQEPO): Utilizes adaptive quantum-inspired operations with dynamic parameter tuning for efficient global and local search improvement.", "configspace": "", "generation": 56, "fitness": 0.2530384459030058, "feedback": "The algorithm AdaptiveQuantumEvolutionaryParticleOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.5775796940260497, 0.5311188058554923, 0.6003294858809187, 0.6181324040202929, 0.6809825009428447, 0.6651841309732569, 0.5133246464559061, 0.6785398651251708, 0.5923530631770919, 0.12358400970717098, 0.2634158481938682, 0.25253439236363606, 0.28155983987921085, 0.29845912165408295, 0.1664325159133172, 0.24525501267179584, 0.335960605644657, 0.10798635667241474, 0.13449258721051338, 0.12112262041234878, 0.11167428542319702, 0.10348062704387206, 0.16258817374641643, 0.15073476617753112, 0.12985184639708858, 0.12429269450329428, 0.09909401546104313, 0.08902750520572822, 0.11796972373591563, 0.08029774378499621, 0.11039354196520157, 0.15698010651028893, 0.1069982844961953, 0.09068763162329085, 0.1142112251275228, 0.12474803605843299, 0.9927413807087895, 0.991370644171849, 0.9863966848615917, 0.9853207550420089, 0.9894123472589036, 0.982972631405177, 0.9823449546263512, 0.9894947063414653, 0.9944011195557163, 0.3254612403093926, 0.34083314049335967, 0.4065663374666425, 0.3184023436845599, 0.33441652057518456, 0.4275622413206014, 0.3335916972065066, 0.3064716685272346, 0.31789146799070445, 0.219170817648088, 0.21805764318113363, 0.37677086644215796, 0.26030245533891594, 0.4686540495199837, 0.24722387015934622, 0.22377339516489858, 0.3220993825333498, 0.22015456789637566, 0.14379480604952244, 0.16472040930033294, 0.14913405874373564, 0.17829337826697278, 0.14561611874065472, 0.10490449204763408, 0.16576302115619512, 0.1664595915700049, 0.1567287142962116, 0.1864405861764834, 0.18057972979671555, 0.18010098685548404, 0.16938869460766182, 0.1782244264621986, 0.20682882172191275, 0.1463599171704425, 0.19540599568179495, 0.1867156456199508, 9.999999999998899e-05, 0.0003548945500482237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021930312686662012, 0.051295965982324776, 0.004099428039636588, 0.06355411320781024, 0.11820315630158873, 0.14655333707580798, 0.09546357047109555, 0.07302033218360826, 0.05804977097910291, 0.08056587963393136, 0.09762286954270094, 0.1091274616581619, 0.05029364024359162, 0.07040493901527967, 0.10478792847182483, 0.04933874208663602, 0.06261907386328114, 0.1083111476167864, 0.0786991377206514, 0.0634069587237569, 0.048080816955511585, 0.09068338892511962, 0.08855944528771542, 0.049996419049736174, 0.11870528002679603, 0.1586188415364599, 0.07852111152006147, 0.09784524920356996, 0.12529553056270992, 0.05797349644944316, 0.48318933535483, 0.3810425004890986, 0.4786085599199953, 0.4784043950274989, 0.4680421885919439, 0.44113806749279816, 0.4604481230471017, 0.48975799021862854, 0.43618226770972823, 0.12672686846947012, 0.12250241706253351, 0.10989999650462756, 0.12472899022441053, 0.12153464435951244, 0.11633754529782092, 0.11669030103025602, 0.08842150975376939, 0.10039080855881044, 0.22473123043591592, 0.16812124629832692, 0.21039721659329247, 0.16018445094516487, 0.20396129167927524, 0.23233617777271032, 0.20816623724118732, 0.18961438758818494, 0.13658958534201826, 0.3122548084329769, 0.39540411109506024, 0.29844843800259624, 0.2831144857761585, 0.28997081508308087, 0.35287458824781504, 0.3231303549779586, 0.3682390205114898, 0.33670255749856637, 0.3073809632310335, 0.30487443275227877, 0.24707381745440327, 0.21429791137892007, 0.2667124419200265, 0.24409309765948062, 0.23741076528101734, 0.2502231122001839, 0.26414107739656423, 0.2557134250676899, 0.2035370772467816, 0.20563002090645932, 0.21686122524601048, 0.19858702926279925, 0.2218897524337462, 0.25342632462904835, 0.2476294328238654, 0.19277782884901185, 0.1861906500550159, 0.1952245688886377, 0.19075659410391899, 0.20787286939788896, 0.19738878113394243, 0.25592927800570264, 0.20019274672882148, 0.22913178562779102, 0.21578818975554437, 0.7241530057787795, 0.19876758497046232, 0.1539039338937226, 0.17659929887531411, 0.5536959699509254, 0.16670502565571055, 0.21163585269546148, 0.711216993905428, 0.18604201489062067, 0.1675558932103871, 0.47866983429189847, 0.6475501525087739, 0.2048403475718824, 0.6940339502127809, 0.4219341627971891, 0.35314950046322635, 0.21301427748206614, 0.12776254669834763, 0.22740503940141232, 0.18636258676038642, 0.19660742482565985, 0.19208555528752058, 0.1966827024539285, 0.20776446755282074, 0.19848683735137385, 0.19608919574224726, 0.20819789383446374, 0.0938127706551326, 0.08046616369010062, 0.0732991996316783, 0.07916592606631334, 0.08324822093218265, 0.08422108817619789, 0.08554966346913351, 0.10234786627860026, 0.07308037771026954]}, "mutation_prompt": null}
{"id": "abd0f2a8-5ebf-40c2-a632-0c05b2792a5a", "solution": "import numpy as np\n\nclass HybridQuantumInspiredAdaptiveEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.4\n        self.c1 = 1.5\n        self.c2 = 1.4\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2)\n\n    def dynamic_parameters(self):\n        # Dynamically adjust parameters based on progress\n        if self.eval_count < self.budget * 0.5:\n            self.f = 0.8\n            self.cr = 0.8\n        else:\n            self.f = 0.6\n            self.cr = 0.95\n\n    def adaptive_mutation(self, x0, x1, x2):\n        return self.quantum_superposition(x0, x1, x2) + np.random.normal(0, 0.1, self.dim)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            self.dynamic_parameters()\n            # Quantum-inspired Differential Evolution with adaptive mutation\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.adaptive_mutation(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridQuantumInspiredAdaptiveEvolutionarySwarmOptimization", "description": "Hybrid Quantum-inspired Adaptive Evolutionary Swarm Optimization (HQAESO): Enhances HQESO by incorporating adaptive mutation strategies and dynamic parameter tuning for improved convergence across diverse functions.", "configspace": "", "generation": 57, "fitness": 0.33186635607062015, "feedback": "The algorithm HybridQuantumInspiredAdaptiveEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.929443432075441, 0.9316754368958098, 0.9136342954282252, 0.9266820574525201, 0.9202340328200814, 0.9257338359044651, 0.9188990572136355, 0.9169560195214108, 0.9156828714371134, 0.8066750380921481, 0.8394477216602119, 0.7831281310767522, 0.8282045020678752, 0.8325054926587417, 0.8043603447941793, 0.8294959657645863, 0.811979435272896, 0.7898667751520344, 0.1910144651414013, 0.1598291066918599, 0.15592796316295698, 0.15509226311572732, 0.15752001961962392, 0.10822889028124083, 0.13509775793916956, 0.15732170547758217, 0.13034092942660358, 0.09388020654249407, 0.11658488252324473, 0.11111033088670896, 0.1119845430374018, 0.1338802275740716, 0.1403789808598871, 0.09600685520310603, 0.09502805690168281, 0.11458680853515268, 0.9892286423567271, 0.9861331123049764, 0.9894753546642234, 0.9865745961689654, 0.9828728143601941, 0.9854805875910244, 0.9905994261973515, 0.9866240518729618, 0.989359155776545, 0.7832594306314826, 0.8085855634916328, 0.7707522777974871, 0.3776333999885324, 0.4331311130236657, 0.44232475430423324, 0.6646289881878082, 0.4667944407373761, 0.7782505108684045, 0.22620306671560153, 0.22551697592251663, 0.22710221851613654, 0.3378919451759508, 0.2664795222469193, 0.35739439902409775, 0.17579562120961878, 0.8608591002327519, 0.17159257502138936, 0.3231790922216745, 0.2583503969069144, 0.22601274443779928, 0.1347824602114731, 0.2407942874105954, 0.1342548536637862, 0.25622092004353814, 0.22890075418837608, 0.23620527424637505, 0.24356244281856432, 0.13485250102146218, 0.2524088095399627, 0.26162681039562463, 0.25929593685434715, 0.2678545035270046, 0.27447248681659664, 0.25730195137229817, 0.2859454799837893, 0.12278090705700784, 9.999999999998899e-05, 9.999999999998899e-05, 0.020046182510696786, 0.07860981328704564, 9.999999999998899e-05, 9.999999999998899e-05, 0.013552927123665515, 0.04153412617264385, 0.10045679174155608, 0.06769097772719834, 0.08090013629857462, 0.08353680284978271, 0.06109963897021675, 0.08911976578611525, 0.0784057254821946, 0.10156521784329509, 0.13855267266085225, 0.051023498805919054, 0.35812826827140676, 0.21080679496391153, 0.21099464528043999, 0.12432100067122343, 0.25186965464885935, 0.10651814815682248, 0.07633004603473581, 0.12695656424826174, 0.1449844661779689, 0.1262132493894893, 0.06969843118381491, 0.019414098744384822, 0.11116623599758035, 0.15036177615345947, 0.10506728662330866, 0.09563069028258975, 0.08409675755032131, 0.5479022656520338, 0.5238472134313211, 0.5315976153145631, 0.5498576781907014, 0.5487382645612604, 0.5795131940163901, 0.5683714269435246, 0.5376808893188081, 0.5484694905918422, 0.08726523340966341, 0.12336364885007256, 0.14456975853876652, 0.10593609982879226, 0.14443878150606215, 0.1569090182071332, 0.09272423091791393, 0.08647306788731768, 0.11396491149895305, 0.37288744912482474, 0.3258395633574429, 0.14496858662620615, 0.2087908420293595, 0.22540281347540558, 0.22634278311742473, 0.22873710107830292, 0.27131653336888184, 0.38538577763974924, 0.24112710815396188, 0.42489908161491907, 0.3602060864906781, 0.3196438842884355, 0.24320277630643805, 0.463979306338011, 0.5085269382381866, 0.4231740623717527, 0.2777636072621149, 0.30427398805207184, 0.20312802414740816, 0.2579863948461111, 0.329798410748795, 0.22456466435928124, 0.2706910007945076, 0.18236904343639448, 0.16746359884458084, 0.24628755802377733, 0.28753341264308274, 0.2895756033707092, 0.23908156112044443, 0.2314411032890198, 0.2467921792584168, 0.27802830852389115, 0.24678933437340422, 0.2531011249868911, 0.318573945996111, 0.1880686470331262, 0.22744913293401336, 0.2150094149381676, 0.1939994862541845, 0.18615731534785118, 0.20405121851338892, 0.19332208791776795, 0.2107583061918834, 0.8560018471431016, 0.18770394407721458, 0.1727363946890731, 0.18772547951073926, 0.2001926993784915, 0.16962209018261876, 0.9363671163827948, 0.9351520714739986, 0.16560684699939798, 0.1727956885806572, 0.6274815308493187, 0.7069860549103233, 0.6006091186122517, 0.2120446659233789, 0.21245829298133623, 0.6715272402494588, 0.1128080627044401, 0.15703431645887245, 0.8016119684150402, 0.19615243973395347, 0.20247712781100557, 0.21392495245044418, 0.2048236541712396, 0.21430464707893204, 0.19339932694381645, 0.19230917464271846, 0.22493082251451035, 0.21523388687755052, 0.0983504058706769, 0.11211338711309404, 0.09637651619951304, 0.0972688158791214, 0.0877738761278204, 0.09270027432272987, 0.08371282648199918, 0.10127616928381244, 0.10261013578386702]}, "mutation_prompt": null}
{"id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "solution": "import numpy as np\n\nclass QuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5  # Adjusted inertia weight for better convergence\n        self.c1 = 1.6  # Co-evolutionary factor\n        self.c2 = 1.2  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2  # Adjusted superposition for co-evolutionary interaction\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredCoEvolutionarySwarmOptimization", "description": "Quantum-Inspired Co-Evolutionary Swarm Optimization (QCESO): Introduces co-evolutionary dynamics with quantum-inspired updates to improve exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": 0.354984101891484, "feedback": "The algorithm QuantumInspiredCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "da969ca3-9768-4474-be6a-af8ec9501702", "metadata": {"aucs": [0.9026689098698047, 0.8918110522253344, 0.8993585625678288, 0.9007293153025685, 0.9103368119888468, 0.9152176507081792, 0.9011812949355866, 0.8946170577852918, 0.9034835233386136, 0.7943143893490382, 0.7375633793221008, 0.8130148197897451, 0.8087073114216992, 0.7723839526168574, 0.808272154270665, 0.7687340813982092, 0.7990324091638275, 0.7827370936042723, 0.160902825364873, 0.15892939536803385, 0.09320032942753564, 0.11724631514556016, 0.11048951154619846, 0.14652408932323413, 0.1168663886089164, 0.13411251402806612, 0.13140944807648247, 0.18584842590008643, 0.0832905405124249, 0.0824658898018511, 0.16071741325608435, 0.15912921044715023, 0.1041705768290263, 0.09956062200314841, 0.10068051821507285, 0.14369058368050847, 0.9929931593376271, 0.9889893680320351, 0.9866844010713257, 0.9860517239520872, 0.9856028604708126, 0.986113978553438, 0.9866638516592235, 0.9864157320268373, 0.9894241340455082, 0.7973515227092567, 0.8209386837891599, 0.7293913381494185, 0.82747554766647, 0.8312914106195766, 0.7788674457720964, 0.0877511466657237, 0.7599538148097049, 0.8321876859624798, 0.9064684438691055, 0.17092093371864125, 0.17123282416342644, 0.19306856064166, 0.2789565536435834, 0.1170599976943193, 0.1524492416900921, 0.17946211549586355, 0.4043175412639375, 0.2968405621343604, 0.30357306478479285, 0.29453689757761525, 0.1336284366129845, 0.3071199686823948, 0.10693181005834884, 0.2868068888981905, 0.3055442542769874, 0.2989931310837167, 0.28671478570928843, 0.2759189930873165, 0.2880986771662145, 0.30350605882496073, 0.3233322704393832, 0.3017112208127053, 0.3243908690844298, 0.3038586885837484, 0.3050838399196455, 0.012802259425667817, 0.06015843001517329, 9.999999999998899e-05, 9.999999999998899e-05, 0.05029717966337466, 9.999999999998899e-05, 0.027212938783946594, 0.01823718920301942, 0.0028864825761336643, 0.08925450485395892, 0.039241256296895566, 0.21031626255566183, 0.058775820500466036, 0.06347923626785212, 0.10916071135981764, 0.04883972412964199, 0.10141506364853792, 0.04552867246939729, 0.07486661166660868, 0.11187638421507762, 0.04093080079823397, 0.12492230439002139, 0.31394754806359515, 0.21053734453599382, 0.11729044331777405, 0.24003081517808933, 0.07730258774207954, 0.16196565608329916, 0.06674296800571011, 0.13068576486509498, 0.19543538330667787, 0.06152327391408541, 0.08816866279697555, 0.0841244031729188, 0.06111499607558979, 0.27529656625415533, 0.6113960737733211, 0.6042206762102539, 0.5494345518315911, 0.5630873925920346, 0.5960696462860832, 0.4930479295341429, 0.6029189630220181, 0.5761165811795408, 0.5895858486679801, 0.06837424524755187, 0.07978236064258215, 0.11172365549733154, 0.07247624609486447, 0.08864106140646888, 0.13129863025648902, 0.11264388502044564, 0.10703212778769611, 0.09289367122702585, 0.8327031289472442, 0.8154238806532796, 0.6578229602721019, 0.337587143847744, 0.29469925572327493, 0.29647170060245875, 0.21420169204834238, 0.2581494753136222, 0.16463596888265786, 0.4518292794245705, 0.44575665861494806, 0.5880567462992835, 0.4233877463630846, 0.6316199533482251, 0.365481598593386, 0.472748932117405, 0.49908680814752693, 0.6580504815373243, 0.2998559532116193, 0.3320100853953951, 0.30023327522685084, 0.26196397496892243, 0.33654285819340946, 0.384788579004921, 0.17485442445623378, 0.2736222171342534, 0.25038850736501306, 0.2406989245166422, 0.2947481511633847, 0.27085122845996645, 0.21539031917140639, 0.2054001756208188, 0.22116095555631132, 0.2401845324119103, 0.2338637966875835, 0.22862870578242855, 0.19138839319345402, 0.19072238204707448, 0.19535424646964383, 0.203480061748873, 0.2040424882277837, 0.1903545257934971, 0.21197205347399706, 0.7949534713843694, 0.20088963655609482, 0.9239141918865942, 0.18856300723922959, 0.1542682082761586, 0.18863752838243886, 0.17256065688354616, 0.9471489171632774, 0.9363523835355082, 0.9377604717816099, 0.17763900865424764, 0.21210681638229245, 0.2128761175437639, 0.8447932956591122, 0.21286155583470723, 0.21268677557624438, 0.9419547020142618, 0.8397269523571729, 0.1686899757961191, 0.09480352550621429, 0.22610756666410448, 0.22606058818825037, 0.1945052435221174, 0.20636722849887223, 0.2384334483295928, 0.21989694815745053, 0.1917144484184975, 0.21838743595773558, 0.18477734439506677, 0.09868073450030024, 0.12451411233696963, 0.07960739216636248, 0.10476690052657267, 0.09928809029942198, 0.13863876245974838, 0.0981448398186503, 0.09668022881175298, 0.1131086762660809]}, "mutation_prompt": null}
{"id": "6519860b-9259-4345-9a0d-7799cfea3721", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Slightly increased mutation factor\n        self.cr = 0.85  # Adjusted crossover rate for better diversity\n        self.w = 0.4 + np.random.rand() * 0.3  # Randomized inertia weight for dynamic adaptation\n        self.c1 = 1.5  # Adaptive co-evolutionary factor\n        self.c2 = 1.3  # Adaptive co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.beta(0.5, 0.5)  # Adjusted to beta distribution for better balance\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization", "description": "Adaptive Quantum-Inspired Co-Evolutionary Swarm Optimization (AQCESO): Introduces adaptively tuned quantum-inspired dynamics for enhanced exploration and exploitation balance.", "configspace": "", "generation": 59, "fitness": 0.321742891036845, "feedback": "The algorithm AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.9097019323710661, 0.775569789503457, 0.8962886949394314, 0.9116409087268595, 0.8296383412845775, 0.8965803953216113, 0.9006969973783009, 0.8211208974868422, 0.884006117436878, 0.7817795840453085, 0.5529447880290518, 0.7698187781240405, 0.8130858759986597, 0.523631684825442, 0.6962897734090601, 0.8144087553000581, 0.6352890764714374, 0.714272100017447, 0.09655217658569326, 0.11356235056622355, 0.1315431958325758, 0.1597338829594528, 0.13688902939936576, 0.14186066339508674, 0.11672241131759586, 0.11090125226828551, 0.1453567866141211, 0.09202628939868851, 0.132390242111614, 0.12228504398173012, 0.1438716633756727, 0.14860713022800587, 0.1323004975805928, 0.03614800408941943, 0.10879893258372764, 0.1553648073818673, 0.9872299055892605, 0.9854741270614898, 0.9905618962786937, 0.969051468549229, 0.9889831655382553, 0.9906061389588887, 0.9861341710113205, 0.986759379560239, 0.9926965849564452, 0.8330552710795618, 0.05953357363667344, 0.8095775398243527, 0.8223928987425043, 0.15168272462489962, 0.78086250958621, 0.08854514890319276, 0.6101240179916644, 0.08973570468346914, 0.9203126925426061, 0.168033323018424, 0.22876798102171592, 0.21363320833108224, 0.20546463258952918, 0.20905622982091476, 0.40448063745643337, 0.2462239433357355, 0.3633445421163666, 0.2902037454877926, 0.22459732807660426, 0.13257205678105655, 0.13419478307376376, 0.20695419881676036, 0.13023825795966115, 0.3011096994889917, 0.2107791976487834, 0.2993895036864206, 0.2818078413481828, 0.1314484145896706, 0.27573855618153, 0.3303557924301763, 0.12893124983479998, 0.3223699462978602, 0.31642527197628656, 0.28283044847295513, 0.2987536887042349, 0.1254768875128417, 9.999999999998899e-05, 0.005785159365226722, 0.037203578948223015, 0.0037789077558103568, 0.1378539013885287, 0.005431545035787577, 0.058120086723259745, 0.12171945918571414, 0.02561515253624802, 0.0636836766957053, 0.06000833208408152, 0.0886554983548149, 0.0008747032161989798, 0.026957006505831105, 0.06145742452900416, 0.07936571220961564, 0.03879034880655652, 0.11152443361226383, 0.053632028360038775, 0.1059096840310807, 0.08020310742045145, 0.13603414399701574, 0.07898890319825735, 0.10402440986849726, 0.08688386429236383, 0.36162782049016773, 0.09403713245855616, 0.17138421438022722, 0.03932237390626647, 0.02391902671592483, 0.04535310211061838, 0.09863441552438768, 0.3391854248679661, 0.055833022244416886, 0.3368963677044632, 0.5915932285779082, 0.5086335820751421, 0.7026371257311677, 0.5776792869078426, 0.2086804894075016, 0.5930222735964903, 0.5864404880780906, 0.5747828960876784, 0.5809837715240339, 0.08072255831726194, 0.07106694631996091, 0.12311083224552954, 0.10139036285445213, 0.12642185794170435, 0.1886802850941237, 0.08823717648985363, 0.1298542846653572, 0.06673104807681907, 0.18576651137274225, 0.21749581917319516, 0.2648523380825918, 0.3094398902697575, 0.2675723295848883, 0.289492607702066, 0.3250093520650946, 0.29779684173101284, 0.8035130115380658, 0.18994466239518248, 0.38656451554996196, 0.49970680587927085, 0.6462857761828389, 0.3936814313872473, 0.4707206302453778, 0.24244850210003577, 0.5346820840339718, 0.4437543759377922, 0.14170028112539568, 0.39788038426671357, 0.2724439599693932, 0.3008761198644575, 0.23543849891713775, 0.26813786907182535, 0.13855692468360126, 0.21288362585882958, 0.13835485769030043, 0.2786205303389766, 0.25071454673475624, 0.22695600914820935, 0.2831719025762709, 0.22062173216443703, 0.2313303300041405, 0.2630034376330844, 0.23242913734612747, 0.1971343378620487, 0.17910614132004743, 0.21810747496014338, 0.18719376850072944, 0.19901832706247047, 0.17988038936554296, 0.19992350383498048, 0.213972208090897, 0.21610362059119148, 0.21294972597036244, 0.18906653719955369, 0.16532279515956128, 0.17751873924344275, 0.9486776902552119, 0.19965407258994405, 0.1692705450560159, 0.1770719810881637, 0.8695205270436458, 0.16843524747353622, 0.8418565034515926, 0.7101028437532086, 0.21197898692820638, 0.21306853451230168, 0.16841788166116056, 0.15322810666738096, 0.8667069970129, 0.7688026142823976, 0.8219159675469999, 0.22429559823312806, 0.1958377448639943, 0.23627039358186597, 0.2319029438311555, 0.18824229936349646, 0.20058728587704577, 0.21957622792110765, 0.1982413197612839, 0.23443895213442678, 0.10193246942957734, 0.10016749100701472, 0.1055107140575865, 0.08126092602411006, 0.13135383755802865, 0.18548854447185226, 0.08269235788445972, 0.09299571434636078, 0.10217434447237561]}, "mutation_prompt": null}
{"id": "692617db-4a62-4306-9261-a5200466c078", "solution": "import numpy as np\n\nclass QuantumDifferentialParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5  # Adjusted inertia weight for better convergence\n        self.c1 = 1.6  # Co-evolutionary factor\n        self.c2 = 1.2  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2  # Adjusted superposition for co-evolutionary interaction\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Dynamic Adaptation\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumDifferentialParticleSwarmOptimization", "description": "Quantum Differential Particle Swarm Optimization (QDP-SO): Combines quantum differential evolution with particle swarm optimization using adaptive acceleration coefficients for dynamic adaptation.", "configspace": "", "generation": 60, "fitness": 0.354984101891484, "feedback": "The algorithm QuantumDifferentialParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.9026689098698047, 0.8918110522253344, 0.8993585625678288, 0.9007293153025685, 0.9103368119888468, 0.9152176507081792, 0.9011812949355866, 0.8946170577852918, 0.9034835233386136, 0.7943143893490382, 0.7375633793221008, 0.8130148197897451, 0.8087073114216992, 0.7723839526168574, 0.808272154270665, 0.7687340813982092, 0.7990324091638275, 0.7827370936042723, 0.160902825364873, 0.15892939536803385, 0.09320032942753564, 0.11724631514556016, 0.11048951154619846, 0.14652408932323413, 0.1168663886089164, 0.13411251402806612, 0.13140944807648247, 0.18584842590008643, 0.0832905405124249, 0.0824658898018511, 0.16071741325608435, 0.15912921044715023, 0.1041705768290263, 0.09956062200314841, 0.10068051821507285, 0.14369058368050847, 0.9929931593376271, 0.9889893680320351, 0.9866844010713257, 0.9860517239520872, 0.9856028604708126, 0.986113978553438, 0.9866638516592235, 0.9864157320268373, 0.9894241340455082, 0.7973515227092567, 0.8209386837891599, 0.7293913381494185, 0.82747554766647, 0.8312914106195766, 0.7788674457720964, 0.0877511466657237, 0.7599538148097049, 0.8321876859624798, 0.9064684438691055, 0.17092093371864125, 0.17123282416342644, 0.19306856064166, 0.2789565536435834, 0.1170599976943193, 0.1524492416900921, 0.17946211549586355, 0.4043175412639375, 0.2968405621343604, 0.30357306478479285, 0.29453689757761525, 0.1336284366129845, 0.3071199686823948, 0.10693181005834884, 0.2868068888981905, 0.3055442542769874, 0.2989931310837167, 0.28671478570928843, 0.2759189930873165, 0.2880986771662145, 0.30350605882496073, 0.3233322704393832, 0.3017112208127053, 0.3243908690844298, 0.3038586885837484, 0.3050838399196455, 0.012802259425667817, 0.06015843001517329, 9.999999999998899e-05, 9.999999999998899e-05, 0.05029717966337466, 9.999999999998899e-05, 0.027212938783946594, 0.01823718920301942, 0.0028864825761336643, 0.08925450485395892, 0.039241256296895566, 0.21031626255566183, 0.058775820500466036, 0.06347923626785212, 0.10916071135981764, 0.04883972412964199, 0.10141506364853792, 0.04552867246939729, 0.07486661166660868, 0.11187638421507762, 0.04093080079823397, 0.12492230439002139, 0.31394754806359515, 0.21053734453599382, 0.11729044331777405, 0.24003081517808933, 0.07730258774207954, 0.16196565608329916, 0.06674296800571011, 0.13068576486509498, 0.19543538330667787, 0.06152327391408541, 0.08816866279697555, 0.0841244031729188, 0.06111499607558979, 0.27529656625415533, 0.6113960737733211, 0.6042206762102539, 0.5494345518315911, 0.5630873925920346, 0.5960696462860832, 0.4930479295341429, 0.6029189630220181, 0.5761165811795408, 0.5895858486679801, 0.06837424524755187, 0.07978236064258215, 0.11172365549733154, 0.07247624609486447, 0.08864106140646888, 0.13129863025648902, 0.11264388502044564, 0.10703212778769611, 0.09289367122702585, 0.8327031289472442, 0.8154238806532796, 0.6578229602721019, 0.337587143847744, 0.29469925572327493, 0.29647170060245875, 0.21420169204834238, 0.2581494753136222, 0.16463596888265786, 0.4518292794245705, 0.44575665861494806, 0.5880567462992835, 0.4233877463630846, 0.6316199533482251, 0.365481598593386, 0.472748932117405, 0.49908680814752693, 0.6580504815373243, 0.2998559532116193, 0.3320100853953951, 0.30023327522685084, 0.26196397496892243, 0.33654285819340946, 0.384788579004921, 0.17485442445623378, 0.2736222171342534, 0.25038850736501306, 0.2406989245166422, 0.2947481511633847, 0.27085122845996645, 0.21539031917140639, 0.2054001756208188, 0.22116095555631132, 0.2401845324119103, 0.2338637966875835, 0.22862870578242855, 0.19138839319345402, 0.19072238204707448, 0.19535424646964383, 0.203480061748873, 0.2040424882277837, 0.1903545257934971, 0.21197205347399706, 0.7949534713843694, 0.20088963655609482, 0.9239141918865942, 0.18856300723922959, 0.1542682082761586, 0.18863752838243886, 0.17256065688354616, 0.9471489171632774, 0.9363523835355082, 0.9377604717816099, 0.17763900865424764, 0.21210681638229245, 0.2128761175437639, 0.8447932956591122, 0.21286155583470723, 0.21268677557624438, 0.9419547020142618, 0.8397269523571729, 0.1686899757961191, 0.09480352550621429, 0.22610756666410448, 0.22606058818825037, 0.1945052435221174, 0.20636722849887223, 0.2384334483295928, 0.21989694815745053, 0.1917144484184975, 0.21838743595773558, 0.18477734439506677, 0.09868073450030024, 0.12451411233696963, 0.07960739216636248, 0.10476690052657267, 0.09928809029942198, 0.13863876245974838, 0.0981448398186503, 0.09668022881175298, 0.1131086762660809]}, "mutation_prompt": null}
{"id": "a6145991-4266-4fb2-9c8c-1087e62c711d", "solution": "import numpy as np\n\nclass HybridParticleSwarmDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Increased scale factor\n        self.cr = 0.85  # Adjusted crossover rate for higher diversity\n        self.w = 0.6  # Enhanced inertia weight for dynamic balance\n        self.c1 = 1.7  # Increased cognitive component\n        self.c2 = 1.1  # Reduced social component for exploration\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridParticleSwarmDifferentialEvolution", "description": "Hybrid Particle Swarm and Differential Evolution with Quantum-Inspired Co-Evolutionary Dynamics (QCESO+): Enhances exploration and exploitation by integrating quantum superposition with adaptive diversity-driven dynamics.", "configspace": "", "generation": 61, "fitness": 0.3396839454786828, "feedback": "The algorithm HybridParticleSwarmDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8672620081958478, 0.8830196612871902, 0.8672501764678398, 0.8780350226790378, 0.8860199696792785, 0.8734585454506464, 0.8644083835826546, 0.8741169071679014, 0.890765972542787, 0.7147458304220231, 0.6931026146480697, 0.7433432929423683, 0.061309497743435526, 0.7140732313470839, 0.7313467155026255, 0.7065116506232325, 0.7393493054706498, 0.6999177750592572, 0.15542371605670902, 0.15855372645400656, 0.1422265787046363, 0.10988881917630022, 0.15727621741949627, 0.1427396892624636, 0.14281354673522195, 0.1560106595733569, 0.08554547563360371, 0.08137776971043309, 0.09129588436585523, 0.10780415524018339, 0.1403067180226213, 0.15026408678389802, 0.10758212376221421, 0.10341687714869185, 0.09319836507774093, 0.15121924943405352, 0.9927041832132122, 0.98974692472561, 0.987097550539811, 0.9859170812908806, 0.9867094748463057, 0.9841593910759341, 0.9893541778051089, 0.9866577900146503, 0.9907535818405454, 0.7426000874409738, 0.7658388268587756, 0.7565754420077081, 0.715813658572964, 0.7678895023993466, 0.7705061224423547, 0.7279858943714974, 0.6670356605997587, 0.7407531111133279, 0.22775971933718053, 0.8754503297664642, 0.17096446914163477, 0.1903368657409662, 0.27653981476724343, 0.1589391782149685, 0.8982188015590056, 0.3899823514395727, 0.17757872248183426, 0.2594126902606241, 0.25535074495166243, 0.23961091229854314, 0.2762650707166169, 0.13165540747668913, 0.18033744403240526, 0.24297291224697903, 0.27378875432564787, 0.24773174724145042, 0.2483731751985897, 0.26606365396803733, 0.2672651852540461, 0.13221164462036072, 0.2861360501219664, 0.30152264506926507, 0.2728971107835376, 0.1323571919885841, 0.2901920729031796, 9.999999999998899e-05, 0.061054175461704996, 0.0001425328504434109, 9.999999999998899e-05, 0.01706696422342624, 0.0032739366649029433, 0.023664241671895403, 0.11259865810751235, 9.999999999998899e-05, 0.07785226818154001, 0.11678684888402935, 0.09778644519254431, 0.05761064372765812, 0.003544838519964122, 0.11212878305279861, 0.09919419371017046, 0.20478988684251986, 0.035139372146386294, 0.03552149580582975, 0.11725830331789511, 0.2043509999152714, 0.14520026543533426, 0.07589443024427833, 0.1535129962618934, 0.1382311585539595, 0.43276940744091386, 0.0702632660835456, 0.15112431443379426, 0.10436351150657464, 0.14991262297323338, 0.20060592625557938, 0.05302408057965091, 0.19990935887992733, 0.0818718405404798, 0.18627538847797798, 0.08371027077920279, 0.5362345144385938, 0.5444394752713123, 0.6619034030027628, 0.6014154829402505, 0.5552693617586629, 0.5658564979748808, 0.5614557653523137, 0.6121796843814156, 0.5707482312178291, 0.09626374208970301, 0.11204315748925742, 0.1053409481577453, 0.1410499472420914, 0.13647471450599913, 0.15376282290506837, 0.1160653900541232, 0.09666631739958043, 0.1261149921856719, 0.2150885873723528, 0.675765641985686, 0.4955055798144471, 0.3841015151453099, 0.23456632730648308, 0.21576405353041306, 0.40886041581550103, 0.2272352345413824, 0.19959383119432528, 0.37539893960324977, 0.3932296606397112, 0.36947630150356026, 0.5919193585758156, 0.609046755213613, 0.3744919348896374, 0.22730718102009662, 0.5699978811965627, 0.44234062149257647, 0.24102714454368546, 0.2992115478534835, 0.1961673036272532, 0.2962914216860675, 0.43513577458856, 0.32919817508703586, 0.2170261005401959, 0.3519459688717641, 0.24199749464602005, 0.2764142893169115, 0.23926107758835002, 0.21426207889496318, 0.24591382121474858, 0.21187677538022476, 0.23416174687492564, 0.2601259857465751, 0.23030311944695847, 0.2548547443925371, 0.20935582667534414, 0.19525161890917953, 0.7616958239724566, 0.2110747561504207, 0.20942563202627285, 0.21462248470358558, 0.2068170925532573, 0.18697424967508192, 0.207615607785949, 0.18776623967010286, 0.18830851159032513, 0.15390179123295478, 0.17867070443369015, 0.909208936915024, 0.9172482955613677, 0.17914311122659277, 0.9052093147042273, 0.1723749027679976, 0.8102652711614775, 0.2109829459496766, 0.1278353631564989, 0.2126251036252318, 0.21099009176722217, 0.8330609735598564, 0.8047803664387136, 0.16939031598292842, 0.2130410343228033, 0.18895303053256396, 0.17673577083104008, 0.19407255833862858, 0.2028872142702406, 0.195186674556745, 0.21072028669376575, 0.20771900191085735, 0.20573254578698053, 0.18087625599892032, 0.1050559743546906, 0.08023264334804192, 0.10391762435423424, 0.10781478935724409, 0.1307481581905804, 0.12641451271567117, 0.09867168660947534, 0.09517239474870998, 0.10530912160853967]}, "mutation_prompt": null}
{"id": "ad04818a-562b-4d33-b24d-23506b53c4f4", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for better diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Slightly increased mutation factor\n        self.cr = 0.85  # Modified crossover rate\n        self.w = 0.5\n        self.c1 = 1.5  # Adjusted for better performance\n        self.c2 = 1.2\n\n    def adaptive_parameters(self):\n        # Adaptive mechanism for dynamic parameter adjustment\n        self.cr = 0.5 + 0.5 * (self.eval_count / self.budget)\n        self.f = 0.6 + 0.4 * (1 - self.eval_count / self.budget)\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            self.adaptive_parameters()  # Apply adaptive parameter changes\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization", "description": "Adaptive Quantum-Inspired Co-Evolutionary Swarm Optimization (AQCESO): Incorporates adaptive mechanisms to dynamically adjust parameters, enhancing both exploration and exploitation capabilities.", "configspace": "", "generation": 62, "fitness": 0.34332962335519457, "feedback": "The algorithm AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8890333576413707, 0.8859001057979005, 0.8896710776914649, 0.899515728668068, 0.8970782704944554, 0.8766034723943398, 0.8885893938452162, 0.9002842035698189, 0.8877849321116343, 0.7759036934823664, 0.754628116619073, 0.7375571691401943, 0.7806218146248217, 0.7373819021903876, 0.7721310619907291, 0.73900029084304, 0.764371904843678, 0.7693611565145924, 0.18470386741762845, 0.1417521077467392, 0.1565037070858205, 0.1562698549713164, 0.1588598077644554, 0.18474950775835663, 0.11013926752423553, 0.18482932426514276, 0.06780353419802065, 0.15237973024353013, 0.12147003622840735, 0.08545782495636389, 0.14161238948284094, 0.14328354405102128, 0.14018447664893197, 0.09466707637684157, 0.18296860371911572, 0.1123630541409959, 0.9872969193332183, 0.9866988487215734, 0.9869732891518125, 0.9871092407948749, 0.9785232943028046, 0.979416151454276, 0.9845327119694601, 0.9839577081488261, 0.9834226443462932, 0.822741302691427, 0.7384103974660168, 0.7968623979309023, 0.7764267632994042, 0.799556143249024, 0.7885265776074568, 0.7775553683619587, 0.7605060150995595, 0.7984301474072305, 0.17107322607113495, 0.3749034446828039, 0.8768226589427255, 0.19474185477390937, 0.19447528836880068, 0.2821071240651988, 0.17723698270552724, 0.15765209608746644, 0.2368460137042061, 0.3064195386526052, 0.2729847905062709, 0.27664760718919146, 0.10870034289939323, 0.28255216256031757, 0.2805798445006462, 0.28994805076856633, 0.28708119270615085, 0.30137237214272117, 0.2703415270975199, 0.2852617128863384, 0.2530283649431274, 0.3164234492105956, 0.2940528335668403, 0.3072196619492781, 0.30580887379233035, 0.28515215949924755, 0.2880991997770216, 0.08570667029757661, 9.999999999998899e-05, 0.07697018660957367, 0.05143063130406422, 0.008119696024204481, 9.999999999998899e-05, 0.016101826357594495, 0.004998349964178805, 0.0010090622260889859, 0.08041761271395809, 0.09243939221061537, 0.06451259540613552, 0.03839192715297046, 0.01384323527237119, 0.11449918965384909, 0.06300610305816667, 0.044967397626424654, 0.08597358215884998, 0.2203604442698578, 0.07438086863834492, 0.07891328922078666, 0.08569853092029167, 0.3038533324449736, 0.07934248655504561, 0.07337051087588609, 0.10139098843844441, 0.08382031761777853, 0.21927345579347646, 0.05878495056430999, 0.08834483669132753, 0.1233205545509185, 0.08825701480025927, 0.15700460024874774, 0.08257047511209037, 0.3542214826380071, 0.08307965947133145, 0.5357833569845695, 0.5816740528557345, 0.5726257809376507, 0.5588308108129811, 0.5484276170371765, 0.6216076984729494, 0.6041758777297288, 0.5802013820540446, 0.5888975432820718, 0.06926958393161109, 0.056184201062470684, 0.08187534823060882, 0.11063580241472659, 0.18737112028305947, 0.09706707244882495, 0.09252869989589474, 0.09330627609763065, 0.11087378282152727, 0.1867487631163015, 0.17752037227654494, 0.15865833769171822, 0.2482409962012223, 0.3026451551065551, 0.16741613492372887, 0.20268557017936828, 0.19393847770620187, 0.5889072478902695, 0.23674332815535115, 0.3519787478871429, 0.38662070140627447, 0.4671791393236929, 0.5248182493368947, 0.3141955869173443, 0.7384844310959214, 0.24966002815273147, 0.49801319335662597, 0.20111497044739501, 0.36329342876848103, 0.19778651051467921, 0.25028999508061434, 0.3053194586430946, 0.22818514952641833, 0.1750561189045582, 0.22082019136713693, 0.23606274727547238, 0.21656273209657517, 0.23346094676566942, 0.18478164693848897, 0.2455146590178029, 0.26013959273944953, 0.274100983023541, 0.24959010259876147, 0.23740665607594746, 0.24099539710055196, 0.2087293482350473, 0.21244758852033496, 0.17699666965381822, 0.20266186040293588, 0.22567434435636313, 0.21239861404563531, 0.1801239532012784, 0.20201938332251834, 0.19242124811339556, 0.18435561181290372, 0.18343081999795663, 0.9300374317609872, 0.9139982785685532, 0.15429451719227494, 0.9418353891348887, 0.9229690994163996, 0.1730328575495721, 0.16814787204451842, 0.7887303158370087, 0.7690223204697579, 0.7700336407504843, 0.0830047368696809, 0.2109897354745467, 0.15724365850137534, 0.820536313560731, 0.8860570844526422, 0.09469024020650008, 0.19231204559530934, 0.19590483663054703, 0.20188590786290128, 0.20190808487529321, 0.1813652060464186, 0.19511344701859445, 0.20907647111025995, 0.20481609207544416, 0.18707805953306456, 0.1092233776525896, 0.11025475792353623, 0.0724655878294187, 0.09127356597375325, 0.08736435046426994, 0.11998656649648998, 0.10102214571627555, 0.08851156337611432, 0.07901297081037084]}, "mutation_prompt": null}
{"id": "b10a5fcd-b05d-4961-80d4-1162c8609377", "solution": "import numpy as np\n\nclass QuantumInspiredHybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.85  # Increased scale factor for diversity\n        self.cr = 0.8  # Adjusted crossover rate\n        self.w = 0.6   # Adjusted inertia weight for better balance\n        self.c1 = 1.4  # Co-evolutionary factor\n        self.c2 = 1.2  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        beta = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (beta * x1 + (1 - beta) * x2)  # Enhanced superposition with dual weighting\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredHybridSwarmOptimization", "description": "Quantum-Inspired Hybrid Swarm Optimization with Adaptive Parameters (QIHSA): Combines quantum-inspired differential evolution and particle swarm optimization with adaptive parameter tuning for enhanced convergence.", "configspace": "", "generation": 63, "fitness": 0.316951091522766, "feedback": "The algorithm QuantumInspiredHybridSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.888414439749892, 0.8772975894030226, 0.8737366911182494, 0.18305839471960805, 0.8744643306812776, 0.8740086351910642, 0.8850786823943857, 0.862555302490825, 0.8709109001471231, 0.7408950560442275, 0.6752388788638407, 0.7230092333839314, 0.7361756516915459, 0.6761750034297689, 0.7113475541182481, 0.6536792866328482, 0.7429072628448643, 0.7293066117967706, 0.15518165488926539, 0.12406713811632653, 0.09828062281910332, 0.09417259490219532, 0.15517645601777152, 0.12363684083030368, 0.18794084743157868, 0.18403250639289925, 0.14521026046959962, 0.1329372783324938, 0.1401627144158507, 0.14403427152996007, 0.11601801153404123, 0.10664321993918324, 0.09789867110494377, 0.09967556607467776, 0.10787921729962713, 0.14038050071349883, 0.9907003630858626, 0.9823387956652131, 0.9747142607358906, 0.982567888811766, 0.9865093269354956, 0.9872848971116243, 0.9901074893573731, 0.9871679234599167, 0.9939140264750567, 0.752529457272117, 0.7974837554685741, 0.7465373524930163, 0.7573304521645421, 0.7775706640181836, 0.7473886047520717, 0.08900511854792181, 0.783261098849572, 0.7880041989168416, 0.22804223153140135, 0.22679545562833048, 0.24896872902013734, 0.2838861269468931, 0.3781730853946592, 0.20894346764397742, 0.12590038157527228, 0.35889003232055205, 0.2320056396811827, 0.29204949053090423, 0.2997445433519952, 0.2809175757759854, 0.26750575457098935, 0.13224901923719967, 0.13073226007158778, 0.28274888154295463, 0.2776631192562161, 0.2904869029648024, 0.26870775156923954, 0.25783686950401763, 0.29875852140263326, 0.3066678072626582, 0.2964895842783166, 0.3014120927023507, 0.27627757315966606, 0.2825273995861207, 0.3092061819037364, 0.07137648865367197, 0.058764135274793405, 0.0027805184568178154, 0.037185948253638745, 0.0029056638610696073, 0.03686674412933133, 0.058322228894596595, 9.999999999998899e-05, 0.10940453820327545, 0.13424819930137688, 0.020525655325449588, 0.03464989806230512, 0.06344974292603944, 0.029197777711125084, 0.006055503513520133, 0.06282776845236804, 0.12142366538985949, 0.010873772435539886, 0.04922849305878485, 0.11840824318419874, 0.32408809868116817, 0.07512859706596431, 0.19170593385991064, 0.12051090365764683, 0.11265546665606763, 0.06990336681380616, 0.07151875547539188, 0.11124431200083895, 0.1878288265528134, 0.12752835588740674, 0.18756592762318525, 0.007654382518148983, 0.03821083918280088, 0.20989539325753204, 0.14540308609330765, 0.0913966975610172, 0.5508806808955651, 0.5462391381605451, 0.5618726784493016, 0.5539333759893585, 0.5833124070744192, 0.6026264371934568, 0.6123442938220798, 0.5592269777612999, 0.5688627738592111, 0.08917651072345634, 0.1422944852563176, 0.04353329037511067, 0.09901869398580643, 0.09601251141163702, 0.11089966472690027, 0.1875167542009475, 0.18051816120348763, 0.11438020923935455, 0.42164713829598355, 0.23659981657376183, 0.24018547346549068, 0.46350084140681824, 0.4029711555539548, 0.28429613806708376, 0.1919223923112391, 0.18874376136790882, 0.2504887145819542, 0.15044762134619027, 0.5833185734927768, 0.2456702921838576, 0.2767585026464775, 0.3914509704652619, 0.4512204389245431, 0.28141470120395995, 0.40371018525218183, 0.6091252507345795, 0.19580229301722063, 0.2645769917394991, 0.26410843665171047, 0.3084834969722454, 0.33303289600615904, 0.28269632550092416, 0.28850327447873414, 0.2516950989435849, 0.20112288938468448, 0.21493035011611883, 0.24958159896012522, 0.22205344091144075, 0.2472867199371691, 0.20276300086703136, 0.21272759804758978, 0.2291281561488171, 0.23735944861658398, 0.20941158703983642, 0.19011106629383634, 0.21494470284979583, 0.1734379196344531, 0.1876382713931526, 0.22903945746491372, 0.17610326558459088, 0.1827896806809578, 0.2516298837702521, 0.19294774694694128, 0.18783297229946505, 0.18890300062955434, 0.13616242043400617, 0.18859823291008238, 0.11495909048835751, 0.9346509108805338, 0.1625509929155491, 0.19634554730263543, 0.16918929258435733, 0.16627566969074736, 0.21232711710168517, 0.80085066440146, 0.21164103781729104, 0.211426111571262, 0.8449827714377457, 0.10509006087779504, 0.16755739350087662, 0.8254297263463327, 0.19813196766886199, 0.2500438375618582, 0.21166590326498114, 0.20587218901593596, 0.1945844538746505, 0.18999199331270122, 0.2215414398420611, 0.24025622401622637, 0.21973382567781785, 0.10740854101306974, 0.09403043693823476, 0.10083362078720215, 0.13435766621591816, 0.09715369438828836, 0.1348466012154278, 0.07196296709873873, 0.10142569291904469, 0.08237113273165342]}, "mutation_prompt": null}
{"id": "ca933c0b-4e6a-42e4-b845-b2e4ed2dd7cd", "solution": "import numpy as np\n\nclass QuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5  # Adjusted inertia weight for better convergence\n        self.c1 = 1.6  # Co-evolutionary factor\n        self.c2 = 1.2  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2  # Adjusted superposition for co-evolutionary interaction\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredCoEvolutionarySwarmOptimization", "description": "Quantum-Inspired Co-Evolutionary Swarm Optimization (QCESO): Introduces co-evolutionary dynamics with quantum-inspired updates to improve exploration and exploitation balance.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.9026689098698047, 0.8918110522253344, 0.8993585625678288, 0.9007293153025685, 0.9103368119888468, 0.9152176507081792, 0.9011812949355866, 0.8946170577852918, 0.9034835233386136, 0.7943143893490382, 0.7375633793221008, 0.8130148197897451, 0.8087073114216992, 0.7723839526168574, 0.808272154270665, 0.7687340813982092, 0.7990324091638275, 0.7827370936042723, 0.160902825364873, 0.15892939536803385, 0.09320032942753564, 0.11724631514556016, 0.11048951154619846, 0.14652408932323413, 0.1168663886089164, 0.13411251402806612, 0.13140944807648247, 0.18584842590008643, 0.0832905405124249, 0.0824658898018511, 0.16071741325608435, 0.15912921044715023, 0.1041705768290263, 0.09956062200314841, 0.10068051821507285, 0.14369058368050847, 0.9929931593376271, 0.9889893680320351, 0.9866844010713257, 0.9860517239520872, 0.9856028604708126, 0.986113978553438, 0.9866638516592235, 0.9864157320268373, 0.9894241340455082, 0.7973515227092567, 0.8209386837891599, 0.7293913381494185, 0.82747554766647, 0.8312914106195766, 0.7788674457720964, 0.0877511466657237, 0.7599538148097049, 0.8321876859624798, 0.9064684438691055, 0.17092093371864125, 0.17123282416342644, 0.19306856064166, 0.2789565536435834, 0.1170599976943193, 0.1524492416900921, 0.17946211549586355, 0.4043175412639375, 0.2968405621343604, 0.30357306478479285, 0.29453689757761525, 0.1336284366129845, 0.3071199686823948, 0.10693181005834884, 0.2868068888981905, 0.3055442542769874, 0.2989931310837167, 0.28671478570928843, 0.2759189930873165, 0.2880986771662145, 0.30350605882496073, 0.3233322704393832, 0.3017112208127053, 0.3243908690844298, 0.3038586885837484, 0.3050838399196455, 0.012802259425667817, 0.06015843001517329, 9.999999999998899e-05, 9.999999999998899e-05, 0.05029717966337466, 9.999999999998899e-05, 0.027212938783946594, 0.01823718920301942, 0.0028864825761336643, 0.08925450485395892, 0.039241256296895566, 0.21031626255566183, 0.058775820500466036, 0.06347923626785212, 0.10916071135981764, 0.04883972412964199, 0.10141506364853792, 0.04552867246939729, 0.07486661166660868, 0.11187638421507762, 0.04093080079823397, 0.12492230439002139, 0.31394754806359515, 0.21053734453599382, 0.11729044331777405, 0.24003081517808933, 0.07730258774207954, 0.16196565608329916, 0.06674296800571011, 0.13068576486509498, 0.19543538330667787, 0.06152327391408541, 0.08816866279697555, 0.0841244031729188, 0.06111499607558979, 0.27529656625415533, 0.6113960737733211, 0.6042206762102539, 0.5494345518315911, 0.5630873925920346, 0.5960696462860832, 0.4930479295341429, 0.6029189630220181, 0.5761165811795408, 0.5895858486679801, 0.06837424524755187, 0.07978236064258215, 0.11172365549733154, 0.07247624609486447, 0.08864106140646888, 0.13129863025648902, 0.11264388502044564, 0.10703212778769611, 0.09289367122702585, 0.8327031289472442, 0.8154238806532796, 0.6578229602721019, 0.337587143847744, 0.29469925572327493, 0.29647170060245875, 0.21420169204834238, 0.2581494753136222, 0.16463596888265786, 0.4518292794245705, 0.44575665861494806, 0.5880567462992835, 0.4233877463630846, 0.6316199533482251, 0.365481598593386, 0.472748932117405, 0.49908680814752693, 0.6580504815373243, 0.2998559532116193, 0.3320100853953951, 0.30023327522685084, 0.26196397496892243, 0.33654285819340946, 0.384788579004921, 0.17485442445623378, 0.2736222171342534, 0.25038850736501306, 0.2406989245166422, 0.2947481511633847, 0.27085122845996645, 0.21539031917140639, 0.2054001756208188, 0.22116095555631132, 0.2401845324119103, 0.2338637966875835, 0.22862870578242855, 0.19138839319345402, 0.19072238204707448, 0.19535424646964383, 0.203480061748873, 0.2040424882277837, 0.1903545257934971, 0.21197205347399706, 0.7949534713843694, 0.20088963655609482, 0.9239141918865942, 0.18856300723922959, 0.1542682082761586, 0.18863752838243886, 0.17256065688354616, 0.9471489171632774, 0.9363523835355082, 0.9377604717816099, 0.17763900865424764, 0.21210681638229245, 0.2128761175437639, 0.8447932956591122, 0.21286155583470723, 0.21268677557624438, 0.9419547020142618, 0.8397269523571729, 0.1686899757961191, 0.09480352550621429, 0.22610756666410448, 0.22606058818825037, 0.1945052435221174, 0.20636722849887223, 0.2384334483295928, 0.21989694815745053, 0.1917144484184975, 0.21838743595773558, 0.18477734439506677, 0.09868073450030024, 0.12451411233696963, 0.07960739216636248, 0.10476690052657267, 0.09928809029942198, 0.13863876245974838, 0.0981448398186503, 0.09668022881175298, 0.1131086762660809]}, "mutation_prompt": null}
{"id": "746b7f61-c170-41bc-9d3a-db25057c5563", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30  # Increased population size for better exploration\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted scaling factor for diversity\n        self.cr = 0.85  # Reduced crossover rate for diversity\n        self.w_init = 0.9  # Initial inertia weight\n        self.w_end = 0.4  # Final inertia weight\n        self.c1 = 1.5  # Co-evolutionary factor\n        self.c2 = 1.7  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 * x2) / 3  # Modified superposition for diversity\n\n    def inertia_weight(self):\n        # Dynamic inertia weight adjustment\n        return self.w_init - (self.w_init - self.w_end) * (self.eval_count / self.budget)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Adaptive Co-evolutionary Dynamics\n            current_w = self.inertia_weight()\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (current_w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredAdaptiveCoEvolutionarySwarmOptimization", "description": "Quantum-Inspired Adaptive Co-Evolutionary Swarm Optimization (QA-CESO): Enhances exploration by adaptive parameter tuning and dynamic interaction strategies within the swarm.", "configspace": "", "generation": 65, "fitness": 0.21469019953453347, "feedback": "The algorithm QuantumInspiredAdaptiveCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.46876103607439334, 0.511712049981373, 0.5173868773020823, 0.18726263697581247, 0.49605182684331983, 0.18611852322696654, 0.5060743382707067, 0.6285329545870284, 0.4833970496562715, 9.999999999998899e-05, 0.2346114229334546, 0.03984810541269779, 0.20004298082854977, 0.23452460730515667, 0.034841013511727414, 0.22648007014622673, 0.22036150672364518, 0.17721515970225243, 0.11129696581537085, 0.09486063197786065, 0.08038898224687696, 0.10831131022373652, 0.11932971942457482, 0.13032325965093428, 0.10581384245909553, 0.11321255485594506, 0.0729659437360971, 0.08948613436296382, 0.09996883327917783, 0.0989543824672584, 0.08000360145712204, 0.128648662972617, 0.09676683758942783, 0.09963929061114463, 0.1048647696211652, 0.07960107426280882, 0.9858203739450333, 0.9893897338741952, 0.986516836859382, 0.9817537232026867, 0.9905541171618543, 0.9902474194093107, 0.9909736645367494, 0.9856233988290802, 0.9906323512900425, 0.30671104859722575, 0.2393597310434361, 0.09461592494941962, 0.29384858038147177, 0.2772381829810713, 0.26876697668434013, 0.08755068744579497, 0.08405980426542958, 0.22675868183250125, 0.28452268811449066, 0.15957080472245322, 0.1637181086675873, 0.1787319732099617, 0.1780014553549285, 0.1978055483301202, 0.1250868523525871, 0.5415657896481187, 0.1986440936654449, 0.12611996388641766, 0.14168575131223182, 0.11092614395090783, 0.13011152268220672, 0.11976672516530928, 0.09169469907794969, 0.1259776560142274, 0.09555740866278029, 0.12730325398235764, 0.16236006006166404, 0.1797439949926316, 0.16863558789289568, 0.16222910470843632, 0.1487764772614717, 0.16117481662941646, 0.16247157642152088, 0.17535064809384515, 0.20139661290366728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006489712628339084, 0.08658128693079237, 0.0472581824878745, 0.06612309230717528, 0.055240216094752714, 0.05017826569961603, 0.045230847033908006, 0.12738938371713393, 0.03854164570340435, 0.04686194945259814, 0.011577746392240962, 0.01220677052742103, 0.08721440877630249, 9.999999999998899e-05, 0.02487508724123777, 0.03406543206460033, 0.050987041096182795, 0.0461203759612856, 0.11965897570298145, 0.030875023451233052, 0.07525885208528305, 0.10141699040309382, 0.09327454512552102, 0.0477814392345044, 0.026085467421882114, 0.04681443867757784, 0.040948533704098566, 0.04974627323309655, 0.38998412924550774, 0.40856428497248887, 0.37111200145638, 0.36397578061722047, 0.4250958079666761, 0.38609606352344195, 0.3937383411746679, 0.3812564079267158, 0.37330754304326097, 0.0692750559833506, 0.05682737805567317, 0.05113550343790052, 0.09273257537195745, 0.1088994258745426, 0.10107125261157612, 0.09632407604446236, 0.11792114497859185, 0.0857391306036589, 0.20787888267759635, 0.2169141504157811, 0.22406485327197456, 0.20608362323205087, 0.2564537036805544, 0.22457491061596113, 0.20053648874864805, 0.1957973793392287, 0.20379215343357393, 0.2955314515080949, 0.2511823458322954, 0.2777008415413783, 0.29795751807485504, 0.2403965227869468, 0.29512601822801765, 0.19353038511974197, 0.22595258919817762, 0.19153297919006895, 0.2116128837139959, 0.1900281063664494, 0.1745222358936377, 0.2559152752541446, 0.21402882361806164, 0.21385746530667915, 0.13047557734873028, 0.23257605382755775, 0.13458072669972276, 0.22608800693915942, 0.22448351297192648, 0.20522701780125285, 0.25183760606213434, 0.18230521629090712, 0.22881828025579698, 0.23139945678744744, 0.22486698110033854, 0.23109561588905114, 0.19325846468696484, 0.19329353162612883, 0.19137890109446776, 0.1729839948035946, 0.18229209937219115, 0.1870081234937233, 0.19400026385988878, 0.18340512476088588, 0.18261863675345336, 0.18296747085619214, 0.6137370824315624, 0.1747324452636132, 0.6127845957035631, 0.5849448132149822, 0.5405269425417543, 0.16191827746723852, 0.17018760338768935, 0.17605819604291506, 0.16007869079842096, 0.36258949154622644, 0.1849009060992688, 0.21661937492541727, 0.20028677474840317, 0.4838982253598255, 0.4864772714821941, 0.19959168083838774, 0.48763234033274516, 0.19187975074755081, 0.20314258274813946, 0.1886238589827205, 0.1892885158815344, 0.1848206849292624, 0.19329983928768513, 0.20212112362615176, 0.19057983169446335, 0.19400247038478236, 0.08612416936827316, 0.06959617707602206, 0.07346171786597766, 0.08247661814990026, 0.06961607493198807, 0.08180746696741448, 0.07897800769646912, 0.06865868710121836, 0.07584116191333146]}, "mutation_prompt": null}
{"id": "c82fac45-aacb-448a-9ab8-5461d5ebcdaa", "solution": "import numpy as np\n\nclass QuantumEnhancedAdaptiveParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.9  # Adaptive inertia weight for better balance\n        self.c1 = 1.6\n        self.c2 = 1.2\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def adaptive_inertia(self, iter, max_iter):\n        return 0.4 + 0.5 * (max_iter - iter) / max_iter\n\n    def __call__(self, func):\n        max_iter = self.budget // self.population_size\n        iter = 0\n        while self.eval_count < self.budget:\n            self.w = self.adaptive_inertia(iter, max_iter)\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Adaptive Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n            iter += 1\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedAdaptiveParticleSwarmOptimization", "description": "Quantum-Enhanced Adaptive Particle Swarm Optimization (QEAPSO): Integrates adaptive inertia weight and quantum-enhanced exploration for improved search efficiency and convergence.", "configspace": "", "generation": 66, "fitness": 0.22937242038755074, "feedback": "The algorithm QuantumEnhancedAdaptiveParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.4315704295952433, 0.5244631014675727, 0.5518031529930741, 0.5732790338013816, 0.6256709006032, 0.543405085823716, 0.5313021294076842, 0.5366291384148734, 0.5780607143097134, 0.08913295267669785, 0.14148122608972313, 0.10071030409498671, 0.19235487532020157, 0.12090018757003562, 0.22458882659909363, 0.11471112615753132, 0.18233312884492414, 0.23384642395194233, 0.12233188351954583, 0.11154422929838259, 0.13615368793002725, 0.13385647320401872, 0.26628443340727137, 0.10460028533125532, 0.13070673863522042, 0.12670061242620645, 0.12048661172723718, 0.11536083246042184, 0.08417864506432693, 0.08278250824466393, 0.08322945298558715, 0.12010571554537652, 0.08900715628630806, 0.09940650201656587, 0.10775217990430497, 0.11592298816187707, 0.9935818394636358, 0.9897587789957474, 0.9861449093782336, 0.9827349378818875, 0.9895233442230341, 0.9893924500732882, 0.9837742764721726, 0.9895222362016931, 0.9866953926465283, 0.3503574682606142, 0.30546084435737, 0.3533270598065843, 0.3312644069584363, 0.3091159309616751, 0.2735472827887352, 0.08692802757419993, 0.24270049683564243, 0.08549907590560035, 0.21308391133621174, 0.2139075107986571, 0.3194353377567146, 0.18030914153571298, 0.5626193801327167, 0.11388302743314305, 0.4114321543570232, 0.4635538302951834, 0.30919374002357314, 0.12162869588231295, 0.15431519127215454, 0.17260660446809084, 0.13574068139829665, 0.10907363095140277, 0.0838710765624131, 0.12516653589470172, 0.13687947262039724, 0.15926926411978237, 0.09140845318090196, 0.12118479688342798, 0.12532142201715524, 0.12527541087439042, 0.15517684660487263, 0.14011441724672546, 0.15283888154459147, 0.11440583765564438, 0.15681321870659937, 9.999999999998899e-05, 0.0001029022950671532, 9.999999999998899e-05, 0.009602725060471662, 0.07036173029980963, 9.999999999998899e-05, 9.999999999998899e-05, 0.002741483387171728, 9.999999999998899e-05, 0.08538925232789585, 0.11379295117981092, 0.1256380317976611, 0.1074312255215204, 0.1374279524055213, 0.06307068097488933, 0.0561764506564808, 0.09596744712353411, 0.038064367649274566, 0.03155851167157997, 9.999999999998899e-05, 0.01940856740040764, 0.04249857693115644, 0.09228122613922007, 0.043623706731532375, 0.09310127798430146, 0.05869916964571298, 0.018890544956977506, 0.07192211047797814, 0.11696490980579821, 0.04822696681784078, 0.011788243114838948, 0.004642923281508948, 0.10537549283577152, 0.06883343879135806, 0.04821106399146735, 0.0530176461206191, 0.39421260250161416, 0.3897882549454964, 0.4102832071331758, 0.428197587167508, 0.4027423639999924, 0.2076885797004947, 0.4211531585191407, 0.4230880793721036, 0.3966919952805892, 0.06984881624410788, 0.09309040820631376, 0.08565987530209973, 0.09019247728187052, 0.11698543874958811, 0.13017280658277863, 0.08719472832565911, 0.10806328806016863, 0.10382367841041773, 0.20101295245850626, 0.1467363641794105, 0.1997464856397725, 0.269787629738098, 0.19509014571595706, 0.27656130037107773, 0.18389349917455744, 0.15688580418643483, 0.1553074051460288, 0.29771354814496676, 0.33587807128119285, 0.2705454985664538, 0.29805559511308544, 0.27613289416620956, 0.28893573920666527, 0.31091488159017266, 0.269486907440037, 0.31862946075656273, 0.15079125008823835, 0.185378685544206, 0.17368744647484236, 0.256270033037978, 0.1869721378431346, 0.19647258255413003, 0.258166294119867, 0.24434324907692428, 0.2657273641506417, 0.20437611117190202, 0.20267864217553344, 0.18247739068591196, 0.19006941005154254, 0.1964955189778942, 0.18061782787579572, 0.2012768439522864, 0.22711737847113644, 0.19741136722672237, 0.20641573801479418, 0.19879643103851108, 0.21363605299892652, 0.1788010266051251, 0.20783389477856107, 0.18661337098966047, 0.35472072704720636, 0.18848867042267836, 0.1747365121890163, 0.1730042728327995, 0.17814454555844295, 0.1530403254496645, 0.5901297558917075, 0.690359547951551, 0.7231558980055128, 0.18247772491864822, 0.6911242949526122, 0.16267759488068023, 0.5292201102585923, 0.20220695519135246, 0.10990975728741281, 0.20498675921685983, 0.20431170022762934, 0.20781426790158486, 0.16357144875057206, 0.5612468887090445, 0.205663601248545, 0.17512958543011026, 0.21536703722409456, 0.219987072632419, 0.1847716450686706, 0.17875656991018607, 0.20081617037812272, 0.19652008692226686, 0.19723459537793853, 0.20486248805871654, 0.07542646704268297, 0.0790897768729103, 0.0824552732229693, 0.08173240319430553, 0.08519322226585224, 0.0897763469743802, 0.07740365960009798, 0.08277228683407833, 0.08363669966122289]}, "mutation_prompt": null}
{"id": "036e5af7-20ea-4bbe-9684-b6ca21af1fab", "solution": "import numpy as np\n\nclass HybridQuantumInspiredSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted scaling factor for better exploration\n        self.cr = 0.85  # Adjusted crossover rate for balance\n        self.w_min = 0.4  # Adaptive inertia weight\n        self.w_max = 0.9\n        self.c1 = 1.4  # Adaptive learning factor\n        self.c2 = 1.4\n\n    def update_inertia_weight(self):\n        return self.w_max - ((self.w_max - self.w_min) * (self.eval_count / self.budget))\n\n    def quantum_superposition(self, x0, x1, x2):\n        beta = np.random.uniform(0.5, 1.5)  # Adaptive influence parameter\n        return beta * x0 + (1 - beta) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adaptive Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Adaptive Particle Swarm Optimization with Co-evolutionary Dynamics\n            w = self.update_inertia_weight()\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridQuantumInspiredSwarmOptimization", "description": "Hybrid Quantum-Inspired Swarm Optimization with Adaptive Learning: Enhances exploration and exploitation using adaptive parameters in quantum-inspired superposition and swarm dynamics.", "configspace": "", "generation": 67, "fitness": 0.22047742424908628, "feedback": "The algorithm HybridQuantumInspiredSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.6543855761215162, 0.6516792302987047, 0.6639622703533226, 0.181645976938564, 0.18234010417925628, 0.1891555505796929, 0.6583922382181694, 0.12693610694360746, 0.6164204911403762, 0.3363068394612958, 9.999999999998899e-05, 0.45932120129929754, 0.3856344242101043, 0.06558721631533282, 0.042027803253587126, 0.4500692816673215, 0.48600565945464536, 0.23310546993611092, 0.15000178914701068, 0.1218826637926177, 0.12276126679641652, 0.33213894670899724, 0.12270540133662855, 0.09952086984694719, 0.12066574926054108, 0.13061185606116343, 0.14376108294825152, 0.11661697638544588, 0.11148082605415621, 0.09660321346354173, 0.11893176352833956, 0.10889943697852011, 0.04596210852440985, 0.0380537766209913, 0.09217633338265352, 0.09345069077091084, 0.9927696920161092, 0.9896658951892404, 0.9937425779842768, 0.9885234465543997, 0.9896665607914964, 0.9881792903209791, 0.9903392860257453, 0.9895265462061662, 0.9905435915023366, 0.05883143102283395, 0.4362488722505541, 0.11257287251345549, 0.4756570156282527, 0.5294339545015324, 0.14442510521084062, 0.0881030491461412, 0.08142363361799065, 9.999999999998899e-05, 0.20510779549966351, 0.32102278681324636, 0.2052301147404607, 0.33586409337137124, 0.23900233668842008, 0.11536419950030996, 0.22333388181065372, 0.30787015315655963, 0.12944568861290773, 0.08725547197609451, 0.17881128533102741, 0.17691651578090895, 0.1961769576835216, 0.11169758664375318, 0.08562780580960061, 0.1764735461997856, 0.19272011074239603, 0.08833010694079535, 0.12023307126458405, 0.00984798696624134, 0.08565552102567231, 0.1755868920881969, 0.22189187409669942, 0.12477374083603299, 0.16967614981178325, 0.2078175534951635, 0.16874970713282655, 0.03245749118462449, 9.999999999998899e-05, 0.032129413303476184, 0.0005040917280870749, 0.03753496268640388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013113906628788863, 9.999999999998899e-05, 0.03470810961620352, 0.05289798291780967, 0.01027625730767845, 0.09969126109540682, 9.999999999998899e-05, 0.05341453406134655, 0.037176791132228604, 0.05033384435071242, 0.024008346387695556, 0.05876769993822384, 0.03210675679328101, 0.0572609157543289, 0.05105770355739225, 0.045787104145734836, 0.05987685968810963, 0.06102657752717677, 9.999999999998899e-05, 0.05013842114918443, 0.029299015906006587, 0.008935706032365487, 0.03431817149207417, 0.041160511030957414, 0.02858470978520633, 0.039261422209368124, 0.06977590107793441, 0.11221734690307916, 0.07142341602866653, 0.4842497178003061, 0.4608649293213203, 0.43933161216798167, 0.4855732337218257, 0.4697058685556359, 0.433459920120455, 0.43759160768912564, 0.4597753084651983, 0.46568426923632555, 0.0933943131435162, 0.06500483616848363, 0.07446645807456098, 0.09245327526741354, 0.11653320311836979, 0.12028275209784756, 0.10542672929783226, 0.08187286019915041, 0.0551926062136765, 0.15678139133780056, 0.41043049623121175, 0.1289788680644982, 0.1984725405564125, 0.18191812121286766, 0.28657047026797156, 0.17770083160472572, 0.13738853034485, 0.20665652159050574, 0.27199074258812184, 0.2671231935261352, 0.3970499921175128, 0.2910033112447362, 0.2934182023972921, 0.2648124994306107, 0.16576740420258107, 0.4385168746022915, 0.2656783481906224, 0.20956201595864843, 0.19204489748593634, 0.14788454318987498, 0.2503311730681851, 0.1772682857261325, 0.24368268099554402, 0.23181284583348183, 0.2901432708192604, 0.08923469065229583, 0.18943552171599654, 0.19951068122278348, 0.1689552609782522, 0.19616292622636533, 0.20007349380537665, 0.23331306258483853, 0.20785294056429537, 0.18304831202123673, 0.2409394999627349, 0.20872402647569632, 0.20133609841074673, 0.16770695653415346, 0.2114157746654498, 0.21883043579510109, 0.2024499922240357, 0.2174213011614179, 0.4587704767811335, 0.18638620698035424, 0.16434515575787578, 0.20331540822705252, 0.15259038249412893, 0.15836428758257548, 0.195114110210036, 0.11598250409976574, 0.18259185431715264, 0.16376161677629975, 0.7392288417069287, 0.16599169311221162, 0.5551390380204188, 0.12412901750494931, 0.12588204467968211, 0.1539283656884861, 0.6310206085778314, 0.19054153436835763, 0.18431585139464945, 0.20432962585576808, 0.18783083581123095, 0.20379943599519024, 0.18252595010568162, 0.19516213943068217, 0.2376142193815055, 0.21418205744838725, 0.21995021151245797, 0.18625450386813602, 0.24239297008121452, 0.08289920972272924, 0.09547768268750334, 0.08002842287889, 0.07475292988329296, 0.10511766658548749, 0.08618325710278063, 0.07892162102087608, 0.08016648736133336, 0.08629422260887254]}, "mutation_prompt": null}
{"id": "a256b7c4-4778-4250-abec-207147bda55d", "solution": "import numpy as np\n\nclass HybridQuantumInspiredCoEvolutionaryDifferentialParticleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted to enhance exploration\n        self.cr = 0.85  # Adjusted crossover probability\n        self.w = 0.6  # Adjusted inertia weight for better dynamic balance\n        self.c1 = 1.5  # Co-evolutionary factor\n        self.c2 = 1.3  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 - x2)  # Enhanced differential interaction\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridQuantumInspiredCoEvolutionaryDifferentialParticleOptimization", "description": "Hybrid Quantum-Inspired Co-Evolutionary Differential Particle Optimization (HQCEDPO): Enhances adaptive exploration and convergence through quantum superposition and differential mutation in a co-evolutionary PSO framework.", "configspace": "", "generation": 68, "fitness": 0.3207729172856609, "feedback": "The algorithm HybridQuantumInspiredCoEvolutionaryDifferentialParticleOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8515890892278173, 0.8406587580524856, 0.8487083628755812, 0.8439900266530757, 0.835543150551045, 0.8633954962422411, 0.8637390834624952, 0.8447988678739853, 0.8519457868272993, 0.6375667604581232, 0.6388346416983869, 0.6633643480181741, 0.6472137459117654, 0.6664249263958697, 0.7068935446975084, 0.6922231794470806, 0.6939501809725922, 0.6487051507765257, 0.1559417391609904, 0.12431560510140738, 0.12869861920812564, 0.15147805014430615, 0.14928009851652535, 0.1312980922737057, 0.18037515825235473, 0.1403405909984553, 0.1121485969228948, 0.10162870319437212, 0.12714649796143818, 0.10166523308763431, 0.10793290978827585, 0.10712904047853467, 0.1120840714438951, 0.411952341437683, 0.11396595605739801, 0.10184083108823239, 0.9896315307662206, 0.9906187839559147, 0.9873598563416185, 0.9901822563092937, 0.9891186853357377, 0.9867198723329043, 0.9866204555628972, 0.9822415349272434, 0.9913149384935231, 0.593808119317639, 0.6395523924620354, 0.5475279265024084, 0.6460411006265613, 0.603743912282821, 0.7240469955565255, 0.6915819959215674, 0.5640400768918321, 0.6685020629309276, 0.3614139433279727, 0.22497070292493626, 0.3227911095281295, 0.20889892858487236, 0.15910235889588098, 0.2784724564602691, 0.23599554134833156, 0.2286576323029451, 0.22913095701912367, 0.22491708743503147, 0.1299389658545469, 0.31093922362049187, 0.22111610270606774, 0.21471038439035406, 0.24448093252392544, 0.2566894133180172, 0.20999650094255418, 0.21218758276834448, 0.25001068320374575, 0.13228737833167448, 0.2343503444685925, 0.2258604131291071, 0.23808635689598479, 0.2456106207992751, 0.25768911290650376, 0.23660133422327045, 0.2527555061934499, 9.999999999998899e-05, 0.11750262025835911, 0.07975930670617404, 0.02558523015676273, 9.999999999998899e-05, 0.026607484810055593, 0.08790194274133412, 9.999999999998899e-05, 0.07028153921041436, 0.09316955605757826, 0.14299011672025175, 0.08635402114225743, 0.0780891993546764, 0.04847695824013476, 0.05368173626495665, 0.07584492990332403, 0.10110755666078075, 0.0880448072296438, 0.21246624919335444, 0.03375077853847197, 0.16506864746861194, 0.21092415505127016, 0.13074510075929935, 0.11678465899160584, 0.09518831347876822, 0.09164647708767337, 0.09570110432315848, 0.04656968115325888, 0.042648368940738535, 0.07156601979493349, 0.14527463968844456, 0.1713250407949527, 0.17263771625479707, 0.18742268159953523, 0.2365283033240526, 0.16041779743735463, 0.5135264758214079, 0.5727799749642075, 0.5070568883351808, 0.5388902199078287, 0.5513780092434686, 0.6100796873936457, 0.5377764910420251, 0.5735375862094463, 0.5506683822900769, 0.13239659952126004, 0.18450717034598108, 0.12718852427154748, 0.0960810036824793, 0.08832415384829095, 0.17445236941464937, 0.1147449501732275, 0.13681531857922669, 0.07960733022384103, 0.2852801852998318, 0.19408697020424637, 0.37983247026343514, 0.18891442474112807, 0.20429173471788153, 0.18678185451917462, 0.17334615524240293, 0.18791354187508902, 0.4819480610949731, 0.28804575878908123, 0.41590003726414304, 0.36147804066931943, 0.42797098530998645, 0.2846831508471286, 0.485232230008267, 0.36494100531522633, 0.34245091867125743, 0.49468948898836806, 0.24366404093447014, 0.21963140083935506, 0.2298131688437567, 0.260905429342274, 0.1728201733291509, 0.2601830443552915, 0.20336491811358837, 0.17411577644914178, 0.1469226621382801, 0.24200220273752715, 0.2636396047039169, 0.2528623892737175, 0.23936071025368633, 0.24760056657880292, 0.2563403737500637, 0.2603677516094903, 0.25761552836113877, 0.23878918848199526, 0.20848884883893037, 0.21408608663024753, 0.1853674577942206, 0.1836257758999853, 0.17476302577356295, 0.24406500505602502, 0.19086534664222587, 0.18577686475135802, 0.20833427065436472, 0.8692630539627808, 0.199616378137079, 0.18802492195699128, 0.8885454292384775, 0.1679056240200134, 0.16682817455120336, 0.1345437450152378, 0.165266835793057, 0.8875499896149694, 0.7322871987308526, 0.7634092758986155, 0.7076095403004115, 0.2125096281956873, 0.1656466527981516, 0.7982336055734737, 0.831769070207492, 0.20820242358658525, 0.12857727108639816, 0.20893534336322017, 0.21658246223857613, 0.18900198769294652, 0.19012453374751526, 0.209417682435048, 0.18047770177700295, 0.20508108867340658, 0.19116277417571825, 0.1906815974345103, 0.09394893612533595, 0.0871000143686389, 0.0985434558599767, 0.07729597415581324, 0.09145984775921934, 0.08278417698315821, 0.10167172994343388, 0.0799109283988999, 0.09256727346121174]}, "mutation_prompt": null}
{"id": "aaa8f996-f9dd-4ad3-ad5f-cf82eed53472", "solution": "import numpy as np\n\nclass QuantumEnhancedCoEvolutionaryHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size for diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Fine-tuned differential weight\n        self.cr = 0.85  # Slightly reduced crossover rate for stability\n        self.w = 0.6  # Enhanced inertia weight\n        self.c1 = 1.5  # Adjusted cognitive factor\n        self.c2 = 1.3  # Adjusted social factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        beta = np.random.rand()  # Additional randomness for richer superposition\n        return alpha * x0 + beta * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedCoEvolutionaryHybridOptimization", "description": "Quantum-Enhanced Co-Evolutionary Hybrid Optimization (QEH): Integrates quantum principles with enhanced adaptive strategies for dynamic balance in exploration and exploitation.", "configspace": "", "generation": 69, "fitness": 0.32312644412709446, "feedback": "The algorithm QuantumEnhancedCoEvolutionaryHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8089835169885299, 0.8387570532767485, 0.810434670267959, 0.8442452373164946, 0.8249713811486993, 0.8047514024962727, 0.8424431185676767, 0.8179066958617258, 0.8156607914351011, 0.6049479844492789, 0.5791503949717557, 0.5757046065027351, 0.6136464241600803, 0.6279863190779106, 0.5355363882245632, 0.5584965963919342, 0.5018452901954267, 0.6000252753388111, 0.1282228473839817, 0.17712796999425628, 0.17245196709167743, 0.48724623954072455, 0.14659053988684567, 0.14210502184576257, 0.14081165713486476, 0.11404611341007442, 0.14125992552348066, 0.1515753705863322, 0.13109222769877082, 0.12894965890389543, 0.12723813517191918, 0.09423802321506669, 0.11404940965826604, 0.09884405046614264, 0.14712203525023904, 0.13344777089427462, 0.9880455610867319, 0.9918263121793058, 0.9837727638468232, 0.9837506781755191, 0.9912747400656484, 0.9795430531840302, 0.9884347876609915, 0.9830890992118408, 0.9834705737455458, 0.5784679546685507, 0.6551227471763625, 0.49520926375652474, 0.6485954067232325, 0.6155053151126437, 0.6233525471299388, 0.6353351064665209, 0.5814477040053824, 0.6607868266983656, 0.1709822204140623, 0.2969203264788124, 0.7795805756535173, 0.37287293812777766, 0.3768713596848111, 0.21879559278344296, 0.37851470901278494, 0.32432269600602237, 0.3410402093997137, 0.19957803467772772, 0.21441439697033016, 0.20092865115984615, 0.11915647421365916, 0.28511291383932025, 0.21322220998375674, 0.20825627298526106, 0.2118667847622654, 0.21105580539727808, 0.2353357494078655, 0.23183598922330506, 0.23299892737663064, 0.23813193555455126, 0.24469019203577802, 0.13288160117413084, 0.2554581325928337, 0.26769733801873985, 0.2611783965438179, 0.0631874211393546, 0.0042935181715046955, 0.006748779034402297, 9.999999999998899e-05, 9.999999999998899e-05, 0.13706035917824289, 0.006436035627832792, 0.09951440120354127, 0.08096578413333211, 0.07662427581314768, 0.05461781090546136, 0.04132177203196985, 0.05090224534494425, 0.0687493156132074, 0.02961599597236486, 0.04087969438350392, 0.07764422867152043, 0.0754843149767388, 0.1791831261659389, 0.14193696848974213, 0.08796027568341702, 0.10034988524893018, 0.06810404991347552, 0.14074301736594952, 0.20810583315107434, 0.2785148756309188, 0.09017492314509035, 0.2037812821953755, 0.12423469379680574, 0.13550929876737428, 0.024424480332587373, 0.17724740588897836, 0.07114649785787264, 0.10985045853929187, 0.12580173834566521, 0.10722173302313331, 0.5492493265644252, 0.5230484513377505, 0.5162807343298748, 0.585592609970089, 0.5473119391892183, 0.5308819036881207, 0.5270648655304977, 0.5390386295758938, 0.5397795953122824, 0.10111512872274941, 0.13728563643339753, 0.1354603394046997, 0.11624091277140502, 0.10180012678301686, 0.11742010768460709, 0.5084484975892496, 0.1353925169785778, 0.0760803117690182, 0.48781139592445844, 0.20507619480935535, 0.22725851282457155, 0.3700343180229434, 0.1763378029132302, 0.3282541242105904, 0.5067628303841263, 0.40062792359909627, 0.28609656920078674, 0.4168777063983803, 0.45777675637685267, 0.4281337574084656, 0.35150304049599346, 0.425159055870061, 0.4185528464280984, 0.5396126225021378, 0.31278690542341225, 0.24435360895244918, 0.3135709352397009, 0.2544615031121622, 0.23221055811623548, 0.3198578648048498, 0.2714684944348169, 0.34806832852286806, 0.20552671235391862, 0.24230804576205922, 0.1817403562515829, 0.3184036407845574, 0.2753353578930663, 0.26308314801254595, 0.3087717707002776, 0.2584994618451929, 0.27095182424248265, 0.26383090250573893, 0.2895263643723677, 0.23707615352358258, 0.21512969865038567, 0.207531408691899, 0.20970076051141062, 0.20373664336930508, 0.21332365815127452, 0.19202777185013697, 0.20948002692326717, 0.20275715092399427, 0.23912651955241704, 0.1873969539407606, 0.18737089964507447, 0.18791313165213874, 0.8489126832047494, 0.15188619891739075, 0.1480434968664569, 0.880202234802494, 0.1698518577687419, 0.1649307890325452, 0.5300911773898054, 0.6451318778780525, 0.8111622585583724, 0.21050968564332972, 0.20999691600716597, 0.15555540725224093, 0.1677914161481574, 0.6786355742121618, 0.8279498819725, 0.20635086410345893, 0.21012436884595953, 0.18254666966641175, 0.21212159664377017, 0.19610504879937285, 0.198614593713913, 0.23591315171475513, 0.19538957293546966, 0.18358945584595365, 0.09238856818489172, 0.1402832601418479, 0.08625484377793458, 0.10245962490334459, 0.09063359803846449, 0.10993359790763535, 0.10225879177907204, 0.09098550333900379, 0.11683423329405318]}, "mutation_prompt": null}
{"id": "d50e9dea-b26d-49c5-ab76-d07bb488a46a", "solution": "import numpy as np\n\nclass HybridQuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted differential weight for better search space coverage\n        self.cr = 0.85  # Adjusted crossover rate\n        self.w_max = 0.9  # Maximum inertia weight\n        self.w_min = 0.4  # Minimum inertia weight\n        self.c1 = 1.5  # Co-evolutionary factor\n        self.c2 = 1.3  # Co-evolutionary factor\n    \n    def inertia_weight(self):\n        return self.w_max - ((self.w_max - self.w_min) * (self.eval_count / self.budget))  # Adaptive inertia strategy\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            for i in range(self.population_size):\n                w = self.inertia_weight()\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridQuantumInspiredCoEvolutionarySwarmOptimization", "description": "Hybrid Quantum-Inspired Co-Evolutionary Swarm Optimization (HQCESO): Enhances convergence by integrating adaptive inertia with quantum co-evolutionary dynamics for balanced exploration and exploitation.", "configspace": "", "generation": 70, "fitness": 0.2741914953787307, "feedback": "The algorithm HybridQuantumInspiredCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.6549704965279656, 0.6853738205626524, 0.6918527333099849, 0.7113970499519833, 0.6496062334641002, 0.6926664223642599, 0.6346199928818856, 0.6649097912066768, 0.6547272398860648, 0.4210974367350321, 0.2894825374729849, 0.3806905248481083, 0.421226861358882, 0.3489906039669124, 0.35811697347035065, 0.4634580529413107, 0.39170973373213513, 0.44035993034036547, 0.41451863376288356, 0.1442733051370365, 0.09223357654575848, 0.0913524522990683, 0.14293843506896298, 0.11983931365453371, 0.13200682170063627, 0.15452046755594528, 0.14642146902703046, 0.13087850239976428, 0.13418090029818686, 0.09443609788427654, 0.10917023540177961, 0.13367733251548997, 0.13088644753263257, 0.2937104994896148, 0.12137787812859846, 0.11782579355272826, 0.9928079774322375, 0.9906025582916299, 0.9905170767356439, 0.987403822187299, 0.9867418966521878, 0.986504034132599, 0.9902343858312472, 0.9903698836332923, 0.9877870919487123, 0.47906403916120566, 0.5453470905546949, 0.058925238918712264, 0.5138008586640314, 0.5099107000853741, 0.48586461168934614, 0.08530444260418368, 0.20252187361870422, 0.05039224044030466, 0.6049869615358789, 0.6451751377991326, 0.3067415234970433, 0.18669835580272298, 0.6098168592832482, 0.11490767117999134, 0.17320794240183335, 0.6776855051665595, 0.17047750449379906, 0.19692533599646644, 0.19565835597214087, 0.18592348648429047, 0.10723129193480485, 0.20284877442257843, 0.0831694086539333, 0.17383013678140635, 0.1817368412182112, 0.1859049869807191, 0.18211180139580152, 0.17084518948997407, 0.15212072287098055, 0.10923794923713082, 0.19317243389589112, 0.17604424064554336, 0.19468204882924567, 0.18784139100516595, 0.19823563533612754, 9.999999999998899e-05, 9.999999999998899e-05, 0.0044035407351397104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01620386622189196, 9.999999999998899e-05, 0.0030962538483058077, 0.08042253315073467, 0.023210334412348654, 0.02738395023476603, 0.020281295920414832, 0.108464682242989, 0.12201740039366393, 0.06717309035959151, 0.06447444534671942, 0.06304149678578375, 0.0333871584352462, 0.024586027368304397, 0.05941029194683434, 0.05405991958910239, 0.058025328355596484, 0.0625360158354864, 0.0967903458477356, 0.05928193278502569, 0.05015984865517242, 0.08735891719086453, 9.999999999998899e-05, 0.01907454002737108, 0.04093339167757781, 0.052739021117765184, 0.10363082020274084, 0.07318693305386337, 9.999999999998899e-05, 0.07043870190058354, 0.48310749935123676, 0.49728706852739424, 0.4658738916447648, 0.4401136822111329, 0.47515332207940697, 0.4869811982896317, 0.4951790415451577, 0.4769514951887779, 0.4820412202873642, 0.11506903070660168, 0.10522713022035335, 0.08806572133441093, 0.14598470996913948, 0.10309622788783179, 0.13275158461837688, 0.11835993637697262, 0.09448746029505706, 0.43966942143312426, 0.205362554216586, 0.20846733190444, 0.22623181065434328, 0.3528367730636919, 0.2874249664177988, 0.2138639904688897, 0.18570024537997554, 0.2544723719069081, 0.1588360242240986, 0.23938482219649282, 0.2553707555185736, 0.2274950231665972, 0.3969743965927144, 0.4357368545202239, 0.42631821438277273, 0.4327647030075986, 0.26324818858923715, 0.5097468713028384, 0.20478174637516278, 0.15947124626543951, 0.14963023528120978, 0.2893197046573446, 0.2958739885704573, 0.33937341635865714, 0.26615994194931614, 0.3018097746178642, 0.1550384382426957, 0.20969369007775795, 0.1915565932374046, 0.22520167234257915, 0.20309489346330978, 0.21404732976060736, 0.2179196175710072, 0.19201334777720236, 0.20063190134538722, 0.20509675673803218, 0.4707198545569339, 0.20937978372251542, 0.2076692725471463, 0.22921775449808468, 0.1934201829974771, 0.18824984535962908, 0.20145702021062462, 0.19482861416614028, 0.4975797527281125, 0.7562011940394013, 0.18569013209587093, 0.15286360853697478, 0.14882317948775892, 0.8425595895179785, 0.7770931039777625, 0.7535286979023152, 0.7435413378046134, 0.12408343666802069, 0.5298478016452413, 0.2050004559023506, 0.5701162275846354, 0.20388633414470114, 0.1988244508215512, 0.20560426271824306, 0.1854128749378503, 0.165021632368881, 0.18529952281662, 0.21735946281799046, 0.19286397977688008, 0.18415582630265925, 0.20258766292856212, 0.19524025578030457, 0.191058586629133, 0.18482244334193898, 0.19704479582515433, 0.22862628930223583, 0.09194806771581077, 0.09175522495277422, 0.0922125858112458, 0.11684289089409727, 0.0962286311580921, 0.15596202682282145, 0.09211527793837926, 0.09364642940504742, 0.12122881102309224]}, "mutation_prompt": null}
{"id": "a58c5d2a-cd78-4a01-891e-f13085bc1037", "solution": "import numpy as np\n\nclass QuantumEnhancedMultiStrategySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8\n        self.cr = 0.9\n        self.w = 0.6  # Slightly increased inertia weight\n        self.c1 = 1.7  # Increased co-evolutionary factor\n        self.c2 = 1.3  # Increased co-evolutionary factor\n        self.strategy_prob = 0.5  # Probability of strategy selection\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                if np.random.rand() < self.strategy_prob:\n                    # Quantum-inspired Differential Evolution\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                    x0, x1, x2 = self.population[indices]\n                    mutant_vector = self.quantum_superposition(x0, x1, x2)\n                else:\n                    # Random perturbation as an alternative strategy\n                    mutant_vector = self.population[i] + np.random.normal(0, 0.1, self.dim)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedMultiStrategySwarmOptimization", "description": "Quantum-Enhanced Multi-Strategy Swarm Optimization (QEMSSO): Combines quantum superposition with adaptive strategy selection for improved exploration and exploitation.", "configspace": "", "generation": 71, "fitness": 0.3197704285928478, "feedback": "The algorithm QuantumEnhancedMultiStrategySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8661425263897411, 0.8401727369778202, 0.8398635721600174, 0.8699304227448087, 0.8514830279133044, 0.8721363943427854, 0.8579524713798944, 0.853761777772203, 0.8687853626942635, 0.7062414048254602, 0.6135718887504817, 0.6844588443814198, 0.6907295959081756, 0.6608293497097338, 0.6277320632850816, 0.6680053991990522, 0.6598448131522885, 0.5928603672279285, 0.1522623116132963, 0.11426743946856133, 0.156452926835699, 0.12772248637876693, 0.12984544918840513, 0.18386554874615313, 0.18041563374055114, 0.12220386088614965, 0.14591086056348546, 0.11235066861833076, 0.14391149211560783, 0.12160668917534989, 0.14097980149683675, 0.11387551504687621, 0.1413678022780328, 0.10739664704704632, 0.11378781085774559, 0.11235454391828881, 0.9896139939154186, 0.9938245873219255, 0.9903215051810711, 0.9908072750773906, 0.9902152850500169, 0.9865288038951536, 0.9910937285703307, 0.9871128472985964, 0.9869921743000764, 0.7108453319808599, 0.7158092174193655, 0.6686028253578236, 0.6976879752065456, 0.699535647650182, 0.7048408497070779, 0.6818055753538674, 0.726126739023522, 0.6820806488308526, 0.23012692055700523, 0.14126683486720393, 0.22844313076040912, 0.2742365734058264, 0.1943524759224009, 0.21872129483183256, 0.24344712507950894, 0.15197497383830272, 0.11488964636320265, 0.1298629720236526, 0.22187058853096597, 0.2238123603590102, 0.281199360597406, 0.2550831686404853, 0.24520220726245323, 0.2243920319990531, 0.1307685833804504, 0.2517170137262633, 0.2550126436167217, 0.23586619479554827, 0.21887144328724661, 0.2621090471423757, 0.26000031847133664, 0.2541385089945142, 0.28503996664843845, 0.31064816506964554, 0.23514385152607864, 0.007455882673848668, 9.999999999998899e-05, 9.999999999998899e-05, 0.042226884729495984, 0.023696099079659194, 9.999999999998899e-05, 0.0022602698046386704, 0.00010081808941653225, 0.0034987005047212305, 0.05388968747300127, 0.06306824202391548, 0.07151548094076388, 0.05679843903070636, 0.00030474343735387155, 0.011480212527867129, 0.16729525441748372, 0.09339505384470836, 0.027392775128670666, 0.09644038695079593, 0.03744852815038324, 0.06945741831599495, 0.09686090969328565, 0.1335277589471452, 0.12179210840160881, 0.24868261450717577, 0.0974976776774864, 0.07012826719965015, 0.09662798254985394, 0.13550512355060196, 0.12358114018362243, 0.13393773574635393, 0.12453330838947763, 0.13975167231491126, 0.08858310615322718, 0.05758828336743249, 0.08234973917828425, 0.5302919996626927, 0.5420688835123153, 0.5398035693859506, 0.5965979880061335, 0.5272124501510519, 0.5890036216934555, 0.5637996359461248, 0.585148113683817, 0.5716285997585882, 0.15857186826260827, 0.12538878479365645, 0.09084287628258392, 0.13887306289109402, 0.0946053617805026, 0.0998739050138081, 0.17699692897104868, 0.11929849327457398, 0.12119588415402816, 0.468085903314466, 0.19412765650676633, 0.3842668685662822, 0.4721283281565356, 0.37619858355554825, 0.19632237805740105, 0.21630066973182815, 0.24934456856357423, 0.4572804957179625, 0.4491963039817498, 0.3448941878156615, 0.3353812131083447, 0.43067580177473086, 0.311224693988561, 0.4128668188247264, 0.47073088074190406, 0.5617363445032324, 0.5351974582624082, 0.1945829061283053, 0.23342599042341694, 0.29105494080490457, 0.33926667364389407, 0.25896970440095457, 0.28485781341563765, 0.2185089909646899, 0.29809102081691796, 0.15339288057400224, 0.2312815503933281, 0.23763881997731828, 0.23594589346903594, 0.24583286581484676, 0.2512956197807833, 0.283180544660277, 0.2292246842820368, 0.2154980488945739, 0.19680147767333023, 0.22554181452484579, 0.7565848723499489, 0.2272631201261679, 0.19818328399417806, 0.25369502054744564, 0.21109328989434084, 0.25351441530168406, 0.17432549005025044, 0.18529782839444264, 0.18914039328730392, 0.18765856443460238, 0.8984442204082885, 0.9144789843562591, 0.18818636753027818, 0.13112373456628867, 0.16216707190060464, 0.16995100925454465, 0.8584257888942111, 0.155265739688205, 0.210408251721241, 0.8024198375996024, 0.2093964060003528, 0.21242363202821357, 0.21212871953316392, 0.10532441271917647, 0.15635637108508071, 0.7575571549177018, 0.20851581712128087, 0.18375711481657842, 0.1963911629513455, 0.18691881648590025, 0.20493889950189625, 0.21371169248018318, 0.196680378377594, 0.19268104032583455, 0.18659960448670065, 0.1039999398882333, 0.10717293541070427, 0.1034472689816599, 0.07999723477882215, 0.0973151507533605, 0.1308235258421221, 0.14365859239455736, 0.10286590961471209, 0.09247586361064353]}, "mutation_prompt": null}
{"id": "fdd4f79f-6425-495d-8bf6-a5eb689fe3b4", "solution": "import numpy as np\n\nclass QuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5\n        self.c1 = 1.6\n        self.c2 = 1.2\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def adapt_parameters(self):\n        progress = self.eval_count / self.budget\n        self.w = 0.9 - progress * 0.5  # Linearly decrease inertia weight\n        self.c1 = 1.5 + progress  # Gradually increase cognitive factor\n        self.c2 = 2.0 - progress  # Gradually decrease social factor\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            self.adapt_parameters()\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredCoEvolutionarySwarmOptimization", "description": "Quantum-Inspired Co-Evolutionary Swarm Optimization with Adaptive Parameters: Enhances exploration and exploitation by dynamically adjusting control parameters based on optimization progress.", "configspace": "", "generation": 72, "fitness": 0.22705975841335532, "feedback": "The algorithm QuantumInspiredCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.61335422422755, 0.6070436200320316, 0.594411363408349, 0.6171732474192011, 0.6378810502125061, 0.1902874419122702, 0.18194301268133795, 0.6060625998602787, 0.5775501079805181, 0.2872025420781137, 0.36056745239928123, 0.1841734332142212, 0.28489400588272196, 0.18473627127123282, 0.2682915707449227, 0.3917687867940245, 0.2916728314366881, 0.3425812090284991, 0.10766801545773963, 0.13280983329670693, 0.11421914177261983, 0.11286511525403131, 0.11867756732271428, 0.13961606985202601, 0.11857828001554549, 0.11056545825896047, 0.13246414785966698, 0.12886254000990172, 0.12727746714226562, 0.11361813851192115, 0.12000617800717317, 0.09438672345904964, 0.06844420896216652, 0.057068479247670445, 0.12707515695822336, 0.12428230283499175, 0.9943841200241702, 0.9932960971633268, 0.9855118377135382, 0.9827043045030334, 0.9934658026728125, 0.9943544955322036, 0.9911233422597209, 0.9934869974394281, 0.9892892817119405, 0.4138067519061278, 0.05948836630426246, 0.3820788915120248, 0.3897166069258613, 0.3900587028870981, 0.04318371903119134, 9.999999999998899e-05, 0.08667964182896992, 0.3739067738746873, 0.16686855185590466, 0.5963845104058927, 0.13301145931647584, 0.20158082350717454, 0.18019578779666923, 0.11528099233151301, 0.22139735119338733, 0.19023732725073794, 0.22324574644007233, 0.14508881266531348, 0.14659122608077957, 0.15234340718290207, 0.168770554444449, 0.15097114137642298, 0.07093157573960585, 0.07792130752448279, 0.14525761594959696, 0.10723904425683106, 0.14318645602370783, 0.13665684651571286, 0.12274896537611024, 0.13893244938507565, 0.11553032374299277, 0.14589591208661445, 0.15279248414960056, 0.10029587633326686, 0.20372473044692885, 9.999999999998899e-05, 0.028321366689619376, 9.999999999998899e-05, 0.008702438546017599, 0.01221827252373242, 0.017842999108201862, 0.01040765448986114, 9.999999999998899e-05, 0.005216619444878945, 0.05767783450028707, 0.024061466018596156, 0.08130493903991554, 0.05675767246622421, 0.04032397156266576, 0.10029491040480121, 0.04443882061520166, 0.056000675713376746, 0.06350180868370192, 0.07073111790799635, 0.019368647991772736, 0.058518300228340925, 0.07991771988664731, 0.04514633238856258, 0.050433961553493334, 0.05553152985099863, 0.08685231654230718, 0.05734053922819804, 0.07384181371981302, 0.0311926972398755, 0.079689113765532, 0.007505176264609559, 0.004633349021941124, 0.18048034149910885, 0.06208676531810475, 0.043198832194620285, 0.06376441759134921, 0.4351738753141722, 0.41974120456031927, 0.42578544722887135, 0.4815286104998132, 0.41439910227648236, 0.4390273937141135, 0.45467386413048305, 0.43596789422825344, 0.4286350403381989, 0.05022183331990748, 0.08806396513584169, 0.05166617960795372, 0.10671613732191998, 0.10272592296592775, 0.09941375807142994, 0.08984024310252825, 0.11686385805999544, 0.06635746109801843, 0.17761962119396923, 0.1760262746708675, 0.15895257010296338, 0.20258375656282301, 0.21610908403736473, 0.37237709425732535, 0.16939187961740865, 0.16526517307260236, 0.1794184278148816, 0.3138136987891388, 0.2996354014009426, 0.24416518817871946, 0.3737762391008377, 0.31709093265088273, 0.27283641509046463, 0.384822539695015, 0.16064616682966548, 0.2091518454462309, 0.22732611403447545, 0.21484394588271116, 0.11183139235340389, 0.19251592663152883, 0.26489311042526076, 0.21329709282641907, 0.1786512697447371, 0.2158512716822425, 0.26081151498356425, 0.20175130547532139, 0.18592125576803853, 0.18834069142197396, 0.19211257077461064, 0.19693695513804366, 0.19209660631452508, 0.20859142372340422, 0.21233422788360112, 0.19834474941633973, 0.18562674176674998, 0.4610680002045251, 0.21107541129371354, 0.37350710144179633, 0.20723217413854766, 0.2094380595552573, 0.19504102486794506, 0.18449487997169634, 0.19676551603315862, 0.6100350451780759, 0.17089899306006662, 0.12430559130614216, 0.16172918279166149, 0.6783656684631054, 0.6657257136741594, 0.6481523552287126, 0.18233769326126692, 0.170457906499891, 0.10891039033827687, 0.20500758271264763, 0.11962261494154736, 0.19762107718319577, 0.16488810227542328, 0.36522663585567683, 0.1268036798018971, 0.16361338624638921, 0.1941505878659182, 0.19299277235969137, 0.19848671494008996, 0.18752656394137812, 0.1906036948759392, 0.17817842622639146, 0.22112324586440868, 0.1942821430252084, 0.20325517309781438, 0.21051769045722568, 0.09242783522943954, 0.09936321437838525, 0.08278119710075493, 0.07616198328999635, 0.08331148170005509, 0.090512062779185, 0.07656869315338444, 0.08372198079698556, 0.08665527466834844]}, "mutation_prompt": null}
{"id": "d4154c9a-c748-4a83-b334-3c8018a70ff5", "solution": "import numpy as np\n\nclass QuantumInspiredCoEvolutionarySwarmOptimizationWithAdaptiveMomentum:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5\n        self.c1 = 1.6\n        self.c2 = 1.2\n        self.adaptive_momentum = np.zeros((self.population_size, self.dim))\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        beta = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (beta * x1 + (1 - beta) * x2)  # Added beta for more stochastic influence\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics and Adaptive Momentum\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                if self.personal_best_scores[i] < self.global_best_score:\n                    self.adaptive_momentum[i] = self.c2 * r2 * (self.global_best_position - self.population[i])\n                else:\n                    self.adaptive_momentum[i] = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                \n                self.velocities[i] = self.w * self.velocities[i] + self.adaptive_momentum[i]\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredCoEvolutionarySwarmOptimizationWithAdaptiveMomentum", "description": "Quantum-Inspired Co-Evolutionary Swarm Optimization with Adaptive Momentum (QCESO-AM): Enhances exploration and exploitation balance by introducing adaptive momentum in evolutionary dynamics.", "configspace": "", "generation": 73, "fitness": 0.34016542709091663, "feedback": "The algorithm QuantumInspiredCoEvolutionarySwarmOptimizationWithAdaptiveMomentum got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8668133177978341, 0.8786699158114082, 0.8869830925568648, 0.869876982530648, 0.8653191300934688, 0.8819345139629263, 0.8784331793082031, 0.8746079446314102, 0.864963871262646, 0.745199782553617, 0.7416158141656382, 0.6864816730595349, 0.7395719045208674, 0.7291877053057638, 0.7270639198539635, 0.7238118619345716, 0.7396596520844969, 0.6855427458818104, 0.17486360863703854, 0.11565326092853412, 0.14769126438107028, 0.6505331917777835, 0.15216687599081125, 0.16084108495524707, 0.15244672214549337, 0.15326610271265906, 0.12973518659946803, 0.11178550005682297, 0.09471981395510409, 0.12430405197184957, 0.12819438588211762, 0.09662132586579097, 0.1340217718656409, 0.12687731614026665, 0.10611316527470649, 0.13976550210447114, 0.9862403276981209, 0.965564047747511, 0.9296460530614973, 0.9458193439404108, 0.9473376335873924, 0.9399693312009998, 0.9382779570906907, 0.9297846698619985, 0.9514539443131201, 0.680789782556027, 0.7172858343563353, 0.5416660781511639, 0.6870067443614152, 0.5751491948231281, 0.6459536787057989, 0.5965555926924705, 0.5830718194108555, 0.5975458151261694, 0.38034113891667287, 0.1706933819223585, 0.16973596099385413, 0.2126521611194354, 0.8927458719354571, 0.20961707451388434, 0.17675887671874713, 0.23501679045925938, 0.3917352058653558, 0.12853580505424111, 0.16927504375375757, 0.17090586245909167, 0.1981674729869234, 0.1267819190159447, 0.17217319252501095, 0.1747661606107377, 0.14970895457229272, 0.18713754561156826, 0.18699086401635912, 0.18536441551981964, 0.1582229032196747, 0.20913282650275544, 0.13099191459616355, 0.13715589634777048, 0.19677425248476976, 0.1910825579636125, 0.2180224618308807, 0.003367058139907342, 0.06012620575849903, 0.150209512865201, 0.11190622115405435, 0.10276582044493499, 0.03878696053368802, 0.16686343228450207, 9.999999999998899e-05, 0.14067384451035758, 0.11391863650048506, 0.13484485997138584, 0.14464965773480876, 0.048598333742265076, 0.11134601672322042, 0.12658715841875035, 0.14556962415875574, 0.10872287103417189, 0.18611745041472683, 0.1356388857405646, 0.22188775036479047, 0.09668897693918355, 0.14217705995047925, 0.1426841723107244, 0.2690323181663119, 0.1433453014528312, 0.2294041583945331, 0.09082204500942681, 0.16301842946240108, 0.20264483487830054, 0.08933590785150614, 0.39995980521159535, 0.19184877745239248, 0.060711497799356806, 0.18880197957347122, 0.08401518383834916, 0.13868745901208257, 0.4904274850625915, 0.5748245306873528, 0.5616294393736713, 0.5922515333284888, 0.5000047491576398, 0.5103510511704679, 0.6259984479219488, 0.5538645494435038, 0.5492518327260436, 0.15388412397952322, 0.14519644630635298, 0.13254759239487213, 0.1384010853909322, 0.14043901387612567, 0.1305545046592531, 0.14043644088314577, 0.10253141091327767, 0.1493000395186258, 0.28332459087587836, 0.20713622227311024, 0.18147458274455341, 0.2815772495323223, 0.1987763880394774, 0.4108099930707171, 0.680388340508957, 0.37564887379525025, 0.28118416754494624, 0.4710718304686474, 0.45645611397684793, 0.18137381205407277, 0.6529728082453711, 0.6301322774715796, 0.36334175472294117, 0.44524911193835226, 0.6094250508515553, 0.43077851322199034, 0.30686160926116446, 0.2825165412872218, 0.21121809238046418, 0.26829920453082134, 0.4147049630563542, 0.251489239986902, 0.20812081382137326, 0.2805926904006576, 0.22381776115333674, 0.2528875812428816, 0.2771402252370141, 0.22527780875641534, 0.2517386723436742, 0.263130984995405, 0.2751236404903813, 0.22136623077795414, 0.2729608458955636, 0.25582097910717905, 0.21444962634723774, 0.1810499733258042, 0.19663608127607712, 0.21943134104504392, 0.18502818631551576, 0.1945466585530995, 0.1934475638133586, 0.2117387974060594, 0.18787921710579436, 0.18598103640164731, 0.18770943785360716, 0.18646448944511662, 0.7874250587191802, 0.7730623433882423, 0.9130326447990379, 0.8948835728223866, 0.906444105315378, 0.16727408850696357, 0.7872979549066422, 0.6479354238846482, 0.4629645353140591, 0.2106122140380221, 0.20963524695892166, 0.7158868544629207, 0.20867165650317576, 0.16733341651565492, 0.09453404473217031, 0.19428708844013953, 0.21696660412320234, 0.1962054724760135, 0.19631045936973235, 0.20531465272476623, 0.23716668635858595, 0.20419952764870775, 0.19409374380048316, 0.2030223336042497, 0.1033448007090425, 0.11222625536839237, 0.0937099900497651, 0.13331645752008048, 0.10909154704958823, 0.13008889668920587, 0.10121439531394683, 0.12413782589859435, 0.09279639532250805]}, "mutation_prompt": null}
{"id": "0bcdf899-d49c-4eb7-88a3-49ecad3bf6bf", "solution": "import numpy as np\n\nclass HybridQuantumGeneticSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30  # Increased population size for diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted scaling factor for variation\n        self.cr = 0.85  # Adjusted crossover rate\n        self.w = 0.6  # Modified inertia weight\n        self.c1 = 1.4  # Co-evolutionary factor\n        self.c2 = 1.3  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        beta = np.random.rand()  # Introduced beta for enhanced superposition strategy\n        return alpha * x0 + (1 - alpha) * (beta * x1 + (1 - beta) * x2)  # Improved superposition formula\n\n    def genetic_crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.cr  # Apply crossover probability\n        offspring = np.where(mask, parent1, parent2)\n        return np.clip(offspring, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution with Genetic Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                trial_vector = self.genetic_crossover(mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridQuantumGeneticSwarmOptimization", "description": "Hybrid Quantum Genetic Swarm Optimization (HQGSO): Combines quantum superposition, genetic crossover, and swarm intelligence to enhance exploration and convergence.", "configspace": "", "generation": 74, "fitness": 0.31591676803486446, "feedback": "The algorithm HybridQuantumGeneticSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8244609198621078, 0.8224889309931888, 0.8351469480150157, 0.8401317488300984, 0.8234950441256588, 0.8260496710753729, 0.8281114437116166, 0.836397789550632, 0.8063556912924987, 0.5969321767092011, 0.6033391189848967, 0.5632680576160676, 0.6016774081855152, 0.5533270272820676, 0.5953833096603371, 0.6165733059363417, 0.6067032503219243, 0.6166214732827136, 0.1361128975597885, 0.14184639505595042, 0.11268557914657429, 0.17389113835423708, 0.15278037224658314, 0.15249098700528974, 0.12761122734437758, 0.1794619545431737, 0.10350524023639973, 0.12252294612581338, 0.1163078732200673, 0.09784452232784302, 0.10476270550768962, 0.11470299496421643, 0.10422360634465877, 0.10657933656885421, 0.13018333572721352, 0.1370350565774524, 0.9850408555454792, 0.9896286074823384, 0.9857813622582671, 0.9620987017434386, 0.9898252504753023, 0.985403989442607, 0.9861081821057125, 0.9847280443981469, 0.9911828785683704, 0.6833796157640383, 0.673512811595608, 0.6711405736790227, 0.6582839644405255, 0.6299668360443371, 0.6242305127461631, 0.6533135057298074, 0.5289168655262959, 0.04919052460414586, 0.38673160782333826, 0.8452156427361766, 0.3733029216993703, 0.3694470858058623, 0.276066529500948, 0.16041103024503212, 0.2175351778445921, 0.18022430698318515, 0.78274373580031, 0.23617242990135456, 0.2817727597657864, 0.22942947236382372, 0.12631841564742752, 0.24574424312243692, 0.11830379536128943, 0.24711207484440112, 0.2588547257934627, 0.25657110105750525, 0.23936075034675108, 0.23183512356244007, 0.2682225805490166, 0.25734218901422723, 0.25012982463831224, 0.26410965122175944, 0.27991955501082866, 0.24497133054320996, 0.265360608439547, 0.013118398599771486, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011577051390948556, 9.999999999998899e-05, 0.01029138899187565, 0.002714013729189668, 0.037450919920522074, 0.12967701238911122, 0.07166992007278639, 0.1359323411460518, 0.06800108082334866, 0.08256368534865122, 0.03318212367022988, 0.05600059762521237, 0.08093169418773194, 0.07419704947218886, 0.06422518783046582, 0.03243666637122955, 9.999999999998899e-05, 0.07396890554361957, 0.08300291610460953, 0.08894982144179298, 0.11430338419688191, 0.1067390818727526, 0.08766828510142555, 0.07721159359094676, 0.18480274222194926, 0.25867729242969606, 0.08972320327203542, 0.12960935809774599, 0.046355568126772995, 0.09907208438854942, 0.1488973075924378, 0.1450596245685587, 0.5585111099388329, 0.5341159965248947, 0.5540764230913112, 0.5904766457542592, 0.5549523879939622, 0.564865070075937, 0.5483950140432039, 0.5884499065250361, 0.5635143153246672, 0.12808047553290758, 0.12268717027957066, 0.11384049911701555, 0.15282543822506922, 0.09808055332474142, 0.10796480795721597, 0.14394051178209388, 0.09485009924822951, 0.13733193145884093, 0.25284519701481656, 0.2684383245337414, 0.6322878766153439, 0.33765751880001893, 0.3208369920058368, 0.5295864063215147, 0.30246147512184074, 0.1783253575544511, 0.3244246762101277, 0.27272806683179773, 0.2695655542081892, 0.2919881010943618, 0.5365663267369006, 0.35744565478372714, 0.24352201869938972, 0.39770148670149896, 0.5421430251606629, 0.5488979505864264, 0.31671994889532196, 0.2394567244854343, 0.30427401624210293, 0.2641160636536807, 0.26711740056892586, 0.32950935100198075, 0.222288111061398, 0.2676026874337546, 0.26504612893877066, 0.22973658136825892, 0.1829009483652586, 0.22873957369188203, 0.2123364721726142, 0.22524472389552497, 0.2708031257783151, 0.17101618627564896, 0.24367906808900275, 0.22756088360712357, 0.20191618413096157, 0.24896336589980517, 0.19215055256741986, 0.24217964430041106, 0.24187682348924655, 0.1852431161316176, 0.24602146242746847, 0.24129213304290542, 0.22136351833197354, 0.1869175127975813, 0.1756037799157366, 0.1873082942396408, 0.9130974354603107, 0.19980664568649453, 0.1312419529745693, 0.16151861686166724, 0.8865909712245366, 0.1670343590557093, 0.8520142141373327, 0.15648536778501732, 0.2109930740885433, 0.8131442475752694, 0.20827705245495798, 0.21095300203544787, 0.10476001027376847, 0.11293749332085701, 0.837250631855877, 0.23566939977943213, 0.23996228025353794, 0.2203128182271058, 0.1845131447296331, 0.20239497828099906, 0.1910661566543681, 0.1840134621056102, 0.1889099953188783, 0.19178813391537342, 0.09470408945341457, 0.12838602116221087, 0.10101929482229732, 0.11539103812342622, 0.09895954657386341, 0.15720401828801145, 0.08370508976298174, 0.09834654102896712, 0.08816187435137546]}, "mutation_prompt": null}
{"id": "7eb99808-9d68-4474-b1da-471c1657f1f3", "solution": "import numpy as np\n\nclass QuantumEnhancedAdaptiveCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5  # Inertia weight for convergence\n        self.c1 = 1.6  # Co-evolutionary factor\n        self.c2 = 1.2  # Co-evolutionary factor\n        self.w_decay = 0.99  # Adaptive inertia decay\n        self.f_adapt = 0.8  # Mutation control factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution with adaptive mutation\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced PSO with adaptive inertia\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Adapt inertia and mutation rate\n            self.w *= self.w_decay\n            self.f = self.f_adapt * (self.global_best_score / np.mean(self.personal_best_scores))\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedAdaptiveCoEvolutionarySwarmOptimization", "description": "Quantum-Enhanced Adaptive Co-Evolutionary Swarm Optimization (QEACESO): Incorporates adaptive inertia and mutation control to balance exploration and exploitation.", "configspace": "", "generation": 75, "fitness": 0.33392140809348564, "feedback": "The algorithm QuantumEnhancedAdaptiveCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.30.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.9206803041430837, 0.9229879045509958, 0.9119620251947147, 0.9211054517262389, 0.9259082956955803, 0.9249997091854264, 0.9218937469832846, 0.9244120453653233, 0.9198727872459171, 0.7895680892273619, 0.8265257043517156, 0.8377820910118275, 0.8235699953986837, 0.8317269824071281, 0.8370742658187152, 0.8372373385485263, 0.8437418981897824, 0.843021107779825, 0.18578785499130568, 0.08064366000648437, 0.10148781070560364, 0.18813102527760128, 0.16118018567996129, 0.10142930471275491, 0.11737078599100237, 0.14657460886468632, 0.12531501662332156, 0.13391872649382985, 0.09272362728794337, 0.082224534936433, 0.16091549639557434, 0.11121300891408459, 0.11154081730598941, 0.09568681752086228, 0.1115551754994003, 0.09495409914643604, 0.9929916700309176, 0.988982762582725, 0.9866805681040386, 0.9860664078043339, 0.985584645468932, 0.9861108977210495, 0.986667838871634, 0.9863824417577816, 0.9894229567323751, 0.874767358330397, 0.8638528069136873, 0.26148225895531096, 0.8545780030513925, 0.8395454980955696, 0.19921853976836779, 0.08786457331144937, 0.8508173487528605, 0.8655052981349847, 0.2304863716327007, 0.22607614781036445, 0.17130040402070512, 0.21027017250498403, 0.2804595371802461, 0.11693766475902301, 0.23522442082791106, 0.1795687302178549, 0.1841332938945186, 0.18991257752681046, 0.21501491888061453, 0.19008312287461204, 0.1977072091854658, 0.20725986897227056, 0.14793474975801113, 0.1634537804299534, 0.19453736533521138, 0.20273953759512542, 0.20835558828235579, 0.21087158762565938, 0.2266914493365505, 0.19170334362864028, 0.21976410032846128, 0.18799258500456828, 0.13471541498288786, 0.1316342749113142, 0.22950526244407488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053853444239451154, 9.999999999998899e-05, 9.999999999998899e-05, 0.1242677938208755, 0.06508436148283003, 0.05845143885289528, 0.07170224419707205, 0.06752633734249336, 0.1407044048069176, 0.060546953157825545, 0.11808987484931444, 0.04508763378451819, 0.0699664021016464, 0.09186289650965118, 0.059192214277057786, 0.1379745533605543, 0.1723305320707894, 0.1523155899618851, 0.22290563385617024, 0.0932663922747139, 0.07634895240607387, 0.1529576286631258, 0.06294297994176246, 0.13138956765475507, 0.11613738046684574, 0.1323326101193648, 0.07179577282149863, 0.09047013860451902, 0.07435208763066115, 0.19011082458082496, 0.5293564664790162, 0.5462046469610174, 0.5070370535461484, 0.5875635518815759, 0.525091751296624, 0.5124173790577766, 0.5519063307989437, 0.5632646789652069, 0.553964672877463, 0.16144333879552708, 0.1457362054412813, 0.11856841346953972, 0.08543310271043847, 0.11616521259049573, 0.16053270572198686, 0.11799834562547584, 0.13313830483459055, 0.1345308618036266, 0.657680099952773, 0.16582032346479425, 0.5415592901204185, 0.18485107970315562, 0.3615337303460978, 0.2846859016294022, 0.2635276591988047, 0.22483720006424834, 0.18041768492160204, 0.3595312648826826, 0.4511305591855329, 0.433793656707015, 0.5118263372026123, 0.7859143527189397, 0.35796850700279714, 0.4128954035222183, 0.37105349877801297, 0.4122738059823974, 0.23789896478022599, 0.23845824589258902, 0.16115935185160812, 0.347141270732667, 0.2852079953149991, 0.38524428296617075, 0.15693608415275373, 0.2736428207157101, 0.389787441135537, 0.23366823988988428, 0.2305894702752942, 0.2332652684002754, 0.2726236306919152, 0.3029118192406782, 0.21163554887169933, 0.23728776806270935, 0.2512921506200416, 0.2004001299836572, 0.22592198992354717, 0.20991023473103054, 0.18565467804221858, 0.2270479657562089, 0.18259045930196016, 0.1910985687139345, 0.19664687526927505, 0.20196576953605383, 0.21723937948929506, 0.92956508259401, 0.18864921036916982, 0.15434799707806757, 0.18881890204161467, 0.9242840158109137, 0.9492009435819562, 0.9463361171400544, 0.9454391620216761, 0.1779303506734473, 0.21259613554160273, 0.21314129503378776, 0.6907178666070966, 0.21334398235095164, 0.21284846300509264, 0.9500523062673194, 0.8505808055216529, 0.16885134429531334, 0.09480116840416808, 0.19172761689505347, 0.20134844789646422, 0.1984805523574038, 0.21857406549333525, 0.19677557418950709, 0.19039416692020372, 0.24762638453906882, 0.24145371798711845, 0.24731919751355314, 0.10912390761728352, 0.14182248406478015, 0.09713218447917005, 0.09957068637288924, 0.10974220463116269, 0.09494848484733798, 0.09837395575531105, 0.08826932961766232, 0.10161195874333484]}, "mutation_prompt": null}
{"id": "034d254b-a2f5-4111-80db-f69d476443f7", "solution": "import numpy as np\n\nclass QuantumTunnelingEnhancedCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5\n        self.c1 = 1.6\n        self.c2 = 1.2\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def quantum_tunneling(self, current_vector, best_vector):\n        tunneling_rate = np.random.rand(self.dim) * 0.2\n        return np.where(np.random.rand(self.dim) < tunneling_rate, \n                        best_vector + np.random.normal(0, 0.1, self.dim), \n                        current_vector)\n\n    def adapt_parameters(self):\n        self.w = 0.4 + 0.5 * np.sin(np.pi * self.eval_count / self.budget)\n        self.cr = 0.7 + 0.3 * np.cos(np.pi * self.eval_count / self.budget)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            self.adapt_parameters()\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_vector = self.quantum_tunneling(trial_vector, self.global_best_position)\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumTunnelingEnhancedCoEvolutionarySwarmOptimization", "description": "Quantum-Tunneling Enhanced Co-Evolutionary Swarm Optimization (QTECESO): Introduces quantum tunneling and dynamic parameter adaptation for improved exploration and convergence.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for +: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for +: 'NoneType' and 'float'\")", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {}, "mutation_prompt": null}
{"id": "c5b0ab6e-6d44-4060-a2cb-14b0ba834206", "solution": "import numpy as np\n\nclass QuantumEnhancedMultiDynamicsOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8\n        self.cr = 0.85\n        self.w = 0.6  # Adjusted inertia weight for better convergence\n        self.c1 = 1.4  # Co-evolutionary factor\n        self.c2 = 1.3  # Co-evolutionary factor\n\n    def quantum_mutation(self, x0, x1, x2):\n        beta = np.random.rand()\n        return beta * x0 + (1 - beta) * (x1 - x2)  # Quantum mutation with differential dynamics\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Mutation\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_mutation(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Multi-Dynamics Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedMultiDynamicsOptimization", "description": "Quantum-Enhanced Multi-Dynamics Optimization (QEMDO) combines quantum-inspired mutations with multi-dynamic interactions for enhanced exploration and convergence.", "configspace": "", "generation": 77, "fitness": 0.315741946874661, "feedback": "The algorithm QuantumEnhancedMultiDynamicsOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.7966226862025811, 0.8145096672764263, 0.8377895331738777, 0.8418894822375256, 0.8224248849261188, 0.7941763808881945, 0.8472134444083359, 0.7942991550163341, 0.7453997681604967, 0.6381598774472759, 0.6296002895715472, 0.6055898395471149, 0.5705127704714074, 0.599284582615535, 0.6692805544985333, 0.5774088742491195, 0.5704410923613455, 0.5982384127665292, 0.17733681994587747, 0.15070701022986266, 0.14032570122705457, 0.12747591236373224, 0.6123516649277996, 0.12819229178418012, 0.13703004650281092, 0.13652087316879769, 0.11873138938795658, 0.11445182396684928, 0.09932411191134527, 0.11488225256984097, 0.10569295008395851, 0.10380792306931219, 0.11676102765918128, 0.11322764207567215, 0.12368151390209026, 0.13905525967832255, 0.9884024429641646, 0.9875812614511418, 0.9803448430805357, 0.9825424901999419, 0.9915942014861124, 0.991072608098501, 0.9874012296103871, 0.9873788207550341, 0.9876814603486972, 0.5653054349517228, 0.6006058226155089, 0.5693622975908144, 0.599561421100532, 0.4733336564778823, 0.6452698017686529, 0.6235801974979402, 0.5139949470640414, 0.6865852779116399, 0.34754055071897016, 0.35461263103312457, 0.2252522144326763, 0.346936384311314, 0.277152052990396, 0.272390992520557, 0.8452675704776398, 0.39148502355471915, 0.23050907177826008, 0.20454851819472009, 0.32869890550982206, 0.10170027434624185, 0.19701954894710594, 0.2064799025728914, 0.20670881817540643, 0.20619968191845228, 0.20662320101325526, 0.19725718343129905, 0.2373770352571325, 0.24081771335526914, 0.22414005954596983, 0.21602833188774762, 0.21744180838725036, 0.24915181118840124, 0.24748451170251606, 0.24249770976151352, 0.23685361790684412, 9.999999999998899e-05, 0.059482231092329085, 0.00646374407840522, 9.999999999998899e-05, 9.999999999998899e-05, 0.010889742343621722, 0.0462581162841178, 0.00017424260832155092, 0.05899204513973766, 0.1081764653574766, 0.11733172225224153, 0.08694259891295897, 0.05344374210798708, 0.1167631711613567, 0.09415430759714616, 0.1270272648557017, 0.05929167397472701, 0.08277607906310114, 0.1321212484135964, 0.06128775557421884, 0.20938644794971029, 0.10595409878319495, 0.14015030185135968, 0.10915249838050678, 0.13205036139977167, 0.092670209622288, 0.22283539045334044, 0.04415508344548813, 0.20415474870742245, 0.17291263309520077, 0.2383888555123559, 0.21374572051388874, 0.12956806303215018, 0.16908682624361115, 0.06733772307820585, 0.16884535888969565, 0.5252598299558422, 0.528367750257547, 0.5033700091434706, 0.5209201467550808, 0.5064826380392689, 0.529419409833137, 0.5934554777520527, 0.5364346911446172, 0.5338891781029151, 0.10987968294850303, 0.10689654466072518, 0.11167756866916712, 0.10649840216126927, 0.12810535657967537, 0.09066763370137654, 0.12936050055717607, 0.11815122924731336, 0.10612706703384212, 0.17916274572625646, 0.1752611837223541, 0.14901499835675835, 0.18872606224976696, 0.19229517103429916, 0.4387946923387389, 0.24291214410931172, 0.14870547803084333, 0.21152144907784554, 0.36429830245428685, 0.4109637795773059, 0.30091107298043984, 0.2971966772745761, 0.31701824665029876, 0.4757914282572754, 0.34476387593798385, 0.3660236218270786, 0.39973551666614016, 0.24524729243611432, 0.23623689882800514, 0.2557244840960542, 0.25202922376185555, 0.26189313905421074, 0.27036578211373097, 0.22791920697518886, 0.37108491503147556, 0.21917963781665006, 0.23158470853268132, 0.23799675948453847, 0.2505301780441811, 0.2782894853257232, 0.23589257514990536, 0.26437272063587414, 0.2771272472543571, 0.2440683603894117, 0.21987055914108788, 0.2172603447559489, 0.20700476200682072, 0.19779907240150818, 0.19236895810757948, 0.6981636950694743, 0.2214373063098941, 0.1780650878118637, 0.18425121872235517, 0.19875138976235285, 0.18587799097086832, 0.1857900089928497, 0.20903761506725227, 0.8927263779167482, 0.16503875113549182, 0.19864804287762794, 0.8343555783214726, 0.8850217104141468, 0.1687543793163302, 0.7027825067625919, 0.16829605423809757, 0.20789294363017974, 0.21080436070576924, 0.2103049007817186, 0.1553036621175099, 0.7264597279450388, 0.12808837854285515, 0.7878372927408797, 0.210696677777358, 0.19462978465669645, 0.23089095692448391, 0.19707843840544859, 0.1972754852752232, 0.20631327079972872, 0.22743985521233445, 0.18418591826975306, 0.1924236249550284, 0.09244148321572687, 0.09140682894030638, 0.10472910701679683, 0.11709667995865436, 0.09416285453979234, 0.08563930521508267, 0.09298017675571824, 0.11079830818332281, 0.11003559257358897]}, "mutation_prompt": null}
{"id": "0bd5428d-5a58-4964-be82-6ff5623f7328", "solution": "import numpy as np\n\nclass HybridQuantumAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted mutation factor for enhanced diversity\n        self.cr = 0.85  # Adjusted crossover rate for better trial vector generation\n        self.w = 0.6  # Increased inertia weight for improved exploration\n        self.c1 = 1.5  # Personal influence factor\n        self.c2 = 1.3  # Social influence factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        beta = np.random.rand()  # Changed variable name for clarity\n        return beta * x0 + (1 - beta) * (x1 + x2) / 2  # Quantum-inspired blending\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Adaptive Particle Swarm Optimization\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridQuantumAdaptiveSwarmOptimization", "description": "Hybrid Quantum-Inspired Differential Evolution and Adaptive Particle Swarm Optimization for Dynamic Search Balance.", "configspace": "", "generation": 78, "fitness": 0.32688960198257605, "feedback": "The algorithm HybridQuantumAdaptiveSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8537256692380729, 0.8796969512950623, 0.8740907863928619, 0.8679424161602449, 0.8586070140716104, 0.8746355428127156, 0.8786486654041671, 0.8588270197989099, 0.8760674370125843, 0.6208200675614031, 0.6976745258048567, 0.6428513629500363, 0.6751168287686921, 0.7138010761346825, 0.7028140519742548, 0.7115301083407597, 0.7498576598990443, 0.7139059379924448, 0.17345415613162152, 0.14164371906598294, 0.11521182097675742, 0.14041116746502014, 0.0960505046836242, 0.15373217582705778, 0.1811652716913008, 0.15723147691494066, 0.155049282210296, 0.0923355939051197, 0.15603818702485095, 0.09461647257024519, 0.14236498739453873, 0.1133095716374184, 0.09354692981878965, 0.10968395148781329, 0.1000007567149902, 0.14058511119694062, 0.9928822654585062, 0.9898733370494702, 0.987190408614598, 0.9868802016092536, 0.9869727960291497, 0.9869094018511292, 0.9895315070831907, 0.9894733196172139, 0.9908575415096932, 0.768900938417883, 0.7496287433292287, 0.7681248763131286, 0.7261228093190759, 0.6488843097165757, 0.7765090748831895, 0.08722898445323168, 0.7436782509151867, 0.08838059852794, 0.2266160112513942, 0.8810521444576587, 0.22841496901405678, 0.19376410525875176, 0.1941623248024522, 0.1922436522600116, 0.23295958643785775, 0.40012242780815754, 0.23869840529938546, 0.257041214209236, 0.2699569059144128, 0.2730791824762715, 0.27982533191618875, 0.13428070122071545, 0.2362124476858276, 0.128081305854586, 0.28622202099731353, 0.26663468861973594, 0.2540842884872223, 0.13361638798740838, 0.3315981445652135, 0.24966422976957936, 0.3069282950677509, 0.2919365282864286, 0.2808053635983082, 0.28262840536347944, 0.36840951540897215, 0.0027251729529219615, 0.015501706230108159, 0.0022562615033467903, 0.02828971336866959, 9.999999999998899e-05, 9.999999999998899e-05, 0.07162752361617841, 0.010688667400205354, 0.002206701338931305, 0.06282823634139734, 0.038621117048856624, 0.08713532122405887, 0.07179790399512731, 0.028827200163185074, 0.09666594169513942, 0.09887785494090928, 0.052507462066086696, 0.09160404050517501, 0.3050216777777953, 0.036242956837096774, 0.27486471075264185, 0.11005041896282197, 0.08302831529598531, 0.09340472459193794, 0.12461830561336118, 0.10035974499130118, 0.07095968801483943, 0.11539751771752393, 0.07509777440127874, 0.17078640176040882, 0.09720912438907903, 0.06279114746029024, 0.03882225130322836, 0.08085742641491811, 0.0822248058548617, 0.08202250593485838, 0.5681171543816366, 0.5429731097510332, 0.5644291146986858, 0.5363940294197629, 0.5399105917448387, 0.5660826124339914, 0.5684091104568851, 0.6027648809845922, 0.6052069436125114, 0.09269532828329685, 0.15937736778226463, 0.09152041278410084, 0.15028296088324955, 0.1433475057931708, 0.1861817955866164, 0.11905701073755681, 0.11767130539411241, 0.10925825269607903, 0.302296403737924, 0.23157423956833567, 0.7227071627507333, 0.41669872570512023, 0.1696303522951803, 0.11236561465755035, 0.2696201223281952, 0.21687248261674308, 0.307669693739848, 0.2561634211220457, 0.43352901074097794, 0.5064664891845361, 0.36995866987641635, 0.3998290497332069, 0.4005534586584577, 0.5892767074480959, 0.39809921302383877, 0.6044872644711131, 0.22232033638604987, 0.1382062545140379, 0.2694864608300327, 0.2102234705200129, 0.3351594923686605, 0.26229004870030614, 0.2483795021351689, 0.2817875017194035, 0.22062601282230265, 0.27096775803956474, 0.24513183500931734, 0.24249255668891212, 0.20285483336347665, 0.22457508846826024, 0.21679181234498934, 0.24354345839535496, 0.227690229317009, 0.2696350471172583, 0.18592711079403512, 0.20607624895232446, 0.24930253348856057, 0.8066595139433534, 0.22428345871040378, 0.18147264036747357, 0.2457538269595726, 0.20605974477277156, 0.22315008783066137, 0.17773147759557328, 0.18788150322856145, 0.1514183075449177, 0.15233592921795802, 0.9233025512385542, 0.9231757415366715, 0.14203254484643235, 0.8986576977211149, 0.1771476574387798, 0.7766130536764217, 0.2114908000518193, 0.7302080542959041, 0.2127313655931128, 0.21083407425531087, 0.8578616280771441, 0.21300512211685452, 0.16923881126396567, 0.10468572080073624, 0.18979101719644265, 0.21684013946487735, 0.17962134807265207, 0.1844011089002714, 0.19841344463699662, 0.1961234447913539, 0.23129557881037255, 0.18859820261031623, 0.18800143559250238, 0.10074915480321123, 0.08879746525497234, 0.10515576661417636, 0.10576594422532559, 0.07069958549148336, 0.1385672438852158, 0.0953092663843299, 0.10058739282403806, 0.12652748502582267]}, "mutation_prompt": null}
{"id": "715c1910-301c-4ce7-9161-9a272dc34ce3", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.7 + 0.3 * np.random.rand()  # Dynamic differential factor\n        self.cr = 0.8 + 0.2 * np.random.rand()  # Dynamic crossover rate\n        self.w = 0.5  # Inertia weight for velocity update\n        self.c1 = 1.6\n        self.c2 = 1.2\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Adaptive Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization", "description": "Adaptive Quantum-Inspired Co-Evolutionary Swarm Optimization (AQCESO): Integrates adaptive parameters and dynamic adjustments for enhanced convergence and robustness.", "configspace": "", "generation": 79, "fitness": 0.3474842392179377, "feedback": "The algorithm AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8998009518154344, 0.9063294495534282, 0.90294882164992, 0.9020660387286309, 0.9096741718346205, 0.9194141401444238, 0.9016192372823639, 0.902730072692185, 0.9091720517784653, 0.7881465963239299, 0.7780880473669904, 0.7920170381494898, 0.7771013013693178, 0.7726457886245235, 0.6608259383110104, 0.775466349639676, 0.7918587313570091, 0.8118310394527353, 0.15680554251019874, 0.12602476114172312, 0.16027565475476224, 0.14682991429732317, 0.15590788031452463, 0.11157458402609377, 0.144358838375234, 0.10074132165035043, 0.08940879916444533, 0.11665798876423306, 0.13346895714300933, 0.09501266055983137, 0.11035016656720964, 0.14215439023384147, 0.14203991834146779, 0.10508271826710336, 0.09646783594614006, 0.1329313995856064, 0.9927825907721777, 0.9889994806773923, 0.9838026922312157, 0.9859478696140956, 0.9862022281659371, 0.9834455938589285, 0.9859181585268633, 0.9865998409435128, 0.9942969521356806, 0.8252065656668528, 0.79142755316643, 0.7756343964690766, 0.8352929602480912, 0.8252523421648714, 0.835595164808377, 0.8114118569620314, 0.6586754572073101, 0.8221455732490236, 0.23081869439793168, 0.3929058387658262, 0.21111414064367617, 0.19304283197945138, 0.21466356585140156, 0.9258568397151831, 0.14613129102329836, 0.16903070317335422, 0.2466798259508678, 0.28380575735208013, 0.24356688795388415, 0.30971691429433257, 0.29482386232558633, 0.1348557479777155, 0.16497550484256063, 0.3163029754593295, 0.25424537325434693, 0.3140955661477095, 0.2848466934099372, 0.2807757533335813, 0.2796295375439678, 0.31296385279558325, 0.33051946511018593, 0.29244609790529763, 0.3000739502434824, 0.28756658795110035, 0.3045393735856089, 9.999999999998899e-05, 0.04379899927091335, 0.00865677927150299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015061615458319855, 9.999999999998899e-05, 0.02889773061587253, 0.13791181792891805, 0.05293505889565109, 0.22065046319561743, 0.03632530224612751, 0.0212394094258338, 0.041479534157690234, 0.06807461120956437, 0.11672492989018013, 0.04530737017182651, 0.037898539346347904, 0.17399587941345163, 0.23454260536745775, 0.09883914366275925, 0.11017913793926004, 0.07996512574024306, 0.25066997856676876, 0.14739253042718703, 0.17116480662645828, 0.06534422439859866, 0.17354124117456537, 0.0742688767076305, 0.03889527337597887, 0.0651490556513058, 0.2424184599161513, 0.11967464399685446, 0.11545997011918951, 0.0985948962069535, 0.5543750752100186, 0.6249301267843343, 0.5568993323089624, 0.6562481243098386, 0.5626496330193964, 0.5442229965534415, 0.5921792762459196, 0.6278465527307934, 0.5883481302712785, 0.07022418056377899, 0.10080350287155637, 0.12293834124472469, 0.1251053479020351, 0.190307879482834, 0.1412907905943226, 0.08912763143093183, 0.16252245765857587, 0.12569846414395525, 0.22187328399062256, 0.1931448857944027, 0.2819313703110322, 0.2627242229270209, 0.3000718777349429, 0.2307450327656836, 0.2222590229180007, 0.16757413080110384, 0.20983736455847035, 0.3984575187801087, 0.39329562413924035, 0.22308178932846068, 0.3616917590767188, 0.5669662934404667, 0.4332218989503205, 0.5847930494547702, 0.5093447529790931, 0.3795271625602016, 0.2911786134713714, 0.317080794743002, 0.20355646576981767, 0.4391588685955271, 0.2469805055585127, 0.3403996965244639, 0.15770819922908308, 0.27614229042838456, 0.24322332156444781, 0.25738978879661645, 0.29459337883593584, 0.29470208266044917, 0.2657578131677455, 0.22481574892288336, 0.2438274093204057, 0.2421210811423148, 0.2499215366780948, 0.2840855504823674, 0.18001343225198485, 0.18160101077203616, 0.17177683908443342, 0.1806244656839785, 0.21311425594157085, 0.19051674700553878, 0.19734767175540868, 0.19099669846540845, 0.17917037037735517, 0.1777090672519651, 0.18881308481594605, 0.15440721643345345, 0.17834744113128143, 0.9418250962815664, 0.9207145660509642, 0.9241930421891025, 0.9375956552158127, 0.17263000807731765, 0.7819390664713195, 0.21237154044127093, 0.8870420316033089, 0.2104632282672264, 0.21256816401854617, 0.9164600062246109, 0.2140275180939356, 0.16943068747954204, 0.8366748324901432, 0.18092389701995593, 0.19475301066471107, 0.20340740458649853, 0.24367047690408394, 0.19718519216379937, 0.22127117590221268, 0.18926022361525974, 0.22863838410306658, 0.21086294894410496, 0.10879877997894494, 0.1040240595343006, 0.09361532612137546, 0.08914118329678111, 0.09595210062970505, 0.1583606692594498, 0.07391717297878508, 0.08872265367094956, 0.11079722014916804]}, "mutation_prompt": null}
{"id": "73ed2491-cc92-45bb-8f8b-5b83ddc766ce", "solution": "import numpy as np\n\nclass QuantumInspiredMultiSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.sub_swarm_count = 3  # Introducing multiple swarms for diversified exploration\n        self.sub_swarm_size = self.population_size // self.sub_swarm_count\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted factor for better exploration\n        self.cr = 0.85\n        self.w = 0.6  # Modified inertia weight\n        self.c1 = 1.7  # Enhanced co-evolutionary factor\n        self.c2 = 1.5\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        beta = np.random.rand()  # Added additional random factor for flexibility\n        return beta * (alpha * x0 + (1 - alpha) * (x1 + x2) / 2)\n\n    def sub_swarm_optimization(self, sub_swarm_indices, func):\n        for i in sub_swarm_indices:\n            indices = np.random.choice(sub_swarm_indices, 3, replace=False)\n            x0, x1, x2 = self.population[indices]\n            mutant_vector = self.quantum_superposition(x0, x1, x2)\n            mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n            trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n            trial_score = func(trial_vector)\n            self.eval_count += 1\n            if trial_score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = trial_score\n                self.personal_best_positions[i] = trial_vector\n\n            if trial_score < self.global_best_score:\n                self.global_best_score = trial_score\n                self.global_best_position = trial_vector\n\n            if self.eval_count >= self.budget:\n                break\n\n        for i in sub_swarm_indices:\n            r1, r2 = np.random.rand(2, self.dim)\n            self.velocities[i] = (self.w * self.velocities[i]\n                                  + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                  + self.c2 * r2 * (self.global_best_position - self.population[i]))\n            self.population[i] += self.velocities[i]\n            self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n            score = func(self.population[i])\n            self.eval_count += 1\n            if score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = score\n                self.personal_best_positions[i] = self.population[i]\n\n            if score < self.global_best_score:\n                self.global_best_score = score\n                self.global_best_position = self.population[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n    def __call__(self, func):\n        sub_swarm_indices = [np.arange(i, i + self.sub_swarm_size) for i in range(0, self.population_size, self.sub_swarm_size)]\n        while self.eval_count < self.budget:\n            for indices in sub_swarm_indices:\n                self.sub_swarm_optimization(indices, func)\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredMultiSwarmOptimization", "description": "Quantum-Inspired Multi-Swarm Optimization (QIMSO): Introduces a multi-swarm framework with enhanced quantum updates for diversified exploration and robust convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {}, "mutation_prompt": null}
{"id": "227ef018-d9d1-431a-92b9-632c312e18bd", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5\n        self.c1 = 1.6\n        self.c2 = 1.2\n        self.adaptive_rate = 0.1\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def adaptive_learning_rate(self, score):\n        return self.adaptive_rate * (1 - score / np.max(self.personal_best_scores))\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                adaptive_lr = self.adaptive_learning_rate(self.personal_best_scores[i])\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + adaptive_lr * self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + adaptive_lr * self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization", "description": "Adaptive Quantum-Inspired Co-Evolutionary Swarm Optimization (AQCESO): Incorporates adaptive learning rates and quantum-inspired updates to enhance exploration-exploitation balance dynamically.", "configspace": "", "generation": 81, "fitness": 0.10185294048359138, "feedback": "The algorithm AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.2239978545843081, 0.20780286678772308, 0.27857126366391205, 0.17591600613090408, 0.12061901272038389, 0.22539611516368596, 0.13553411257212278, 0.16986869121611892, 0.10729805324190456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02120556798686757, 0.04655429500665653, 0.020834724697048168, 0.0833601859574743, 0.0786431291696903, 0.09903468114946468, 0.06483447797141895, 0.07326074034870778, 0.06769408857535197, 0.03669033952703138, 0.019851981732397328, 0.022445955820749597, 0.058778034493218057, 0.0497413559259825, 0.037369237610734296, 0.0280530897432818, 0.02679211391698555, 0.030134124788427807, 0.043310899834679506, 0.04590469186876267, 0.04400448706988702, 0.06294738678534906, 0.05671968503766789, 0.04737235610629831, 0.059189856204881486, 0.05431776348230832, 0.04480652504598981, 0.07038220074862633, 0.051820211194134935, 0.036663262740394886, 0.07335828258003729, 0.04589296528467035, 0.04244624146694609, 0.020358659666499967, 0.03023833851254587, 9.999999999998899e-05, 0.21272752959546104, 0.16610144014692685, 0.11830156417811499, 0.1258624716796155, 0.17505180853173063, 0.07926205519990759, 0.14521940008683343, 0.14630731867699487, 0.0949630566619839, 0.008552680964543313, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1214914540249511, 9.999999999998899e-05, 0.08865552681434363, 9.999999999998899e-05, 0.006398444056645691, 0.1137005763033423, 0.1294846881262991, 0.12259016289354419, 0.13238064482938194, 0.14541750589405222, 0.10951018224586062, 0.13397589687305245, 0.12207863888995385, 0.09937974911384195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07951138350825115, 0.1292493723595639, 0.08094227508537699, 0.11540021681223478, 0.0458932325609086, 0.07225177476663924, 0.10190106074912186, 0.10112553550383496, 0.06958693996440601, 0.05981003195565915, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18956530650096448, 0.14642547898400715, 0.19313885117463747, 0.16384095336001447, 0.14846322786787114, 0.14111754304492174, 0.19545342048548342, 0.24318130895863888, 0.26188478863825804, 0.010618355829316584, 0.012002095759654718, 9.999999999998899e-05, 0.04819960947256874, 0.04649227771689224, 0.06366370123779475, 0.0774784685385288, 0.052723022631660954, 0.07592991622593381, 0.19527086892323064, 0.1527496048802417, 0.1561460823194024, 0.14423719199064378, 0.1488139124597434, 0.1344061970545819, 0.15167201609649617, 0.11711269614205755, 0.14145291605168075, 0.1392452278453682, 0.18429630196067537, 0.14882956839953354, 0.17485098491931017, 0.22579661901671177, 0.22465878952912532, 0.14325621881136663, 0.1729407482689589, 0.13797438750071722, 0.07859420535413175, 0.13355205363955447, 0.09607839947996033, 0.14489940751940245, 0.19173542638739227, 0.16320798759124555, 0.08890115115520003, 0.12108707478711334, 0.08789152588117688, 0.1648247760749476, 0.16197551545362165, 0.1510502342437532, 0.19806039030138545, 0.2089726160897034, 0.20354728363539365, 0.202626025916536, 0.1843686189743966, 0.1878320012342739, 0.1683891657387394, 0.17908234882365182, 0.16336995449854474, 0.18600487150359557, 0.17212781210614736, 0.1618744381324424, 0.18495867252192533, 0.17150326254453852, 0.1669768106038768, 0.16504129024579017, 0.17946742672281324, 0.13917143915264274, 0.2607752015009974, 0.17178521203228758, 0.2735856088777986, 0.11751323588417872, 0.14894241984241396, 0.14703729517286845, 0.17886985083935592, 0.1671412840247849, 0.15690635726907853, 0.2130410391382891, 0.14112098802098405, 0.30672262210633205, 0.22442739427215097, 0.19385621510862638, 0.17104189601396125, 0.19174105446227663, 0.21868383858588347, 0.186777425445799, 0.19835152963544467, 0.19528973217626366, 0.2261131855323829, 0.17780126144959374, 0.19442489329448753, 0.21683343314002002, 0.08736724453447475, 0.06292045286508541, 0.06926161370226214, 0.06810170017399231, 0.08001195649567894, 0.12400618395434215, 0.10333394916843719, 0.08088962711225045, 0.07719806452645483]}, "mutation_prompt": null}
{"id": "cdafbe03-8802-49f0-bcda-0fc1c53617bd", "solution": "import numpy as np\n\nclass EnhancedQuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted scaling factor for quantum update\n        self.cr = 0.85  # Adjusted crossover rate\n        self.w = 0.6  # Enhanced inertia weight for particle swarm dynamics\n        self.c1 = 1.4  # Co-evolutionary factor\n        self.c2 = 1.6  # Co-evolutionary factor\n        self.adaptive_threshold = 0.1\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2  # Retained superposition for co-evolutionary interaction\n\n    def adaptive_mutation(self, vector):\n        mutation_strength = np.random.normal(0, self.adaptive_threshold, self.dim)\n        return np.clip(vector + mutation_strength, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution with Adaptive Mutation\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = self.adaptive_mutation(mutant_vector)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Inter-Population Communication\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedQuantumInspiredCoEvolutionarySwarmOptimization", "description": "Enhanced Quantum-Inspired Co-Evolutionary Swarm Optimization (EQCESO): Introduces adaptive mutation and inter-population communication to improve convergence and robustness.", "configspace": "", "generation": 82, "fitness": 0.3203251289793131, "feedback": "The algorithm EnhancedQuantumInspiredCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8273417339468953, 0.8472482605767601, 0.8495964854561383, 0.8587223025492552, 0.8471459080776433, 0.8480733653763524, 0.8559700176489727, 0.8540913567306706, 0.8210027037755628, 0.6338484395210656, 0.6283070094985345, 0.6091059005023415, 0.6428095727004601, 0.6953389463546678, 0.5678370046813919, 0.6007975347404398, 0.5361143153695634, 0.5862518353523234, 0.15217155661811188, 0.5931632582228084, 0.6546482001195633, 0.10628099360912924, 0.17792283476737702, 0.12926519925400315, 0.16893142358695545, 0.13828938927054446, 0.113979268854564, 0.11305173542604441, 0.13899016128455166, 0.09954504156447652, 0.16975616210905609, 0.10137938891432097, 0.10719968476430053, 0.1555705651457212, 0.14326219303792254, 0.6016732624354146, 0.9929069003811853, 0.9862055957754505, 0.9892512368517449, 0.9870372479526783, 0.9901284911427461, 0.9901378701543456, 0.9907278672446348, 0.9893376753636978, 0.9906427946488712, 0.6887412900057923, 0.6306756646339939, 0.6325626850440224, 0.6618612494129466, 0.5760436257112366, 0.6493163921118716, 0.6543884739195034, 0.6512351869038431, 0.6452558554523029, 0.21283541134304718, 0.2264936184256673, 0.22345395179388328, 0.36771863533759874, 0.21249960719990346, 0.21078674103866857, 0.2239496203139273, 0.820111469556606, 0.6427644797425218, 0.25751950353460584, 0.2295031136647543, 0.2143266737338625, 0.22661868710158828, 0.11703037653593762, 0.10558524134710878, 0.21308517587284836, 0.3813326375921172, 0.23455947847420233, 0.21596431965961682, 0.21420598331252183, 0.10954253575100925, 0.2124326727385173, 0.2009451581958921, 0.13512974223246188, 0.24907805715291575, 0.23610338872110048, 0.24595583865480575, 0.00030793696026831796, 9.999999999998899e-05, 0.004169167027072818, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11190441814394159, 0.0005659318176243211, 0.06162109630230028, 0.0461545962892993, 0.054299085797596125, 0.0874730141503991, 0.03238461030817996, 0.019038572392302555, 0.03555135477820026, 0.09725233769651309, 0.04590197690517894, 0.053168781990364344, 0.048442609941295456, 0.049444215888545306, 0.06028556373146787, 0.11019558104719018, 0.11978930783802477, 0.13986495960729317, 0.06534349069399159, 0.14807896967422263, 0.11391953079240724, 0.2252677109749336, 0.014034822596880936, 0.11129924796594859, 0.14316108356871715, 0.28523511805640855, 0.09073026581509858, 0.0936324517857895, 0.059933661853319053, 0.2794222537712082, 0.5820115089732321, 0.49782036557213327, 0.5086160215906377, 0.5863645674397404, 0.5425620747020428, 0.5714329406441433, 0.5296223859279441, 0.5553478153678604, 0.593246784615101, 0.10342776324911296, 0.11137398166925783, 0.06731438994479289, 0.1576696627239842, 0.10893180281450876, 0.08537909200647842, 0.06648225001891372, 0.11348594184939809, 0.13054427220542708, 0.45980562131580505, 0.2706432499997291, 0.15129572705983496, 0.5424978810432157, 0.2133665794415589, 0.3862308124922802, 0.16584994217083493, 0.257071019909491, 0.2222363491024678, 0.48103863300936534, 0.23073245901854933, 0.1787037225709639, 0.3687917183982543, 0.2507093344278839, 0.3954972636344156, 0.3511847548410786, 0.4064784019908584, 0.24323605156459793, 0.16011751659649143, 0.24284397184109885, 0.26966101264252185, 0.3324908453701182, 0.2165058010012929, 0.4006822773502561, 0.21882961484274177, 0.30483521627078614, 0.2866306540935535, 0.21561060351245054, 0.24283316136901345, 0.2051474136939745, 0.18157885363196125, 0.2290122756960783, 0.23071877185783018, 0.23976401517701318, 0.24851277063379051, 0.1682503090317652, 0.2072200935492038, 0.20078676987956934, 0.19265694618588847, 0.2039321738874239, 0.251976328221859, 0.208057513732818, 0.19158775850134302, 0.19959382139696313, 0.22941596564673217, 0.17177433183132385, 0.16892911863351023, 0.21358035586938828, 0.916656491929228, 0.15878506026288453, 0.9102457146883931, 0.12216402908662749, 0.16990575741474623, 0.1668697964696918, 0.6202221421122776, 0.11313303688220877, 0.7966027208678669, 0.6376786038361832, 0.2104574019427573, 0.8005910934145668, 0.10535882610106806, 0.16549528143962233, 0.8360279975719856, 0.1896464713910112, 0.19257399867308778, 0.20315846655320424, 0.2150657396708815, 0.21584915679686256, 0.19038278218412974, 0.19739559125816164, 0.22216379699253086, 0.19351977412003107, 0.10736589639391492, 0.07695264303001836, 0.11135853626660719, 0.07904300065747882, 0.08759613250403708, 0.11785421729661738, 0.10366153191832017, 0.09991668117245933, 0.11704512363307129]}, "mutation_prompt": null}
{"id": "0478e6ff-d845-4c12-8450-266da6694e3e", "solution": "import numpy as np\n\nclass HybridQuantumAdaptivePSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.6\n        self.cr = 0.85\n        self.w = 0.7  # Increased inertia weight for better exploration\n        self.c1 = 1.5  # Adaptive co-evolutionary factor\n        self.c2 = 1.3  # Adaptive co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.uniform(0.2, 0.8)\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2  # Smoothed superposition for adaptive interaction\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                adapt_factor = 0.5 + 0.5 * (self.budget - self.eval_count) / self.budget\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * adapt_factor * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * adapt_factor * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridQuantumAdaptivePSO_DE", "description": "Hybrid Quantum-Inspired Differential Evolution and Particle Swarm Optimization with Adaptive Parameters for Dynamic Exploration and Exploitation.", "configspace": "", "generation": 83, "fitness": 0.31407265857638145, "feedback": "The algorithm HybridQuantumAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8281056358385309, 0.8111215041672558, 0.8257127506586306, 0.8203460526326621, 0.8328367011614703, 0.8188457837606483, 0.8203178703104094, 0.8096568958014437, 0.7912356389379378, 0.524150376175739, 0.6254097533994518, 0.535215293227523, 0.5696031940467041, 0.5366183876564048, 0.6411509493395819, 0.5956434133440597, 0.5594626679387595, 0.6514320438193599, 0.09305623548127517, 0.12690982651890714, 0.17694767263360645, 0.12925270262802224, 0.15525659886515675, 0.14394016307637192, 0.17720388219450955, 0.12301223013310969, 0.13906333972762697, 0.13469967819735196, 0.14332478678414284, 0.1057287971075217, 0.13000368597666934, 0.13830442635050455, 0.14892516696981617, 0.13202529086980352, 0.12541665977292482, 0.0853259688668937, 0.9927471515111412, 0.9891236511321764, 0.9871327846345848, 0.9871790819426881, 0.9897446179970012, 0.9840982777578513, 0.9896226112714152, 0.9894202386214536, 0.99078059541233, 0.7001851726204109, 0.689702276067599, 0.05950071219353137, 0.6755920654388106, 0.5113206938283731, 0.5725408868064894, 0.0869972880641402, 0.6081595372923791, 0.6324526411880586, 0.22939786347686608, 0.22275688505756164, 0.8224033866209814, 0.19146292715070334, 0.20969791788619474, 0.2113758424975476, 0.840662699594481, 0.7525986620487567, 0.38727537928515576, 0.25690125019205556, 0.26662069145626066, 0.23186993209303242, 0.2643759542997949, 0.12238470478766905, 0.14171941774253538, 0.25292986490063873, 0.2759247947541782, 0.2573470357634775, 0.24401412338258943, 0.2580852501129408, 0.24914936389991493, 0.13012547909126804, 0.25434372866826505, 0.28860052542026315, 0.12626576615853102, 0.2738777502112879, 0.13001799302970363, 0.00507290518528003, 0.03275819167596383, 0.059302857941225584, 9.999999999998899e-05, 0.05467648884534104, 9.999999999998899e-05, 0.02689995550161617, 0.03631746244851908, 0.006735774841502451, 0.0960895475957384, 0.0877882527312529, 0.03258829863308221, 0.03991782167761215, 0.008754500249978037, 0.06651633416567271, 0.14510222672930917, 0.07269095717513796, 0.056555830119744854, 0.09577491131257576, 0.0225246318858372, 0.05903927045943713, 0.11212692894844656, 0.06719830761028533, 0.09627782997447154, 0.08993814418385682, 0.18238669291751552, 0.0682488054341357, 0.24428934670569813, 0.09164897234727143, 0.10446935496222176, 0.12291651046517038, 0.2783132307406653, 0.20118102444278374, 0.0803860783265754, 9.999999999998899e-05, 0.0813836758878086, 0.5817404509604642, 0.5355873716433586, 0.5690624409324518, 0.2095898483998928, 0.6248983724307944, 0.550247437863179, 0.5654252075559585, 0.5849796866521735, 0.5227594153577381, 0.09191881603915042, 0.1167599899490861, 0.12194117100009572, 0.09933031547955473, 0.10185980785093174, 0.11702425965945185, 0.09429287359820993, 0.6327482649171834, 0.12175219237813706, 0.3269625668441708, 0.18340018689040183, 0.3940526471314456, 0.1902871795738147, 0.18496095226792197, 0.28758745870323055, 0.18749574265576074, 0.19957842361005163, 0.45935034844780953, 0.31684454087551783, 0.42296934843884315, 0.38459600267071414, 0.4243346398759884, 0.43648053117555474, 0.2402613325659536, 0.2185304651257317, 0.5542393632542661, 0.18262546260365564, 0.33916831135718994, 0.2662701845511273, 0.16183236486942476, 0.27003811883700524, 0.26295788626418903, 0.2389279948974138, 0.2067717604366519, 0.3403128552359517, 0.4872047712082418, 0.2130010074220331, 0.220200076946388, 0.23271501330806177, 0.20989495449258877, 0.21162104113388414, 0.21974083799078714, 0.2739200994961908, 0.2289043214789479, 0.21063322695309494, 0.24382737893736584, 0.21910527613508068, 0.1837367738592739, 0.2218930941650228, 0.19511344039664957, 0.2242113759180543, 0.20625463578367254, 0.20386693587354865, 0.19489798515987444, 0.17709169576830575, 0.16472809812688816, 0.18560981239954222, 0.8792877791415799, 0.8827104197413004, 0.9085308481282597, 0.19665193562303473, 0.1363890345448493, 0.16924460484920656, 0.7654815098256709, 0.21239187574535223, 0.6370477294762603, 0.21191868732698727, 0.21126241981121574, 0.8040138535104906, 0.1991506067311789, 0.09483656482262992, 0.8030092372057552, 0.21307718650521035, 0.18441407645787478, 0.19595976939718507, 0.17854997550855023, 0.18964335604566696, 0.20297203507298778, 0.19039210816935848, 0.19786158715129865, 0.20368019151261985, 0.10603545672567216, 0.09379212017248717, 0.09926563939407662, 0.09618878855684454, 0.09895392704311057, 0.15847571949592587, 0.10071636413342744, 0.09227195994511406, 0.11467182009050936]}, "mutation_prompt": null}
{"id": "a101539a-88e0-4647-8139-bd8a86879441", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Increased for better exploration\n        self.cr = 0.9\n        self.w = 0.4  # Adaptive inertia weight for dynamic adjustment\n        self.c1 = 1.7  # Co-evolutionary factor\n        self.c2 = 1.3  # Co-evolutionary factor\n        self.adaptive_factor = 0.99  # Factor to decrease inertia weight\n\n    def adaptive_quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        beta = np.random.rand(self.dim)  # Adding dimension-wise randomness\n        return alpha * x0 + (1 - alpha) * (beta * x1 + (1 - beta) * x2)  # Enhanced superposition\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.adaptive_quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Adapt inertia weight\n            self.w *= self.adaptive_factor\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization", "description": "Adaptive Quantum-Inspired Co-Evolutionary Swarm Optimization (Adaptive-QCESO): Enhances exploration-exploitation balance with adaptive parameters and improved quantum superposition dynamics.", "configspace": "", "generation": 84, "fitness": 0.3322806604096346, "feedback": "The algorithm AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.30.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.9303079973909817, 0.9338238455111284, 0.9288302264144912, 0.9320306113341355, 0.934169221764452, 0.9319283266631593, 0.9268998680370227, 0.9371613267735908, 0.9332709888024041, 0.8578252153404855, 0.8268576572045218, 0.8547527567727624, 0.8561811769132348, 0.8569836114348393, 0.8443839800669632, 0.8759016281088122, 0.8707026918436493, 0.8188883051544434, 0.09320932753814226, 0.1898914073521768, 0.16200213322560553, 0.14522880306566144, 0.16193568674194136, 0.10200135819960943, 0.11976051955903966, 0.08999051296867766, 0.19063736454384017, 0.0793720431830468, 0.11777327143708172, 0.16156414058379065, 0.14394565785968438, 0.10041483176105126, 0.10516193756660253, 0.09313707261836279, 0.12604989797041577, 0.1104244209640276, 0.9908016775766548, 0.9899376495598092, 0.9827577870615645, 0.9876241735348873, 0.987405035930668, 0.9832176093333403, 0.9871491585194584, 0.9909262865978969, 0.9863928761705054, 0.8026456510272435, 0.23532840438932445, 0.8335666955776726, 0.8407172108835947, 0.3615787118093746, 0.8707951237563014, 0.6778346559175357, 0.8193078427788079, 0.8402880974209862, 0.2298571637590937, 0.4000917996906722, 0.1133023164271022, 0.2820235398074743, 0.16141635084368722, 0.21362547247546704, 0.9487132972893728, 0.11671498653626966, 0.22257487918318064, 0.19868278526293048, 0.3000448916465731, 0.20510357976520677, 0.1313280456331808, 0.19329522930652787, 0.12044758840082193, 0.20899931921568382, 0.13203915698603885, 0.25365617226908, 0.21801598079478612, 0.22819011082007312, 0.13138007675743724, 0.21762215556120057, 0.21757809706508469, 0.2189759677308074, 0.14772671088685307, 0.2553828278235515, 0.30832245418031057, 0.02041549698972378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048626275211756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09864393912785674, 0.07867874022995058, 0.03790352901638294, 9.999999999998899e-05, 0.024954209539084893, 0.009653073973087012, 0.10604875620479015, 0.05766846716406948, 0.14744602809016083, 0.32774712392940386, 0.36119072133741836, 0.25053860989697097, 0.09392291564784228, 0.31561124105231375, 0.1411754824841528, 0.15258330413661336, 0.10584160699896294, 0.07847956045775462, 0.08514312746816699, 0.01193295710406328, 0.12144502615093533, 0.05316027278332491, 0.057713308702314836, 0.09955853547973259, 0.08035785263844664, 0.05691242708584909, 0.08508359805820032, 0.5428054594129451, 0.5434446370416965, 0.5356107377926616, 0.5026834971703447, 0.5578653205724953, 0.5701550510953011, 0.6221796250425788, 0.5652735355090119, 0.6096141197023925, 0.1463056099162886, 0.11115260589118647, 0.06602270221022877, 0.14730292602109385, 0.0931541109571008, 0.16242471656387458, 0.1452690737004756, 0.13397394618270098, 0.11839735128777307, 0.1801863602065339, 0.2122884135174542, 0.1694386116397011, 0.2200596803349959, 0.17438904551290801, 0.23858364701954682, 0.212901512871975, 0.35318171151465017, 0.33172670517662395, 0.30803578832705136, 0.5408623215188099, 0.4378829640555749, 0.5410816836264409, 0.2370470159945961, 0.4422685015930382, 0.233825839748814, 0.44569582529462815, 0.3939766316731097, 0.25659167704061825, 0.23889416434106558, 0.26266012431370045, 0.2035622694563204, 0.17703554829848256, 0.2804645817935212, 0.16261206639770442, 0.4918894106173408, 0.1826737040994496, 0.2548662505177365, 0.22937250393080855, 0.25270280772641174, 0.21492019369672466, 0.23520048326175758, 0.23886739283284764, 0.23506303641831394, 0.27236860930033, 0.21911491260170646, 0.22630259690881294, 0.16558949610957951, 0.23260340401399449, 0.1799929256777525, 0.18757833876643903, 0.19934990710110256, 0.1960260216693901, 0.2305184331253356, 0.20898594798470993, 0.933598126355064, 0.1778521903225515, 0.11330916827675663, 0.16986666901357217, 0.15919307398807492, 0.9515627156930192, 0.14227343437299367, 0.10878243503515783, 0.9544288346990312, 0.7139404905583457, 0.6266102282759509, 0.48248336739254805, 0.440343641206871, 0.16918477969826162, 0.6334163785122509, 0.10500815055361468, 0.16828897312570845, 0.7396903669321103, 0.2356805788768216, 0.2123412523811502, 0.19296575414752437, 0.18896845207298674, 0.199065305897705, 0.19674207632873164, 0.20588746074636877, 0.21327566948234145, 0.20452874515645947, 0.10675351735169791, 0.17868589409004776, 0.14042968281704815, 0.10758801096870996, 0.08346060576414671, 0.09424336442517411, 0.09545628713417831, 0.10264142392986453, 0.14517983560642456]}, "mutation_prompt": null}
{"id": "067d3522-51f2-4aa8-aa5c-3cb3e75cfaef", "solution": "import numpy as np\n\nclass AdaptiveQuantumCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.7  # Adaptive inertia weight for better convergence\n        self.c1 = 1.5  # Adjusted co-evolutionary factor\n        self.c2 = 1.4  # Adjusted co-evolutionary factor\n\n    def adaptive_quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.beta(2, 5)  # Adaptive probability distribution\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.adaptive_quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumCoEvolutionarySwarmOptimization", "description": "Adaptive Quantum-Co-Evolutionary Swarm Optimization (AQCESO): Leverages adaptive strategies for quantum-inspired updates and co-evolutionary dynamics to enhance convergence rates.", "configspace": "", "generation": 85, "fitness": 0.2996230702935581, "feedback": "The algorithm AdaptiveQuantumCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.7967148162707989, 0.8107315828996692, 0.7980794506018424, 0.7896179574033061, 0.8034520547369624, 0.8121328243688697, 0.814959828115571, 0.75779872190827, 0.7957735726467112, 0.4508321439664774, 0.5033634001987144, 0.45489507231372006, 0.342175354701423, 0.5518974586419452, 0.5629981926863086, 0.48508864223137194, 0.5067848459034179, 0.04476987599927418, 0.17453726854424256, 0.14673543056272775, 0.10832258707404219, 0.13375932952890013, 0.1733789959116271, 0.12813922383587106, 0.14822254266093515, 0.14733353378631142, 0.11356593045626684, 0.1103960999881396, 0.10787839685879286, 0.11724072449407508, 0.10709850200155202, 0.09910687947335406, 0.10595181453855418, 0.12257304219103116, 0.11165641776137092, 0.10503136317154882, 0.9899803826224631, 0.9907362981057815, 0.9868419416202416, 0.9895290231910379, 0.9903176655427934, 0.9906875565922135, 0.990714521654447, 0.990681735897048, 0.9935763949327947, 0.4248469777122681, 0.6115568538905696, 0.059401128265781145, 0.5348133749586759, 0.5838437942510487, 0.5107676690057086, 0.0887887401959726, 0.049330344087141764, 0.0893848636313469, 0.2269307565227202, 0.22384507119464314, 0.7689744217226264, 0.870131472126751, 0.8153897961143062, 0.1932358467638201, 0.7307016186875996, 0.1499984505795926, 0.8038561060952267, 0.19779847047718024, 0.19745401690292097, 0.1271562849673934, 0.1279273406426279, 0.11443350878113345, 0.2082971623910138, 0.2075086931598824, 0.30241153618599814, 0.21732198678659664, 0.22254608058169412, 0.1972494826450576, 0.22526384821301648, 0.22118481946218083, 0.20383293471989705, 0.2221283211858729, 0.25099886929159, 0.2029106702304211, 0.2517951657383912, 9.999999999998899e-05, 0.057680848266171925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06538256727514813, 9.999999999998899e-05, 0.0037224257452141973, 0.12879064465917256, 0.030582852412809225, 0.07955722449669322, 0.05105922540824581, 0.10416791146189097, 0.029291514943166508, 0.030726232818466648, 0.1430124424574034, 0.12102894261595265, 0.04008161159107371, 0.20062022528841605, 0.03901696126607823, 0.06697325699649115, 0.08580409460666416, 9.999999999998899e-05, 0.06519540131376378, 0.10797098565400642, 0.06564690608431634, 0.20958018778805676, 0.0955488520137393, 0.09631581293688507, 0.03804760278469144, 0.15569755319763479, 0.036511412117975484, 0.07722908145023955, 0.05595481884070741, 0.11911270903900495, 0.48763345767988187, 0.5386428726990362, 0.5596527106674402, 0.5291977054343027, 0.5038969397662221, 0.38631580608073834, 0.5125148376590534, 0.54403562908011, 0.5432470144182773, 0.10906657498962291, 0.11335482589047119, 0.11542910501024961, 0.5970021799988336, 0.17269915562652682, 0.119378436133604, 0.13453296975307183, 0.10448013918357013, 0.11108109911861552, 0.48200795495501003, 0.22297514264529594, 0.1919141049529549, 0.21432708352369445, 0.2924847604462153, 0.19512289229648938, 0.45001684475908565, 0.17787767924469322, 0.2511805996256675, 0.4625361335336353, 0.4830854581669257, 0.4475729138422332, 0.4997563736977054, 0.45913585861736517, 0.3316302337195388, 0.47097366718572753, 0.5099405192931461, 0.22920719027997483, 0.12701416346187167, 0.2555422060677621, 0.23467352279791742, 0.3069580046233633, 0.23100684967815366, 0.31398564794511596, 0.2794332904932624, 0.22643145071898996, 0.22321477880509533, 0.2717069021535844, 0.22640673992747096, 0.21994834141217812, 0.25266756564652415, 0.23362343996149115, 0.23210577107624342, 0.21382899976074543, 0.2595866360200897, 0.23615979351684335, 0.5696815645418457, 0.20068897437702027, 0.20616115215630182, 0.21928389954446104, 0.2236643192964619, 0.20618013989422357, 0.19118032647560024, 0.19915396180549283, 0.6193950613117672, 0.18671662716079584, 0.18711481255561013, 0.16849863253817943, 0.15268631743602112, 0.14823746469265442, 0.16107557922279536, 0.1622981978479342, 0.7546536140725808, 0.18434266463478688, 0.689233600489676, 0.21075610440400838, 0.5897255955313602, 0.7125699294102913, 0.1690085895488994, 0.15543994598769673, 0.8197299567487233, 0.1563698778970316, 0.7544939103183455, 0.2141416884322369, 0.17669984106912529, 0.18867036461386355, 0.2059713957122239, 0.18526663888480432, 0.1934850254855517, 0.18938108479569338, 0.20132904614608638, 0.1982421247674463, 0.13406117354939473, 0.10382306118508278, 0.10022139796104623, 0.14649959135554058, 0.10031787546243998, 0.10964681849401792, 0.09004300300391821, 0.10188447944712897, 0.0912705968091414]}, "mutation_prompt": null}
{"id": "a758a023-920b-49c2-a7af-b85470149a35", "solution": "import numpy as np\n\nclass QuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5  # Adjusted inertia weight for better convergence\n        self.c1 = 1.6  # Co-evolutionary factor\n        self.c2 = 1.2  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2  # Adjusted superposition for co-evolutionary interaction\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredCoEvolutionarySwarmOptimization", "description": "Quantum-Inspired Co-Evolutionary Swarm Optimization (QCESO): Introduces co-evolutionary dynamics with quantum-inspired updates to improve exploration and exploitation balance.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.9026689098698047, 0.8918110522253344, 0.8993585625678288, 0.9007293153025685, 0.9103368119888468, 0.9152176507081792, 0.9011812949355866, 0.8946170577852918, 0.9034835233386136, 0.7943143893490382, 0.7375633793221008, 0.8130148197897451, 0.8087073114216992, 0.7723839526168574, 0.808272154270665, 0.7687340813982092, 0.7990324091638275, 0.7827370936042723, 0.160902825364873, 0.15892939536803385, 0.09320032942753564, 0.11724631514556016, 0.11048951154619846, 0.14652408932323413, 0.1168663886089164, 0.13411251402806612, 0.13140944807648247, 0.18584842590008643, 0.0832905405124249, 0.0824658898018511, 0.16071741325608435, 0.15912921044715023, 0.1041705768290263, 0.09956062200314841, 0.10068051821507285, 0.14369058368050847, 0.9929931593376271, 0.9889893680320351, 0.9866844010713257, 0.9860517239520872, 0.9856028604708126, 0.986113978553438, 0.9866638516592235, 0.9864157320268373, 0.9894241340455082, 0.7973515227092567, 0.8209386837891599, 0.7293913381494185, 0.82747554766647, 0.8312914106195766, 0.7788674457720964, 0.0877511466657237, 0.7599538148097049, 0.8321876859624798, 0.9064684438691055, 0.17092093371864125, 0.17123282416342644, 0.19306856064166, 0.2789565536435834, 0.1170599976943193, 0.1524492416900921, 0.17946211549586355, 0.4043175412639375, 0.2968405621343604, 0.30357306478479285, 0.29453689757761525, 0.1336284366129845, 0.3071199686823948, 0.10693181005834884, 0.2868068888981905, 0.3055442542769874, 0.2989931310837167, 0.28671478570928843, 0.2759189930873165, 0.2880986771662145, 0.30350605882496073, 0.3233322704393832, 0.3017112208127053, 0.3243908690844298, 0.3038586885837484, 0.3050838399196455, 0.012802259425667817, 0.06015843001517329, 9.999999999998899e-05, 9.999999999998899e-05, 0.05029717966337466, 9.999999999998899e-05, 0.027212938783946594, 0.01823718920301942, 0.0028864825761336643, 0.08925450485395892, 0.039241256296895566, 0.21031626255566183, 0.058775820500466036, 0.06347923626785212, 0.10916071135981764, 0.04883972412964199, 0.10141506364853792, 0.04552867246939729, 0.07486661166660868, 0.11187638421507762, 0.04093080079823397, 0.12492230439002139, 0.31394754806359515, 0.21053734453599382, 0.11729044331777405, 0.24003081517808933, 0.07730258774207954, 0.16196565608329916, 0.06674296800571011, 0.13068576486509498, 0.19543538330667787, 0.06152327391408541, 0.08816866279697555, 0.0841244031729188, 0.06111499607558979, 0.27529656625415533, 0.6113960737733211, 0.6042206762102539, 0.5494345518315911, 0.5630873925920346, 0.5960696462860832, 0.4930479295341429, 0.6029189630220181, 0.5761165811795408, 0.5895858486679801, 0.06837424524755187, 0.07978236064258215, 0.11172365549733154, 0.07247624609486447, 0.08864106140646888, 0.13129863025648902, 0.11264388502044564, 0.10703212778769611, 0.09289367122702585, 0.8327031289472442, 0.8154238806532796, 0.6578229602721019, 0.337587143847744, 0.29469925572327493, 0.29647170060245875, 0.21420169204834238, 0.2581494753136222, 0.16463596888265786, 0.4518292794245705, 0.44575665861494806, 0.5880567462992835, 0.4233877463630846, 0.6316199533482251, 0.365481598593386, 0.472748932117405, 0.49908680814752693, 0.6580504815373243, 0.2998559532116193, 0.3320100853953951, 0.30023327522685084, 0.26196397496892243, 0.33654285819340946, 0.384788579004921, 0.17485442445623378, 0.2736222171342534, 0.25038850736501306, 0.2406989245166422, 0.2947481511633847, 0.27085122845996645, 0.21539031917140639, 0.2054001756208188, 0.22116095555631132, 0.2401845324119103, 0.2338637966875835, 0.22862870578242855, 0.19138839319345402, 0.19072238204707448, 0.19535424646964383, 0.203480061748873, 0.2040424882277837, 0.1903545257934971, 0.21197205347399706, 0.7949534713843694, 0.20088963655609482, 0.9239141918865942, 0.18856300723922959, 0.1542682082761586, 0.18863752838243886, 0.17256065688354616, 0.9471489171632774, 0.9363523835355082, 0.9377604717816099, 0.17763900865424764, 0.21210681638229245, 0.2128761175437639, 0.8447932956591122, 0.21286155583470723, 0.21268677557624438, 0.9419547020142618, 0.8397269523571729, 0.1686899757961191, 0.09480352550621429, 0.22610756666410448, 0.22606058818825037, 0.1945052435221174, 0.20636722849887223, 0.2384334483295928, 0.21989694815745053, 0.1917144484184975, 0.21838743595773558, 0.18477734439506677, 0.09868073450030024, 0.12451411233696963, 0.07960739216636248, 0.10476690052657267, 0.09928809029942198, 0.13863876245974838, 0.0981448398186503, 0.09668022881175298, 0.1131086762660809]}, "mutation_prompt": null}
{"id": "bdefca4f-8035-4845-9062-2cce19ed15c7", "solution": "import numpy as np\n\nclass QuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5  # Adjusted inertia weight for better convergence\n        self.c1 = 1.6  # Co-evolutionary factor\n        self.c2 = 1.2  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2  # Adjusted superposition for co-evolutionary interaction\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredCoEvolutionarySwarmOptimization", "description": "Quantum-Inspired Co-Evolutionary Swarm Optimization (QCESO): Introduces co-evolutionary dynamics with quantum-inspired updates to improve exploration and exploitation balance.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.9026689098698047, 0.8918110522253344, 0.8993585625678288, 0.9007293153025685, 0.9103368119888468, 0.9152176507081792, 0.9011812949355866, 0.8946170577852918, 0.9034835233386136, 0.7943143893490382, 0.7375633793221008, 0.8130148197897451, 0.8087073114216992, 0.7723839526168574, 0.808272154270665, 0.7687340813982092, 0.7990324091638275, 0.7827370936042723, 0.160902825364873, 0.15892939536803385, 0.09320032942753564, 0.11724631514556016, 0.11048951154619846, 0.14652408932323413, 0.1168663886089164, 0.13411251402806612, 0.13140944807648247, 0.18584842590008643, 0.0832905405124249, 0.0824658898018511, 0.16071741325608435, 0.15912921044715023, 0.1041705768290263, 0.09956062200314841, 0.10068051821507285, 0.14369058368050847, 0.9929931593376271, 0.9889893680320351, 0.9866844010713257, 0.9860517239520872, 0.9856028604708126, 0.986113978553438, 0.9866638516592235, 0.9864157320268373, 0.9894241340455082, 0.7973515227092567, 0.8209386837891599, 0.7293913381494185, 0.82747554766647, 0.8312914106195766, 0.7788674457720964, 0.0877511466657237, 0.7599538148097049, 0.8321876859624798, 0.9064684438691055, 0.17092093371864125, 0.17123282416342644, 0.19306856064166, 0.2789565536435834, 0.1170599976943193, 0.1524492416900921, 0.17946211549586355, 0.4043175412639375, 0.2968405621343604, 0.30357306478479285, 0.29453689757761525, 0.1336284366129845, 0.3071199686823948, 0.10693181005834884, 0.2868068888981905, 0.3055442542769874, 0.2989931310837167, 0.28671478570928843, 0.2759189930873165, 0.2880986771662145, 0.30350605882496073, 0.3233322704393832, 0.3017112208127053, 0.3243908690844298, 0.3038586885837484, 0.3050838399196455, 0.012802259425667817, 0.06015843001517329, 9.999999999998899e-05, 9.999999999998899e-05, 0.05029717966337466, 9.999999999998899e-05, 0.027212938783946594, 0.01823718920301942, 0.0028864825761336643, 0.08925450485395892, 0.039241256296895566, 0.21031626255566183, 0.058775820500466036, 0.06347923626785212, 0.10916071135981764, 0.04883972412964199, 0.10141506364853792, 0.04552867246939729, 0.07486661166660868, 0.11187638421507762, 0.04093080079823397, 0.12492230439002139, 0.31394754806359515, 0.21053734453599382, 0.11729044331777405, 0.24003081517808933, 0.07730258774207954, 0.16196565608329916, 0.06674296800571011, 0.13068576486509498, 0.19543538330667787, 0.06152327391408541, 0.08816866279697555, 0.0841244031729188, 0.06111499607558979, 0.27529656625415533, 0.6113960737733211, 0.6042206762102539, 0.5494345518315911, 0.5630873925920346, 0.5960696462860832, 0.4930479295341429, 0.6029189630220181, 0.5761165811795408, 0.5895858486679801, 0.06837424524755187, 0.07978236064258215, 0.11172365549733154, 0.07247624609486447, 0.08864106140646888, 0.13129863025648902, 0.11264388502044564, 0.10703212778769611, 0.09289367122702585, 0.8327031289472442, 0.8154238806532796, 0.6578229602721019, 0.337587143847744, 0.29469925572327493, 0.29647170060245875, 0.21420169204834238, 0.2581494753136222, 0.16463596888265786, 0.4518292794245705, 0.44575665861494806, 0.5880567462992835, 0.4233877463630846, 0.6316199533482251, 0.365481598593386, 0.472748932117405, 0.49908680814752693, 0.6580504815373243, 0.2998559532116193, 0.3320100853953951, 0.30023327522685084, 0.26196397496892243, 0.33654285819340946, 0.384788579004921, 0.17485442445623378, 0.2736222171342534, 0.25038850736501306, 0.2406989245166422, 0.2947481511633847, 0.27085122845996645, 0.21539031917140639, 0.2054001756208188, 0.22116095555631132, 0.2401845324119103, 0.2338637966875835, 0.22862870578242855, 0.19138839319345402, 0.19072238204707448, 0.19535424646964383, 0.203480061748873, 0.2040424882277837, 0.1903545257934971, 0.21197205347399706, 0.7949534713843694, 0.20088963655609482, 0.9239141918865942, 0.18856300723922959, 0.1542682082761586, 0.18863752838243886, 0.17256065688354616, 0.9471489171632774, 0.9363523835355082, 0.9377604717816099, 0.17763900865424764, 0.21210681638229245, 0.2128761175437639, 0.8447932956591122, 0.21286155583470723, 0.21268677557624438, 0.9419547020142618, 0.8397269523571729, 0.1686899757961191, 0.09480352550621429, 0.22610756666410448, 0.22606058818825037, 0.1945052435221174, 0.20636722849887223, 0.2384334483295928, 0.21989694815745053, 0.1917144484184975, 0.21838743595773558, 0.18477734439506677, 0.09868073450030024, 0.12451411233696963, 0.07960739216636248, 0.10476690052657267, 0.09928809029942198, 0.13863876245974838, 0.0981448398186503, 0.09668022881175298, 0.1131086762660809]}, "mutation_prompt": null}
{"id": "4136dbce-c789-4c99-ba7f-96e9add2e367", "solution": "import numpy as np\n\nclass QuantumInspiredCoEvolutionarySwarmOptimizationAdaptiveParameters:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5\n        self.c1 = 1.6\n        self.c2 = 1.2\n        self.epsilon = 0.01  # Adaptive parameter for dynamic adjustments\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def adapt_parameters(self):\n        improvement_rate = np.sum(self.personal_best_scores < self.global_best_score) / self.population_size\n        if improvement_rate > 0.5:\n            self.w = max(0.4, self.w - self.epsilon)\n            self.c1 = min(2.0, self.c1 + self.epsilon)\n            self.c2 = min(2.0, self.c2 + self.epsilon)\n        else:\n            self.w = min(0.9, self.w + self.epsilon)\n            self.c1 = max(1.0, self.c1 - self.epsilon)\n            self.c2 = max(1.0, self.c2 - self.epsilon)\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            self.adapt_parameters()\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredCoEvolutionarySwarmOptimizationAdaptiveParameters", "description": "Quantum-Inspired Co-Evolutionary Swarm Optimization with Adaptive Parameters (QCESO-AP): Enhances parameter adaptation based on convergence feedback to improve search dynamics.", "configspace": "", "generation": 88, "fitness": 0.2516463172319336, "feedback": "The algorithm QuantumInspiredCoEvolutionarySwarmOptimizationAdaptiveParameters got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.5661662947134014, 0.5287974732004246, 0.5019431935372349, 0.5024121435882893, 0.6513406278350002, 0.5556280550308379, 0.5796117155928311, 0.5891864941116763, 0.5360414178909789, 0.1519376518823805, 0.05777525378184911, 0.17291703551920623, 0.04153053204716395, 0.16833038057940775, 0.19359520512800488, 0.139676389223775, 0.1462687802208673, 0.2450770161798389, 0.18303818721174514, 0.11285793726707938, 0.11748407160459884, 0.12300214990445935, 0.09664399610007224, 0.10473477001335996, 0.15201532044275168, 0.1577846325407518, 0.10563588447238348, 0.14008652356754614, 0.11975491202785704, 0.08646145222243573, 0.11114169959922926, 0.10673789898135333, 0.09973812972230756, 0.1013464924424834, 0.09555351736670359, 0.1053730529211141, 0.9929923884773902, 0.989015430277614, 0.983597196712366, 0.9836153391217761, 0.9855759868414187, 0.9859798695065648, 0.9865883045601018, 0.9863958141683773, 0.9878327569862404, 0.29797104901180027, 0.3476417071915261, 0.35292042314996075, 0.39232820585681816, 0.342020721877781, 0.3259753956533499, 0.08737545629123156, 0.213816932869486, 0.33860144079891574, 0.7262029241002554, 0.2668917779888167, 0.3549551781964029, 0.8502908080702014, 0.27951939908959456, 0.11687146995098663, 0.22936666041915788, 0.2352121377504649, 0.23696334034414057, 0.1993509770992299, 0.1628118934759597, 0.14750882912301166, 0.1593307659222697, 0.20282490464133351, 0.09775702704316314, 0.15151556923974463, 0.15577737471257136, 0.14468664390623653, 0.14660511043891566, 0.16784174259910234, 0.18738709874493564, 0.14527280371437645, 0.14837257606496712, 0.18611462408973112, 0.17996064239935605, 0.1684176791095986, 0.16614906979753175, 9.999999999998899e-05, 0.016674920991928466, 9.999999999998899e-05, 9.999999999998899e-05, 0.04515837678756596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0959459768293931, 0.13871363856599672, 0.10860491182880905, 0.04857635933865623, 0.06220258264444889, 0.11686528795960571, 0.052828860674568934, 0.20280484470628912, 0.04468660519744316, 0.017194415777860184, 0.08457542602623436, 0.03282968662587571, 0.0871477651051713, 0.04645996436192201, 0.10815511089759078, 0.0425004910223028, 0.043139852478495055, 0.03469822998632244, 0.12221192904730849, 0.0762151784244004, 0.17816170199768222, 0.07243767750509034, 0.08936914594948087, 0.06353440663182208, 0.08956420858726233, 0.06704250793549493, 0.08121866125270194, 0.4698089545491573, 0.458560431197069, 0.4952428246021946, 0.48180273689699304, 0.4276970604987982, 0.46667581939930114, 0.43134177731168144, 0.4642974738638136, 0.47495812280691707, 0.08969444903292845, 0.1407733856773744, 0.06866509682976207, 0.09014406218959536, 0.12095163740609083, 0.1210004616621978, 0.12552552979390452, 0.14990804153429294, 0.1393181577268502, 0.17007462572260723, 0.1928576646594392, 0.17851360258829407, 0.2643203900041603, 0.38187331019100446, 0.20674551972408794, 0.2102821722929582, 0.27244579597586793, 0.263677121177028, 0.33090352850330695, 0.2914894435929454, 0.285253783221994, 0.3128516268200229, 0.353505439951998, 0.32691790847315116, 0.3238458263110885, 0.29076376856633457, 0.3343833401397919, 0.25335784241378545, 0.28935557960801417, 0.21343347332872253, 0.23693349245770878, 0.30227771484016974, 0.27832787550681737, 0.1779701277168817, 0.28618014358219057, 0.14042880948724212, 0.24686140124510547, 0.24749413073664506, 0.21135220790926246, 0.23147542684671674, 0.2183124824832796, 0.220275807180502, 0.20173571637980892, 0.2199998112219328, 0.20861111872400862, 0.21902609604905365, 0.2598366938416967, 0.21997293924158923, 0.4590636339130967, 0.2143850250559053, 0.1961054878012276, 0.24385657147627537, 0.19621635579107666, 0.23718293489072528, 0.1782816365635852, 0.18755439115832984, 0.15406680599606737, 0.1887555491826015, 0.7786800965285692, 0.6394982595858203, 0.879273909106595, 0.8764284481457513, 0.1776041094025137, 0.6214231914752806, 0.21188082473402892, 0.11130550814332096, 0.21204161439052038, 0.211877809638794, 0.5459922295294355, 0.3592123841559147, 0.16877187795152948, 0.09480031211137196, 0.1891898010430345, 0.1883422018556815, 0.19928356882096154, 0.17120776869622956, 0.1863812634248786, 0.19418310108170622, 0.20236649287731112, 0.18806538720579302, 0.21705390839667305, 0.08835423586337476, 0.09531386676679099, 0.09997371515773179, 0.09228915616843025, 0.13005315883524549, 0.09608799998629713, 0.08835625267369318, 0.0903202549565747, 0.09218517886886635]}, "mutation_prompt": null}
{"id": "25fddfc5-a099-4272-9f68-118526d29d48", "solution": "import numpy as np\n\nclass QuantumInspiredCoEvolutionaryAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5  # Adjusted inertia weight for better convergence\n        self.c1 = 1.6  # Co-evolutionary factor\n        self.c2 = 1.2  # Co-evolutionary factor\n        # New adaptive parameters\n        self.adaptive_cr = self.cr\n        self.adaptive_f = self.f\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2  # Adjusted superposition for co-evolutionary interaction\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.adaptive_cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n                # Adapt crossover and differential weight based on performance\n                if trial_score < self.personal_best_scores[i]:\n                    self.adaptive_cr = np.random.uniform(0.7, 1.0)\n                    self.adaptive_f = np.random.uniform(0.6, 1.0)\n                else:\n                    self.adaptive_cr = self.cr\n                    self.adaptive_f = self.f\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredCoEvolutionaryAdaptiveSwarmOptimization", "description": "Quantum-Inspired Co-Evolutionary Adaptive Swarm Optimization (QCEASO): Enhances adaptive exploration and exploitation balance with dynamic parameter tuning in co-evolutionary and quantum-inspired framework.", "configspace": "", "generation": 89, "fitness": 0.354984101891484, "feedback": "The algorithm QuantumInspiredCoEvolutionaryAdaptiveSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.9026689098698047, 0.8918110522253344, 0.8993585625678288, 0.9007293153025685, 0.9103368119888468, 0.9152176507081792, 0.9011812949355866, 0.8946170577852918, 0.9034835233386136, 0.7943143893490382, 0.7375633793221008, 0.8130148197897451, 0.8087073114216992, 0.7723839526168574, 0.808272154270665, 0.7687340813982092, 0.7990324091638275, 0.7827370936042723, 0.160902825364873, 0.15892939536803385, 0.09320032942753564, 0.11724631514556016, 0.11048951154619846, 0.14652408932323413, 0.1168663886089164, 0.13411251402806612, 0.13140944807648247, 0.18584842590008643, 0.0832905405124249, 0.0824658898018511, 0.16071741325608435, 0.15912921044715023, 0.1041705768290263, 0.09956062200314841, 0.10068051821507285, 0.14369058368050847, 0.9929931593376271, 0.9889893680320351, 0.9866844010713257, 0.9860517239520872, 0.9856028604708126, 0.986113978553438, 0.9866638516592235, 0.9864157320268373, 0.9894241340455082, 0.7973515227092567, 0.8209386837891599, 0.7293913381494185, 0.82747554766647, 0.8312914106195766, 0.7788674457720964, 0.0877511466657237, 0.7599538148097049, 0.8321876859624798, 0.9064684438691055, 0.17092093371864125, 0.17123282416342644, 0.19306856064166, 0.2789565536435834, 0.1170599976943193, 0.1524492416900921, 0.17946211549586355, 0.4043175412639375, 0.2968405621343604, 0.30357306478479285, 0.29453689757761525, 0.1336284366129845, 0.3071199686823948, 0.10693181005834884, 0.2868068888981905, 0.3055442542769874, 0.2989931310837167, 0.28671478570928843, 0.2759189930873165, 0.2880986771662145, 0.30350605882496073, 0.3233322704393832, 0.3017112208127053, 0.3243908690844298, 0.3038586885837484, 0.3050838399196455, 0.012802259425667817, 0.06015843001517329, 9.999999999998899e-05, 9.999999999998899e-05, 0.05029717966337466, 9.999999999998899e-05, 0.027212938783946594, 0.01823718920301942, 0.0028864825761336643, 0.08925450485395892, 0.039241256296895566, 0.21031626255566183, 0.058775820500466036, 0.06347923626785212, 0.10916071135981764, 0.04883972412964199, 0.10141506364853792, 0.04552867246939729, 0.07486661166660868, 0.11187638421507762, 0.04093080079823397, 0.12492230439002139, 0.31394754806359515, 0.21053734453599382, 0.11729044331777405, 0.24003081517808933, 0.07730258774207954, 0.16196565608329916, 0.06674296800571011, 0.13068576486509498, 0.19543538330667787, 0.06152327391408541, 0.08816866279697555, 0.0841244031729188, 0.06111499607558979, 0.27529656625415533, 0.6113960737733211, 0.6042206762102539, 0.5494345518315911, 0.5630873925920346, 0.5960696462860832, 0.4930479295341429, 0.6029189630220181, 0.5761165811795408, 0.5895858486679801, 0.06837424524755187, 0.07978236064258215, 0.11172365549733154, 0.07247624609486447, 0.08864106140646888, 0.13129863025648902, 0.11264388502044564, 0.10703212778769611, 0.09289367122702585, 0.8327031289472442, 0.8154238806532796, 0.6578229602721019, 0.337587143847744, 0.29469925572327493, 0.29647170060245875, 0.21420169204834238, 0.2581494753136222, 0.16463596888265786, 0.4518292794245705, 0.44575665861494806, 0.5880567462992835, 0.4233877463630846, 0.6316199533482251, 0.365481598593386, 0.472748932117405, 0.49908680814752693, 0.6580504815373243, 0.2998559532116193, 0.3320100853953951, 0.30023327522685084, 0.26196397496892243, 0.33654285819340946, 0.384788579004921, 0.17485442445623378, 0.2736222171342534, 0.25038850736501306, 0.2406989245166422, 0.2947481511633847, 0.27085122845996645, 0.21539031917140639, 0.2054001756208188, 0.22116095555631132, 0.2401845324119103, 0.2338637966875835, 0.22862870578242855, 0.19138839319345402, 0.19072238204707448, 0.19535424646964383, 0.203480061748873, 0.2040424882277837, 0.1903545257934971, 0.21197205347399706, 0.7949534713843694, 0.20088963655609482, 0.9239141918865942, 0.18856300723922959, 0.1542682082761586, 0.18863752838243886, 0.17256065688354616, 0.9471489171632774, 0.9363523835355082, 0.9377604717816099, 0.17763900865424764, 0.21210681638229245, 0.2128761175437639, 0.8447932956591122, 0.21286155583470723, 0.21268677557624438, 0.9419547020142618, 0.8397269523571729, 0.1686899757961191, 0.09480352550621429, 0.22610756666410448, 0.22606058818825037, 0.1945052435221174, 0.20636722849887223, 0.2384334483295928, 0.21989694815745053, 0.1917144484184975, 0.21838743595773558, 0.18477734439506677, 0.09868073450030024, 0.12451411233696963, 0.07960739216636248, 0.10476690052657267, 0.09928809029942198, 0.13863876245974838, 0.0981448398186503, 0.09668022881175298, 0.1131086762660809]}, "mutation_prompt": null}
{"id": "4346fe8f-cd2b-4126-8423-b572606f04a9", "solution": "import numpy as np\n\nclass MultiPhaseQuantumSwarmAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30  # Increased population size for diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Modified for better differential evolution impact\n        self.cr = 0.85  # Slightly decreased crossover probability\n        self.w = 0.6  # Adjusted inertia weight for dynamic adaptability\n        self.c1 = 1.5  # Co-evolutionary factor\n        self.c2 = 1.4  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * ((x1 + x2) / 2) + np.random.normal(0, 0.1, self.dim)  # Added noise for diversity\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "MultiPhaseQuantumSwarmAlgorithm", "description": "Multi-Phase Quantum Swarm Algorithm (MPQSA): Integrates quantum-inspired strategies with adaptive multistage swarm dynamics for enhanced exploration and exploitation.", "configspace": "", "generation": 90, "fitness": 0.30970377715427755, "feedback": "The algorithm MultiPhaseQuantumSwarmAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.7804711481369677, 0.7538989391733212, 0.8056971041447838, 0.7841510347610726, 0.8062249251501299, 0.8055471335897483, 0.7982019444819062, 0.7942737074818493, 0.7724558347138735, 0.5203669701375488, 0.4588842536995099, 0.483092293263337, 0.5346395125204262, 0.5108538694971893, 0.5000847500317885, 0.5869882301112432, 0.37660185834114523, 0.5133513783893315, 0.16869898941195605, 0.17007212907860592, 0.11277962360320615, 0.1330305487594895, 0.14563487302097433, 0.11446861761857874, 0.10290604950816473, 0.1705216908825984, 0.17706877908426033, 0.10864805889290619, 0.13507453475467157, 0.13837885548109574, 0.1121355436834458, 0.10735224810227739, 0.11483278791635343, 0.1352444977631092, 0.11253593563802822, 0.11230740806405826, 0.9901820795198581, 0.9908818250506863, 0.9858639315986901, 0.9860163649722643, 0.9859304434693718, 0.9862735541555395, 0.9895698184406229, 0.9860579670211655, 0.9864083584745276, 0.6016546130547178, 0.5358944758155441, 0.4837862841652867, 0.5496887981266745, 0.4737042084641341, 0.5084079653590077, 0.5845909629987842, 0.5285633551827821, 0.579295666709742, 0.2240422025137766, 0.7708647205422758, 0.28149852315296464, 0.2151174588001351, 0.21901265346048437, 0.2111908554300006, 0.22950695490419493, 0.3766695905173859, 0.2213554969406445, 0.18245189583194932, 0.20196543608000617, 0.20547335988132098, 0.19152786383692277, 0.1265154298421538, 0.1284227100831984, 0.1949998626304993, 0.19236982458088037, 0.19401039886407012, 0.21044785660347542, 0.12220456731507834, 0.22961055021391186, 0.2087753142426777, 0.1332488477433964, 0.1624130203794435, 0.22939812866999176, 0.1266012232629975, 0.2115054645625416, 0.03643983629991143, 0.056135001462403133, 0.01579605104804016, 0.004953684936751412, 0.01200187432353228, 0.005936646175660254, 0.005311180800437243, 0.005321964764504972, 9.999999999998899e-05, 0.08413864228280621, 0.06602749692584453, 0.07703829041694421, 0.02597126297713892, 0.05669877827347847, 0.03214673346001251, 0.1025483144584507, 0.052425438688402215, 0.07750519985443083, 0.045722267286617546, 0.13842798828319824, 0.051480618171739434, 0.10979530751405109, 0.06997128471291181, 0.07454069654099627, 0.09579930209992749, 0.1272688449420395, 0.06615686410097932, 0.20609248552566595, 0.10525312504320061, 0.10932409281764432, 0.05069339162294251, 0.1547473467026923, 0.11424025001414662, 0.11098661529995768, 0.25157014220868945, 0.12844201325781435, 0.49190738119203015, 0.4892784773611495, 0.5230762777414635, 0.5090403746352075, 0.5187544926038674, 0.5268664403700957, 0.5367923633980872, 0.5474003990188243, 0.4963062881611606, 0.09205119710380827, 0.09035777236634746, 0.07322618740053144, 0.1459555696643402, 0.1419943651068779, 0.09266437298256969, 0.13471132182493606, 0.14770853945464446, 0.13621147472556872, 0.44456239529851005, 0.2091132117090806, 0.3914433859941837, 0.32802164698274083, 0.39603710935160985, 0.18488402020824635, 0.40618688680974335, 0.20060785395187908, 0.4208192732006665, 0.2839821303978719, 0.3844988600621585, 0.3528649445508839, 0.3384953682389784, 0.4080238516438749, 0.3839645929733251, 0.2943038004524213, 0.3963409124075543, 0.2129056936816367, 0.23776913291504476, 0.33107912824254837, 0.21831023616542644, 0.3351570844636155, 0.2613431510789258, 0.2773946070072225, 0.28112956759942076, 0.2970336808365648, 0.2613704912592528, 0.22211823261069952, 0.21305675691833925, 0.23475430715813694, 0.19536422885964222, 0.22425361666762356, 0.268748326565333, 0.2368987910505712, 0.2265060283547231, 0.23825088916776704, 0.24080883427031174, 0.23921529390252871, 0.5808155268433608, 0.2226920953681043, 0.6937949773633214, 0.2055539742582766, 0.19057048395811627, 0.18883698499215984, 0.21639581423672272, 0.8757463522551366, 0.18751950341068302, 0.1869973527807116, 0.884731752116204, 0.16353096737149897, 0.8639373582354538, 0.13093506022440982, 0.8577282453084439, 0.15419663895156677, 0.58664030845091, 0.519122810691905, 0.6232151974450435, 0.7028110217527133, 0.21134519400039864, 0.7485919637295009, 0.2107025735475213, 0.6867659684459768, 0.10498088515713755, 0.19812487675327106, 0.209622761119848, 0.18949985391323365, 0.20110385739509817, 0.19684407848981123, 0.18743117269167953, 0.18103098612505653, 0.19644646628101214, 0.18281603202986663, 0.09263146641776088, 0.0866576099193831, 0.12080398816297877, 0.1313077307036694, 0.10450880796255968, 0.1035315467368566, 0.10475715715223011, 0.12193332927859502, 0.09842753952648142]}, "mutation_prompt": null}
{"id": "6e8c465f-080a-4eef-8e84-6dc3b2b7143e", "solution": "import numpy as np\n\nclass AdaptiveQuantumCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5\n        self.c1 = 1.6\n        self.c2 = 1.2\n        self.adaptive_rate = 0.05\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def update_parameters(self):\n        self.w = 0.5 + 0.5 * (np.random.rand() / 2)\n        self.c1 = 1.5 + np.random.rand()\n        self.c2 = 1.0 + np.random.rand() * 0.5\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            self.update_parameters()  # Dynamic parameter adjustment\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumCoEvolutionarySwarmOptimization", "description": "Adaptive Quantum Co-Evolutionary Swarm Optimization (AQCESO): Employs dynamic parameter adaptation with quantum-inspired updates to enhance convergence across diverse problem landscapes.", "configspace": "", "generation": 91, "fitness": 0.30848929307539424, "feedback": "The algorithm AdaptiveQuantumCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8413620995564802, 0.8213903806584053, 0.8054089416673433, 0.8070933179314685, 0.813062293967553, 0.8414117632190903, 0.8522819900952043, 0.8019411344539605, 0.8055990945256254, 0.6035937745770219, 0.6452297081834057, 0.5433677396345152, 0.530190037804976, 0.5464781436769137, 0.5752588484782892, 0.6084876371375787, 0.6394584318318679, 0.4974326546384541, 0.147917192299986, 0.129581373819749, 0.1319373783615, 0.15248124178596933, 0.1469142386305844, 0.4925000443209244, 0.1409225414362505, 0.1519314005006256, 0.1164904603525927, 0.1278723675442609, 0.14946077257569956, 0.11668822599733464, 0.11370162013671892, 0.115548957020564, 0.09103289409583826, 0.13582782766899804, 0.137443695156787, 0.11839575237361566, 0.9900253210422665, 0.9900349172351699, 0.9859535519687742, 0.9861835679314033, 0.9890973396939726, 0.9873149263228785, 0.986329612096487, 0.9904507537494357, 0.9934237864163971, 0.6242927358910959, 0.43238210491461215, 0.3562356115233116, 0.621492177921135, 0.6218112044519698, 0.5982142886737266, 0.08791871490779246, 0.089093118477646, 0.5861371415023846, 0.37822710186039155, 0.22932850838382723, 0.22288862025756584, 0.20424420172506075, 0.20742975250854156, 0.2193824410848063, 0.3524699721903308, 0.1386882583451663, 0.8366375516508302, 0.21607430883686607, 0.2082405006510436, 0.11452300673515614, 0.20493006283414505, 0.22435933040570177, 0.09846503647151583, 0.21005726349203313, 0.25272490173284845, 0.20698753735166453, 0.21253856981299446, 0.12589067515123642, 0.1937894117756852, 0.23652422486471092, 0.2318436681366508, 0.20257211008215836, 0.2423885665037282, 0.12931187235309716, 0.22241144061781037, 0.06505665588957776, 0.020510158568687098, 0.018436434705828675, 0.029784316772047514, 0.0034137555238276107, 0.01145561182285948, 9.999999999998899e-05, 0.0624644995167839, 9.999999999998899e-05, 0.0765725324436386, 0.033900053408104536, 0.14554395959872235, 0.07560770831411012, 0.14336256462348484, 0.03338745641482033, 0.055184627546143394, 0.0701723393842385, 0.052745676458208934, 0.04575703147926924, 0.3268141915560394, 0.04075759370455123, 0.11326202653739181, 0.07815646547752297, 0.07780658514741334, 0.09431446437496238, 0.0920487208378894, 0.06723411767124943, 0.03982281878740701, 0.12519268449504506, 0.17046175244229722, 0.11670489421896524, 0.024353528635084887, 0.08936291062046808, 0.04968297561639301, 0.08354871790532648, 0.09487475382802257, 0.5143925133698402, 0.48623961643988256, 0.5474030646808581, 0.5652431224208154, 0.5214516885199556, 0.5495805658728414, 0.5413494432934342, 0.5613482835670998, 0.5547551962535193, 0.06666100700601296, 0.07602057752802649, 0.13696123179040953, 0.12158560311397071, 0.11984336520240135, 0.11068507021920726, 0.14534427152988139, 0.1399419067970592, 0.1255270544817928, 0.3899008398334972, 0.39143425199325377, 0.19610392925689057, 0.18553503868842336, 0.5251480986761119, 0.19417958645972666, 0.3222500103850947, 0.19576344569620474, 0.2620097752233288, 0.43241660591867725, 0.3701713917227122, 0.3978536895058976, 0.37227118747524557, 0.39021364403692127, 0.48158269786678953, 0.4726397207284321, 0.46975019528478845, 0.48031646367316416, 0.2550681352290384, 0.22565952305005277, 0.2601646615159233, 0.23288353258109762, 0.21000170831937293, 0.29514223216881263, 0.3323502175061085, 0.33055839704183065, 0.28572580741647535, 0.22569092778749233, 0.23040931781050844, 0.24388943148930675, 0.20662062725182673, 0.2926287414773233, 0.22682826589626293, 0.2218806662597309, 0.268405825289867, 0.22569104004501372, 0.2404596638298374, 0.20458661416205337, 0.20869226373789151, 0.2236867791614806, 0.20556609909367307, 0.2418583871986475, 0.2453602152200559, 0.6824634816961124, 0.2019965198066157, 0.20716218343607784, 0.16851848060573915, 0.17228707426777423, 0.8686252241392718, 0.19993248242670203, 0.8899436953583885, 0.19851638860006293, 0.8370903411119875, 0.15190497455422225, 0.8065630345841899, 0.21209164928864244, 0.5953117821097978, 0.21028811681261972, 0.21210285712878185, 0.6310084771768004, 0.6232838271294994, 0.16827814084761472, 0.12664444910379913, 0.1877483278763714, 0.18837356733598387, 0.1875339120038143, 0.2176947315830453, 0.20834768627792732, 0.2131860500408036, 0.22107455743927784, 0.22896138350461281, 0.20452004331404483, 0.08316482353785992, 0.1461505992633434, 0.09763116591222043, 0.10067235865531854, 0.09558483149439656, 0.10986300798436854, 0.08559651143734393, 0.09153274470028316, 0.08538425570902108]}, "mutation_prompt": null}
{"id": "2b91214f-a823-48c8-88e9-0fee3167b6ac", "solution": "import numpy as np\n\nclass QuantumEnhancedAdaptiveCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75 + 0.25 * np.cos(np.pi * np.arange(self.population_size) / self.population_size)  # Dynamic factor\n        self.cr = 0.9\n        self.w = 0.5  # Adjusted inertia weight for better convergence\n        self.c1 = 1.6\n        self.c2 = 1.2\n\n    def quantum_superposition(self, x0, x1, x2, phi):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2 + phi * np.random.normal(size=x0.shape)  # Adaptive quantum shift\n\n    def __call__(self, func):\n        phi = 0.05  # Adaptive quantum shift magnitude\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2, phi)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                adaptive_inertia = self.w * np.log1p(self.eval_count / self.budget)\n                self.velocities[i] = (adaptive_inertia * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedAdaptiveCoEvolutionarySwarmOptimization", "description": "Quantum-Enhanced Adaptive Co-Evolutionary Swarm Optimization (QACESO): Integrates adaptive mechanisms with quantum-inspired updates for enhanced exploration-exploitation trade-off.", "configspace": "", "generation": 92, "fitness": 0.2587806070911109, "feedback": "The algorithm QuantumEnhancedAdaptiveCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8105914895766375, 0.647235220598745, 0.6280865393497541, 0.7839838420806967, 0.6054043519494705, 0.7145332343445122, 0.6854210183141856, 0.6066205573581176, 0.6475106304395477, 0.23119892983964896, 0.17222540662079777, 0.33695208751147043, 0.268946699725781, 0.36033945667915745, 0.3879342941271463, 0.22019451756017794, 0.34452667899189493, 0.2769871661570803, 0.09783581768376648, 0.08101615727210043, 0.08748359810637829, 0.12811590869258094, 0.18980719535958668, 0.08703206879254066, 0.12587765203087597, 0.10274629622163012, 0.1188751161228403, 0.07852156177072234, 0.07922984389653398, 0.08689701554835572, 0.1643497337375911, 0.0629229990132204, 0.09385276152193767, 0.09800694626315942, 0.036328504294868225, 0.11238548676081916, 0.9644468366291566, 0.945056352165546, 0.9468989388413332, 0.9456678032692164, 0.8498031509851892, 0.9666568536393314, 0.9671621642192642, 0.9223512519606928, 0.9713708207991949, 0.3691572705587697, 0.4158322107527781, 0.3646366807261664, 0.42302305220746894, 0.44705438272523457, 0.41910545506357744, 0.47905838371886944, 0.38463938097015227, 0.40902536055462513, 0.23177419227433504, 0.2183065605332951, 0.23161502987277083, 0.28454692036073514, 0.38924550129815694, 0.389432948941948, 0.11379602574706804, 0.23840429964323784, 0.1311797467501108, 0.27126344531834723, 0.1294274232898328, 0.2019583621581632, 0.19618830435877266, 0.12400983754873796, 0.16263904573473997, 0.1918577457465528, 0.13707866786938772, 0.2552176638767756, 0.2188270208369797, 0.19843802212830575, 0.13613855178025114, 0.17593312048220344, 0.18324528058423284, 0.17737328926313478, 0.2160675941062622, 0.20131446193086389, 0.12975014087969572, 0.00878693183574164, 0.0008578019583890262, 0.009205187588318564, 0.006539502259693797, 0.0331173235921578, 0.031126709581977274, 0.03357053148344824, 9.999999999998899e-05, 0.011994355640951526, 0.1450255651135378, 0.036672581418523253, 0.09906962324396296, 0.03502189764863817, 0.013635861913058211, 0.05024623362552483, 0.11232600175678287, 0.042518630782223066, 0.13204155108947657, 0.08755539798348733, 0.15120163368446393, 0.05596169828121855, 0.10742025108145936, 0.08680154290407194, 0.07889613442171517, 0.12457089178566316, 0.21287937501935672, 0.07404765777912448, 0.10749342105439463, 0.01068237543090822, 0.16725078178105957, 0.24394166784872318, 0.1765620518287616, 0.10387026443652103, 0.16142235415704453, 0.12345816067457527, 0.11567147828713698, 0.5237442451146885, 0.4695652041634355, 0.46064777456993045, 0.5608706111046344, 0.49869060577993396, 0.48955595056231993, 0.5514142454710993, 0.495402891955527, 0.5582840490354806, 0.0632283697541276, 0.086611384349635, 0.08050725667351366, 0.08693301827375854, 0.10772413410119153, 0.11261567726470112, 0.09385046180036238, 0.0983139398256222, 0.09107600431863772, 0.17688402336454234, 0.17897348248907785, 0.21206521868561268, 0.21022608888404948, 0.17754865419872312, 0.28153962959090995, 0.22063370524033954, 0.19609115678117828, 0.22912163383514883, 0.3213854861683809, 0.18113375970573775, 0.22447702569967842, 0.3853219593693329, 0.31853497854152324, 0.19327299472422188, 0.2328840628461727, 0.3129304682982079, 0.19110665945368333, 0.11470508127221124, 0.15197137732256139, 0.0936441251662945, 0.2628950232642686, 0.1967054610710377, 0.22462524582678467, 0.20978711468467037, 0.2977347953052597, 0.1112846706344055, 0.23921256727556672, 0.1985592310212576, 0.24285526542426583, 0.24348290645803472, 0.25634351385431564, 0.24421304957658085, 0.21950631661473252, 0.24085604336033406, 0.23063059501471206, 0.18051779678460367, 0.19255263355507868, 0.18580539798740825, 0.17738695749451894, 0.1899568568900425, 0.18753212128137442, 0.1791516463403222, 0.19703723868933343, 0.18584809342841224, 0.1889046491030545, 0.16922370041264878, 0.18740326533265939, 0.9176341177845534, 0.13164789462190551, 0.9160218072745385, 0.12314999683219563, 0.17013078869252984, 0.16881416835924268, 0.6513833518319511, 0.7548779075167826, 0.05186595601653421, 0.5523851612467272, 0.16940527919991533, 0.6791935992713971, 0.1055286242680048, 0.16933645136620834, 0.5834866597249352, 0.22552794218267913, 0.1833873361757754, 0.22460211497203253, 0.2278877043823252, 0.22360551508823623, 0.21867739726569246, 0.22622554826293195, 0.21038111266309167, 0.2254012033505527, 0.10063756467177698, 0.12666424633277507, 0.08030895124797921, 0.10629686705520891, 0.06765808636129145, 0.10690790034575781, 0.0838962233727607, 0.08575648798227298, 0.07693184712962631]}, "mutation_prompt": null}
{"id": "a7f4235f-6301-4f83-81f2-cfd8908f16cb", "solution": "import numpy as np\n\nclass AdaptiveQuantumCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted scaling factor for diversity\n        self.cr = 0.9\n        self.w = 0.7  # Dynamic inertia weight for adaptable search\n        self.c1 = 1.5  # Co-evolutionary factor for personal influence\n        self.c2 = 1.3  # Co-evolutionary factor for global influence\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2  # Quantum superposition\n\n    def adapt_parameters(self, iteration, max_iterations):\n        self.w = 0.9 - 0.4 * (iteration / max_iterations)  # Linearly decrease inertia\n\n    def __call__(self, func):\n        max_iterations = self.budget // self.population_size\n        for iteration in range(max_iterations):\n            self.adapt_parameters(iteration, max_iterations)\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumCoEvolutionarySwarmOptimization", "description": "Adaptive Quantum Co-Evolutionary Swarm Optimization (AQCESO): Enhances co-evolutionary dynamics with adaptive parameters for improved convergence and robustness.", "configspace": "", "generation": 93, "fitness": 0.21244692352105693, "feedback": "The algorithm AdaptiveQuantumCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.4629652986420093, 0.4614788971109849, 0.5271318033152699, 0.5021242326310913, 0.5526767230495337, 0.5511006220601715, 0.5357079886306109, 0.1812863587970428, 0.5290743716511389, 0.11571014190937745, 0.04157752126961245, 0.12253557595086872, 0.14651367941475668, 0.05486160125149675, 0.08791059086611364, 0.15038686512766852, 0.12400673247872729, 0.1345154268784654, 0.12784378233382288, 0.11732152404427465, 0.12007665423825242, 0.1223290087498119, 0.09788791039253941, 0.09711431911836554, 0.12581645097044802, 0.11271365755588814, 0.11989437714561668, 0.10364730377256015, 0.10794522377659743, 0.12694136359363206, 0.08543667195914573, 0.0986475190500602, 0.09126063290922726, 0.09553850842643408, 0.10635765902199146, 0.09537330421180745, 0.9937530374931363, 0.9897992546135185, 0.9861901261565621, 0.9827105295676932, 0.9897324178939954, 0.9893327820804783, 0.9833899266388393, 0.9894960909801196, 0.9869910416128855, 0.2513468900729118, 0.25858748976952006, 0.059081390993977245, 0.24268622261593442, 0.2111403501814928, 0.34644053347897374, 0.08495816639196252, 0.05116895712186398, 0.08538793467130035, 0.2094123505955312, 0.21306484034743112, 0.42534564191755997, 0.2180445317316868, 0.23589541705163586, 0.11337154193700971, 0.21695043812461967, 0.1971006569263175, 0.2134577851805649, 0.1476986807030175, 0.12465318731051611, 0.18554824001304715, 0.1256415851448437, 0.2087671468535628, 0.14311767955845667, 0.13247481281920448, 0.11731728174990552, 0.14091493475045191, 0.1350693211313928, 0.12062283757755399, 0.15334842521581282, 0.12518152441138186, 0.1161103331620168, 0.14595100406901473, 0.2011381489042049, 0.1465023475355498, 0.15594856830320547, 9.999999999998899e-05, 0.017657374143282722, 0.00044829229247556057, 0.03469269138161213, 0.019326788442641685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12586994883023617, 0.06564908414376147, 0.0854681077262921, 0.07356708210433338, 0.07565504198580908, 0.08045051048267304, 0.023183694028624413, 0.06945482733895714, 0.006979309417083801, 0.01716545572775907, 0.04402952628686452, 0.019740298838689663, 0.035763865624613755, 0.02701616761064074, 9.999999999998899e-05, 0.05981341961304021, 0.04197662621917353, 0.020861223857066902, 0.037030718305178345, 0.08158842652479092, 0.08564262719656712, 0.11115607008450756, 0.003916748839803086, 0.12577917748711698, 0.05673192798000326, 0.05309876016519688, 0.054895092198507855, 0.3939349861279001, 0.4049952735575444, 0.3934528199029632, 0.40091658362142313, 0.40296237102643173, 0.20687373704154166, 0.4140335904625886, 0.4109839071818244, 0.43527972328841325, 0.07082657063419706, 0.10805433521930607, 0.10887978203887272, 0.11804589050308367, 0.12296994332949884, 0.10917868387705254, 0.1059690023940173, 0.10583555617633589, 0.10725732607104987, 0.321295929003489, 0.2689765534245273, 0.26802153135024287, 0.1430781329681493, 0.2722906416863189, 0.2135791036963901, 0.13835895479941918, 0.1715251015316931, 0.30098663878988774, 0.29502710879038063, 0.22727243620773374, 0.24240051867615797, 0.26911923774529345, 0.28874050453313926, 0.24783759671362593, 0.3019791788348761, 0.2834753890963254, 0.3012783590297745, 0.18148424531137652, 0.22229387445304938, 0.22138386740483706, 0.16342718904734554, 0.20642781779726116, 0.20267972947562418, 0.15740506905952223, 0.22333269225997943, 0.15789189276603377, 0.1953955667123236, 0.19833845734468258, 0.2176342237034875, 0.22819401506630743, 0.21042303175419919, 0.195002532359707, 0.18984862339301556, 0.1903027358184053, 0.21965875247612, 0.1844482825420205, 0.23049190268473663, 0.2711975192546505, 0.17349436279569508, 0.18937614164345928, 0.2831740731728092, 0.21173793488622883, 0.1855441013341732, 0.19641809861376724, 0.6431080664534576, 0.18437050967649637, 0.15226677573426206, 0.16460373134632578, 0.593973725242275, 0.6188330345384746, 0.16669056914398117, 0.5981417279517152, 0.1524914050994235, 0.19598164818824904, 0.2047515937284342, 0.1649353412141964, 0.20172914084736526, 0.20141980713041385, 0.19372442479606666, 0.1621757622333747, 0.16114765117048613, 0.19318034807076534, 0.18163622634564813, 0.18784643674123802, 0.19203038276639517, 0.18385559630089388, 0.1929369068959691, 0.21192317517456472, 0.20149640086558962, 0.1771520178342062, 0.19775780938157383, 0.07788335916108313, 0.11080698705464853, 0.08090819634451851, 0.09927274744914882, 0.0748311328577489, 0.10357071706297682, 0.07561663117904771, 0.07291246071575519, 0.09011170884586805]}, "mutation_prompt": null}
{"id": "e9c4940b-c2d1-49db-ba0c-67b1b25a65b0", "solution": "import numpy as np\n\nclass QuantumEnhancedAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Slightly increased population size for diversity\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Tuned factor for differential evolution\n        self.cr = 0.9  # Crossover rate remains unchanged\n        self.w_min = 0.4  # Adaptive inertia weight lower bound\n        self.w_max = 0.9  # Adaptive inertia weight upper bound\n        self.c1 = 1.5  # Co-evolutionary factor\n        self.c2 = 1.7  # Co-evolutionary factor\n\n    def adaptive_inertia_weight(self):\n        return self.w_max - ((self.w_max - self.w_min) * (self.eval_count / self.budget))\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Adaptive Inertia Weight\n            w = self.adaptive_inertia_weight()\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedAdaptiveSwarmOptimization", "description": "Quantum-Enhanced Adaptive Swarm Optimization (QEASO): Incorporates adaptive parameters and quantum-inspired strategies for efficient global and local search balance.", "configspace": "", "generation": 94, "fitness": 0.24006099658955804, "feedback": "The algorithm QuantumEnhancedAdaptiveSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.5678112429445314, 0.5717323956727204, 0.5621143209574511, 0.1896262088742695, 0.635827039175768, 0.6380197309085732, 0.614289672848356, 0.5841227617276943, 0.6131236814699647, 0.2664306121349702, 0.13017017580193369, 0.26088894202097757, 0.24647344244685032, 0.03028592849131384, 0.31164930203099517, 0.2981540838735197, 0.287725454658329, 0.2945900459043068, 0.1302737996361547, 0.09741276813366784, 0.10203514150543647, 0.13170152447840588, 0.0961011882852435, 0.09913521650119872, 0.09497081494266746, 0.09559566146541532, 0.11983467488943966, 0.09712871753179786, 0.10103198932339241, 0.11358339575055654, 0.09220103159709248, 0.10379321670466857, 0.08334783333519247, 0.10278471094579478, 0.0906174559511479, 0.1052269391145112, 0.9921638421208531, 0.9931501689306143, 0.9878638335091743, 0.9882368913636773, 0.9914505878587377, 0.9911182611450576, 0.9912659624426016, 0.9908577730626861, 0.974809892990349, 0.35425859363857526, 0.3435470628613939, 0.05942766304978775, 0.1452605877242299, 0.41201742807687436, 0.14696345726170568, 0.0885930672309807, 0.08324803849179885, 0.08830879165857808, 0.20774662904427077, 0.30507629867395625, 0.32758610680934985, 0.19229750547537083, 0.2461766855734412, 0.19565373059298985, 0.21703014120934316, 0.515904376429042, 0.49874707763370396, 0.1812826174215998, 0.1454005162928541, 0.19705591970142466, 0.17185943113015223, 0.10592286731493517, 0.15615441487559456, 0.16131217530864028, 0.18334792198823913, 0.1393561936471226, 0.18613784054910143, 0.15029963766046495, 0.1754380516761641, 0.15682444498150017, 0.16490379675317368, 0.18493596175777827, 0.18114963320101019, 0.14088648881057741, 0.15607004581962847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03516126011049092, 9.999999999998899e-05, 9.999999999998899e-05, 0.02419454719361236, 0.013633055254215654, 9.999999999998899e-05, 0.13340738090732596, 0.05891631508994377, 0.12885797466310123, 0.11467054395326182, 0.0517057660319431, 0.1177848054381464, 0.06175141239558957, 0.0685127021002605, 0.08953047843071693, 0.039780897116203584, 0.021792897005978196, 0.02541067526011176, 0.08892999056534112, 0.09239961758413906, 0.05343538740056897, 0.04356807945618146, 0.04848994942573703, 0.04139881801522283, 0.10451601574701275, 0.007897950165075773, 0.06609681465274864, 0.004137100284890782, 9.999999999998899e-05, 0.19628355806997233, 0.06703259121851202, 0.04637567801222853, 0.044626892960929365, 0.46955887376241867, 0.4052373881670578, 0.44562069227250334, 0.45553204973362904, 0.4496399408333367, 0.4338402413381698, 0.4224169175663436, 0.44176461634999065, 0.4740850643062545, 0.061260169140325726, 0.10131872517467633, 0.08346553968785742, 0.10055160035775845, 0.12530833103943206, 0.11857194088768575, 0.12701134729598273, 0.13597554937262324, 0.09153985977108259, 0.1503567038626048, 0.34505758057611335, 0.1829844861693818, 0.23496790095886166, 0.14788823135254492, 0.16008236425516464, 0.27283409141274806, 0.1894518334057349, 0.2034142483457414, 0.32653818075964036, 0.2697766180685506, 0.25000111465101993, 0.25469758889636085, 0.2429097286427222, 0.3794580045892878, 0.2562258795025586, 0.37867143676663495, 0.26354311211325676, 0.2430712487081378, 0.16944126546562843, 0.19547788735331528, 0.20388415317565678, 0.1743295636423512, 0.2742594606993206, 0.21031988918898892, 0.268795018900313, 0.2621054927490586, 0.1944066114098888, 0.19054522346070202, 0.21466035917123316, 0.21143246770504032, 0.21389562166005593, 0.19979769149653426, 0.18867459327798908, 0.2311488800154381, 0.1990227143539085, 0.40704841068660325, 0.19136881520662796, 0.3987827534610413, 0.18404717479050614, 0.41496039512835803, 0.435769784396717, 0.21557940871019765, 0.18724496629975163, 0.2134906101246835, 0.7182874969629081, 0.1765321178004693, 0.18070286066498975, 0.6682350795018419, 0.15236415364070166, 0.14520223980573177, 0.18760636983421275, 0.16489375358852, 0.16283162915504945, 0.6222545088451026, 0.5595960018722173, 0.5379465059002579, 0.6050307321843046, 0.18720598922952758, 0.15019354032630106, 0.6694144053467141, 0.1543961741259654, 0.20062844329640572, 0.19627641733413237, 0.18790023605289308, 0.19472058715851248, 0.22602451482152652, 0.1869239174780133, 0.18742260174056002, 0.18420732491350134, 0.17908256731411765, 0.19520131994648726, 0.08421883471494962, 0.07997101870867229, 0.09112112525992122, 0.08737973637148988, 0.08867257705173903, 0.086444808762978, 0.07856606005583466, 0.09277093924576219, 0.11992157141524984]}, "mutation_prompt": null}
{"id": "3acca326-0fa6-43f2-8f87-4986fd8f51ac", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adjusted mutation factor for better diversity\n        self.cr = 0.85  # Adjusted crossover rate for better information exchange\n        self.w = 0.6  # Increased inertia weight for more stable convergence\n        self.c1 = 1.4  # Reduced cognitive factor for balanced personal influence\n        self.c2 = 1.3  # Increased social factor for stronger global influence\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * np.mean([x1, x2], axis=0)  # Simplified interaction for potential improvement\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Adaptive Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredAdaptiveSwarmOptimization", "description": "Hybrid Quantum Differential Evolution and Adaptive Particle Swarm Optimization with Dynamic Parameter Adjustment for Enhanced Exploration and Exploitation.", "configspace": "", "generation": 95, "fitness": 0.33838888898965586, "feedback": "The algorithm QuantumInspiredAdaptiveSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8845435510138153, 0.8770616422269824, 0.8748110497675119, 0.8803640037117852, 0.8890923802463834, 0.888297972368535, 0.8628386849854419, 0.8885957800111433, 0.8784429496199402, 0.5862968932877112, 0.7336359832044377, 0.6511506202477368, 0.6996256405623589, 0.6781151479394958, 0.6856477389148183, 0.652741685205305, 0.6415104102554254, 0.6633343200781056, 0.1291855053327492, 0.14094523042157758, 0.1576374445587364, 0.1446081769639146, 0.13251829525340786, 0.6745317192476722, 0.15564976208745995, 0.15800302881674944, 0.08751819874353772, 0.123423281145562, 0.08767995044849863, 0.11105073443293023, 0.15559531580986463, 0.14328223059230982, 0.0955088680664059, 0.13042865671006476, 0.10877374127172279, 0.08436556257053562, 0.9928779937727158, 0.9898639392646228, 0.9871434737758167, 0.9868648194649253, 0.9867186986002248, 0.9858954997972371, 0.989505373379312, 0.9894962552388078, 0.9907988518709967, 0.7595491474630954, 0.7906756425358354, 0.7760946338515604, 0.7952340032543406, 0.8001590343603564, 0.7570725609173524, 0.08712285958149457, 0.7700178206166487, 0.6892743963825263, 0.22911899724343365, 0.22455255047997913, 0.3522222491233832, 0.21004835176780334, 0.19331059832824482, 0.20690335696382467, 0.862000469385439, 0.9050998927682865, 0.12872214093122036, 0.13385115486815014, 0.30351576136011493, 0.5238689853750236, 0.252070563705281, 0.27800368443549917, 0.15741226187535884, 0.27503411064699035, 0.28496044418141986, 0.29165057806571626, 0.2719983014309597, 0.2723930093615774, 0.26451577094802026, 0.34009956321028967, 0.27951438098958037, 0.29548905847513474, 0.33321634023193547, 0.3004363819053729, 0.2638937546468937, 9.999999999998899e-05, 0.0063104649962675285, 0.002736123920652034, 0.008137140240064178, 9.999999999998899e-05, 9.999999999998899e-05, 0.1058076420081494, 0.022239033476375347, 9.999999999998899e-05, 0.06686129015267195, 0.08472833398206114, 0.05067703167217419, 0.06485389644143091, 0.03555200250114776, 0.17722167037199998, 0.11928473273160234, 0.07823222657197293, 0.12637749268362752, 0.1133833033299787, 0.035564406217250655, 0.3059210336136724, 0.08390231290868488, 0.07340023084881853, 9.999999999998899e-05, 0.25193812006506955, 0.1102958652864392, 0.07296150679851976, 0.10407091752194197, 0.08370834657621762, 0.3953924295757004, 0.07997773567008848, 0.18432369872994991, 0.14138488529805182, 0.08322010989419559, 0.07546245511971861, 0.08221140176544872, 0.5493641532311127, 0.6188356510442646, 0.549118149004129, 0.5875537694684689, 0.557845480808911, 0.5506472072996669, 0.6426586579406735, 0.6006851642242178, 0.5506869846070591, 0.07765082071252183, 0.09502323869328899, 0.15968393347500465, 0.1316831700035742, 0.11600709115038244, 0.1168876474925139, 0.09221188838454741, 0.10860417282244694, 0.09709820282150883, 0.20895405961474012, 0.29873953417278076, 0.18591353925738086, 0.2927862289095241, 0.23399723083315271, 0.3329865260059248, 0.2883195614830347, 0.2622701533192502, 0.16260892129445237, 0.45095194935395944, 0.35202576691622844, 0.20683675736453166, 0.2873910391245962, 0.5152862292704906, 0.434761688880286, 0.6203683700294561, 0.407291987618299, 0.22636310106431257, 0.2664519050137575, 0.27981495922984545, 0.2596268013211306, 0.3106833190361722, 0.36815433376093654, 0.2150514966892183, 0.2745192735240727, 0.42243732958882807, 0.29657069522024915, 0.2401216917642297, 0.22952068515750612, 0.21969322669576719, 0.2074567892277257, 0.2950924674275207, 0.2489900657053199, 0.2657547270851013, 0.2590882774682598, 0.18972447684916438, 0.19766745403914388, 0.18489676638184926, 0.25230354672711697, 0.8017470390761532, 0.22229596676030083, 0.2021188741429537, 0.20334482756837302, 0.2046361967299276, 0.2112711351241845, 0.18786364559939184, 0.18812233906626563, 0.15419121774697775, 0.17837847972884824, 0.9301527513118041, 0.9110903088773052, 0.14204623972254538, 0.915529429627073, 0.17662949827526775, 0.7996126441677449, 0.21224679231293486, 0.8737507540499114, 0.2126263528899015, 0.21118013622310838, 0.8757472444943696, 0.09458074228574609, 0.16850657179073547, 0.10509491319738118, 0.197501136474178, 0.21549645441213472, 0.20057642901253026, 0.20656863314668095, 0.20622056241892428, 0.21268449373924248, 0.20816699661811622, 0.25755067415182253, 0.23547048634187873, 0.0789851291308552, 0.15295781645518214, 0.08746478484811104, 0.11917218040466215, 0.09351963124424534, 0.13267850898060152, 0.09189830680426114, 0.08975293618980484, 0.14713473109024822]}, "mutation_prompt": null}
{"id": "c5cb039e-0501-4588-aa2d-86cee20e0aa7", "solution": "import numpy as np\n\nclass QuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.75\n        self.cr = 0.9\n        self.w = 0.5  # Adjusted inertia weight for better convergence\n        self.c1 = 1.6  # Co-evolutionary factor\n        self.c2 = 1.2  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2  # Adjusted superposition for co-evolutionary interaction\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Enhanced Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumInspiredCoEvolutionarySwarmOptimization", "description": "Quantum-Inspired Co-Evolutionary Swarm Optimization (QCESO): Introduces co-evolutionary dynamics with quantum-inspired updates to improve exploration and exploitation balance.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.9026689098698047, 0.8918110522253344, 0.8993585625678288, 0.9007293153025685, 0.9103368119888468, 0.9152176507081792, 0.9011812949355866, 0.8946170577852918, 0.9034835233386136, 0.7943143893490382, 0.7375633793221008, 0.8130148197897451, 0.8087073114216992, 0.7723839526168574, 0.808272154270665, 0.7687340813982092, 0.7990324091638275, 0.7827370936042723, 0.160902825364873, 0.15892939536803385, 0.09320032942753564, 0.11724631514556016, 0.11048951154619846, 0.14652408932323413, 0.1168663886089164, 0.13411251402806612, 0.13140944807648247, 0.18584842590008643, 0.0832905405124249, 0.0824658898018511, 0.16071741325608435, 0.15912921044715023, 0.1041705768290263, 0.09956062200314841, 0.10068051821507285, 0.14369058368050847, 0.9929931593376271, 0.9889893680320351, 0.9866844010713257, 0.9860517239520872, 0.9856028604708126, 0.986113978553438, 0.9866638516592235, 0.9864157320268373, 0.9894241340455082, 0.7973515227092567, 0.8209386837891599, 0.7293913381494185, 0.82747554766647, 0.8312914106195766, 0.7788674457720964, 0.0877511466657237, 0.7599538148097049, 0.8321876859624798, 0.9064684438691055, 0.17092093371864125, 0.17123282416342644, 0.19306856064166, 0.2789565536435834, 0.1170599976943193, 0.1524492416900921, 0.17946211549586355, 0.4043175412639375, 0.2968405621343604, 0.30357306478479285, 0.29453689757761525, 0.1336284366129845, 0.3071199686823948, 0.10693181005834884, 0.2868068888981905, 0.3055442542769874, 0.2989931310837167, 0.28671478570928843, 0.2759189930873165, 0.2880986771662145, 0.30350605882496073, 0.3233322704393832, 0.3017112208127053, 0.3243908690844298, 0.3038586885837484, 0.3050838399196455, 0.012802259425667817, 0.06015843001517329, 9.999999999998899e-05, 9.999999999998899e-05, 0.05029717966337466, 9.999999999998899e-05, 0.027212938783946594, 0.01823718920301942, 0.0028864825761336643, 0.08925450485395892, 0.039241256296895566, 0.21031626255566183, 0.058775820500466036, 0.06347923626785212, 0.10916071135981764, 0.04883972412964199, 0.10141506364853792, 0.04552867246939729, 0.07486661166660868, 0.11187638421507762, 0.04093080079823397, 0.12492230439002139, 0.31394754806359515, 0.21053734453599382, 0.11729044331777405, 0.24003081517808933, 0.07730258774207954, 0.16196565608329916, 0.06674296800571011, 0.13068576486509498, 0.19543538330667787, 0.06152327391408541, 0.08816866279697555, 0.0841244031729188, 0.06111499607558979, 0.27529656625415533, 0.6113960737733211, 0.6042206762102539, 0.5494345518315911, 0.5630873925920346, 0.5960696462860832, 0.4930479295341429, 0.6029189630220181, 0.5761165811795408, 0.5895858486679801, 0.06837424524755187, 0.07978236064258215, 0.11172365549733154, 0.07247624609486447, 0.08864106140646888, 0.13129863025648902, 0.11264388502044564, 0.10703212778769611, 0.09289367122702585, 0.8327031289472442, 0.8154238806532796, 0.6578229602721019, 0.337587143847744, 0.29469925572327493, 0.29647170060245875, 0.21420169204834238, 0.2581494753136222, 0.16463596888265786, 0.4518292794245705, 0.44575665861494806, 0.5880567462992835, 0.4233877463630846, 0.6316199533482251, 0.365481598593386, 0.472748932117405, 0.49908680814752693, 0.6580504815373243, 0.2998559532116193, 0.3320100853953951, 0.30023327522685084, 0.26196397496892243, 0.33654285819340946, 0.384788579004921, 0.17485442445623378, 0.2736222171342534, 0.25038850736501306, 0.2406989245166422, 0.2947481511633847, 0.27085122845996645, 0.21539031917140639, 0.2054001756208188, 0.22116095555631132, 0.2401845324119103, 0.2338637966875835, 0.22862870578242855, 0.19138839319345402, 0.19072238204707448, 0.19535424646964383, 0.203480061748873, 0.2040424882277837, 0.1903545257934971, 0.21197205347399706, 0.7949534713843694, 0.20088963655609482, 0.9239141918865942, 0.18856300723922959, 0.1542682082761586, 0.18863752838243886, 0.17256065688354616, 0.9471489171632774, 0.9363523835355082, 0.9377604717816099, 0.17763900865424764, 0.21210681638229245, 0.2128761175437639, 0.8447932956591122, 0.21286155583470723, 0.21268677557624438, 0.9419547020142618, 0.8397269523571729, 0.1686899757961191, 0.09480352550621429, 0.22610756666410448, 0.22606058818825037, 0.1945052435221174, 0.20636722849887223, 0.2384334483295928, 0.21989694815745053, 0.1917144484184975, 0.21838743595773558, 0.18477734439506677, 0.09868073450030024, 0.12451411233696963, 0.07960739216636248, 0.10476690052657267, 0.09928809029942198, 0.13863876245974838, 0.0981448398186503, 0.09668022881175298, 0.1131086762660809]}, "mutation_prompt": null}
{"id": "00552f7c-e2c7-423c-b2e7-26e4ca243fb9", "solution": "import numpy as np\n\nclass QuantumEnhancedAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Slightly increased mutation factor to improve exploration\n        self.cr = 0.85  # Adjusted crossover rate\n        self.w = 0.6   # Adaptive inertia weight for better convergence\n        self.c1 = 1.5  # Co-evolutionary factor\n        self.c2 = 1.4  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.beta(0.5, 0.5)  # Using beta distribution for more diverse superpositions\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.w = 0.4 + 0.5 * np.random.rand()  # Adaptively adjusting inertia weight\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "QuantumEnhancedAdaptiveSwarmOptimization", "description": "Quantum-Enhanced Adaptive Swarm Optimization (QEASO): Integrates adaptive parameters with quantum-inspired updates to enhance diversity and convergence speed.", "configspace": "", "generation": 97, "fitness": 0.29515988811582866, "feedback": "The algorithm QuantumEnhancedAdaptiveSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8377631520974115, 0.7955588106714588, 0.8268520642657958, 0.18282011622514205, 0.8142138699921266, 0.8447364137319181, 0.8340085408413197, 0.8333804184757012, 0.8157628449887502, 0.5790060560813167, 0.45294167941431895, 0.570920415627718, 0.5650574988823018, 0.6527551262406325, 0.05551491649535689, 0.47269858192512115, 0.5490814801708221, 0.05101868086635497, 0.10801949445505687, 0.15083138118557127, 0.082997400612001, 0.12230881417045891, 0.17956745080450442, 0.1152134540819092, 0.1528386286332396, 0.1510448338562439, 0.09589885504075102, 0.11264163100643232, 0.1099823472944903, 0.11754007387704479, 0.1333815371224608, 0.13525390575545715, 0.11065791937392189, 0.13225922302994864, 0.09365654467353901, 0.12932106396576637, 0.9863292384702581, 0.9903714374294398, 0.9902495169832043, 0.9905292070635043, 0.9928465053400353, 0.9870350070249205, 0.9866763151250436, 0.9892899310840081, 0.9912473385158963, 0.6181684346378263, 0.059519608886828945, 0.6708180078613736, 0.15295520773161975, 0.678882309396416, 0.6492888743484415, 0.6863212749650012, 0.08852659235662519, 0.6431833162504114, 0.2274514076999501, 0.3733162925098239, 0.1710385001838458, 0.2014558410506132, 0.3530196360999339, 0.27667925507196833, 0.12487871174298748, 0.13807701799378225, 0.22400158027592343, 0.24661247453310076, 0.21246425609907416, 0.22848976796041087, 0.2187745122627487, 0.23388540152206183, 0.1207534067885655, 0.13221628380777273, 0.2221866239793705, 0.22759994309220333, 0.2963975170102344, 0.2099568963431474, 0.22816167901145834, 0.25573987944443133, 0.23458371080082296, 0.2251437274213105, 0.2774638340412108, 0.26014444101070633, 0.12734893074698417, 0.043185008132174185, 9.999999999998899e-05, 9.999999999998899e-05, 0.08582933210360366, 0.03997163579175034, 9.999999999998899e-05, 0.11826865036866563, 9.999999999998899e-05, 0.08254999273074604, 0.02673315582858271, 0.1332481943591094, 0.060939442236758956, 0.051459363685814385, 0.016955732034203308, 0.0036032097798495144, 0.17147609783428197, 0.09049543143446004, 0.00025993017968217735, 0.054589151542205006, 0.045903506733877664, 0.045338762514433584, 0.07396486078358999, 0.07758157022740453, 0.09763586711457406, 0.09313654784102732, 0.07469535775435943, 0.09147068089510868, 0.1725319025941371, 0.2675796937954532, 0.11299955485562319, 0.04816796118714306, 0.07337493587441168, 0.023864228709218893, 0.00890614091946973, 0.04873260872355312, 0.08047854167994517, 0.5336739104736725, 0.557499429888878, 0.5254473264362916, 0.5484225452339193, 0.5935065364215143, 0.5497151063241048, 0.5812865659883939, 0.597919340937183, 0.5635697859433687, 0.08620263822089413, 0.07076927717922732, 0.05956066739716548, 0.09178374233206943, 0.1287519315102722, 0.13808248673858725, 0.13942393864388758, 0.10425671990363972, 0.10850456814623599, 0.35290309936504816, 0.2826832623426482, 0.2036539182444902, 0.33962784197981766, 0.3573941912241425, 0.1836440661125588, 0.23963985235664398, 0.2028965337404165, 0.13880999729077137, 0.3257274131847494, 0.42540140373412694, 0.20127440340153968, 0.37063671455030456, 0.4463963638400632, 0.4352123172667137, 0.500547667738427, 0.5798305967615982, 0.37331837911907206, 0.3809367355251516, 0.2574880395324177, 0.27707795011883085, 0.23290896885427925, 0.1858925641740118, 0.23085624543603833, 0.2602970688379681, 0.3802582695773412, 0.21203729081793576, 0.257575895295584, 0.25315323789821664, 0.2180754649965233, 0.20946471316081527, 0.23597856679545337, 0.2536796725346978, 0.27265865256467836, 0.2285117245969105, 0.2410452413119033, 0.249100068148428, 0.22018250739700373, 0.20882054893941238, 0.1904237165194449, 0.1853188017352856, 0.20797572759634597, 0.22677109688455044, 0.668171986679144, 0.18850612367832087, 0.1883276187578885, 0.18813225299436198, 0.15957057266597208, 0.9046540019961291, 0.12128632651650728, 0.15800510033124282, 0.16652257744579058, 0.1066801673419353, 0.16789526382819986, 0.8263246399758813, 0.7814889763569057, 0.7993493238260917, 0.1126397118014757, 0.16895411123576343, 0.20972491273951566, 0.8219761207998006, 0.7316626265939133, 0.7997357322454869, 0.18296624401780281, 0.207779928925795, 0.23360559469127296, 0.18757490038970503, 0.1875783290905353, 0.23994326571244273, 0.23651339301304697, 0.213894511356857, 0.24300922586040996, 0.10021999306902762, 0.11075338685575586, 0.0945510641751296, 0.09512757654017534, 0.14267109662632016, 0.12872220354910135, 0.08086604272451914, 0.09612104925707576, 0.10465464197914731]}, "mutation_prompt": null}
{"id": "71cca056-99e2-4d25-9046-5c3c92fdd949", "solution": "import numpy as np\n\nclass AdaptiveQuantumCollaborativeSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))  # Initialized to zero for adaptive control\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.8  # Adaptive differential weight\n        self.cr = 0.7  # Adaptive crossover probability\n        self.w = 0.6  # Enhanced inertia weight for balance\n        self.c1 = 1.5  # Cognitive coefficient\n        self.c2 = 1.3  # Social coefficient\n\n    def adaptive_superposition(self, x0, x1, x2):\n        beta = np.random.rand()\n        return beta * x0 + (1 - beta) * (x1 + x2) / 2  # Adaptive superposition for diversity\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.adaptive_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumCollaborativeSwarmOptimization", "description": "Adaptive Quantum-Collaborative Swarm Optimization (AQC-SO): Integrates adaptive mechanisms and collaborative strategies to enhance solution diversity and convergence in black box optimization.", "configspace": "", "generation": 98, "fitness": 0.33334327206547687, "feedback": "The algorithm AdaptiveQuantumCollaborativeSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.29.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.8542072025099322, 0.8673127617543378, 0.8253020278014874, 0.8461140840471975, 0.8781623383032596, 0.8814834578961317, 0.17554598947127364, 0.8641697258685845, 0.7794867140906466, 0.7025697302430521, 0.580065067896436, 0.6941921257839292, 0.678265147141809, 0.6944563521641507, 0.6949206158663337, 0.5122995654197756, 0.7347049791315181, 0.7139064086235627, 0.1389147602265688, 0.13224371178298755, 0.1193083597955068, 0.1229017769470735, 0.17150679091327836, 0.15842499307715008, 0.11566453300920099, 0.15289014522932576, 0.15873208168626862, 0.0919735909217898, 0.15991357392497485, 0.13065168190102538, 0.11837017192170385, 0.10421141096617159, 0.13941219687816642, 0.1416637221997289, 0.10485817709100742, 0.13581068795844697, 0.9900012389188784, 0.9895490427153446, 0.9922426241120812, 0.9871137669047568, 0.9828172094973054, 0.9895364100952689, 0.9779741992807363, 0.9935151656970062, 0.9862328597367556, 0.7702173428498831, 0.7346574962095322, 0.7357483221106259, 0.7377887874425992, 0.750689535900862, 0.7431646961194014, 0.7585269543503015, 0.08727062847573375, 0.7440604014910162, 0.22852599364809867, 0.2154471465783836, 0.22534622165013662, 0.21046215443625615, 0.11789511481902859, 0.21325257775769602, 0.2373899748450834, 0.175919298160785, 0.40087841513438593, 0.29684314441407966, 0.24582024047854933, 0.13034396064518694, 0.11705039810053208, 0.12299713739248308, 0.13078285834884407, 0.2642365042158523, 0.2630216299709186, 0.24908269851730624, 0.26762840718708825, 0.26203286067766685, 0.2627700185195757, 0.26762947985671537, 0.29176665271559454, 0.2889691678735883, 0.2706034553276281, 0.27555136295155913, 0.13161717437782705, 9.999999999998899e-05, 0.008419578640017966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010221790394654318, 9.999999999998899e-05, 0.019968110403954076, 0.03986382770214858, 0.10900904293277947, 0.06012813154932406, 0.05310405188706735, 0.08258163230175974, 0.1693508699534686, 0.10812308787116143, 0.10428487060214608, 0.046569377361976194, 0.04956582600168968, 0.12115657757647003, 0.12589454430613767, 0.10317544148467295, 0.08862697886602, 0.18403487908515948, 0.2546099218935338, 0.09641030170477882, 0.12230738423439269, 0.10266373554783659, 0.15576900740471866, 0.14394031463773294, 0.14353003792792118, 0.1069831269773065, 0.44722908483583257, 0.05636134993940434, 0.16056008906839148, 0.12404559673853577, 0.5598917140017662, 0.5270893376470361, 0.5466107545639112, 0.5643026379970528, 0.5820363611551338, 0.6214000469907692, 0.5745978189577481, 0.5993864159032778, 0.5662577438170235, 0.06710714004390284, 0.12965398504690873, 0.1110771968441151, 0.12873358515813893, 0.09926857951934487, 0.12531107824585763, 0.08168065923708312, 0.12607713712599578, 0.12063655263351869, 0.28161810576973545, 0.22719084388631117, 0.1860051627477114, 0.1653242064240258, 0.201930675396778, 0.257875458506413, 0.36666634919750185, 0.21858018394911982, 0.30363796746349125, 0.4914213617311526, 0.41938063371841006, 0.38316440417992204, 0.5767030856278959, 0.4879344316472881, 0.4594965888087498, 0.6037259844146359, 0.2918036370401865, 0.23649049736713945, 0.2540196658279278, 0.27801695241682045, 0.3265328966910487, 0.3512669646211839, 0.18540908080478402, 0.25052339085793274, 0.33271154399696057, 0.2697141172142169, 0.1958886083297683, 0.2636200669146648, 0.21785485271195015, 0.2187029443225934, 0.2490171723854544, 0.22707048785941675, 0.2004381586105214, 0.22309775485788252, 0.2764692293045379, 0.24098682439438412, 0.2100331162366701, 0.19959685247163184, 0.1763900741647747, 0.1961864155539228, 0.19159050583349557, 0.2503678452542226, 0.2112597857607016, 0.2295054216181468, 0.18580192424274466, 0.18677942091367494, 0.1884804063422334, 0.1488612844489311, 0.9412007692347222, 0.14755712323843362, 0.9374886766968813, 0.9224405449751768, 0.9159878771392226, 0.9236750918049828, 0.8939202567790929, 0.9025226404018977, 0.8180475817667536, 0.7388582903464291, 0.1694739734973577, 0.735751408184745, 0.12799861459937034, 0.16777939202443248, 0.8263839007537558, 0.19802938296400807, 0.2161862648870081, 0.243809263731962, 0.19753955846966942, 0.1826645720344775, 0.1999048088141181, 0.18718711364914165, 0.19717788058908559, 0.21667121707061143, 0.09476047639372576, 0.0916145729760538, 0.10212419195484057, 0.09549716038997236, 0.07895193520558663, 0.12347853184243707, 0.09079158741915927, 0.0937523859815661, 0.10798167181433804]}, "mutation_prompt": null}
{"id": "608c04a7-10f8-4a44-90dc-ad2c7d88697d", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.eval_count = 0\n        self.f = 0.5 + np.random.rand() * 0.5  # Adaptive mutation factor\n        self.cr = 0.7 + np.random.rand() * 0.3  # Adaptive crossover rate\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.6  # Co-evolutionary factor\n        self.c2 = 1.2  # Co-evolutionary factor\n\n    def quantum_superposition(self, x0, x1, x2):\n        alpha = np.random.rand()\n        return alpha * x0 + (1 - alpha) * (x1 + x2) / 2\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Quantum-inspired Differential Evolution\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant_vector = self.quantum_superposition(x0, x1, x2)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, self.population[i])\n                trial_score = func(trial_vector)\n                self.eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if self.eval_count >= self.budget:\n                    break\n\n            # Adaptive Particle Swarm Optimization with Co-evolutionary Dynamics\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2, self.dim)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                                      + self.c2 * r2 * (self.global_best_position - self.population[i]))\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n                score = func(self.population[i])\n                self.eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization", "description": "Adaptive Quantum-Inspired Co-Evolutionary Swarm Optimization (AQCESO): Integrates adaptive strategies to dynamically adjust parameters for enhanced exploration and exploitation balance.", "configspace": "", "generation": 99, "fitness": 0.3445968453114336, "feedback": "The algorithm AdaptiveQuantumInspiredCoEvolutionarySwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "56ae4f80-ae02-4633-8b05-d6f6ac4573fb", "metadata": {"aucs": [0.9105023059330358, 0.9021222340035396, 0.9096627189299323, 0.9030603241222357, 0.9076498914111134, 0.9028099596675326, 0.9016349120586131, 0.9154007997167917, 0.9012239096638162, 0.7822241346220347, 0.7159343443429304, 0.8064288767668348, 0.7982278737860515, 0.7843607052831887, 0.7646515933588656, 0.819919425538279, 0.8043667744054696, 0.761308535719386, 0.1251027902302545, 0.12485706817652442, 0.1431075042850536, 0.10999101747459283, 0.14691619034638115, 0.11808088337479161, 0.15078375647204323, 0.11610666342125753, 0.16073298452577545, 0.16144476366557958, 0.11028078466522673, 0.0954620682817473, 0.08486193985733337, 0.12381600157321448, 0.13298817547790132, 0.11053927345086267, 0.11160857389193901, 0.16006096011004445, 0.9896416263575365, 0.9889878617511078, 0.9837315046643049, 0.9859450082095406, 0.9856291856497458, 0.9837336570485736, 0.9859148093569003, 0.9864866724837461, 0.9938741857976556, 0.8307365964574603, 0.8221519705295963, 0.7889680490960089, 0.8310782704474968, 0.8069988222261308, 0.7462160960266699, 0.8135913321457404, 0.8051187870266006, 0.8093120537959989, 0.22945520923696439, 0.2132593291303837, 0.22847054110454335, 0.19273177975685907, 0.2209895337664265, 0.3844752837693828, 0.16703554621148886, 0.17658619259137376, 0.37501142379396246, 0.3079256853651928, 0.29489336548294254, 0.27634373531589396, 0.13499204428411704, 0.3050227243525869, 0.13392148484137234, 0.30863547234347555, 0.31344668657517605, 0.3008550468759472, 0.28048124321511403, 0.3038939666651329, 0.2777937478227346, 0.3132741057593498, 0.31841326390215496, 0.3274843196504891, 0.13387793237349288, 0.3078935637410194, 0.3023948025017045, 9.999999999998899e-05, 0.0016828245049756996, 0.041123907556436246, 9.999999999998899e-05, 0.06215494320188386, 0.05631136910346668, 0.10902017998488123, 0.031889420616651676, 0.02706099845380794, 0.1756552862132268, 0.04980936130304703, 0.07246907372241329, 0.04480543283686633, 0.03840500850102946, 0.1643497181731325, 0.06900346602642204, 0.11718599144858943, 0.05692921326586109, 0.041183799668682686, 0.2293144666642556, 0.05410820138744454, 0.25853529264948716, 0.07941170014854926, 0.09960069884314438, 0.10276298107682758, 0.07487929924480763, 0.11589760048847597, 0.1146579736453277, 0.08619447407454117, 0.22619802542831735, 0.04243976498142232, 0.021516808491992223, 0.12642764699950093, 0.04093096780087924, 0.08373207677218764, 0.15190937383837477, 0.5921319432718029, 0.5623436965844348, 0.5663999915571843, 0.5555257279212698, 0.5373614669355107, 0.5614802287015299, 0.6085270087166426, 0.5887922335500798, 0.6143620707114414, 0.07219590804858822, 0.09482779241756911, 0.14440615192493356, 0.10663168345377239, 0.08535262791183107, 0.11644927292757745, 0.1147516632152461, 0.11827999661470678, 0.15936166809298702, 0.1918073395862564, 0.559122314269751, 0.23642458835030644, 0.21429828992972877, 0.17474674079452668, 0.22666754124400823, 0.19207541570592745, 0.17327479302731152, 0.32987326826132846, 0.5311341143041348, 0.6523607555794213, 0.35846420153639014, 0.3868131349056869, 0.7427626377121321, 0.29435350844223274, 0.2512227368192973, 0.7691976613918299, 0.30404294027975787, 0.2843755608981876, 0.3590261221591792, 0.30668971174349613, 0.31986435909575106, 0.33488357255562207, 0.2981033818277323, 0.2362068478649929, 0.256194055622317, 0.24976233167418715, 0.2473071788792781, 0.2824454344755545, 0.2397969925480522, 0.22048437374220198, 0.23137591159944693, 0.28588389216058496, 0.21983239243432606, 0.28457726944425243, 0.23205158215546595, 0.22510448268622008, 0.19396449476965893, 0.1846072526088296, 0.21243563793959253, 0.8641052574602663, 0.19916387721622497, 0.22608936382061706, 0.20365397324359213, 0.22665748530734986, 0.1770556253850598, 0.1886266322007053, 0.15466400487852738, 0.1786058096763019, 0.17248491981531167, 0.9402611814828671, 0.17883473634724356, 0.9375032539616996, 0.1723280786739373, 0.8218341491883258, 0.21165324624287674, 0.8751970671986113, 0.2113300276514668, 0.21235350933637787, 0.8337813635581655, 0.21348732388290215, 0.16893867377758942, 0.8416121537848489, 0.20231606152388126, 0.20534271003637683, 0.21436737640375492, 0.2161172443553523, 0.19188858820053634, 0.2599244543150282, 0.20790122745889517, 0.22968249120773487, 0.24629754927152836, 0.10149210950333787, 0.13200448479448046, 0.10519734216846777, 0.08988370287107283, 0.10701920554350675, 0.08304784625028883, 0.07007201431057763, 0.11018336810248075, 0.14350055805224127]}, "mutation_prompt": null}
