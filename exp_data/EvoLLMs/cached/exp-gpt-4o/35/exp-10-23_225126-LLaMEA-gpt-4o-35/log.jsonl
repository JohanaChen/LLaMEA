{"id": "4af5eabc-34e5-489c-8321-012660ee750d", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.95\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "HybridDE_SA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm leveraging adaptive parameter tuning for robust global optimization.", "configspace": "", "generation": 0, "fitness": 0.41798771421643327, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.26.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7400362417500637, 0.7406998531130793, 0.7322396783447135, 0.7471543897049371, 0.740175774446114, 0.7387540854129292, 0.7431853906972855, 0.7379151770549645, 0.7317131375022468, 0.6684879959138817, 0.681789463873786, 0.6793613329248519, 0.6815781359935138, 0.6789047582532874, 0.6960181999886466, 0.6780745627763382, 0.6846029275574437, 0.6904116458874275, 0.14701855746211534, 0.44019146913898577, 0.14094975479463467, 0.1521439852598191, 0.17828521323428792, 0.1472832468219858, 0.1436532130402266, 0.16344973967958143, 0.11313690880175731, 0.1473619917149539, 0.14768539430843908, 0.137380057816045, 0.13255092608252894, 0.19145730270347272, 0.11111991852684167, 0.14481949740160527, 0.13476052375590952, 0.38620974367185334, 0.991324389068452, 0.957548588480582, 0.9744998057424998, 0.9691564225081488, 0.9742359073311609, 0.9787845409089804, 0.9605444635446494, 0.956536362549546, 0.9501821365774766, 0.6076275684579076, 0.6043361831086624, 0.05915698293476035, 0.6124404245282409, 0.6233641963094201, 0.5794264297099484, 0.08827261669802522, 0.08826089882980648, 0.6236937436224737, 0.8028550763841706, 0.804481865409034, 0.7547130594803768, 0.8236115112540068, 0.8096575529386588, 0.7964433410173375, 0.8218408337217795, 0.8488223739872816, 0.8144469757298883, 0.51340361631005, 0.577707238036465, 0.4897191796810634, 0.47579583505522793, 0.5845555011817131, 0.5257490510062459, 0.4990866764152514, 0.4247499896021939, 0.5279669276336015, 0.6337996343289864, 0.010104404912071208, 0.5537582790608704, 0.5688859398703294, 0.5963735753077003, 0.5250532436238304, 0.6146893126609776, 0.5626336286655387, 0.5618549861702534, 0.5474492457976845, 0.5398801159134099, 0.06964090871119755, 0.5546581470434606, 0.3509617752380777, 0.5322119893492625, 0.5778761308828806, 0.5657574645447607, 0.5577825221036727, 0.6352525291383952, 0.6403120782194112, 0.6613607343536954, 0.6725157258233981, 0.6584919319293137, 0.6670645980827637, 0.65517312502798, 0.6515881180731136, 0.6476179372263864, 0.2673910588021827, 0.42150076311671913, 0.2522767942628943, 0.3200493125928622, 0.27968623862004993, 0.3959221440961106, 0.17262694729562045, 0.19579580445417888, 0.23453181757821506, 0.40686242649022974, 0.4826562599476192, 0.4433013388892384, 0.45449844612578905, 0.45213249282081414, 0.40399240261114233, 0.4084662831744236, 0.4240897735011411, 0.4692390870315496, 0.7081245450538842, 0.702724915884186, 0.7113508903299002, 0.7038496142903019, 0.7057783490229776, 0.7126856148052767, 0.7073260562923334, 0.7109643327688175, 0.7038971691185139, 0.09036340905666074, 0.1126533966041876, 0.1098235323997806, 0.25161117926196175, 0.10475799224800153, 0.11917862630245568, 0.11099811798223347, 0.12231534595073246, 0.11815238109673687, 0.157669257199602, 0.23679906036346576, 0.16440436792158963, 0.19001074697741238, 0.17504861539283756, 0.19101473871834695, 0.1613020163467892, 0.13515973846073137, 0.1926904565161115, 0.41213565734532953, 0.41603040055828233, 0.4293755989075071, 0.4521253908242939, 0.44386949481097704, 0.40821712176286196, 0.470777043837864, 0.4236114772387999, 0.4665518831891541, 0.30262396208198605, 0.35608587329136376, 0.29251776002282437, 0.3541684856982531, 0.3691241804238231, 0.33635346959905, 0.3591663194135807, 0.363207823249283, 0.354887979762865, 0.17721676054750968, 0.19532012898693585, 0.17157549867088506, 0.17533072995215793, 0.1954245776145319, 0.19674229641283647, 0.21261347107147233, 0.1752536815302581, 0.20838450710694945, 0.3322470928444352, 0.22286076105338326, 0.20376534128511103, 0.22127644538274593, 0.6074481887814026, 0.4784661457609888, 0.20048495561972912, 0.5995658457363531, 0.41553806107859714, 0.16341427359541427, 0.7871610347792436, 0.16260358300899225, 0.1870564970058406, 0.18202215571976277, 0.17635819437535993, 0.1844189861208727, 0.16345462403908573, 0.7914537047127483, 0.15010885757858417, 0.20134585530187388, 0.1645591808418947, 0.7544384759058415, 0.19603202849960566, 0.19767636753830475, 0.203488833743955, 0.20834997988663528, 0.19560107600507315, 0.16872189460094378, 0.1715171447082826, 0.2121671860274964, 0.1766280820094791, 0.1821630763753922, 0.20661540669441858, 0.20165461321645828, 0.16857668915055657, 0.1792954908819474, 0.07186199715261665, 0.0770282963618023, 0.08807240506787928, 0.0774535021081485, 0.07442676310600205, 0.07564307659790104, 0.07996137205972065, 0.07820424275613347, 0.07148651075925883]}, "mutation_prompt": null}
{"id": "a998648b-c192-4277-a7ee-556e66ba31cf", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F = np.random.uniform(0.5, 0.9)  # Mutation factor\n        CR = np.random.uniform(0.8, 1.0)  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            diversity_factor = np.std(self.population)  # Diversity measure\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Differential Evolution Step with diversity-based adjustment\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c) + diversity_factor * np.random.normal(0, 1, self.dim), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.9  # Slightly faster cooling rate\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "HybridDE_SA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm with adaptive temperature and selection diversity for enhanced global optimization.", "configspace": "", "generation": 1, "fitness": 0.14207002855165612, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "4af5eabc-34e5-489c-8321-012660ee750d", "metadata": {"aucs": [0.24363272051860396, 0.2468858267701075, 0.26666168216994757, 0.20966568987268008, 0.19913867652400286, 0.20717672578084034, 0.21443337942467844, 0.24204506877298948, 0.26455799153195736, 0.0015206306189826657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07028032588320743, 0.06768103262252056, 0.059891889916171226, 0.08190650185563986, 0.05994546509194065, 0.06399654598328963, 0.06086550579044381, 0.05406119176113666, 0.0624227693370798, 0.059995078552462666, 0.057509593991521224, 0.07150231897025006, 0.05877789576663617, 0.0655557278450849, 0.06709160122678326, 0.07009960727019893, 0.04752214769140628, 0.059666599402201204, 0.9877336557297298, 0.9818676624830033, 0.9748560202334553, 0.9872872011345412, 0.9890811150542652, 0.983013551426534, 0.9909902814581396, 0.9789461797238931, 0.9726418631125929, 0.11766198118531979, 0.08917260472049471, 0.11555418865980305, 0.1362466901911259, 0.11386832602964436, 0.11325380119339956, 0.1023992848226315, 0.08310733326863451, 0.08745680412543277, 0.1525211016914585, 0.1569202006378667, 0.1414847674344073, 0.14040358368802175, 0.1527404460887949, 0.13563492323484827, 0.13308935457781024, 0.12010621962573809, 0.1403808228140977, 0.04805012629135985, 0.08915654466222056, 0.048247682702352135, 0.03951274958776174, 0.034664690340246995, 0.03413579510646125, 0.0561392775029419, 0.022194037216595075, 0.08706195900651115, 0.07814904953454116, 0.04183140533567653, 0.010118199826445018, 0.07296871181300613, 0.1070699392041028, 0.07682118532856552, 0.05336607561095019, 0.009568588479814344, 0.01008116911169743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03497523170908934, 0.0522977280617386, 0.033120473501067726, 0.02558600763066765, 0.026010761873393462, 0.05244069686099606, 0.03748551619573082, 0.026653662972272674, 0.04603789206632314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004296885413434981, 0.00037700251050631906, 0.0019343218477346769, 0.000843223189465836, 9.999999999998899e-05, 0.00945209074223563, 0.007342433637376189, 0.010550298844812511, 0.0008159604653905639, 0.2667235957704277, 0.22961210101686602, 0.23011528453059882, 0.21873087112388545, 0.2389470610991833, 0.2488707522896888, 0.2718375206432042, 0.27688269953458866, 0.24181738287841947, 0.07319737371557455, 0.05844061931001909, 0.0569272656164983, 0.0720313872845536, 0.0644761449229696, 0.0634993395861968, 0.06527584398986441, 0.06751716415710529, 0.06607647139718797, 0.1419412248819768, 0.13910031900382092, 0.14534236857280614, 0.14418402810801467, 0.14837965389977303, 0.15429110118126688, 0.20227038519270624, 0.1400889299322855, 0.12432858823292281, 0.1779981332050551, 0.1806453036178466, 0.1894226421500116, 0.19677618177134837, 0.182789201507222, 0.19521528573016755, 0.17960088596304957, 0.18087372358299325, 0.19201462090277566, 0.12937472364135538, 0.11756307613438088, 0.12565395026856951, 0.11856173383367896, 0.10781824644054128, 0.10490042990074966, 0.12716849988764256, 0.12916183907195222, 0.12367323003099284, 0.19000477790195547, 0.1602011963429022, 0.1674916185238028, 0.15908262434638798, 0.14903446657229524, 0.1534149439926047, 0.17273527096020902, 0.15624917039887753, 0.16308358502287157, 0.1627357590312526, 0.15304615726361281, 0.1663964210677834, 0.18130051768835576, 0.16305930726569262, 0.156113834507689, 0.15903201831648517, 0.17486457060584504, 0.177624821130829, 0.14107358957325122, 0.1560814265329804, 0.26720789991581284, 0.15000191169581034, 0.13496942701794556, 0.15400659421592588, 0.17849321674090168, 0.14512313711212554, 0.15378120234922932, 0.13736680550168945, 0.1597615660260332, 0.15981620262884555, 0.1293222594935347, 0.16740217318003447, 0.14215129004928972, 0.18644069486567727, 0.24362435336910349, 0.19049497374497626, 0.1826171439629064, 0.17871332325562472, 0.17782321384080768, 0.18669958309200896, 0.19453659377856647, 0.18491499533265665, 0.1870432301497389, 0.1892609644485015, 0.1850677469291797, 0.057355581288702884, 0.05292692113598474, 0.06528234791421361, 0.0594322006974185, 0.05539833359808677, 0.07068434816894553, 0.06833067318908814, 0.05903203325326145, 0.054332433184741014]}, "mutation_prompt": null}
{"id": "075696d5-7064-4d07-868e-906ea99091dd", "solution": "import numpy as np\n\nclass ImprovedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.9  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration\n                F = F_base + (0.9 - F_base) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.93\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ImprovedHybridDE_SA", "description": "An improved hybrid Differential Evolution and Simulated Annealing algorithm with dynamic mutation and adaptive cooling for enhanced convergence.", "configspace": "", "generation": 2, "fitness": 0.42286139494057934, "feedback": "The algorithm ImprovedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "4af5eabc-34e5-489c-8321-012660ee750d", "metadata": {"aucs": [0.7998867955856974, 0.7838642473989939, 0.7897844737473154, 0.8004797275509483, 0.8038566372271574, 0.7905393872739648, 0.7964232478171228, 0.7931003928087264, 0.7986187309054017, 0.7188104704134802, 0.7158127110016557, 0.7106022703869925, 0.7176323856207322, 0.6997233985910483, 0.7082804177418593, 0.7123538667002067, 0.7216438029763137, 0.7100304882572506, 0.5210700154462234, 0.16061492231265784, 0.13208348769738532, 0.1368521261368647, 0.10664481834092554, 0.10862490609050801, 0.14487339850215486, 0.45267706859252177, 0.10996026878830056, 0.09696219821109464, 0.12814628375655934, 0.12588028240712634, 0.1410767182017948, 0.12111973138050236, 0.13141818774672953, 0.11122974128431706, 0.12984880582081493, 0.12416834430171042, 0.9913939359189117, 0.9723660579483131, 0.9898228989661095, 0.9812302061177172, 0.9838018441483624, 0.985433332079679, 0.975572039478125, 0.9813282867419723, 0.978307647557177, 0.6193830224416774, 0.6534516108076487, 0.614994221991731, 0.6267072718531564, 0.6196864550831018, 0.6245771210433803, 0.6429214446581937, 0.08696813272777837, 0.596927767552135, 0.7804283397936015, 0.7963840998475579, 0.7911805456409795, 0.7945485162549965, 0.7110874064095039, 0.8001337370928505, 0.7531693491235398, 0.8100010604281926, 0.7845686489351649, 0.5948284771313501, 0.5760610894075897, 0.5633759502568325, 0.6315996557490128, 0.5550508278100397, 0.5828896042281264, 0.4807553101097356, 0.6043029819822257, 0.5463580893798744, 0.00991450253802173, 0.01008869967214665, 0.34456601897021555, 0.5031880864177987, 0.5083089515227514, 0.5728892042142486, 0.5950520639923823, 0.5863233555541487, 0.5830158439673098, 0.5610843150748117, 0.5779082067910009, 0.07014494727860077, 0.5621308978778189, 9.999999999998899e-05, 0.5699411797495989, 0.5742211918723243, 0.5270720665617188, 0.555677830357576, 0.6581214288203818, 0.6433878699793658, 0.6446791027143762, 0.6502097155852369, 0.652270468194228, 0.6196853681625879, 0.6715717138337519, 0.6857368344312753, 0.6504642118045038, 0.03412143093340969, 0.16757185546184195, 0.1368936408250172, 0.36026037278337963, 0.17884427893901322, 0.07275004853634714, 0.3256153249642916, 0.10035569783504728, 0.19897357789474912, 0.45781501996091034, 0.39855116085154807, 0.46538381140811813, 0.44895952971754594, 0.48698138268125724, 0.4911266262451771, 0.4706265491686902, 0.05576461953393286, 0.4544062919659301, 0.7606734163412031, 0.7531338849346156, 0.7480805044027379, 0.7739890811373529, 0.7678193083511373, 0.7689410184052364, 0.7608292396741365, 0.7595563860191819, 0.7589810822142598, 0.09409454549230611, 0.10269867666251942, 0.14407864112199098, 0.13042304517128378, 0.09977077174463245, 0.12066046783705187, 0.09387489696356699, 0.11733451921886029, 0.11019629581722146, 0.1526355722851488, 0.14264550642687523, 0.15113778714001258, 0.15220827504272982, 0.13339283066288043, 0.14158781182717572, 0.16445576074940438, 0.12315256299576194, 0.2042006814462679, 0.5041129626737622, 0.4631184402202315, 0.5322229271531483, 0.4879127955246879, 0.48141865829714936, 0.5087859076618966, 0.48606865743203487, 0.5240006544530046, 0.5440233287844596, 0.3252232966254942, 0.41516144690568246, 0.37480031672371505, 0.21858203697377, 0.38482323669613316, 0.38777528998297506, 0.3945406113524573, 0.4040173698616476, 0.37777715179234506, 0.18979320069949623, 0.1948176880813024, 0.18781094466230985, 0.1692570502824754, 0.18404847909356037, 0.17717896499745278, 0.18728717036109443, 0.1966318584225204, 0.1782773378080894, 0.5413750743598915, 0.19406330837068586, 0.43238536876636036, 0.204190228144004, 0.20600439045208951, 0.49428491641548766, 0.46346047222895936, 0.3543458476015461, 0.20458329891760085, 0.20323868491604358, 0.16424110944049752, 0.8340055427643234, 0.1873169345785115, 0.19624965672430128, 0.13553651513553067, 0.18555206461815643, 0.19006765029777273, 0.16683932996396833, 0.7584987368001193, 0.20339846583548638, 0.1591751331538548, 0.7909786329177604, 0.7605616648016618, 0.1252460342334618, 0.2118468188720588, 0.19788142541320297, 0.2123339280919272, 0.18334132352107235, 0.1670415491351085, 0.17236069169159274, 0.1967295091705774, 0.16921711676436257, 0.17691171801122785, 0.16796711042129586, 0.17627327704807516, 0.16926210784866125, 0.07702715351531386, 0.09107210918835584, 0.07764516227549123, 0.09101112286728352, 0.0902992273908314, 0.0806572862201298, 0.08141173596649243, 0.07838548509960452, 0.074718994242149]}, "mutation_prompt": null}
{"id": "67564a74-a8c4-451f-a281-1a19dd042a35", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Entropy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 25  # Increased population for more exploration\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.85  # Modified Crossover rate for balance\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Adaptive Mutation factor using entropy\n                diversity = np.var(self.population, axis=0)\n                F = F_base + (0.9 - F_base) * (1 - (self.visited_points / self.budget)) * np.mean(diversity)\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion with entropy-based cooling\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction based on population entropy\n            entropy = -np.sum(diversity * np.log(diversity + 1e-9))\n            temp *= 0.93 + 0.02 * entropy\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Entropy", "description": "An enhanced hybrid DE with adaptive mutation and SA incorporating entropy-based cooling and exploration strategy.", "configspace": "", "generation": 3, "fitness": 0.07123288422039785, "feedback": "The algorithm EnhancedHybridDE_SA_Entropy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.20.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.050955942659132614, 0.05301707745888984, 0.034496885259010956, 0.06414676955167375, 0.06365502060920336, 0.09591461288036718, 0.06365255730728991, 0.07801423784380224, 0.04199660010291062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001689362673893413, 0.00040820498776006353, 0.00012285087163765862, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001021441021774594, 0.0005311206479121644, 0.00022586343126751451, 9.999999999998899e-05, 0.00015785351108299484, 0.000147306727047547, 0.0001408247545902075, 0.0002529060200125999, 0.00010530442328271494, 0.00014047335100952907, 0.0006061626531920217, 9.999999999998899e-05, 9.999999999998899e-05, 0.9955409398532676, 0.9928757196840475, 0.9944117918588653, 0.9967367536169494, 0.9974298628740703, 0.9950560468841176, 0.9938186302141384, 0.9933396145075318, 0.9939314471319212, 0.0015105379937363494, 9.999999999998899e-05, 0.001541378831813156, 0.00012426444856750152, 0.0018274332718494213, 0.000619728594172142, 0.003380763343211357, 0.0005641963889638779, 0.0005361363485959503, 0.014685074396751374, 0.00240410366337096, 0.001106112475802723, 0.0027695678154147085, 0.0022429444505418505, 0.0021672672035568663, 0.046118518029912625, 0.0016949919544924086, 0.0011639915924570587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005076086742643593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003582616349750989, 9.999999999998899e-05, 0.00017548228509112196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11680701026048756, 0.09206340600829555, 0.06131371381093742, 0.06394194782267493, 0.09458996408779674, 0.06231455320574153, 0.09286002269355453, 0.0984824405563055, 0.08666298172156162, 0.0025292156913172548, 0.0017648064944609798, 0.005741110792430115, 0.011175113659005143, 0.0006534977608254611, 0.005348677799222656, 0.00021956961671876218, 0.0007489162826000983, 9.999999999998899e-05, 0.09422550355367842, 0.10490371547131272, 0.10549343976781433, 0.08828276470130936, 0.07757971442988454, 0.08301534849197867, 0.08810571560812386, 0.08978905018601657, 0.09098289784717539, 0.11430909858883387, 0.08476351009063365, 0.08220898003522381, 0.093404015783487, 0.08933330847007093, 0.09190281312676785, 0.10733135289125217, 0.09028680222327512, 0.10424476975813413, 0.07056969651366729, 0.050290522385271985, 0.023494902489148428, 0.042063481956074456, 0.04451031021653107, 0.042225774042007336, 0.057289592576186044, 0.03203334271638292, 0.03035623051061742, 0.09201808298396486, 0.052335334540671075, 0.0760472981007635, 0.07141323054210147, 0.10172225318092065, 0.0512707629288951, 0.08595616697747976, 0.09072861019266931, 0.05530684654260731, 9.999999999998899e-05, 0.0034720728161270475, 9.999999999998899e-05, 0.001678282260349273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004483706590569625, 0.0005488915100637648, 0.07656912712530706, 0.07757332875491452, 0.07630744180717719, 0.04121913072307071, 0.05665503202673117, 0.03596264287387274, 0.05857478093372681, 0.06902162804933365, 0.028789304181000785, 0.03356163241343435, 0.03387469141919863, 0.035370076302570275, 0.03416088353544289, 0.05894060643349608, 0.0595102326371556, 0.06444354635001759, 0.030705024643390644, 0.030703115400114944, 0.11631542494350666, 0.12613202883427332, 0.15216436834670732, 0.15013879909515615, 0.15068034852391465, 0.15043825545456435, 0.1674800907205024, 0.1382794289923842, 0.16525881579959556, 0.0007448696671228383, 0.0008190246601796902, 0.0006326903870763623, 0.0008540002830009774, 0.002560853842282218, 0.005950687076442418, 0.0015305926759103805, 0.0011124475200391393, 0.0012740718682513474]}, "mutation_prompt": null}
{"id": "e8412175-355d-4803-9a5b-d85231f4bd2a", "solution": "import numpy as np\n\nclass AdaptiveHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.9  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Multi-phase Mutation factor based on iteration and diversity\n                diversity = np.std(self.population, axis=0).mean()\n                F_dynamic = F_base + (0.9 - F_base) * (1 - (self.visited_points / self.budget))\n                F = F_dynamic * (1 + 0.5 * (diversity / self.dim))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.95\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveHybridDE_SA", "description": "Hybrid Differential Evolution and Simulated Annealing with adaptive multi-phase mutation strategy for improved exploration and convergence.", "configspace": "", "generation": 4, "fitness": 0.34463921389048374, "feedback": "The algorithm AdaptiveHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.7368032934366927, 0.7292437663444803, 0.7271629318388295, 0.18884201620289454, 0.7375639066922852, 0.7412828540223344, 0.739569104954965, 0.743104634519656, 0.7346483123971571, 0.6835410713712564, 0.6004422011602876, 0.6471079746621298, 0.6361259772286414, 0.6590651000768828, 0.6511906461489161, 0.6756287579274085, 0.6568959438479705, 0.6781397656762067, 0.1383223299770543, 0.13380414387499273, 0.15952529392876036, 0.07236824241819773, 0.22937614002485274, 0.06814335521375559, 0.3376625834301721, 0.05394106658211806, 0.049828011078900114, 0.11632193980291483, 0.11744074861870502, 0.10892536751849513, 0.10239651968859054, 0.11903971587309425, 0.11588388014759732, 0.1419598316756595, 0.12408648726726512, 0.13550663352830938, 0.9904350025641936, 0.9854606308945896, 0.988642733013062, 0.9866413808903646, 0.9837267300703731, 0.9895292999594875, 0.9776678833562632, 0.9937292061862386, 0.9961981532702537, 0.6114474639142566, 0.566402920973254, 0.05437753987452598, 0.582504123269671, 0.5809647162472424, 0.14536013737887865, 0.624017586871135, 0.6369402967409103, 0.0869566010795153, 0.7239394515184805, 0.056854065903484075, 0.7254901558994118, 0.7673474418199675, 0.18939540362359142, 0.715085174731712, 0.13794396549059862, 0.123800068897573, 0.7450437189252744, 0.4257780449793991, 0.5089398257244782, 0.5295903142553733, 0.613180024531426, 0.1511627028263165, 0.5927180555699574, 0.3860941448147479, 0.5141044128600181, 0.19884124130072267, 0.009987940177334176, 0.016546100626548155, 0.009937310348568151, 0.30917771938794614, 0.5877948075994729, 0.5875460128526011, 0.579961183180393, 0.4806808173950856, 0.09882187189913516, 9.999999999998899e-05, 0.4565903784072117, 0.08185004748441038, 9.999999999998899e-05, 0.04226950398756524, 0.5763117681308463, 0.40131109067761706, 0.0028251806019529146, 0.4624926649326889, 0.44598460649408256, 0.5306785870193578, 0.6054829294569121, 0.4929284597483532, 0.6713529826953788, 0.5661418291233139, 0.5746926224821455, 0.11620811175005508, 0.5834520843876766, 0.07780045913916578, 0.2620989197971787, 0.06279678108267128, 0.35375130543119915, 0.12002044212145668, 0.48330152739986, 0.10050623558069804, 9.999999999998899e-05, 0.20526154145360131, 0.4785642569823544, 0.04191836015332284, 0.4429319271923984, 0.4840411783626526, 0.4614113795224012, 0.4510499799626718, 0.07843439386086815, 0.07901037970994584, 9.999999999998899e-05, 0.7173116083884771, 0.6969039659826644, 0.709608462559156, 0.18085957763781257, 0.7029013971282936, 0.7071561178164063, 0.707229376952158, 0.69590806263287, 0.7156726919447858, 0.12584025387690634, 0.1377871050866737, 0.09318447075517866, 0.11100292233236064, 0.11289414301165912, 0.10014234937078859, 0.1034091974053879, 0.15327961854488026, 0.08566383969776092, 0.14213098257683254, 0.09296116874721161, 0.1398591303999056, 0.1250611336302414, 0.21122986639012087, 0.17655535641767728, 0.19939113681526965, 0.1437961573316201, 0.1101087642435632, 0.4993214635650467, 0.3815198047971162, 0.4236661397134702, 0.4202229278333478, 0.4644001493581337, 0.4072113012172205, 0.5043099486690477, 0.51074012940304, 0.49639478009718907, 0.385755533765637, 0.3672668611643576, 0.32786134523899624, 0.38901051074898396, 0.20040356295309114, 0.08303120222669036, 0.34141862390324684, 0.40684201304745615, 0.4052982226299642, 0.19636019988378883, 0.16337808880432514, 0.1623741127606958, 0.16263445656395947, 0.17826561961907905, 0.16825783391585414, 0.16722249698257186, 0.17520763327426903, 0.19203267534675605, 0.21591660746416363, 0.3193980182826275, 0.2129760958809318, 0.20291067107785488, 0.20483253060331286, 0.6540796588541133, 0.40015330102376234, 0.19067108032522728, 0.4613274836751752, 0.16249951703019705, 0.782784811191937, 0.18169309656413035, 0.1739766676055169, 0.16604232524602225, 0.15935381378574753, 0.1831791211861944, 0.18262530627445994, 0.16025082366478438, 0.16513009542596213, 0.16364357905122584, 0.2001627843809337, 0.1937974856634933, 0.15637337761579895, 0.19302914384156866, 0.19652221415538695, 0.20629309379941274, 0.20786069595178658, 0.17617750316404435, 0.19279417188901193, 0.156451379241082, 0.17144278202853724, 0.21105871268237775, 0.16237041649728545, 0.18563174994812526, 0.15073305990932273, 0.1826764751521328, 0.07885526708661417, 0.08512856924767342, 0.07385406290146457, 0.08758763910549894, 0.07970102478779395, 0.08258036391829848, 0.07384984395597416, 0.08267592656582567, 0.08123450949741706]}, "mutation_prompt": null}
{"id": "52ce8922-098f-4085-8408-00c3bc8e26f3", "solution": "import numpy as np\n\nclass ImprovedHybridDE_SA_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n        self.pop_shrink_factor = 0.95  # Dynamic population shrink factor\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.9  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n        iter_count = 0\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration\n                F = F_base + (0.9 - F_base) * np.sin(np.pi * iter_count / self.budget)\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction and population adjustment\n            temp *= 0.93\n            iter_count += 1\n            if iter_count % (self.budget // 5) == 0:\n                self.pop_size = max(5, int(self.pop_size * self.pop_shrink_factor))\n                best_indices = np.argsort(self.fitness)[:self.pop_size]\n                self.population = new_population[best_indices]\n                self.fitness = self.fitness[best_indices]\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ImprovedHybridDE_SA_V2", "description": "A novel hybrid Differential Evolution and Simulated Annealing algorithm with dynamic population adjustment and adaptive cooling for robust optimization.", "configspace": "", "generation": 5, "fitness": 0.08588914849230542, "feedback": "The algorithm ImprovedHybridDE_SA_V2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.17491810066387847, 0.1465169128766871, 0.21392074933138605, 0.24648434035257605, 0.1559541944900662, 0.1616635411883206, 0.16765622399123203, 0.16061376041790576, 0.1250403979914676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02994423398893109, 0.049873510726055836, 0.046747470631712584, 0.04196614021138356, 0.04209726828027449, 0.03637382745649398, 0.056354531947977904, 0.047151572608727155, 0.047756090585466926, 0.02988703938067916, 0.01940039686227102, 0.033133928804374047, 0.023508904025765, 0.022953326755650094, 0.026771085905501812, 0.020880770132348125, 0.041430308029883456, 0.03115641969758509, 0.10466907703340367, 0.09180686377655589, 0.09341163071369685, 0.10654782529236362, 0.11020303009604338, 0.12756347910315835, 0.12743833465805532, 0.09440296333743359, 0.1083598746983584, 0.07075849577440496, 0.05580080771411089, 0.07776633810400724, 0.06293356830810648, 0.06695834920559918, 0.08261625736232203, 0.07557230393044978, 0.05371292669579342, 0.07846263133170961, 0.1330016424705529, 0.1345387089693777, 0.1049240506896495, 0.14271694174150162, 0.10593842762731542, 0.10478357624598045, 0.09748981045188665, 0.14367304022252014, 0.0993040098688256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04946796994517777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04264518547049834, 0.00988040545208424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004367731114496176, 0.033181156697947856, 0.0672452328883546, 0.05340412920676885, 0.04850542734607477, 0.02316231770322741, 0.03901566067910278, 0.054705703233195124, 0.03956502495644132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009195098486947106, 9.999999999998899e-05, 0.005967310230251099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1826824372210747, 0.20507487260319535, 0.1962676224505655, 0.19260341719067886, 0.19775509347137243, 0.17969292834808226, 0.15043098977779534, 0.17728171690787753, 0.18793863907484165, 0.017697769259091944, 0.08784663985754937, 0.02613349674069776, 0.04559800705605899, 0.040707627721491946, 0.04587501310852693, 0.04912714159124265, 0.049863270916850944, 0.04048936813525872, 0.1487241094041607, 0.13211064756771396, 0.1184729857386605, 0.13064236410677565, 0.1308746650407, 0.14275944552781716, 0.1694212449257746, 0.17623018237929267, 0.1485224206216753, 0.15048640319826045, 0.15645839387734672, 0.17008810519834483, 0.16306310935605106, 0.19356061307275274, 0.159910216564358, 0.1481015689642643, 0.17902283658118467, 0.13792304670580657, 0.10143393229712605, 0.10353600642415439, 0.10008536922513345, 0.12552465232388021, 0.15390005016227204, 0.12199986789524486, 0.09843779171779665, 0.10965339306329858, 0.07857290819157192, 0.1984175543064831, 0.12644169031571106, 0.15990967408814027, 0.15239442572577555, 0.14903209375968396, 0.16486098048002062, 0.151905448806829, 0.1318554914293738, 0.14938560745267804, 0.1507453735139891, 0.12426773239775413, 0.14830917268706867, 0.1310449558546266, 0.1548952982418712, 0.10128413620050503, 0.1387959646647241, 0.14965630554049258, 0.1155280018727628, 0.12324121186600734, 0.20581954785892587, 0.14383123209049287, 0.15362940718602336, 0.15655238825921147, 0.20279429060151155, 0.15717358159374017, 0.13362757331677144, 0.16161884671390347, 0.15724575342566072, 0.1139734771686266, 0.16513729455506965, 0.15600945791564536, 0.12147244714490257, 0.1304027907581392, 0.1286918622389165, 0.13848468799333424, 0.1241808598365155, 0.19044305455999, 0.1901226917672213, 0.1808801684247725, 0.1832127641467205, 0.17884690535598224, 0.17496900430052975, 0.18739169463425442, 0.1825750690803598, 0.19347079694650227, 0.05304230319592029, 0.041147351534363774, 0.05199997414707436, 0.04936014625619678, 0.05110275578263679, 0.05970271213538292, 0.05733796762526433, 0.048176585937952376, 0.050632351551187504]}, "mutation_prompt": null}
{"id": "85c1b62e-6ca4-40fe-b25c-9db1264c8b3a", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR_base = 0.9  # Base Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration\n                F = F_base + (0.8 - F_base) * (1 - (self.visited_points / self.budget))\n\n                # Dynamic Crossover rate based on progress\n                CR = CR_base - (0.4 * (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion with stochastic threshold\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / (temp + np.random.uniform(0, 1))):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.94\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm with dynamic crossover and adaptive stochastic acceptance for improved exploration and exploitation.", "configspace": "", "generation": 6, "fitness": 0.2623560743957853, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.17.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.3558364042396047, 0.34882184622872514, 0.34884019360431695, 0.3756182366934504, 0.3456920438047124, 0.39492809896080294, 0.3518797294148225, 0.4044609090580892, 0.3616412970132731, 0.3188121754580219, 0.31604737992667953, 0.3375615322330703, 0.3490006556499048, 0.3325400044259068, 0.33962552955408043, 0.3171727666604012, 0.31820893289367136, 0.32265213517901037, 0.19262468967395663, 0.128002201503294, 0.15254088259027487, 0.19882214273534282, 0.24030683487646665, 0.15099607001082682, 0.22417208725266824, 0.14815360126748855, 0.055285686005902224, 0.18710214624604282, 0.13861480516459435, 0.2504680710803803, 0.13946525701392276, 0.1504970900220749, 0.12437636486978243, 0.13360679761331395, 0.18880711736523592, 0.1401570609472026, 0.9677257776356804, 0.9837396672704313, 0.9674150621634628, 0.9583479817621255, 0.9826203754207165, 0.9395556709135015, 0.9552875238158263, 0.9143560591121098, 0.9961645318286604, 0.28353444866202293, 0.28047341886605137, 0.2837703171609519, 0.2798113593526629, 0.2658281034234671, 0.30094921996890134, 0.26944593731055244, 0.2884817029807315, 0.287777587145562, 0.3396772345751038, 0.33744031469141156, 0.33775617597763563, 0.34516272188613717, 0.5298258123595605, 0.34940754301813026, 0.3506425502460767, 0.3283770844825735, 0.3260532922698768, 0.2448434049972521, 0.27311546851436563, 0.2729601395154486, 0.27770574512919355, 0.2805384380007673, 0.24717881700747335, 0.2642375164997962, 0.2537041236795523, 0.28974630898971865, 0.010081789321924939, 0.009990226284538384, 0.05306162766379385, 0.24841750448782318, 0.23776490224433333, 0.24639491730802032, 0.24486666747832153, 0.22686026373904078, 0.30117240345560314, 0.24973040002705715, 0.23728473911436598, 0.26438818241837936, 0.26722236525329346, 0.2658400136104413, 0.21907772352866894, 0.2307608678663381, 0.24383030511811998, 0.2825857958490494, 0.3002306324629671, 0.344382872777663, 0.31303153980605625, 0.31578565989638563, 0.3296692874495796, 0.313982688720821, 0.3358494563344677, 0.3183541866763401, 0.3185370731403655, 0.0703229920319951, 0.14175002321550256, 0.19257331829285762, 0.16115629585727909, 0.12615078531510482, 0.16453963498088253, 0.24138914398505518, 0.09844905415496885, 0.14621818166754552, 0.2278483759119594, 0.23023062224884927, 0.22652183947620574, 0.21686311446946993, 0.21589222261841856, 0.22571698406746832, 0.22201790611992478, 0.2146705096330973, 0.2224702326631175, 0.3354993642809282, 0.3294561198413636, 0.3256437797748969, 0.32701733972223124, 0.318097279433154, 0.33715712287859, 0.37234636995456316, 0.32199487141508365, 0.3301545392339643, 0.09918096009802557, 0.11160920235552663, 0.11920110572959675, 0.09291169654281184, 0.09161360683407416, 0.10234060064525619, 0.11402195700945628, 0.09772087385051964, 0.09240954592088291, 0.14950311610101996, 0.16770531676466616, 0.11228579522627169, 0.16980863577276106, 0.15980885555660096, 0.13790410229184835, 0.16526056246484422, 0.1782417412938596, 0.2466346621414781, 0.2632018683668216, 0.2611944508023023, 0.27339203134891854, 0.27028416961228663, 0.2642558684863018, 0.25724765659673654, 0.26742430407552975, 0.27080416527966733, 0.2714776690838562, 0.2388203085572499, 0.23706228014886688, 0.24073852607658308, 0.25535440875193904, 0.22769798020237908, 0.2315621072787819, 0.25058902160903895, 0.25343228034401877, 0.25057508204549184, 0.2005466542579465, 0.20502877561842803, 0.19139689146201722, 0.20344714668205766, 0.22183650457851922, 0.19641257575231852, 0.1888027710070881, 0.20624865530140024, 0.204444288494541, 0.1910864578435878, 0.21854741325838933, 0.25328839309232565, 0.25222183889629957, 0.20239176537387948, 0.1936701132030656, 0.17194803554126759, 0.23938581428450179, 0.19620643148550576, 0.16328256182100975, 0.16637789427949634, 0.15313001022704031, 0.2046482264394085, 0.20095794545625678, 0.4710775946832998, 0.18512589967638626, 0.1647669797221144, 0.18400455075288014, 0.1647652891707614, 0.4384289181976586, 0.4046025592557214, 0.382402552709429, 0.3873739278623005, 0.15668746818390122, 0.20900297577985605, 0.20893429666845453, 0.19891126927633973, 0.18777004830546506, 0.1872295166773591, 0.18389527244111004, 0.19812929305975513, 0.1951585669121435, 0.18481034446021583, 0.1843272167143637, 0.18792706207805832, 0.1719474618875516, 0.07520692636368642, 0.07141644963001403, 0.07881699553479882, 0.08062520450682764, 0.07849917322659972, 0.07797417062283707, 0.08797782363996554, 0.0735923250096765, 0.08064192770843115]}, "mutation_prompt": null}
{"id": "6f0659fc-feba-4d43-b9f3-bc0dced3acfb", "solution": "import numpy as np\n\nclass RefinedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR_base = 0.9  # Base Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n        adaptive_rate = 0.95  # Rate of population resizing\n\n        while self.visited_points < self.budget:\n            current_pop_size = len(self.population)\n            new_population = np.copy(self.population)\n            for i in range(current_pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration\n                F = F_base + (0.8 - F_base) * (1 - (self.visited_points / self.budget))\n\n                # Adjust Crossover Rate\n                CR = CR_base * (1 - 0.3 * (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(current_pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(current_pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover with enhanced strategy\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature and population reduction\n            temp *= 0.92\n            if np.random.rand() < adaptive_rate and current_pop_size > 5:\n                new_population = new_population[:int(current_pop_size * adaptive_rate)]\n                self.fitness = self.fitness[:new_population.shape[0]]\n\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDE_SA", "description": "A refined hybrid Differential Evolution and Simulated Annealing algorithm with enhanced crossover strategy and adaptive population resizing for improved convergence efficiency.", "configspace": "", "generation": 7, "fitness": 0.16824874980871238, "feedback": "The algorithm RefinedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.20154583535995607, 0.6890225389431814, 0.31949421348099216, 0.19624551009820568, 0.8770788456368712, 0.34923458618366443, 0.6228037851410655, 0.4652329944139524, 0.2695798659932487, 9.999999999998899e-05, 0.06521712444811256, 0.016810206893601354, 0.10938626364792903, 0.009850579404573012, 0.1876535373630298, 0.005038048220372238, 9.999999999998899e-05, 0.096879147521579, 0.15402425221029747, 0.11754112764429758, 0.10546728784258153, 0.059639962529062895, 0.10732744973954178, 0.1249680879901891, 0.03635412829932538, 0.13931354837657495, 0.04284400177440295, 0.04322699361733484, 0.05534181103193747, 0.04546951962118784, 0.04803644944841945, 0.04167419438772013, 0.050205448665324726, 0.07435783474188351, 0.09072177218057642, 0.041213117906538144, 0.9821566461686805, 0.9686567119430499, 0.9708128327783063, 0.9734568654431521, 0.9719935389553188, 0.9713520896617924, 0.2106506076777953, 0.9753981227082646, 0.971056140641945, 0.08533714595848774, 0.07922504349571668, 0.04872218654766691, 0.026391929245101142, 0.1448603069042158, 0.11531042160538107, 0.11326817351825791, 0.11134706044321196, 0.12327857448423674, 0.30861525863000483, 0.12817984076444577, 0.22493951370464227, 0.18004681318477667, 0.18513045838866082, 0.19056560093051034, 0.1525775694258793, 0.17865336333939996, 0.22206788431318092, 0.022129765646951682, 0.1368742295607437, 0.14645442544832254, 0.14099042333422007, 0.058571859385578184, 9.999999999998899e-05, 0.06025826431681358, 0.12769679567250736, 0.1410465604285146, 0.022431110906238283, 0.10128017801887601, 0.04005419597980053, 0.13308786360445524, 0.12889979275645402, 0.02385950010106974, 9.999999999998899e-05, 0.1810997777001767, 0.016546503533266144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020897581544081945, 9.999999999998899e-05, 0.10246495454454907, 0.06035065820096497, 0.08832075473747703, 0.024294525499034547, 0.03786258491785699, 0.06340654197639428, 0.09467404763374632, 0.05707163856000974, 0.042572593957906024, 9.999999999998899e-05, 0.05446460493865779, 9.999999999998899e-05, 9.999999999998899e-05, 0.2571624932384653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008546956182508114, 0.022328032327460057, 0.06131742376255134, 0.0249320092547608, 0.019351521061489296, 0.030427332629250126, 0.0241679208485146, 0.03276498039243292, 0.02338758068029767, 0.11956291970759536, 0.3150526643971169, 0.4313164096725305, 0.21828720719737083, 0.23687465416574205, 0.20935080588946253, 0.31617152569069795, 0.22059786514743418, 0.4240643885626819, 0.4200316663232455, 0.03856627454816719, 0.105795589360695, 0.09907244999742493, 0.06071835397971714, 0.12597731433484682, 0.1045175707328464, 0.09056851033559343, 0.08621858980639208, 0.05944613278538513, 0.11296587970230099, 0.17306772798323478, 0.10634987951927177, 0.09696509403517162, 0.14625039868319223, 0.11810973756098542, 0.1150878250688604, 0.1343844352568493, 0.16887673342920262, 0.21769909836003698, 0.25446709194953765, 0.27169146255471155, 0.23528093775661274, 0.1462598048271031, 0.1798611023417538, 0.19815215371658246, 0.2535366067150412, 0.295096249431835, 0.10922732558895842, 0.07192362733059676, 0.17233423606109066, 0.2208612069602669, 0.09440881024462544, 0.06673147834588833, 0.11757750181912563, 0.19749354589023327, 0.15968976814201818, 0.14448911437969347, 0.16987021071467368, 0.18161928391855864, 0.17366603568592343, 0.19603613850307633, 0.1977848819631728, 0.200613563307802, 0.19936397027705732, 0.1907654401936144, 0.18946372737091688, 0.17345859946563646, 0.1803420178722881, 0.37903779884000177, 0.20083221461260192, 0.1819490409293143, 0.20961811582827417, 0.19729748320509877, 0.18014520836133818, 0.19632663624007796, 0.31786532775279, 0.1746745934227001, 0.17744363557010745, 0.14632403623675294, 0.12602172528825106, 0.15797645477204347, 0.16202300239859346, 0.44529326152082005, 0.10804614813760893, 0.18129980966311454, 0.10385734294779236, 0.16194727555170962, 0.1614759501765669, 0.10785601408357393, 0.1899113497443914, 0.19928651802137942, 0.1928255497934972, 0.1871819342936386, 0.15557709802202224, 0.195075300353581, 0.18782455863345715, 0.2166174190059449, 0.15477003497538278, 0.18603905652354502, 0.23147473218923265, 0.15430945796069806, 0.05376920576012112, 0.10075408752824966, 0.05823045290087392, 0.06083328718577363, 0.04743530922273642, 0.07493189822572954, 0.07565846067839033, 0.05339178641438558, 0.06780903524525694]}, "mutation_prompt": null}
{"id": "3084a9d9-91a0-4cb3-a0b8-60fcb0196083", "solution": "import numpy as np\n\nclass RefinedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 25  # Increased population size for more diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.7  # Adjusted base Mutation factor for more exploration\n        CR = 0.85  # Adjusted Crossover rate for diverse offspring\n        temp_initial = 1.0  # Initial temperature for Simulated Annealing\n        temp = temp_initial\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration\n                F = F_base + (0.8 - F_base) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion with stochastic selection\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp = temp_initial * (0.9 ** (self.visited_points / self.budget))\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDE_SA", "description": "A refined hybrid Differential Evolution and Simulated Annealing algorithm with stochastic selection and adaptive elitism for improved convergence.", "configspace": "", "generation": 8, "fitness": 0.238846930391408, "feedback": "The algorithm RefinedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.17.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.32813020711467356, 0.3037336802833541, 0.30596089757639333, 0.30771109772313454, 0.345461060658697, 0.310563959451289, 0.32988174879065646, 0.316159698122625, 0.3013836293985902, 0.2736952255902293, 0.29555652848086733, 0.2718278156631554, 0.2619164040813058, 0.25626493174086884, 0.27797412187275017, 0.2681873620148775, 0.263139621175002, 0.2551407888522026, 0.14454287000264798, 0.14460631320831385, 0.11601720655435932, 0.13583406132277853, 0.12180035479302864, 0.11698020406221399, 0.13958682183403293, 0.13426022307000385, 0.10796965104071443, 0.12419682883691097, 0.1195281597208745, 0.11475789148225501, 0.1089819143195695, 0.10401803859007164, 0.13612460287037553, 0.16652475149092139, 0.10497191067211697, 0.10239981524603448, 0.964066088341557, 0.9837159771129057, 0.994133245688249, 0.9679078630561495, 0.9721175493316394, 0.9847432661765647, 0.9820110662620007, 0.9768625985152258, 0.972353396866768, 0.27809149451384085, 0.22970895705634842, 0.2519346940494094, 0.23184455908349988, 0.24297465097296667, 0.23569078816141942, 0.2608249338380332, 0.2473259778234954, 0.27577253249096934, 0.32184650346214083, 0.2632800004709518, 0.30536705707574896, 0.2906430136145487, 0.29116843542164306, 0.30856697442920256, 0.3153116128545054, 0.2938517703878565, 0.2991280601354097, 0.25124140866212996, 0.21891108980291718, 0.2416440953975305, 0.2241629932313709, 0.2006918251530322, 0.2230311138032861, 0.19826055996812264, 0.20717908020505416, 0.21595263507589968, 0.05112953033174994, 0.2760345764836839, 0.22146620764271285, 0.2124900131107016, 0.2193395079563265, 0.2226080116270791, 0.17838231116084502, 0.2107830999042014, 0.245286208806215, 0.24672801265235944, 0.21100839250877768, 0.06301997055800768, 0.19008185073111583, 0.2054605190903379, 0.21469088567059713, 0.2527479882200969, 0.22793381472404084, 0.21153506266805966, 0.29161745643024994, 0.2729130234463869, 0.2652456032368192, 0.24661609461312706, 0.2610945580328461, 0.26478269117500486, 0.27588593222040025, 0.27362978661451187, 0.25343824710801455, 0.13273544278491878, 0.1481644617893325, 0.12237617951447732, 0.16944493278565242, 0.13449561872690974, 0.15467763253215017, 0.15873633039716273, 0.13293614600152237, 0.13165263655599502, 0.18433520578557194, 0.1824485072836325, 0.1853759898360423, 0.19687432488519818, 0.17910073097161927, 0.19530323440489894, 0.1815137380578301, 0.18891083866915992, 0.18215216919595933, 0.2790376233220162, 0.30990287672219397, 0.3066283224226578, 0.3157120485417423, 0.29717098610209336, 0.2947621244118568, 0.2824560097116582, 0.29942595265434424, 0.29551962189072944, 0.1275440937056721, 0.08339895292179023, 0.08987774519816649, 0.09686661763606974, 0.08245954350671059, 0.10731428392322928, 0.08838939305079041, 0.08597388477242762, 0.13016469431934163, 0.23296512221407617, 0.1611186393646249, 0.15159756620372788, 0.10813374904662365, 0.15710640508404572, 0.1631738038445234, 0.15211700292597075, 0.13736093120486748, 0.13661720380594145, 0.2301240434448708, 0.23388924275462097, 0.23725088431720065, 0.22141452856211574, 0.22889812171497192, 0.25563275021542564, 0.22636263027909953, 0.2250631720610139, 0.23890121447847645, 0.20990835126928176, 0.21761597801948274, 0.2186940078555697, 0.23399056646617766, 0.22641666743365174, 0.20371886443525522, 0.21566904271686194, 0.20625670471761237, 0.2221066866636019, 0.18006362742930937, 0.19131574861903455, 0.18882459154977949, 0.18501806041863045, 0.17071430151225053, 0.1818171334497235, 0.19108414525092887, 0.2003624032763267, 0.18565885653663916, 0.1767053680794567, 0.17715989494445983, 0.17854023750779557, 0.18377793710348977, 0.1745071585527752, 0.17661322875748442, 0.1744206435047264, 0.1807631381146262, 0.19361743013451005, 0.1683647595200971, 0.450918219375962, 0.40597240361068243, 0.16054159168910664, 0.39517089166614794, 0.1653593818108684, 0.43430561312463956, 0.18970524734811856, 0.3814402533453082, 0.1986825572168378, 0.16527617550777618, 0.12346466388520316, 0.4013356478156156, 0.20240318196806606, 0.19189316956131597, 0.20854444907091385, 0.15424527804664045, 0.2008813371180146, 0.19700617049695213, 0.2027154118341108, 0.17388969575328883, 0.19942656357791866, 0.17844815431393346, 0.18343810132721627, 0.17633647783185857, 0.18440091045410778, 0.19753663809624, 0.07405627534315484, 0.0783958317046114, 0.07887257809460557, 0.08115805392559505, 0.07096625668568701, 0.09888809181270486, 0.07777505917449457, 0.08109949905194136, 0.07705806962666917]}, "mutation_prompt": null}
{"id": "593548c4-b4b4-45e0-bf16-da7f2c647b38", "solution": "import numpy as np\n\nclass RefinedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 25\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.6  # Base Mutation factor\n        CR = 0.8  # Crossover rate\n        temp = 1.5  # Initial temperature for Simulated Annealing\n        elite_rate = 0.1  # Proportion of elite candidates\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            elite_count = int(self.pop_size * elite_rate)\n            elite_indices = np.argsort(self.fitness)[:elite_count]\n\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor with enhanced scaling\n                F = F_base + (0.8 - F_base) * (1 - (self.visited_points / self.budget)**1.5)\n\n                # Select elite individuals for variation\n                if i in elite_indices:\n                    indices = np.random.choice(elite_indices, 2, replace=False)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover with randomness for exploration\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection with elitism consideration\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction with a slower decay\n            temp *= 0.95\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDE_SA", "description": "A refined hybrid Differential Evolution and Simulated Annealing algorithm with enhanced adaptive mechanisms and elitism for improved search efficiency.", "configspace": "", "generation": 9, "fitness": 0.3585702439832722, "feedback": "The algorithm RefinedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.24.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.6687856617080298, 0.6741625970870329, 0.6649958958457122, 0.6736155095433672, 0.6815845950322974, 0.6808879861216683, 0.678151290420179, 0.6697389099425873, 0.6721140096669034, 0.6160271679950494, 0.6064390253604202, 0.6129519955494758, 0.629741742997316, 0.6114801967696373, 0.6163611247209619, 0.6184967956430933, 0.6271883974101032, 0.6239989463742626, 0.168051349771294, 0.13042504533245958, 0.11032859595086741, 0.14186800451523418, 0.16617804142685655, 0.13386838844795568, 0.12626214445168082, 0.11478115253914789, 0.18155649269626561, 0.2686513374609699, 0.12073697226089697, 0.13659395701541976, 0.11450547473204331, 0.1199913926931867, 0.10653919490720909, 0.14744412860870948, 0.1899622575191906, 0.12129908003003997, 0.9657093580765188, 0.9696176726526362, 0.9712538837890449, 0.983726573157764, 0.9779722812301005, 0.9801480727952091, 0.959529591848129, 0.9616969241716525, 0.9445012314846201, 0.511726014294153, 0.5335568300067824, 0.5096039540493522, 0.5018335795581432, 0.49775711057957295, 0.46491929255106956, 0.5426155890212893, 0.08793485804971346, 0.08686685445652564, 0.6628095342736804, 0.7046783710109747, 0.7206245542456856, 0.7431705879380337, 0.750114125094669, 0.711569366497808, 0.7714886551887984, 0.7563775296352313, 0.7470187667748636, 0.4044829596642554, 0.3925622074726842, 0.3093312485134162, 0.3597681647392922, 0.31570285271007437, 0.400463535802143, 0.4084556053682108, 0.4200539238175778, 0.3732457806385835, 0.4177943182660989, 0.1182058795254961, 0.016173921488636056, 0.3569915836677423, 0.3640900700766524, 0.38460792131193167, 0.32741619643285313, 0.33278283186871216, 0.4651787569149515, 0.25094915534649276, 0.302456800929531, 0.3025079296034747, 0.24220486195414404, 0.3482680251003841, 0.2724938423946409, 0.28740354600909956, 0.28844684929404907, 0.29730026271600507, 0.4121931263467137, 0.45363485069631737, 0.36434295127265404, 0.41811602775110246, 0.44113025390808447, 0.39481833775393715, 0.48151813927459286, 0.5146213408335518, 0.4299655848382046, 0.16034094892226336, 0.09898462211756087, 0.11370115623206967, 0.1113553210317737, 0.28270226595349424, 0.16906484291107915, 0.14624864620542044, 0.15612236416535996, 0.13920392650494795, 0.2436854334931069, 0.30538099332266133, 0.2664597687386083, 0.2866996332000553, 0.3064936518678625, 0.2774114254160105, 0.25644171239142133, 0.2660615998029887, 0.2738673814137984, 0.62059836507253, 0.6040423857683306, 0.6072875370034192, 0.603715157598476, 0.6002689395748537, 0.6185876998211146, 0.6162960195408987, 0.5669107287143627, 0.6363367300376757, 0.08999834624185898, 0.09868128607204141, 0.10741033623866858, 0.08196590596310438, 0.1140985101082913, 0.09847190467931688, 0.10032763721380089, 0.08826371001404254, 0.10419892881421178, 0.14436761115698515, 0.22807982762060208, 0.13573433062004447, 0.1936008773723653, 0.15981069282604676, 0.13559700820437826, 0.19235017251760034, 0.17475157134628228, 0.20892905303518383, 0.3585991747530397, 0.38411663801463025, 0.403154577634784, 0.3709878056058534, 0.3761536686526342, 0.37761675602587197, 0.4136540290795758, 0.4102706451887749, 0.4417352513310814, 0.30444682908752974, 0.26980204267227836, 0.2542045853548952, 0.2856438351121656, 0.27474390698221574, 0.2746495920140902, 0.31742941185467977, 0.31324144118303554, 0.2978619181127269, 0.19131452654423942, 0.18007317882166918, 0.18291760939140123, 0.17960921539978902, 0.16667789336730143, 0.18282283369314145, 0.17674990378088495, 0.18169094771638694, 0.22822066805643404, 0.386727381268426, 0.24497547975205047, 0.26677872228193666, 0.26315211323499066, 0.188807298231208, 0.2719146786680894, 0.3724199739372661, 0.24438189668080912, 0.21234609553662043, 0.17284474579371512, 0.7191562513631846, 0.16240869711398176, 0.197923641608321, 0.16499903448555708, 0.625607947068753, 0.6850584645478575, 0.7290215097708574, 0.6654749276717425, 0.16825716903973176, 0.16748903483790578, 0.19617310548582612, 0.6142246674604457, 0.6473027840766913, 0.6459293838812918, 0.19823507150473096, 0.20689654671024638, 0.2113844276968504, 0.2109984371764816, 0.18508761889841296, 0.17649261815240314, 0.2027034159869433, 0.15919634014404183, 0.1803027051405166, 0.18959247394856693, 0.1673233925091967, 0.17354149558157372, 0.07238776669265301, 0.07751584860539062, 0.07382635206155952, 0.07185594248629823, 0.07749602248953358, 0.0755216477994427, 0.07458861673504236, 0.07264279075539926, 0.07664664793435094]}, "mutation_prompt": null}
{"id": "a8248b3f-7acf-4d64-bce0-5fe7509c5bb3", "solution": "import numpy as np\n\nclass RefinedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Increased population size\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.6  # Adjusted base Mutation factor\n        CR_base = 0.8  # Base Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration\n                F = F_base + (1.0 - F_base) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Dynamic Crossover rate\n                CR = CR_base + 0.1 * np.sin(np.pi * self.visited_points / self.budget)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.92\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDE_SA", "description": "A refined hybrid of Differential Evolution and Simulated Annealing with dynamic crossover and temperature adaptation for improved efficiency.", "configspace": "", "generation": 10, "fitness": 0.3079750479009135, "feedback": "The algorithm RefinedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.694927563332413, 0.6945073879008608, 0.6826381006390239, 0.7248213141598101, 0.6992796594743677, 0.7105097117989098, 0.684819556633021, 0.6972281011866587, 0.7053229156124488, 0.5124766666601656, 0.5406581818832077, 0.5180388188627154, 0.49843178613105976, 0.5267487945185718, 0.5076065877318068, 0.48144615452344297, 0.524471730565075, 0.5299104421471779, 0.09116878987935273, 0.10167398084515267, 0.12498597024911995, 0.10141102001498803, 0.0977520394546666, 0.09781325157170051, 0.11454260087811485, 0.1159807743603567, 0.12565108448299456, 0.1099403311989483, 0.10247188819664721, 0.09988466471085777, 0.10222083908706592, 0.12370003807212238, 0.10411144763040847, 0.1072903469071731, 0.0870060111202573, 0.09626972688155078, 0.9886289650192626, 0.9824776100826939, 0.9766092463184802, 0.9747186490044685, 0.9888755679913356, 0.9869969939797011, 0.9752365988471596, 0.9665060757265067, 0.9659969531792573, 0.3668140528927917, 0.3506912554998429, 0.4008810908114925, 0.3977141674570819, 0.35462415956737037, 0.3692433513023303, 0.3529234039462079, 0.3626526064354354, 0.3592003370965735, 0.573784681251107, 0.5157314178364436, 0.6233529286872496, 0.18494146475965845, 0.6201862657525482, 0.6539346098560315, 0.5455344926965483, 0.5937335026945169, 0.629432856994602, 0.34476779638120614, 0.34074475360954926, 0.25515056515238665, 0.27576604366353663, 0.33473594488991953, 0.3236321062229175, 0.33442879892965416, 0.23378591478195065, 0.22460168316593188, 0.021569396563414722, 0.40369494372021264, 0.05183809515992366, 0.3191958182352346, 0.32302847140730584, 0.3046447080673109, 0.2718400099390659, 0.26790771323262774, 0.2842353389334762, 0.2940281248320096, 0.21026919768257346, 0.24450929499900853, 0.2718471102602088, 0.22248822860620066, 0.2793347148542009, 0.21684300420865066, 0.2551814134628635, 0.2157342904154954, 0.3930828876434801, 0.33607740676552733, 0.36791252376743155, 0.36246199336627893, 0.33041643863036074, 0.3065015780321926, 0.38323183447445197, 0.38082482721856814, 0.4147892522942527, 0.07150311521929142, 0.04409157474541703, 0.0915777679635259, 0.1093549784154948, 0.06610600799520217, 0.1118204551662979, 0.09264576411155612, 0.07870573258686253, 0.0844450012548843, 0.20511084689198422, 0.20181611200350813, 0.23925219956630006, 0.21964522926074126, 0.2148125132571136, 0.2304002353539344, 0.2021630606811654, 0.21997055767989737, 0.22285076483189215, 0.5695313104668389, 0.6170194338755273, 0.5651299151218534, 0.5680067954848594, 0.5914154860220739, 0.5711799520447118, 0.5619621627419504, 0.5840343574585236, 0.5580335015592968, 0.1032050264818718, 0.08330932718134809, 0.08390049348259143, 0.0797194602976482, 0.08799119622924334, 0.0841915185098433, 0.09511369848360829, 0.1034335230897161, 0.09325175753251791, 0.16991070779659134, 0.14466586715304752, 0.18524059170078722, 0.1836632666288106, 0.1923146338898737, 0.18342028227716123, 0.1276423886241237, 0.21030483842832315, 0.17676379606352, 0.30177327266110776, 0.31983233606750106, 0.2933608485242124, 0.28440238652784056, 0.30855639499055487, 0.2878066700865508, 0.31694678759508277, 0.3521137599957539, 0.30623931052142217, 0.2429749341670514, 0.21617315560641037, 0.21985028816837526, 0.23849073292209833, 0.23040414202110382, 0.23303468840057895, 0.23802947107000438, 0.2458200418517289, 0.257023745254242, 0.18097314027158806, 0.18506357752926028, 0.1782223345102315, 0.19117649415007254, 0.1623841645931109, 0.16126216567198048, 0.16818441691113928, 0.19016006961808496, 0.17335721240075486, 0.21871058146414069, 0.1929416796513428, 0.17900741511521356, 0.18167429497974397, 0.18553830769806878, 0.1974921891390794, 0.23994569524678688, 0.177984195224702, 0.2347595255936984, 0.7206454648459426, 0.7532506682931933, 0.16893799031468448, 0.158074648096465, 0.17581677290992337, 0.19801338244572608, 0.1782027885219104, 0.16752358671623147, 0.17584922894450083, 0.20033695971249021, 0.16366550302337712, 0.5910567448809378, 0.4383539377523177, 0.5227449019292401, 0.14782762320720544, 0.20268981822816712, 0.19802785540791257, 0.20699313294105925, 0.17264346242682682, 0.1889728228012395, 0.18215586764466318, 0.17849803823653476, 0.19004176400766404, 0.17800753318883833, 0.1912571239177735, 0.1694787122226058, 0.18107747439603727, 0.06744339287098577, 0.07689999329257402, 0.06903800869347343, 0.07488475419733498, 0.07100468573763596, 0.08284098052054978, 0.06826224982778606, 0.0707596750279641, 0.06879135904530032]}, "mutation_prompt": null}
{"id": "5156ac0e-90b9-4e9a-8fd1-dc336803d78e", "solution": "import numpy as np\n\nclass AdaptiveDE_SA_Chaos:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.8  # Adjusted Crossover rate for better diversity\n        temp = 1.0  # Initial temperature for Simulated Annealing\n        chaos_coefficient = 0.7  # Coefficient for chaotic search\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor with chaotic influence\n                F = F_base + chaos_coefficient * np.sin(3.14 * self.visited_points / self.budget)\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction with chaotic influence\n            temp *= 0.93 * np.cos(chaos_coefficient * 3.14 * self.visited_points / self.budget)\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDE_SA_Chaos", "description": "Adaptive Differential Evolution with Simulated Annealing and Chaotic Search for enhanced global optimization.", "configspace": "", "generation": 11, "fitness": 0.3488480926973394, "feedback": "The algorithm AdaptiveDE_SA_Chaos got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.8256607340875521, 0.8240599635832336, 0.8283380388940256, 0.8159312388999237, 0.8336008061290676, 0.8339547101231737, 0.8137036535837858, 0.8359289566422614, 0.8158746147577817, 0.7351631204801923, 0.6946404574484555, 0.6904622250774353, 0.7438936177699462, 0.6716872496205077, 0.7137916132441091, 0.6488603702800879, 0.6978187682437417, 0.6592673982332962, 0.14138549929908661, 0.18754019275469058, 0.26170658786927625, 0.2670778128946588, 0.16308037414086007, 0.22300915246561448, 0.14962723933107314, 0.1703285062883384, 0.3262012222751359, 0.14512735088208206, 0.13381874598172439, 0.15109027505228756, 0.13487922174502986, 0.12496322092470746, 0.1290873693399759, 0.13078339759512803, 0.12772868577400298, 0.1633019031742179, 0.9622795332160412, 0.9881911807291893, 0.9602516108925692, 0.9421845812647878, 0.9479921671494305, 0.9611540940648011, 0.9581274357393418, 0.9715477142135112, 0.9575159397965864, 0.40570711857527464, 0.3927658686941129, 0.4454828085032012, 0.4271679090059325, 0.40086151909469514, 0.37257957537410424, 0.38975474090643025, 0.4210228116329442, 0.47630971684318124, 0.5754754530636861, 0.6738458989119891, 0.7627074018660626, 0.7818403801489466, 0.7899665693559431, 0.8754134308264178, 0.8680700811073767, 0.8077133657444686, 0.6007077876395908, 0.32108873925409676, 0.3424041690136562, 0.34496169969032076, 0.3685353823375721, 0.23259372360451136, 0.31493712006839414, 0.30911393653453, 0.306354817383502, 0.31409141696349674, 0.36481148686561715, 0.32772977461357145, 0.32575005644341437, 0.29409962998491024, 0.31875519647349815, 0.3195922735398603, 0.299780997946412, 0.2821369879846821, 0.3955487115245522, 0.2012644503473071, 0.1693065606036942, 0.18259345438631558, 0.2022420225606828, 0.2089576589526121, 0.21149278164481866, 0.286236215257778, 0.16542017858633662, 0.2284186704745521, 0.3434693873670456, 0.4442347329715045, 0.2984293022757395, 0.28765328723826433, 0.31655145818929453, 0.3463096867850973, 0.3460773156849646, 0.38849949293076647, 0.4077563885673099, 0.05231893327308612, 0.13695723996810483, 0.09733373890183916, 0.1570482978812997, 0.14409274334925226, 0.1217075903068302, 0.12945893639084427, 0.08334514464815712, 0.07256631097260502, 0.2457272772996535, 0.25750522724008196, 0.22048431592167694, 0.23582779298992895, 0.265961516000242, 0.2511723775275576, 0.2211528386180992, 0.22384710406031272, 0.1865381383520509, 0.5925322384678263, 0.5607973923035913, 0.5989406488083531, 0.5740688859064959, 0.5293160041544114, 0.555015011523784, 0.5788679185292289, 0.5589154737778477, 0.5575361464311213, 0.10567371568391049, 0.0821820665952302, 0.11213849413426502, 0.10180886884430562, 0.13004430733539862, 0.09972053291969019, 0.11576466013637166, 0.11438631094673146, 0.12050025026349065, 0.13346160013558217, 0.2559222300945968, 0.14025813743662252, 0.19504405316221896, 0.13797310960450526, 0.1225259660549205, 0.1388741314592491, 0.1406755315229502, 0.19899870044421308, 0.450732113135456, 0.3572325712169244, 0.3733621976422513, 0.35983775449780664, 0.35002578077669766, 0.3817727890638286, 0.40088311885334715, 0.3665722384554879, 0.3694079772673766, 0.1965751552666415, 0.2564605784996318, 0.2783639650131565, 0.25329892505722473, 0.25779192187334043, 0.2820583542533076, 0.271481954017316, 0.2368079018198216, 0.23627074657747638, 0.19621973290591455, 0.20309339619459876, 0.1840616987270861, 0.1859033489526839, 0.16871874369831363, 0.17412073950785378, 0.1984755196186978, 0.18935309156347724, 0.21544232380596073, 0.47098095775381243, 0.20700985708980302, 0.4506763748254723, 0.21941182363875855, 0.21288691508714475, 0.3016012807498113, 0.39436754096647064, 0.18189198560637754, 0.21269532590102513, 0.18274878964793717, 0.7916523177021216, 0.18378191826014623, 0.1978359275567646, 0.1875240851877401, 0.1763342750694905, 0.6667573165390366, 0.16331719763451036, 0.6876855765195875, 0.1599756809684102, 0.16816455739134784, 0.16620336256804513, 0.21121457735278515, 0.20714324011580942, 0.6864810014421439, 0.2099110798748851, 0.20709452331360323, 0.20691278036570815, 0.1949704354666938, 0.20746847452772177, 0.1918925662656642, 0.17767540268962712, 0.18299031090304985, 0.18523513236571065, 0.20738929451002353, 0.208974868182649, 0.17294595761001508, 0.09356044938785313, 0.06721569643069747, 0.07366280342316878, 0.08419118520451907, 0.08407374156614822, 0.09250113470889443, 0.07533306061056522, 0.06544791491862956, 0.07687662178695687]}, "mutation_prompt": null}
{"id": "bb78be69-196d-4322-a876-f7b5b1bfb1cd", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_RS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 25  # Increased population size\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n        self.best_fitness = np.inf\n        self.best_solution = None\n\n    def __call__(self, func):\n        F_base = 0.6  # Adjusted Base Mutation factor\n        CR = 0.85  # Adjusted Crossover rate\n        temp = 1.5  # Adjusted Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Adaptive Mutation factor\n                F = F_base + (0.8 - F_base) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Random Search\n                if np.random.rand() < 0.1:\n                    crossover_vector = np.random.uniform(-5.0, 5.0, self.dim)\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n                    # Update global best\n                    if new_fitness < self.best_fitness:\n                        self.best_fitness = new_fitness\n                        self.best_solution = crossover_vector\n\n            # Adaptive temperature reduction\n            temp *= 0.95\n            self.population = new_population\n\n        return self.best_solution, self.best_fitness", "name": "EnhancedHybridDE_SA_RS", "description": "An enhanced Differential Evolution algorithm combined with Adaptive Simulated Annealing and random search to effectively explore diverse regions of the solution space.", "configspace": "", "generation": 12, "fitness": 0.3702428032806457, "feedback": "The algorithm EnhancedHybridDE_SA_RS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.24.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.6699785623380672, 0.6686652048706485, 0.6652823382982945, 0.6711076531409943, 0.6751937636373186, 0.6657644498033781, 0.6693147713918717, 0.6684161945224691, 0.6704613183324308, 0.6089038653651662, 0.5887494858180451, 0.6022928825827232, 0.6046621046968853, 0.6096309295529395, 0.6084588852401657, 0.5952215708245967, 0.6001738353891748, 0.5933364234781351, 0.11841807660818537, 0.1461850235957287, 0.15066304282102172, 0.12105327097958629, 0.11116149857125479, 0.18071783118670082, 0.23491219116636464, 0.2909554933495737, 0.1365924449603685, 0.21545815159322468, 0.10673875900580587, 0.11000395163229482, 0.11503822227847249, 0.12656336191649464, 0.10283578654643732, 0.10720301373692165, 0.10198860547522803, 0.12789547370740562, 0.9765959333216582, 0.9699940430002902, 0.957815799646478, 0.9586352442802095, 0.9736742577826818, 0.9685478631963673, 0.9593278870616713, 0.9261630345649909, 0.9598330600102959, 0.49196174665596937, 0.5106122601504886, 0.5185413866761641, 0.5168229327962435, 0.5061149097183881, 0.5350143655713273, 0.4906685096006441, 0.5086230950175094, 0.49801968961372023, 0.7509865927863919, 0.7774523453589616, 0.7300235569853342, 0.7655744695249519, 0.7555078566308899, 0.7161765208982254, 0.7446726335132816, 0.7119898425221713, 0.7427208329377032, 0.32569808658207333, 0.4005035522339966, 0.32939501053188747, 0.460984767854829, 0.40516584775632314, 0.3548685301399793, 0.3082257524175055, 0.2862269617160499, 0.5002169821416795, 0.12019533812698102, 0.050701432248942746, 0.40053268480755, 0.42213532306911017, 0.4651470098823217, 0.36786467728417394, 0.425148587890686, 0.4245177163078593, 0.33432649628196265, 0.4168475765569599, 0.39061085746433843, 0.38759391417192124, 0.36282617919705873, 0.3737293121436295, 0.367800346255737, 0.3438236201052913, 0.3808078787389855, 0.3072487416772278, 0.5623427284510827, 0.5441487691869741, 0.5253874707525862, 0.475081041600231, 0.4940146170128894, 0.4835917882824189, 0.5277568795069302, 0.4801687778064946, 0.5342374403807665, 0.08646939486251282, 0.06563733844136155, 0.08991798145896845, 0.25737940901216205, 0.2090597993586526, 0.21222027212932093, 0.15387036875587023, 0.14888973988197796, 0.1341392255361994, 0.28873665411033056, 0.2899425868624429, 0.2716747580724205, 0.3298912565906539, 0.34258905229594216, 0.2996119254362528, 0.2914303680915876, 0.31091165902828355, 0.3100472976402219, 0.622005218348959, 0.6169085600489514, 0.6229044604215961, 0.6141330231906488, 0.6231503029984871, 0.623737084229057, 0.6207423785208088, 0.6330689437534356, 0.6398116927478062, 0.0785324886688995, 0.09222672127559872, 0.08866269897765866, 0.0878445992156357, 0.08946943789434003, 0.09002629120243455, 0.10631939723118555, 0.12440532892163991, 0.10665486727932783, 0.15258667710649165, 0.1429619618086181, 0.13481153666615608, 0.1322178136551736, 0.1580101641309699, 0.14124755022724533, 0.21331009485168595, 0.33154892401994196, 0.1776659187261188, 0.3782011342772156, 0.38505912638456785, 0.3750579501178194, 0.40228691753648105, 0.3934972699920659, 0.38886188311602454, 0.4309487557274547, 0.4086801297783219, 0.38627081280004494, 0.27584229725665166, 0.31540992602846174, 0.27732809770886524, 0.2716492874136699, 0.2609000886277999, 0.2671888667389095, 0.33855107094407855, 0.3197165393141257, 0.2680432562513778, 0.18466561834772466, 0.2004178109904693, 0.18085716961393072, 0.18995834484734608, 0.1914229499938851, 0.18545976716281787, 0.1811045389938818, 0.17842819436001756, 0.19485648903832897, 0.2334836930565215, 0.3088308988438282, 0.1924718916786654, 0.2165568482993323, 0.4710035679393081, 0.33660140605991906, 0.2260497851442166, 0.2481711581481031, 0.2407850818383268, 0.1907629743213778, 0.7280696722566541, 0.17760245650848105, 0.6686048091330667, 0.18765237536043167, 0.19298503958743984, 0.6880306000004248, 0.625807304368987, 0.6520630118619057, 0.6801609234810058, 0.20019692559538027, 0.1997769126454032, 0.6881526295988127, 0.1999249102425249, 0.16248556194176145, 0.20958379980115927, 0.14903938850862852, 0.21072859321921, 0.18016588785575482, 0.1900790025772049, 0.20303742168667271, 0.2063256480166551, 0.19884674247765877, 0.17075794512813813, 0.19467455582627158, 0.19075104879315097, 0.1919989840160442, 0.07652438190736488, 0.0782928339954333, 0.059052774365442984, 0.0813301386198928, 0.07423713960666989, 0.07350432252688133, 0.07484826969064529, 0.07680515581114855, 0.07564171442838374]}, "mutation_prompt": null}
{"id": "d1d0c944-de9b-4f5e-8440-b3271bdb458e", "solution": "import numpy as np\n\nclass ImprovedHybridDE_SA_Adaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 25  # Adjusted population size for better exploration\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.6  # Adjusted base Mutation factor for diversity\n        CR = 0.85  # Adjusted Crossover rate for better exploitation\n        temp = 0.9  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor with additional randomness\n                F = F_base + (0.9 - F_base) * np.random.rand() * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover with adaptive randomness\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion with adaptive cooling schedule\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / (temp + 0.1)):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction with improved cooling schedule\n            temp *= 0.92\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ImprovedHybridDE_SA_Adaptive", "description": "An enhanced hybrid algorithm combining Differential Evolution, Simulated Annealing, and Adaptive Mutation strategies for improved global search and convergence.", "configspace": "", "generation": 13, "fitness": 0.30183155948514845, "feedback": "The algorithm ImprovedHybridDE_SA_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.19.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.4320549191943591, 0.42579009211310637, 0.40349942360503765, 0.40938263056619195, 0.4369964370494186, 0.40365002029027475, 0.4317686768740988, 0.4685056561658574, 0.4096040375817567, 0.36422382973983725, 0.3616283275967781, 0.35702293092884274, 0.37256982338544997, 0.3570845056574006, 0.37068453627213915, 0.36347381808218815, 0.367185267622702, 0.36006008633119313, 0.1539980996159349, 0.16167471019932966, 0.12380998263961973, 0.2137613686569757, 0.11307392817142659, 0.1147242116502919, 0.18822897450874432, 0.23357080045752365, 0.1528193116425306, 0.1430308034559613, 0.10999446525279166, 0.10285855599318239, 0.15641300321712492, 0.12795550945218415, 0.12285757665302133, 0.1145265891391738, 0.11443910511053368, 0.10248789617261156, 0.9668806926783658, 0.9756942179686449, 0.9771068884377003, 0.9791934500902032, 0.9367470891201963, 0.970053694219394, 0.9702787096653318, 0.9474370173170177, 0.9777065143676805, 0.3165802611931795, 0.3326803995058444, 0.3111605346499643, 0.3256251160720327, 0.3169784789274671, 0.3421551112988602, 0.32412788295875494, 0.3272592537386354, 0.3285958564729231, 0.6448011182264096, 0.8114746608406026, 0.773148183185452, 0.6651192530099308, 0.5035020590186792, 0.5333419030971465, 0.6761437124696282, 0.7848806503419449, 0.4616771299707302, 0.2786355949940512, 0.319640329346645, 0.3006473924890002, 0.27077417112417446, 0.302474568889582, 0.2981133328475416, 0.28995484268813376, 0.3244383514344268, 0.3088440435520985, 0.29715389862029185, 0.021270507969558428, 0.039951942311012845, 0.3375076740771251, 0.29702952850437825, 0.30108500406945515, 0.276295342854579, 0.34138391206419016, 0.2819052944609105, 0.2987669530373207, 0.28389445918301814, 0.2816119386944128, 0.28049998664061837, 0.29811299872901587, 0.30006726377535, 0.2927973709928755, 0.3049200989474995, 0.2710553987226343, 0.349329637032058, 0.32949826579125274, 0.3463227824030417, 0.34763587833282383, 0.3306961880093162, 0.33448754741688647, 0.34288394620441176, 0.3501612763680453, 0.39180105062544324, 0.11354457673149698, 0.12009547025463219, 0.11067514308120718, 0.20730399732247673, 0.16309140918568532, 0.1614987825432097, 0.13323230417596055, 0.17380609561792915, 0.18711491878600783, 0.25532654685485134, 0.2609887349481991, 0.24584740824003315, 0.2609126557961208, 0.25808420700664547, 0.26728922911313824, 0.27792566921663986, 0.2488516067191976, 0.2678268169969851, 0.38069810330447595, 0.43588529189356306, 0.37534836070168975, 0.4217917593781976, 0.38344848468253434, 0.422007687089067, 0.37964110823225905, 0.38001311810442406, 0.3784451371457287, 0.11320568741854253, 0.09971270429035883, 0.0971057357594296, 0.11593531857508865, 0.11600144879250951, 0.1098832267784654, 0.1182301538264886, 0.10667041843418901, 0.08529734130254363, 0.13703218146061957, 0.16354877135995316, 0.17716541804730768, 0.30901991259818573, 0.18464451202497434, 0.22476234459673583, 0.2477781828005824, 0.1429529938576095, 0.12364619555408884, 0.3014528817997183, 0.29932627400070155, 0.31183639278443753, 0.29833537136461263, 0.30516148940135035, 0.30197110242389213, 0.3139905191797556, 0.3116156885783684, 0.3117086138969909, 0.27283346889488636, 0.268849697133553, 0.28735304410769635, 0.26891949603872023, 0.2736662979427362, 0.2642736131408807, 0.27547039866160694, 0.28561067190864664, 0.28315964334957533, 0.1953107711857388, 0.1854702847627293, 0.18945879715250835, 0.18109633688552362, 0.18369210536826241, 0.19533517361745534, 0.17839344952056801, 0.17861459025055282, 0.20466908729932942, 0.3158803712483478, 0.29501436478026266, 0.2713322321316586, 0.2586104737490541, 0.24733547562433889, 0.3014055579729984, 0.28158087044023783, 0.30247204990399423, 0.2848808167303586, 0.16645409761181107, 0.5241995285774523, 0.1705476617258952, 0.46124520101325006, 0.5093469457928614, 0.1759319955991243, 0.5503800066498881, 0.47093542523722465, 0.44255974371399565, 0.1663996875732361, 0.12637568649644804, 0.19870577059336825, 0.4185385512829939, 0.16019781293377888, 0.43780182128959555, 0.208993115841407, 0.19434095924326755, 0.20360369474817375, 0.1779481638357393, 0.17749540611384396, 0.1883938900911415, 0.18819080839983782, 0.22057208328799238, 0.1788087315710798, 0.20013726322288328, 0.1949835250345916, 0.1803401076298946, 0.0843935275185127, 0.08198311063207364, 0.08268356411173083, 0.07644223732469013, 0.07670237834917737, 0.0893230447242267, 0.07450720189582938, 0.08002522052390226, 0.07934571167757454]}, "mutation_prompt": null}
{"id": "ee403808-e9a5-4e0b-83f1-2a039fb43bda", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Increased population size for more diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.6  # Adjusted base Mutation factor for exploration\n        CR = 0.8  # Reduced crossover rate to maintain diversity\n        temp = 1.5  # Slightly higher initial temperature for SA\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Adaptive Mutation factor based on iteration\n                F = F_base + np.random.rand() * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover with stochastic element\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection and Simulated Annealing acceptance criterion\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction with stochastic gradient\n            temp *= np.exp(-0.05 * (self.visited_points / self.budget))\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm with adaptive mutation strategy and stochastic local search for improved performance.", "configspace": "", "generation": 14, "fitness": 0.24382240974000918, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.18.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.35770579866928165, 0.37553489531073136, 0.37073252041646454, 0.37324852401954334, 0.36045068941862024, 0.38933131320980885, 0.38584394297277513, 0.3811967473155832, 0.3877796313729862, 0.33463800127525345, 0.31790747003714226, 0.3216914614182953, 0.3227979836646073, 0.32254518297901535, 0.30778503489183306, 0.31609241568984625, 0.31531474798182835, 0.3130573888289241, 0.11186735265374814, 0.10318701780452377, 0.11173067640553269, 0.23576800782869967, 0.12112437407556975, 0.11984255261335419, 0.1038063862589157, 0.12811659354720928, 0.11071133481189499, 0.10225472911762623, 0.09544347091307193, 0.1034667522493663, 0.1088140239542752, 0.09847719101880925, 0.12657762512975768, 0.10087786657088604, 0.10500925869625877, 0.10628659208936209, 0.9783807204596275, 0.9838383672293293, 0.9633237035961522, 0.944566004093835, 0.9800294803482235, 0.9888824942054253, 0.9808327537772175, 0.9882610393360026, 0.9754110315409543, 0.27749438661513337, 0.2926686028605119, 0.27224663820937167, 0.28486468004622556, 0.2796249944074847, 0.2655491495016429, 0.2874279878687336, 0.2811567542032892, 0.2906259220521914, 0.4602481481310967, 0.45475355469684364, 0.4453862358011009, 0.4395329617921211, 0.41437833963618986, 0.4311458531772129, 0.4787564850006555, 0.5090141650162082, 0.4027015659464106, 0.1830665919487714, 0.23576138910394506, 0.2147796807835568, 0.22396807854340728, 0.25114754647967974, 0.20429602094948518, 0.21764317363610275, 0.2145549060837113, 0.2623071150251366, 0.010039273176703833, 0.051276466689870515, 0.05202117509440418, 0.20744957019154076, 0.21100392738037277, 0.21579740946465376, 0.224258452694023, 0.2275899408344605, 0.25342895999826553, 0.1584748646031099, 0.14667683557880662, 0.15043159792314253, 0.1524797770276245, 0.11178876098346902, 0.11969225607908307, 0.10681802364762139, 0.1082487427638047, 0.10608171625489338, 0.22789463417561517, 0.2500010538751206, 0.2449195007542434, 0.2708912583835552, 0.23985312087910904, 0.21913263926787918, 0.28087409524195817, 0.2710563745019907, 0.2699060448279713, 0.04786250384592572, 0.02990306651632546, 0.03130853276860923, 0.04044979367866386, 0.03428206454837368, 0.04235099630624661, 0.08580567927984362, 0.027374770409439253, 0.06700173757742245, 0.14519559483433242, 0.1705596126463753, 0.17247885929309903, 0.1925725170925614, 0.16796273624616587, 0.18463528411041608, 0.18019402886877633, 0.16282259115426845, 0.15640301024967407, 0.34487616030495905, 0.3509785317830135, 0.3453418827721507, 0.3377168815462924, 0.34172828465965355, 0.3391079141150567, 0.34366810131783665, 0.3495941812343427, 0.3386853051500337, 0.09915782557850084, 0.08915280389283364, 0.07622448453170783, 0.0881646471915356, 0.09653671686974152, 0.0827152794462308, 0.08152693873374939, 0.07944751817478413, 0.0912196388965143, 0.1721094516586671, 0.16091687180797076, 0.17878920419558597, 0.17588774625645542, 0.20539095743286684, 0.2070063880117301, 0.17363225660977244, 0.18971862640887482, 0.2175092833686837, 0.26819441566998525, 0.26555834567987835, 0.2602451555437768, 0.2572969219893819, 0.26584438306584934, 0.26624958775587904, 0.26912154724666315, 0.2835232371610733, 0.2736724440355838, 0.21175700566975586, 0.21950460749911294, 0.20775973736738784, 0.1944659330145624, 0.20936733056981494, 0.2029651849490346, 0.22708286675264777, 0.23491365150670285, 0.2390275477401066, 0.18211432601284983, 0.17817615088127914, 0.15593610598127616, 0.17984951325637666, 0.1775949479119121, 0.1707328382708454, 0.21854145166959082, 0.1786969756099165, 0.1616377307540302, 0.17501603229291673, 0.20345406297078938, 0.1924988644979524, 0.17333024889168958, 0.1747692566497857, 0.17664612389386525, 0.19364721205922775, 0.16377470828737406, 0.1757482776947169, 0.42748592277131536, 0.1846454309957638, 0.1887475106239711, 0.3858182009216663, 0.17667602173174835, 0.16284924996882888, 0.18067819700239363, 0.185318861777641, 0.3858013527838291, 0.1974556862759207, 0.4105681173848852, 0.38286960917474333, 0.3659749996195657, 0.18200817190148932, 0.17614072230392996, 0.20549066169517705, 0.2081820342123777, 0.20034318708096766, 0.1801101016370863, 0.1945855893235091, 0.20184527032225819, 0.22232918765473353, 0.18594127590650922, 0.17573693718244776, 0.1814662062626765, 0.1867598896866569, 0.223601903739178, 0.07705879191855469, 0.07224268771203168, 0.0660030395587452, 0.06792965904213577, 0.07346601565437871, 0.07071548789026216, 0.06540683911770051, 0.06392757815444261, 0.071049563065128]}, "mutation_prompt": null}
{"id": "cc009a87-be13-46bb-ba07-eca7f46c4558", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min, F_max = 0.4, 0.9  # Minimum and maximum mutation factors\n        CR = 0.85  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n        alpha = 0.95  # Cooling rate constant\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Adaptive Mutation factor based on fitness diversity\n                F = F_min + (F_max - F_min) * (1 - (np.std(self.fitness) / np.max(self.fitness)))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Randomized adaptive temperature reduction\n            temp *= (alpha + (0.05 * np.random.rand()))\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "Enhanced Hybrid Differential Evolution and Simulated Annealing with adaptive parameter scaling and randomized cooling for robust convergence.", "configspace": "", "generation": 15, "fitness": 0.0, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "d7aea57d-515a-49dd-8684-d47396a29d52", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 25  # Adjusted population size\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.6  # Adjusted base mutation factor\n        CR = 0.8  # Adjusted crossover rate\n        temp = 1.5  # Higher initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor enhanced with nonlinear scaling\n                F = F_base + (0.9 - F_base) * ((1 - (self.visited_points / self.budget)) ** 1.5)\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Enhanced Simulated Annealing acceptance criterion\n                acceptance_prob = np.exp((self.fitness[i] - new_fitness) / temp)\n                if new_fitness < self.fitness[i] or np.random.rand() < acceptance_prob:\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction with logarithmic cooling\n            temp = temp / (1 + 0.1 * np.log(1 + self.visited_points))\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm with adaptive parameters and an enhanced acceptance strategy for improved convergence.", "configspace": "", "generation": 16, "fitness": 0.3697768594723479, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.24.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.7714273888283465, 0.7838182100360875, 0.7603353157810748, 0.8140597556149539, 0.7797754090327778, 0.8137375922346102, 0.7959562703919781, 0.792613641503588, 0.7721676788552025, 0.6609435142605455, 0.6741378755861254, 0.6529695412006589, 0.6462035656755895, 0.6555371778965864, 0.6619834973761423, 0.6601135807221998, 0.661141687129519, 0.6731731189608906, 0.10607376063357277, 0.11662569845360071, 0.14818289683142827, 0.15769665700203217, 0.13028425456510262, 0.20843816199683962, 0.18835340492928077, 0.3432464625119881, 0.19537450760370934, 0.24033993926362807, 0.10556165216335323, 0.1372670171886432, 0.21861543028916974, 0.1070336848429635, 0.11890118915118142, 0.11968775195449366, 0.17960575893870667, 0.12559622296802497, 0.9901009685381114, 0.9751912998574357, 0.9666010548187889, 0.9550503472029924, 0.9708638977621694, 0.9659812910760175, 0.9519022072947111, 0.9694533633315174, 0.9782973226181744, 0.4976511576503916, 0.5387807197798056, 0.4880838639630162, 0.48195261408079937, 0.5201223769123224, 0.48140477523259484, 0.5581675510206401, 0.47623937662038796, 0.5361942017636212, 0.6074056717923338, 0.6291336162111878, 0.6781000755456852, 0.7505965721928929, 0.7287327602698425, 0.6992447526454254, 0.7195256050625858, 0.6772407103196385, 0.6820840545569777, 0.3691523558576578, 0.3301701747439766, 0.30336266015264646, 0.41054340587540883, 0.4504287602872227, 0.4188884865238591, 0.3932455198607693, 0.4510632858517979, 0.3979391804806113, 0.11969632199475122, 0.0533148919242693, 0.11033576721173322, 0.45060000078085216, 0.3428652190951762, 0.39605331226756146, 0.3072606855396701, 0.32022775606353393, 0.2733640933152226, 0.25868081525213915, 0.2945385569362, 0.26442541791336593, 0.25179509443890513, 0.2759040822557669, 0.2946547731480841, 0.27879799758457924, 0.2909750971011702, 0.27517113901095036, 0.48564584992651694, 0.3748610395449896, 0.4272045879746429, 0.3751141939249103, 0.3760810613681882, 0.39113820940538646, 0.45589934921650044, 0.4247206545839657, 0.3577288934351953, 0.08271223880801504, 0.09612771975830325, 0.09216029690858629, 0.10339885660075421, 0.1937957305826885, 0.19640828767025498, 0.14698473603344608, 0.1349110266757283, 0.11251939940298705, 0.23661058091831055, 0.3170351811040233, 0.24868072405590202, 0.2787523016881823, 0.2742412616077563, 0.2773756457606835, 0.2516090483830592, 0.25762181627228764, 0.2539804302492811, 0.6793152369637305, 0.6536116357753864, 0.6419112455554665, 0.6618971512516396, 0.6470617559692518, 0.6744058083687746, 0.6223271193536624, 0.6477806377015578, 0.6518051063538293, 0.10440241712431197, 0.09344575811868139, 0.09549822227498805, 0.09643775386042475, 0.10307130838249523, 0.08256162741901119, 0.08764482303181631, 0.07617768972575689, 0.09322862168120305, 0.14548943545286053, 0.2635588958427433, 0.19489509879181344, 0.1569981721465611, 0.19757336493678057, 0.304108433614416, 0.3316574421161901, 0.17787253272428571, 0.1561987038149859, 0.34686362300359574, 0.3586354007072575, 0.37447050027911455, 0.38068132431278723, 0.36901527657869415, 0.3768052705291931, 0.3945868839642108, 0.4634609303936551, 0.39731885248727006, 0.2879367410600824, 0.27797442525097116, 0.25897802110212975, 0.2969874236492066, 0.3026621766930302, 0.25084718251181237, 0.2933402300859035, 0.33395519865773327, 0.3069573123233982, 0.1795356259568187, 0.17426636263824935, 0.22902859561466615, 0.2045593190391113, 0.21173225032939158, 0.18488664868418925, 0.17635843206697321, 0.18911108019182898, 0.17638365241747378, 0.2258828989709134, 0.3639212557720817, 0.5281333618086488, 0.2004777447873397, 0.2899531131755423, 0.20097018846999337, 0.47400535480768047, 0.26592536135054157, 0.2697268455655768, 0.7252112597942117, 0.16266843102760142, 0.1639164043782132, 0.18213771081113694, 0.19229478060403193, 0.1677817904374288, 0.1860717577015858, 0.730820721709901, 0.5387147524845937, 0.2017471169098547, 0.6261394925944772, 0.5067631512931426, 0.20049261767177806, 0.18860148377125507, 0.6903534088088668, 0.7382631301868889, 0.7464235545418576, 0.21240303896209245, 0.1902645210140267, 0.19849658237854495, 0.18485677600673445, 0.1874412503947669, 0.17692092190699682, 0.19481365703540765, 0.19728544842245288, 0.18989832882298885, 0.18054904395156934, 0.07583765958526034, 0.08345480404319894, 0.07153747666975252, 0.08439219723519087, 0.07917635849927052, 0.08362486094511767, 0.07284337419054121, 0.06277201899939178, 0.08170544482424502]}, "mutation_prompt": null}
{"id": "41587f4f-ec6c-4a38-a0d8-c72c66ed81a7", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 25  # Increased population size for diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.8  # Crossover rate slightly reduced\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor with an increased range\n                F = F_base + (1.0 - F_base) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step with enhanced diversity\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c) + 0.1 * np.random.normal(size=self.dim), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction with a more aggressive cooling schedule\n            temp *= 0.91\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm with enhanced adaptive cooling and diversity-preserving mutation.", "configspace": "", "generation": 17, "fitness": 0.21505952732628514, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.46939385918679366, 0.4293995119762297, 0.44694224865348897, 0.4313249759376946, 0.438767723224862, 0.4451811726197463, 0.444984296347401, 0.45793095998860656, 0.45071929226106744, 0.08412828437752617, 0.0904822489366155, 0.06842110825922265, 0.10011852648048702, 0.11749991767399093, 0.09294597254943515, 0.06911105779019855, 0.09214697454829657, 0.07378175445573198, 0.12258831402186965, 0.1132052876841475, 0.10110876155519621, 0.11145788258704159, 0.12235299165794167, 0.11437548836123568, 0.10181733804612014, 0.10608776755004001, 0.12135179145537855, 0.09783036343321438, 0.09779320147629877, 0.08882112510002449, 0.09876684401556846, 0.11893622841036267, 0.09823119179056672, 0.09676577031282851, 0.1061982751817655, 0.09811486686324444, 0.9655565852420596, 0.9850238950575111, 0.9868063401553843, 0.9620068422124882, 0.9859383247660541, 0.9563979867775867, 0.9524870509902534, 0.973279773889165, 0.99361458297999, 0.2790634106154686, 0.2669398390427189, 0.26577141147176275, 0.31073978650886425, 0.2647328984261892, 0.2785449567719034, 0.2774242960641009, 0.2864148250318683, 0.28462697007260895, 0.2930214937993907, 0.37681371124970875, 0.28962362237458605, 0.3255583474211897, 0.5217628620603583, 0.3079574313701535, 0.3237240886102344, 0.32786332637425775, 0.3840808902232328, 0.14759814474891497, 0.14447621164566204, 0.15391386649266592, 0.1616609824734997, 0.1471496188374607, 0.16525306399969597, 0.16706283851925563, 0.148817465560367, 0.15478909136631314, 0.11645475223194302, 0.10757071942920016, 0.17481334772607493, 0.1623454068455943, 0.16656817106123378, 0.13765719494090134, 0.1496347666289325, 0.1409950910008816, 0.13860648842713397, 0.030284645695626167, 0.012147769039591916, 0.009552191965762957, 0.024486203747712043, 0.008709119987407199, 0.019919506016759403, 0.02040368799709691, 0.023549044187792245, 0.015593887921105831, 0.08560434871677336, 0.07952160491363525, 0.09752771509423819, 0.0792327326227521, 0.10647200602297613, 0.10529820663493117, 0.07934553557184676, 0.09000130826849306, 0.09506153792874206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007081955364167114, 0.002851650981585907, 9.999999999998899e-05, 0.0008872660300971447, 9.999999999998899e-05, 0.09147184664576125, 0.11806361363653195, 0.09829846083186844, 0.10323455319329677, 0.10519853271146062, 0.09827958430507189, 0.0953692709768238, 0.09143181267874245, 0.10147826711200125, 0.3912423274752016, 0.3811506628612401, 0.38559876754451794, 0.42750794665947633, 0.38800653981836475, 0.41481128715591153, 0.38175962173393563, 0.39077082745223113, 0.39964129942129445, 0.07989524130327741, 0.09476102773171025, 0.09417269240068149, 0.08836480550469528, 0.09717598174688569, 0.09169763321966529, 0.08526953329580433, 0.08201596904279251, 0.08839300671067174, 0.20131639626275033, 0.3273279767428152, 0.1515211984121423, 0.16886997015355043, 0.14583209135068786, 0.1998958354610253, 0.21050478197302114, 0.24867023779659092, 0.15877729316335076, 0.2610053053847946, 0.26217501800551113, 0.251254551362907, 0.26359765830414217, 0.2532862281871171, 0.25589233106344855, 0.27954932427920764, 0.2800553795074987, 0.2743797482539452, 0.20950921100022013, 0.20382416029917771, 0.19798797435215332, 0.19662217481151267, 0.2022536749226792, 0.20662610013059046, 0.21556997491465468, 0.20047358557609973, 0.2022848916967147, 0.17842560723528655, 0.1836714125181108, 0.17981716491087396, 0.1912369737555356, 0.17459905166467016, 0.2026621209340218, 0.17999321691290715, 0.17755119467839264, 0.17777507141275528, 0.18976485101227947, 0.19215036365832083, 0.17413084790779143, 0.1755349941885581, 0.18014231889596, 0.18161077536907566, 0.18047358921120393, 0.1739147451533849, 0.1851283434493659, 0.16768498786045816, 0.18541729583219912, 0.16847932220018125, 0.5908670831738259, 0.5319157068997882, 0.18650869110155843, 0.18035030559463872, 0.5243793065821016, 0.1767889377086318, 0.19453667428763333, 0.20065354398735602, 0.1648499609016837, 0.161828162067861, 0.15704813064717005, 0.19723055261093903, 0.2100405190976904, 0.20699719619513657, 0.547491296704717, 0.18413931249662918, 0.19151690860824988, 0.20152778541379723, 0.1839300402444114, 0.1753804410136538, 0.1746837867538279, 0.18449388292850777, 0.1796640999929232, 0.17927748635524043, 0.06632364232305299, 0.06380057951105023, 0.07754354560895549, 0.08606741686926456, 0.07052885292142363, 0.06768214423187835, 0.07052679785084015, 0.07666756336212477, 0.0689710421573202]}, "mutation_prompt": null}
{"id": "54a585dd-d702-4ea5-aead-9c38758911a3", "solution": "import numpy as np\n\nclass RefinedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.9  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            adaptive_pop_size = max(5, int(self.pop_size * (1 - self.visited_points / self.budget)))\n            for i in range(adaptive_pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration\n                F = F_base + (0.9 - F_base) * (1 - (self.visited_points / self.budget)**2)\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Nonlinear adaptive temperature reduction\n            temp *= 0.93 * (1 - self.visited_points / self.budget)\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDE_SA", "description": "A refined hybrid Differential Evolution and Simulated Annealing algorithm with adaptive population size and nonlinear cooling for improved efficiency.", "configspace": "", "generation": 18, "fitness": 0.2776490236806077, "feedback": "The algorithm RefinedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.6511019047191875, 0.6395916815545788, 0.5640548088734553, 0.6771539121306133, 0.6524083411095224, 0.6957960178293857, 0.5856521563042846, 0.7004084245962843, 0.6119093825396538, 0.33879680243059496, 0.3395870573757701, 0.32553044644118356, 0.40226015002686755, 0.4588021135599719, 0.3312803975991149, 0.3149704481703789, 0.4434280328517072, 0.37404777972013603, 0.11621586893610802, 0.12364195364565911, 0.10076524009142118, 0.15516635375493137, 0.11064420200339808, 0.09772014869475332, 0.11571779261760462, 0.12022904145907143, 0.10149149661450085, 0.08555102247178514, 0.1193458169361602, 0.10754746678720417, 0.11727556015557239, 0.08566948686621378, 0.0861709342751883, 0.11788138081758626, 0.11141010025991271, 0.1226905937225814, 0.9811393096031286, 0.9903725534820306, 0.9807260663675978, 0.9824211155882481, 0.9680966888173141, 0.9768186829028015, 0.986633199634838, 0.987726542310269, 0.9827795479716529, 0.2942085974464137, 0.24841349187869022, 0.2916252792879507, 0.3458628185167667, 0.24848823907033568, 0.34910973693373193, 0.2515470096924164, 0.35877425251898853, 0.3297265364091482, 0.5267743841687145, 0.5676269552786859, 0.606403792180821, 0.7299827486882986, 0.665280616329325, 0.6345610265418404, 0.7045174080061645, 0.7265952563162912, 0.494811302841454, 0.13114253801651288, 0.18034340468571552, 0.19042608535325134, 0.13054916283598939, 0.15114326499855468, 0.19357923275932543, 0.286375199296682, 0.22705019108629654, 0.17761887829211953, 0.009854802675977048, 0.009939927693025874, 0.053674807110183465, 0.1737554941006616, 0.14788773574884018, 0.16793553392592842, 0.1696957616046917, 0.16089558641000368, 0.2051317870813888, 0.11914077325269268, 0.20249812547273804, 0.05700550219998879, 9.999999999998899e-05, 0.13453878376648787, 0.2458512415331514, 0.17715565588051196, 0.16253305985772915, 0.05672736250107702, 0.2666228435254898, 0.2892424949999275, 0.284239269701576, 0.23189724850956905, 0.32676612260948945, 0.2955290220067297, 0.2106469655725145, 0.2578300696504505, 0.11951161668094679, 0.038216416331535386, 0.10430685535861028, 0.05167508697929657, 0.06157643988142103, 0.07078372092222474, 0.09479513716135735, 0.07285314928399433, 0.11409373841194648, 0.09168939710510926, 0.16900428641028542, 0.16093678141343004, 0.17822424385392988, 0.17066249894553442, 0.205137626040661, 0.19907920203032536, 0.18987478533855973, 0.1697095784296937, 0.20015784887267285, 0.5008722198749722, 0.47598491465482085, 0.46632556461320407, 0.5419213587095972, 0.5861131741053689, 0.5008063176199695, 0.47076533093754747, 0.47449665074798975, 0.5344891301274034, 0.08077641346603615, 0.09301868879977115, 0.10120333468508602, 0.0989636525752976, 0.12121182170830558, 0.07666331603912768, 0.116465485696713, 0.08419747375285425, 0.08482122854110097, 0.18631814479820086, 0.1531827920054597, 0.09629834799491277, 0.14130776330757466, 0.12670355144349144, 0.15772920573759563, 0.1828737826907606, 0.1569121122866578, 0.15473595573641719, 0.3114360794316563, 0.280115220747159, 0.27503440270584656, 0.25666460369142663, 0.2951833909838272, 0.29820480958185613, 0.29145507344715726, 0.3111748430391438, 0.30202719214361873, 0.24458501239553165, 0.22048575953740024, 0.20800244708427773, 0.20856736032507583, 0.19612083508192824, 0.1863149776768932, 0.20753816650456192, 0.21719462185466576, 0.24623215507737195, 0.18872078811360193, 0.1774922159149448, 0.19103800416955352, 0.1873082736355165, 0.1944617385955818, 0.19374649139914346, 0.1747406388571453, 0.1983864770461462, 0.1827753067858625, 0.18330141369353203, 0.19443540545615068, 0.191634131209385, 0.18383915400196704, 0.19061774584644797, 0.17842465614633052, 0.2135780805505828, 0.18372486021345924, 0.23024966602655006, 0.16227247236644182, 0.7526559999855145, 0.7965389773559297, 0.1878002771430658, 0.3703768264360212, 0.1826384734371883, 0.18021943051456057, 0.5611882124274685, 0.7750134198520404, 0.12527046371593764, 0.2079324340121036, 0.2040097172472397, 0.5857483259169001, 0.2012959822280742, 0.1580322690957977, 0.21123658113044597, 0.19476940641294027, 0.20661202865389838, 0.1775743129038928, 0.17599412259740677, 0.18963136496087207, 0.19432129306788692, 0.18842234791893542, 0.19213761211482105, 0.18351776115343776, 0.18918238795806563, 0.1636282949928518, 0.07342987649224597, 0.07311815812825895, 0.06630365062680543, 0.07178556458553853, 0.0667708253924193, 0.0688197465172028, 0.07007593357474284, 0.06520924156087715, 0.07813577001281624]}, "mutation_prompt": null}
{"id": "417affa1-d070-429a-a422-85576835c044", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n        self.adaptive_rate = 0.95\n\n    def __call__(self, func):\n        F_base = 0.6  # Base Mutation factor with a slight increase\n        CR = 0.85  # Crossover rate adjusted for balance\n        temp = 1.0  # Initial temperature for Simulated Annealing\n        \n        while self.visited_points < self.budget:\n            current_pop_size = max(5, int(self.initial_pop_size * (1 - self.visited_points / self.budget)))\n            new_population = np.copy(self.population[:current_pop_size])\n            for i in range(current_pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration\n                F = F_base + (0.8 - F_base) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(current_pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(current_pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / (temp * self.adaptive_rate)):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.90\n            self.population[:current_pop_size] = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness[:current_pop_size])\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced Differential Evolution strategy combined with Simulated Annealing featuring adaptive population size and cooling schedule for robust global optimization.", "configspace": "", "generation": 19, "fitness": 0.412080260188002, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.8012522896755712, 0.8046841855924586, 0.8103843363510127, 0.8149036961437393, 0.8063892696136971, 0.7932871562739241, 0.8155269354341519, 0.8150509447877148, 0.8091939892160588, 0.7078285904487497, 0.6897931133711124, 0.7020342766411543, 0.7094015125137147, 0.7173381832173555, 0.6877392713730914, 0.7221567204647734, 0.6933764043601356, 0.7115266533545967, 0.13696508872608248, 0.13174781304534244, 0.13818661481744765, 0.1254202082804723, 0.12508109889602415, 0.1275142867167831, 0.1440994255278114, 0.11828163955312088, 0.49642674602422543, 0.28899719010678016, 0.11820305051786295, 0.11077425695077814, 0.12267138531004473, 0.11885656358649643, 0.13669427998029837, 0.14837238542370434, 0.11707905558299003, 0.15138369539277208, 0.9921586501602739, 0.8917216373942948, 0.9669684203005857, 0.9033572997030209, 0.9512559412342042, 0.9880885335980404, 0.9774001644905274, 0.9369192414658148, 0.9571806886683446, 0.597482530931055, 0.624333740222839, 0.6221499887613244, 0.6140071511843078, 0.6219391152915112, 0.602640605015859, 0.6355626065966684, 0.619318803302868, 0.5385477457338967, 0.7558657164773066, 0.7540302516483344, 0.7435616860332692, 0.7836337265513007, 0.7602581849434064, 0.8043036156589054, 0.7380563367793102, 0.7491851384916786, 0.7882845017237048, 0.30946916418696513, 0.4997419350474799, 0.4521177370128585, 0.42424343955928256, 0.21774219003633666, 0.2849695958638411, 0.40530483058548283, 0.5351068216535642, 0.32520976478620867, 0.02090523354601659, 0.009835596537588809, 0.6462909871713463, 0.526446541611113, 0.18776548753552236, 0.29269929632537517, 0.40612011816721716, 0.2293869206577459, 0.49821836518232687, 0.2975331728512597, 0.44798081846254734, 0.46529158733153386, 0.4529676343492709, 0.2861572595492614, 0.5025374330350898, 0.45645052926777185, 0.5010061009918292, 0.28999888693125, 0.589608763225389, 0.5361552424643958, 0.543413852810561, 0.5375499835849473, 0.5969145451985205, 0.5739661764771617, 0.6347355363140077, 0.6178088456476811, 0.6314176817504711, 0.11986822684306409, 0.12071924395142619, 0.15129881779467835, 0.3703295983977549, 0.2625527214280369, 0.18185788188500274, 0.13019015153123314, 0.1336471784455895, 0.16955277254318002, 0.4159066671064502, 0.32943586827971827, 0.3083723116193876, 0.4269708789203138, 0.3949778101466018, 0.3808696365684545, 0.34295571882776976, 0.3392602686834555, 0.327130881865183, 0.7391553037404446, 0.7327124193290888, 0.7049994718796373, 0.7429559904109952, 0.7202927307176696, 0.7440920038033374, 0.7417092703167882, 0.7131083711580157, 0.679098717707574, 0.09732977131027487, 0.12480513886328704, 0.09052857273697534, 0.11654858475919305, 0.08968413156832378, 0.12932119531925468, 0.10105564953722657, 0.10759928914543548, 0.1066369944945571, 0.14534335744022464, 0.21099487906198755, 0.3155830774137258, 0.25723571153255154, 0.1277228650904284, 0.1489573021806485, 0.1354644022592223, 0.1770911514898469, 0.1709097882871332, 0.439775421572959, 0.5308617359361777, 0.4534610002892334, 0.4621795438528169, 0.42663419881891484, 0.4495556300991047, 0.47818679984422285, 0.4785017635104215, 0.5610499837396692, 0.3167557944115811, 0.3617341867302474, 0.35510770583347817, 0.3308279883631119, 0.26097997352306, 0.3929230742735247, 0.33630392102373685, 0.3688674181049644, 0.34093298940541816, 0.17682487961553928, 0.19647848658874734, 0.19903050521578158, 0.1869275874780535, 0.18349804215678445, 0.176424003938629, 0.2007109223167528, 0.17599788021685503, 0.22386422604279688, 0.522184002441263, 0.20908080940300822, 0.5783315910022185, 0.5817142551819159, 0.4899621061828733, 0.5085443747108995, 0.3232213018250375, 0.5516759403045277, 0.34053084262491207, 0.1695858731286164, 0.77081881526168, 0.7930724146507827, 0.8013026883341807, 0.1652773590404366, 0.17913927825105747, 0.18115436583911348, 0.6643613196059572, 0.7318986630787199, 0.7652510176253489, 0.20132800249161453, 0.20117485717374206, 0.16217541832951987, 0.1983666794686696, 0.19242173475227642, 0.20988216234140622, 0.1976288231625145, 0.20841840077415108, 0.17830782935040534, 0.1955153988587598, 0.20363637254456024, 0.1826049401385731, 0.1868568198673647, 0.19326606932577084, 0.18131382953704278, 0.1698458613511057, 0.17025082025415228, 0.07678456355936158, 0.08291958651716069, 0.07849620434756033, 0.08941133323853667, 0.06980290555637314, 0.07484177972354278, 0.0792594864186631, 0.07129503258114234, 0.06529341981424963]}, "mutation_prompt": null}
{"id": "f0fb3578-79af-41b1-8495-127b861a8205", "solution": "import numpy as np\n\nclass RefinedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(20, int(np.sqrt(budget)))  # Adaptive population size\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.9  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration and diversity\n                diversity = np.std(self.population, axis=0).mean()\n                F = F_base + (0.9 - F_base) * (1 - (self.visited_points / self.budget)) * (diversity / 2.0)\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover with increased exploration\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n                    else:  # Additional exploration move\n                        crossover_vector[j] += np.random.normal(0, 0.1)\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.93\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDE_SA", "description": "A refined hybrid Differential Evolution and Simulated Annealing algorithm with adaptive population size and dynamic mutation for robust performance.", "configspace": "", "generation": 20, "fitness": 0.34302627175015216, "feedback": "The algorithm RefinedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.7022588595006879, 0.714115699581926, 0.7404180271967352, 0.7677619114741052, 0.8167401594328022, 0.8119703714118827, 0.8185799252306, 0.768173868069379, 0.7876610949116778, 0.49707950760338193, 0.6090882474033974, 0.7416819707642135, 0.5429662702761433, 0.607266654734453, 0.43533684489392754, 0.6118250024325804, 0.49670288876121327, 0.6580793783044037, 0.15916860854065962, 0.16332001816871966, 0.22151825246044077, 0.13913960142675075, 0.15396230744022144, 0.12710375604181212, 0.3109473920273619, 0.10237293918404688, 0.1267142193425147, 0.12639667451739756, 0.14756008725252867, 0.13903914846607512, 0.09485039545928886, 0.14577828625494893, 0.11580251205869696, 0.12153411926073054, 0.12088390980533037, 0.12304346196047167, 0.9543390521579449, 0.9773932528171159, 0.9283194063598287, 0.9454310714094835, 0.9510357358526585, 0.9016442351295615, 0.9782106643754601, 0.9919061454410631, 0.956230798737672, 0.3824100515797516, 0.43568367932096697, 0.45625519448679663, 0.3621811916453377, 0.4100974845715196, 0.39636702050665795, 0.40576510088216666, 0.37434356459821905, 0.37573629675781584, 0.8830721806316093, 0.8132206312640378, 0.8581822234763107, 0.2768514398085674, 0.850538335681841, 0.8448877136596387, 0.4374348832618754, 0.862111244407684, 0.32478610149234555, 0.21900783041901672, 0.20364268995414636, 0.16844883117975717, 0.18591244787489603, 0.2664813884431776, 0.16559889582783016, 0.20237754417298415, 0.21105245587655597, 0.1554509139742729, 0.1187026742180376, 0.12401735638238298, 0.11849821638672564, 0.15917576084197516, 0.5651745547915243, 0.19045888943788292, 0.19091444532270274, 0.19695455880630608, 0.20109863966642816, 0.13662484118568297, 0.0819763058988161, 0.3622722932305824, 0.005251492265069824, 0.24732506334325688, 0.40025624012319583, 0.08368625907877902, 0.09136931310295493, 0.4035736244303728, 0.1714823698124357, 0.36462925581487116, 0.4057935280329583, 0.12814172289023695, 0.29731940181879235, 0.5689789090331048, 0.6039215665019312, 0.10546595096640998, 0.13095822283753622, 0.11342502942128863, 0.05012833972969588, 0.11881675508663991, 0.13748688756285954, 0.17850866343627858, 0.1423843205916503, 0.14729858367350535, 0.24322169553568207, 0.21882819136105147, 0.27871118747748236, 0.11225157954637033, 0.18356041070317575, 0.32412589419071725, 0.2382318043051035, 0.36340906256984395, 0.39726639646944417, 0.2841253193293405, 0.20925304210184503, 0.5773685152327634, 0.5937051721796098, 0.7993218144718816, 0.6351704624113632, 0.4271410868388511, 0.5368926409597343, 0.5864184652078976, 0.6608369546814276, 0.6733003704510038, 0.15758523312451977, 0.10285280295640953, 0.12646809836439876, 0.12799595471580671, 0.1291957429141929, 0.12449995006119186, 0.11570915061323872, 0.15750081285988216, 0.0943823537255779, 0.1571659349318224, 0.23578987141189678, 0.18240091980999562, 0.2602365261267867, 0.18181090635611397, 0.1504870355997311, 0.5922876225898893, 0.17916503417550045, 0.4044851238323175, 0.3547922539707712, 0.40633922883773543, 0.45550586868610876, 0.4229259508168778, 0.48070379055223555, 0.4183097503556129, 0.217448170136043, 0.4393618616746803, 0.4919302570411467, 0.3191130459968694, 0.40837046752918227, 0.37596103776474843, 0.19951176495874812, 0.2090120252722848, 0.2086722458853314, 0.33222652844610256, 0.3696469860819137, 0.3486279154233076, 0.19347596125146482, 0.21790028223225522, 0.16563781062888316, 0.19047637602965917, 0.1946535361354217, 0.18841532063077937, 0.1965392705427247, 0.1936539096711537, 0.20825955744503777, 0.2077275882250409, 0.22215055050819021, 0.22856528213677563, 0.5238931477337581, 0.6152199313294612, 0.19179574912249353, 0.19523799797732733, 0.32604470221932214, 0.6664636019379329, 0.7288568922460811, 0.17080629537035075, 0.1509232454092636, 0.1702801534603574, 0.186787459085216, 0.1809760204845431, 0.8319268658501089, 0.1799632523449125, 0.18146202835752012, 0.1665489323595042, 0.45263896221451316, 0.16501044427949696, 0.6225057121990718, 0.7374158357671043, 0.14958452398903987, 0.12706886751249713, 0.12653475971530748, 0.8286940652611001, 0.20020047908468253, 0.19700309640777636, 0.20061839567729178, 0.19299772947491545, 0.20728950481654707, 0.1963099174866183, 0.1867798810091621, 0.1928451909839336, 0.19815572136244597, 0.08382661047347506, 0.07740713372585817, 0.08271684776670751, 0.09010301164556622, 0.08363202254492075, 0.08124036833350368, 0.07545122035719065, 0.07820852163283376, 0.08185575855126204]}, "mutation_prompt": null}
{"id": "f5932fbc-9ece-46c6-b53a-507405ecfb26", "solution": "import numpy as np\n\nclass EnhancedDE_Gaussian:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.9  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n        sigma = 0.1  # Standard deviation for Gaussian mutation\n\n        while self.visited_points < self.budget:\n            pop_size = self.adaptive_population_size()\n            new_population = np.copy(self.population[:pop_size])\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration\n                F = F_base + (0.9 - F_base) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step with Gaussian mutation\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c) + np.random.normal(0, sigma, self.dim), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.93\n            self.population[:pop_size] = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness[:pop_size])\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_population_size(self):\n        # Dynamically adjust population size based on current fitness distribution\n        return max(10, int(self.initial_pop_size * (1.0 - np.std(self.fitness) / np.mean(self.fitness))))", "name": "EnhancedDE_Gaussian", "description": "Enhanced DE with adaptive multivariate Gaussian mutation and fitness-based dynamic population sizing for improved exploration-exploitation balance.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('cannot convert float NaN to integer').", "error": "ValueError('cannot convert float NaN to integer')", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {}, "mutation_prompt": null}
{"id": "31856dd0-14df-4512-9d8d-00e3fc0547e6", "solution": "import numpy as np\n\nclass AdaptiveEnhancedEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.85  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n        pop_size = self.initial_pop_size\n        \n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration\n                F = F_base + (0.7 - F_base) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n                \n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.92  # Slightly faster cooling\n            self.population = new_population\n\n            # Adaptive population size reduction\n            if self.visited_points > self.budget / 2 and pop_size > 15:\n                pop_size -= 1\n                self.population = self.population[:pop_size]\n                self.fitness = self.fitness[:pop_size]\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveEnhancedEvolution", "description": "Adaptive Enhanced Evolutionary Algorithm with a combination of Differential Evolution and Simulated Annealing enhanced by adaptive population size and temperature scaling.", "configspace": "", "generation": 22, "fitness": 0.40456323530437255, "feedback": "The algorithm AdaptiveEnhancedEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.26.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.7688400241553226, 0.7534860500477157, 0.7618512701059238, 0.75860796677754, 0.7618906183593321, 0.7504311579205377, 0.7614998679540611, 0.7647024627025502, 0.756340290722548, 0.6717739631898803, 0.6741735882316962, 0.6711472217498018, 0.6828452227033113, 0.6831832364418241, 0.6828771740970041, 0.6709177331426786, 0.6740695475532934, 0.6824801327682071, 0.2669644750523016, 0.13403112206834122, 0.40670320504338076, 0.3241215217980281, 0.12215830318547705, 0.33128434622390823, 0.20479942172510313, 0.2944083472507685, 0.13351964923121573, 0.11356548135092015, 0.11960163605114826, 0.11153820219698085, 0.11640170254939475, 0.12550874914014298, 0.12163377175267864, 0.12080481577159918, 0.12343139506269085, 0.1169909843163145, 0.9845032736242023, 0.938535343539503, 0.8596438992118033, 0.9414785996019821, 0.9803674255501883, 0.9904570487467458, 0.9656210847873743, 0.9607686711932543, 0.9578711008167186, 0.4908289531743967, 0.592583708186726, 0.5948115273035648, 0.6155640725982711, 0.5514311005875348, 0.6007197042039781, 0.5152998185712314, 0.5679138807442397, 0.5234360818657288, 0.7663899460499508, 0.7345162700874575, 0.7675867106243947, 0.8097110202535545, 0.7851243666614856, 0.7400901543840291, 0.7769009883562061, 0.7461256688779541, 0.791973270933592, 0.21970547250503136, 0.348335555108811, 0.31386031368580947, 0.26359266066225495, 0.2053716135303454, 0.2556717244612673, 0.5572390466409122, 0.584460056270049, 0.28349341385680893, 0.37871145508197, 0.02156822904231448, 0.051761511976825214, 0.3697585090803728, 0.2027750403649442, 0.25130499277181584, 0.2537224709154495, 0.23632810529280313, 0.5176324398224988, 0.4078855888873646, 0.3835421438011186, 0.34535357500744945, 0.16685265513543834, 0.3515849654366059, 0.3958110051632532, 0.44823618802679077, 0.4614378983473385, 0.5149837514128397, 0.565131491301256, 0.5197556601730301, 0.49446322179194646, 0.519008282652019, 0.5938762683243028, 0.6087345129558135, 0.5894236705394565, 0.6200012999968119, 0.619281539784146, 0.08307763564118031, 0.2128877852150406, 0.1031318797581815, 0.21950780765656142, 0.1622705538861985, 0.1875032141856352, 0.1596864142603126, 0.1376108701001857, 0.12892076388735696, 0.28872122848891124, 0.34347127405985667, 0.2910216073628483, 0.41190781404865795, 0.3747123943327997, 0.3443920323652485, 0.3593885066219573, 0.37949106290543144, 0.33248308459693077, 0.630975090340548, 0.7210429832416043, 0.7166036936047384, 0.7163418918848534, 0.6809744548623349, 0.7284304134221391, 0.7201267710187993, 0.7074641551744683, 0.6791327912170925, 0.1064641753360791, 0.11502671603079995, 0.11319701356054535, 0.10736758801574853, 0.09956945914961635, 0.11218298978104124, 0.08538292649182166, 0.11734780770857889, 0.12334655118260673, 0.1762451176880182, 0.14434682437362967, 0.15114935546130748, 0.1904412796251278, 0.14675803841767665, 0.14789045944756962, 0.16611716171302326, 0.21866576125571124, 0.1419377001224198, 0.5311390505815501, 0.44837488618316634, 0.43839387577728195, 0.4335075228615848, 0.5112611929441855, 0.463594295449657, 0.5471221460196036, 0.5742685149896007, 0.5475262118336636, 0.33384305897867594, 0.3478988997220259, 0.37656025609119415, 0.4038776041521036, 0.2589280239936217, 0.3570077890327942, 0.3972038760449017, 0.4100817798261074, 0.34975549436932274, 0.20015543318379747, 0.18069550243755061, 0.1981969726905879, 0.20141477270406727, 0.19089492015301057, 0.19188921586846286, 0.19232852418162416, 0.1846092948072673, 0.19395020105009553, 0.4096906146172462, 0.3129650851688278, 0.18577258105710648, 0.507414105407313, 0.24697779835087563, 0.22654396987927816, 0.49266643987172754, 0.19490992408296592, 0.3316922051543916, 0.17908259704728335, 0.8098636196767394, 0.7493766532225838, 0.5803143372755303, 0.16330239945057623, 0.1799380194377853, 0.7652647965310472, 0.7503861281931786, 0.7384583775473107, 0.1989000024651938, 0.6217701059207148, 0.1619367192827844, 0.7102703983412082, 0.18714163783554238, 0.6739288700586987, 0.7097036792604408, 0.20775922977169548, 0.21034285271024633, 0.20406727642058875, 0.18862761746422152, 0.1844612935350619, 0.21795115202662818, 0.18324018063508996, 0.1870574333316275, 0.19012452678057623, 0.19835180981388578, 0.18741937616934157, 0.07146644095591981, 0.06728362241192587, 0.07565774518389567, 0.07816114863608015, 0.08232608756203263, 0.08020586679333774, 0.09035836818468468, 0.07659173336315583, 0.07724490469246392]}, "mutation_prompt": null}
{"id": "133eae18-87a4-444d-abbf-352598ccd5a4", "solution": "import numpy as np\n\nclass RefinedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.4  # Base Mutation factor\n        CR_base = 0.8  # Base Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Adaptive Mutation and Crossover rates based on iteration\n                F = F_base + (0.9 - F_base) * ((self.budget - self.visited_points) / self.budget)\n                CR = CR_base + 0.1 * np.sin(2 * np.pi * self.visited_points / self.budget)\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.95\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDE_SA", "description": "A refined hybrid DE and SA algorithm with adaptive mutation, crossover rates, and dynamic population adjustments for robust convergence.", "configspace": "", "generation": 23, "fitness": 0.3355418526837102, "feedback": "The algorithm RefinedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.22.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.6214557328565009, 0.6317706144604975, 0.6400793020092574, 0.6389377907396874, 0.6330885113088989, 0.6327106105615715, 0.6317262924803589, 0.6302307117687297, 0.6285506059523733, 0.5385967691699923, 0.5549210073125801, 0.5486606065403655, 0.5481655374934044, 0.5511292654869859, 0.5439328450891339, 0.5474154832633651, 0.5519870612509583, 0.537233038449535, 0.1115142927889583, 0.14786745632526055, 0.10787331716986026, 0.1556135494902372, 0.13044504497785947, 0.11033659927300854, 0.10682908557345472, 0.1819009679820851, 0.13434544522737635, 0.10566834017821891, 0.10035157555310237, 0.10676601831180943, 0.10403525463871244, 0.12076144682774759, 0.10602431629735998, 0.12114259937003968, 0.1277882040634044, 0.1307228434422013, 0.9882309731987956, 0.9520998179975513, 0.9901269172409919, 0.9788462922059484, 0.9591287223400515, 0.9666767076813402, 0.9572791783988113, 0.9145707553353971, 0.9669024550533452, 0.4701142075794994, 0.4733853130899377, 0.4565705378972129, 0.4864181380600776, 0.42290530386403047, 0.4715516087203011, 0.4480626262029216, 0.45831654501392827, 0.4716864976039945, 0.702976984669982, 0.6913274126879312, 0.6594103264042506, 0.7376899498084052, 0.6908880549478678, 0.7454209157495266, 0.6687827789207093, 0.6565753148677489, 0.6846170052063504, 0.37617741090674195, 0.3991186025883857, 0.40807498135424913, 0.24505306042664554, 0.29106566209914886, 0.30462463849144183, 0.23683300682619135, 0.21167589682880716, 0.43705483043787396, 0.11416035408155456, 0.00977495899035763, 0.1596279095978953, 0.42413514946049813, 0.224694202139469, 0.23968790585009503, 0.2974540333407757, 0.26769171958565885, 0.23832988999596505, 0.3026857109052755, 0.32111842908997645, 0.3140683641248939, 0.2935112127802061, 0.29363759133782963, 0.28742533909032686, 0.3008190645279475, 0.26241317547586573, 0.27793792316250565, 0.41946592559369034, 0.37054586363965936, 0.37765962616824333, 0.4134902366076375, 0.3659229122727161, 0.39276204531175096, 0.43114291532767124, 0.45813375723714445, 0.49930364806059335, 0.10578735911700643, 0.08474769322980358, 0.10217190586719938, 0.17439943130375635, 0.1650069242911132, 0.14024618491322782, 0.13562994132511808, 0.12004673640761698, 0.14138164527464336, 0.2359304914471868, 0.2541252358371814, 0.2567249925783279, 0.2680774458868742, 0.2622495968724259, 0.25788118684700834, 0.2886946922741904, 0.2507850430635935, 0.273347905168838, 0.5693270733205136, 0.5670036050868672, 0.5624502959123818, 0.5692747357822763, 0.56478048814832, 0.5465902065127752, 0.5720602682827155, 0.5611080695754789, 0.5573788644423601, 0.08394797561918133, 0.09355761372237559, 0.08419608033464754, 0.09005742175237663, 0.08979452803239707, 0.08213727385840053, 0.09238944320799825, 0.12776778969858082, 0.08432066363892388, 0.18837060424299867, 0.15470957626960113, 0.19971594251817038, 0.1349543084280742, 0.182922305099818, 0.22025100082992233, 0.28358731632945056, 0.15445059080754386, 0.26701049277246014, 0.3452800063083913, 0.381872379114783, 0.3527523487250551, 0.3683725667222131, 0.3782904636927701, 0.3418205549655666, 0.40440810507105085, 0.4120102925444089, 0.40760468046273735, 0.2584709135423767, 0.28712910211949705, 0.2544837297737338, 0.2468684396753541, 0.27793671662146113, 0.25828828871911047, 0.33017818818169586, 0.2800750684755988, 0.30347888870099315, 0.19442370744386184, 0.19874080057246069, 0.17887871341097483, 0.2074551937145518, 0.17133308507696787, 0.21304520712183483, 0.17621077305110244, 0.1779781943378702, 0.20181410950748502, 0.26156579131819013, 0.2138738900651337, 0.19616938422299923, 0.26691631132867355, 0.19600037041198526, 0.32692432711638597, 0.18873382378128278, 0.2180325321499006, 0.22901526350261492, 0.16092257922655995, 0.19479031657668278, 0.6702254882107376, 0.6807839775608631, 0.1830121937772119, 0.18594855148557943, 0.17317641474950085, 0.6141813569114677, 0.19455174955529198, 0.1625847761668896, 0.20239646220374008, 0.6239526965337754, 0.616128479038939, 0.20108287970678052, 0.19398018813123497, 0.6570376078988438, 0.20273110758546586, 0.20500140951806956, 0.18150802483145767, 0.19345810088490323, 0.18128367902998554, 0.1736629002246307, 0.1796107761592337, 0.15019046913586442, 0.18255426297224642, 0.19769526518205005, 0.17868761339820072, 0.07639442172610311, 0.0722626096211223, 0.07059285078703337, 0.06787235221523658, 0.0755761778054923, 0.08453843613470058, 0.07258425058935625, 0.0778438093127568, 0.07203734920310834]}, "mutation_prompt": null}
{"id": "30e08385-acc2-4be3-b62d-fa09838f5160", "solution": "import numpy as np\n\nclass RefinedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.9  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Probabilistic mutation strategy to maintain diversity\n                F = F_base + (0.9 - F_base) * (1 - (self.visited_points / self.budget))\n                F = F if np.random.rand() > 0.35 else np.random.uniform(0.4, 0.6)\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover with an added local search component\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n                    if np.random.rand() < 0.1:\n                        crossover_vector[j] += np.random.uniform(-0.1, 0.1)\n\n                # Selection with adaptive acceptance in Simulated Annealing\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / (temp + 1)):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.95\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDE_SA", "description": "A refined hybrid Differential Evolution and Simulated Annealing algorithm with probabilistic component diversity and adaptive local search to boost exploration and exploitation.", "configspace": "", "generation": 24, "fitness": 0.2601676899313559, "feedback": "The algorithm RefinedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.16.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.32263127473680375, 0.3240310235974987, 0.31850762009424693, 0.3338008223896305, 0.3615925535209302, 0.3386252112788094, 0.3523567702355642, 0.33123941977830895, 0.3547707168165313, 0.2922186068332526, 0.2887204450171241, 0.2815364744681367, 0.29626401607831176, 0.3072605100420185, 0.2999513487176624, 0.28877433983295564, 0.2873684406959994, 0.3181990613106437, 0.15947767709047989, 0.14970120604696735, 0.15701278916770567, 0.1576334743452924, 0.1815831676167926, 0.2026587051476968, 0.12632073912749875, 0.12324979736851727, 0.1240712569339234, 0.13431071395463956, 0.15218306783729163, 0.12384143133957914, 0.15331807226059757, 0.12412658633037954, 0.10709941282118984, 0.12119388094324346, 0.1368542696235603, 0.14959111387880786, 0.9096024263186103, 0.9049766054295382, 0.9831072747906556, 0.9715864993272295, 0.9530101486248391, 0.9829224926591452, 0.8892907608316276, 0.9662854877045484, 0.9876342195848477, 0.2733898608270062, 0.2562939687742133, 0.2715327471519564, 0.2575137322942316, 0.2963802184070057, 0.27044716897354826, 0.2631804257419582, 0.2831962557305333, 0.2721397734137285, 0.33521706367929627, 0.3218799545337764, 0.3212995255365235, 0.33814323561152504, 0.325733698062998, 0.34198816334147597, 0.3395883503519942, 0.3439488994658878, 0.32327101977759753, 0.28394746497399015, 0.25462476035560466, 0.24295806369428496, 0.26621735951819114, 0.2773250109199231, 0.269203821647477, 0.24320195414900592, 0.2505081419568089, 0.27307196101321407, 0.26869380467255577, 0.23598278040614973, 0.23872492910827248, 0.2616473724567482, 0.22789083338632798, 0.2432750729410622, 0.2995954311884049, 0.26247157011018485, 0.25359515163573854, 0.2818896556030255, 0.26571173872444487, 0.2932814152234082, 0.25339009837150883, 0.30085760712911713, 0.26676992544541334, 0.27855327549623166, 0.2826381006926403, 0.2557556774904196, 0.27798143710132095, 0.2884149120009982, 0.3361207945255327, 0.27379804405878383, 0.29593336109545265, 0.3197235927541351, 0.2907048292883806, 0.27412217583043386, 0.3024074337604641, 0.1099342833280551, 0.1691797822973884, 0.17724611429648807, 0.1646223642923882, 0.25730328230994104, 0.2074632433377398, 0.21758300635348282, 0.21725503084232323, 0.12981748876400612, 0.21326945398664043, 0.2172216100423351, 0.2158666182838045, 0.20646285430308864, 0.22107867767950284, 0.22510384495484115, 0.21531335622604597, 0.21030704920494991, 0.21475870601811353, 0.3283938927317589, 0.3158250034056048, 0.3034762040292992, 0.3019198940043254, 0.33089787739136467, 0.30160091662462696, 0.34770257201426413, 0.31184288357725565, 0.3127000889815952, 0.11932984377672651, 0.1180035861645723, 0.1494443875197341, 0.09196475241542323, 0.1403071189787657, 0.12747672094851803, 0.12041070775818152, 0.11598472350595623, 0.12129322767040629, 0.18398053268484393, 0.18257487040222287, 0.3159039913725492, 0.16794272909206687, 0.24370903858264636, 0.1652135947045965, 0.2540943144016313, 0.2951514712524882, 0.2654049997518444, 0.2422860104152912, 0.2569607788029198, 0.24473698453153325, 0.24417412551885265, 0.2505335579179492, 0.23550344486768982, 0.2409782707694732, 0.25503607480255264, 0.2509905377567315, 0.22199397251267672, 0.23802370986738186, 0.22629754736599939, 0.2356942059800915, 0.2380871187584538, 0.22774199278381047, 0.23289650617821467, 0.25366359601074984, 0.249198598177939, 0.21110980371317434, 0.19483811894151204, 0.2002633297433516, 0.19677141188138336, 0.1920404623592643, 0.20737965272904757, 0.20015221936359406, 0.1929892559342129, 0.19996186380952252, 0.17751598115417055, 0.18417668451792146, 0.1892192155573552, 0.17978485930626975, 0.17814579575248568, 0.18468019635939503, 0.18798641725120913, 0.17416650587638305, 0.1815979092236868, 0.17125460904825573, 0.4481181791529544, 0.16896844548254208, 0.19148742258243057, 0.18371511109232963, 0.17539666292695255, 0.18207129153015122, 0.18074713728261338, 0.48082294646331347, 0.5031862526990394, 0.20138477064554794, 0.12673833398906442, 0.2038180589094727, 0.20344348774337773, 0.1640635427900814, 0.21117922517610366, 0.21021914990485735, 0.20957465106946405, 0.17857639690234717, 0.19443420753372498, 0.18463092813982374, 0.19206436840441266, 0.20897549973505736, 0.1931824719398798, 0.21008430093804453, 0.1904431201109924, 0.2218722077648666, 0.07146726573138462, 0.08824279650831668, 0.1004887651012416, 0.08373571394157409, 0.08331434504545066, 0.08191399181957937, 0.08485748254509506, 0.07420985098892119, 0.08099905382640904]}, "mutation_prompt": null}
{"id": "5f2ff0d1-fa8c-4d44-a0f0-6a8b1f83878a", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR = 0.9  # Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            # Dynamically adjust population size\n            pop_size = max(self.initial_pop_size // 2, 5)\n            new_population = np.copy(self.population[:pop_size])\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor based on iteration\n                F = F_base + (0.9 - F_base) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction with periodic resets\n            temp *= 0.93\n            if self.visited_points % 100 == 0:\n                temp = max(0.5, temp)  # Avoid too low temperatures\n\n            # Intelligent restart based on diversity\n            if np.std(self.fitness[:pop_size]) < 0.01:\n                self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, self.dim))\n                self.fitness = np.full(self.initial_pop_size, np.inf)\n                continue\n\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid DE-SA algorithm integrating adaptive population size and intelligent restart for robust global optimization.", "configspace": "", "generation": 25, "fitness": 0.2653237110524315, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.20.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.37335221144657516, 0.38797536543992006, 0.3778297964439369, 0.3670903956828896, 0.37199789675577977, 0.3917356234914017, 0.37268923530069553, 0.3969613074927715, 0.384509590303312, 0.3529055830610126, 0.3543953243429283, 0.37526119487895027, 0.34829011170522295, 9.999999999998899e-05, 0.34143756933697866, 0.019243478144224224, 0.3645316900494414, 0.34652680802688396, 0.15320041168220233, 0.14768558624792527, 0.09637847389826493, 0.14224924824123042, 0.15566225089399266, 0.15475820645228489, 0.10778742930549723, 0.09745510834527171, 0.15865112229330647, 0.15950289413646024, 0.10038653372015072, 0.12431655774422068, 0.10648928979751271, 0.1431143296837859, 0.12135777221942956, 0.09613969058653216, 0.2923775940957809, 0.11543820809013083, 0.9876107909744632, 0.9929037013003346, 0.9855706736429604, 0.9779972652708122, 0.9889778473189481, 0.9899572749255335, 0.9688434352467323, 0.9837216618205951, 0.9757125381575925, 0.31424197677244636, 0.29215703863898934, 0.30819433903234794, 0.31458989308908425, 0.30919328477562114, 0.3071504769926744, 0.30507574664369885, 0.31536800246482166, 0.30957458764272594, 0.7231326691127056, 0.24150962739692672, 0.7312578048399949, 0.7136744527855825, 0.49102888114204124, 0.5012564592533962, 0.6991925704230997, 0.38730032113993706, 0.7808188835040896, 0.3330060015258186, 0.25447226056179495, 0.3381597303294187, 0.3496218327717674, 0.3133583274888587, 0.31257646185837273, 0.1331616414939355, 0.34332113703205114, 0.13484091338998694, 0.2712013644942296, 0.32350466788444054, 0.24858071290769868, 0.35757816383560326, 0.3478044608714873, 0.13165874519225795, 0.3068013978377222, 0.33165767186319617, 0.3675969111653832, 0.26174942102088494, 9.999999999998899e-05, 9.999999999998899e-05, 0.2915400370635144, 0.0681810003538188, 9.999999999998899e-05, 0.30148558254883195, 0.15458965838028438, 0.10310279694269353, 0.1866148427012868, 0.3544470601739633, 0.08731368569905085, 0.09700227313360288, 0.06201102486542509, 0.05891078645764869, 0.20645931824863684, 0.21329447909226507, 0.2861810219243762, 0.0746235845485318, 0.030039496781409047, 0.12174025132758703, 0.10819137768309572, 0.08313421339571614, 0.08165655474442624, 0.22658875151630686, 0.11564669230967062, 0.2355678115895674, 0.27923522882001206, 0.25825202726515883, 0.270763499223874, 0.29391993181867504, 0.255891379857507, 0.2772986011535058, 0.049612291629441696, 0.04933384613424163, 0.25406808732293273, 0.3482257550818266, 0.3532698421727172, 0.35302506125442834, 0.35185451014469904, 0.18125308835511855, 0.3431021614976415, 0.3417532838732653, 0.3356195109372877, 0.36047411494868065, 0.09835029787626903, 0.0918395700132183, 0.09358552910272644, 0.14023515199355296, 0.05122770668310572, 0.05392798980989466, 0.2865986214986024, 0.12154255499913469, 0.1310214409446595, 0.18961695721434524, 0.1415530549876285, 0.11276154727833565, 0.3327417295852271, 0.1811089180603621, 0.19833616385170927, 0.25175918095485506, 0.22184180376820373, 0.09531153696222261, 0.19586617598577938, 0.27366194203136984, 0.2878448082829749, 0.2871609776582583, 0.1972407442992261, 0.2769261389871027, 0.2960631337276437, 0.28978655738129655, 0.29250612928813924, 0.16958708481025442, 0.2303826344264016, 0.2756159777703294, 0.27391460076764507, 0.18731579140339727, 0.21523312745800927, 0.2707906282704535, 0.2914831325162883, 0.27643867574089387, 0.2379345494313353, 0.18963700807229877, 0.19579970231127297, 0.25428639011784193, 0.2129788536853573, 0.216359817389981, 0.1965493779230988, 0.19202366381963176, 0.2212877502883117, 0.22055891611586553, 0.2413272246799918, 0.33334796319485727, 0.27437349154591906, 0.2493472034931571, 0.3350485816972907, 0.3494903132639362, 0.3113420907651189, 0.2412033665399752, 0.19734210703812194, 0.17226552788493033, 0.17741134542886317, 0.12319479085400542, 0.20019154405357598, 0.11912579342133156, 0.19814097143297127, 0.5579727511743737, 0.17365787241777708, 0.15405448173189273, 0.16559933369621938, 0.15534399396360554, 0.20777483673338348, 0.15512894513305941, 0.126989681088993, 0.2123493757306234, 0.15675071672139018, 0.1564689181044101, 0.2434210637953289, 0.25619653479827553, 0.18489151766784473, 0.2260012823955806, 0.25325117119242, 0.21441797024666065, 0.17684018686984437, 0.1799706108986826, 0.22772445673122643, 0.06812608096521222, 0.08463413743418258, 0.07599144932965174, 0.09612380865931447, 0.11021818385522131, 0.09510841386152402, 0.11341878596557142, 0.08677543297516599, 0.0909507922065208]}, "mutation_prompt": null}
{"id": "e59195a8-e072-4465-abbe-1c7bf2c58848", "solution": "import numpy as np\n\nclass RefinedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 25  # Increased population size for better diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Base Mutation factor\n        CR_base = 0.9  # Base Crossover rate\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Mutation factor with nonlinear scaling\n                F = F_base + (0.9 - F_base) * np.tanh(1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover with adaptive rate\n                CR = CR_base * (1 - (self.visited_points / self.budget))\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / (temp + 1e-9)):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.95  # Slower cooling to maintain exploration longer\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDESA", "description": "A refined hybrid Differential Evolution and Simulated Annealing algorithm with adaptive selection pressure and temperature control for improved exploration and exploitation.", "configspace": "", "generation": 26, "fitness": 0.3156041198255484, "feedback": "The algorithm RefinedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.6782595380421199, 0.6802838140267091, 0.6908945349784557, 0.6895448733196343, 0.688986515259721, 0.6902719154716368, 0.685676998761072, 0.6855132155850663, 0.6861291203484643, 0.6389206445557816, 0.6433946791324261, 0.6297334311939186, 0.6209547936755826, 0.6269112983233543, 0.6280977432838576, 0.6292003873847765, 0.6291112115891803, 0.6392131858735407, 0.4167438417626148, 0.3208808482789537, 0.38829565539357946, 0.3748721101617032, 0.34131317740868394, 0.3539784698498617, 0.4036219060966528, 0.34273360810911313, 0.3691898616799888, 0.14074413368057848, 0.14631368678909817, 0.3425603050097258, 0.14854663212749197, 0.3005320475645896, 0.14484354404003608, 0.36604038037376485, 0.34375108112503083, 0.329944159291787, 0.9483786470210069, 0.9843366645699758, 0.9603827552092824, 0.9579182084784158, 0.9834619891506718, 0.9895037167238473, 0.9795586861714827, 0.9547427944135323, 0.9558320026671588, 0.47621256019163516, 0.4345653071153549, 0.5132489686010184, 0.47162256144080217, 0.46052523523850164, 0.5193064872474047, 0.41966514130620236, 0.4273308551705396, 0.43657442919350853, 0.6157130852315483, 0.6977530427680569, 0.7111538610904466, 0.6264086979079515, 0.6292675695710621, 0.8099345405614522, 0.6353428158141576, 0.66953588476037, 0.7626482241528546, 0.2076153858752251, 0.17757257752416766, 0.17732701589238353, 0.19666360048131926, 0.19038931230357892, 0.19938943795655462, 0.17244991968667256, 0.19756478229251695, 0.20749637114842434, 0.12286450341079236, 0.009992718363629138, 0.1668430629959834, 0.178966920593023, 0.14468383045047417, 0.1685344848423398, 0.21937512343986032, 0.20102239146770784, 0.21101622129440634, 0.09270984906900681, 0.06726955225352327, 0.07476921046736684, 0.05322315062080796, 0.03720957304954664, 0.07230207691625745, 0.05792164570454805, 0.04191769432281467, 0.06113678090452157, 0.24763022417856484, 0.1754783677975913, 0.26290538167790445, 0.19651865620888287, 0.1746632573942748, 0.1728370220155504, 0.2604246564221847, 0.2605970511022434, 0.2436885379833097, 0.036195507425765605, 0.018571535014507923, 0.0037272976972956284, 0.021772745327952037, 0.01510138040188036, 0.02312304331644377, 0.03800811571256313, 0.07741549600796038, 0.02080506819769201, 0.15383755106526564, 0.1713100041544352, 0.16910232819386561, 0.1948100511722587, 0.17442557735789, 0.177902449003423, 0.14958334634091552, 0.16004470588817998, 0.15802193434983836, 0.4948193083630694, 0.5023210148305283, 0.5119039025213197, 0.50859951943733, 0.47592593324433696, 0.500975205458832, 0.5051801061541397, 0.48301915395517403, 0.48782883244482933, 0.09894424605461649, 0.10008106975496867, 0.09240241129872595, 0.11358072469601954, 0.10521587642043073, 0.10866960170758633, 0.0874186591461994, 0.09774168906877434, 0.08980451994576766, 0.15019316612674827, 0.1448556317837476, 0.15186595732305652, 0.16595924689877428, 0.14965259684405496, 0.16078288731033097, 0.1576225818025323, 0.15213713103482096, 0.1384163942023281, 0.33169456555142984, 0.35034260713918297, 0.3266802249597095, 0.3702585883991286, 0.3477018613578995, 0.35357659636470706, 0.3862099284785041, 0.4009938593668221, 0.3822828632769545, 0.21827654563557708, 0.21278806392896776, 0.2361909647190461, 0.19441683093557294, 0.22786960459020156, 0.25139876068684064, 0.2577073013841157, 0.2662960757022319, 0.2600247645570748, 0.19093015054036577, 0.20658004675412156, 0.205387067416252, 0.1837123886939367, 0.2027689616735292, 0.18237746759706475, 0.20304346651202254, 0.18871580638474506, 0.18477616635074723, 0.3007713942570198, 0.19409419711755826, 0.2310261658518079, 0.2097370947497209, 0.2245649660334259, 0.32102152441607446, 0.23665051921848368, 0.2232553328109258, 0.3415466144348598, 0.1633600744057334, 0.7422517369603536, 0.6749252795117303, 0.1863345450674173, 0.18272231693794938, 0.18850738961529445, 0.18304108211263892, 0.19246444705691657, 0.3165451376589018, 0.20285700844553134, 0.16468756528190098, 0.38317067842484953, 0.20452325016648876, 0.3679507648221386, 0.4573863849791956, 0.20818281668989802, 0.6502485193051841, 0.2105435652085783, 0.19437058255303974, 0.1793572713271775, 0.19980150175974054, 0.19543099882582415, 0.18103180538649233, 0.19783565148777793, 0.1873144592181366, 0.18408656972874382, 0.17746913547203458, 0.08589300376461106, 0.08719475474720406, 0.07520179771051883, 0.07392041118510784, 0.07910892474926845, 0.0775069793602643, 0.07997212446336321, 0.08332119608505095, 0.07672688011483919]}, "mutation_prompt": null}
{"id": "a7a8102e-b4f1-49d1-b7ee-0321e600b45c", "solution": "import numpy as np\n\nclass ImprovedHybridDE_SA_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 24  # Slightly larger population\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.6  # Increased base Mutation factor\n        CR = 0.85  # Slightly reduced Crossover rate\n        temp = 1.2  # Higher initial temperature\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Adaptive Mutation factor based on fitness rank\n                rank = np.argsort(self.fitness)\n                F = F_base + (0.7 - F_base) * (rank[i] / self.pop_size)\n\n                # Dynamic Crossover Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection and Acceptance\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Enhanced Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / (temp + 1e-10)):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Enhanced Adaptive temperature reduction\n            temp *= 0.95\n            self.population = new_population\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ImprovedHybridDE_SA_V2", "description": "A novel hybrid Differential Evolution and Simulated Annealing algorithm with adaptive mutation, dynamic crossover, and enhanced cooling for improved convergence efficiency.", "configspace": "", "generation": 27, "fitness": 0.41596217100070154, "feedback": "The algorithm ImprovedHybridDE_SA_V2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.25.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.7066514859350915, 0.7075586141523512, 0.7062033946395054, 0.7093559037402488, 0.6995470779696531, 0.7017714314379927, 0.7064768767875561, 0.7090478942114716, 0.704375058477825, 0.6645866879828449, 0.6664135653430447, 0.661566589882307, 0.660595437631418, 0.6602113292267222, 0.6592618799532919, 0.6588718571398227, 0.6707290364026424, 0.6590945920734315, 0.1546899538014599, 0.2547678804836183, 0.14674151450021455, 0.1491777571003713, 0.17766089566494303, 0.49354821054773024, 0.23380887471715373, 0.3654030497427305, 0.13497837050927664, 0.12322836841845897, 0.11284151319366775, 0.13065257132008645, 0.18708466859320505, 0.13158503802347954, 0.10730840573652656, 0.23136369450208583, 0.1262273706572341, 0.10690654790677823, 0.8898675471692242, 0.9690111658366389, 0.8931616889030461, 0.9177519308543866, 0.940235853513697, 0.9639576760294476, 0.9609717693404215, 0.9742045222176671, 0.9440711789587194, 0.6066463657232616, 0.6045210186698309, 0.5920810865195439, 0.5969201728643316, 0.6242050938323482, 0.6055235938961356, 0.608962088679849, 0.08769753277552994, 0.6148760666935451, 0.8533101179529253, 0.7685569807165303, 0.8650209769162607, 0.8396798283431172, 0.8030480328242936, 0.822198418423405, 0.8510887847252019, 0.8486967270936345, 0.828548364861106, 0.560701727515402, 0.524863162666183, 0.5541850231130032, 0.235594261801359, 0.19220503868968686, 0.31274743867462584, 0.22214876434671038, 0.4871862572660405, 0.19661746032103145, 0.21737393808911343, 0.4091698361232995, 0.4076365073182102, 0.38946880215811974, 0.3305246280852824, 0.37965703149244545, 0.19759138392844, 0.32439818687609023, 0.21327629370374146, 0.5028831402857148, 0.5635119833195645, 0.5239661834736284, 0.5462178046303736, 0.5833256146747456, 0.49735385574595115, 0.564762712060943, 0.5674961635056837, 0.5232480565608734, 0.6400683487465229, 0.607814526739513, 0.6040159520271103, 0.607330802400621, 0.6179346763240428, 0.6160427296210029, 0.6449865460951845, 0.6217362685926968, 0.6251283107269854, 0.14206227883157285, 0.26793457665131304, 0.15711619454391546, 0.2704794973452431, 0.3916492928090639, 0.43067061579045884, 0.32451457169304654, 0.2761089626160821, 0.1726206195619865, 0.4132343023454623, 0.4008766652508602, 0.42466099843030025, 0.4414915262935477, 0.43561757014192093, 0.4667167484248109, 0.4275797360244429, 0.45156329942247175, 0.45908163793554935, 0.6709732293966679, 0.6633848533333881, 0.6673142097282438, 0.6706160074079772, 0.6724381703161413, 0.6626613437373321, 0.6674972758906341, 0.6665811811818532, 0.6730312678711263, 0.11209467601861012, 0.09572537139347148, 0.09939741071683383, 0.1153640605388182, 0.11897635688486696, 0.09256316426313627, 0.10877834267745856, 0.10212004501114824, 0.09010329634650516, 0.1554381993164805, 0.16070121461774345, 0.16388292570397256, 0.19828487868587719, 0.18387888487833282, 0.15719647946599302, 0.13040193473164363, 0.19078184765607353, 0.3091546576847828, 0.47692288894131896, 0.49171660881260737, 0.5504718961308457, 0.4760140767714388, 0.5149538922458958, 0.4596708349415708, 0.5551016869620524, 0.5329604087497182, 0.5311337369426203, 0.4010762442877136, 0.3547426054470453, 0.3815071351405652, 0.3918510031248593, 0.36618812036036574, 0.35498073255008256, 0.40260865677274504, 0.4653253070128114, 0.3931998345024311, 0.20324717452347274, 0.18902413534392448, 0.18255504931288835, 0.19456945402109926, 0.17327808923425037, 0.19588228399026097, 0.2041157495836624, 0.21487753229266038, 0.19963362428655895, 0.44505591321573834, 0.5163066105460018, 0.3609822371819681, 0.3331688407953396, 0.23948779216138683, 0.6132892230123465, 0.4406241623516688, 0.2833827973098372, 0.5892740830972244, 0.18362040856201878, 0.7729765301446487, 0.18056081903956378, 0.20027424590909482, 0.2060761807907303, 0.1724030576019986, 0.20562709380401967, 0.3371442023642076, 0.7391779091925919, 0.20542713346045538, 0.20215176483383734, 0.15164771349467887, 0.1653493950906808, 0.7491606494642606, 0.5703346579971809, 0.19960911621878275, 0.20896224179045275, 0.2072627127310731, 0.1753553063024148, 0.18542869990752775, 0.1961854403122023, 0.1671006266678462, 0.19803402395028558, 0.1766612644559047, 0.18378611926918853, 0.18454641991462772, 0.182567981910001, 0.07146811643177187, 0.08299228218368171, 0.08350925996858782, 0.07815859838070394, 0.08381705576485343, 0.08995596337459588, 0.08991898380023977, 0.08407402032156419, 0.07572473878082853]}, "mutation_prompt": null}
{"id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "solution": "import numpy as np\n\nclass ImprovedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 25  # Slightly increased population size for diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.6  # Increased base mutation factor for more exploration\n        CR_min = 0.7  # Lower minimum crossover rate to balance exploration\n        CR_max = 0.95  # Higher maximum crossover rate for exploitation\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Crossover rate based on iteration\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F_base * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.95\n            self.population = new_population\n\n        # Return the best-found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ImprovedHybridDE_SA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm with adaptive mutation and dynamic cooling for improved exploration and exploitation.", "configspace": "", "generation": 28, "fitness": 0.42969393824935226, "feedback": "The algorithm ImprovedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "075696d5-7064-4d07-868e-906ea99091dd", "metadata": {"aucs": [0.6991722847808628, 0.7027990875644266, 0.7016402971732478, 0.7062951995722488, 0.7080683337783584, 0.7056923830427864, 0.7071298594353992, 0.6977613606959989, 0.7081908883491232, 0.6663300762486826, 0.6681638705657179, 0.6707093715426051, 0.653305918941923, 0.6573810760196465, 0.6527597424247538, 0.6658594796670745, 0.6685543199331083, 0.6531145696008539, 0.12655519415215566, 0.12675662166571788, 0.3055005157198186, 0.25463228904774415, 0.37581048002976847, 0.26273051493572774, 0.15680705109468795, 0.3531318608026284, 0.31983954241333157, 0.1379471618693009, 0.12482952592490038, 0.13266963721957004, 0.10837110366383862, 0.21739448325379518, 0.11959328811111336, 0.13689145311069295, 0.14649500921378455, 0.13049349915911246, 0.8408043719152789, 0.9355587689257877, 0.9495627041821018, 0.7523785630313089, 0.9448552602366423, 0.9574044130646289, 0.958258302807554, 0.9484154155669721, 0.8912295238567107, 0.6189343211105703, 0.5992095578763657, 0.5882500759564306, 0.6089243977343262, 0.5987971869741893, 0.5967192197732438, 0.08810223715888932, 0.5985692764964993, 0.5961191216839539, 0.8365646472852588, 0.8596973463213649, 0.8590775922300247, 0.8759752598904063, 0.8334143437913734, 0.8804550215146085, 0.8559042749556846, 0.8542416976475727, 0.848094401881854, 0.19625006077995266, 0.5161646979108919, 0.1980510122884923, 0.16205579893167887, 0.15702099352652954, 0.4706744778014872, 0.20149940140365818, 0.22829763027261984, 0.4561974117304408, 0.15991002785323305, 0.13404905724182992, 0.19226697892205324, 0.24701270126765884, 0.5924649117365032, 0.37125725840735935, 0.1926682537090535, 0.6167951389028756, 0.19746709667710705, 0.5984817861838327, 0.600599239282839, 0.5976296173314442, 0.6046344572887175, 0.6176754542370879, 0.5426009003270623, 0.6045977072049609, 0.5723045327821148, 0.5821664201745909, 0.653687328341343, 0.6502904485053591, 0.6496964795724942, 0.6508710506191885, 0.650698208797286, 0.6533819619171238, 0.6612081731508043, 0.6295895056558936, 0.6363197072796084, 0.1117259776834848, 0.07779705867652031, 0.15817166612735434, 0.29294238111525517, 0.4137952019732941, 0.5346951292626843, 0.16671573295431086, 0.16043006981072316, 0.18663746366834866, 0.45512964461598526, 0.4616285801510619, 0.43815882913404147, 0.511377968773068, 0.5226033396578982, 0.49450699403002507, 0.4543011671883468, 0.4410202361063619, 0.49000063758835566, 0.6664319112972577, 0.6698695205614604, 0.6576843515921502, 0.6602777951409997, 0.6720208547218127, 0.6662937879397427, 0.6509166805941593, 0.6498412714057483, 0.6630909715950859, 0.10971650791071863, 0.15732289063586447, 0.12758026941658807, 0.12793702191221124, 0.11674143916742463, 0.09626358551417957, 0.1040711157955373, 0.129010917465047, 0.11178049596225814, 0.15197355035047166, 0.17246252501413406, 0.1509237076854013, 0.21735168960188234, 0.17069352223647982, 0.3411907801455132, 0.2449966461840395, 0.17979758549231106, 0.2136467982509963, 0.5784904456324, 0.5626106348090265, 0.5264091515009415, 0.52253324289474, 0.5158802317627196, 0.5045636893614719, 0.5747710775373889, 0.5313247574590046, 0.5819848874382102, 0.3728773586345093, 0.37237676269398357, 0.38434010846223765, 0.36589533907314375, 0.4311830864432624, 0.38406864080161407, 0.4356817265056496, 0.423495991781185, 0.4234037089766889, 0.21947763084033534, 0.21215413870612054, 0.20240431328042618, 0.18414147956579285, 0.1992628865420939, 0.18511972912141217, 0.19128752019941875, 0.20757151898075732, 0.209013070704277, 0.4795375380520608, 0.6388496126683187, 0.2716089581242803, 0.2307466329020439, 0.6017870209988481, 0.536386386747354, 0.5496827986720159, 0.5149008001168955, 0.634431080724414, 0.7739719542646079, 0.16475031975886956, 0.16410382812612534, 0.16618959689337354, 0.1640764204303261, 0.20532049226024374, 0.7367954130386716, 0.7567009650783184, 0.1661858783488468, 0.19892086389676278, 0.2031761404850515, 0.16449562989268818, 0.7818841406860964, 0.72774406484754, 0.2074571297850305, 0.7467753019247101, 0.7904956309993887, 0.2092947983124983, 0.19308953906517234, 0.18735411949540226, 0.20998880735693382, 0.16787104828978539, 0.1852902478601901, 0.16320402620565888, 0.20503292910993243, 0.18478777819199488, 0.19923042458937357, 0.08678117441326394, 0.0788128403415631, 0.08525636489698696, 0.08295578393900027, 0.0765124796120179, 0.08533627816449119, 0.07668043904891653, 0.0776107936588396, 0.0765462451604968]}, "mutation_prompt": null}
{"id": "439a23cd-3910-449b-b351-c1f061f3fd6f", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Increased population size for better diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.7  # Enhanced base mutation factor for deeper exploration\n        CR_min = 0.65  # Adjusted minimum crossover rate to improve balance\n        CR_max = 0.9  # Refined maximum crossover rate to focus exploitation\n        temp = 1.2  # Higher initial temperature for broader acceptance in SA\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F_base * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.9  # Faster cooling for rapid convergence\n            self.population = new_population\n\n        # Return the best-found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid DE and SA algorithm using adaptive mutation, dynamic cooling, and diversity control for efficient global search.", "configspace": "", "generation": 29, "fitness": 0.3634076344433598, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "metadata": {"aucs": [0.7832092796872335, 0.7774647294416304, 0.7843226731688445, 0.7902122011717623, 0.7788348813134484, 0.7789283024751168, 0.779504481703981, 0.7937747801836267, 0.7879769372242429, 0.6718927432041224, 0.6693962432592262, 0.6689697338881191, 0.6590120711878129, 0.6813334687981883, 0.6866787481809099, 0.6789547016972708, 0.6662284683057584, 0.662042305811054, 0.14990310455224976, 0.12595798052634022, 0.12610522939259372, 0.1461257587625251, 0.1448401511052101, 0.22805964429313685, 0.14066527735285705, 0.18874993627510384, 0.10860161694875292, 0.23139265098852624, 0.12026967392897114, 0.1229987199834972, 0.1073579064361867, 0.13063301920929082, 0.10521699534350504, 0.1063335987864833, 0.1164956384199397, 0.11398873158970835, 0.975017336282507, 0.92719779195283, 0.9371968765909522, 0.9737578554031708, 0.8816578694205001, 0.9406424443467626, 0.9782129551114283, 0.9085063765250145, 0.9600812615980252, 0.48320671075171717, 0.5013006027716447, 0.4741226622228061, 0.4734871308649721, 0.4699513850939018, 0.4960587206647039, 0.535596656734781, 0.4953150756750321, 0.4995013693444289, 0.731248202991059, 0.7633089061343086, 0.7205309228314243, 0.7729935924297792, 0.7753654401007481, 0.8085665603706808, 0.7767563932653148, 0.7986454087458346, 0.7505703714586862, 0.23866989411677686, 0.2835846486542535, 0.3469362895309095, 0.3423086980206945, 0.3289823297154284, 0.267202072618437, 0.27476666934971017, 0.3146277906326004, 0.27490706668013665, 0.20517153834636792, 0.14493400208090002, 0.3830293549134516, 0.3891086598964112, 0.39787625697414164, 0.25991867766004095, 0.27233874434758254, 0.21075938491680368, 0.23550689826819027, 0.27605337024193743, 0.23410778883977224, 0.2844343417498365, 0.25837602513526015, 0.2619440454383254, 0.2897931598008079, 0.2910912162386853, 0.2903652607061672, 0.2603872241651153, 0.46357927225716544, 0.4336474748350201, 0.4559114278876536, 0.36166526933447074, 0.4012967267975719, 0.4314378904935373, 0.4908763249916359, 0.42429804821081485, 0.46611826546530843, 0.07992359508832303, 0.07518667498901122, 0.05441547803496194, 0.14331182138381515, 0.13806510764639446, 0.12604026458101947, 0.1434342219000253, 0.1104317419672719, 0.16042509243988823, 0.261904802863243, 0.2678258346947755, 0.2425011238817918, 0.26055999185314005, 0.26796290891509467, 0.2838181657207579, 0.24779889182995762, 0.2528160582737924, 0.2552947135992778, 0.6334847801841883, 0.6717397487150019, 0.6753835494659293, 0.6372141478565589, 0.6063897235396547, 0.6297231200434135, 0.6306398403494924, 0.6247474013152204, 0.628908122852176, 0.10468441564627862, 0.0998720097506115, 0.09282263453308315, 0.10377061309808433, 0.10237422775702432, 0.08882282079892045, 0.11188453780017094, 0.09373821719847075, 0.10319427237412582, 0.15368596777594468, 0.2038426220493177, 0.14008326060839338, 0.12886167944994464, 0.18039122419417508, 0.19755245735477833, 0.1918483721030505, 0.16497684148688618, 0.14681554379865414, 0.36658464930897394, 0.3659890205221541, 0.3499774030066204, 0.34618405443807143, 0.37736041082052185, 0.3770817874543799, 0.4288677084954141, 0.372038464531524, 0.4264590500145392, 0.2728413904301631, 0.2696558658961451, 0.27234666882053993, 0.27123019772367074, 0.2719105459813007, 0.28643845165635606, 0.2931627515350024, 0.29761932745657116, 0.25829411601459384, 0.19441006811811712, 0.19318540471678902, 0.20144336569434695, 0.17718378747421903, 0.17953515555494648, 0.18948005073634755, 0.185882053279404, 0.188997300048933, 0.20214057596963564, 0.36233699773892014, 0.2004958520517791, 0.19932343629335414, 0.20599086092623387, 0.32661191161828995, 0.20420646486477156, 0.2341519188532205, 0.18652494842442824, 0.19515457802297986, 0.16334791777992397, 0.7948956322438834, 0.16214491842828194, 0.6814873022560166, 0.18965699111686996, 0.7092369431024135, 0.7909249079245361, 0.6497081138648748, 0.7043278943896634, 0.16564642203065527, 0.767026803297969, 0.16771137132721692, 0.5743453658603956, 0.2025930862940688, 0.6168896569784009, 0.21022692048390168, 0.18949298706228035, 0.2072973987193092, 0.18216068619759684, 0.1852941264943826, 0.1830384208690714, 0.19013366566838386, 0.19630451019621997, 0.17613016209943322, 0.17719423473058227, 0.1812111387502443, 0.16829189852558502, 0.07523901950000911, 0.07608216299391357, 0.08790245294318755, 0.07931317687933137, 0.07705875343505919, 0.06817207092575606, 0.08046599856613279, 0.07334930823481467, 0.07424000974782252]}, "mutation_prompt": null}
{"id": "1d866fce-039d-4e9a-b17c-65c519afbadc", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Further increased population size for enhanced diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.7  # Further increased base mutation factor for aggressive exploration\n        CR_min = 0.6  # Lowered minimum crossover rate for broader exploration\n        CR_max = 0.9  # Slightly reduced maximum crossover rate to allow for diversity\n        temp = 1.5  # Increased initial temperature for broader acceptance in SA\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Crossover rate based on iteration count\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F_base * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction with greater cooling\n            temp *= 0.90\n            self.population = new_population\n\n        # Return the best-found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid DE-SA algorithm with adaptive population size and temperature scaling for balanced exploration and exploitation.", "configspace": "", "generation": 30, "fitness": 0.3568099273630377, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "metadata": {"aucs": [0.7877975652587361, 0.7720901917045482, 0.7819337273392133, 0.787159276647686, 0.7792388060420059, 0.7805101080241628, 0.7849548473819828, 0.7882742644289032, 0.7751715757661011, 0.6812910242450984, 0.6841750014324032, 0.6892682204096868, 0.6568495576989433, 0.6496771640589943, 0.676730854423625, 0.6583760894397892, 0.6564065640146668, 0.6651335231479298, 0.10963436830211304, 0.11088056564273285, 0.16737720865222216, 0.11012785408105652, 0.17153957139026876, 0.232252048839942, 0.10612565809564933, 0.1591351224476646, 0.12071837791348994, 0.13710379771103398, 0.12309521660685385, 0.12436572962206405, 0.13554843978300812, 0.11526531554495378, 0.10363719427434404, 0.12836136368599205, 0.13914200463133453, 0.12235150789047033, 0.9657488601385499, 0.934788365243066, 0.939786913224431, 0.9552310002790291, 0.9361683173221695, 0.9631074957754527, 0.9782129551114283, 0.9030505726411713, 0.900103433032363, 0.5150971766158359, 0.5025286439351415, 0.535771985392092, 0.46494679214656776, 0.493894235070484, 0.4894223735908382, 0.5187596752207222, 0.48850043383253483, 0.4411058738725483, 0.7482685755839373, 0.7352817253881909, 0.761095391950074, 0.7654019695090033, 0.7300013222935521, 0.7738678349987462, 0.7540552870122209, 0.7206878896537627, 0.6709107638014052, 0.3890866297569583, 0.2795300490568563, 0.33860049759998023, 0.30739691218474463, 0.2876620218837782, 0.40740889070820707, 0.32431036878740516, 0.3463404363135627, 0.2411107878716955, 0.2504897078165591, 0.16160440528945097, 0.3735155786148342, 0.3760122780038395, 0.37716280909524547, 0.23858068111789954, 0.2340866424057101, 0.303595118479142, 0.274229689127759, 0.23861858216776433, 0.22073471849225246, 0.24670573922630323, 0.24035784275173455, 0.22417420458475146, 0.24174887507266596, 0.29372968997697624, 0.2557109367441761, 0.19402006110021408, 0.46359538506596853, 0.4048660901299006, 0.384362119865433, 0.3864012094456273, 0.37144307563453516, 0.33048965848550227, 0.428112415453319, 0.4326282539736387, 0.419273791779057, 0.08435358809067417, 0.07164076321047996, 0.11906808854941286, 0.11646229085155702, 0.11776105941616821, 0.11849842339794336, 0.07900187667489011, 0.14660528327632616, 0.12732996259615847, 0.24626665860145236, 0.2308097695197845, 0.2251165001429568, 0.2728109585677073, 0.26173204173788467, 0.2593062478872251, 0.21493060275941178, 0.2231515797506083, 0.22959507774548027, 0.5859943519488398, 0.6514152242179885, 0.6444372438077132, 0.6578992868242983, 0.6097151603254265, 0.6125054501979579, 0.6363292805107416, 0.6180051377854372, 0.5847786671754169, 0.09914433256791799, 0.10817900613773035, 0.10596644441428038, 0.11111594883739107, 0.09966510443434595, 0.09908772671267674, 0.08920360473824063, 0.09443021611371205, 0.09102733709417521, 0.16197120830769796, 0.1391657576511518, 0.14271527299707598, 0.13559176028487896, 0.23382216648683318, 0.11296404972889917, 0.1745340309462221, 0.2457800734154748, 0.25695641132175207, 0.3738957256784764, 0.3536716184233364, 0.37321079899165677, 0.3725846050778988, 0.33384093988068186, 0.3799412772910674, 0.42517369817131234, 0.40144586579832475, 0.4227089119495727, 0.2755959713047885, 0.25105031278583445, 0.2595097490790237, 0.26509707263238647, 0.25963045348875835, 0.266505794239252, 0.28074198273399165, 0.2854769903319606, 0.30117557275174667, 0.18493581533615078, 0.20471467429048618, 0.18834273794165524, 0.190613653857723, 0.18868234233168912, 0.17092324939934678, 0.1947425612685162, 0.20566247935906423, 0.19350935742300213, 0.4540431958635641, 0.18331316966252764, 0.1902251070014921, 0.20341660921996785, 0.2694906443158206, 0.19461499548520544, 0.20062926130409642, 0.42476024941951596, 0.19257304328473723, 0.5077196837628576, 0.8223481645069005, 0.7881937263066132, 0.6272037694822457, 0.16441016484998583, 0.7297946983831379, 0.18288565206907048, 0.679222982500479, 0.18586813490843956, 0.1662076769540497, 0.16458095103329673, 0.6953179782702698, 0.4573853151251477, 0.20298581374819014, 0.1995289909809338, 0.20549816598781412, 0.20585044405312192, 0.2099584183277855, 0.17638159148924282, 0.18961623389005533, 0.18978742073009247, 0.1809341916313525, 0.1879752682305389, 0.18210072398164112, 0.18357643282342073, 0.17051130508075785, 0.19266034273878052, 0.07834775774268965, 0.0808303973175909, 0.08176127831559898, 0.07693625204254206, 0.07520100704146337, 0.07520110599395724, 0.08154294869293244, 0.08408968792569704, 0.08004639508397449]}, "mutation_prompt": null}
{"id": "2593f1b4-8469-4d60-8253-81aec002ba9c", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Increased population size for higher diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.7  # Altered base mutation factor to intensify exploration\n        CR_min = 0.65  # Lowered minimum crossover rate for wider exploration\n        CR_max = 0.9  # Adjusted maximum crossover rate for enhanced exploitation\n        temp = 1.5  # Increased initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Crossover rate based on progress\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F_base * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                acceptance_prob = np.exp((self.fitness[i] - new_fitness) / temp)\n                if new_fitness < self.fitness[i] or np.random.rand() < acceptance_prob:\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction with faster cooling\n            temp *= 0.9\n            self.population = new_population\n\n        # Return the best-found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm with adaptive parameters and dynamic strategies for improved convergence.", "configspace": "", "generation": 31, "fitness": 0.35736914446981394, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "metadata": {"aucs": [0.7786313430600558, 0.7756989139726325, 0.7873584361213167, 0.7852090340843093, 0.7775588498563679, 0.7822464832788154, 0.7814279957579107, 0.7891355416184226, 0.786929613215688, 0.6719471827669737, 0.6619214016701924, 0.6686694732228553, 0.656490822909205, 0.6736568799684091, 0.6941642559211489, 0.6751449501457029, 0.6662488690973027, 0.6546647085108208, 0.12495020881606578, 0.12280272068661724, 0.12610522939259372, 0.1461257587625251, 0.19235614223466768, 0.22805964429313685, 0.25349021726666965, 0.18874993627510384, 0.10860161694875292, 0.23139265098852624, 0.12026967392897114, 0.10372672833979779, 0.1073579064361867, 0.13063301920929082, 0.12048752063166035, 0.1063335987864833, 0.1164956384199397, 0.11398873158970835, 0.9657488601385499, 0.934788365243066, 0.9371968765909522, 0.9552310002790291, 0.9204786924196662, 0.9110249452086541, 0.9782129551114283, 0.9068297543668199, 0.9083273950168962, 0.48320671075171717, 0.5014565812231003, 0.4741226622228061, 0.4734871308649721, 0.4699513850939018, 0.4960587206647039, 0.5063476520716279, 0.4860230518793345, 0.4995013693444289, 0.731248202991059, 0.7633089061343086, 0.7205309228314243, 0.7522236560762972, 0.7651187863017487, 0.8085665603706808, 0.7767563932653148, 0.7771747781307969, 0.7557224916651234, 0.23866989411677686, 0.25593278875290304, 0.3469362895309095, 0.3423086980206945, 0.3289823297154284, 0.267202072618437, 0.27476666934971017, 0.3146277906326004, 0.27490706668013665, 0.20517153834636792, 0.14493400208090002, 0.3830293549134516, 0.3891086598964112, 0.39787625697414164, 0.25991867766004095, 0.27233874434758254, 0.21075938491680368, 0.23550689826819027, 0.27605337024193743, 0.23410778883977224, 0.2844343417498365, 0.25837602513526015, 0.2619440454383254, 0.2897931598008079, 0.2910912162386853, 0.2903652607061672, 0.2603872241651153, 0.46357927225716544, 0.4336474748350201, 0.4559114278876536, 0.36166526933447074, 0.4012967267975719, 0.4314378904935373, 0.4908763249916359, 0.42429804821081485, 0.46611826546530843, 0.07992359508832303, 0.07518667498901122, 0.05441547803496194, 0.14331182138381515, 0.13806510764639446, 0.12604026458101947, 0.1434342219000253, 0.1104317419672719, 0.16042509243988823, 0.261904802863243, 0.2678258346947755, 0.2425011238817918, 0.26055999185314005, 0.26796290891509467, 0.2838181657207579, 0.24779889182995762, 0.2528160582737924, 0.2552947135992778, 0.6127046116651824, 0.662158852161205, 0.6701987467503108, 0.6222494820116451, 0.6178824878504752, 0.6356285670921589, 0.634209169248138, 0.6562918164638143, 0.6242524696307515, 0.10468441564627862, 0.0998720097506115, 0.09282263453308315, 0.10377061309808433, 0.10237422775702432, 0.09155930853894856, 0.11188453780017094, 0.09260757021474941, 0.08836488555168631, 0.14039603326297934, 0.16053384217090405, 0.1990163789454119, 0.14098268314464835, 0.18039122419417508, 0.19755245735477833, 0.1918483721030505, 0.16497684148688618, 0.14681554379865414, 0.36303148580197486, 0.3562016518402846, 0.37323288412487154, 0.35898404363550307, 0.3383765126737054, 0.34771278492878, 0.4288982509193032, 0.42732143150607016, 0.41198565067344417, 0.294254984583888, 0.2624056124856131, 0.269175282659069, 0.2800798058119166, 0.2719105459813007, 0.2902692401833664, 0.3155465196254501, 0.29761932745657116, 0.3081885056416983, 0.17672529652760516, 0.19318540471678902, 0.17708784737823025, 0.1872555074980986, 0.20688942268634825, 0.18809399786577008, 0.18463278232527913, 0.2062427632209427, 0.16890913493767146, 0.269413733231344, 0.18087306447662632, 0.19932343629335414, 0.21225823650034803, 0.32661191161828995, 0.20420646486477156, 0.24065331232699605, 0.18652494842442824, 0.19515457802297986, 0.8036355209057591, 0.7936609405553565, 0.1621449187050661, 0.6801755979143951, 0.1896569909271444, 0.7147375988374991, 0.18301045149776873, 0.6490267069584029, 0.7045935163391859, 0.199437260844753, 0.16512785039641809, 0.20157643337423337, 0.19501179673113833, 0.20224093213819883, 0.19944899470149535, 0.20697729839546486, 0.2068121664775625, 0.2097139264300738, 0.18548399594403064, 0.21601766102886033, 0.2152635541538268, 0.20841209010095896, 0.18872052910147363, 0.17584140484343957, 0.17926918328381658, 0.17366245954021997, 0.18706695323201816, 0.07534473929329111, 0.07943587610674963, 0.0768399920793732, 0.07469979305526053, 0.07705875343505919, 0.08055461241190587, 0.08046599856613279, 0.07334930823481467, 0.07424000974782252]}, "mutation_prompt": null}
{"id": "8429eefa-d64c-42a9-a0d6-ce9c5e36f565", "solution": "import numpy as np\n\nclass ImprovedHybridDE_SA_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Increased population for more diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.7  # Further increased mutation factor for exploration\n        CR_min = 0.65  # Slightly lower crossover rate for initial exploration\n        CR_max = 0.9  # Lowered max crossover rate for balanced exploitation\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Crossover rate based on iteration\n                CR = CR_min + (CR_max - CR_min) * ((self.budget - self.visited_points) / self.budget)\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                F = F_base + np.random.rand() * 0.1  # Randomize mutation factor slightly\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.93  # Faster cooling schedule\n            self.population = new_population\n\n        # Return the best-found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ImprovedHybridDE_SA_Refined", "description": "A refined hybrid Differential Evolution and Simulated Annealing algorithm with stochastic population adaptation for dynamic exploration and exploitation.", "configspace": "", "generation": 32, "fitness": 0.33635562844789696, "feedback": "The algorithm ImprovedHybridDE_SA_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "metadata": {"aucs": [0.7104913917888881, 0.7123843305788242, 0.7141382985752893, 0.721276161416827, 0.7124646816477893, 0.7147931402110652, 0.7159470320401926, 0.7262770540609166, 0.71119119933513, 0.6289866824770515, 0.630786768748432, 0.6110418394224766, 0.6211908455327927, 0.616115481171001, 0.6440932013034069, 0.6090718673532696, 0.6259322573331794, 0.6389385681857023, 0.10732997595419691, 0.10873978931798889, 0.13420275157902561, 0.10650826980705352, 0.11802441360150628, 0.1360025355872766, 0.12613285274977737, 0.13260802419852602, 0.10817985718346224, 0.12019552120811239, 0.14549166746199405, 0.11718522227602612, 0.1391209604286593, 0.10463878509686875, 0.12234841718500733, 0.10393606353018603, 0.12263119212285178, 0.11007025220156375, 0.9930444216577177, 0.942795908384357, 0.9460736206634333, 0.9762854455998548, 0.9798234865233346, 0.9674288462886416, 0.9672358788115313, 0.9203755679745461, 0.9095585013114621, 0.4714628378595208, 0.4186408827838478, 0.4085744783816717, 0.4586834486981979, 0.45163705102051854, 0.4306773356544279, 0.41571203459782413, 0.4295880316921453, 0.4458889480172953, 0.7040919525914755, 0.7019533861349705, 0.6455342472077983, 0.7120417979415781, 0.734422917764403, 0.7528901993121453, 0.7369477824160975, 0.7554949729900808, 0.7353255572205908, 0.3499341826594011, 0.22692163010561894, 0.22538900957391883, 0.2517274613098339, 0.31575138817969606, 0.26506404358586055, 0.31932025934401587, 0.2620296994814968, 0.3108086208405576, 0.2890085685273198, 0.35180034103438396, 0.23117686795102577, 0.30593645980810136, 0.3317086772565421, 0.34999070313352265, 0.23800221912495434, 0.2632953524805304, 0.34432115542183706, 0.21415605268640003, 0.22443656733291506, 0.21336987062702906, 0.23901900116090946, 0.23442023006916202, 0.20539257567830904, 0.26350571833309955, 0.26665846591394204, 0.1993543097316709, 0.38886989536833694, 0.3656789398232507, 0.40593998251486907, 0.37330767761280403, 0.3689487948479746, 0.3627312038881684, 0.4109951983311203, 0.508463988318917, 0.36420787747011996, 0.05328112557186848, 0.046352521121150514, 0.0959847414987538, 0.1156677991184335, 0.11940178844449278, 0.0963126176382253, 0.0750071233211127, 0.08923338623511878, 0.08298189892457963, 0.22824161204861837, 0.2176024381681313, 0.22247005393165942, 0.22545776043648869, 0.23231305118924483, 0.24324201140334067, 0.23506665655172476, 0.21388718107044147, 0.2139728126075653, 0.5825744561604773, 0.5669373963797983, 0.616338090546324, 0.5692005941438427, 0.587490099837191, 0.5611977269723043, 0.5713298584265556, 0.5748159566359637, 0.5754809977038148, 0.09908831391070749, 0.09360794874732326, 0.09611131553935393, 0.11170934223853113, 0.07957256224751585, 0.09861668751970609, 0.0803496717296186, 0.0847891360936186, 0.0989802501426551, 0.18690131462323678, 0.2374669310276225, 0.19784629725183456, 0.29639895583972087, 0.13822320730978244, 0.216836491863987, 0.18049408779486475, 0.17587818832212765, 0.143360291924438, 0.35290133396838863, 0.3491245022953655, 0.34834347389338893, 0.34367563833552506, 0.33356300181100584, 0.3580653723080184, 0.36341249515956797, 0.3929117500665298, 0.3627067009825944, 0.24071664540861137, 0.24777664286861656, 0.2471757757002715, 0.26254636535208686, 0.2618012428153139, 0.22922457831241694, 0.27733223496910886, 0.2601559143132318, 0.2780224688048445, 0.1749364339178936, 0.22373991039558616, 0.17888568771903823, 0.19202577168078827, 0.17490894111678335, 0.19275789284624223, 0.1892427871429201, 0.1922376020477714, 0.19184106476908613, 0.18185253076117114, 0.17753047710389747, 0.18129739940729073, 0.19716153122129132, 0.23220579884149628, 0.3368141074766158, 0.295333624967993, 0.21008420978301767, 0.31899894908972193, 0.15082551277297807, 0.7743740477849478, 0.1678128027272533, 0.7226638158139983, 0.1829589932918938, 0.1805707125788586, 0.17586760120924227, 0.17794119608424785, 0.17944470345912722, 0.1640981073717207, 0.6366924553973445, 0.2031695890211106, 0.1606798878494372, 0.6237934698952663, 0.6410500237224626, 0.7377039439218975, 0.20716447059850873, 0.20400169750611363, 0.19151636257948523, 0.1802326139764171, 0.17538951528380586, 0.18406310576152107, 0.18325796959427965, 0.17862680838528, 0.18177874940237038, 0.17653438932632126, 0.16966954384603872, 0.074588749949273, 0.07572239764105648, 0.07475830967492547, 0.06666253251569265, 0.07129742861814925, 0.0809331603515746, 0.08955013244168675, 0.0680930988983921, 0.07764435592629237]}, "mutation_prompt": null}
{"id": "d96b7961-095b-417e-bf58-058a879ea603", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Further increased population size to enhance diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.65  # Slightly increased base mutation factor for better exploration\n        CR_min = 0.6  # Lowered minimum crossover rate for enhanced exploration\n        CR_max = 0.9  # Adjusted maximum crossover rate to refine exploitation\n        temp = 1.2  # Increased initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Crossover rate based on iteration\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F_base * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.93  # Slightly faster cooling schedule\n            self.population = new_population\n\n        # Return the best-found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid Differential Evolution and Simulated Annealing algorithm with adaptive mutation, dynamic cooling, and a focus on diversity preservation for improved convergence.", "configspace": "", "generation": 33, "fitness": 0.36441182404679606, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.24.", "error": "", "parent_id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "metadata": {"aucs": [0.7262995769111826, 0.728189285423712, 0.7277200726958054, 0.7284831658460899, 0.728303613106662, 0.7324615133453669, 0.7283826213663924, 0.7305270564404143, 0.7302025308019124, 0.6671304514011147, 0.6417639688255256, 0.6600353581345195, 0.6646063508835669, 0.6726841283467235, 0.6622898065781064, 0.6508086750666058, 0.6601286814056329, 0.665276316776523, 0.11977599335408873, 0.11145762806101556, 0.13460780718515253, 0.2577186768590609, 0.25760701273034825, 0.18038158316582376, 0.11820118754306064, 0.13060471054785505, 0.18169186458622422, 0.10649347456377023, 0.10975487701735165, 0.1249885376489911, 0.14081439370325732, 0.12429851025908067, 0.11544004969076505, 0.13449594508471796, 0.10293926430927736, 0.12894946190412016, 0.9261629571009431, 0.9416155919869369, 0.7817899763251175, 0.974767088629163, 0.9312612983977857, 0.9790982834710468, 0.947560415469595, 0.9427577052028038, 0.9585104675424344, 0.556204224975666, 0.5343699395418731, 0.5353382545231186, 0.5308778055194312, 0.5209493931104014, 0.5209361056019652, 0.5118876539458861, 0.5608919026376226, 0.5614557369893685, 0.7567087957423421, 0.7391529406565274, 0.7720324579696125, 0.8147183325659342, 0.8055277166580506, 0.7567657099129388, 0.7965783224614844, 0.7431026053256005, 0.7326733439501705, 0.29287240272158055, 0.2502549187380081, 0.252951031561382, 0.31444843362696606, 0.38567859820998385, 0.30811906672776845, 0.3138692637551611, 0.20622602876536933, 0.26048857313921725, 0.13418743284777135, 0.25294159865225896, 0.21738765569295493, 0.30787547344388067, 0.24117984611920074, 0.20816821316113276, 0.35829240579266675, 0.1701472163419252, 0.20128932919903542, 0.3014030072037629, 0.33379216267424205, 0.31957284573749134, 0.3168038170393468, 0.26949943247463426, 0.34691843652830345, 0.2928994270675126, 0.3066620632558683, 0.2941977638610025, 0.4927776229966726, 0.4850728330876233, 0.44765371888006755, 0.43663207059769205, 0.45496900093755466, 0.42569062526689505, 0.500820544654466, 0.4656221514629577, 0.5065760856599123, 0.116233331880508, 0.1275505230978995, 0.09975806861599523, 0.17608520343777068, 0.17291629245796358, 0.16417699745604608, 0.147672990523517, 0.10621656462660245, 0.07824517382860596, 0.23847997621615546, 0.26737903829073084, 0.25965146019676777, 0.31643534024092124, 0.31627818781770045, 0.30123504973684134, 0.25636846561096216, 0.27647221499855545, 0.29582765693917756, 0.6238959669792417, 0.6155627633777434, 0.6306411896780921, 0.6070783915707381, 0.6087396199251682, 0.5874461861222307, 0.5769329371477744, 0.600372321425458, 0.6243225801352286, 0.10405226794289446, 0.09654250311748913, 0.12421317668673637, 0.1296041743676295, 0.10226239900121492, 0.09987502708300433, 0.09750440858698495, 0.12239358372481368, 0.10497971214115265, 0.1516978722305048, 0.13066854668750694, 0.13768541000569057, 0.14742437658675134, 0.2089879095883903, 0.2177941389010415, 0.2211093198498978, 0.13711255335222106, 0.16072590502355866, 0.41099087356464803, 0.37666271992569234, 0.38060177507203297, 0.4216255445631225, 0.3906074915161395, 0.41924662512441424, 0.4664804225693894, 0.4623711036991255, 0.44039551034199353, 0.28963127782570997, 0.2983341007529591, 0.2762271700902891, 0.2934641722744191, 0.2635538523997939, 0.2796390218937076, 0.28854651058407743, 0.3360841454618315, 0.3172946404816246, 0.18364966072879585, 0.1802939405119669, 0.19551855466218027, 0.1891076787717082, 0.21726974942043975, 0.18557014243071657, 0.19089058876116016, 0.19541113953895717, 0.19330480579546927, 0.2006419324375751, 0.26710085059679833, 0.31649738011384676, 0.22493347418345133, 0.19202161721583877, 0.22964413958087593, 0.25344944001280323, 0.27623667958134834, 0.26541042081956145, 0.166823934574305, 0.7739835085176084, 0.7485024275314791, 0.7570223782892694, 0.12012401927646921, 0.6758024620932138, 0.733344313328805, 0.17830037879900318, 0.17999995251030865, 0.5972200902480185, 0.20766533047202984, 0.20401779701091638, 0.7489462247215821, 0.4622916595215427, 0.18961653210311813, 0.20817577367342688, 0.20839787936491916, 0.21034268379009746, 0.17917157830704433, 0.20203257321975832, 0.1952369454144801, 0.17706019585177313, 0.18889268288857208, 0.17799840481530504, 0.18319392684154023, 0.1811025864111201, 0.18208150462672412, 0.08408341160640198, 0.0776917801961623, 0.07714425218257515, 0.0784348388356888, 0.08338679622343026, 0.0835054658160247, 0.08496830935641153, 0.0765020311082204, 0.0814221583983592]}, "mutation_prompt": null}
{"id": "1e0245e4-88a4-47d4-b39a-48b84b20a284", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Increased population size for enhanced diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.7  # Adjusted base mutation factor for balanced exploration\n        CR_min = 0.6  # Adjusted minimum crossover rate for better exploration\n        CR_max = 0.9  # Adjusted maximum crossover rate for controlled exploitation\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Crossover rate based on iteration\n                CR = CR_min + (CR_max - CR_min) * np.sin(0.5 * np.pi * (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F_base * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.93  # Faster cooling for quicker convergence\n            self.population = new_population\n\n        # Return the best-found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "A refined hybrid Differential Evolution and Simulated Annealing algorithm with adaptive search components for balanced exploration and exploitation.", "configspace": "", "generation": 34, "fitness": 0.3456343934403166, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "metadata": {"aucs": [0.7331189124167072, 0.7272207419034646, 0.7260168051174639, 0.7317588830244726, 0.7337297890990263, 0.7238773872369575, 0.7228114156003871, 0.7227847985568523, 0.732051732445383, 0.6480601824071484, 0.6533838929334252, 0.6262373063307045, 0.634567792578667, 0.6424282168558659, 0.6390308441286383, 0.6604714662712885, 0.6464724263641947, 0.6409188130853026, 0.12703659046817362, 0.13175207819338342, 0.12499586911111915, 0.13363351777449006, 0.10567167127374755, 0.13290128420906933, 0.11423392961610657, 0.11191265904403902, 0.19768084453782808, 0.1508928694935603, 0.14590691315531634, 0.13581331972871125, 0.1228276592520573, 0.12542984498902865, 0.099186178524316, 0.10123321539965369, 0.11911060267697171, 0.1297799343284911, 0.9824985689331084, 0.9534665875976536, 0.9892811861361919, 0.9606327487666114, 0.9664385550066891, 0.9619078034628398, 0.9676063180647413, 0.9667358742099241, 0.9804570901735659, 0.48492859077936723, 0.46808157754831103, 0.47601273908891695, 0.4922215298957523, 0.4533204940001567, 0.47645493165973707, 0.5274017848763795, 0.5002493666707774, 0.4557019522910899, 0.6155078591196059, 0.6469246847037188, 0.6844116945985562, 0.6684282704511335, 0.7503898921518213, 0.6763950354059295, 0.5989245366585231, 0.64161547288705, 0.6940520198891031, 0.3369719665513513, 0.3024932494510745, 0.31164154323197213, 0.38607541891159547, 0.3623369498334752, 0.33377736824140236, 0.3039131155211673, 0.36264865713402117, 0.3751264407550461, 0.28270218135458514, 0.2308270517183244, 0.2928012921918185, 0.3314597274422575, 0.25878280726266245, 0.25887391481265953, 0.33394593136744366, 0.23936174657355958, 0.2828149250163229, 0.17524458298267676, 0.20882725464264895, 0.21003879821321958, 0.21172746690140543, 0.20738476231761838, 0.18823912781869423, 0.2384224015725639, 0.1783224919139209, 0.20592433991874182, 0.41610782988673767, 0.27974001974224894, 0.3461279405167189, 0.35547233926540533, 0.33667509176315524, 0.35224241349474283, 0.3493796400633823, 0.3600539951989995, 0.37346161492055063, 0.12138358537307847, 0.05468629658308222, 0.10600381357481037, 0.11996281937016318, 0.16158825658237785, 0.11609686247815587, 0.0721260326056472, 0.08630715593133942, 0.13158109974194498, 0.21325512755164422, 0.2374488880217024, 0.22921352496906422, 0.27702554306919636, 0.2589063375542108, 0.3039425180800357, 0.2204291344240471, 0.24343270760728775, 0.24032074530470404, 0.651694230582503, 0.6157454268103792, 0.6408865536356025, 0.6358162168741383, 0.6478988349789035, 0.6441155589910836, 0.6169915010609468, 0.6463398966172593, 0.6496355573991219, 0.0859419495858359, 0.08944148533539609, 0.09857099087280508, 0.1054504598532443, 0.10970437253997756, 0.09135034751248317, 0.0854979793592201, 0.09807793453151281, 0.10118832074764872, 0.151166368385115, 0.1342509642457178, 0.16210947007998056, 0.16923867756202604, 0.17282048321634025, 0.13414164106362714, 0.16328342357670123, 0.16405211679379117, 0.14177086977464293, 0.3818080556669652, 0.3575340490568366, 0.3605381235893268, 0.37739866957515056, 0.35662077409646553, 0.3347424462829065, 0.3959059989635858, 0.4032377103022007, 0.38149804113017194, 0.24187747459060815, 0.25734086323014793, 0.26253328862670067, 0.23975934381796826, 0.2460393986405771, 0.2647655564136304, 0.2595735915722126, 0.2893502310120559, 0.2606134321244067, 0.18615206433058773, 0.18974219066158438, 0.19275882304129222, 0.18439217421496334, 0.1871293206148842, 0.19932750739781424, 0.2020266458904627, 0.23468353628669736, 0.19587215587705475, 0.20554553864654246, 0.18596137139600244, 0.18541144203287063, 0.2188047870501343, 0.2447448706213139, 0.23804717040364454, 0.21109016707120964, 0.23494139705501316, 0.19875671724545962, 0.15042730355311973, 0.6046807611582193, 0.15646251594056393, 0.17417106163437435, 0.5790662827084889, 0.1609454999011548, 0.53838584436451, 0.17281296380797084, 0.5381190371596685, 0.621869794765494, 0.19786176029796998, 0.1988402078637348, 0.4992283016738567, 0.18764694463370057, 0.5610562640123006, 0.65830556420721, 0.7408686424429964, 0.6750986337424809, 0.20616528661045763, 0.1830598876048829, 0.21290510610251345, 0.17291248072414056, 0.2170538171624421, 0.1817161307367513, 0.19170360990429203, 0.18635827931974103, 0.17445926700027814, 0.08705372496065322, 0.06596140563617059, 0.07369571524936314, 0.07321646798265269, 0.0736841638804111, 0.07296254629672971, 0.06888316186665855, 0.07016857292519907, 0.0868710142758613]}, "mutation_prompt": null}
{"id": "10088450-269e-4933-a3a0-605bc4b08bc2", "solution": "import numpy as np\n\nclass EnhancedDE_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Increased population size for better diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Adjusted base mutation factor for balance\n        CR_min = 0.5  # Lowered CR_min to enhance exploration in early stages\n        CR_max = 0.9  # Kept CR_max for effective exploitation\n        temp = 1.5  # Initial temperature for more lenient exploration\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * np.sin((self.visited_points / self.budget) * np.pi / 2)\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F_base * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            temp *= 0.93  # Faster cooling schedule for quicker convergence\n            self.population = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedDE_AdaptiveCooling", "description": "Enhanced Differential Evolution with Adaptive Temperature Cooling and Dynamic Parameter Tuning for Superior Black Box Optimization.", "configspace": "", "generation": 35, "fitness": 0.3807669596280288, "feedback": "The algorithm EnhancedDE_AdaptiveCooling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.24.", "error": "", "parent_id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "metadata": {"aucs": [0.7418114715064039, 0.731294201621119, 0.7451194187453483, 0.7421930404854681, 0.7301336881669381, 0.7360655949636641, 0.7350530114084064, 0.7382069444924311, 0.7389324680346311, 0.6832422797102884, 0.6999043137348336, 0.6838171119876453, 0.6886119460801738, 0.6845940410693225, 0.6859742660591159, 0.6877108755571075, 0.6833882282425252, 0.6785537213542525, 0.4211513893680321, 0.5453736018574182, 0.27185713190440275, 0.4826822773411926, 0.290899706421356, 0.5026649428426389, 0.46925448894035315, 0.49253141486214125, 0.21382383983483677, 0.420905356176863, 0.14588562339049682, 0.15867127726880825, 0.15070201785602222, 0.16077712222471496, 0.17948452499006906, 0.178486571836855, 0.15548354939511977, 0.1558752873459165, 0.9273762405708726, 0.977873860211916, 0.9380573113566114, 0.9569937248553717, 0.9574627274863895, 0.9649587886127302, 0.9597362704481073, 0.9627841824976623, 0.9486420907292896, 0.5722428244426557, 0.5766336282553316, 0.6024837344333696, 0.558916295702099, 0.5620472402297152, 0.5966956451591163, 0.4280223111883753, 0.3647588715724671, 0.6106101164314901, 0.7453097998008078, 0.7635010327500293, 0.710326385911485, 0.7496305549723505, 0.7165918155950144, 0.7114751602724458, 0.7435526401602004, 0.7250670207351053, 0.7809407236471354, 0.18083868079192922, 0.16967493100166808, 0.18397303114695762, 0.13339822298609183, 0.18155339678164584, 0.19930755859618143, 0.1891559371762751, 0.22762602489404726, 0.16479532750600667, 0.1874342530798323, 0.1548491601473867, 0.1581821165530577, 0.19451955189305203, 0.1905745730231021, 0.1923396204326665, 0.23577886901088596, 0.16788068979958903, 0.16696167320125022, 0.1980070436902146, 0.3161051955202928, 0.31415112343239937, 0.06894059045285938, 0.3112018066008755, 0.29936114514209644, 0.30495632995778643, 0.3411341736765586, 0.28950939550159516, 0.434149852136713, 0.349277499265202, 0.4667843714941843, 0.43191805391109517, 0.4250135914790286, 0.4104346680014763, 0.4687190692378085, 0.4570139614475016, 0.42270211885675457, 0.19661718812820983, 0.11801499197805476, 0.13185145316365865, 0.13643506113662174, 0.11621094686378852, 0.17209410205856823, 0.16592882829864009, 0.11774143841930795, 0.2125831142959742, 0.2874458954057275, 0.3341593956940859, 0.22754613393361067, 0.32939211285238545, 0.35203452948582303, 0.3454875721054912, 0.34913193813669763, 0.31312777155445093, 0.2903943750959185, 0.6704114438140167, 0.6962572411000343, 0.6938382215907579, 0.6749289816543649, 0.685913933156417, 0.6593175301364205, 0.6771230547098843, 0.685556506410615, 0.6851661141755301, 0.10499521189425087, 0.10153153093156198, 0.11030864847085686, 0.10348155266803916, 0.11232894255553894, 0.13449889047413943, 0.11151017740525548, 0.11800966803467872, 0.11415093500907691, 0.19164559455753993, 0.18172027262642432, 0.13983005498332401, 0.13805678542837063, 0.1602547431090503, 0.19504901292139343, 0.14994722856762177, 0.1425235877278157, 0.1313846837288153, 0.4911671026738078, 0.4507578661514742, 0.47096335145959467, 0.44768324570589013, 0.48954784034771937, 0.5051806930851701, 0.5276340522522149, 0.5703525598352268, 0.5430477477698512, 0.3429387402157321, 0.3601712759734008, 0.3420986470047156, 0.36181966027912504, 0.2969393427423058, 0.29095481084676866, 0.37225561224573633, 0.3876306536956071, 0.37535532637586555, 0.19200939455724586, 0.1959904561969099, 0.21131832839010123, 0.22249770666326818, 0.20301782485142517, 0.20640419310722202, 0.19908567697857849, 0.19237635719807378, 0.17712114384411526, 0.22364711780985536, 0.3911558735069187, 0.2952435334107518, 0.3261021869340247, 0.3436128947376116, 0.18276951028188548, 0.3881319008063069, 0.5839095501848983, 0.5693028325582714, 0.19298984507573747, 0.18472776734077245, 0.19764776302164366, 0.6898762092088333, 0.513018255949145, 0.6805224182913836, 0.16777560555740567, 0.6248686891539929, 0.5808387645587244, 0.6745816480667016, 0.20522874061444063, 0.20409494026069286, 0.45164660868732087, 0.1635300715184259, 0.18759972258459723, 0.20266220544655567, 0.20963379814283378, 0.2023296600491752, 0.2114632088402716, 0.1896066815014017, 0.20265008834760556, 0.1860864898411091, 0.19002026231843228, 0.18809477438631828, 0.19861016113350516, 0.1980228046181024, 0.18434647695931006, 0.07992535329721617, 0.08921931398750549, 0.0784715636340112, 0.09709182909921432, 0.08232273120987388, 0.08589237013846174, 0.08069929805235188, 0.07831021641320224, 0.08309318229034579]}, "mutation_prompt": null}
{"id": "ec5ea2a2-8bdc-46fc-8d7d-ac64e8613eab", "solution": "import numpy as np\n\nclass ImprovedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Slightly increased population size for diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.7  # Increased base mutation factor for more exploration\n        CR_min = 0.6  # Lower minimum crossover rate to balance exploration\n        CR_max = 0.9  # Higher maximum crossover rate for exploitation\n        temp = 1.0  # Initial temperature for Simulated Annealing\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Crossover rate based on iteration\n                CR = CR_min + (CR_max - CR_min) * np.cos(np.pi * self.visited_points / (2 * self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F_base * (b - c + np.random.uniform(-0.1, 0.1, self.dim)), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.9\n            self.population = new_population\n\n        # Return the best-found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ImprovedHybridDE_SA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm with adaptive strategies for mutation, crossover, and temperature to enhance convergence and solution quality.", "configspace": "", "generation": 36, "fitness": 0.25328124346380965, "feedback": "The algorithm ImprovedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "metadata": {"aucs": [0.4902050122082935, 0.5081364711294487, 0.49645775262031056, 0.5113240392931768, 0.5013457052224743, 0.5024539292785372, 0.5216602650597886, 0.550807217998148, 0.5185890615422697, 0.12923476439167336, 0.13417641339195907, 0.14937847369080814, 0.14696272167727797, 0.12135484464139557, 0.1269294740917385, 0.12846552786530807, 0.1442369553809556, 0.11597202855839117, 0.10153815876095906, 0.10423341863063795, 0.11554854509331236, 0.1139145462144594, 0.10832190483754844, 0.11212764266786945, 0.1246398941436726, 0.10777798254995763, 0.12287518786221774, 0.1164286082603585, 0.10600000744735405, 0.09981625993401233, 0.12397600866156278, 0.10057721334391356, 0.10427690710253901, 0.1043451059707059, 0.11267222456225723, 0.09517488277337816, 0.9152574317675207, 0.9941598993209114, 0.9004513072409892, 0.9531898436263304, 0.9215640824645662, 0.9677127947705156, 0.9395357179524926, 0.9239633030725453, 0.9318464616517896, 0.3269593912725055, 0.31305626125876207, 0.31441912677386086, 0.3465957109574006, 0.32646187059357457, 0.3216150645680428, 0.33085255318422313, 0.3105351918738075, 0.3243435008894706, 0.6979280020277441, 0.7467440371056248, 0.7382241477522046, 0.7329333573371559, 0.7306659835302336, 0.6658165510560417, 0.6238751401786495, 0.6552022964623583, 0.7343870120005828, 0.2002385777508936, 0.19365154991653888, 0.18549690141752695, 0.18602492379378066, 0.18666276691256078, 0.1862250467584522, 0.20925404899626043, 0.19083651729673645, 0.19361638794157732, 0.18174836015804097, 0.2525553440110817, 0.11818770171600845, 0.18683177518953376, 0.1864165447742765, 0.22618459799864432, 0.18546641007921516, 0.20051172757209268, 0.18900053379131865, 0.09940418698072029, 0.06452254945744007, 0.06636061084913758, 0.03952475606443118, 0.05559818884372436, 0.08307116263605863, 0.07240401896817861, 0.07649378305624177, 0.07039687492942626, 0.14518693594705256, 0.1330779007133196, 0.13771165291748677, 0.11985179757752196, 0.15973129469766933, 0.14270732040044298, 0.13251369569317573, 0.10698049610297333, 0.12023835903534708, 9.999999999998899e-05, 0.0018446680347519173, 9.999999999998899e-05, 0.0021976340870373257, 0.019379768196835734, 9.999999999998899e-05, 0.00019594770441799803, 9.999999999998899e-05, 0.0013089202142320122, 0.1274747909514734, 0.12708653940542536, 0.14260579330220402, 0.14908389117694665, 0.1243657240216397, 0.12471048906284088, 0.13678167160251764, 0.14154181183262227, 0.13371663282902424, 0.443315098490888, 0.4370599077037074, 0.44953400581740066, 0.4480817294120416, 0.43191066154311253, 0.44244089010692145, 0.44289990401985047, 0.45628361174843346, 0.4528960081520238, 0.09085294313732162, 0.10435255502550644, 0.08902803120683345, 0.09013842700072605, 0.09466855841244037, 0.09093047758740924, 0.09432203789484395, 0.09675529740901823, 0.09190201167121104, 0.14216674216998304, 0.28874002646435826, 0.14423242721545904, 0.16452770515177395, 0.16086684756798209, 0.1389519597299972, 0.17480992994803057, 0.14095837143294043, 0.22561191688400695, 0.3080280721119708, 0.3038367541022018, 0.3154253035355372, 0.3027628813522252, 0.29414976995261477, 0.3107516735127718, 0.3229726764786566, 0.328045238599768, 0.3092045233122538, 0.23903126297513766, 0.24074603230066938, 0.2433784668831579, 0.23895130872084946, 0.24605516112988468, 0.23595348709001507, 0.2389229439614018, 0.2512758582176794, 0.23873044178720237, 0.18664364589149518, 0.17653122455381598, 0.18825704858462222, 0.18214290201087424, 0.18008029111326762, 0.21290461915367676, 0.1748926913024068, 0.18867085158195862, 0.19135627294064517, 0.17765261806868715, 0.19493593547123356, 0.18360696301245394, 0.19017959292796016, 0.2054746823034843, 0.19624026292534813, 0.18868003552912005, 0.1950371507741795, 0.18164785770056435, 0.1898088641188066, 0.6884084371104544, 0.15217646053670797, 0.7061471360364393, 0.18460407616623686, 0.5825995073879238, 0.6345378152209976, 0.1560616975285648, 0.17966332860629608, 0.5727043515834158, 0.16561144263200644, 0.20729318925177287, 0.19735820520234848, 0.20103331714459138, 0.1932375440977453, 0.14868713814012313, 0.16349605343941842, 0.20874674810705052, 0.19394828607536907, 0.17491483203820646, 0.18747082723149489, 0.2010419477599461, 0.19912505199355357, 0.19399976643194483, 0.18614595034325543, 0.19236022363227634, 0.18734792114999732, 0.0732895153352574, 0.07392085280417227, 0.07383764596886666, 0.07278580357478315, 0.09021536575336175, 0.07646968063206061, 0.06896424564763981, 0.07709711126524998, 0.08463288254510537]}, "mutation_prompt": null}
{"id": "371eb58f-5732-491f-9c20-fe6aba9aa205", "solution": "import numpy as np\n\nclass EnhancedDynamicDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Increased population size for greater diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.7  # Slightly increased mutation factor for enhanced exploration\n        CR_min = 0.6  # Adjusted crossover rate to balance exploration\n        CR_max = 0.9  # Modulated maximum crossover rate for exploitation\n        temp = 1.5  # Higher initial temperature for broader acceptance probability\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n                \n                # Dynamic Crossover rate based on iteration\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F_base * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction\n            temp *= 0.9  # More aggressive cooling schedule\n            self.population = new_population\n\n        # Return the best-found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedDynamicDE", "description": "An enhanced Differential Evolution algorithm incorporating dynamic strategy adaptation and adaptive annealing for effective exploration and exploitation.", "configspace": "", "generation": 37, "fitness": 0.3568099273630377, "feedback": "The algorithm EnhancedDynamicDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "metadata": {"aucs": [0.7877975652587361, 0.7720901917045482, 0.7819337273392133, 0.787159276647686, 0.7792388060420059, 0.7805101080241628, 0.7849548473819828, 0.7882742644289032, 0.7751715757661011, 0.6812910242450984, 0.6841750014324032, 0.6892682204096868, 0.6568495576989433, 0.6496771640589943, 0.676730854423625, 0.6583760894397892, 0.6564065640146668, 0.6651335231479298, 0.10963436830211304, 0.11088056564273285, 0.16737720865222216, 0.11012785408105652, 0.17153957139026876, 0.232252048839942, 0.10612565809564933, 0.1591351224476646, 0.12071837791348994, 0.13710379771103398, 0.12309521660685385, 0.12436572962206405, 0.13554843978300812, 0.11526531554495378, 0.10363719427434404, 0.12836136368599205, 0.13914200463133453, 0.12235150789047033, 0.9657488601385499, 0.934788365243066, 0.939786913224431, 0.9552310002790291, 0.9361683173221695, 0.9631074957754527, 0.9782129551114283, 0.9030505726411713, 0.900103433032363, 0.5150971766158359, 0.5025286439351415, 0.535771985392092, 0.46494679214656776, 0.493894235070484, 0.4894223735908382, 0.5187596752207222, 0.48850043383253483, 0.4411058738725483, 0.7482685755839373, 0.7352817253881909, 0.761095391950074, 0.7654019695090033, 0.7300013222935521, 0.7738678349987462, 0.7540552870122209, 0.7206878896537627, 0.6709107638014052, 0.3890866297569583, 0.2795300490568563, 0.33860049759998023, 0.30739691218474463, 0.2876620218837782, 0.40740889070820707, 0.32431036878740516, 0.3463404363135627, 0.2411107878716955, 0.2504897078165591, 0.16160440528945097, 0.3735155786148342, 0.3760122780038395, 0.37716280909524547, 0.23858068111789954, 0.2340866424057101, 0.303595118479142, 0.274229689127759, 0.23861858216776433, 0.22073471849225246, 0.24670573922630323, 0.24035784275173455, 0.22417420458475146, 0.24174887507266596, 0.29372968997697624, 0.2557109367441761, 0.19402006110021408, 0.46359538506596853, 0.4048660901299006, 0.384362119865433, 0.3864012094456273, 0.37144307563453516, 0.33048965848550227, 0.428112415453319, 0.4326282539736387, 0.419273791779057, 0.08435358809067417, 0.07164076321047996, 0.11906808854941286, 0.11646229085155702, 0.11776105941616821, 0.11849842339794336, 0.07900187667489011, 0.14660528327632616, 0.12732996259615847, 0.24626665860145236, 0.2308097695197845, 0.2251165001429568, 0.2728109585677073, 0.26173204173788467, 0.2593062478872251, 0.21493060275941178, 0.2231515797506083, 0.22959507774548027, 0.5859943519488398, 0.6514152242179885, 0.6444372438077132, 0.6578992868242983, 0.6097151603254265, 0.6125054501979579, 0.6363292805107416, 0.6180051377854372, 0.5847786671754169, 0.09914433256791799, 0.10817900613773035, 0.10596644441428038, 0.11111594883739107, 0.09966510443434595, 0.09908772671267674, 0.08920360473824063, 0.09443021611371205, 0.09102733709417521, 0.16197120830769796, 0.1391657576511518, 0.14271527299707598, 0.13559176028487896, 0.23382216648683318, 0.11296404972889917, 0.1745340309462221, 0.2457800734154748, 0.25695641132175207, 0.3738957256784764, 0.3536716184233364, 0.37321079899165677, 0.3725846050778988, 0.33384093988068186, 0.3799412772910674, 0.42517369817131234, 0.40144586579832475, 0.4227089119495727, 0.2755959713047885, 0.25105031278583445, 0.2595097490790237, 0.26509707263238647, 0.25963045348875835, 0.266505794239252, 0.28074198273399165, 0.2854769903319606, 0.30117557275174667, 0.18493581533615078, 0.20471467429048618, 0.18834273794165524, 0.190613653857723, 0.18868234233168912, 0.17092324939934678, 0.1947425612685162, 0.20566247935906423, 0.19350935742300213, 0.4540431958635641, 0.18331316966252764, 0.1902251070014921, 0.20341660921996785, 0.2694906443158206, 0.19461499548520544, 0.20062926130409642, 0.42476024941951596, 0.19257304328473723, 0.5077196837628576, 0.8223481645069005, 0.7881937263066132, 0.6272037694822457, 0.16441016484998583, 0.7297946983831379, 0.18288565206907048, 0.679222982500479, 0.18586813490843956, 0.1662076769540497, 0.16458095103329673, 0.6953179782702698, 0.4573853151251477, 0.20298581374819014, 0.1995289909809338, 0.20549816598781412, 0.20585044405312192, 0.2099584183277855, 0.17638159148924282, 0.18961623389005533, 0.18978742073009247, 0.1809341916313525, 0.1879752682305389, 0.18210072398164112, 0.18357643282342073, 0.17051130508075785, 0.19266034273878052, 0.07834775774268965, 0.0808303973175909, 0.08176127831559898, 0.07693625204254206, 0.07520100704146337, 0.07520110599395724, 0.08154294869293244, 0.08408968792569704, 0.08004639508397449]}, "mutation_prompt": null}
{"id": "c29d5b90-6eba-4b3c-9d3b-bdf5f7eca7ad", "solution": "import numpy as np\n\nclass ImprovedHybridDE_SA_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Increased population size for enhanced diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_base = 0.5  # Slightly reduced mutation factor for balance\n        CR_min = 0.6  # Lower minimum crossover rate for more exploration\n        CR_max = 0.9  # Reduced maximum crossover rate for stability\n        temp = 1.2  # Higher initial temperature for wider search acceptance\n\n        while self.visited_points < self.budget:\n            new_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                # Dynamic Crossover rate based on iteration\n                CR = CR_min + (CR_max - CR_min) * np.cos((self.visited_points / self.budget) * np.pi / 2)\n\n                # Differential Evolution Step\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F_base * (b - c), -5.0, 5.0)\n\n                # Crossover\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                # Selection\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Simulated Annealing acceptance criterion\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            # Adaptive temperature reduction with cosine cooling\n            temp *= 0.9 + 0.1 * np.cos((self.visited_points / self.budget) * np.pi)\n            self.population = new_population\n\n        # Return the best-found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ImprovedHybridDE_SA_Refined", "description": "A refined hybrid Differential Evolution and Simulated Annealing algorithm with adaptive population strategies, enhanced mutation dynamics, and optimized temperature scheduling for robust performance.", "configspace": "", "generation": 38, "fitness": 0.36633047554378234, "feedback": "The algorithm ImprovedHybridDE_SA_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.21.", "error": "", "parent_id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "metadata": {"aucs": [0.6056542165739907, 0.6254515229118649, 0.6176970579585388, 0.6257039427682012, 0.6117811838077668, 0.6166198793595794, 0.6113691765395114, 0.627747443654236, 0.6268768256762245, 0.5794176204563559, 0.5803877171756131, 0.5845142262389217, 0.5874209262181086, 0.579015669567416, 0.5763886082486349, 0.579193870082614, 0.5971532064078546, 0.5966010459428247, 0.15203426651328322, 0.30039749506466285, 0.2641015076196894, 0.166757359721455, 0.15539804895875442, 0.32202016886489204, 0.456493861609897, 0.35657167219203645, 0.2220801559646033, 0.1357445954189569, 0.15120798967799876, 0.1536986278103477, 0.31470002156666566, 0.13737730811181514, 0.123290606857003, 0.14302038067008638, 0.12221497803790826, 0.12607130265280553, 0.8121235589849976, 0.7294146815419791, 0.7376971992178887, 0.9233360206600421, 0.8473254583591436, 0.9464553172365776, 0.8557745703454511, 0.962250617746167, 0.8205677373750836, 0.5219237347567125, 0.4742781358857042, 0.49121048662844036, 0.5126807973500043, 0.4721255672540001, 0.52165779711994, 0.48368588468741236, 0.4844762022416782, 0.44548968466777283, 0.6806435656259702, 0.716568144212075, 0.748191064404279, 0.7525268066083931, 0.7146688647847727, 0.7074424705866685, 0.6907761878328009, 0.7126877760003315, 0.7061587551888818, 0.20284710551535634, 0.19653612505027462, 0.18888874721152427, 0.25124451864287356, 0.3300698903664353, 0.19339185247681667, 0.4102229337364254, 0.5428085196182011, 0.2034218617298098, 0.4924773726615145, 0.48028038455712974, 0.2584389606947518, 0.2561187497294184, 0.21182025773712043, 0.18221660685043084, 0.1577242572555806, 0.17745543888564153, 0.20192731109960615, 0.5075138961509416, 0.4926806649166483, 0.4873420331711119, 0.4683050993536252, 0.5077309014236719, 0.5069921910908889, 0.48848524807838445, 0.15791830131356133, 0.2622548323823297, 0.5189058005801381, 0.5347807473878259, 0.45706150702266024, 0.5099382301826706, 0.5275049494225896, 0.5276227893678018, 0.5345519602334644, 0.5090813532597916, 0.49731241532875714, 0.15515344290876532, 0.2480708953614097, 0.21264783717542057, 0.41597238472669906, 0.24742565681156126, 0.3242007738369166, 0.17048368319464513, 0.21945946726345833, 0.11420715708926399, 0.37702711700446134, 0.3706766807969065, 0.35681404659061955, 0.3871614666285338, 0.4000449496192088, 0.3861280770521708, 0.3560380339357695, 0.36995056650267055, 0.37150354781017214, 0.5547651383634048, 0.5533892597457495, 0.5253651146498279, 0.5226845302912249, 0.5243856354841687, 0.5172582489623252, 0.5273857916218403, 0.5218951193932202, 0.5359720399672349, 0.10728318179797747, 0.09855496063467073, 0.12049214827027899, 0.10031820109732437, 0.10566284545854143, 0.1270480976409455, 0.10429539840438118, 0.10122076707197503, 0.12485894608671355, 0.1518479780175368, 0.14616101918872504, 0.21831853428946657, 0.1574701636612177, 0.185376503386267, 0.1389172296404666, 0.14134417675883815, 0.24339250724484496, 0.16583813110460233, 0.39088916643768257, 0.4067479420737645, 0.43255065684049443, 0.43620063795361264, 0.43099684469107746, 0.4155482744334168, 0.44089432505626014, 0.4481497463302818, 0.438405542494677, 0.3507306685689062, 0.30664440079612754, 0.3495848389153037, 0.35758961566520586, 0.35858250301063666, 0.3666956347611866, 0.371489948498655, 0.3654693523023297, 0.39035601294220446, 0.18885849908659325, 0.19186626176790245, 0.1992620530670809, 0.2033164496783918, 0.1899093784349961, 0.1885212497602814, 0.20112564585039283, 0.21442569280472623, 0.19232212292478668, 0.3598314912574798, 0.20447449379223404, 0.458739721802365, 0.5121888949292822, 0.4237905709581947, 0.31035691909308727, 0.2805110035414139, 0.38138670800757457, 0.2127061065138116, 0.17063011753355606, 0.7187559945531469, 0.6221182401893135, 0.7229160721607913, 0.1716063122776501, 0.1779967836886901, 0.1829395289542629, 0.1696315407867527, 0.12851632132741964, 0.16685402264229665, 0.6918904056182131, 0.1645084984272358, 0.16695515651642456, 0.20837336076873014, 0.19742581321863084, 0.20305905609217023, 0.20810149954962875, 0.20767352602296618, 0.19398369369686708, 0.18902168726939172, 0.17955739648796376, 0.19561953149213118, 0.18945483623853843, 0.21922966988265602, 0.20294924128254277, 0.1809209776849271, 0.19699875178108672, 0.09911955714863285, 0.08369947983234616, 0.07809677111943492, 0.08802683510709719, 0.08636026641829431, 0.08506053786098089, 0.08432613344749207, 0.09175910153387756, 0.08947378256994565]}, "mutation_prompt": null}
{"id": "c2dc5202-d2cf-4f6c-917f-9fa73b7e5156", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30  # Increased initial population size for exploration\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4  # Lower minimum mutation factor for stability\n        F_max = 0.9  # Higher maximum mutation factor for diversity\n        CR_min = 0.6  # Further lowered minimum crossover rate\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            # Dynamically adjust population size based on budget left\n            pop_size = max(4, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)  # Stochastic mutation factor\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            temp *= 0.9\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid DE and Simulated Annealing algorithm with adaptive population size and stochastic mutation factor for better convergence.", "configspace": "", "generation": 39, "fitness": 0.44639832137980623, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.26.", "error": "", "parent_id": "148d52bc-8e9a-4d1a-93b3-beef2597add6", "metadata": {"aucs": [0.8263199590124984, 0.82911885959557, 0.8317234242019537, 0.8363902863113997, 0.8237186240275812, 0.8290908267204689, 0.8303474530272738, 0.8293171077484769, 0.8252940056966989, 0.7393985923286901, 0.7561333077776833, 0.757287758541435, 0.7506341257635526, 0.7413978169099384, 0.7579484499014638, 0.7485280734827828, 0.7653188658900517, 0.73412559228785, 0.5370483444931874, 0.4049133831840178, 0.44937668737960734, 0.4816950751141139, 0.421062689405442, 0.14928839213102962, 0.4744820969187865, 0.5181023629328083, 0.12783320811662213, 0.11774794461617843, 0.1351635349831839, 0.26833662495659505, 0.12380933768920677, 0.1436397586554865, 0.14205556311725487, 0.1311487558325054, 0.39079500040151016, 0.1438570822972064, 0.9445009416337367, 0.8799898987932954, 0.915866165763866, 0.9128323069587136, 0.9299682861330361, 0.9677716751626414, 0.9036073967298981, 0.9477866175551231, 0.898834068542915, 0.6608647664966983, 0.6988449918476968, 0.6546481727577421, 0.6265031940257482, 0.5982467894139881, 0.659656780037882, 0.6380217471778725, 0.6777842376324554, 0.6403791755679127, 0.812189229722287, 0.37311694904997617, 0.833846079726384, 0.8324947142528494, 0.8152370154204283, 0.8384807696089485, 0.8401917874366482, 0.8353303166350117, 0.8158076671120926, 0.17782838927864653, 0.41910171072117286, 0.3937528781480555, 0.24241068143165012, 0.4448314900997391, 0.3545556760836873, 0.22285353156179477, 0.4154243150485788, 0.24071269035625986, 0.169827250256683, 0.2650589935395895, 0.19833921940475085, 0.16421666182551342, 0.2616339150715852, 0.3312796381095058, 0.22238775537704358, 0.6410036548116682, 0.5190912812874506, 0.5440153048222278, 0.5560462415035297, 0.38104603979185914, 0.5862098254225703, 0.5803069102219184, 0.5492599620759759, 0.4787021823014077, 0.5719227006620555, 0.3944411162055157, 0.5085691262889724, 0.6402559914412731, 0.5843051314965326, 0.5516777780635211, 0.6030584584868377, 0.6684608859192639, 0.739929229208149, 0.7400544047020738, 0.7167469723408979, 0.291910302225759, 0.06972655216973067, 0.10849410688631433, 0.2564675168666013, 0.37351165500065464, 0.2105138145718327, 0.21204721368449986, 0.1874556662279857, 0.2636561609453877, 0.40865317733202955, 0.3311269316290807, 0.38024560848849365, 0.4121675600357029, 0.4244584422397636, 0.43324656607209067, 0.34296768507073405, 0.35317494174164366, 0.33994969544914044, 0.7850945121374059, 0.6971813240539422, 0.7875964630581501, 0.7777565494521537, 0.7310607374393323, 0.7575049806395249, 0.7643925516610715, 0.7198056175124345, 0.7875126115294667, 0.12101669459830411, 0.13331909318518143, 0.1262433882035524, 0.11103032771288801, 0.11175481277769195, 0.12510366708162923, 0.10428349740378329, 0.16218648445733774, 0.09455699756762037, 0.14659497583353676, 0.24954584523164647, 0.2397642073450149, 0.15825754595099184, 0.17496185328754255, 0.2900967659594934, 0.16326966547821997, 0.685842174929218, 0.183444221249199, 0.5231825901745588, 0.6368096720072685, 0.6404022236429675, 0.6111299642801546, 0.5834222944888925, 0.6006038417515864, 0.49251959768809106, 0.660879342772648, 0.6087405903152439, 0.40007856507371653, 0.4449621020511261, 0.4197255194043752, 0.406793188706299, 0.4573599990220779, 0.41998754665788574, 0.46540286588681945, 0.45733656388241084, 0.4545462658699345, 0.19775760798939856, 0.19661385106300544, 0.1940871043621466, 0.20065958846677856, 0.19695690981577996, 0.19888913619582482, 0.19614754270520507, 0.19262013695589897, 0.20213171395659402, 0.21608251288969016, 0.35756968341942397, 0.2528010435468532, 0.5617568845376131, 0.19556253918179156, 0.6054369719344609, 0.5502517852710009, 0.5652567082041593, 0.21318540636183703, 0.18289022536485855, 0.16975660351065402, 0.1811077062273001, 0.7288734037508992, 0.18591785016318796, 0.1575879165548959, 0.7593721519417438, 0.17951441730371676, 0.8044805549638383, 0.843370949076239, 0.7589920529023457, 0.8333697853280191, 0.2984832593134742, 0.20255019157451393, 0.34173245447683265, 0.21246488902295912, 0.1637257649653482, 0.21081179958653828, 0.18718493290590854, 0.18074301341966037, 0.1785120538390571, 0.19095672842971556, 0.18754178701679336, 0.20092655196459142, 0.19954179049893028, 0.18565137032917323, 0.18188486259636893, 0.07797746434929431, 0.08393856841311298, 0.08942710405618581, 0.07924853118259834, 0.08525300056010587, 0.07968763185745609, 0.0796859934100228, 0.08486644322937065, 0.08283788503122191]}, "mutation_prompt": null}
{"id": "a5a33f2f-3504-408d-9d02-863895248b0e", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30  # Increased initial population size for exploration\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4  # Lower minimum mutation factor for stability\n        F_max = 0.9  # Higher maximum mutation factor for diversity\n        CR_min = 0.6  # Further lowered minimum crossover rate\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            # Dynamically adjust population size based on budget left\n            pop_size = max(4, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)  # Stochastic mutation factor\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            temp *= 0.9\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid DE and Simulated Annealing algorithm with adaptive population size and stochastic mutation factor for better convergence.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2dc5202-d2cf-4f6c-917f-9fa73b7e5156", "metadata": {"aucs": [0.8263199590124984, 0.82911885959557, 0.8317234242019537, 0.8363902863113997, 0.8237186240275812, 0.8290908267204689, 0.8303474530272738, 0.8293171077484769, 0.8252940056966989, 0.7393985923286901, 0.7561333077776833, 0.757287758541435, 0.7506341257635526, 0.7413978169099384, 0.7579484499014638, 0.7485280734827828, 0.7653188658900517, 0.73412559228785, 0.5370483444931874, 0.4049133831840178, 0.44937668737960734, 0.4816950751141139, 0.421062689405442, 0.14928839213102962, 0.4744820969187865, 0.5181023629328083, 0.12783320811662213, 0.11774794461617843, 0.1351635349831839, 0.26833662495659505, 0.12380933768920677, 0.1436397586554865, 0.14205556311725487, 0.1311487558325054, 0.39079500040151016, 0.1438570822972064, 0.9445009416337367, 0.8799898987932954, 0.915866165763866, 0.9128323069587136, 0.9299682861330361, 0.9677716751626414, 0.9036073967298981, 0.9477866175551231, 0.898834068542915, 0.6608647664966983, 0.6988449918476968, 0.6546481727577421, 0.6265031940257482, 0.5982467894139881, 0.659656780037882, 0.6380217471778725, 0.6777842376324554, 0.6403791755679127, 0.812189229722287, 0.37311694904997617, 0.833846079726384, 0.8324947142528494, 0.8152370154204283, 0.8384807696089485, 0.8401917874366482, 0.8353303166350117, 0.8158076671120926, 0.17782838927864653, 0.41910171072117286, 0.3937528781480555, 0.24241068143165012, 0.4448314900997391, 0.3545556760836873, 0.22285353156179477, 0.4154243150485788, 0.24071269035625986, 0.169827250256683, 0.2650589935395895, 0.19833921940475085, 0.16421666182551342, 0.2616339150715852, 0.3312796381095058, 0.22238775537704358, 0.6410036548116682, 0.5190912812874506, 0.5440153048222278, 0.5560462415035297, 0.38104603979185914, 0.5862098254225703, 0.5803069102219184, 0.5492599620759759, 0.4787021823014077, 0.5719227006620555, 0.3944411162055157, 0.5085691262889724, 0.6402559914412731, 0.5843051314965326, 0.5516777780635211, 0.6030584584868377, 0.6684608859192639, 0.739929229208149, 0.7400544047020738, 0.7167469723408979, 0.291910302225759, 0.06972655216973067, 0.10849410688631433, 0.2564675168666013, 0.37351165500065464, 0.2105138145718327, 0.21204721368449986, 0.1874556662279857, 0.2636561609453877, 0.40865317733202955, 0.3311269316290807, 0.38024560848849365, 0.4121675600357029, 0.4244584422397636, 0.43324656607209067, 0.34296768507073405, 0.35317494174164366, 0.33994969544914044, 0.7850945121374059, 0.6971813240539422, 0.7875964630581501, 0.7777565494521537, 0.7310607374393323, 0.7575049806395249, 0.7643925516610715, 0.7198056175124345, 0.7875126115294667, 0.12101669459830411, 0.13331909318518143, 0.1262433882035524, 0.11103032771288801, 0.11175481277769195, 0.12510366708162923, 0.10428349740378329, 0.16218648445733774, 0.09455699756762037, 0.14659497583353676, 0.24954584523164647, 0.2397642073450149, 0.15825754595099184, 0.17496185328754255, 0.2900967659594934, 0.16326966547821997, 0.685842174929218, 0.183444221249199, 0.5231825901745588, 0.6368096720072685, 0.6404022236429675, 0.6111299642801546, 0.5834222944888925, 0.6006038417515864, 0.49251959768809106, 0.660879342772648, 0.6087405903152439, 0.40007856507371653, 0.4449621020511261, 0.4197255194043752, 0.406793188706299, 0.4573599990220779, 0.41998754665788574, 0.46540286588681945, 0.45733656388241084, 0.4545462658699345, 0.19775760798939856, 0.19661385106300544, 0.1940871043621466, 0.20065958846677856, 0.19695690981577996, 0.19888913619582482, 0.19614754270520507, 0.19262013695589897, 0.20213171395659402, 0.21608251288969016, 0.35756968341942397, 0.2528010435468532, 0.5617568845376131, 0.19556253918179156, 0.6054369719344609, 0.5502517852710009, 0.5652567082041593, 0.21318540636183703, 0.18289022536485855, 0.16975660351065402, 0.1811077062273001, 0.7288734037508992, 0.18591785016318796, 0.1575879165548959, 0.7593721519417438, 0.17951441730371676, 0.8044805549638383, 0.843370949076239, 0.7589920529023457, 0.8333697853280191, 0.2984832593134742, 0.20255019157451393, 0.34173245447683265, 0.21246488902295912, 0.1637257649653482, 0.21081179958653828, 0.18718493290590854, 0.18074301341966037, 0.1785120538390571, 0.19095672842971556, 0.18754178701679336, 0.20092655196459142, 0.19954179049893028, 0.18565137032917323, 0.18188486259636893, 0.07797746434929431, 0.08393856841311298, 0.08942710405618581, 0.07924853118259834, 0.08525300056010587, 0.07968763185745609, 0.0796859934100228, 0.08486644322937065, 0.08283788503122191]}, "mutation_prompt": null}
{"id": "3e81d335-73a4-446d-a355-e65126ab2ee5", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 40  # Increased population for broader exploration\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3  # Lowered minimum mutation factor for more stability\n        F_max = 1.0  # Increased maximum mutation factor for better exploration\n        CR_min = 0.5  # Lowered CR for increased exploration\n        CR_max = 0.9\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            temp *= 0.85  # Enhanced cooling schedule for more effective convergence\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Refined", "description": "A refined hybrid DE and Simulated Annealing algorithm utilizing adaptive control parameters for enhanced exploration and exploitation balance.", "configspace": "", "generation": 41, "fitness": 0.404782251398678, "feedback": "The algorithm EnhancedHybridDE_SA_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "c2dc5202-d2cf-4f6c-917f-9fa73b7e5156", "metadata": {"aucs": [0.8063444267160248, 0.8057782722923302, 0.8156568814960754, 0.8153922036145127, 0.817985925634608, 0.8072158384765011, 0.8019944148679783, 0.8105049844438603, 0.8102001971516741, 0.6951932257753826, 0.6985574475611949, 0.6837094462915083, 0.6672891920453703, 0.6951548328358151, 0.6849174573970433, 0.687277859641965, 0.6801390480013082, 0.7055237628732023, 0.3776442566963023, 0.4315408815426953, 0.42292862385200336, 0.13837618617357061, 0.4101239736788488, 0.43604082266240074, 0.43684035276259914, 0.36437228069762717, 0.3916281046612259, 0.4071726123684317, 0.38757417095267377, 0.3524639067241395, 0.13934450131268128, 0.13285052155127974, 0.3665329359585209, 0.13878266487525048, 0.42960824848935975, 0.361097020781892, 0.963004302750442, 0.9111815867160074, 0.9449779207443214, 0.9555930259859289, 0.9250454295225043, 0.9431314057500186, 0.9584885725098277, 0.9417459079105461, 0.948987657737853, 0.615336515531225, 0.5922787989595594, 0.6136595864731081, 0.6086344976184526, 0.5694114086650581, 0.5652457110832623, 0.6010274082418133, 0.5643608088171407, 0.5854615277095869, 0.781955237183018, 0.7653074283236432, 0.7420969083235418, 0.7559044675280103, 0.7932789521230462, 0.799390667925348, 0.7665938296103076, 0.7833552332880168, 0.7706700777939041, 0.2927763578753235, 0.23569903781003154, 0.3150557949769134, 0.36310115871404236, 0.30098582386652273, 0.4007232959344339, 0.20362126560491067, 0.463067512038585, 0.37211119172187856, 0.050878334383623214, 0.18577104604752215, 0.23723405996746538, 0.2799051296130357, 0.39703982636570034, 0.29039994114887335, 0.5034425741915893, 0.28160682745377963, 0.3121171583307224, 0.33603543203208075, 0.2618794346077873, 0.33223282560923895, 0.22274406807857017, 0.29391128003980216, 0.35008641167752386, 0.31118353296413837, 0.28317132785124155, 0.3301018514420867, 0.4698687398737038, 0.46185079911672533, 0.44464518213521964, 0.44566123588175643, 0.3763186284653678, 0.28281269534197717, 0.5100193073418244, 0.4033828565618298, 0.5543441753756545, 0.21278215329929695, 0.08035732040649435, 0.06762924818840399, 0.09862572565636896, 0.11387376165047536, 0.08312745150091816, 0.14320712114120326, 0.150903500878384, 0.1731354639191528, 0.30065101042294096, 0.25918573620838403, 0.2666078919654977, 0.34569662243276067, 0.3134730989974819, 0.3170011211405893, 0.27335971416719007, 0.28339736378022684, 0.2594777595680151, 0.599652099054688, 0.6600790216983521, 0.6775679879207681, 0.7034838134136112, 0.6253986054635581, 0.6480912073067324, 0.6556441014174569, 0.6476651208706712, 0.6985294093990266, 0.0927108335857254, 0.10580141593579284, 0.11842083831766637, 0.089281022075275, 0.10496723129425023, 0.2206314496760905, 0.09136430371169213, 0.10819525079444958, 0.09178740853871692, 0.14772573107587073, 0.15289769914861895, 0.1844405897132919, 0.25982671855800366, 0.3524667733906225, 0.13265484968981145, 0.12680442921661217, 0.1309728256368995, 0.19125357221691763, 0.4968631434603974, 0.4979949187372691, 0.4543578081474713, 0.4733683549371631, 0.4829027916275388, 0.4843674569572709, 0.5685262613860584, 0.5049265296458018, 0.5524271131603862, 0.2641530545594455, 0.3314150800306792, 0.34834686931060055, 0.3220956166721566, 0.3519859795677215, 0.3344002685043239, 0.36451034926750825, 0.389262007419953, 0.35314924052368335, 0.2147357273915662, 0.1971313656218333, 0.18714900381384192, 0.17904400781065055, 0.19384281523668767, 0.19257005710929653, 0.20957771542933823, 0.18970816215942754, 0.1897353468034445, 0.5166882908275203, 0.46641596948727626, 0.45662463068320114, 0.38583455667658506, 0.5187901372060472, 0.3989686351349464, 0.5103496980477498, 0.4450438580296675, 0.5334992345443681, 0.1788921268725, 0.16946511985490664, 0.1789011276079877, 0.7515801601154118, 0.7358301402531001, 0.18492301887520812, 0.7994761662943838, 0.6396970136652245, 0.7826828690275699, 0.16352595740429277, 0.20482913591358443, 0.20284259372130342, 0.19215876193807957, 0.16306860916536026, 0.6074726035326532, 0.2075302992705892, 0.20730027053024858, 0.21106705247565138, 0.18164706162671107, 0.18159815483806274, 0.18335636951047085, 0.19058135517750052, 0.18706364971063705, 0.1947883058771268, 0.17511923862280332, 0.1754428899692997, 0.18666453981797737, 0.07813265483651466, 0.089394265986941, 0.08624151987658224, 0.08053754591869278, 0.08605769806583863, 0.08199465099517278, 0.0786848899476763, 0.08318825751746572, 0.07399331880225979]}, "mutation_prompt": null}
{"id": "86ec8c7e-86a8-4b64-b7b0-8a640fbc171f", "solution": "import numpy as np\n\nclass EnhancedDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.2  # Adjusted minimum mutation factor for broader exploration\n        F_max = 0.8  # Adjusted maximum mutation factor for balanced diversity\n        CR_min = 0.5  # Adjusted minimum crossover rate\n        CR_max = 0.9  # Adjusted maximum crossover rate\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(4, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * np.random.rand()  # Randomized crossover rate within range\n                F = F_min + np.random.rand() * (F_max - F_min)  # Stochastic mutation factor\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            temp *= 0.95  # Slower temperature decrease for prolonged exploration\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedDE_SA", "description": "EnhancedDE_SA with adaptive temperature control and dynamic mutation strategy for diverse exploration and exploitation.", "configspace": "", "generation": 42, "fitness": 0.39416537423166836, "feedback": "The algorithm EnhancedDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "c2dc5202-d2cf-4f6c-917f-9fa73b7e5156", "metadata": {"aucs": [0.7461562374951827, 0.7489329609843551, 0.7494970747719487, 0.7461353419135944, 0.7475633307910099, 0.7473566222425557, 0.7448405875485432, 0.7431532387418118, 0.7439290772372582, 0.7089421396033637, 0.7168369886234975, 0.7163796149043645, 0.7051865694607706, 0.70018836652441, 0.7028319246115364, 0.7041169699960231, 0.6982322008088897, 0.705569823213638, 0.5119166701797178, 0.6037232577472222, 0.1650838080802196, 0.617190804140473, 0.5072736194842007, 0.6309414052818443, 0.1741827256046219, 0.5209082735245538, 0.585387738241744, 0.14192266128978026, 0.16606742973253064, 0.16886543983517555, 0.14326955724103885, 0.13599330133944443, 0.17000307159313366, 0.16472462207327643, 0.5627017429077552, 0.16930291332256786, 0.9626782732843472, 0.9769525248218851, 0.8260335646947186, 0.9558377506773785, 0.933760590615899, 0.8203009809274426, 0.9551014194641961, 0.95566849468446, 0.9666827856998997, 0.4215299702782892, 0.6311163824863697, 0.6218015443685705, 0.5681784896928186, 0.6550113449639057, 0.19053036797458167, 0.46066248772407625, 0.36189738596023, 0.5330877414716696, 0.7482235975619871, 0.7977627153133907, 0.808874606439911, 0.839878392998481, 0.8269825181750772, 0.811971846964696, 0.8090182921664942, 0.824464104359067, 0.8246469261338201, 0.2949039467246537, 0.1812499025860026, 0.17275444770313064, 0.2084168114790571, 0.16423766438192433, 0.18608399034758538, 0.18184018868515994, 0.27608399176606635, 0.16513127391824511, 0.18328487018793116, 0.21912644889824096, 0.16851597492876258, 0.1776614504274554, 0.18776962856971702, 0.19913558318539382, 0.1870293781617759, 0.17749426369243826, 0.22925998810555048, 0.18142112112457287, 0.1545378482768689, 0.2776883627168286, 0.16500876844869583, 0.04879741340843191, 0.12242986919291166, 0.24099881262568879, 0.28910102457039555, 0.3156054573538578, 0.30271030797861953, 0.24820400853284674, 0.521656062790558, 0.3197747577208887, 0.13140436805618283, 0.18370041402819992, 0.514650837474649, 0.370500198261959, 0.4029805096338537, 0.12060209369319763, 0.12548230086515777, 0.2264214286505588, 0.1681045967826016, 0.09887922648398384, 0.12834310335423083, 0.29378528342786814, 0.09071780096964466, 0.1108258139506283, 0.4215288411098208, 0.2208556434152179, 0.3541927825555501, 0.22310966385337916, 0.33158565586592514, 0.3867369123556289, 0.3428179258143663, 0.3158333027465453, 0.2638798910964987, 0.6499791254367214, 0.5655913281187126, 0.6699116425698469, 0.5476173267190059, 0.649508164032354, 0.5211103027846833, 0.6165326284137842, 0.5303924827392483, 0.5995817924111546, 0.14031671594012374, 0.12297312331530919, 0.13133273263863754, 0.11213742522566406, 0.12427862530610068, 0.13609990886890755, 0.13857506126637031, 0.12669365202830518, 0.126590263151794, 0.24127559574007396, 0.16774400858285732, 0.19765087981803997, 0.1518252210081148, 0.13820787680705093, 0.1413730525037179, 0.16060576556950323, 0.1658565642686639, 0.1716546828468023, 0.5637377674164459, 0.642252338277443, 0.6488805564760929, 0.5558243691623372, 0.5722279713629712, 0.657815436646247, 0.6675711329237368, 0.5812558201815352, 0.668480711776151, 0.37466785273066106, 0.3567961954615574, 0.4045039860131806, 0.4181140132048461, 0.3626826012541431, 0.42474121007285226, 0.5016643482995166, 0.44528055636047825, 0.41056327162397, 0.18235494613555614, 0.20923825634688176, 0.2076541002176696, 0.1894912589580766, 0.20549106205708412, 0.20178395464137033, 0.22362643944401595, 0.1894641293050221, 0.20792321818648551, 0.3982385493031616, 0.21151854694370875, 0.6692076145508112, 0.6428435868604698, 0.2148904744630289, 0.6092881495590498, 0.23358443127135897, 0.21541343505096422, 0.22924439334191637, 0.18402874859988638, 0.783683130070973, 0.8070500450631658, 0.16483883453148906, 0.18530886035229455, 0.7608087423006004, 0.7917534573924689, 0.7775432194997558, 0.7913669910157803, 0.20533752966042207, 0.20527224723828497, 0.6795748294595318, 0.2526197320728115, 0.19722091922813723, 0.3566425935666706, 0.7305481404530649, 0.21012612210631487, 0.21107270512344056, 0.17786597856281938, 0.19108985169847015, 0.18050710507207246, 0.17653493297750011, 0.17261791366619672, 0.1861649233534025, 0.19465493394837663, 0.19055081996559942, 0.18440353292769718, 0.0795857566573448, 0.08133841672715603, 0.08503102074580349, 0.08964720554769612, 0.09202930896119765, 0.08271062243422533, 0.0808311794454869, 0.08159373813732362, 0.09521868755293705]}, "mutation_prompt": null}
{"id": "1c58ed3c-d7b2-42a4-bd33-fcf6cf19e8e9", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30  # Increased initial population size for exploration\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4  # Lower minimum mutation factor for stability\n        F_max = 0.9  # Higher maximum mutation factor for diversity\n        CR_min = 0.6  # Further lowered minimum crossover rate\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            # Dynamically adjust population size based on budget left\n            pop_size = max(4, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)  # Stochastic mutation factor\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            temp *= 0.9\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid DE and Simulated Annealing algorithm with adaptive population size and stochastic mutation factor for better convergence.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2dc5202-d2cf-4f6c-917f-9fa73b7e5156", "metadata": {"aucs": [0.8263199590124984, 0.82911885959557, 0.8317234242019537, 0.8363902863113997, 0.8237186240275812, 0.8290908267204689, 0.8303474530272738, 0.8293171077484769, 0.8252940056966989, 0.7393985923286901, 0.7561333077776833, 0.757287758541435, 0.7506341257635526, 0.7413978169099384, 0.7579484499014638, 0.7485280734827828, 0.7653188658900517, 0.73412559228785, 0.5370483444931874, 0.4049133831840178, 0.44937668737960734, 0.4816950751141139, 0.421062689405442, 0.14928839213102962, 0.4744820969187865, 0.5181023629328083, 0.12783320811662213, 0.11774794461617843, 0.1351635349831839, 0.26833662495659505, 0.12380933768920677, 0.1436397586554865, 0.14205556311725487, 0.1311487558325054, 0.39079500040151016, 0.1438570822972064, 0.9445009416337367, 0.8799898987932954, 0.915866165763866, 0.9128323069587136, 0.9299682861330361, 0.9677716751626414, 0.9036073967298981, 0.9477866175551231, 0.898834068542915, 0.6608647664966983, 0.6988449918476968, 0.6546481727577421, 0.6265031940257482, 0.5982467894139881, 0.659656780037882, 0.6380217471778725, 0.6777842376324554, 0.6403791755679127, 0.812189229722287, 0.37311694904997617, 0.833846079726384, 0.8324947142528494, 0.8152370154204283, 0.8384807696089485, 0.8401917874366482, 0.8353303166350117, 0.8158076671120926, 0.17782838927864653, 0.41910171072117286, 0.3937528781480555, 0.24241068143165012, 0.4448314900997391, 0.3545556760836873, 0.22285353156179477, 0.4154243150485788, 0.24071269035625986, 0.169827250256683, 0.2650589935395895, 0.19833921940475085, 0.16421666182551342, 0.2616339150715852, 0.3312796381095058, 0.22238775537704358, 0.6410036548116682, 0.5190912812874506, 0.5440153048222278, 0.5560462415035297, 0.38104603979185914, 0.5862098254225703, 0.5803069102219184, 0.5492599620759759, 0.4787021823014077, 0.5719227006620555, 0.3944411162055157, 0.5085691262889724, 0.6402559914412731, 0.5843051314965326, 0.5516777780635211, 0.6030584584868377, 0.6684608859192639, 0.739929229208149, 0.7400544047020738, 0.7167469723408979, 0.291910302225759, 0.06972655216973067, 0.10849410688631433, 0.2564675168666013, 0.37351165500065464, 0.2105138145718327, 0.21204721368449986, 0.1874556662279857, 0.2636561609453877, 0.40865317733202955, 0.3311269316290807, 0.38024560848849365, 0.4121675600357029, 0.4244584422397636, 0.43324656607209067, 0.34296768507073405, 0.35317494174164366, 0.33994969544914044, 0.7850945121374059, 0.6971813240539422, 0.7875964630581501, 0.7777565494521537, 0.7310607374393323, 0.7575049806395249, 0.7643925516610715, 0.7198056175124345, 0.7875126115294667, 0.12101669459830411, 0.13331909318518143, 0.1262433882035524, 0.11103032771288801, 0.11175481277769195, 0.12510366708162923, 0.10428349740378329, 0.16218648445733774, 0.09455699756762037, 0.14659497583353676, 0.24954584523164647, 0.2397642073450149, 0.15825754595099184, 0.17496185328754255, 0.2900967659594934, 0.16326966547821997, 0.685842174929218, 0.183444221249199, 0.5231825901745588, 0.6368096720072685, 0.6404022236429675, 0.6111299642801546, 0.5834222944888925, 0.6006038417515864, 0.49251959768809106, 0.660879342772648, 0.6087405903152439, 0.40007856507371653, 0.4449621020511261, 0.4197255194043752, 0.406793188706299, 0.4573599990220779, 0.41998754665788574, 0.46540286588681945, 0.45733656388241084, 0.4545462658699345, 0.19775760798939856, 0.19661385106300544, 0.1940871043621466, 0.20065958846677856, 0.19695690981577996, 0.19888913619582482, 0.19614754270520507, 0.19262013695589897, 0.20213171395659402, 0.21608251288969016, 0.35756968341942397, 0.2528010435468532, 0.5617568845376131, 0.19556253918179156, 0.6054369719344609, 0.5502517852710009, 0.5652567082041593, 0.21318540636183703, 0.18289022536485855, 0.16975660351065402, 0.1811077062273001, 0.7288734037508992, 0.18591785016318796, 0.1575879165548959, 0.7593721519417438, 0.17951441730371676, 0.8044805549638383, 0.843370949076239, 0.7589920529023457, 0.8333697853280191, 0.2984832593134742, 0.20255019157451393, 0.34173245447683265, 0.21246488902295912, 0.1637257649653482, 0.21081179958653828, 0.18718493290590854, 0.18074301341966037, 0.1785120538390571, 0.19095672842971556, 0.18754178701679336, 0.20092655196459142, 0.19954179049893028, 0.18565137032917323, 0.18188486259636893, 0.07797746434929431, 0.08393856841311298, 0.08942710405618581, 0.07924853118259834, 0.08525300056010587, 0.07968763185745609, 0.0796859934100228, 0.08486644322937065, 0.08283788503122191]}, "mutation_prompt": null}
{"id": "335b49d2-62f8-48ff-b789-f2d4f0c329f8", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 40  # Increased initial population size for greater initial diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3  # Lower minimum mutation factor for more conservative exploration\n        F_max = 0.8  # Slightly adjusted for balance between exploration and exploitation\n        CR_min = 0.5  # Reduced minimum crossover rate to encourage diversity\n        CR_max = 0.9\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (self.visited_points / self.budget)\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            temp *= 0.95  # Slightly slower cooling schedule for more steady convergence\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_v2", "description": "A refined hybrid DE and Simulated Annealing algorithm with adaptive scaling and crossover strategies for optimized convergence.", "configspace": "", "generation": 44, "fitness": 0.3687286795166499, "feedback": "The algorithm EnhancedHybridDE_SA_v2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.23.", "error": "", "parent_id": "c2dc5202-d2cf-4f6c-917f-9fa73b7e5156", "metadata": {"aucs": [0.6874917040085353, 0.6823578234720745, 0.6780434814355624, 0.683954285710666, 0.6889422670686416, 0.6879732008650609, 0.6832309648268651, 0.6939373003757576, 0.6816239741078576, 0.6361204682448061, 0.6268344902780802, 0.6275574767393577, 0.6302143634342283, 0.6252672618913524, 0.6187796091922841, 0.6266008353944645, 0.6285354632443984, 0.6309315478619896, 0.45676176736211604, 0.4264421179711625, 0.47247639623040083, 0.5451642064973949, 0.48757414735633886, 0.16052311022221788, 0.5597465385776512, 0.4224046828022372, 0.4408398909988176, 0.19828856855343568, 0.4571377263723916, 0.13858450158668856, 0.4753215524384714, 0.3136821778893124, 0.13967671420981365, 0.4795104934114244, 0.13934415145103485, 0.48310013009492203, 0.9521378016142019, 0.9507260222389275, 0.9417585473127901, 0.9450111679380642, 0.9622254110456013, 0.9809122798312033, 0.9366508930827737, 0.9679405247468532, 0.9536933435910596, 0.5576355732113396, 0.5575381201287087, 0.5622432486183531, 0.5427535275591677, 0.5434534231374696, 0.5626780967023933, 0.5150718535250811, 0.5597725740830835, 0.4309843644254773, 0.7000723016507062, 0.6722526042092878, 0.671087480605508, 0.6764416124289345, 0.7323147193478039, 0.7060253685878999, 0.6543508033172036, 0.704031741958669, 0.680967531864257, 0.17281491971789853, 0.18666308220329886, 0.295537809944884, 0.22553782787321752, 0.17678025593882374, 0.21354149084947582, 0.22052661977926358, 0.1774568830752753, 0.23538234557036775, 0.14533804395486827, 0.1787029627278902, 0.15124479163015125, 0.18685421451195483, 0.22521534032160317, 0.2724128542933153, 0.17218022057244542, 0.17921969994510456, 0.1703759361757462, 0.1738059288808943, 0.1809771654267328, 0.1433141689454811, 0.13499067878145687, 0.15881159205686068, 0.11082405746411006, 0.10245962722628699, 0.09141248532471158, 0.1758710381365901, 0.28037718442109005, 0.32279000786923384, 0.2980807078012544, 0.2522870447432628, 0.19995278743842504, 0.28726741954817836, 0.39663665079079313, 0.3103032074725699, 0.304244835053317, 0.09030400943118333, 0.10936295052603984, 0.04987610811038834, 0.18865047320375294, 0.11443689008384139, 0.10608623895975833, 0.12368412155663411, 0.10826596869711669, 0.10727652510840402, 0.26167088721593623, 0.2298233481430293, 0.25617570211765106, 0.2874467297991141, 0.29846752987588676, 0.2782326834819684, 0.2513260197230206, 0.2404574042779406, 0.25725752745090336, 0.5727836743006658, 0.5632956482910954, 0.5949592148153118, 0.6238947211419597, 0.5595949528963514, 0.5580250221261167, 0.5339785348009755, 0.5915507010341133, 0.5510523908061198, 0.12353633541408271, 0.10542909672031842, 0.11362114827258996, 0.11883398561360792, 0.0933590198090164, 0.09342383198572879, 0.11211012640635487, 0.09504780861894546, 0.09867146897589207, 0.15914099221103484, 0.13901173817759704, 0.13860244688531242, 0.19668555087313666, 0.14631264128937727, 0.16449559132263425, 0.181380730387791, 0.2157231151934783, 0.14936120397859398, 0.5258801401812125, 0.4485941461732076, 0.5175827423798607, 0.5105456274252524, 0.4816308990520233, 0.41112693584407256, 0.511668925660327, 0.5714568649306018, 0.5814991737315598, 0.3459112595397946, 0.3132954007745422, 0.31478175683480625, 0.28540619111024734, 0.28738464019564436, 0.3362408534070406, 0.38668125053118807, 0.34957336455044274, 0.3929326589701967, 0.20900155429487577, 0.19093791605112842, 0.2012793473514285, 0.21120659768556915, 0.19765145002881024, 0.1922024588368738, 0.20886609534646827, 0.19721922429635375, 0.20619727057226933, 0.5206172279711411, 0.49482103909532393, 0.5238014823360437, 0.4527968444367618, 0.5184796912653553, 0.38718497061454893, 0.21747018503777282, 0.24292796415343154, 0.5054878562487464, 0.5045899710313406, 0.19613602683017217, 0.2740280726598502, 0.7196004477904234, 0.5099908158942363, 0.6660619235020343, 0.5853018196223718, 0.1826973675354685, 0.5966584085234083, 0.6411465405151389, 0.30798894174182445, 0.25999843108702236, 0.38533878616459294, 0.6908117686453693, 0.1957892151427021, 0.15118453618018868, 0.2304452239363194, 0.20692072259350847, 0.17761390350559703, 0.18646486617749236, 0.18939890366639933, 0.18322528703188345, 0.18353632928263142, 0.18304416975960913, 0.1938299806550452, 0.18406269232744, 0.18031444568798993, 0.08856240469106613, 0.08468680357744929, 0.07694789383949008, 0.0822811591099919, 0.0809110026342561, 0.07157662832573264, 0.08560901460190873, 0.08004980444285792, 0.07966743445040425]}, "mutation_prompt": null}
{"id": "0a9db36f-8ad3-4449-8a13-8c3c0a803c6c", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30  # Increased initial population size for exploration\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4  # Lower minimum mutation factor for stability\n        F_max = 0.9  # Higher maximum mutation factor for diversity\n        CR_min = 0.6  # Further lowered minimum crossover rate\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            # Dynamically adjust population size based on budget left\n            pop_size = max(4, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)  # Stochastic mutation factor\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            temp *= 0.9\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid DE and Simulated Annealing algorithm with adaptive population size and stochastic mutation factor for better convergence.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2dc5202-d2cf-4f6c-917f-9fa73b7e5156", "metadata": {"aucs": [0.8263199590124984, 0.82911885959557, 0.8317234242019537, 0.8363902863113997, 0.8237186240275812, 0.8290908267204689, 0.8303474530272738, 0.8293171077484769, 0.8252940056966989, 0.7393985923286901, 0.7561333077776833, 0.757287758541435, 0.7506341257635526, 0.7413978169099384, 0.7579484499014638, 0.7485280734827828, 0.7653188658900517, 0.73412559228785, 0.5370483444931874, 0.4049133831840178, 0.44937668737960734, 0.4816950751141139, 0.421062689405442, 0.14928839213102962, 0.4744820969187865, 0.5181023629328083, 0.12783320811662213, 0.11774794461617843, 0.1351635349831839, 0.26833662495659505, 0.12380933768920677, 0.1436397586554865, 0.14205556311725487, 0.1311487558325054, 0.39079500040151016, 0.1438570822972064, 0.9445009416337367, 0.8799898987932954, 0.915866165763866, 0.9128323069587136, 0.9299682861330361, 0.9677716751626414, 0.9036073967298981, 0.9477866175551231, 0.898834068542915, 0.6608647664966983, 0.6988449918476968, 0.6546481727577421, 0.6265031940257482, 0.5982467894139881, 0.659656780037882, 0.6380217471778725, 0.6777842376324554, 0.6403791755679127, 0.812189229722287, 0.37311694904997617, 0.833846079726384, 0.8324947142528494, 0.8152370154204283, 0.8384807696089485, 0.8401917874366482, 0.8353303166350117, 0.8158076671120926, 0.17782838927864653, 0.41910171072117286, 0.3937528781480555, 0.24241068143165012, 0.4448314900997391, 0.3545556760836873, 0.22285353156179477, 0.4154243150485788, 0.24071269035625986, 0.169827250256683, 0.2650589935395895, 0.19833921940475085, 0.16421666182551342, 0.2616339150715852, 0.3312796381095058, 0.22238775537704358, 0.6410036548116682, 0.5190912812874506, 0.5440153048222278, 0.5560462415035297, 0.38104603979185914, 0.5862098254225703, 0.5803069102219184, 0.5492599620759759, 0.4787021823014077, 0.5719227006620555, 0.3944411162055157, 0.5085691262889724, 0.6402559914412731, 0.5843051314965326, 0.5516777780635211, 0.6030584584868377, 0.6684608859192639, 0.739929229208149, 0.7400544047020738, 0.7167469723408979, 0.291910302225759, 0.06972655216973067, 0.10849410688631433, 0.2564675168666013, 0.37351165500065464, 0.2105138145718327, 0.21204721368449986, 0.1874556662279857, 0.2636561609453877, 0.40865317733202955, 0.3311269316290807, 0.38024560848849365, 0.4121675600357029, 0.4244584422397636, 0.43324656607209067, 0.34296768507073405, 0.35317494174164366, 0.33994969544914044, 0.7850945121374059, 0.6971813240539422, 0.7875964630581501, 0.7777565494521537, 0.7310607374393323, 0.7575049806395249, 0.7643925516610715, 0.7198056175124345, 0.7875126115294667, 0.12101669459830411, 0.13331909318518143, 0.1262433882035524, 0.11103032771288801, 0.11175481277769195, 0.12510366708162923, 0.10428349740378329, 0.16218648445733774, 0.09455699756762037, 0.14659497583353676, 0.24954584523164647, 0.2397642073450149, 0.15825754595099184, 0.17496185328754255, 0.2900967659594934, 0.16326966547821997, 0.685842174929218, 0.183444221249199, 0.5231825901745588, 0.6368096720072685, 0.6404022236429675, 0.6111299642801546, 0.5834222944888925, 0.6006038417515864, 0.49251959768809106, 0.660879342772648, 0.6087405903152439, 0.40007856507371653, 0.4449621020511261, 0.4197255194043752, 0.406793188706299, 0.4573599990220779, 0.41998754665788574, 0.46540286588681945, 0.45733656388241084, 0.4545462658699345, 0.19775760798939856, 0.19661385106300544, 0.1940871043621466, 0.20065958846677856, 0.19695690981577996, 0.19888913619582482, 0.19614754270520507, 0.19262013695589897, 0.20213171395659402, 0.21608251288969016, 0.35756968341942397, 0.2528010435468532, 0.5617568845376131, 0.19556253918179156, 0.6054369719344609, 0.5502517852710009, 0.5652567082041593, 0.21318540636183703, 0.18289022536485855, 0.16975660351065402, 0.1811077062273001, 0.7288734037508992, 0.18591785016318796, 0.1575879165548959, 0.7593721519417438, 0.17951441730371676, 0.8044805549638383, 0.843370949076239, 0.7589920529023457, 0.8333697853280191, 0.2984832593134742, 0.20255019157451393, 0.34173245447683265, 0.21246488902295912, 0.1637257649653482, 0.21081179958653828, 0.18718493290590854, 0.18074301341966037, 0.1785120538390571, 0.19095672842971556, 0.18754178701679336, 0.20092655196459142, 0.19954179049893028, 0.18565137032917323, 0.18188486259636893, 0.07797746434929431, 0.08393856841311298, 0.08942710405618581, 0.07924853118259834, 0.08525300056010587, 0.07968763185745609, 0.0796859934100228, 0.08486644322937065, 0.08283788503122191]}, "mutation_prompt": null}
{"id": "b7cdabbf-82e4-452d-b367-604fde01afe9", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 40  # Increased initial population size for better diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3  # Lower minimum mutation factor for stability\n        F_max = 0.8  # Adjusted maximum mutation factor for less aggressive mutations\n        CR_min = 0.55  # Further lowered minimum crossover rate\n        CR_max = 0.9\n        temp = 1.5  # Increased initial temperature for exploration\n\n        while self.visited_points < self.budget:\n            # Dynamically adjust population size based on budget left\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.beta(0.5, 0.5) * (F_max - F_min)  # Beta distribution for controlled stochastic mutation\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            temp *= 0.85  # Adjusted cooling schedule for simulated annealing\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Refined", "description": "A hybrid DE and Simulated Annealing with adaptive strategies and diversified exploration for enhanced global search capability.", "configspace": "", "generation": 46, "fitness": 0.4067899156722032, "feedback": "The algorithm EnhancedHybridDE_SA_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "c2dc5202-d2cf-4f6c-917f-9fa73b7e5156", "metadata": {"aucs": [0.8290451729709467, 0.8240482464201528, 0.8344475344388027, 0.835237111653795, 0.8252048898983815, 0.833320592594096, 0.8351257522164759, 0.827512990852288, 0.8358877534117551, 0.7107689870077236, 0.7172420406100458, 0.7334270103638032, 0.7128397263151294, 0.7220352724928469, 0.7112858976678806, 0.708463420562963, 0.727362525040056, 0.7255193202775079, 0.4627104040366059, 0.42519738415940933, 0.4465193887955411, 0.14950326234091194, 0.3723868312746439, 0.15746453474408884, 0.1446691385190616, 0.1443230407407904, 0.515637870696606, 0.14017076863135702, 0.4387062711974611, 0.4009073641738379, 0.14966340882122553, 0.14270979603127543, 0.3514536538589732, 0.1342187858624544, 0.13689160580409643, 0.14531567348430907, 0.9385227557893817, 0.9885802266560157, 0.9563383272129061, 0.8769279789623721, 0.8990451985491756, 0.9607014365777348, 0.9121450944279861, 0.8775727350566616, 0.9084894058611774, 0.483810635785767, 0.623581443199411, 0.6141843723537803, 0.6341493646937182, 0.5760789754070339, 0.6147613622786017, 0.5568236659092545, 0.43759455021931637, 0.5572598515296623, 0.7746789976537419, 0.7884394776481911, 0.789945536532592, 0.7966246507787765, 0.8089473023339633, 0.7643809699367795, 0.8312794792166742, 0.7938979723980775, 0.8163309100720654, 0.23094253168596401, 0.22064433798921734, 0.14736238266634916, 0.17958248821672018, 0.1853457795032235, 0.25363124525731906, 0.1524944872246462, 0.15849025071972378, 0.18482842898001417, 0.25006122564715005, 0.5603084702906804, 0.18993839838775917, 0.17112538385718867, 0.1737656987533195, 0.1470487724044347, 0.1649902727190451, 0.16848629428349582, 0.18491400449521522, 0.38043679147010234, 0.3189901176155363, 0.5053842034614529, 0.3441439591501031, 0.408863765638818, 0.32590166952133304, 0.4356420347278557, 0.3267394293042496, 0.3706550491328472, 0.4602237438116984, 0.5168404145277474, 0.6459326840343889, 0.5506009037027073, 0.4752966365907888, 0.5003221651288294, 0.6564656680107055, 0.47875377690395604, 0.5445484185487768, 0.06853571309525652, 0.22537702377362012, 0.11502231842657351, 0.21564131231615113, 0.28240697475736776, 0.22771817848071652, 0.1303979798366487, 0.16729821935524092, 0.22661459057730482, 0.2968795932046707, 0.3372334621485489, 0.318669558911326, 0.34612410148897366, 0.3335159022841735, 0.3845558415825967, 0.33602251542425676, 0.3082446747602663, 0.341603941492184, 0.6243519373321429, 0.7575352260171523, 0.7470023688679557, 0.6848632080118124, 0.6002177486440579, 0.6708426499248195, 0.7402247487621881, 0.7609852279893655, 0.6460947381952222, 0.11706953564500433, 0.11328312428810094, 0.10083290713196635, 0.10553174530592191, 0.1037753849308749, 0.1181548289008344, 0.10386855230895775, 0.12325586127400034, 0.11612852902686777, 0.16426949247349243, 0.13067078460591952, 0.18416528589443404, 0.14227724258468222, 0.13438110339145148, 0.1442631306020361, 0.18145554419739052, 0.19398395960967918, 0.1548384829866949, 0.5022767092406255, 0.516013586782426, 0.5444429016481256, 0.5063513063113949, 0.5279865883464165, 0.5215464420304778, 0.6024910554472106, 0.5976938507938647, 0.5239429536080875, 0.39259655122164705, 0.35295525814460116, 0.3827684315361731, 0.4292857079269815, 0.3412645205577757, 0.3687141167698619, 0.49585760927715183, 0.41279732027433547, 0.3718829553476276, 0.2328573946846052, 0.2037829688119145, 0.19791808829926416, 0.20907369237512952, 0.21511615703449738, 0.17899967795478333, 0.21701098953913378, 0.20085754791568544, 0.22024820408484946, 0.2579508981608827, 0.20165373031063527, 0.4959397119018595, 0.21989696528893654, 0.449465702088624, 0.20608546924047255, 0.40162842232089646, 0.44494068413298504, 0.5072991104455915, 0.15066572190068606, 0.7180544715152781, 0.8116331612549602, 0.1831284005437317, 0.6679641713374946, 0.796569590868646, 0.17450816372388522, 0.18395365696963217, 0.16061333127363087, 0.20365836231412393, 0.20417685353058224, 0.8033499060591623, 0.7846006759109977, 0.16528663611511074, 0.16209463767554022, 0.20719137648171626, 0.77678723222922, 0.20835685902647205, 0.1810505714702465, 0.19201997036702612, 0.1802521268770504, 0.18154401019323996, 0.19424360067864332, 0.18278847804622245, 0.18116842237982522, 0.1813082009282282, 0.18033590197984795, 0.07888159686866147, 0.08043358556100866, 0.07545031632685728, 0.08304844166324843, 0.08073352927002875, 0.07687727545575618, 0.08191352146886399, 0.07938898225294433, 0.07679352463140299]}, "mutation_prompt": null}
{"id": "86ee316e-7ef8-45c3-bfd4-5e431a5720ef", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30  # Increased initial population size for exploration\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4  # Lower minimum mutation factor for stability\n        F_max = 0.9  # Higher maximum mutation factor for diversity\n        CR_min = 0.6  # Further lowered minimum crossover rate\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            # Dynamically adjust population size based on budget left\n            pop_size = max(4, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)  # Stochastic mutation factor\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            temp *= 0.9\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA", "description": "An enhanced hybrid DE and Simulated Annealing algorithm with adaptive population size and stochastic mutation factor for better convergence.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c2dc5202-d2cf-4f6c-917f-9fa73b7e5156", "metadata": {"aucs": [0.8263199590124984, 0.82911885959557, 0.8317234242019537, 0.8363902863113997, 0.8237186240275812, 0.8290908267204689, 0.8303474530272738, 0.8293171077484769, 0.8252940056966989, 0.7393985923286901, 0.7561333077776833, 0.757287758541435, 0.7506341257635526, 0.7413978169099384, 0.7579484499014638, 0.7485280734827828, 0.7653188658900517, 0.73412559228785, 0.5370483444931874, 0.4049133831840178, 0.44937668737960734, 0.4816950751141139, 0.421062689405442, 0.14928839213102962, 0.4744820969187865, 0.5181023629328083, 0.12783320811662213, 0.11774794461617843, 0.1351635349831839, 0.26833662495659505, 0.12380933768920677, 0.1436397586554865, 0.14205556311725487, 0.1311487558325054, 0.39079500040151016, 0.1438570822972064, 0.9445009416337367, 0.8799898987932954, 0.915866165763866, 0.9128323069587136, 0.9299682861330361, 0.9677716751626414, 0.9036073967298981, 0.9477866175551231, 0.898834068542915, 0.6608647664966983, 0.6988449918476968, 0.6546481727577421, 0.6265031940257482, 0.5982467894139881, 0.659656780037882, 0.6380217471778725, 0.6777842376324554, 0.6403791755679127, 0.812189229722287, 0.37311694904997617, 0.833846079726384, 0.8324947142528494, 0.8152370154204283, 0.8384807696089485, 0.8401917874366482, 0.8353303166350117, 0.8158076671120926, 0.17782838927864653, 0.41910171072117286, 0.3937528781480555, 0.24241068143165012, 0.4448314900997391, 0.3545556760836873, 0.22285353156179477, 0.4154243150485788, 0.24071269035625986, 0.169827250256683, 0.2650589935395895, 0.19833921940475085, 0.16421666182551342, 0.2616339150715852, 0.3312796381095058, 0.22238775537704358, 0.6410036548116682, 0.5190912812874506, 0.5440153048222278, 0.5560462415035297, 0.38104603979185914, 0.5862098254225703, 0.5803069102219184, 0.5492599620759759, 0.4787021823014077, 0.5719227006620555, 0.3944411162055157, 0.5085691262889724, 0.6402559914412731, 0.5843051314965326, 0.5516777780635211, 0.6030584584868377, 0.6684608859192639, 0.739929229208149, 0.7400544047020738, 0.7167469723408979, 0.291910302225759, 0.06972655216973067, 0.10849410688631433, 0.2564675168666013, 0.37351165500065464, 0.2105138145718327, 0.21204721368449986, 0.1874556662279857, 0.2636561609453877, 0.40865317733202955, 0.3311269316290807, 0.38024560848849365, 0.4121675600357029, 0.4244584422397636, 0.43324656607209067, 0.34296768507073405, 0.35317494174164366, 0.33994969544914044, 0.7850945121374059, 0.6971813240539422, 0.7875964630581501, 0.7777565494521537, 0.7310607374393323, 0.7575049806395249, 0.7643925516610715, 0.7198056175124345, 0.7875126115294667, 0.12101669459830411, 0.13331909318518143, 0.1262433882035524, 0.11103032771288801, 0.11175481277769195, 0.12510366708162923, 0.10428349740378329, 0.16218648445733774, 0.09455699756762037, 0.14659497583353676, 0.24954584523164647, 0.2397642073450149, 0.15825754595099184, 0.17496185328754255, 0.2900967659594934, 0.16326966547821997, 0.685842174929218, 0.183444221249199, 0.5231825901745588, 0.6368096720072685, 0.6404022236429675, 0.6111299642801546, 0.5834222944888925, 0.6006038417515864, 0.49251959768809106, 0.660879342772648, 0.6087405903152439, 0.40007856507371653, 0.4449621020511261, 0.4197255194043752, 0.406793188706299, 0.4573599990220779, 0.41998754665788574, 0.46540286588681945, 0.45733656388241084, 0.4545462658699345, 0.19775760798939856, 0.19661385106300544, 0.1940871043621466, 0.20065958846677856, 0.19695690981577996, 0.19888913619582482, 0.19614754270520507, 0.19262013695589897, 0.20213171395659402, 0.21608251288969016, 0.35756968341942397, 0.2528010435468532, 0.5617568845376131, 0.19556253918179156, 0.6054369719344609, 0.5502517852710009, 0.5652567082041593, 0.21318540636183703, 0.18289022536485855, 0.16975660351065402, 0.1811077062273001, 0.7288734037508992, 0.18591785016318796, 0.1575879165548959, 0.7593721519417438, 0.17951441730371676, 0.8044805549638383, 0.843370949076239, 0.7589920529023457, 0.8333697853280191, 0.2984832593134742, 0.20255019157451393, 0.34173245447683265, 0.21246488902295912, 0.1637257649653482, 0.21081179958653828, 0.18718493290590854, 0.18074301341966037, 0.1785120538390571, 0.19095672842971556, 0.18754178701679336, 0.20092655196459142, 0.19954179049893028, 0.18565137032917323, 0.18188486259636893, 0.07797746434929431, 0.08393856841311298, 0.08942710405618581, 0.07924853118259834, 0.08525300056010587, 0.07968763185745609, 0.0796859934100228, 0.08486644322937065, 0.08283788503122191]}, "mutation_prompt": null}
{"id": "d556c07b-2d0b-4a4b-8fff-dc8f996c0cf0", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n            \n            # Introduce elitism to keep the best individual always\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            temp *= 0.9\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, and elitism for improved convergence.", "configspace": "", "generation": 48, "fitness": 0.4501209183970573, "feedback": "The algorithm EnhancedHybridDE_SA_Elitism got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "c2dc5202-d2cf-4f6c-917f-9fa73b7e5156", "metadata": {"aucs": [0.8261159351329886, 0.8373637858766632, 0.829851615649142, 0.8387099292911143, 0.8310048790311405, 0.8275795195722593, 0.8341337865036297, 0.8334492421127688, 0.8307395628190994, 0.7662947044616251, 0.7730773808347314, 0.7571819503411388, 0.7686739799613672, 0.7711962894076974, 0.7713700860880571, 0.7608381084589718, 0.7718256564369186, 0.7662928662914352, 0.5888697143483068, 0.13996693983770603, 0.14537789637768783, 0.16116635418239367, 0.6159143545874326, 0.15430334325492312, 0.2357906655840949, 0.5894434581879682, 0.6353706597998509, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13275427985852528, 0.15757951661194625, 0.1389714355070295, 0.4950656732533518, 0.14688074729690948, 0.16332555290810158, 0.8840139766172087, 0.9248137779545806, 0.9334720076447681, 0.9643807446260605, 0.9502136631572518, 0.8636189775507717, 0.9195910232868065, 0.944421311037815, 0.9265902929871901, 0.6905022363359772, 0.5867752556674233, 0.721186333249021, 0.6793738704531683, 0.6712394389606317, 0.6862917784751354, 0.6732320044307085, 0.5853028917582354, 0.6960427658125594, 0.8370286638017806, 0.8527745480384448, 0.8566552285021695, 0.8527797554924365, 0.8490222093371951, 0.8509202622406487, 0.8336084148217093, 0.8531154298704073, 0.8500455763433296, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20813467240258898, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.1480602143864298, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.47265450206672976, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6682412900871808, 0.716159757577707, 0.334880661876112, 0.6697285047709274, 0.6865870351720114, 0.680232969410578, 0.6321347629627122, 0.7050179254443546, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.298115433066236, 0.4330873361465213, 0.46926189516889694, 0.41698128244864185, 0.4285332305098464, 0.46584331008608626, 0.2935983430259318, 0.8041773438566235, 0.8038013795482251, 0.7197650192407237, 0.7024101592865372, 0.7287690547413901, 0.7937305194398485, 0.7993122153445466, 0.6864690695153739, 0.7300762314206661, 0.11392701317020293, 0.1101580424876929, 0.10426148137203506, 0.08808602309458113, 0.12892333687019442, 0.13647594101294158, 0.10444681796658661, 0.09571594330720767, 0.10585483187683709, 0.2128909780365249, 0.27182430271400027, 0.36608353850894937, 0.6760375598799234, 0.17605088959070725, 0.15918789141824763, 0.18310839887940744, 0.17658184126266074, 0.20702100206540486, 0.6304617327128622, 0.6384009759830921, 0.5427676880090064, 0.5629967991869231, 0.6261163876934688, 0.5669015907626243, 0.5079380396078939, 0.5454918878052628, 0.5406624309350141, 0.4065148620862338, 0.357627297425991, 0.41898672294745987, 0.42507385796248953, 0.2855634023288035, 0.33299489731150533, 0.465806495206598, 0.40784830814350403, 0.3642294207602961, 0.2386523338154779, 0.181587531191166, 0.18859104403958793, 0.18265129994655993, 0.1934523669269267, 0.2151781313036114, 0.20654675109152376, 0.19898573378402695, 0.22335065110635854, 0.6897183101388791, 0.23000472127959237, 0.6520625055174483, 0.21518429919639692, 0.20522647035061936, 0.6115934618682421, 0.1942674524584137, 0.6419888182203864, 0.5839692384471337, 0.83016906695129, 0.1705313352199519, 0.8436643944777187, 0.8668846118441327, 0.1840741933057074, 0.16985042760664515, 0.8411163621090681, 0.1627393392147738, 0.8322154250826161, 0.8460889735668145, 0.16743669789787252, 0.2071036861622998, 0.20939042954607057, 0.20513960297916856, 0.7613414555823692, 0.1987846067777328, 0.1669677775529812, 0.2022804435145943, 0.17543037913486337, 0.1725088973419695, 0.17524083057300666, 0.1743085600081622, 0.19569292145899442, 0.20199590783375232, 0.19004184633663035, 0.1882521322927191, 0.18025592588789552, 0.08845747511535573, 0.07844423346092777, 0.06520549163172751, 0.07213665410422032, 0.08587805065067189, 0.08254857836828322, 0.07756398916250218, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "7941b160-c763-4bcb-9877-77764f65af4e", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 49, "fitness": 0.4560977308449503, "feedback": "The algorithm EnhancedHybridDE_SA_Elitism_AdaptiveCooling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "d556c07b-2d0b-4a4b-8fff-dc8f996c0cf0", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "66eb04e1-713f-40dd-bd97-596d6b81df33", "solution": "import numpy as np\n\nclass AdaptiveHybridDE_ES_MutationCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3\n        F_max = 0.8\n        CR_min = 0.5\n        CR_max = 0.9\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * np.exp(-self.visited_points / self.budget)\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Mutation cooling\n            if self.visited_points < self.budget * 0.5:\n                F_max += (0.85 - F_max) * (self.visited_points / self.budget)\n            temp *= 0.8 + 0.15 * np.random.rand()\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveHybridDE_ES_MutationCooling", "description": "AdaptiveHybridDE_ES_MutationCooling: An enhanced DE algorithm integrating evolutionary strategies and mutation cooling for improved convergence and solution diversity.", "configspace": "", "generation": 50, "fitness": 0.4328748210282119, "feedback": "The algorithm AdaptiveHybridDE_ES_MutationCooling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8568759948933897, 0.8557470212422627, 0.8508539475241008, 0.865010805996232, 0.8711120464199344, 0.8490787589860926, 0.870307085772787, 0.8565890146569172, 0.8667753576672962, 0.8070011986556758, 0.7671099334285754, 0.7917543689081126, 0.7659160304741665, 0.7832525732152563, 0.7824990943944234, 0.7806948385698397, 0.7837773428595477, 0.786816354069952, 0.5701495887901666, 0.16314746671954417, 0.16184575923549727, 0.5684171392845581, 0.5259483298412821, 0.16205586971364316, 0.6085537263084739, 0.6052472697959307, 0.5092826905364736, 0.46027717627035014, 0.5067500193542112, 0.1461618942751176, 0.1437582086082848, 0.12458994786902144, 0.151220254091885, 0.15179460306574188, 0.16821204550316038, 0.1412340935873353, 0.9113952159593598, 0.9328980893084822, 0.9483630914990102, 0.8751159524989858, 0.9169208676702719, 0.9155266074635491, 0.9297066975776052, 0.9178962689590159, 0.912678063282131, 0.681337317378393, 0.49866066107138873, 0.6748325513090982, 0.7310894291539696, 0.6846470241945692, 0.6281487095269739, 0.5457211105462374, 0.41308486551284407, 0.6183986830519537, 0.84081823612328, 0.22633792747934145, 0.8414543630154695, 0.8793610373599969, 0.8444819913730062, 0.2538305272609468, 0.8613749374890184, 0.8590206246013812, 0.8640095451646382, 0.15963399044847648, 0.464189574403292, 0.3415164602088364, 0.19280195085224927, 0.18219857989624666, 0.1790725586709686, 0.17231773944861906, 0.16403837165962631, 0.20433300655122288, 0.048978476086091405, 0.20957328027751854, 0.6529000188586264, 0.2707127111484431, 0.16094766994796683, 0.27532581245271526, 0.21213725213435486, 0.229714069039059, 0.18903045571680854, 0.5303879571074177, 0.48233246945887187, 0.35473789287818613, 0.44720627879136077, 0.37098115789836195, 0.5988895178199309, 0.495448435814701, 0.5604783444771988, 0.3353016718526004, 0.47284701286859776, 0.5512965440337914, 0.48553030779501416, 0.4047301608362269, 0.6885823226170662, 0.6380972083924688, 0.7533657287534397, 0.579339908105893, 0.6947176424085177, 0.13739316898373655, 0.22513804837287787, 0.16121197177495983, 0.12822125327874312, 0.1546467469832361, 0.18469114300310863, 0.14448622983346726, 0.10993607123171223, 0.1478129748336261, 0.4199225281701663, 0.3609613853121032, 0.2553141994610588, 0.3879310744082308, 0.35751858150433813, 0.31297429960552536, 0.32378625332052713, 0.38518913872530025, 0.3527691179838959, 0.7065928119018039, 0.7664623586407252, 0.6782015186822135, 0.7829998928613935, 0.7481431111198271, 0.680285522811271, 0.6992773705847194, 0.7997695043082941, 0.7408246894705834, 0.1579068091328627, 0.11277715946907974, 0.11235768060248297, 0.14085808860724558, 0.10258134225128324, 0.1259435214422029, 0.1029012715383173, 0.13842044082502525, 0.1727606695207109, 0.23025970128532358, 0.35124018611605345, 0.14583419931840713, 0.14731489768516493, 0.24199554856071526, 0.17123112320525635, 0.3075939616389396, 0.22361453434883338, 0.26234265955525127, 0.6509892607115817, 0.695695255708578, 0.6965583614675519, 0.5469741749143282, 0.5590772818485039, 0.485674007044548, 0.5694334957559762, 0.7273314446520086, 0.6359534601678343, 0.4235864534863677, 0.4504792047942966, 0.4026792022933924, 0.529603766523749, 0.4437876120063218, 0.389311549738396, 0.5004411895832059, 0.4922225445797047, 0.3529708819359304, 0.20139769638430627, 0.2006851705265541, 0.1843169260537455, 0.19704075184238834, 0.21466293595718766, 0.2107735180860435, 0.1845838680244848, 0.18585618360668166, 0.23534566303421334, 0.24088078500369658, 0.2107853210861006, 0.6613936634564604, 0.20618077928602963, 0.23760738567701845, 0.5928421359687555, 0.23059687859742872, 0.6591732096940245, 0.6237246073364369, 0.20269934308013748, 0.846553045540303, 0.20543757972194554, 0.8755364433891002, 0.19715135935822037, 0.823144931275047, 0.8330904022243637, 0.1683421915755523, 0.8910986734601762, 0.16742411450663497, 0.43771413850623575, 0.2094133427622561, 0.20413068290736192, 0.20476481139681302, 0.2064370205163425, 0.21187296872521555, 0.15382526453528766, 0.21117465897399346, 0.16739909016816623, 0.17599156011739014, 0.18693859963535087, 0.17288708615984882, 0.18683835022798712, 0.17452890049772452, 0.18902704572954332, 0.19914631684915052, 0.1874723218026506, 0.08602346969785013, 0.07832101224595323, 0.08835512998280937, 0.08346943208770463, 0.08200402150436803, 0.0839342341284306, 0.08463672740383299, 0.08263078152232883, 0.08991411464634436]}, "mutation_prompt": null}
{"id": "b2f1973a-e43d-4f7e-86c5-6491a761b175", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 35  # Slight increase to enhance diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.5  # Modified to provide slightly more aggressive exploration\n        F_max = 0.85\n        CR_min = 0.5  # Increased dynamic range for crossover rate\n        CR_max = 0.98\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - np.exp(-3 * (self.visited_points / self.budget)))  # More dynamic adjustment of CR\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Improved adaptive cooling\n            temp *= 0.85 + 0.05 * (np.sqrt(self.visited_points) / np.sqrt(self.budget))\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling_V2", "description": "A hybrid DE and Simulated Annealing algorithm with improved mutation strategy, dynamic crossover, elitism, and adaptive cooling for robust convergence.", "configspace": "", "generation": 51, "fitness": 0.4000064098120211, "feedback": "The algorithm EnhancedHybridDE_SA_Elitism_AdaptiveCooling_V2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.26.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8265208271752107, 0.8214101912871035, 0.8259401825337892, 0.8292422184380568, 0.8406277839144058, 0.8322404219957754, 0.8334964937198469, 0.8193390743385277, 0.8230059607245517, 0.7075937381035055, 0.7225699764441087, 0.6997855325807192, 0.7015716824914413, 0.7135947496649111, 0.7056092332967154, 0.7097585635569752, 0.7144690846219213, 0.7092929586735399, 0.1457424717146516, 0.5289631760315956, 0.23001528037685715, 0.15108662066010836, 0.310837719536736, 0.4944624889618886, 0.1533423271778951, 0.18625188398033798, 0.45583155443705314, 0.13513861905949887, 0.108085518077505, 0.13070668078212733, 0.155175305207223, 0.1446968574352384, 0.12380109938692896, 0.14046188551237082, 0.1404224247668484, 0.13437971715214192, 0.9572485450046084, 0.9694898268771177, 0.9758630493252991, 0.9624577815754694, 0.971575536438, 0.9615127947409331, 0.9761991169136192, 0.9692463467868939, 0.9801028162167358, 0.5815223421611917, 0.6298954467026228, 0.5738468149835836, 0.4832350736643348, 0.622583704764099, 0.5965001471660615, 0.5581497425679218, 0.5112027207533882, 0.5953561704793922, 0.7197506675771894, 0.7168483818716691, 0.6833653557084203, 0.6882687215397552, 0.7133632369470745, 0.7501635012681497, 0.7412702889117214, 0.7253105838012202, 0.7263089526964966, 0.234093041788069, 0.42962474107502124, 0.2613142071651936, 0.2961744216668317, 0.12117384674451115, 0.12080531970338293, 0.25735678060338907, 0.5241688761811276, 0.3097299522333735, 0.17878589176788995, 0.36611109625567717, 0.21292435737733117, 0.41522079103077225, 0.3206833469118239, 0.37347215570338055, 0.23107185008467468, 0.21953621512582044, 0.21148173483027055, 0.15098583506958618, 0.2177194078566802, 0.24358653722492507, 0.2491448030307557, 0.2984430252860273, 0.13700235291230234, 0.4444015505740053, 0.3957644158485315, 0.3212847592803685, 0.40285634684763905, 0.356307372550254, 0.3084448358835541, 0.444481034825258, 0.29688282512476527, 0.35770531865292654, 0.5432395587907088, 0.5053786435820147, 0.5239811035419563, 0.14049602627073177, 0.08320172177667373, 0.0729703187741878, 0.22420310205019323, 0.08947875330577049, 0.19608763417554909, 0.1687557961251609, 0.18428722873422254, 0.1485666416371234, 0.34605425027804093, 0.3564691518640196, 0.3547988608042498, 0.25956396141004634, 0.40277284211029496, 0.3389808591518201, 0.31840001190381007, 0.3298880011631703, 0.3608445567685159, 0.677561754103977, 0.643954894044015, 0.7414509298054028, 0.7123373626121322, 0.7265364284961526, 0.6222478327350525, 0.6690980982818937, 0.6937837021328366, 0.637786849111978, 0.09156268460553785, 0.12573932643466001, 0.15764987911298645, 0.09138790377470674, 0.11012309105676177, 0.1041239466640469, 0.09607057156973553, 0.09358421156612762, 0.08756681546365619, 0.16166370489616422, 0.14609006354174303, 0.14601740450105793, 0.17043171729128448, 0.13439456383028914, 0.16883961908353873, 0.18338783894761657, 0.15064752166830675, 0.17149756846402142, 0.42808596929123366, 0.5349993558770428, 0.45260239158811266, 0.5381908563941882, 0.4429958680049232, 0.48512388368818715, 0.5309481629356644, 0.5204520239339714, 0.47960515284941807, 0.3403834896100417, 0.27130180404731186, 0.3447708044776041, 0.33474929361632844, 0.40314419032211846, 0.4118004727817255, 0.35604253503604477, 0.33918100744054647, 0.39569561318557744, 0.1941108855283885, 0.21110047210306848, 0.19285113789036212, 0.1826748172968703, 0.19402255717983374, 0.18377858355794674, 0.2204661084299505, 0.19128830648689132, 0.19402444868916313, 0.5399187950341265, 0.5545417353258542, 0.2093330636991747, 0.5284531737226321, 0.22365447116137838, 0.5928108302182298, 0.5676367358361176, 0.48855894270050926, 0.5614835131034726, 0.18532537992854792, 0.19736803256196234, 0.7616431724441104, 0.715864137981936, 0.7128882034695246, 0.20472292640523215, 0.7070913983433935, 0.1884782287678507, 0.17363066754774137, 0.6778788728331833, 0.20172657114821235, 0.6870648601357201, 0.19566077485343691, 0.19806713167234424, 0.2023647108938006, 0.7972969954860296, 0.6648244488371056, 0.7224008291777435, 0.18039162746910387, 0.1826539821010026, 0.17830719374077486, 0.1646280364008702, 0.1906996278811336, 0.1765584517721407, 0.186340205717212, 0.1923417708688797, 0.17922171650286522, 0.07911251784983253, 0.07824512460453592, 0.07970059087014414, 0.07522380524672823, 0.08684613052163237, 0.08467789162798978, 0.08097785314592076, 0.07663173853994776, 0.07494513251281931]}, "mutation_prompt": null}
{"id": "4ccd92e3-be0b-4515-960a-f8e3f07f8b08", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "9b42ca2e-3dcf-4698-a499-d861c13f470e", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "14f58bff-37fa-4d86-8bfc-61eadb5934a1", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_ImprovedMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 40  # Changed initial population size for better exploration\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 1.2  # Increased F_max for more diverse solutions\n        CR_min = 0.5  # Adjusted CR_min to allow for more trial vectors\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                # Adjusted acceptance criteria with exponential decay for better exploration\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / (temp + 1e-8)):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Dynamic cooling for temperature adjustment\n            temp *= 0.85 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_ImprovedMutation", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive mutation strategy, elitism, and dynamic cooling schedule for robust optimization.", "configspace": "", "generation": 54, "fitness": 0.3855604154854503, "feedback": "The algorithm EnhancedHybridDE_SA_ImprovedMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.23.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.770375271942354, 0.7581701740895022, 0.775566679932165, 0.795119809853932, 0.7764979586778263, 0.7832321850242223, 0.7668415414317703, 0.7796672163329179, 0.7885937440705467, 0.6463505339213653, 0.6439705427011164, 0.6467256793422291, 0.6309276826250119, 0.64312753043052, 0.6294125231281094, 0.6354177271404337, 0.6230083818498935, 0.6313086891906643, 0.37601877578612564, 0.1419727475318845, 0.3899784957899962, 0.391747501318643, 0.425177430243568, 0.38475739261480335, 0.32544080124583075, 0.32153885536604065, 0.1413080869199539, 0.3647074752441747, 0.1281862104706566, 0.3635417373195271, 0.3438319922385674, 0.12916435065471799, 0.14133587070752218, 0.43338314262632716, 0.13635476729454443, 0.33258116019449646, 0.9417975904686495, 0.96410140298959, 0.9013287510029659, 0.9514965561361411, 0.9576589149418381, 0.9087909895756959, 0.9546984683132937, 0.8942931419274427, 0.9491434101559417, 0.5678847752873222, 0.5458025171911576, 0.5424517465478403, 0.5382606603533882, 0.5219983302959168, 0.5668940380181924, 0.5319970500780677, 0.5320007634217263, 0.5397031010381286, 0.6951998257731355, 0.7201394904261476, 0.7248479452143114, 0.7550065511984425, 0.6839403966176962, 0.7298903435058568, 0.7586597504561002, 0.7110439619176503, 0.7034928851929708, 0.35476878326721395, 0.29162935748475616, 0.3351325744385364, 0.5119105427084827, 0.3909057056798645, 0.23005099470707302, 0.42401955107436695, 0.2908930475966879, 0.37885091488945866, 0.3136166725400281, 0.2703937161038277, 0.4503298670441328, 0.2113622882834395, 0.264557969883196, 0.4453466431657629, 0.2918899245573241, 0.40586617801565394, 0.47184635168766786, 0.34829597437741855, 0.288363433771341, 0.3010817584894092, 0.308741531608572, 0.24275882253803116, 0.26836949806753985, 0.22688725763040596, 0.20571043646093412, 0.27348884455113875, 0.550179942407372, 0.43601772117803617, 0.44876854062212057, 0.4136091568647857, 0.44600230819931175, 0.43949386206195973, 0.5000358195444765, 0.46323398896498635, 0.43541779433906647, 0.13827573688705397, 0.20364130855175078, 0.06893964419702048, 0.1797271094171592, 0.1504750488700365, 0.07950871804510329, 0.12257580946243962, 0.16967694384187149, 0.11572843708351443, 0.26543337408409384, 0.2657051122229944, 0.22601097618826116, 0.32561061847025397, 0.29334514517234533, 0.2894832217651452, 0.26097866367166556, 0.26078724053673785, 0.28448030191544527, 0.6509566562231651, 0.6332188940628669, 0.6309693947063917, 0.5674392718006447, 0.6160657362993418, 0.5978288758574817, 0.6183385575653162, 0.6175781881213198, 0.5923676214805447, 0.09394733579277892, 0.12993744099706817, 0.10131513723079366, 0.11757725837758604, 0.12124875305304483, 0.10936086168866388, 0.09668522728636364, 0.14133167105031574, 0.10192675989457622, 0.1477050803571528, 0.5962576692210417, 0.1320024151028525, 0.3574814687292309, 0.18768815646258885, 0.22019830060538148, 0.21742246585762215, 0.12214118063332391, 0.19795130969306818, 0.3611324578852626, 0.36193851465740967, 0.44380511149551705, 0.39016761723436577, 0.37081934436764286, 0.4025713730939964, 0.46941679451377805, 0.41939422316994845, 0.504815728154131, 0.30111379002711747, 0.2775948939674515, 0.2580613608591703, 0.2616091504434166, 0.3184669264399941, 0.30928218677443275, 0.3400342315959898, 0.35670951743491164, 0.32981266689482425, 0.16494097884499714, 0.18568823954747737, 0.192860518078375, 0.2184042349257478, 0.18391303720462748, 0.20352195423997432, 0.19930658115853273, 0.21920032353821683, 0.1745203528179483, 0.4675636622744852, 0.3528637327180417, 0.49755517999719834, 0.464830916809737, 0.34440077557284887, 0.45255255555487217, 0.35965659706892383, 0.44715101827889325, 0.20330008461731608, 0.694824355437283, 0.17988726317401893, 0.771115408063361, 0.15831445335223848, 0.7104234886449732, 0.177582475839011, 0.1779694830060522, 0.19449131169981881, 0.18364543347791829, 0.6844614458203998, 0.16289693149965456, 0.16618063590986842, 0.1590161433155456, 0.6748237684400131, 0.1986029874448686, 0.20741926229866292, 0.2071747401790518, 0.2007359990956714, 0.19770943232194316, 0.19013918180177725, 0.18746913339193472, 0.1875331078868676, 0.20537423341319527, 0.2018607827432808, 0.17896401904860249, 0.2026711444440823, 0.19931652349811324, 0.07698013634285239, 0.07417185079625155, 0.07447262325356574, 0.06953026944969953, 0.07157594974986337, 0.08264824656335912, 0.07861543448926389, 0.07777370466789757, 0.07068485540335856]}, "mutation_prompt": null}
{"id": "227c1fc7-422c-4872-a7f4-a586c234b201", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "15c0cf87-715d-4a8c-b12d-a4cba0843b68", "solution": "import numpy as np\n\nclass DynamicHybridEA_AdaptiveSelection_TemperatureControl:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 40  # Increased initial population size for diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3  # Adjusted mutation factor range\n        F_max = 0.8\n        CR_min = 0.5  # Adjusted crossover range\n        CR_max = 0.9\n        temp = 1.2  # Start with a slightly higher temperature\n\n        while self.visited_points < self.budget:\n            pop_size = max(10, int(self.initial_pop_size * (1 - (self.visited_points / (1.5 * self.budget)))))  # Slower population reduction\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - np.exp(-self.visited_points / self.budget))  # Exponential decay\n                F = F_min + np.random.beta(2, 5) * (F_max - F_min)  # Beta distribution for stochasticity\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            elite_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[elite_idx]\n\n            # Adaptive cooling with dynamic control\n            temp *= 0.85 + 0.15 * (1 - np.cos(np.pi * self.visited_points / self.budget))\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "DynamicHybridEA_AdaptiveSelection_TemperatureControl", "description": "Dynamic Hybrid Evolutionary Algorithm (DHEA) with Adaptive Selection Pressure and Temperature Control for Robust Optimization Performance.", "configspace": "", "generation": 56, "fitness": 0.3816032041081988, "feedback": "The algorithm DynamicHybridEA_AdaptiveSelection_TemperatureControl got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8093456601882678, 0.8122928697363143, 0.8129073577247254, 0.8149271120667727, 0.7950221912079226, 0.8074943619820028, 0.8111750388295823, 0.8022587637602261, 0.8175225443611842, 0.7104385100505215, 0.7164501431269477, 0.7270550648259724, 0.7382776384860218, 0.7215231481538477, 0.7267880574709742, 0.7236155758171439, 0.7182748202085103, 0.7316532853371149, 0.5299274680837508, 0.5002909065316422, 0.3638933152409197, 0.4849373597341703, 0.46127557624789195, 0.5538416470161796, 0.5044481144767827, 0.5921150250613142, 0.4630569292637349, 0.38283952799594345, 0.2333064599301623, 0.15733163467532507, 0.1396741338456764, 0.15862605185953182, 0.3997089450067802, 0.16150122622683394, 0.1513296462832534, 0.3276297655964302, 0.9468893514901313, 0.9519127480007171, 0.9392594506850166, 0.9381628699920583, 0.932425307385909, 0.9439930269799394, 0.9392623284230589, 0.9430196582154233, 0.9387544979446499, 0.2974958942932836, 0.5396610707501999, 0.5127676311443798, 0.4848722115624232, 0.5219479297043472, 0.5643617380936639, 0.4346681774750787, 0.42627420176910336, 0.4538929800598003, 0.686605110843268, 0.719706215476875, 0.6891942495605123, 0.709287894016517, 0.6974568900685776, 0.7797068050998461, 0.7870174297306205, 0.726622156774104, 0.7281369369237167, 0.21532699546861422, 0.2236202845129429, 0.1952530876212767, 0.16218150711558088, 0.24899484678756156, 0.24931692709536102, 0.16150742745776603, 0.20312075099269544, 0.16448534307392215, 0.17671486148913085, 0.15731769275792995, 0.1498384041932863, 0.13669517306464818, 0.2680197048057369, 0.17546476347120277, 0.1517450095843007, 0.16337738861311424, 0.16050508739186276, 0.17378291443192995, 0.05493776221539681, 0.06742451278835182, 0.0841045050430188, 0.07547065115119622, 0.07527026898568079, 0.06578185255173596, 0.1359436198462325, 0.1885078690492732, 0.3088596748004562, 0.30504540009860126, 0.30082308376240185, 0.29479403609581145, 0.1807318810647206, 0.17557519866575477, 0.3009995971802868, 0.379193727761444, 0.3007932461750865, 0.1090108808473722, 0.15362970651640828, 0.09216504396758884, 0.13127621808558798, 0.10907448460917801, 0.0920959931858113, 0.1983829614668553, 0.1924112194242935, 0.2390415406738159, 0.2326676752917507, 0.2564094563513276, 0.22466972347661052, 0.29078021013677446, 0.26339062850447303, 0.2957895842787087, 0.2671126697856354, 0.23365394919861004, 0.23257420452888677, 0.6229459790515968, 0.6588084138367807, 0.6042580695328638, 0.6091717355092046, 0.6519872799770274, 0.6025786167680278, 0.6496598125016642, 0.6870975787403379, 0.6276201826984442, 0.1138709440698612, 0.10701916891396945, 0.10855698568529515, 0.13994524131857144, 0.11834980825490293, 0.10644597658384336, 0.13133886030995967, 0.1114281334920848, 0.10441502382375256, 0.14958581724517683, 0.15136735462209583, 0.15129082253200465, 0.13640508528749673, 0.1345924287228092, 0.12094674482753309, 0.13963171931302898, 0.130553223291354, 0.13719925137891642, 0.460721857598125, 0.4545222814594857, 0.44112715771291067, 0.4968890288465494, 0.4621645669902342, 0.4784868722162755, 0.5352747017140452, 0.5140451942983431, 0.5153685905391232, 0.28539435007874525, 0.36759554524741433, 0.2767139958161495, 0.3091822585171401, 0.3386232753375259, 0.36043340900639675, 0.3552626058298426, 0.32276969526408106, 0.37102227797356857, 0.18759301623820734, 0.2185286937846319, 0.20356720521061578, 0.20301142454319776, 0.2165558197798706, 0.21648705152968262, 0.22435445466402815, 0.20464175537050888, 0.19408669452213245, 0.4198022428272743, 0.4519586046332288, 0.40547020360718444, 0.5210713540572001, 0.5827738767263417, 0.4337328199866711, 0.4375464724007372, 0.40115497601621286, 0.4936397130070813, 0.1868319349661547, 0.6960770741887159, 0.17664321524740767, 0.17924560394905786, 0.6693139770302593, 0.7618628614012649, 0.7345350675903428, 0.5370374692136538, 0.7121486676881793, 0.716647465151947, 0.6605361577496132, 0.620249949065157, 0.5779365172920112, 0.2189524261174648, 0.3918549556416121, 0.20719385728706052, 0.35239189421395745, 0.20847335568679737, 0.17612361511668184, 0.18044554781313638, 0.17542733496598195, 0.17731688077225338, 0.2028312098465349, 0.18335640669686104, 0.18512769394925177, 0.18758004331073963, 0.1854254747141797, 0.08553277878063004, 0.07820544942039609, 0.07844850974727802, 0.08201245346783925, 0.09705776330869942, 0.07856861701578854, 0.09038596144204314, 0.08156709657803007, 0.08253065293700856]}, "mutation_prompt": null}
{"id": "08ba7ac1-2e82-439a-b63d-5849bf987ea9", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "7a3236f7-3b25-49f3-92cd-5021ea6c3f96", "solution": "import numpy as np\n\nclass RefinedHybridDE_SA_DynamicCrossover_AdaptiveTempScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.5\n        F_max = 0.8\n        CR_min = 0.5\n        CR_max = 0.9\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget) ** 0.5)))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + np.random.rand() * (CR_max - CR_min)\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive temperature scaling\n            temp *= 0.85 + 0.15 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDE_SA_DynamicCrossover_AdaptiveTempScaling", "description": "A refined hybrid DE and SA algorithm with dynamic crossover strategy and adaptive temperature scaling for improved exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": 0.4106960513170151, "feedback": "The algorithm RefinedHybridDE_SA_DynamicCrossover_AdaptiveTempScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.29.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8837285748934116, 0.8755901422576374, 0.8871362501735836, 0.888499367464072, 0.8909939973954292, 0.877036878839282, 0.8856953493179267, 0.8805077458312858, 0.886875911066604, 0.8294687660395343, 0.8250007936072975, 0.8098083607064399, 0.8234378770679311, 0.8175628551192599, 0.8092497237628478, 0.8108386311641459, 0.7986888280475388, 0.8151417738865873, 0.6386724297696815, 0.17125131126279192, 0.6510350719810092, 0.723110594572272, 0.16531429782763007, 0.6856406508117061, 0.7384733012227, 0.6966134080875943, 0.19119057813191476, 0.14767777899015322, 0.1366965751921373, 0.1665280528961779, 0.16828198967439423, 0.1458964453136985, 0.17294538056464348, 0.11839282770961779, 0.15628865987128338, 0.32083476103478015, 0.9800721448309458, 0.9755017497915507, 0.9685930094047404, 0.9466392249101577, 0.9623229846649031, 0.9779513269266698, 0.9708399873732538, 0.9521724441454964, 0.9745388354678846, 0.6104547801131768, 0.7006067900493416, 0.5691658486784021, 0.7212836429302013, 0.6986437873749687, 0.6941027065312837, 0.6475340835658717, 0.7214388822082874, 0.6753378608420646, 0.7801201023118131, 0.8117846181983549, 0.8321702130514796, 0.808015585356933, 0.8169048262703946, 0.2693785881924431, 0.8488949790484139, 0.8295208088204795, 0.8415085647896324, 0.1968985962115618, 0.1636181108930559, 0.4331374704637082, 0.1546808981563791, 0.26183774101841983, 0.19039869996409864, 0.2566162041069838, 0.2195938181069229, 0.2325341233085244, 0.18253213169921378, 0.19871305664413652, 0.17584457314404334, 0.1472163919459254, 0.18913442429975835, 0.18363532395172955, 0.21232085384693333, 0.17962413402228017, 0.24237899003039798, 0.1600719104252134, 0.06679064306673932, 0.12315366341374356, 0.15039093377440638, 0.11790114456497158, 0.1744759449298937, 0.1848737182642155, 0.1541012079992775, 0.20550970254533685, 0.23396326597527162, 0.2749747197805833, 0.3675090118412141, 0.30393390997435976, 0.30329919037403696, 0.5449147462740567, 0.5003103056185324, 0.33101442055236374, 0.4001070560013681, 0.13924048104173103, 0.11600798326938933, 0.17814884554322818, 0.13808035652360306, 0.2508244068278961, 0.1282167885182096, 0.13844826702412516, 0.16823525027686614, 0.20854844025278307, 0.26708927936814786, 0.3545566770452949, 0.2552999992116506, 0.30638581064452175, 0.49447475305235267, 0.34553524086936227, 0.2987239647404428, 0.2708674414686023, 0.2513664426748813, 0.7050941585551586, 0.608061569266442, 0.748028692768651, 0.8065696182347244, 0.6165631959883329, 0.5672802576860383, 0.704584783110952, 0.6298141417604197, 0.7004920236005623, 0.09895515076277006, 0.12000557883795004, 0.09950114948288502, 0.12279271031304217, 0.11149025906363808, 0.10850229631523811, 0.10332340244247984, 0.08509284134498862, 0.10180180567774955, 0.13676705346799733, 0.15963554987901296, 0.13011465618133644, 0.19535030548525267, 0.2979594971777437, 0.1654446707243694, 0.13886369434279244, 0.11611817698886318, 0.27232521856405145, 0.5121307486055083, 0.5712167067466865, 0.4779210527135843, 0.472711543604708, 0.5402186199087682, 0.5545688416945385, 0.5249986254737269, 0.5894034914629263, 0.7416368739963703, 0.3831715840561677, 0.40837345029301075, 0.41419650602506286, 0.4465199304954959, 0.2917046622523639, 0.3353208821381878, 0.2911302864368991, 0.3762172238988485, 0.5028490969835357, 0.19331663638815322, 0.2044329160004622, 0.21279280792791466, 0.20450838849106812, 0.1805673934210016, 0.1853167639456733, 0.2268550823615051, 0.2339374065069606, 0.18630133742284316, 0.7343781437479671, 0.5705629447398077, 0.20188642581826666, 0.22694085371045014, 0.7262959784807786, 0.23853632947303582, 0.7014815944262702, 0.2326626472807909, 0.21135523922474864, 0.15235751978736478, 0.8697063589735715, 0.8060711474745355, 0.17724740316583376, 0.16560840341394245, 0.19590875871768143, 0.17883675769312957, 0.8089423161530964, 0.807920003090093, 0.166633345535951, 0.1666041532493855, 0.1656649599958815, 0.16316563291569586, 0.7918388158324972, 0.2027628320312197, 0.8137160553173088, 0.8440592822868095, 0.2076733700820158, 0.18946620565558459, 0.18253897587280776, 0.18321769019857048, 0.1745995713607057, 0.18797422876191816, 0.18292308622211073, 0.17593966907163672, 0.20302989188064025, 0.20478946535807474, 0.08949076437341374, 0.08118385602853218, 0.09571755721089903, 0.08906538852155976, 0.0843492522665138, 0.07522401791840616, 0.09658581046877457, 0.083939393607121, 0.08497788685756058]}, "mutation_prompt": null}
{"id": "f036305c-7856-458f-87a0-29b8a4a873c9", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_StochasticSelection_DynamicCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * ((self.budget - self.visited_points) / self.budget)))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (0.5 + 0.5 * np.cos(np.pi * self.visited_points / self.budget))\n                F = F_min + np.random.beta(2, 5) * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Dynamic cooling\n            temp *= 0.85 + 0.05 * np.sin(np.pi * self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_StochasticSelection_DynamicCooling", "description": "EnhancedHybridDE_SA with Stochastic Selection and Dynamic Cooling: A hybrid DE and Simulated Annealing algorithm that incorporates stochastic selection, dynamic step size adaptation, and non-linear cooling for improved exploration and convergence.", "configspace": "", "generation": 59, "fitness": 0.43654632685288075, "feedback": "The algorithm EnhancedHybridDE_SA_StochasticSelection_DynamicCooling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.29.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.863939949166884, 0.8559545355256918, 0.8702595435786318, 0.8676369100733428, 0.8503505325958237, 0.8699835668611982, 0.8662368287134742, 0.8731513787674219, 0.8607221904429095, 0.8007511794188206, 0.7981389775053801, 0.790507778045936, 0.8006650343600106, 0.7842922628632154, 0.7719756396021171, 0.8056426504713452, 0.8001920723689525, 0.797782713680846, 0.14728179316095613, 0.16266171043941868, 0.1417344477136665, 0.1386140414226511, 0.1625475208487014, 0.16294053825165322, 0.5008109713126558, 0.15211715201638198, 0.12893832187150744, 0.1322347325995623, 0.11061489375454825, 0.13855163687712624, 0.11271036385576971, 0.1382076490838423, 0.11598557953552313, 0.13801753632430713, 0.12541937032517858, 0.15537715655796835, 0.8924171075747138, 0.9549195708411378, 0.943071341568798, 0.9726011031531537, 0.9184811394265295, 0.8550521728902916, 0.9326094369989539, 0.8979753059696675, 0.9344511928987007, 0.61493506600597, 0.26084038422500555, 0.7033507338644966, 0.5685064157487012, 0.6951832771582418, 0.5377871473596476, 0.2543829303977396, 0.42285083110775734, 0.6859414832377779, 0.8810182330946079, 0.8612726495169274, 0.8922787884779724, 0.8922318277682777, 0.8656763397874166, 0.8837122258421749, 0.8615818574660266, 0.8845280188901556, 0.8837904585821976, 0.2505367796910991, 0.2476988325660604, 0.22873921050137058, 0.7282514781914898, 0.1688287188120583, 0.17088588189042753, 0.2313662775769877, 0.20211903857618185, 0.13575006232658338, 0.19970527364983393, 0.27390151771899707, 0.1852039582024928, 0.18248636053183298, 0.2641925560389441, 0.1939206341858145, 0.20446787866080207, 0.14838906211992198, 0.18739631499065446, 0.721148787572286, 0.32141259904591724, 0.3718305108210235, 0.2349141065853929, 0.49571247812978314, 0.5558244779596417, 0.1689210062065527, 0.5328594705500975, 0.5766550788975491, 0.813217414171552, 0.7594497068091236, 0.48626944362457825, 0.5526689917000319, 0.4204167153995553, 0.3945545405121519, 0.5450706671259486, 0.7946067694850641, 0.6531409449709636, 0.13106414246701203, 0.3629635223247797, 0.3843519858847353, 0.1032326020201022, 0.4000344754491336, 0.23074837667624948, 0.3180484263841181, 0.36904363081286196, 0.20102954449895738, 0.4271200395694893, 0.36254194523035044, 0.4775308319315612, 0.5238800598465609, 0.5199483978723409, 0.46683636454029165, 0.4145289228268364, 0.37000999233108567, 0.42715280943680956, 0.6651109114143595, 0.8400418188316814, 0.8459873801676969, 0.8414291311843948, 0.8513525414310354, 0.8558698567973041, 0.8039825883016376, 0.5811664838832221, 0.7847204799571285, 0.11848308970977417, 0.12592033443142814, 0.11177244251732577, 0.12885676253736889, 0.13286810480934852, 0.15922896919730434, 0.14803786849712686, 0.12583328629115365, 0.13297865718775048, 0.17858435311388132, 0.17376639669567828, 0.25999606104355466, 0.2539352174432139, 0.11947809271321608, 0.1358171474535813, 0.13407737327600933, 0.17154938284303134, 0.12634745254094393, 0.5859670254368263, 0.5595826999060708, 0.7088317719689865, 0.6830660742414414, 0.5124787696270752, 0.5381795625656346, 0.7273350484858401, 0.5592893902514866, 0.5911355124514688, 0.5988748727637687, 0.43642032503882855, 0.5075759259257733, 0.4171445198831579, 0.4359534496655163, 0.4428295231512013, 0.45229032782139456, 0.33119488262414853, 0.5137444786860796, 0.20382771832065505, 0.26544758041065775, 0.19718135978017504, 0.20501885798372965, 0.19215096918990127, 0.1991059464088606, 0.2019568378692923, 0.2226129666138379, 0.21626342198147464, 0.19854323630916226, 0.21647611437677516, 0.2440184575480635, 0.6869982614335157, 0.23044222432436046, 0.21071251809435565, 0.6744447541402242, 0.23364288454906823, 0.2051257852690852, 0.1648672129542771, 0.20814449477136698, 0.17042531825271567, 0.16934895030998054, 0.16618138919726155, 0.3643121996778569, 0.8561309888028883, 0.16299404370045156, 0.8667424524089539, 0.3152468882405579, 0.6862479366523437, 0.88331028541554, 0.8668379739782853, 0.2061315069437567, 0.8341154745884564, 0.8372064966654728, 0.21061720711999, 0.8628759788619537, 0.1829277970687313, 0.17835281454717988, 0.1922613239250569, 0.17968572740429756, 0.18325427297950292, 0.17966494897240626, 0.17003549057866307, 0.15664262749908542, 0.20604329227844886, 0.12061066674648924, 0.09252093742542689, 0.08109006959346166, 0.07418481344453176, 0.08894991954043785, 0.07771559227226976, 0.07860027993609275, 0.07866944227759975, 0.09102773007390974]}, "mutation_prompt": null}
{"id": "6ef0cd6d-f7e3-4240-a1f7-ab5d1442cbeb", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "73ae2454-75d1-447c-974e-bd01a68ff39b", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_DynamicCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.6\n        F_max = 0.95\n        CR_min = 0.5\n        CR_max = 0.9\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * np.random.rand()\n                F = F_min + np.random.rand() * (F_max - F_min) * (1 - (self.visited_points / self.budget))\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Dynamic cooling\n            temp *= 0.85 + 0.1 * np.sin((np.pi / 2) * (self.visited_points / self.budget))\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_DynamicCooling", "description": "EnhancedHybridDE_SA_Elitism_DynamicCooling: An improved hybrid DE and Simulated Annealing algorithm with dynamic mutation and crossover strategies and a novel cooling mechanism.", "configspace": "", "generation": 61, "fitness": 0.3928746385220495, "feedback": "The algorithm EnhancedHybridDE_SA_Elitism_DynamicCooling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8210454140896937, 0.8325078782678698, 0.8256735100089828, 0.8426357601592973, 0.8321869776308283, 0.8392184597374349, 0.8442264261144246, 0.8470901110652783, 0.8311381463099075, 0.7379355147505285, 0.709440498274601, 0.7094196438592031, 0.7128522293721546, 0.7193329237350848, 0.731516507534988, 0.7278002089648242, 0.7351179775572012, 0.7241617214624667, 0.5501831783622753, 0.14648319092737472, 0.15227356761452593, 0.6041442054859344, 0.5322068381592479, 0.44675355828614915, 0.13698175345132946, 0.1576961108163063, 0.1636761049890041, 0.14942224418121963, 0.32018575581387854, 0.14903489938539283, 0.4819967838568352, 0.5148867128247713, 0.13641758053657171, 0.13692905201381478, 0.1381214785279844, 0.12232701087900133, 0.977358701434948, 0.9655487033975293, 0.9671171327959136, 0.9909578751630715, 0.9864949051641156, 0.9626588051311438, 0.9758424715835042, 0.9715947783234358, 0.9636903940798452, 0.650543390895138, 0.6008683872998712, 0.5815706110866106, 0.6382923751454256, 0.622093390445132, 0.5947424667761874, 0.6207701927019007, 0.5993881846150579, 0.6243446525771397, 0.7196949260530243, 0.717217254385998, 0.7593090288893487, 0.8264345257212133, 0.753873238169174, 0.7423214617152589, 0.704656914711655, 0.7675424879040088, 0.7440587438411395, 0.23084001015224342, 0.2685461491993607, 0.24729139880213347, 0.21981396673455111, 0.1816578889384053, 0.22514927504167093, 0.22434965436590004, 0.23331644623282577, 0.2527570601351248, 0.18096999113827728, 0.19089081638390193, 0.2078526541564989, 0.3461824340264137, 0.4651200229381317, 0.2710492166933415, 0.24858750959379428, 0.28780991989676197, 0.25114213618228287, 0.21195469327433825, 0.21002351860962665, 0.11965575351444435, 0.25406303981358447, 0.2339019187243908, 0.26183763168382534, 0.30080499407131245, 0.25478575814345283, 0.21484165119033882, 0.4057827982988377, 0.3418735673691461, 0.24939660634495053, 0.32662539733424634, 0.30711234496664397, 0.27889320429947617, 0.4352389686726833, 0.3882411181510129, 0.44792979615363704, 0.060850342170469585, 0.15931985396536585, 0.1899152053919031, 0.06449275748517846, 0.1384703792162012, 0.12695738780694887, 0.1504112628575287, 0.1180613005634481, 0.13337927787929615, 0.3058810887311232, 0.252823469374051, 0.26795394724347377, 0.30741953289005164, 0.34699412858133594, 0.40602597309589206, 0.2852292870427896, 0.22574233592571435, 0.2533875911562734, 0.5945735185485516, 0.6989991161507039, 0.6600237815695411, 0.7201956885039842, 0.6393288275236455, 0.6090344522885173, 0.6831725698839601, 0.6645093237919933, 0.6317589125347016, 0.10746653271351114, 0.08434665902609884, 0.13256695741935087, 0.10734625768276496, 0.0983305778213931, 0.1339839500803378, 0.11893565789150051, 0.11279509077130823, 0.08632925934143132, 0.14865159229481373, 0.1411099764704984, 0.16539977117183713, 0.2697345408534255, 0.15361290905633795, 0.13896555817113598, 0.17147266269962325, 0.13745195074733907, 0.1483784125362536, 0.4471973562759828, 0.49898880443366056, 0.37338685987431297, 0.4423426784981842, 0.5215001530160961, 0.43325868346575147, 0.5680038456344951, 0.5921280757177907, 0.502159603641952, 0.36736608867039033, 0.3044824706034862, 0.3492808878505699, 0.39684503233145885, 0.339744141372224, 0.38717518771661896, 0.3498839788512601, 0.38492521400316615, 0.4430919516487588, 0.1843472695986076, 0.17963036732715465, 0.17157948000959022, 0.18399803951889648, 0.1820676948069717, 0.1810148558344965, 0.2062345405442677, 0.19004340699646116, 0.18926225630866178, 0.21066073908520544, 0.35040570871246546, 0.5869134204437385, 0.21257316264051263, 0.5141535581690269, 0.5346644170746735, 0.21989236882578567, 0.5787319989578777, 0.18842469079545254, 0.15244242901528926, 0.1633843868876247, 0.766985749996193, 0.15784952606263447, 0.17890483482236597, 0.7346753310267882, 0.1872202348482661, 0.8109544768920032, 0.7455350771067057, 0.1659194888108816, 0.7447884823250162, 0.1998993506316813, 0.12585653889510484, 0.636999036784105, 0.19988671565369498, 0.7238053162563801, 0.7912296557458844, 0.20671583749981493, 0.17442786896051254, 0.1804957256640799, 0.18967838524802527, 0.20152884676123362, 0.21128427627205082, 0.17884614610630256, 0.17775669959534135, 0.17843091745516393, 0.1830277154757679, 0.07132203380798252, 0.076736126739549, 0.07358653031891971, 0.08443671594977531, 0.07151785488883611, 0.0818035889565385, 0.08625492484522945, 0.07253470497334258, 0.08775652506524545]}, "mutation_prompt": null}
{"id": "0e2dfde0-81a3-4cc9-b7ae-a144ac773471", "solution": "import numpy as np\n\nclass ChaoticEnhancedHybridDE_SA_Elitism:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def chaotic_map(self, x):\n        return 4 * x * (1 - x)  # Logistic map for chaotic sequence\n\n    def __call__(self, func):\n        F_min = 0.5  # Adjusted based on chaotic map influence\n        F_max = 0.8\n        CR_min = 0.5\n        CR_max = 0.9\n        temp = 1.5  # Increased starting temperature for broader exploration\n\n        chaos_factor = np.random.rand()\n        \n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * self.chaotic_map(chaos_factor)\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.9 + 0.05 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n            # Update chaotic factor\n            chaos_factor = self.chaotic_map(chaos_factor)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ChaoticEnhancedHybridDE_SA_Elitism", "description": "An improved adaptive hybrid DE-Simulated Annealing algorithm with chaotic map-based mutation and elitism.", "configspace": "", "generation": 62, "fitness": 0.42078728417166184, "feedback": "The algorithm ChaoticEnhancedHybridDE_SA_Elitism got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8154512826844752, 0.8155637527570043, 0.820705960305941, 0.8206461880497594, 0.8187741783425797, 0.8260420968300088, 0.8180999185178124, 0.821645990823455, 0.8235619076753322, 0.7585615401976704, 0.7531922733584469, 0.749729643135383, 0.7590113727237637, 0.7465982721031251, 0.7614189225996455, 0.736017275061362, 0.7560755572790258, 0.7470752017643556, 0.5219427824481596, 0.14815889369028123, 0.575166925377611, 0.16585883258372958, 0.16687334060844405, 0.15492566159173293, 0.5826698198775324, 0.5272777476085317, 0.49671070938969375, 0.5217147660460227, 0.15457228627513775, 0.1604909761329274, 0.14348029110836324, 0.5626985140079122, 0.5310274515422084, 0.1528661388095175, 0.15752220377141657, 0.16088462959611516, 0.9721317768505894, 0.9719557210348538, 0.938239172873689, 0.9525314352659804, 0.9729249664264638, 0.954558645873055, 0.9649832272660818, 0.9811090151383258, 0.9321068049753775, 0.6641222161585124, 0.6531824674655404, 0.668792942480865, 0.6639513487076621, 0.6781195765949946, 0.6308940097620821, 0.59208640321853, 0.6442284668525731, 0.6815289713413936, 0.3663233207908856, 0.7361194027659286, 0.781485583779101, 0.8224510900771151, 0.7481245765147625, 0.7962333376071657, 0.8224107884414911, 0.768552373978832, 0.8299291367126408, 0.34330846403258986, 0.28454672521140423, 0.24390776544958048, 0.5270618882674862, 0.2698441432457527, 0.23348462357548105, 0.24339219289555292, 0.3285797900262668, 0.4305608473723237, 0.1523815428358386, 0.20495216164613983, 0.18681094410515686, 0.3359852583909594, 0.22935470515602163, 0.29951231168298487, 0.24233959645360148, 0.3195558761922276, 0.24680385085616985, 0.3972487480295773, 0.22935368438060055, 0.3391978506036034, 0.2107753249838369, 0.21121531770532487, 0.281118173982965, 0.2606410100889416, 0.2783856981801236, 0.2928416353093207, 0.3605010775801344, 0.4120593776402841, 0.27576935527493085, 0.23008428144964377, 0.40339014012957586, 0.35917989912337456, 0.39764465441329755, 0.5093656330667772, 0.492498223924724, 0.2666601543803627, 0.07557370880739822, 0.15843820214053994, 0.25932875675307776, 0.15760061568812067, 0.09348953063771892, 0.1414565337710446, 0.11042280323934595, 0.15220151230459156, 0.3545439400762981, 0.347102613119768, 0.3360323039615929, 0.376380706240373, 0.3977372356999068, 0.3626427873063308, 0.26200551187524446, 0.2621352188058298, 0.2399171157030784, 0.7081523687879618, 0.7000753756116063, 0.7287100449388304, 0.7450356277328902, 0.6711864515270443, 0.6887104217861691, 0.7035814440843564, 0.6945290539184696, 0.6706892424741986, 0.11112053618665707, 0.13343985271087933, 0.13137429123917788, 0.12324184017131834, 0.12044879550438103, 0.10945715744940188, 0.11934380373493547, 0.13078797313494506, 0.1016290464184123, 0.2037914446568827, 0.15353414147350197, 0.1392056437314415, 0.15368099552276093, 0.14068562672976537, 0.17036245914103365, 0.14131649407618718, 0.15248223327447408, 0.16085756717135047, 0.5154296147206183, 0.47839076662405455, 0.5199962004676622, 0.4903816873818907, 0.5051778311249306, 0.546181779071536, 0.48432889678372204, 0.5091323721226626, 0.6203905905258646, 0.3454094615237796, 0.38215121082378956, 0.38437093142309064, 0.3387915144212923, 0.33224471851243476, 0.35351493134177703, 0.41317763294500387, 0.43661142466172775, 0.39077610024852527, 0.1943257410704482, 0.19745417135761212, 0.19940404844084636, 0.19458092493888357, 0.2025067842133259, 0.19084690280610073, 0.20442785148659992, 0.21477582487075975, 0.19572169879628065, 0.19610747109740234, 0.6382833914929333, 0.607267981746693, 0.6587264698597979, 0.2846396750356427, 0.6351118823813289, 0.19768167160513617, 0.5522851556222967, 0.2072042413537185, 0.822683827666121, 0.17928527541754824, 0.6936306176944138, 0.8206667788523171, 0.7814896432969543, 0.7906979774496157, 0.18253277316751537, 0.7546248622810915, 0.739071155191458, 0.7872376373016372, 0.20277655341199752, 0.7600335785381136, 0.7148492827836928, 0.2094370325356596, 0.20267146008997583, 0.20755536809088126, 0.20655215938673388, 0.20538092109749406, 0.16292906310942, 0.19193692550517039, 0.1759099821651975, 0.18740799533315833, 0.18979404699278957, 0.1841485186364895, 0.2084098853879991, 0.16992278149776463, 0.1856580177519962, 0.07464765923493488, 0.08499569487228253, 0.07931695977456077, 0.0821109046509444, 0.07342485512765906, 0.07884507990449907, 0.07893429418473874, 0.07458456556702953, 0.08124765363774678]}, "mutation_prompt": null}
{"id": "3728a9fd-8b25-405a-be0e-ea9b03c01a72", "solution": "import numpy as np\n\nclass DynamicHybridDE_SA_AdaptiveElitism:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 40\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3\n        F_max = 0.8\n        CR_min = 0.7\n        CR_max = 0.9\n        temp = 1.5\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (0.5 - 0.5 * (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.normal(0.5, 0.2) * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_indices = np.argsort(self.fitness)[:2]\n            new_population[0] = self.population[best_indices[0]]\n            new_population[1] = self.population[best_indices[1]]\n\n            # Adaptive cooling\n            temp *= 0.85 + 0.05 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "DynamicHybridDE_SA_AdaptiveElitism", "description": "A hybrid DE and Simulated Annealing algorithm with dynamic scaling factor, adaptive elitism, and temperature-based exploration for refined convergence.", "configspace": "", "generation": 63, "fitness": 0.32083115065940965, "feedback": "The algorithm DynamicHybridDE_SA_AdaptiveElitism got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.9121504887887654, 0.40686536806819207, 0.909893345743747, 0.9129131577170946, 0.9053008471003812, 0.9057610051362182, 0.9127927197846429, 0.913338391481316, 0.906351846998517, 0.8626247237107909, 0.867393903396014, 0.8442002386861425, 0.8498577537843796, 0.7890309981884381, 0.38023465491160713, 0.8614848125914676, 0.864663237208662, 0.8451037577769392, 0.1593540621738665, 0.15414644008452638, 0.02944426855189486, 0.16679970087563, 0.17920874780599005, 0.09235872923171284, 0.1872627150649947, 0.12414809429822782, 0.18471043404188026, 0.13156957270396286, 0.10050801860241321, 0.13869437631942638, 0.09291720157251293, 0.09452645013899763, 0.1302974246063664, 0.15471002653931387, 0.11389378239867032, 0.1548728595559019, 0.9470584213036257, 0.9861004108913232, 0.9185972204099893, 0.952035130689775, 0.954229048700826, 0.9543695015968916, 0.9365309195311213, 0.9383967961142456, 0.9042650237357748, 0.33963969525131676, 0.536362012091738, 0.22752105627464447, 0.3788939492469473, 0.2989804737267667, 0.36952835063407496, 0.08892219229574416, 0.1399317753431103, 0.3102549720117529, 0.22288376933342668, 0.22849101430413088, 0.8900571154202214, 0.9073065157489668, 0.8979601195413933, 0.2802847645680605, 0.34087746635581606, 0.9105881928708851, 0.891123475455987, 0.15560185811525495, 0.24669341083487872, 0.11800809614541852, 0.16071763820707097, 0.13556015961597934, 0.21108113518485538, 0.17732504903707413, 0.5050677237304424, 0.26516334987322776, 0.210972767748296, 0.19512103858944796, 0.010125428997537655, 0.2307821535454203, 0.13581000698369694, 0.12071248187855521, 0.1432393315728816, 0.31984522580845665, 0.23529403515616343, 0.10799519543596836, 0.10395795801438468, 0.07419743049684568, 0.05274273277016561, 0.010413106749402101, 0.05945458849767493, 0.03703026326442305, 0.016185681608658298, 0.2902591785283718, 0.08595740163195298, 0.12164382320852107, 0.1902120281102766, 0.1777744085763654, 0.14088614097933405, 0.07875191206595422, 0.10755185224579, 0.23892095873965025, 0.22191882286156517, 0.07618740244535527, 0.08516773563216484, 0.0991970265691039, 0.18046698178674414, 0.2053557488823109, 0.2878687780016599, 0.17280198062045382, 0.19279393064166184, 0.15064901653089147, 0.10120361646452225, 0.24669605928762606, 0.3681592082790164, 0.2181608614765259, 0.161853618594749, 0.07701413229985754, 0.24535997731344128, 0.43158124809586285, 0.12300629267594254, 0.6063027156706209, 0.5666547775782274, 0.5786905614744982, 0.4965341436617762, 0.7193016203138591, 0.6963811537547809, 0.6060198057291462, 0.7602964434242622, 0.6088622698201006, 0.12797969172942325, 0.17441233476467566, 0.13076217097532372, 0.09372201570103045, 0.1519196058206671, 0.15546244083471594, 0.11471332137678147, 0.1073350273734126, 0.08833172393837119, 0.16203884694986026, 0.12690155612229337, 0.1643791029243068, 0.15045653058484043, 0.15541655515131825, 0.12744491591775475, 0.11509956245911579, 0.1433635471791076, 0.13034050013164378, 0.4734993896109345, 0.31057391005690327, 0.3541637731783932, 0.3899473788020389, 0.5554214076990234, 0.41187323069421444, 0.5078765251952646, 0.3748151552446344, 0.48691151025992085, 0.3786899389905045, 0.39680686680766175, 0.32219625755286585, 0.2785717398743175, 0.43018735523635765, 0.3614326243044207, 0.29878990576861486, 0.21577284868924163, 0.21813493243957116, 0.1988216590686921, 0.1726607039440038, 0.18512317651361843, 0.18562003141727335, 0.20066758270443474, 0.21544878251681143, 0.16614116831144243, 0.1786400267402818, 0.17796417803351539, 0.24759733791201832, 0.2259070355478512, 0.2142194707800985, 0.2109023762265103, 0.2223135024823788, 0.2107967096582669, 0.196116627348498, 0.21221057061351478, 0.18505454001841581, 0.37137277998640816, 0.1666259498097259, 0.17233578546158757, 0.177810695307979, 0.5153522064000351, 0.9076523077210857, 0.14838495546973118, 0.4647973116640597, 0.1453713997139392, 0.15424048445726568, 0.21214699776189927, 0.32107192166187315, 0.29448063026691473, 0.35189889918025963, 0.5199148793953461, 0.15683601626045673, 0.12803948355357175, 0.21157939783084911, 0.16575281120095697, 0.15252061098632275, 0.18489035076387794, 0.17735310897686285, 0.18904162331101904, 0.18039846158937778, 0.1669969374217537, 0.19988444902154723, 0.19776875557697027, 0.08940106967432948, 0.08944400140075415, 0.08402727454551062, 0.07645720744092455, 0.07042944284966468, 0.0838899334068296, 0.06782721975559436, 0.08782426624833828, 0.0776442152584208]}, "mutation_prompt": null}
{"id": "523e3e22-ec16-4b05-b734-fc63f2fba5df", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "7432e891-9dba-46bb-9cb0-81e0efeee5ea", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "5174420f-a408-453a-acf0-d0fff5ef5ba5", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "c630afea-7915-4c21-ba14-db0713b46b6b", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "07f154f4-d272-4085-a954-4eac2704ac51", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "bb68990b-9298-4882-9085-d76cfe20ab85", "solution": "import numpy as np\n\nclass AdaptiveDE_SA_RewardPenalty:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n        self.reward_penalty = np.zeros(self.initial_pop_size)\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.5\n        CR_max = 0.9\n        temp = 1.0\n        adjustment_factor = 0.05\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n                    self.reward_penalty[i] = max(0, self.reward_penalty[i] - adjustment_factor)\n                else:\n                    self.reward_penalty[i] += adjustment_factor\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.85 + 0.05 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n            # Reward-Penalty adjustment\n            for i in range(pop_size):\n                if np.random.rand() < self.reward_penalty[i]:\n                    self.population[i] = np.random.uniform(-5.0, 5.0, self.dim)\n                    self.fitness[i] = func(self.population[i])\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDE_SA_RewardPenalty", "description": "Adaptive Differential Evolution with Simulated Annealing and Reward-Penalty Learning for enhanced exploration-exploitation balance.", "configspace": "", "generation": 69, "fitness": 0.13078296351700572, "feedback": "The algorithm AdaptiveDE_SA_RewardPenalty got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.22862321884974557, 0.21143182988106435, 0.1777081887980797, 0.18699041105250003, 0.1944589674843783, 0.19376165502215537, 0.18024649605192533, 0.1885467991283304, 0.16486971502727887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04947395869027549, 0.0433530863108299, 0.05783260464143425, 0.04747119053115767, 0.04467604748611553, 0.043929732266870136, 0.07202880574626191, 0.055630593846056176, 0.04240891564831506, 0.03490572932148228, 0.033147963080280896, 0.03991844826208324, 0.03275447048883162, 0.036043395577878945, 0.060448479950343414, 0.03549121195992033, 0.031121339277017657, 0.02985151259113883, 0.9462905372964441, 0.9403751486144571, 0.9549867059419885, 0.9611912369984592, 0.9520723162030718, 0.984260891577919, 0.9525060591489067, 0.9704008906084557, 0.9471529101919914, 0.11121662854282732, 0.08241419276093054, 0.11413270970156209, 0.10975303101812117, 0.08402143776253868, 0.06166568496297897, 0.07885137632119155, 0.085343462776307, 0.07735676809843339, 0.15762487953645488, 0.12962385651205477, 0.1465837472647059, 0.149187378518562, 0.12417237569211015, 0.16202562711473079, 0.11899887957087141, 0.14222596243535046, 0.1381416361569069, 9.999999999998899e-05, 0.0038801791261295904, 0.00304152058937035, 0.06865927100011393, 0.00990239470286891, 0.009545076020775367, 0.032936088348582415, 9.999999999998899e-05, 0.01738777072707276, 0.03117651068705163, 0.012094232960046414, 0.02433234441217469, 0.014057054784121337, 0.0003259359740681589, 9.999999999998899e-05, 0.012563239074216859, 0.003163113731005196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04670053537585339, 0.06056308591439252, 0.04131938893958065, 0.06654034146850718, 0.03333060486541639, 0.03890261710697018, 0.054031010896876785, 0.05427596042884364, 0.045551907766313904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006555793594445802, 0.013197761425841947, 9.999999999998899e-05, 0.0010760189980235646, 9.999999999998899e-05, 0.002398078208575294, 0.01255159281660323, 0.00758202141289499, 9.999999999998899e-05, 0.19057830987266733, 0.19481805397207486, 0.2029804115461128, 0.17870699635339937, 0.21266202316128402, 0.249288459895587, 0.19430519856081385, 0.19002087418618296, 0.21593683965698052, 0.0444918230397614, 0.06539704727775608, 0.04360511982120441, 0.042301855264705424, 0.05489399269037276, 0.057745881426371715, 0.05110647377068578, 0.05021473849589342, 0.044169882421762674, 0.15830115470077777, 0.14641780122330583, 0.14051251008999166, 0.12595121609028248, 0.13650506544459673, 0.15131200492053176, 0.1292036819672141, 0.1472998117224419, 0.142469741363201, 0.16142471327135077, 0.15601938782949365, 0.17562168624179086, 0.16473840892949665, 0.17323582598255105, 0.1608177600701649, 0.20423978040446522, 0.18200552665742575, 0.16610969468340375, 0.11056288971777994, 0.10993867142355573, 0.11976368577485008, 0.11487340508706512, 0.12691888210238944, 0.12060475329497278, 0.1066504572483773, 0.1259885220241156, 0.1242623066694194, 0.15129135287459827, 0.15804525922350787, 0.15205406229581186, 0.152155079291308, 0.15736104071872903, 0.16085912419300863, 0.1490929918509004, 0.180962817394979, 0.15322656153016356, 0.15142355425312926, 0.1513540965369311, 0.158857890897654, 0.1482097526304026, 0.1435417204232624, 0.15292535143165698, 0.1477561293143448, 0.154687959804101, 0.14334593466983903, 0.16119258979898676, 0.20129608492449236, 0.1633645481418502, 0.1645608637278958, 0.1488271277387737, 0.19273910143585626, 0.12513538055270235, 0.2262618523520763, 0.18107238827375505, 0.1335756156519481, 0.200620600691931, 0.24842013070124402, 0.19148320829721077, 0.15464965792343033, 0.17811541772893558, 0.17346808765230548, 0.20551521074308898, 0.17925843372601757, 0.18153058821816614, 0.17890723040930534, 0.18089971626370605, 0.18845129583734022, 0.19442448247535138, 0.207017427549962, 0.1835348147608502, 0.18606544778180067, 0.18512087129051935, 0.06362950154189095, 0.048482858041872356, 0.05008407281048366, 0.04775512844936747, 0.05908368105341055, 0.05351927414233926, 0.0587887546708904, 0.04370548705659927, 0.04569663191710138]}, "mutation_prompt": null}
{"id": "dc097b8a-f010-4460-97ad-ed7edd332962", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_DynamicMutation_TemperatureExploration:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3\n        F_max = 1.0\n        CR_min = 0.5\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling based on temperature exploration\n            temp *= 0.85 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_DynamicMutation_TemperatureExploration", "description": "A hybrid DE and Simulated Annealing algorithm enhanced with dynamic mutation strategy, adaptive elitism, and temperature-based exploration for improved convergence.", "configspace": "", "generation": 70, "fitness": 0.44775801720394, "feedback": "The algorithm EnhancedHybridDE_SA_DynamicMutation_TemperatureExploration got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8522817556465276, 0.8531766683405921, 0.8546281493107306, 0.8603033218937748, 0.8565752904381848, 0.8458706439090818, 0.8550812565617694, 0.8654001175329704, 0.8532696816465398, 0.7629769947092417, 0.7584484669257321, 0.7714585770333433, 0.7847531385180402, 0.774203419206357, 0.7649098952619986, 0.7651897482662713, 0.7780618118066764, 0.7654819397498389, 0.5403372071437799, 0.16410485870758895, 0.16420062523775536, 0.5905984672912427, 0.5396012430703621, 0.5556463975927679, 0.16199525132460857, 0.4795209304520883, 0.5567404240115434, 0.15661298091084885, 0.12776869508542454, 0.1551979773958987, 0.15590994306107864, 0.15340837700268017, 0.13966157684320346, 0.13597547895828155, 0.13733984508930075, 0.15861518135539265, 0.9587725704744717, 0.9372904149624648, 0.9185272603862835, 0.9312728109193403, 0.9503972509980134, 0.9636261745133742, 0.9404911938559545, 0.982285113760372, 0.97965432336228, 0.6798236748432017, 0.705040240660587, 0.6971161165668311, 0.7077094963841787, 0.6743355994782378, 0.7110194981321052, 0.6695361591398685, 0.6797151157780237, 0.6539907985810889, 0.8167129397955873, 0.8130596194769548, 0.8490920897372694, 0.8443663050092463, 0.8255549813931378, 0.8660756694735601, 0.8273304111656741, 0.8254161632572761, 0.8513087460559285, 0.2518986187052139, 0.181306816575318, 0.23882702244708998, 0.16277719996968443, 0.2730880878922486, 0.2470315128432452, 0.37159173642899945, 0.5793281303061619, 0.6563587030636432, 0.21205423800678036, 0.1983948479825911, 0.2969985830994748, 0.1564386604267467, 0.28356488306515015, 0.2228892865194575, 0.5126994882736595, 0.2567651612644394, 0.18446988953008392, 0.39435949518822466, 0.1307060741836784, 0.5393366617173347, 0.6499301328723825, 0.22605752795773004, 0.38083120557077066, 0.570942832441066, 0.5555407803502366, 0.5541990400764465, 0.5481819652316037, 0.5875561678545935, 0.6824367014011665, 0.2598134058845427, 0.5778114112695235, 0.5624767319562014, 0.7378271276431148, 0.710921557754856, 0.7137068628250434, 0.14468416164419196, 0.2513291430185908, 0.15443569062647422, 0.2901955127741198, 0.33969147027627944, 0.08289259953647865, 0.3097270011770007, 0.14645915431096346, 0.1741973787833575, 0.38147587896895685, 0.41018269122171136, 0.39196787492364404, 0.49479187480497544, 0.44637779928909604, 0.44884065578215615, 0.3425746981939798, 0.39537410092447833, 0.42904904240676944, 0.8063816397514563, 0.7464457352753182, 0.7528209995437232, 0.8230388097743572, 0.6927853417795389, 0.8081972534594897, 0.7092846478615416, 0.7906505730280656, 0.6148897692070994, 0.11481747981668489, 0.5018482326736684, 0.1223836488192328, 0.15962274992289582, 0.14631585438695782, 0.12949787985899586, 0.13529715863856617, 0.1288965800820412, 0.14888784811221667, 0.15964739806792294, 0.16320810523842288, 0.2552023650306322, 0.2902595520635556, 0.16261249775640996, 0.19598235286193333, 0.12624965696850776, 0.15203501296530264, 0.15039774395491423, 0.6203857246014706, 0.5760513678656249, 0.5418552990899288, 0.545281739893666, 0.6361347419351061, 0.4930143694677924, 0.5648711871023824, 0.6685352693389499, 0.686050343085943, 0.39556289773728226, 0.37518093783746176, 0.4033286636036689, 0.36443666467496205, 0.3570870602024163, 0.35178792711313345, 0.42753445465078477, 0.46964840087303306, 0.4632899420266743, 0.1941263099410232, 0.2053622581384268, 0.21190835989179557, 0.2064746638596151, 0.19449533420784204, 0.21698562028802393, 0.18935766181960156, 0.19906362374892483, 0.20308085943719034, 0.7076301209696019, 0.6925284819888526, 0.2352676841124789, 0.19224986455242277, 0.2399227736308761, 0.6875481925134022, 0.6746822400924086, 0.20511634672881907, 0.5616545379741944, 0.8651868563677898, 0.8379768604450378, 0.8436669542546578, 0.19280026236805548, 0.16381431174506556, 0.17020509797983396, 0.1931761753889203, 0.7944419419609788, 0.1698710462293992, 0.16769357051572753, 0.1676873708006884, 0.6883552442859641, 0.2086301439896071, 0.20779196081909668, 0.8112191581797423, 0.21205803047251703, 0.15223481168690978, 0.2099237616300199, 0.16657361386469294, 0.1974337076419277, 0.18561697594035254, 0.1936163967806701, 0.16268978510577492, 0.19488522829296173, 0.2008378423456827, 0.19197093590745584, 0.19003896175175272, 0.07069329883729059, 0.08111592118984967, 0.13246332002982586, 0.07342315056582849, 0.07365013035738754, 0.08561529204958063, 0.08063562452032824, 0.08759324775717992, 0.08680355940269124]}, "mutation_prompt": null}
{"id": "f9f01690-92ca-4596-bd68-a443c50789db", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_DynamicMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3\n        F_max = 1.0\n        CR_min = 0.5\n        CR_max = 0.90\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min) * (0.5 + 0.5 * (self.budget - self.visited_points) / self.budget)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.85 + 0.15 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_DynamicMutation", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, dynamic mutation strategy, elitism, and temperature control to improve convergence efficiency.", "configspace": "", "generation": 71, "fitness": 0.42695083513331555, "feedback": "The algorithm EnhancedHybridDE_SA_Elitism_DynamicMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8468481962219068, 0.8582861620799739, 0.8556574907377223, 0.8675227955458111, 0.8644016570131265, 0.8629868616945202, 0.8657887710157136, 0.8571344170607134, 0.8549001074556872, 0.7790898256053456, 0.7578716068348393, 0.7692564044356379, 0.7692436149119153, 0.772425190117879, 0.7931866598652862, 0.7606071851774746, 0.7663935930425907, 0.7686678614662599, 0.1609225792414054, 0.5347520497923496, 0.616781383881082, 0.5568864659539783, 0.16933985921633188, 0.15958122566069266, 0.5673540395929498, 0.16502667944310956, 0.6235485609156719, 0.5510638442283475, 0.13755347601673562, 0.1477786005011834, 0.23361342670680119, 0.15727249837918533, 0.15065418625515425, 0.15616693318560215, 0.16756470838378135, 0.39685443936219666, 0.9342641032412499, 0.9636587152305989, 0.9509369718236615, 0.9695900137108411, 0.9296528930272789, 0.9478631131706993, 0.9384816741339226, 0.9600163728578908, 0.9647551644007963, 0.699048349321174, 0.5832974190445745, 0.5069655835293556, 0.7100889598737042, 0.6969028923554502, 0.6972589482517995, 0.6945179680106035, 0.7099703355405266, 0.531913574348593, 0.819413676128765, 0.8480423073560179, 0.82248384848985, 0.8498746885053506, 0.8507097829019313, 0.8707772659211659, 0.8185515512146618, 0.8187357163598497, 0.8525576332962261, 0.16564422413305546, 0.19527272823050779, 0.4561201607118601, 0.26722735715138146, 0.1940585916957719, 0.23924069044955376, 0.5289273756509646, 0.24699310705560584, 0.25955490041432727, 0.2033789212109589, 0.12799209437597914, 0.2542391807373334, 0.1666499951445115, 0.6131317303796444, 0.22285148484843453, 0.20513872077781892, 0.2573259766663555, 0.22016915769229073, 0.31054234340399833, 0.3057706457201944, 0.44542797330174533, 0.326111133467999, 0.15550777791430137, 0.34098592722814114, 0.15293124011783854, 0.27403911405580206, 0.26417185608568783, 0.5504512710383183, 0.5296655901367645, 0.5588374154404399, 0.27314830890930797, 0.3574423222258025, 0.5162639554051405, 0.6225385685335678, 0.42648198541263604, 0.2920590524204163, 0.30143335429594686, 0.08875292642368826, 0.19403993569914924, 0.2155898131313897, 0.14314660223261855, 0.1608940896868486, 0.2703237997968416, 0.21243440023468907, 0.19153935915180187, 0.3125231868799555, 0.31635659141118366, 0.2367968174456948, 0.3998158968047121, 0.3399138485427198, 0.4505570204070386, 0.36690308664632065, 0.3839549246571712, 0.33317423869938934, 0.734748574575516, 0.791699113903712, 0.7021651192391218, 0.7584152416862748, 0.6650505186238596, 0.8110935607331384, 0.6881856480633872, 0.651199823846438, 0.7428173822067652, 0.11795939880587125, 0.11880134605874226, 0.15709987183520602, 0.11952275693397585, 0.13609407786780936, 0.11749050959436957, 0.09034656703005117, 0.12215318805544317, 0.12999201726156684, 0.19971917806644057, 0.14765143025060767, 0.2730155272002368, 0.23159049957661182, 0.6078339673401805, 0.15563972528159487, 0.14971691821232092, 0.25654976906920424, 0.13616149068746197, 0.5991078076718417, 0.557413604648051, 0.6456573384766385, 0.563774138758182, 0.5459173846477663, 0.5096978866962865, 0.5406417124216392, 0.6888019417370446, 0.604140880193396, 0.41168583330932396, 0.41932054148190023, 0.4505232282007051, 0.39120571153853767, 0.410185871467048, 0.5368184206227294, 0.36095146353994756, 0.40118989482194234, 0.3627565780469356, 0.18379333366276052, 0.2033150253671373, 0.19726470025217369, 0.185919121836147, 0.19037141749914688, 0.20483837612475397, 0.22262654014804262, 0.21838988519470381, 0.23166000549778842, 0.234454671654852, 0.6241123691161479, 0.23672336734719923, 0.7221059297703774, 0.6083720056801989, 0.716435515098532, 0.23001001991173953, 0.2373633993346146, 0.21467485400007635, 0.1931454459137456, 0.8336659243114312, 0.2011905253792171, 0.18698531721068956, 0.16144541571582982, 0.873151052466912, 0.8212345886386674, 0.19692433117534458, 0.1730259672700617, 0.1671310778514531, 0.21054776659911434, 0.8466014507976949, 0.2076110578892587, 0.15429287861379926, 0.8209925689690996, 0.21089102583101704, 0.15365088697700735, 0.21003015859055219, 0.18360146939147304, 0.19139535390804274, 0.18096708894153368, 0.17182395365147274, 0.18393526479000832, 0.18860745910616883, 0.17991197462042585, 0.17409075145787734, 0.18916369843269665, 0.08180620349962697, 0.08552965591010797, 0.09083082654094232, 0.07732930343953415, 0.08691016159888565, 0.08378425144935986, 0.08571221532906492, 0.09282134540242992, 0.08795232400627462]}, "mutation_prompt": null}
{"id": "3a807ee0-56b2-49a9-a475-296cb3704eec", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "70bca930-0134-4ffc-a4ad-5a6a90030ad1", "solution": "import numpy as np\n\nclass ImprovedHybridDE_SA_DynamicScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 50  # Increased initial population for better exploration\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.5  # Adjusted mutation factor range for better diversity\n        F_max = 0.8\n        CR_min = 0.5  # Adjusted crossover probability range for more exploration\n        CR_max = 0.9\n        temp = 1.5  # Increased initial temperature for broader search\n\n        while self.visited_points < self.budget:\n            pop_size = max(10, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling with enhanced decay\n            temp *= 0.85 + 0.05 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ImprovedHybridDE_SA_DynamicScaling", "description": "An improved hybrid DE and Simulated Annealing algorithm with dynamic population scalability, stochastic mutation factor, elitism, and adaptive cooling for robust convergence.", "configspace": "", "generation": 73, "fitness": 0.3638832702530166, "feedback": "The algorithm ImprovedHybridDE_SA_DynamicScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.24.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.7865798043684052, 0.7602258979001593, 0.7699215311222314, 0.764031041835896, 0.7790521875835306, 0.7659832415195391, 0.7768421395042447, 0.7613901854127514, 0.7646044309317768, 0.6407286657333146, 0.6332782372323287, 0.6236992582930538, 0.6430880839987658, 0.6281464482625392, 0.6299567520068777, 0.6194293480645927, 0.6267170138924578, 0.6445405518134227, 0.29780829104629347, 0.3883462998793259, 0.3580349247168677, 0.3238757942793431, 0.12135323306436663, 0.38544894546764885, 0.3227845278276914, 0.33180953935555735, 0.387665670106488, 0.11577145823638124, 0.12102898467800627, 0.12395880299716322, 0.13044799740896373, 0.10968033383645615, 0.1280948848317801, 0.13348927499685725, 0.1223855721720003, 0.26741879591801376, 0.959339723835732, 0.9381259270674499, 0.9392958165899554, 0.9581383412990073, 0.9275705434550998, 0.9370959735395205, 0.9659352456287146, 0.9368086488100412, 0.9553712029507047, 0.4775358009722188, 0.5173099956156659, 0.5185414277148646, 0.5359547403216767, 0.5312123565027007, 0.5463955683866325, 0.5061431449547847, 0.5284128934309689, 0.5048950699802361, 0.6805547365519224, 0.6515650386620382, 0.6910559957477564, 0.7397645094834775, 0.737754078576234, 0.7453174247475204, 0.7480118589753811, 0.6986763696899543, 0.6871544860159704, 0.24489949008487766, 0.3458462036805896, 0.22123534590013372, 0.2741700884815724, 0.2989286780564957, 0.19964569490630457, 0.30883078213813653, 0.2693980959975034, 0.24649013669874098, 0.38734517769891785, 0.1377571769012358, 0.21256930804687157, 0.41619224399059873, 0.2940591241802465, 0.34328816272647045, 0.3104909682155683, 0.24114316704907046, 0.22090033407861487, 0.20630655888115768, 0.24129721774751378, 0.2788316279559623, 0.1920500670485129, 0.2285503594654824, 0.22302348099256974, 0.250330864624036, 0.25935499669173934, 0.2020426759163838, 0.33682229452144263, 0.30150969524001403, 0.3765948316325626, 0.2835932979382806, 0.2940122480188453, 0.3550150482154574, 0.373939956870751, 0.3725868379997449, 0.4005673861165113, 0.07514157890358308, 0.1153186851428909, 0.04185464028024766, 0.12711019198239792, 0.08558154133272655, 0.11940707961244901, 0.1192555789228027, 0.13520767651521348, 0.09803520390121301, 0.23271028567602625, 0.24122599806057055, 0.24349302050675725, 0.2492982965613746, 0.2779333392389076, 0.27642450030754284, 0.23597344446995072, 0.2383215557741991, 0.261864240973411, 0.6021397486279148, 0.6348569823505861, 0.6092139122969217, 0.5594522161082267, 0.5669070434324852, 0.5709915898149842, 0.6347470400323578, 0.5914130218959042, 0.6020526742378045, 0.09624768374965609, 0.09797896794626193, 0.08819465854870867, 0.09058919483396344, 0.0982581373430298, 0.10110807698865154, 0.08872777118522279, 0.10550495930138404, 0.09817791200303749, 0.34265985844581315, 0.1915589233740118, 0.14588666877113832, 0.19801980405363162, 0.2061382911091959, 0.16565595676613043, 0.15194729019172193, 0.14509422103441572, 0.1747219533618456, 0.4079273745416101, 0.3863958054627984, 0.39012430039277435, 0.35761783886199683, 0.4279946411023059, 0.43717599823045294, 0.469199585110076, 0.43622366634429643, 0.47767846169280337, 0.29352013753022776, 0.28917076533158337, 0.2839845209776397, 0.2575228885571661, 0.2768954659757321, 0.28407860471740654, 0.3443431176854276, 0.31631323470517525, 0.31040475734476525, 0.20103393704500694, 0.17116918224726818, 0.18251881476589282, 0.1962546376532056, 0.1999698504545151, 0.20444414731188731, 0.18616572195368364, 0.18616214850700497, 0.17925332404395034, 0.4074792996195481, 0.3242980946132443, 0.39072839421378214, 0.2077219553434797, 0.35869521631519763, 0.377421063379757, 0.3949186011708772, 0.2395865235843887, 0.4223268691608586, 0.16613144808734448, 0.7583964984181625, 0.17002411214393431, 0.18310314919037807, 0.6873625716973555, 0.6371234872088801, 0.16580749962524588, 0.6124282841762247, 0.4808446194941062, 0.20524275280767068, 0.161796037987043, 0.19745165357095718, 0.19728856307238773, 0.5475956758084372, 0.621589811080796, 0.20519664441634677, 0.6530763727831745, 0.7009270922694114, 0.1939400173672451, 0.19074216068251193, 0.18365088454250422, 0.16855252217151007, 0.1795951462285682, 0.17584266031137818, 0.18340232039908266, 0.18964462154423178, 0.18984795708004365, 0.08649854179241245, 0.06938460303855298, 0.07449804719406306, 0.07659035351869004, 0.07970417580677225, 0.07207688925859457, 0.07479039554792666, 0.07220468211356179, 0.07613906579077956]}, "mutation_prompt": null}
{"id": "d4c7d407-134e-4046-9c9b-dc1c7bd5a9d6", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "55d62697-fc03-4b98-a24c-dba5b60702f8", "solution": "import numpy as np\n\nclass DiversifiedHybridDE_SA_AdaptiveElitism_NonLinearCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 40  # Increased initial population for better diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min, F_max = 0.3, 0.8  # Adjusted for diversified mutation\n        CR_min, CR_max = 0.5, 0.9  # Adjusted for more exploration\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - np.sqrt(self.visited_points / self.budget))))  # Non-linear reduction\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * np.cos(np.pi * self.visited_points / (2 * self.budget))  # Dynamic CR adaptation\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]  # Ensuring elitism\n\n            # Non-linear cooling\n            temp *= 0.7 + 0.2 * np.cos(np.pi * self.visited_points / (2 * self.budget))\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "DiversifiedHybridDE_SA_AdaptiveElitism_NonLinearCooling", "description": "A diversified hybrid DE and SA algorithm with dynamic strategy adaptation, enhanced elitism, and non-linear cooling for robust optimization performance.", "configspace": "", "generation": 75, "fitness": 0.3993427271651252, "feedback": "The algorithm DiversifiedHybridDE_SA_AdaptiveElitism_NonLinearCooling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8449646337367623, 0.8440495379192886, 0.8353851032194535, 0.8447714505065149, 0.8445252378613103, 0.8374164735566337, 0.8392193554728201, 0.8439549211815394, 0.852242802190309, 0.7807645595129629, 0.7904926066566084, 0.7878847096914052, 0.7895615260120639, 0.7983664886144778, 0.802398331952072, 0.7896241008666183, 0.7928124311699134, 0.7875601818879316, 0.17073148693582008, 0.16186430466223123, 0.16543834981826677, 0.1942717824585124, 0.142066412737905, 0.3617906747340044, 0.1695368329364142, 0.1680700297267067, 0.16569193324832632, 0.14422800456255735, 0.1195492433418418, 0.11759697378530942, 0.15797640101229626, 0.14448357786414256, 0.13854691733705293, 0.14273230001913417, 0.15388555464122178, 0.14101228499498486, 0.9747113159399154, 0.9557114810413597, 0.9442436421182554, 0.8841074484785726, 0.9387368402468552, 0.9183353119313624, 0.9669852022454845, 0.9251619538029736, 0.9462131201951693, 0.48353331790824006, 0.7362279199231025, 0.5753240714375989, 0.5988674944419409, 0.2968393579433597, 0.48556587746509516, 0.4681452750063704, 0.2662374897151808, 0.5725064218943827, 0.8525913749750321, 0.8676414745273215, 0.8529618643309979, 0.8725146014713858, 0.8392749077177442, 0.8861696170570704, 0.874690329791156, 0.8899885866845993, 0.8349613188906528, 0.15558961978658714, 0.14985055068954956, 0.17172474464051934, 0.13782490134042635, 0.18500854842284087, 0.7745979387766713, 0.1284709219178416, 0.27458068416635084, 0.22432385027856516, 0.5767769453976473, 0.4192493416574521, 0.15587897143244978, 0.2258460297622692, 0.2154310903197022, 0.3366931999409397, 0.28188009741622455, 0.2197620233191948, 0.3649580444819892, 0.5436563975187358, 0.5057853680417974, 0.2297696970916141, 0.45564439933600953, 0.18466369951276707, 0.3815734476453787, 0.3582667009075844, 0.0684017534789979, 0.4316439242456427, 0.3812241175442117, 0.594628788015231, 0.522488977680451, 0.7147153070605317, 0.35433739013901, 0.20616598934199037, 0.5302501293446286, 0.40634660330171823, 0.6144172720848113, 0.08600650836578427, 0.24651511189067965, 0.2076818773151652, 0.16263163167060934, 0.19734411932148777, 0.3500304273693262, 0.13690057661158261, 0.36768063266397233, 0.23575021723105216, 0.2559043798176931, 0.24767183325421416, 0.3224697936895221, 0.4602270036858157, 0.3922549438825419, 0.45737161015615013, 0.2742987186525313, 0.3530107406055869, 0.29223777265885875, 0.8306851602020144, 0.8228725180106835, 0.7059662484262341, 0.7820919728538472, 0.8321046772384928, 0.565571868212773, 0.7999894374766904, 0.6142539787329573, 0.783352336900059, 0.14532991253489802, 0.15722548561549066, 0.1095163051629332, 0.13527737419943187, 0.12479793161201469, 0.11180406064152215, 0.146227234593986, 0.13090823500223947, 0.08873700155132735, 0.2429832955816028, 0.13779510106316906, 0.14938785325589576, 0.19756817145012318, 0.3079808357410396, 0.14086472214327606, 0.1606241999895578, 0.23154945939730998, 0.19702897579416168, 0.48295785565813, 0.6526512667759876, 0.6052960063208253, 0.6778803794828946, 0.5751174752528434, 0.6096371742641742, 0.5140042069372392, 0.523983641988372, 0.5713423259810961, 0.3515273334504734, 0.3690964519185733, 0.2939318310290655, 0.3588649757938982, 0.26458176496351926, 0.3798042888718094, 0.45226307472595484, 0.3840778505294087, 0.2982645960111068, 0.18314482699287082, 0.19212634028649478, 0.18325169489583915, 0.18375185448642628, 0.2129162349517172, 0.21591184165361288, 0.16986882572141115, 0.22204070847908886, 0.18849678621639865, 0.2103980955534267, 0.23324047269119375, 0.7044261551216144, 0.24092887344400116, 0.6915362641814493, 0.7649731853504635, 0.24361093120624588, 0.20476288723393232, 0.2445343102471308, 0.8456191771488322, 0.169105338298692, 0.20676864198133038, 0.839621568620835, 0.18099686909635526, 0.19155813426209256, 0.15851037708934967, 0.18875122866695282, 0.1709879192367294, 0.19836909245634315, 0.20530282071263606, 0.16765741705853632, 0.15190898512517037, 0.20422029816015874, 0.20644134665693625, 0.2104243867850739, 0.1259663753878707, 0.20972983357400765, 0.2113094488982249, 0.1861076584831297, 0.18604444628821393, 0.17915438159155694, 0.1899968052111849, 0.1760139052478764, 0.17319241466652624, 0.18810821097811004, 0.18581162739484203, 0.08388817356561618, 0.08638538167314114, 0.08196483030362722, 0.0842955466562153, 0.08547764914450129, 0.0821505441308884, 0.0710333065685751, 0.08352092526520316, 0.08180636034178623]}, "mutation_prompt": null}
{"id": "82f126ec-0342-433e-ac82-6dd1fa63d6a3", "solution": "import numpy as np\n\nclass MultiStrategyAdaptiveDE_HybridCooling_Elitism:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.5\n        F_max = 1.0\n        CR_min = 0.5\n        CR_max = 0.9\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Hybrid cooling\n            if self.visited_points < self.budget / 2:\n                temp *= 0.9\n            else:\n                temp *= 0.7 + 0.2 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "MultiStrategyAdaptiveDE_HybridCooling_Elitism", "description": "A novel Multi-Strategy Adaptive Differential Evolution with Hybrid Cooling and Elitism for robust optimization across diverse landscapes.", "configspace": "", "generation": 76, "fitness": 0.41535871920854633, "feedback": "The algorithm MultiStrategyAdaptiveDE_HybridCooling_Elitism got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.25.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8213680715657976, 0.8215889246476007, 0.820996370095227, 0.8272871092249328, 0.8208929888594021, 0.8185748657701519, 0.8296878004915185, 0.8182660516059906, 0.827690843161023, 0.7337293359604244, 0.7325446020914583, 0.7180562119206997, 0.7178364826472362, 0.7211057158047591, 0.7336798753630789, 0.739903472263849, 0.7129847362578752, 0.7232485353827349, 0.4811611630834841, 0.5080052299907226, 0.4991047410872188, 0.5382962287267952, 0.5457382178314263, 0.5198165054361422, 0.17091497139272338, 0.5180100372329239, 0.5482736123597256, 0.4265421860257643, 0.14493583054126735, 0.46401869343024327, 0.15362807483055863, 0.13985570248498058, 0.411628626478724, 0.1529178127242904, 0.15075808632416177, 0.14662023060892848, 0.9371618055916048, 0.948638770180803, 0.9540262542193474, 0.9521373468741129, 0.9379591879662975, 0.9314053001247244, 0.9704966946774918, 0.9675653622507706, 0.9803170274679147, 0.6585341606706809, 0.6363079458892655, 0.6174643620029414, 0.6386184678108799, 0.6530284637352273, 0.6400215330278605, 0.6251229474273563, 0.6458730202525798, 0.5334468922590989, 0.8199607900018491, 0.7713395658027038, 0.8078926756608742, 0.7887636249736818, 0.8088559370394709, 0.8338944462438247, 0.7595830395303137, 0.7829262667255181, 0.7857917771546648, 0.2976402904846165, 0.4609294549308567, 0.26854117346496076, 0.2249671654813169, 0.34511076414395103, 0.4575375353422181, 0.3689575457767337, 0.5381814858123368, 0.4221712465970139, 0.1219557616373882, 0.3915516912869518, 0.016363466801850524, 0.49776120202416874, 0.4610717646737641, 0.17411245798030106, 0.42387494034446294, 0.4705475583918429, 0.5042127696442058, 0.3409459454798396, 0.11718088010082772, 0.24467745100957605, 0.35142629426265204, 0.3065804745488051, 0.3814233489697172, 0.3490771536315165, 0.3812152751953668, 0.3013235980415381, 0.3659323998523393, 0.5151789413361774, 0.3884606182893533, 0.4512555552249613, 0.5658729308023092, 0.44263628641703356, 0.5146246362419777, 0.5217657748504164, 0.4698787893704288, 0.136262242191585, 0.11976597010177925, 0.16290864894121804, 0.20110256904185486, 0.1025194713598867, 0.24949188194999028, 0.17257885929659844, 0.16158654006573436, 0.10190164221530107, 0.3131722538913847, 0.34291589845184345, 0.29992226108442566, 0.3700928234319327, 0.33045618427321566, 0.3962854088507425, 0.34830752587027414, 0.3120071010513643, 0.30706056426191497, 0.6708763518553568, 0.6537866863906843, 0.6710555537468454, 0.6324164220652745, 0.61171731342175, 0.7096326896806848, 0.6587575881739753, 0.6732598680615695, 0.7299712949078729, 0.1258607729935809, 0.13203826297293542, 0.0961745889682245, 0.12503783703626303, 0.1391664991548227, 0.1324336024673599, 0.10958265912307996, 0.11920725448528446, 0.13572122808261633, 0.14843728457424454, 0.18046902797596798, 0.1909534759409247, 0.1638498875975576, 0.14801981661747798, 0.13144304781690686, 0.3005959513582477, 0.24815320304482213, 0.23028053278221772, 0.4418452097227662, 0.45095681237612206, 0.4764416333398055, 0.558074398898768, 0.45979795282163427, 0.49111875546407313, 0.5180386546162574, 0.4955787643639269, 0.5523409021881407, 0.36355824460871544, 0.33243304603969404, 0.31958939675023224, 0.29900972590199837, 0.30717720505607116, 0.34140943108147603, 0.43198753167123805, 0.38028774843023727, 0.39473799022413436, 0.18747698564971826, 0.1964254399333567, 0.19455356732448903, 0.19504681091171283, 0.20270327700615043, 0.21523832921929476, 0.18949611783332165, 0.18438779213418655, 0.21380553976317018, 0.19342493526914006, 0.5798249385391261, 0.18938181551016198, 0.636835704072069, 0.22001776960678354, 0.6191520652020238, 0.20012556682462024, 0.5792786925209763, 0.5118896947179397, 0.20677120941718552, 0.1623706763550795, 0.16562949589022358, 0.7263448550652541, 0.1836106475878444, 0.19416954889557447, 0.6450576827349378, 0.19526335987732168, 0.18448238605206957, 0.1668236520612396, 0.2056176591723039, 0.20427642604148388, 0.20594991294679255, 0.16127879456980032, 0.7748338981421521, 0.20859050149190383, 0.8164007020534472, 0.20301159341739428, 0.1824015508049469, 0.1762400742925756, 0.18023816623900224, 0.17671272916316705, 0.18961271955627068, 0.18454427013641084, 0.19122311162111516, 0.19334999639723527, 0.18164526829704142, 0.08724684163754282, 0.071457267475733, 0.07760766434719113, 0.0841672337056929, 0.0831150793046378, 0.07896004018850877, 0.08477046091575191, 0.07993057943039561, 0.08134606283017087]}, "mutation_prompt": null}
{"id": "637d6bca-19c6-4152-be8e-edd95d76d000", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "280a9f2d-a6fc-4445-b4ff-339468f7b7f5", "solution": "import numpy as np\n\nclass RefinedHybridDE_SA_StochasticElitism:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3\n        F_max = 0.8\n        CR_min = 0.5\n        CR_max = 0.9\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(4, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * ((self.budget - self.visited_points) / self.budget)\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / (temp + 0.1)):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Improved adaptive cooling\n            temp *= 0.85 + 0.05 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDE_SA_StochasticElitism", "description": "A refined hybrid DE and Simulated Annealing algorithm with improved adaptive strategy and stochastic elitism for enhanced performance.", "configspace": "", "generation": 78, "fitness": 0.32469858599015594, "feedback": "The algorithm RefinedHybridDE_SA_StochasticElitism got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.21.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.46365287017964496, 0.46424958983433207, 0.4913675449891395, 0.46856378630926476, 0.4879931561670866, 0.46302766374374427, 0.46762775944834245, 0.46040195905889114, 0.47872894930178034, 0.41838933953862756, 0.407346564360181, 0.41993552962583336, 0.39574708312399876, 0.3960231013596909, 0.42963234024955954, 0.4232755064493725, 0.41228641181122205, 0.4066352789054839, 0.16389281608498407, 0.15578117642558786, 0.16498476153191166, 0.28149109220519064, 0.1665667372886115, 0.3287654703022015, 0.3405451157338443, 0.15804036938554178, 0.35389962802732533, 0.13144915021163595, 0.15872664062210273, 0.16010794630022052, 0.15311655288428427, 0.15717336316987407, 0.13356464998648077, 0.1647899696345435, 0.3244241742208377, 0.14340658708819087, 0.9879940552718238, 0.9533190373086097, 0.8788505502327943, 0.943656387472366, 0.9523662494333817, 0.981629128046592, 0.9315149107628542, 0.9039079341751235, 0.983827912429834, 0.3881214283254609, 0.3657733685760314, 0.3567593170668032, 0.37353749657518054, 0.3737660842332713, 0.34400836273848223, 0.35720879852226173, 0.3586932313256467, 0.33676928812148155, 0.8316055318951492, 0.8319218183891226, 0.8489861786119699, 0.8645454754941344, 0.7497238945912226, 0.8406273725435761, 0.8681979425007053, 0.8334669807161605, 0.8576778321633264, 0.23056953975745786, 0.18286393756218422, 0.31466197388454986, 0.2149051276514713, 0.18318458340571164, 0.1986791686221765, 0.32649081816458636, 0.22428150687724058, 0.2714166571414054, 0.25271126101036456, 0.1684402977689795, 0.1948202735854424, 0.17870040570116175, 0.13043858553970078, 0.26577572091127344, 0.24638345955219032, 0.3167062083552441, 0.2464793683967319, 0.33705776043625624, 0.31115427307266164, 0.39029525241709084, 0.3052146629243604, 0.3919621202795197, 0.21470200098700676, 0.18027582594681357, 0.36290934523237095, 0.2756332566741089, 0.45761413117038596, 0.38717227163895673, 0.394973857272772, 0.43871339710874313, 0.35289409877840616, 0.19680617742331574, 0.4316245658784419, 0.3842904577188838, 0.41314723416422205, 0.20801685583242913, 0.06830355953952583, 0.09832053349353465, 0.18811837111611385, 0.20683727731886126, 0.10306446184089124, 0.12416530376063306, 0.24983085694648066, 0.2605305435492601, 0.28672462075346195, 0.2882519170168072, 0.30336238462990384, 0.311254437879266, 0.29881588490980726, 0.29987827297171654, 0.3086895487526238, 0.2925335756460202, 0.27990891039271204, 0.4160732352293445, 0.42351110444223705, 0.4202087152799281, 0.4172059726316757, 0.4290202807178505, 0.4254495463829616, 0.4443223331425372, 0.4231158106649765, 0.40987095860841094, 0.1455857187287275, 0.1539863149788896, 0.12472870193693997, 0.121408746141624, 0.12754827435160387, 0.1416385648458368, 0.10722918929022851, 0.13926375694679682, 0.16111012179217887, 0.12686041142959603, 0.147716094242914, 0.2694520025581202, 0.1672589363273601, 0.13322656063159155, 0.21040258130716905, 0.3356198635923361, 0.1564068758973568, 0.13361850329049307, 0.3341581398663115, 0.35688231187649444, 0.3440519752261212, 0.32812753077031565, 0.34559912087538047, 0.33761261630932093, 0.34657146441607767, 0.3498940060822071, 0.3408969917353294, 0.31482746629549363, 0.30933521107982564, 0.3292600436444877, 0.31780756682962474, 0.3046349554688833, 0.3220608974843966, 0.34222531176440407, 0.33908831422863184, 0.3137156197757449, 0.19341467288181913, 0.19972621194025664, 0.21700078547308932, 0.2136320639063567, 0.19497015767697234, 0.190970058741737, 0.204705661452265, 0.21510350633895436, 0.21028483789946706, 0.4046400493561334, 0.35083728414601323, 0.3691438865541088, 0.22775240475336755, 0.21520617626643512, 0.3848270058375325, 0.22888458726914018, 0.2034967999680557, 0.36649654734778225, 0.1703254831061004, 0.16426927220520227, 0.21168579284151512, 0.6024605696936762, 0.18648325899848683, 0.59441814173765, 0.5841471204264804, 0.1681061021565996, 0.18583598105691868, 0.2103346089665481, 0.16846328875550876, 0.15247614445284075, 0.20929927164867634, 0.20272873479008413, 0.6052877666165822, 0.20974172983788753, 0.15389596440456788, 0.21213011002943294, 0.18719736765694361, 0.18717798790887474, 0.18313094808430597, 0.1886639888228826, 0.18063267849039444, 0.17980291679100335, 0.18482924895767705, 0.1789012973137698, 0.1921276074035172, 0.09154544078406801, 0.0818747580182353, 0.08419705360312013, 0.08984095936719116, 0.08371872351691667, 0.07680133424142055, 0.08208658292786564, 0.08907627662860107, 0.0768945422587396]}, "mutation_prompt": null}
{"id": "f24abc05-4278-43bf-86b8-8201f184ad70", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "a5126632-8de6-4f0f-97f9-c5cd90b50187", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 40  # Adjusted initial population size for improved diversity\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n        self.memory = np.zeros((self.initial_pop_size, dim))  # Memory for learning-driven parameter adjustment\n\n    def __call__(self, func):\n        F_min = 0.3\n        F_max = 0.8\n        CR_min = 0.5\n        CR_max = 0.9\n        temp = 1.0\n        learning_rate = 0.1  # New parameter for learning-driven adjustment\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n                    # Update memory for learning-driven parameter adjustment\n                    self.memory[i] = (1 - learning_rate) * self.memory[i] + learning_rate * (crossover_vector - self.population[i])\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling with enhanced dynamic scaling\n            temp *= 0.85 + 0.05 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling_v2", "description": "A novel hybrid DE and Simulated Annealing algorithm with dynamic population scaling, stochastic mutation, elitism, adaptive cooling, and learning-driven parameter adjustment for enhanced exploration-exploitation balance.", "configspace": "", "generation": 80, "fitness": 0.40578604549858355, "feedback": "The algorithm EnhancedHybridDE_SA_Elitism_AdaptiveCooling_v2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8423920905587172, 0.8245458646514661, 0.8259848663357252, 0.8353552671663668, 0.8225273480183272, 0.8417783334498397, 0.8322641690887504, 0.8341052277425713, 0.8366700519071102, 0.7381277190845311, 0.7277662005727366, 0.7271608240783043, 0.7367278362616174, 0.7395237804488053, 0.7307009730029079, 0.7246368865258415, 0.7322952321455091, 0.7283902292724346, 0.45951251239566715, 0.44312801018619075, 0.15050277219271535, 0.4785320068530132, 0.45388916550941116, 0.5178691209183479, 0.44639927958720416, 0.4581584710698372, 0.1459973625710156, 0.11756860150338622, 0.1404484449797916, 0.2301761409837123, 0.1450732313458104, 0.15565672422135246, 0.131184004426377, 0.3868159343554919, 0.3644575576051525, 0.1390922543826114, 0.9108838187978051, 0.9440556900781372, 0.9421084850128604, 0.9578143461907571, 0.9257513828686552, 0.8778704442786879, 0.9540921490687367, 0.9368697402552966, 0.8680570014744211, 0.6261519060418648, 0.6511558237807145, 0.6360642665784226, 0.6478847506577186, 0.6078664386636992, 0.61703100849882, 0.5660956675532698, 0.48185643122708754, 0.5695498989993527, 0.7918595676601743, 0.7992081173603578, 0.817650680032301, 0.8587023827380112, 0.8585908586334317, 0.2096839781434433, 0.8304779941915785, 0.8310742482671084, 0.8187596106108517, 0.19240773786623544, 0.1822430997874982, 0.18070536392478243, 0.17213228999533314, 0.17625457272065992, 0.18337852438003088, 0.16606944273019308, 0.18407211203815066, 0.3135232614163812, 0.15813735627093117, 0.1699618503391046, 0.20417574382119597, 0.22829618265665086, 0.20256912783037084, 0.19126254534366527, 0.15527827913242143, 0.2202534622917347, 0.15710964448649434, 0.32223840743038834, 0.35750450779542486, 0.4260338794118361, 0.4280156461348742, 0.18778794950442101, 0.2412980894097574, 0.30634034782194297, 0.3304568971287597, 0.4049924229072712, 0.48729745706682204, 0.5641640619217887, 0.5413877724306982, 0.5155041084431855, 0.23955407916260252, 0.3257322069137141, 0.5009782946002009, 0.6633440681102469, 0.6387705116657233, 0.10613158182428817, 0.13934709070716833, 0.12010558016880535, 0.14789135619790017, 0.24471050465663347, 0.1355762207460912, 0.16934936824973323, 0.18955952366183781, 0.19622601001103934, 0.33974407557991393, 0.3749586916162121, 0.34765361796107386, 0.40885262208891093, 0.40178726493644634, 0.3261941676430393, 0.3444508902156853, 0.3408716252777686, 0.30247337938094754, 0.6916212350957571, 0.7495479024457292, 0.6048835841784234, 0.6747079037693242, 0.7281495560807378, 0.6828017782422515, 0.6936054354860484, 0.7475430554025451, 0.6429429909490101, 0.14175393446309048, 0.10533126061894238, 0.09321786444539115, 0.10828535950274565, 0.1326141074146825, 0.1170701072533058, 0.10710670335980832, 0.13258452884394156, 0.11372495535737503, 0.1549607725187998, 0.15901802007523724, 0.1549987676654795, 0.16659027657304282, 0.161125780880907, 0.12851615017894946, 0.13909842403883899, 0.23581579049660994, 0.1823251475933102, 0.49526048057840055, 0.5021830925528995, 0.5788551102584036, 0.5768171282953638, 0.4754732552040035, 0.5277400435610048, 0.5326506980515703, 0.5471068184409166, 0.6115613016902967, 0.3634060864268758, 0.40859662337122804, 0.2955093019325057, 0.42729567424587744, 0.3906158032638597, 0.40372831144391996, 0.42889042709170777, 0.37884850410237303, 0.42813877512726817, 0.1880695568718258, 0.18932560793152486, 0.20674500906505178, 0.20783346295804117, 0.19011618402278896, 0.21875395976409795, 0.20098239446353305, 0.2252685201574357, 0.20814253832368668, 0.6164097920616022, 0.6446434724067542, 0.6152707466690768, 0.21278661578142744, 0.22702072930624984, 0.5281676040822421, 0.6047662757934278, 0.4488028156099958, 0.4779674242919182, 0.20709555568048876, 0.18328079682509923, 0.7881985994669494, 0.790226198437319, 0.16438028368637647, 0.1943099160002052, 0.18562690390416337, 0.6224058776868364, 0.17157447974525053, 0.7548598554703012, 0.20772513421458305, 0.3127343389304611, 0.1971729504651636, 0.20606174915812914, 0.20555995922487091, 0.7759583417161153, 0.22745462238182967, 0.20568725868243054, 0.18813526214817233, 0.17466260036051684, 0.1746007158731261, 0.17720734910997193, 0.18771493518252924, 0.1776158400337523, 0.18205388140639134, 0.19072935102334743, 0.17284053715403935, 0.08205606477982341, 0.08378938992877061, 0.0850733946665434, 0.07441704744408473, 0.09317915078617056, 0.08481967615166142, 0.08767507170135791, 0.07723333202863869, 0.08428180923195361]}, "mutation_prompt": null}
{"id": "ff1bf491-3689-4943-a07b-c1f9f33e02ea", "solution": "import numpy as np\n\nclass RefinedHybridDE_SA_Adaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 40\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3\n        F_max = 0.8\n        CR_min = 0.5\n        CR_max = 0.9\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(4, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.normal(loc=0.5, scale=0.1) * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.85 + 0.05 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "RefinedHybridDE_SA_Adaptive", "description": "A refined hybrid DE and SA algorithm with adaptive mutation, crossover, and elitism leveraging stochastic variance and dynamic cooling for optimal convergence.", "configspace": "", "generation": 81, "fitness": 0.42158663559211745, "feedback": "The algorithm RefinedHybridDE_SA_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.25.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8345047213955954, 0.8287340162222158, 0.8227877553957316, 0.8382595359171199, 0.8325219525620204, 0.8387282463472463, 0.829749357497972, 0.8341574155373694, 0.8288312461086388, 0.7211683553373336, 0.7278404511388723, 0.720739608297996, 0.7417531486475881, 0.7241540909589763, 0.7380979785668134, 0.7378438826187974, 0.7211856707913353, 0.715346958488472, 0.43082638151539454, 0.45542196663346224, 0.32851177698036715, 0.5551382087616599, 0.47842208120146756, 0.5219954883272938, 0.1464521625428239, 0.4658161973657339, 0.5497315405891763, 0.1454792693120719, 0.38945867189521965, 0.12419249978586855, 0.35788710245185684, 0.41636465162075487, 0.4273367023390904, 0.152830639127432, 0.13089243739622325, 0.37574614604442536, 0.9362939590387174, 0.9198700905048486, 0.9411185596567624, 0.9285182887849135, 0.9257690876506365, 0.918112604632791, 0.8717811377411424, 0.966940982183139, 0.9224113479431557, 0.5943421813639777, 0.6181680054461655, 0.6695200896688915, 0.6690206561612346, 0.5930147672547911, 0.6589578837200714, 0.6384402578011565, 0.4537088166893888, 0.5633847492251567, 0.7895186777373929, 0.7917309663260075, 0.803587639755249, 0.7950998188437375, 0.7883880687548932, 0.8111661467164796, 0.8145811873727857, 0.7893616225026763, 0.7928364186786402, 0.21971596106479074, 0.1452243478469316, 0.2593327421083421, 0.23206666243112006, 0.27533199143627685, 0.16312177979942422, 0.4682183409285834, 0.2118702809870029, 0.16203453953985558, 0.40931103202714925, 0.171984835410815, 0.14088572153252388, 0.2025584807710462, 0.27937221451140537, 0.18120673295819834, 0.20640907097254935, 0.3881276503725464, 0.15873488240517186, 0.4890515068492929, 0.38434157633284527, 0.37630931344928387, 0.43429362168265784, 0.3708138117139853, 0.4313105487405765, 0.3347113590395925, 0.3247778595332784, 0.3960317989770823, 0.48145204125421337, 0.5510331133960513, 0.5015143903007049, 0.4929585121413109, 0.526400772387569, 0.5695044441940367, 0.564910575455178, 0.6262016225026008, 0.6025005697302308, 0.12888530454446478, 0.22060390811204567, 0.13564081399519778, 0.3137468585211364, 0.23249351883749014, 0.3510970145920447, 0.2224194004798219, 0.12122658699294175, 0.1692007307549075, 0.28347606358019006, 0.28718568307733394, 0.3345014721846151, 0.3100526005039861, 0.3525178444449585, 0.3666201056753706, 0.3590247910054928, 0.3320947911166291, 0.3327505501735406, 0.7514344805931674, 0.6874117593399346, 0.7052397208485044, 0.7207546857192365, 0.7018571332397227, 0.7261797854708582, 0.7478527920442731, 0.7011492732170297, 0.7051497815170946, 0.09852056407397936, 0.1021648687775305, 0.16246171918845065, 0.10645527365990115, 0.10909071619150568, 0.11548727080683496, 0.10750852472785155, 0.10554796471810335, 0.09975665215629925, 0.14241314093287327, 0.22529675571303476, 0.27066934990739533, 0.1740366034529156, 0.14346433678166481, 0.17764101175035285, 0.14689591673388858, 0.15304131641845675, 0.17274864037777193, 0.44718211204212954, 0.5325054723116336, 0.495797426552666, 0.5298143101076151, 0.5060195681276042, 0.5460749421088837, 0.6039625828981448, 0.5323344498980218, 0.613610217602935, 0.3967442759269977, 0.37396611243540245, 0.3974969168563238, 0.32743421578424836, 0.35677124175793007, 0.37888974474387604, 0.3785967763658037, 0.40721237824795453, 0.3934007506099504, 0.20236546449314208, 0.1928189376459699, 0.20281468323542473, 0.21026835598212523, 0.18647476784471018, 0.21937963753622136, 0.211928786304328, 0.18362094615615887, 0.20984280103404895, 0.5517907215801731, 0.5914752887405366, 0.5914752494356499, 0.21372178644861284, 0.4958523633982367, 0.5617665459885918, 0.2147511540158491, 0.47834140473222697, 0.5094681140229492, 0.18014859737812172, 0.1724377878565443, 0.16844089598428724, 0.15812236162847493, 0.17441154934475778, 0.8466061168527572, 0.1440335457974501, 0.7747991296093701, 0.8020372130118346, 0.1624001722451761, 0.583134719429078, 0.16543697354459763, 0.19710053052014287, 0.20617771562627452, 0.4179388838102702, 0.20868322809517204, 0.6489038351003915, 0.20827601402687212, 0.18846103118173974, 0.19789903647175833, 0.18718440849362006, 0.19007312937897913, 0.2007249000756628, 0.21160325296643057, 0.18755002937588594, 0.18848620593168075, 0.1905374278618518, 0.09275143832460253, 0.08209878666289605, 0.07946157245799601, 0.0801367238313011, 0.08300083346259013, 0.07891398018186624, 0.08326491604957209, 0.08537386063965458, 0.08818687210438114]}, "mutation_prompt": null}
{"id": "36791945-c69c-4f06-a699-ea8110418a95", "solution": "import numpy as np\n\nclass EnhancedHybridDE_AdaptiveElitism_Cooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 40  # Increased initial population size\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.2  # Adjusted mutation factor range\n        F_max = 0.8\n        CR_min = 0.5  # Adjusted crossover rate range\n        CR_max = 0.9\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * np.random.rand()  # Randomized CR within bounds\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i]:\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]  # Retain the best solution\n\n            # Improved adaptive cooling\n            temp *= 0.9 + 0.05 * (1 - (self.visited_points / self.budget))\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_AdaptiveElitism_Cooling", "description": "An enhanced hybrid algorithm combining DE with adaptive elite selection and a novel cooling schedule to balance exploration and exploitation.", "configspace": "", "generation": 82, "fitness": 0.4048726904685072, "feedback": "The algorithm EnhancedHybridDE_AdaptiveElitism_Cooling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8460082379093388, 0.8570489932263725, 0.8497470810905454, 0.8583931193744299, 0.8681822479800219, 0.8400239775159154, 0.8332234016465896, 0.8503400651397892, 0.848005948815142, 0.7472985847413726, 0.7275013290982781, 0.7447938774056421, 0.7353023102892197, 0.7374689638689813, 0.7490168472855485, 0.7364545545853651, 0.7556068609570303, 0.7307465694175914, 0.5093361739649522, 0.5508130059552212, 0.6168098465945537, 0.4536783862262421, 0.5408761578285766, 0.16914563482126455, 0.6121709759183103, 0.1665413101070975, 0.5606096490602244, 0.1598409784061985, 0.33255356781791423, 0.1605838243193659, 0.13749579999621275, 0.12297139080577324, 0.15422254341868025, 0.497212718039184, 0.13690090851946368, 0.15704303214000415, 0.934302964006542, 0.9301512873436225, 0.9224947572635003, 0.9712063043076007, 0.9431608363251636, 0.9140552356249054, 0.9432151701636837, 0.9418008205749099, 0.9587478622607823, 0.6577292214395334, 0.46656166181049674, 0.4985562944950649, 0.5352814619911335, 0.5763636407757164, 0.6181243129578808, 0.6258694592325116, 0.6564370022893558, 0.527425436556756, 0.3578340399782727, 0.7410540316009513, 0.774574361161901, 0.8055345213865402, 0.7668088755271791, 0.8042443032277393, 0.7726195643016287, 0.7834888598389705, 0.8393674392735606, 0.5170954635279592, 0.18462271750680936, 0.18629804971178499, 0.12623256693979024, 0.23885337858493116, 0.1998822057335069, 0.19365516531042437, 0.18356301009785658, 0.17567173602726216, 0.11763589323994694, 0.1834517960976899, 0.13530353996955236, 0.16436446828720763, 0.22393297172765925, 0.16592141019029327, 0.17087064882517622, 0.18794775007891595, 0.1682333284396358, 0.30204981148179744, 0.303938467005088, 0.14189849758184458, 0.19828228536982007, 0.22318283078664236, 0.19629239153962275, 0.3242335111121142, 0.23858505096735771, 0.10900822334821003, 0.3311246634703491, 0.3514523819938513, 0.4203054257395249, 0.33472497403174695, 0.21944261568258094, 0.32797406093640646, 0.5093937093498265, 0.4095673786450802, 0.27241093269713423, 0.07957592663753454, 0.09344885706007755, 0.1276747545707596, 0.11876709973062549, 0.1461936781761597, 0.2850982440655486, 0.12667684273892632, 0.14245574688699802, 0.0837034655366875, 0.40397830450083594, 0.31038316342024863, 0.28199196346201993, 0.2907369467085781, 0.3248674516444656, 0.2683097956108744, 0.3234331594834884, 0.35834835106254437, 0.31899278158899036, 0.7189418613247093, 0.6647358723123609, 0.6874457988148821, 0.7557755292314041, 0.758515285097435, 0.6011680108145261, 0.6761302712261492, 0.752450399408815, 0.679945775399426, 0.12527707214139538, 0.11290733211234727, 0.11451620721308498, 0.11188050215276835, 0.10819744655830255, 0.11202683124587254, 0.12897851950683925, 0.12068735876896863, 0.11726913590272503, 0.15150025870731443, 0.15715395872198057, 0.16882244992545725, 0.1719425764483662, 0.22611241228752366, 0.14943506567162934, 0.12044648872036856, 0.148523976846613, 0.16002099548586668, 0.5210738579541234, 0.49701797350572274, 0.5817040714101509, 0.5896325775422394, 0.5216469649734661, 0.4836764102671721, 0.6340517138310389, 0.5201484413375257, 0.5315744200090116, 0.39890304796751574, 0.36201023559765677, 0.4392633748225596, 0.4010586096912765, 0.46747973037494817, 0.3879696903500608, 0.40709956991267404, 0.45609641834563786, 0.42377325374900443, 0.20885465246591217, 0.21556885561824957, 0.21273940218877474, 0.1883830894963484, 0.18994179716846493, 0.20238619087355703, 0.191604868116947, 0.2358099596024944, 0.1979108593901595, 0.20581595181777645, 0.23102050716749323, 0.6737976526731451, 0.2217683749678221, 0.6647379259170816, 0.21697779863946665, 0.23447203655162496, 0.6062954955233923, 0.4972309918063075, 0.20081897052148834, 0.8292224924280072, 0.8055016342521181, 0.19614371636624606, 0.7668894307747667, 0.7165566847233196, 0.6651591295800071, 0.7681045948440408, 0.657856991399465, 0.7475880754711206, 0.7493799426763323, 0.19806171847604603, 0.11212147142141404, 0.20457898752760828, 0.20387321388591118, 0.15247034844459906, 0.3573389787616156, 0.3738262126084887, 0.1788246086233043, 0.18694894272464457, 0.20140414996683587, 0.20954138818141232, 0.18660020645416642, 0.19090065144921986, 0.18156277097012408, 0.1962630872493093, 0.18519584987852333, 0.07555637236736235, 0.08063671730771171, 0.08218802387663604, 0.08186017403066836, 0.0847882270623288, 0.11027359902759148, 0.09134568804686527, 0.0723860430788622, 0.08740943814239277]}, "mutation_prompt": null}
{"id": "384713b1-c4f1-4362-b6a6-e14c56d4e069", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "fc5de495-ec24-4607-b5a6-699639c9c647", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "54ae3d9d-ad8d-41cc-bfa0-afc92f250b79", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "de71a4af-797e-4ae8-a403-0cd5084346b5", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "30fb0305-878b-4a7c-a76a-9c0454afad04", "solution": "import numpy as np\n\nclass HybridDE_AdaptiveSA_SelfAdaptive_DiversityControl:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3\n        F_max = 0.8\n        CR_min = 0.5\n        CR_max = 0.9\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n            \n            # Update learning rate\n            learning_rate = 0.1 * (1 + np.cos(np.pi * self.visited_points / self.budget))\n            \n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min) * learning_rate\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling with diversity control\n            temp *= 0.85 + 0.05 * np.std(self.fitness[:pop_size]) / np.mean(self.fitness[:pop_size])\n            \n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "HybridDE_AdaptiveSA_SelfAdaptive_DiversityControl", "description": "A hybrid DE, Adaptive Simulated Annealing, and Self-Adaptive Strategy Optimization algorithm with controlled diversity maintenance and adaptive learning rate for improved convergence.", "configspace": "", "generation": 87, "fitness": 0.2867550374744437, "feedback": "The algorithm HybridDE_AdaptiveSA_SelfAdaptive_DiversityControl got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8867609225350853, 0.8884647098716608, 0.8900159515086742, 0.8928367540616511, 0.8861321491637775, 0.2823304089638309, 0.2429111230402019, 0.8907154016565562, 0.8914442455669898, 0.27414674687812235, 0.15284972732000046, 0.812007587705467, 0.05657421223892911, 0.4165968457277288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14237175497091825, 0.7626261529416639, 0.1389091721343011, 0.15081613371798663, 0.11848317276083176, 0.6764624761066672, 0.33178794450516336, 0.1539615625436287, 0.6642526133583362, 0.14157503585668307, 0.0882762845914633, 0.1116764448548323, 0.13788857612313443, 0.14270864752470203, 0.20647055411284976, 0.14080251863479365, 0.09549829517672115, 0.11606273879976192, 0.9349889258001101, 0.868349676641055, 0.21262905336158944, 0.9417513365539315, 0.3051336946846154, 0.5647140813222842, 0.8848838596222328, 0.9537972053718169, 0.882503697663771, 0.17313533210545262, 0.10507761261314941, 0.11526719656666995, 0.15787728701008596, 0.15132550045835147, 0.06474285490622589, 0.13149055424645106, 0.07421810759837699, 0.10776673029904393, 0.9078755579397384, 0.37871716596053473, 0.9114775603507834, 0.2802564336873269, 0.37521613458697634, 0.8907383065910133, 0.23369748106246047, 0.4007112740464427, 0.23480268765541845, 0.15714337261047184, 0.14398634873824812, 0.1696936541827636, 0.1873096673474135, 0.11084964829649946, 0.008935777040827486, 0.39162930665680795, 0.2161534367697242, 0.2584676256632491, 0.14991755482176017, 0.1384387355946758, 0.2999462667186311, 0.23941444221461772, 0.18040466366086005, 0.1309127778731385, 0.17021513840370006, 0.1641429866593861, 0.3421727718014368, 0.07837164156005105, 0.07821313146290154, 9.999999999998899e-05, 0.04118966535739288, 0.05019442449499478, 0.21737735782946233, 0.023468722718710477, 9.999999999998899e-05, 0.12914976431986358, 0.12545928506162018, 0.31546189433804817, 0.14679362268884977, 0.12199868723714247, 0.3429612446244479, 0.1592757244433104, 0.4885733436857843, 0.3354801250777617, 0.1515908793047509, 0.09989524043419662, 0.10076596406632621, 0.22931662916841622, 0.08100449767049778, 0.13732781924622228, 0.15762513201351613, 0.18777270016245406, 0.11660568943751481, 0.07673171950900737, 0.23739500525371016, 0.39180542148069286, 0.1058131596307671, 0.09213368893930673, 0.3654272201047737, 0.034173035838875654, 0.09381261287470732, 0.21852643249193693, 0.022192613340917378, 0.7345547881987979, 0.6007800442205689, 0.6114551223199168, 0.6559086651411474, 0.4662030980919806, 0.19630467832658938, 0.5905343535672052, 0.4360711231070531, 0.4125079698349481, 0.1692803417207318, 0.1539274095309091, 0.13175317993412627, 0.18254682631143437, 0.13469373472528168, 0.14053951716298452, 0.08230580876631288, 0.11664828013107531, 0.14063146073389288, 0.21926706787585815, 0.23720664394442303, 0.18366114432866276, 0.3512186749352698, 0.2006474932185318, 0.11691734912516638, 0.16138934637801283, 0.19392667293586419, 0.2201694963160642, 0.45650294880794084, 0.4899451502326341, 0.2786071009217159, 0.5816596101647176, 0.41594449831301084, 0.2972855850846968, 0.5439148773992034, 0.5728567118873227, 0.5138148430385507, 0.15159569169102438, 0.37594792103979924, 0.3148358916560322, 0.35071161123705785, 0.22548328923043715, 0.2868772998208884, 0.22190318417783528, 0.27899899801417116, 0.45657014359473624, 0.1896917003829519, 0.18918364278909805, 0.21876940052484317, 0.20446996797227524, 0.2292507218116555, 0.19425422846234697, 0.2196588773082161, 0.20224975606531193, 0.19237305655482329, 0.22163910362728767, 0.2184311301211811, 0.1960281425735575, 0.24337159235003225, 0.7647848436600284, 0.25097449186792875, 0.18815046643916844, 0.20338574181880054, 0.21734490825342634, 0.18688925763106856, 0.7469484413675562, 0.20868989971484708, 0.2979169705124739, 0.1820564069406645, 0.8886547624540473, 0.8999279470148507, 0.2053575876385928, 0.17058969191133544, 0.2736324586499669, 0.21018884504753133, 0.8792673724648836, 0.20936858980316042, 0.1670757565737362, 0.26198519053279423, 0.2113953325664043, 0.1530570039984014, 0.20872191138563956, 0.19549266225747808, 0.20747717243086228, 0.18894898832379037, 0.17876572520088407, 0.19461211972935522, 0.18692119714591193, 0.18854055707192263, 0.18088978915031795, 0.19176814928141472, 0.08545133566065655, 0.08348959016694613, 0.08785492997190758, 0.10298240681993376, 0.09657892295341464, 0.11868603072091577, 0.07436177502070007, 0.09002309732006963, 0.08422235468572947]}, "mutation_prompt": null}
{"id": "0de7bbf2-0806-4869-b866-34e123a90475", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "0e85dd44-5a4b-4722-b003-88c172250bc4", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "4ca37b64-f2dd-4f85-83e2-86ddd737d05e", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_IntensityCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.5\n        F_max = 1.0\n        CR_min = 0.5\n        CR_max = 1.0\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * np.random.rand()\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Intensity-adjusted cooling\n            temp *= 0.85 + 0.05 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_IntensityCooling", "description": "Hybrid DE and Simulated Annealing with dynamic population reduction, stochastic crossover rate, and intensity-adjusted cooling for robust optimization.", "configspace": "", "generation": 90, "fitness": 0.440550901918311, "feedback": "The algorithm EnhancedHybridDE_SA_IntensityCooling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.25.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.844368494103941, 0.8359166017221842, 0.8268529464030984, 0.8228170182957852, 0.8299583242616929, 0.8244395464324898, 0.8357086803707375, 0.8297854703642363, 0.833423720125448, 0.7365693882897586, 0.747825203908604, 0.7174798372625433, 0.7268881260513045, 0.7420792070205566, 0.7335265065782917, 0.7250807878348833, 0.6980647066596452, 0.7364325996756642, 0.6210058492685241, 0.6148747088716437, 0.4508591411246945, 0.5468515498136812, 0.47701965376511024, 0.5131146858704922, 0.5487728236655964, 0.4965310228440809, 0.1669128930752135, 0.49315547297148843, 0.44838872176294964, 0.15174649880152014, 0.5073979491770337, 0.15911998609542966, 0.4654695579744015, 0.31853576119726645, 0.43492593007159885, 0.1532097324235252, 0.9700211966490774, 0.9557831494463471, 0.9559857592852, 0.9776043115615901, 0.9724933567470587, 0.9758509120263009, 0.9896617693102271, 0.9773735813543368, 0.978274135256426, 0.6391391612997177, 0.6260663328337507, 0.6334201098592933, 0.6427953620092606, 0.6197568594311962, 0.6467277867308672, 0.6182600366043847, 0.6412241262536309, 0.590092935071651, 0.7921665849198266, 0.7592824109747394, 0.7003339527448713, 0.7741950921643136, 0.7659959746787545, 0.8020985473111819, 0.8037794256768651, 0.7878051832639786, 0.8068261980921136, 0.3568910903874195, 0.5450308983419117, 0.5005681046319402, 0.605189672434358, 0.42129746118886424, 0.5133408553543576, 0.34598356673033503, 0.5872287772888352, 0.5657597124785125, 0.2699734184536151, 0.1281926671373803, 0.3438651215795304, 0.3379533005782377, 0.5100024696561064, 0.5118035139095394, 0.4513601154892678, 0.43923901827321365, 0.39484614853437006, 0.2577055366339095, 0.2550956747272307, 0.338235021236138, 0.39113634402248143, 0.32235023795836937, 0.3517990788947022, 0.3225081247450321, 0.31248755739489054, 0.3913996384412455, 0.5990990216954634, 0.3262316985975031, 0.5674639406547861, 0.374752439237237, 0.3970396093210131, 0.3555488970344082, 0.5402662346536777, 0.4814538354607937, 0.5316517027402509, 0.15876992099187626, 0.17365075668597818, 0.1336398231810243, 0.1407779880982858, 0.19172293563127374, 0.2614511464846855, 0.1287009474776778, 0.1674886063777793, 0.0900420413017391, 0.25784371395870354, 0.2672505602254771, 0.31166214987683527, 0.3190907323226093, 0.39123564756540596, 0.39739614710477933, 0.324304634233778, 0.2869417781916068, 0.2530163492002203, 0.6533198982064297, 0.7447799957295869, 0.6988535218255312, 0.6208182009561087, 0.6638601337661103, 0.667333136621432, 0.7097030143496239, 0.6188822310992113, 0.6804008794621759, 0.11517472572383736, 0.1091315090539734, 0.12484247025589679, 0.12096247353427858, 0.12802239131949267, 0.15089132084212564, 0.13582785280852205, 0.07947023210915627, 0.13232454828099394, 0.4300975451326643, 0.18068305836046816, 0.19111493812833413, 0.2663471276654641, 0.3115703691083668, 0.12387796939009954, 0.18258912531894878, 0.139105620955136, 0.17233683654666587, 0.40984544575262394, 0.48383091387068655, 0.5590405514610426, 0.4837011593314199, 0.49615228923687615, 0.4816411088241259, 0.5288835403002167, 0.5800260373660096, 0.5571473899604081, 0.3049780377345027, 0.3897300344115562, 0.315835453927217, 0.4134677238556833, 0.3684866650964067, 0.40587953389030285, 0.36430408453284613, 0.36515905053640063, 0.294599857750641, 0.18577833394159748, 0.21467339158962273, 0.19307385150365253, 0.19432700485453347, 0.21834518023670113, 0.2036858159897188, 0.18775866510111017, 0.226055233714465, 0.18827295788399212, 0.5567534455670766, 0.5057790474180095, 0.2218591561407669, 0.5859287271778844, 0.2278258623644117, 0.21136737727076438, 0.578822461491187, 0.22422093603232351, 0.5094041376416398, 0.1555180930559651, 0.8242454056403753, 0.7844541050956905, 0.1800602402651149, 0.18148784501022275, 0.18178809719231515, 0.6639036952097412, 0.7688735736591572, 0.7020885424808522, 0.5750583441828933, 0.20690232260083052, 0.16177330414054925, 0.6633151290405855, 0.19658361004089653, 0.7363559627802033, 0.7789104117493815, 0.2063124422426862, 0.20121018522996437, 0.18015787076843537, 0.18646089449737846, 0.18751409526682006, 0.1823133933491511, 0.17600101480295727, 0.19994971978222753, 0.17297238268152926, 0.20704250964665727, 0.1914651413624453, 0.07821400180576654, 0.077569647012942, 0.07917910589790367, 0.07685142758883301, 0.07420417548382796, 0.07506768801011021, 0.07688178539728763, 0.08471275624304231, 0.07677456433262508]}, "mutation_prompt": null}
{"id": "4b425988-abb2-4ca2-ac9f-68699ca8a814", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "f0c6ee81-1130-44cd-824f-7fdb2f59fc23", "solution": "import numpy as np\n\nclass HybridDE_APSO_Elitism_AdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 40\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.velocity = np.random.uniform(-1.0, 1.0, (self.initial_pop_size, dim))\n        self.visited_points = 0\n        self.best_particle = None\n        self.best_particle_fitness = np.inf\n\n    def __call__(self, func):\n        F_min = 0.2\n        F_max = 1.0\n        CR_min = 0.4\n        CR_max = 0.9\n        inertia_weight = 0.9\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < CR:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i]:\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n                    if new_fitness < self.best_particle_fitness:\n                        self.best_particle_fitness = new_fitness\n                        self.best_particle = crossover_vector\n\n            # Update velocities and positions (APSO component)\n            cognitive_component = 2.0 * np.random.rand(pop_size, self.dim) * (self.population[:pop_size] - new_population[:pop_size])\n            social_component = 2.0 * np.random.rand(pop_size, self.dim) * (self.best_particle - new_population[:pop_size])\n            self.velocity[:pop_size] = inertia_weight * self.velocity[:pop_size] + cognitive_component + social_component\n            self.population[:pop_size] = np.clip(new_population[:pop_size] + self.velocity[:pop_size], -5.0, 5.0)\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive mutation\n            F_max *= 0.95\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "HybridDE_APSO_Elitism_AdaptiveMutation", "description": "A hybrid Differential Evolution and Adaptive Particle Swarm Optimization algorithm with elitism and adaptive mutation factor for robust convergence.", "configspace": "", "generation": 92, "fitness": 0.11939007733204145, "feedback": "The algorithm HybridDE_APSO_Elitism_AdaptiveMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.24789595375308004, 0.2641615968496901, 0.2651133538024807, 0.15579556554863627, 0.15656443333263215, 0.15705751973684523, 0.14781256083687744, 0.14754895799333878, 0.1719799217607606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016028227389806138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023166350387249457, 0.03321719437984505, 0.04994586326401329, 0.05922443812720324, 0.03742650383388069, 0.03891097172171043, 0.03944884267933757, 0.027912384106470567, 0.040816335735400444, 9.999999999998899e-05, 0.05879005933935111, 0.019348496459222764, 0.00828039803043723, 0.05078706779149067, 0.005578988634587612, 0.0020612223126560414, 9.999999999998899e-05, 0.01501361888948427, 0.9915262100808887, 0.990529721337981, 0.9854351905924217, 0.9916386863531689, 0.9876853894240971, 0.9906175961438066, 0.9853391850397564, 0.9862561112583608, 0.9908046356099547, 0.10234886380508756, 0.05566821420071577, 0.053280011648654146, 0.12678137423176228, 0.012128744772011313, 0.02196826443415756, 0.050246503067276405, 0.05097330739740724, 0.051328816528663834, 0.05442252470527442, 0.12943352178699008, 0.13132508914625163, 0.11243460877619837, 0.06297873546545363, 0.1679065206017627, 0.13244357444038302, 0.06706651873163938, 0.08807711372015015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052743521853567454, 9.999999999998899e-05, 0.062007505204759616, 0.06647748862497482, 0.07423790077777559, 0.05684978521335138, 0.009678905162025297, 0.009869848699185946, 0.1052830648126214, 0.05359276516145728, 0.050191034087023634, 0.055036096812056345, 0.020189784212277462, 0.018581046506243037, 0.05036944417069533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012241332245665038, 0.010915679094203545, 0.025749309460214698, 9.999999999998899e-05, 0.00884051774130079, 9.999999999998899e-05, 9.999999999998899e-05, 0.017368876315703496, 0.052800827225521596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015016372974277159, 9.999999999998899e-05, 9.999999999998899e-05, 0.030305625097836075, 0.1395047893100605, 0.25573432210730873, 0.2744300403927872, 0.16729752989004631, 0.13710711034406198, 0.1144376243969053, 0.13915642893036562, 0.13876691123088203, 0.13615103887498603, 0.048401220103407305, 0.06117023733412463, 0.019634914455789132, 0.0304273115408229, 0.06655568537726408, 0.070375696937783, 0.05568734680945997, 0.06525739174236478, 0.06239850890912679, 0.20157479768567876, 0.1064996302683856, 0.20213323396651306, 0.10166476142872982, 0.14941636459229646, 0.1546673808348551, 0.17014026853294617, 0.12204954582102745, 0.1030216673100558, 0.16383105937082365, 0.11908814272073942, 0.1987149115940361, 0.16125657337464128, 0.1377899688938391, 0.17485168930238537, 0.14202593188810475, 0.1706823433655691, 0.17473856239831242, 0.10786285899347914, 0.08125436767379868, 0.12837662400346905, 0.09949518322791773, 0.09524059681322539, 0.06479102179205443, 0.12018660537482972, 0.08757564262918172, 0.07980583873991831, 0.17096569488188706, 0.11391406717957053, 0.16260218740027488, 0.15004118595608829, 0.18859304792513654, 0.14438707878683876, 0.16291354217044063, 0.15397806990154095, 0.14413021648191093, 0.15437602259496908, 9.999999999998899e-05, 0.16796809434652804, 0.15896204617416387, 9.999999999998899e-05, 0.15789425591488815, 9.999999999998899e-05, 0.16387480021273204, 0.1520114817497078, 0.09965498467129563, 0.1385996862281973, 0.11303362356206692, 0.12416554203266783, 0.17121980845993878, 0.1925171012545549, 0.1245863765308377, 0.09007413328275293, 0.15317101473547423, 0.1080674105707452, 0.1080266166471745, 0.07871851095913918, 0.2805708861508036, 0.06685337824290505, 0.0893574356363186, 0.1151846377847362, 0.09487128097593267, 0.18414150799148243, 0.16908189746425428, 0.16785294124328776, 0.17446544590504598, 0.19361755741231867, 0.17649658967552406, 0.17896629480667947, 0.20516542230903834, 0.19239273950184188, 0.17287160867982998, 0.06407954950539918, 0.02866903370083962, 0.06253276033683852, 0.06415826214682074, 0.02713974314428047, 0.028492456991891957, 0.06774433503170096, 0.02591201780712904, 0.034584047930669826]}, "mutation_prompt": null}
{"id": "0a58c48d-9ace-498d-b09d-ef2486bf7737", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "16ff078f-0135-4f9e-9af8-417bc7fd4812", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "41804613-fa12-40e8-8bed-fe2eabe5e03e", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "9e3797bb-ba01-47f5-95d0-d128cf7d75d4", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "cac804e0-a267-4d12-b362-9d75ce0de087", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "cacc1351-afc7-423a-b5d6-461e5c58ebea", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Elitism_AdaptiveCooling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.4\n        F_max = 0.9\n        CR_min = 0.6\n        CR_max = 0.95\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget))))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget))\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling\n            temp *= 0.8 + 0.1 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedHybridDE_SA_Elitism_AdaptiveCooling", "description": "A hybrid DE and Simulated Annealing algorithm with adaptive population size, stochastic mutation factor, elitism, and adaptive cooling schedule for enhanced convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8542757455399294, 0.8534012406427992, 0.8620447145965002, 0.8586360467558356, 0.8576828256293216, 0.8497011294736926, 0.8481450198669873, 0.8396837232808125, 0.8587424410002794, 0.7681456614741409, 0.7723127676115465, 0.7639422833812674, 0.7711733776829701, 0.7694209515655652, 0.7698991085556767, 0.7663855179071375, 0.7700773592742665, 0.7823057501154597, 0.5844057811128511, 0.5289775579491471, 0.4826211554646346, 0.16117940501936934, 0.15499551294911162, 0.19160064193779636, 0.15395613359153426, 0.1360100210614058, 0.12140822337260437, 0.14021149240431918, 0.160882302952707, 0.12161204049371754, 0.13606719845169069, 0.4880203141632887, 0.14324636396373913, 0.4950656732533518, 0.11428347229384561, 0.16332555290810158, 0.9181506880384698, 0.9233164929350155, 0.929979074874706, 0.9333280805540525, 0.9453310373696837, 0.915880178421053, 0.9569624655089615, 0.9561094352875719, 0.9636338950327432, 0.6883843436038624, 0.6621843030564847, 0.72021150494579, 0.6474339009825893, 0.6876457895961872, 0.6785229322647983, 0.6415827867631314, 0.6982668974870072, 0.6417918232567826, 0.8278796641962399, 0.8052835805705371, 0.8383107746925186, 0.8631171122030168, 0.8490222093371951, 0.8651929054659024, 0.8642849647763291, 0.8701568907631796, 0.8692142472284019, 0.3898848287900335, 0.4520417440787895, 0.2750139418616314, 0.19200308523302123, 0.20246407686737988, 0.5901080423963276, 0.198036544227277, 0.19788214449841612, 0.19908079677585933, 0.26633366946573056, 0.24323809174242939, 0.28977324941856175, 0.12932376505625198, 0.332271246681463, 0.2524432823786522, 0.18568966222070404, 0.19153283947958444, 0.3625059711024001, 0.6834240324612628, 0.5532115476985153, 0.49238599827852514, 0.47102586066808627, 0.4270841183776667, 0.6854695590297829, 0.6503676854966027, 0.6629140109212666, 0.2852066946585431, 0.5291043683668439, 0.6615149302158032, 0.6980797279185857, 0.334880661876112, 0.6697285047709274, 0.32997556878589707, 0.7191102584790577, 0.6188308522452249, 0.7369806536153654, 0.15831594586449405, 0.1722406493369939, 0.10387424988654914, 0.09902804236557983, 0.27838361827664526, 0.4702745103249554, 0.17922104815773687, 0.2623269168017204, 0.17842074327678858, 0.441407985829948, 0.4536761935047806, 0.3885767899411777, 0.4330873361465213, 0.46926189516889694, 0.4278068306081101, 0.43927045307652857, 0.46584331008608626, 0.2935983430259318, 0.8107441441833123, 0.7460435175188357, 0.7518702866670227, 0.7979815480191483, 0.6885824616852911, 0.6420849203094632, 0.7104835764447976, 0.7097124430560895, 0.8101523608815389, 0.11392701317020293, 0.09488271591626585, 0.11811547620294571, 0.08808602309458113, 0.12892333687019442, 0.5335037778905722, 0.10444681796658661, 0.09571594330720767, 0.12610482943271528, 0.16324263288526086, 0.26886025476509945, 0.24539267816998667, 0.6760375598799234, 0.1957690317302505, 0.13460789904294346, 0.2680876540184266, 0.21022566988378266, 0.32237322304136296, 0.6527519944757743, 0.6467118015437618, 0.5091756867759787, 0.4846943690258768, 0.635634152938013, 0.5683266566851795, 0.660982122990291, 0.6747226703707321, 0.5507403835608087, 0.4598820990031909, 0.4172376025818686, 0.3939203533264888, 0.41019939159339336, 0.2855634023288035, 0.4158627962385234, 0.48464187852700435, 0.4845542420448816, 0.4787113788067918, 0.20615911528983621, 0.187237409263889, 0.19983466760243107, 0.19424773809550477, 0.19306221488254494, 0.20937348865747285, 0.194854285720094, 0.18445261072524932, 0.19473163330975662, 0.601930786403313, 0.19567290627276746, 0.6094347827483252, 0.6440199801925497, 0.686159919761187, 0.23207632255685617, 0.5157212329427522, 0.2331253654958867, 0.2344444131629535, 0.8490039411595162, 0.16901761949594307, 0.8459426295290583, 0.8459887674657484, 0.18553005587550175, 0.16985107800002874, 0.8561675649568277, 0.18783307698745755, 0.8307742903084976, 0.8403668237426708, 0.16867325832486946, 0.8325494029572936, 0.20933621392134905, 0.20516293531797092, 0.7600297718697766, 0.19888897907737146, 0.16697407374366613, 0.2022136306568929, 0.1791014628332499, 0.17716919972842482, 0.17959682733781446, 0.17883107353583216, 0.17484838018540827, 0.1717313189868872, 0.18148936745186617, 0.21280003774898226, 0.19947966930373207, 0.0893605834870228, 0.07844423346092777, 0.08668042789610975, 0.07213665410422032, 0.08587805065067189, 0.08492410211636836, 0.07939660851395469, 0.07791681024955976, 0.06765192486563132]}, "mutation_prompt": null}
{"id": "20e57461-cf42-447f-9e81-677fa3369229", "solution": "import numpy as np\n\nclass AdaptiveHybridDE_SA_ExplorationExploitation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 30\n        self.population = np.random.uniform(-5.0, 5.0, (self.initial_pop_size, dim))\n        self.fitness = np.full(self.initial_pop_size, np.inf)\n        self.visited_points = 0\n\n    def __call__(self, func):\n        F_min = 0.3\n        F_max = 0.8\n        CR_min = 0.55\n        CR_max = 0.9\n        temp = 1.0\n\n        while self.visited_points < self.budget:\n            pop_size = max(5, int(self.initial_pop_size * (1 - (self.visited_points / self.budget) ** 0.5)))\n            new_population = np.copy(self.population[:pop_size])\n\n            for i in range(pop_size):\n                if self.visited_points >= self.budget:\n                    break\n\n                CR = CR_min + (CR_max - CR_min) * (1 - (self.visited_points / self.budget) ** 0.5)\n                F = F_min + np.random.rand() * (F_max - F_min)\n\n                indices = np.random.choice(pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                crossover_vector = np.copy(self.population[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < CR or j == j_rand:\n                        crossover_vector[j] = mutant[j]\n\n                new_fitness = func(crossover_vector)\n                self.visited_points += 1\n\n                if new_fitness < self.fitness[i] or np.random.rand() < np.exp((self.fitness[i] - new_fitness) / temp):\n                    new_population[i] = crossover_vector\n                    self.fitness[i] = new_fitness\n\n            best_idx = np.argmin(self.fitness)\n            new_population[0] = self.population[best_idx]\n\n            # Adaptive cooling with a more aggressive schedule\n            temp *= 0.85 + 0.05 * (self.visited_points / self.budget)\n            self.population[:pop_size] = new_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveHybridDE_SA_ExplorationExploitation", "description": "An adaptive hybrid Differential Evolution and Simulated Annealing algorithm with dynamic mutation factor and crossover rate, emphasizing exploration and exploitation balance.", "configspace": "", "generation": 99, "fitness": 0.3782489428830825, "feedback": "The algorithm AdaptiveHybridDE_SA_ExplorationExploitation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.28.", "error": "", "parent_id": "7941b160-c763-4bcb-9877-77764f65af4e", "metadata": {"aucs": [0.8836552819062223, 0.8960687015923867, 0.888926708277707, 0.8969625331516954, 0.8908948300614739, 0.8927566852728688, 0.8872531841529607, 0.8948755554302722, 0.9008238273602037, 0.8409302579339345, 0.8358724601773866, 0.8312426757383329, 0.8237910498613134, 0.8204971264682617, 0.8258642388902648, 0.835299560046391, 0.8330381662286352, 0.837832420377455, 0.7689253762172376, 0.686579081753704, 0.14590876265344555, 0.17061608052545418, 0.684593277988609, 0.16481057593846649, 0.7229602856298163, 0.17566173314935674, 0.21863103621656732, 0.14923022040880496, 0.17124744160334027, 0.15093158521508154, 0.14058508035077244, 0.14700553047741982, 0.17195374595621327, 0.1398643740743022, 0.1287044113432546, 0.14690723983361453, 0.9576635268346018, 0.9802786284115375, 0.9460938875869997, 0.9323707554203502, 0.9589833017268454, 0.9537021845820746, 0.955824679377379, 0.9921304279340911, 0.9395567174967934, 0.44911812868655343, 0.3508632383183029, 0.34874316777352743, 0.5110876990044648, 0.4883890309919262, 0.47870913292525064, 0.42257102323948825, 0.2542895677711403, 0.1554872893213879, 0.8541811934710615, 0.8809216039020124, 0.20613701587993916, 0.8510617925963904, 0.21197973126011715, 0.883431473390304, 0.8255791114873571, 0.8819999571051691, 0.3881451092640147, 0.24128483121335087, 0.14400197735370657, 0.16314036262750886, 0.2499254117815377, 0.16727215639624904, 0.14971382704228076, 0.18763561547613516, 0.21824994310625612, 0.17480675193789053, 0.27372408960952654, 0.15198879864747283, 0.05366022642931889, 0.14057770698882865, 0.22226129546806128, 0.2462171588122095, 0.1994750651083771, 0.1690561287997685, 0.1616757433909255, 0.10137690189324045, 0.13849969828830222, 0.11941828130632826, 0.16233112777543923, 0.34499892858276027, 0.22949702569160157, 0.14864068464453561, 0.26608117868802694, 0.3791018576636339, 0.1441407167611647, 0.3286635550327961, 0.30993142952331354, 0.33070713349739955, 0.3985665053842433, 0.3289220922445234, 0.41361775194650896, 0.6009762917360615, 0.24229007872433916, 0.1602372516457845, 0.17082452791653813, 0.07361149318378135, 0.2918596554663353, 0.12647186934477594, 0.08353661616835506, 0.17646683889086356, 0.10209717111749783, 0.15033789171972112, 0.3305856958334551, 0.5102742985718771, 0.3075818796760157, 0.47872643033363593, 0.31038163695829324, 0.28769911417032545, 0.2611426251973892, 0.4586734694660429, 0.2188392576465048, 0.6273876111340606, 0.7608268467213366, 0.6099943890572634, 0.7038836484065261, 0.6105108120375593, 0.5703043600363967, 0.4249434985848569, 0.7006054538201703, 0.5844240623676948, 0.1310912151368917, 0.1375789827890549, 0.12192665678969095, 0.11698748301202433, 0.12188628873017626, 0.1129099420063241, 0.1544553793249428, 0.1574581246430915, 0.11339997406218483, 0.1526118553118183, 0.1405289029720308, 0.28132556836720735, 0.34759837724801634, 0.21448871274918335, 0.13591030247922864, 0.14805564138220417, 0.3068629365689719, 0.21313250045036947, 0.559090909961377, 0.6914616265661814, 0.38085343796020255, 0.6787028288563908, 0.4378790150023433, 0.5192750132761031, 0.7735344205674564, 0.5261999360378343, 0.5939424972688887, 0.46455347822956505, 0.2530171477856633, 0.2316931133904282, 0.40348867265134436, 0.4753884759891024, 0.39405406670152365, 0.45923980769834105, 0.4334740797792376, 0.38085555306948815, 0.21462415161148873, 0.18636704311234675, 0.18861014184341707, 0.18288005383027817, 0.22448745550557547, 0.22817930043118773, 0.18855025237888723, 0.19425420313982933, 0.20574084991997044, 0.2425496382564729, 0.20188726247614863, 0.21659143336106645, 0.18237025084686542, 0.5016456688702966, 0.785815938493754, 0.2403452197739624, 0.5258893598831491, 0.7904741718367078, 0.17453475514287398, 0.16319996475106313, 0.1560591345508856, 0.8895147679664671, 0.16438078687939173, 0.8819156717061328, 0.1666392645166247, 0.1670861716259766, 0.1704723876162879, 0.20781476936691679, 0.20892504022798952, 0.2089146210964844, 0.20385630814421873, 0.2092244543769315, 0.3101951042085844, 0.21277295629627668, 0.15197394760594163, 0.2114065971198681, 0.18849154199380114, 0.19379006612555882, 0.19011951498074964, 0.19428974652806696, 0.18974897599510188, 0.18593748848368052, 0.18876062636186686, 0.17834434614821004, 0.17512102753504155, 0.09824788965333808, 0.07920709908567602, 0.08635150437535155, 0.09728859806879808, 0.08907579692744527, 0.12323332566118772, 0.09779424288660343, 0.07923462805631665, 0.0860160072248255]}, "mutation_prompt": null}
