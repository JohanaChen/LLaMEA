{"id": "320988ea-963a-44e5-8d5b-e806b5164921", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5\n        self.cognitive_constant = 2.0\n        self.social_constant = 2.0\n        self.F = 0.8  # Differential evolution scale factor\n        self.CR = 0.9  # Crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions for PSO\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (self.inertia_weight * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n            \n            # Apply Differential Evolution to enhance exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution to balance exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 0, "fitness": 0.35699694933572335, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.24.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7700288814457885, 0.8167548247901638, 0.7913975064275833, 0.8236573094638923, 0.8190189909370386, 0.8197124611978738, 0.8115514212297167, 0.8103601156434919, 0.7739614326723591, 0.6581949057447637, 0.6122829448640257, 0.5918650967464483, 0.6150367958763698, 0.6101053359880007, 0.598779211752075, 0.6428831922763514, 0.6141737406945409, 0.6371478451097384, 0.16585006108348532, 0.1499501877358853, 0.1431961161665426, 0.14810938601614876, 0.1374209035052798, 0.16474095941191214, 0.4323485452789527, 0.15549915328784614, 0.12943826996926489, 0.1092209784716841, 0.1299496614878788, 0.11272498973231382, 0.1405405322222112, 0.12111229948980817, 0.13696668517473642, 0.12229217527944036, 0.14823596090534996, 0.143929320570514, 0.9890859981739581, 0.987826772050598, 0.9885045043600731, 0.9819502260983235, 0.9852783219693103, 0.9858753170884189, 0.9874704790612607, 0.9885704285802334, 0.9891992940339392, 0.49190169661959526, 0.5534271025512956, 0.5088276983065483, 0.5138834239362569, 0.4844684390014553, 0.5297153658203199, 0.5732637402829315, 0.5171312768382421, 0.5021747477486143, 0.6750159603569457, 0.783220598023581, 0.691530342789332, 0.7630667901923671, 0.6681495647598976, 0.7022152063292113, 0.6849356027059946, 0.7107148010459079, 0.7685071411679214, 0.3044742281876547, 0.40328545492857215, 0.3374007961677472, 0.401432296576817, 0.40992549178090254, 0.2622637323109658, 0.3327649342151031, 0.302470965088092, 0.376770595547426, 0.3799473242791581, 0.022128983077722708, 0.32495557466350133, 0.29371744819754375, 0.3732604861184491, 0.31655690168364803, 0.34090617201571405, 0.27462214539532326, 0.29886416297821106, 0.23699313869611316, 0.15649908629408382, 0.20074827605748602, 0.3088955506318892, 0.22269921806495996, 0.3122895442606378, 0.2805786722569382, 0.2443778492524683, 0.06739535886142456, 0.42932907401987086, 0.3476250323271639, 0.36890126602777806, 0.4015527323602447, 0.35115480583213865, 0.3346781651181755, 0.35695129062816244, 0.4213333407690607, 0.41794987885307433, 0.0714490792233683, 0.05255361806496328, 0.1447809045288333, 0.18179125648360606, 0.0, 0.09905409269928733, 0.18553595972799053, 0.11365642652660113, 0.06544244077674843, 0.2595299595377334, 0.24748209765440266, 0.26758749075772625, 0.2224928729468013, 0.27671635516387916, 0.22086285890812074, 0.2928390998142224, 0.24564381352217557, 0.23814600255707274, 0.5880477541670637, 0.6200054895692488, 0.6410539533361741, 0.2088480385958964, 0.6870824669394114, 0.6593193299580818, 0.6289552977247663, 0.6441006753002797, 0.637278921397369, 0.11771841918937809, 0.11604804927818546, 0.13731420636935487, 0.13572044581768372, 0.12597897534174607, 0.17281743675209071, 0.14092413263155978, 0.12270671237066455, 0.10760487137521157, 0.26840746159884543, 0.2792299980525942, 0.16844155397018257, 0.25156108709176317, 0.18573899194418297, 0.26171150090016004, 0.17677556682460493, 0.33725392641480423, 0.20361070668731318, 0.44212476260272526, 0.3590494505298494, 0.351994568310516, 0.38354085435609875, 0.395470573891303, 0.40525574000955744, 0.4145228946787285, 0.5020803777966645, 0.4114345177230986, 0.3116441042563939, 0.33459080965166876, 0.31536786159116803, 0.25867354231046735, 0.277829564749442, 0.2924209491521632, 0.2847572013500347, 0.3458833462289922, 0.2668808436370509, 0.1909991187390334, 0.20727385674043708, 0.18396016462106812, 0.23159797499127277, 0.18234071215948577, 0.19383967649092704, 0.21585734026112968, 0.19111591122756566, 0.21501532063313666, 0.19136118171899175, 0.20226150687662336, 0.211130836402722, 0.21068897132559616, 0.22873965756354386, 0.4449929923211571, 0.19051778002829, 0.29953866817251396, 0.21651731611886715, 0.261545310459671, 0.16967757454127963, 0.15308403958043892, 0.8741440600792056, 0.19867989023060195, 0.17483161493650368, 0.2022808086656256, 0.20048858967818473, 0.1607231083650067, 0.7579864371549938, 0.21180803053755792, 0.731321353330999, 0.2049843659054401, 0.2054263896914792, 0.2107924109560082, 0.20897155856073768, 0.20168956943298888, 0.30787990863983394, 0.2461861511659461, 0.20147189686729083, 0.19676522641134475, 0.19445195892114864, 0.2119991754674384, 0.22343609998984715, 0.21491186473215917, 0.20967828448963988, 0.18007018549919362, 0.09221369479998998, 0.09322523463320409, 0.0837127622088597, 0.08566935319178648, 0.08553136973215514, 0.09251556405707329, 0.09243590334889573, 0.08749596408529747, 0.08211508639174425]}, "mutation_prompt": null}
{"id": "0fb0c17b-fa74-46c1-a818-11cc585c866e", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 30  # Increased for better exploration\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Changed for adaptive exploration/exploitation\n        self.cognitive_constant = 1.5  # Adjusted for balanced cognitive impact\n        self.social_constant = 2.5  # Adjusted for stronger social impact\n        self.F = 0.7  # Differential evolution scale factor tweaked\n        self.CR = 0.8  # Crossover probability adjusted\n        self.adaptive_rate = 0.05  # New adaptive learning rate\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions for PSO\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (self.inertia_weight * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n            \n            # Adaptive Inertia Weight\n            self.inertia_weight = max(0.4, self.inertia_weight - self.adaptive_rate)\n\n            # Apply Differential Evolution to enhance exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "An Enhanced Hybrid PSO with Differential Evolution and Adaptive Learning Rate for Improved Convergence.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 25 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 25 is out of bounds for axis 0 with size 20')", "parent_id": "320988ea-963a-44e5-8d5b-e806b5164921", "metadata": {}, "mutation_prompt": null}
{"id": "965d6f27-7fb5-45e3-b6c4-0b7fe2045e03", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.9\n        self.cognitive_constant = 1.5\n        self.social_constant = 2.5\n        self.F = 0.9  # Differential evolution scale factor\n        self.CR = 0.8  # Crossover probability\n        self.func_evals = 0\n\n    def chaos_local_search(self, position):\n        perturbation = 0.01 * (np.random.rand(self.dim) - 0.5)\n        new_position = position + perturbation\n        return np.clip(new_position, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive inertia weight\n            self.inertia_weight = 0.9 - 0.7 * (self.func_evals / self.budget)\n            \n            # Update velocities and positions for PSO\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (self.inertia_weight * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n            \n            # Apply Differential Evolution to enhance exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n            \n            # Chaotic local search\n            if self.func_evals < self.budget:\n                chaotic_position = self.chaos_local_search(global_best_position)\n                chaotic_score = func(chaotic_position)\n                self.func_evals += 1\n                if chaotic_score < global_best_score:\n                    global_best_score = chaotic_score\n                    global_best_position = chaotic_position\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "An enhanced hybrid Particle Swarm Optimization with Adaptive Differential Evolution incorporating dynamic parameter adjustment and chaotic local search to improve convergence.", "configspace": "", "generation": 2, "fitness": 0.2624575114767, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "320988ea-963a-44e5-8d5b-e806b5164921", "metadata": {"aucs": [0.6274241755924175, 0.5809980855246402, 0.6118339943509088, 0.530529548621405, 0.661105058399942, 0.6301099066526182, 0.636065448759801, 0.6509468888017073, 0.6102117558356572, 0.33907823058431674, 0.42824366785468715, 0.34881513059915936, 0.43187144806612787, 0.3543790483237189, 0.37187749932503944, 0.4102554328537763, 0.36850817522045076, 0.36432854553692406, 0.1636717599100257, 0.1262472708064446, 0.18982182980740225, 0.15426650787963792, 0.14952388120643156, 0.1551442870323534, 0.1775137379739148, 0.16893528795885815, 0.1715369158477853, 0.14116296182979127, 0.11571959770699036, 0.1212372721697379, 0.11519208542229897, 0.12680683983159202, 0.13157133003675503, 0.11137782309034772, 0.12188640429193165, 0.10243918025348353, 0.9889992388809824, 0.9899933968607922, 0.9900688021002033, 0.9849309337872214, 0.986061905481297, 0.9862893505132331, 0.9847851913332967, 0.9901559983412354, 0.9850282495523938, 0.2990443393431652, 0.2684021538738751, 0.28937643873875696, 0.2612662158290252, 0.2732303073216541, 0.3034535249530158, 0.2733306988255124, 0.3113730344130714, 0.27120942754467037, 0.4599049104939372, 0.46727545089995837, 0.4549902350564201, 0.30622838062687263, 0.5852386324867762, 0.4257406098747528, 0.38207777989877734, 0.4692099945602328, 0.527622373496424, 0.17189124798148336, 0.14637492156991505, 0.1662595540096925, 0.17055102787688226, 0.15960112361448142, 0.10613666204765337, 0.16144417565884128, 0.1573085046800694, 0.19324878365653964, 0.1570275926235739, 0.10991371106328751, 0.10233496148710453, 0.17317842422214713, 0.18353345942819776, 0.17594318507494122, 0.1559972371688415, 0.1480848212018031, 0.12137554394260619, 0.07557173384870475, 0.018345083911625593, 0.06726401706504725, 0.06326701047883165, 0.0582843136439527, 0.03915778186488261, 0.026487501675930947, 0.05216293743224121, 0.012974071237447427, 0.1273445066649056, 0.13519497724895968, 0.12956357131750373, 0.12928967343056452, 0.08074656233075839, 0.1489107204281338, 0.16374969520046456, 0.17915360858386342, 0.16115071992786, 0.03213496682201622, 0.0330997752039488, 0.0459839552593061, 0.027124377160886448, 0.02843813295193809, 0.028218761396015868, 0.032297273732960985, 0.038327914806107755, 0.0687470628541974, 0.129666627325982, 0.1361647556130725, 0.11100181295361145, 0.14178730632681058, 0.11277427163235565, 0.1475497001139704, 0.11312209811233365, 0.11310690419049774, 0.11778581876093008, 0.4462468729128459, 0.4302420184868573, 0.43668216567853424, 0.48784410703520054, 0.475088225794851, 0.44284572195298144, 0.43802715207038334, 0.4220464589505105, 0.4604330610442573, 0.10605292007118772, 0.08729099575602939, 0.10599491222632351, 0.08571963183452203, 0.12872385118422625, 0.08536838511217881, 0.099569901679057, 0.11007186742913377, 0.09176709410346595, 0.1865863277598393, 0.19845384219143603, 0.15121206359322825, 0.17408932967704238, 0.20055973704475838, 0.17191286604991451, 0.20753628146404313, 0.3448504771465074, 0.18844968412094865, 0.3007067009295278, 0.26574430477269806, 0.2725665200554327, 0.2865716910320383, 0.2776331985129652, 0.30159093595508435, 0.3219251602061147, 0.3507492795948731, 0.32386625821793846, 0.21588089287179668, 0.2238059165995825, 0.21392970074966966, 0.18994423675083683, 0.22343669156774704, 0.21753438823430038, 0.2578836000703706, 0.2614114753762109, 0.23635549937457767, 0.17740038976040617, 0.1797527589488116, 0.1839729904992159, 0.18040623178817428, 0.1639731296580198, 0.17299459736044898, 0.19994484162587256, 0.1769516321878526, 0.2117211214759871, 0.18812234989062704, 0.20149879764818057, 0.2828646346889504, 0.21186706967004498, 0.2033437874415882, 0.20805963995353982, 0.2079293934661861, 0.23838411400429182, 0.18498937981348695, 0.16445099051160228, 0.1936056826716649, 0.14639528381873823, 0.5743958341708124, 0.1895885860594071, 0.5497072421231193, 0.15891649737411895, 0.3877470307269919, 0.5361107164965324, 0.5908878466477667, 0.4177157158300342, 0.43942976144476165, 0.5439656974991501, 0.36583913292239434, 0.20199991008007356, 0.20751123734217314, 0.20846333740664524, 0.20453257071510922, 0.2180100920864262, 0.1995146661245074, 0.2029009595424608, 0.2223006931786382, 0.2081773259859344, 0.17522162262114704, 0.2040340434446678, 0.18898763903076576, 0.2396544630771178, 0.09407449933222123, 0.08399462256692236, 0.07988626257413944, 0.07952972532781333, 0.1025630267016635, 0.0740010663839159, 0.08044681936497855, 0.08925189115062071, 0.08555119564513347]}, "mutation_prompt": null}
{"id": "436f5547-b350-4e3b-90d9-156af963cdc4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30  # Increased swarm size for better diversity\n        self.population_size = 30  # Increased population for DE phase\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5\n        self.cognitive_constant = 1.5  # Adjusted cognitive constant\n        self.social_constant = 2.5  # Adjusted social constant\n        self.F = 0.9  # Increased DE scale factor for greater exploration\n        self.CR = 0.8  # Adjusted crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions for PSO\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (self.inertia_weight * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n            \n            # Apply Differential Evolution to enhance exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "An adaptive hybrid Particle Swarm Optimization and Differential Evolution algorithm with dynamic parameter tuning for enhanced convergence in diverse search spaces.", "configspace": "", "generation": 3, "fitness": 0.28645795856882306, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "320988ea-963a-44e5-8d5b-e806b5164921", "metadata": {"aucs": [0.6758761460256183, 0.6645616381417015, 0.6771434363096319, 0.7277278189655814, 0.7224428487645309, 0.7209039164637641, 0.6934735607429561, 0.7127269271154191, 0.691029774627971, 0.4836736434952661, 0.4436165941242062, 0.3735641513094753, 0.4413630874292833, 0.3691781414852028, 0.37098808031721764, 0.365630079790607, 0.48750815275186343, 0.4657942151532839, 0.23489968399144612, 0.1528670736420309, 0.1979016352467612, 0.1675207769967363, 0.14370002657868486, 0.156794901942783, 0.10719171867587685, 0.17213362320373782, 0.11239940795535242, 0.11867462964213049, 0.1453032255671557, 0.13388859755158267, 0.1727871368379711, 0.11118011928905835, 0.11242448221362644, 0.12936019200094995, 0.1343555091513341, 0.12319486150861081, 0.9880245493816319, 0.9890445898257966, 0.988896893532161, 0.9788175217322819, 0.9870665604772466, 0.9890432804352188, 0.9781846608031548, 0.9835343395221844, 0.984021353330993, 0.4052679895464789, 0.05823072705258692, 0.34843693992860936, 0.3413249021954431, 0.3291871722479598, 0.35803133702742684, 0.305374060489097, 0.32715143753813203, 0.08609014287627448, 0.5500816502861121, 0.47087450916804297, 0.2946088741571138, 0.48642121748904255, 0.5498717978323596, 0.28105960924031237, 0.44919842855703085, 0.48788599943643063, 0.4722515905380342, 0.12530719493208986, 0.1946550174810473, 0.2103058396058637, 0.17614018642561535, 0.20029986719255277, 0.19080876313719541, 0.20214569355006318, 0.15741850344499486, 0.19223084724097372, 0.20752845432505096, 0.10048107962284525, 0.17629622228806707, 0.2135556654492654, 0.22756672673664147, 0.16310769514739365, 0.18528037945401077, 0.03180020159677055, 0.1974051811574915, 0.03630695378675575, 0.019232059356100173, 0.022003601033511733, 0.054088556295134205, 0.033287473519883815, 0.024662296101292447, 0.029441278951386596, 0.040315618692348454, 0.04940483737735468, 0.12646984802894568, 0.14989724681087102, 0.15823442969607404, 0.12349330202960485, 0.11516531244867234, 0.128958403829175, 0.14290759858225333, 0.1472865975238281, 0.1525157882277357, 0.05704573953855974, 0.038902920646686434, 0.021925896450879723, 0.05574668104029756, 0.03033217538460453, 0.03387433719455024, 0.03949046349265739, 0.006308458030339303, 0.02914651254284617, 0.1021040901959368, 0.11090264051556364, 0.10294923556976776, 0.18006426827583288, 0.16571062767720723, 0.14367579495096594, 0.1413670051367779, 0.1681247904309936, 0.13599494435194504, 0.46378323994691684, 0.49862132029012285, 0.42046627258477365, 0.4719406213353785, 0.4765494691720674, 0.47518134004750934, 0.48275215832124063, 0.4743207256609777, 0.4968472201565487, 0.09418411177347075, 0.08681617705754163, 0.0986271855173283, 0.1151130103207173, 0.11757050451175677, 0.12162296034821463, 0.11745918993856208, 0.10180644157302632, 0.09198059898246813, 0.2107939106375013, 0.19440667369393394, 0.16452231314348775, 0.16830215704070028, 0.17004845097090981, 0.20378281098363127, 0.18613009969257455, 0.284822739768432, 0.2133089340292339, 0.3543477920962045, 0.3445695479581642, 0.3152581362475837, 0.2877676334014443, 0.3457943173664866, 0.341781375101061, 0.37401931547299416, 0.37208162761972907, 0.3604550497339395, 0.16991628922480617, 0.2238301159069832, 0.28269003628027745, 0.1963322084602369, 0.18781870586703286, 0.2401715518308296, 0.26349929303334185, 0.28444478479485336, 0.2923616239855975, 0.18122485823345147, 0.2295609030465372, 0.19924041548968585, 0.18983116854251159, 0.19307450412389926, 0.20266580650789023, 0.19901912446482806, 0.21143541553000866, 0.20407107744693986, 0.24242237134023237, 0.251990494801011, 0.36766931164769423, 0.4827686097248427, 0.19746102399276488, 0.190253995839049, 0.3643646072269273, 0.21022553963892465, 0.2631263177470041, 0.799957838620771, 0.7406404478224022, 0.15328517065213765, 0.7600315442224691, 0.7229427819879091, 0.18885333070601373, 0.46038119031506475, 0.1994550661035719, 0.7761675406310872, 0.6608986507354172, 0.1667351889748092, 0.3676964404105876, 0.5575138675531017, 0.1674174846606098, 0.20232790352763497, 0.2069600544326945, 0.5128129968593061, 0.6923015446186902, 0.2033935778059487, 0.20382689074967664, 0.18249831420178952, 0.18025613610773839, 0.20040590608837605, 0.2076360167593142, 0.18440527312098887, 0.18353723534162814, 0.19891341573353016, 0.07965139393619447, 0.07511829764442679, 0.07068216153396534, 0.08308408436685422, 0.08301729757063803, 0.08986278892290789, 0.07668706569480632, 0.0801104738965761, 0.08471483916949951]}, "mutation_prompt": null}
{"id": "6f2d598a-9f30-4269-a6c9-9f30d0d29f54", "solution": "import numpy as np\n\nclass RefinedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for better balance\n        self.cognitive_constant = 1.5  # Adjusted to enhance exploration\n        self.social_constant = 1.5  # Adjusted for improved convergence\n        self.F = 0.9  # Slight increase in scale factor for diversity\n        self.CR = 0.8  # Slight decrease in crossover probability for diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution to enhance exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "RefinedHybridPSO_DE", "description": "A refined hybrid Particle Swarm Optimization with Adaptive Differential Evolution incorporating dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 4, "fitness": 0.36607921130201704, "feedback": "The algorithm RefinedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "320988ea-963a-44e5-8d5b-e806b5164921", "metadata": {"aucs": [0.8045297164346028, 0.8329126866042733, 0.8338708953888798, 0.8171861754316592, 0.19015736466582223, 0.8443946668927993, 0.8175633009779202, 0.8385473835580908, 0.8411986729944528, 0.6933063429169413, 0.6700752045381702, 0.6854987863735513, 0.6938937780652996, 0.7236263141791975, 0.6879348673140981, 0.6792527625358211, 0.6752709997758704, 0.6770590862976207, 0.4479224699591563, 0.16563776641250894, 0.5429015783330401, 0.14361821387804086, 0.5471853347499726, 0.15967869779533506, 0.16843142341561546, 0.5237948268390343, 0.14687745463848967, 0.15714799002360647, 0.14982200793721367, 0.5110123498250345, 0.13186549433390005, 0.15584755428382013, 0.4810922357291706, 0.17203468565501823, 0.16399956165966756, 0.15908573839181062, 0.9909680297691008, 0.9854593972169551, 0.9891933589849584, 0.9798743600854962, 0.9848501342358794, 0.9857397462771021, 0.9843236058464042, 0.9856538725471798, 0.9868777054865622, 0.059210061201642517, 0.6666398926818278, 0.6668594193664055, 0.6772812143296587, 0.6528120641580165, 0.6757355044972888, 0.6522166148419052, 0.669319521824568, 0.08798185989599283, 0.22528419348915873, 0.7917600528883167, 0.7156238446604681, 0.8061219262658789, 0.773320510818254, 0.27383516364961125, 0.6571801317673103, 0.7709818625768832, 0.7636583697760944, 0.3336207505657838, 0.5091629415865715, 0.3677585528446353, 0.31537693368485975, 0.12963470599722315, 0.2924983325736935, 0.12290732126630843, 0.3325979254831113, 0.33782418387127966, 0.37232207809849605, 0.010022128647249828, 0.26368566950811423, 0.4071932613977235, 0.3738145679417718, 0.42008133122821223, 0.36749992704683343, 0.30447182722893695, 0.32372810912621297, 0.057913200327315284, 0.05639998871251051, 0.09626886060435569, 0.09788759985195228, 0.10028185093620756, 0.06686120188792355, 0.0998300675876086, 0.10768714978803151, 0.22029044204966908, 0.2192655612903579, 0.1894665935920733, 0.20573641801845477, 0.18659736077177713, 0.01651024353209174, 0.22778226692766435, 0.23018302003083224, 0.23893745074338335, 0.23894600005130984, 0.050665650912547266, 0.07017460647967488, 0.09166924560737699, 0.12179513185212276, 0.06587592762099159, 0.07243335191838218, 0.11639215288401317, 0.09074038302170961, 0.0851908524000482, 0.22292216068175652, 0.15200082416074534, 0.22028466991993068, 0.2595139158199318, 0.2359117865427921, 0.27850438918727516, 0.19600891970536571, 0.0, 0.18181780887261456, 0.5887314587795505, 0.5760063708420378, 0.6075460656945428, 0.623160818266406, 0.5814447878153883, 0.6160699338690561, 0.6077096453504175, 0.608326003093464, 0.6175050669954494, 0.08507002139950293, 0.11891180283332792, 0.06601193915234582, 0.16700075720945917, 0.1289640447940965, 0.16312492139474322, 0.1120022123322022, 0.09332667296018626, 0.11362179266454642, 0.24432007471520345, 0.1855372489606366, 0.28456609350593165, 0.42447940906678205, 0.15675061669522405, 0.17580978823686766, 0.6444932878653807, 0.25724091929523707, 0.17304614822990172, 0.3381568359237185, 0.4711166336503223, 0.41797638764928624, 0.38376172726292435, 0.5148430820411753, 0.5220878061024816, 0.47869772974238345, 0.6992334786757264, 0.524395955174599, 0.2880142491018661, 0.2377790067441431, 0.19044519422788775, 0.26970700013740545, 0.3053031738599957, 0.28020891447805296, 0.25895993588952804, 0.269200384631882, 0.3924749997275906, 0.2101636067892203, 0.22187734903932366, 0.20171602885985418, 0.2003762745537283, 0.21085533905159293, 0.1908344738824006, 0.21018172041189354, 0.23308512511145496, 0.2268355276481545, 0.19826545845380905, 0.6657935830427184, 0.24814983870317797, 0.21567985621097285, 0.21775426758062222, 0.23126956753458594, 0.20576440220090386, 0.1985204864996183, 0.2394734084830945, 0.8694739505853478, 0.8408569739337359, 0.15349336184848128, 0.8406985796911346, 0.19667371346811724, 0.8417463222206465, 0.09924086040490587, 0.16928136226238022, 0.15246013056041452, 0.7933879617849962, 0.20737854783374143, 0.7641621010756134, 0.6129972648190846, 0.16793591381380224, 0.20972274321109774, 0.20915391840330955, 0.7964186828984363, 0.20824169438538465, 0.19754878575197987, 0.19804550380767283, 0.195338933350391, 0.18845507902866043, 0.20017217506369367, 0.18798670266505701, 0.2046218413407832, 0.2005815217247292, 0.20569430211920559, 0.1032063516556555, 0.08359946888011582, 0.0850479422513798, 0.09097772505776958, 0.09004951698006936, 0.09282955316495811, 0.08592416674313519, 0.09542278389470016, 0.09860208312686569]}, "mutation_prompt": null}
{"id": "7cc9856e-6ea9-41a0-8463-a94f7d6f0710", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Slightly reduced for better balance\n        self.cognitive_constant = 1.7  # Increased to enhance exploration\n        self.social_constant = 1.4  # Decreased for improved convergence\n        self.F = 0.85  # Adjusted scale factor for diversity\n        self.CR = 0.9  # Increased crossover probability for exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution to enhance exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with adaptive strategies and random elite selection for improved diversity and convergence.", "configspace": "", "generation": 5, "fitness": 0.40656777775793596, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "6f2d598a-9f30-4269-a6c9-9f30d0d29f54", "metadata": {"aucs": [0.8652166690882587, 0.8591691549294879, 0.8677186455523379, 0.873389681424032, 0.1903752405428868, 0.8749276721051793, 0.8635461382089216, 0.85974437361788, 0.8461111066162845, 0.7676448611098855, 0.7532684968020668, 0.7393975847458335, 0.7571706451172293, 0.7601520154017976, 0.7521493436093167, 0.736097180229889, 0.7470528251197041, 0.7055979745140368, 0.1653345464839946, 0.14955550287228292, 0.1524739216611728, 0.16114761998139326, 0.06555627256835672, 0.17338365062602756, 0.12661785447282092, 0.17437969821532984, 0.15355376401596077, 0.15634302601051442, 0.16274444534241572, 0.12762208113631945, 0.11160600340031857, 0.13405010585114885, 0.15423565443915654, 0.10763486068629213, 0.14722996392412513, 0.14395172638445253, 0.9885749631769908, 0.9875053986103716, 0.9886243317977227, 0.9763241876632544, 0.9855973245402023, 0.9847158861693028, 0.9821146764593135, 0.985394361464001, 0.9864174621295585, 0.7056566369444341, 0.7345688675106649, 0.6951224061571145, 0.6817002400415587, 0.7270988268101282, 0.7350763278322288, 0.7501257768447197, 0.7322468073260471, 0.7176430420305082, 0.7813646802672047, 0.7619756108388911, 0.8300123475155575, 0.721085475536414, 0.8378216711301031, 0.8354216756220706, 0.7920599527936443, 0.8459740940878346, 0.8412682897973558, 0.5513430142438274, 0.4428748519119313, 0.4646372984548922, 0.5797406263457543, 0.41574264059174615, 0.3225015907716421, 0.4164635846588426, 0.4738306967897241, 0.4507766806462675, 0.47824557785381994, 0.05426444994273005, 0.31894103860767753, 0.13240842227991378, 0.5393113849625759, 0.4524803386353031, 0.4887203054342215, 0.12377615119250363, 0.4753065975802663, 0.2529781823181977, 0.2081346426858458, 0.2489614324030467, 0.19022108890137757, 0.22965484260539826, 0.22551510477394787, 0.2515605589397505, 0.2327066746222285, 0.2730997909158256, 0.38521620265952794, 0.4069339375320601, 0.299669563257039, 0.38171002110439856, 0.34653842960551784, 0.31745501552110134, 0.3847882305365592, 0.40028027630059926, 0.4463148104040373, 0.13214898410342335, 0.15287466182088716, 0.32516926017168735, 0.13055030365191944, 0.11384085291390167, 0.07433864823377967, 0.12463308845260546, 0.1192033389191336, 0.18650986586416118, 0.2881347216868241, 0.25785734470380917, 0.27599600951541536, 0.24400963266918108, 0.26707381630826443, 0.30768078881413696, 0.2460431039163251, 0.0, 0.2968331487625595, 0.6386065972805942, 0.6511206471682676, 0.7030344884256994, 0.6902154730368658, 0.6696999393839878, 0.7063932478461981, 0.6939552628176111, 0.6939981917577753, 0.6880394002090979, 0.11556731393435093, 0.13428810324974516, 0.17257199274688262, 0.10671450103661251, 0.09222136866643327, 0.14541055138440406, 0.09979514697962621, 0.11840901441949103, 0.112474942335139, 0.17999611285336736, 0.2261969518303516, 0.19735964999839228, 0.6388294125264444, 0.6921662035004301, 0.26144838527276104, 0.2450258027214678, 0.21127687242640392, 0.263411977444864, 0.6048381645737504, 0.40570983026465623, 0.4964213788648387, 0.5305372640001295, 0.4436923733026997, 0.43956964025774137, 0.654822372747796, 0.6138295473319781, 0.6311806324990573, 0.31971763111733176, 0.32033735590104295, 0.19868570718951062, 0.43877418979215965, 0.3465122900750063, 0.3303592583153465, 0.46466111280707023, 0.4376606139952709, 0.24122798582083993, 0.20925216248032485, 0.20685995156397863, 0.2122549872205033, 0.23113823715346093, 0.19254848576185601, 0.22573055474386106, 0.21222473767160543, 0.20384499744904283, 0.19297930594079815, 0.220454817990287, 0.24660111833175713, 0.7375919154795836, 0.24977162187760893, 0.20699879082900163, 0.2170123619958262, 0.6711930551392296, 0.19660542564566563, 0.20127108410430328, 0.8603660070794873, 0.1267595275617729, 0.15185682984930737, 0.8809588543388381, 0.8448822965301417, 0.17435760764663188, 0.1686122852170614, 0.1984435286701257, 0.15211212694858423, 0.8434278135449482, 0.11294430553608692, 0.796310512468154, 0.20750998953342725, 0.16777141285775798, 0.21241092883780988, 0.10392712798255865, 0.21151474200420373, 0.8170533309091929, 0.2236151337131006, 0.19226178598657384, 0.18992219728675797, 0.19776628173247335, 0.17800372791767982, 0.25492176225822727, 0.21707994369934802, 0.20015901855023055, 0.20160936971754373, 0.08201980279230969, 0.09374458884364034, 0.09899533503196689, 0.08940650061204392, 0.08809552772803109, 0.10263460386325718, 0.09942945113472901, 0.10032596023353813, 0.09268801120602654]}, "mutation_prompt": null}
{"id": "06685c10-1a06-414d-827f-811a313c9810", "solution": "import numpy as np\n\nclass AdaptiveParallelHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for better dynamic balance\n        self.cognitive_constant = 1.5  # Kept balanced for exploration\n        self.social_constant = 1.5  # Adjusted for uniform convergence\n        self.F = 0.9  # Enhanced diversity factor\n        self.CR = 0.8  # Balanced crossover probability for stability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution with multi-point crossover\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveParallelHybridPSO_DE", "description": "Adaptive Parallel Hybrid PSO-DE with dynamic inertia and multi-point crossover for enhanced convergence and diversity.", "configspace": "", "generation": 6, "fitness": 0.36607921130201704, "feedback": "The algorithm AdaptiveParallelHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "7cc9856e-6ea9-41a0-8463-a94f7d6f0710", "metadata": {"aucs": [0.8045297164346028, 0.8329126866042733, 0.8338708953888798, 0.8171861754316592, 0.19015736466582223, 0.8443946668927993, 0.8175633009779202, 0.8385473835580908, 0.8411986729944528, 0.6933063429169413, 0.6700752045381702, 0.6854987863735513, 0.6938937780652996, 0.7236263141791975, 0.6879348673140981, 0.6792527625358211, 0.6752709997758704, 0.6770590862976207, 0.4479224699591563, 0.16563776641250894, 0.5429015783330401, 0.14361821387804086, 0.5471853347499726, 0.15967869779533506, 0.16843142341561546, 0.5237948268390343, 0.14687745463848967, 0.15714799002360647, 0.14982200793721367, 0.5110123498250345, 0.13186549433390005, 0.15584755428382013, 0.4810922357291706, 0.17203468565501823, 0.16399956165966756, 0.15908573839181062, 0.9909680297691008, 0.9854593972169551, 0.9891933589849584, 0.9798743600854962, 0.9848501342358794, 0.9857397462771021, 0.9843236058464042, 0.9856538725471798, 0.9868777054865622, 0.059210061201642517, 0.6666398926818278, 0.6668594193664055, 0.6772812143296587, 0.6528120641580165, 0.6757355044972888, 0.6522166148419052, 0.669319521824568, 0.08798185989599283, 0.22528419348915873, 0.7917600528883167, 0.7156238446604681, 0.8061219262658789, 0.773320510818254, 0.27383516364961125, 0.6571801317673103, 0.7709818625768832, 0.7636583697760944, 0.3336207505657838, 0.5091629415865715, 0.3677585528446353, 0.31537693368485975, 0.12963470599722315, 0.2924983325736935, 0.12290732126630843, 0.3325979254831113, 0.33782418387127966, 0.37232207809849605, 0.010022128647249828, 0.26368566950811423, 0.4071932613977235, 0.3738145679417718, 0.42008133122821223, 0.36749992704683343, 0.30447182722893695, 0.32372810912621297, 0.057913200327315284, 0.05639998871251051, 0.09626886060435569, 0.09788759985195228, 0.10028185093620756, 0.06686120188792355, 0.0998300675876086, 0.10768714978803151, 0.22029044204966908, 0.2192655612903579, 0.1894665935920733, 0.20573641801845477, 0.18659736077177713, 0.01651024353209174, 0.22778226692766435, 0.23018302003083224, 0.23893745074338335, 0.23894600005130984, 0.050665650912547266, 0.07017460647967488, 0.09166924560737699, 0.12179513185212276, 0.06587592762099159, 0.07243335191838218, 0.11639215288401317, 0.09074038302170961, 0.0851908524000482, 0.22292216068175652, 0.15200082416074534, 0.22028466991993068, 0.2595139158199318, 0.2359117865427921, 0.27850438918727516, 0.19600891970536571, 0.0, 0.18181780887261456, 0.5887314587795505, 0.5760063708420378, 0.6075460656945428, 0.623160818266406, 0.5814447878153883, 0.6160699338690561, 0.6077096453504175, 0.608326003093464, 0.6175050669954494, 0.08507002139950293, 0.11891180283332792, 0.06601193915234582, 0.16700075720945917, 0.1289640447940965, 0.16312492139474322, 0.1120022123322022, 0.09332667296018626, 0.11362179266454642, 0.24432007471520345, 0.1855372489606366, 0.28456609350593165, 0.42447940906678205, 0.15675061669522405, 0.17580978823686766, 0.6444932878653807, 0.25724091929523707, 0.17304614822990172, 0.3381568359237185, 0.4711166336503223, 0.41797638764928624, 0.38376172726292435, 0.5148430820411753, 0.5220878061024816, 0.47869772974238345, 0.6992334786757264, 0.524395955174599, 0.2880142491018661, 0.2377790067441431, 0.19044519422788775, 0.26970700013740545, 0.3053031738599957, 0.28020891447805296, 0.25895993588952804, 0.269200384631882, 0.3924749997275906, 0.2101636067892203, 0.22187734903932366, 0.20171602885985418, 0.2003762745537283, 0.21085533905159293, 0.1908344738824006, 0.21018172041189354, 0.23308512511145496, 0.2268355276481545, 0.19826545845380905, 0.6657935830427184, 0.24814983870317797, 0.21567985621097285, 0.21775426758062222, 0.23126956753458594, 0.20576440220090386, 0.1985204864996183, 0.2394734084830945, 0.8694739505853478, 0.8408569739337359, 0.15349336184848128, 0.8406985796911346, 0.19667371346811724, 0.8417463222206465, 0.09924086040490587, 0.16928136226238022, 0.15246013056041452, 0.7933879617849962, 0.20737854783374143, 0.7641621010756134, 0.6129972648190846, 0.16793591381380224, 0.20972274321109774, 0.20915391840330955, 0.7964186828984363, 0.20824169438538465, 0.19754878575197987, 0.19804550380767283, 0.195338933350391, 0.18845507902866043, 0.20017217506369367, 0.18798670266505701, 0.2046218413407832, 0.2005815217247292, 0.20569430211920559, 0.1032063516556555, 0.08359946888011582, 0.0850479422513798, 0.09097772505776958, 0.09004951698006936, 0.09282955316495811, 0.08592416674313519, 0.09542278389470016, 0.09860208312686569]}, "mutation_prompt": null}
{"id": "8123e477-638a-44cf-bdff-f12c46604465", "solution": "import numpy as np\n\nclass AdaptiveHierarchicalHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Adjusted for better coverage\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Enhanced inertia for better momentum\n        self.cognitive_constant = 1.5  # Adjusted cognitive component\n        self.social_constant = 1.5  # Balanced social component\n        self.F = 0.9  # Higher scale factor for increased diversity\n        self.CR = 0.85  # Balanced crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.swarm_size, self.dim))  # Initial small random velocities\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.5 + 0.5 * (1 - evals / max_evals))\n\n        def roulette_selection(scores):\n            max_score = np.max(scores)\n            probabilities = (max_score - scores) / (max_score - np.min(scores) + 1e-10)\n            probabilities /= np.sum(probabilities)\n            return np.random.choice(self.swarm_size, p=probabilities)\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                idx_best = roulette_selection(personal_best_scores)\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n\n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHierarchicalHybridPSO_DE", "description": "Adaptive Hierarchical Hybrid PSO-DE with dynamic parameter tuning and multi-scale exploration for robust performance across diverse landscapes.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities contain NaN').", "error": "ValueError('probabilities contain NaN')", "parent_id": "7cc9856e-6ea9-41a0-8463-a94f7d6f0710", "metadata": {}, "mutation_prompt": null}
{"id": "605c6ab3-d460-4401-b902-5c3fe2a312cf", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Slightly increased for better sampling\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Further reduced for exploitation\n        self.cognitive_constant = 1.5  # Tuned for improved exploration\n        self.social_constant = 1.6  # Adjusted for convergence\n        self.F = 0.8  # Modified for better diversity\n        self.CR = 0.8  # Tuned crossover probability for exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.5 + 0.5 * np.cos(np.pi * evals / max_evals))  # Quantum-inspired oscillation\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution to enhance exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveQuantumInspiredPSO_DE", "description": "Adaptive Quantum-inspired PSO with Differential Evolution for enhanced exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": 0.3838856730497482, "feedback": "The algorithm AdaptiveQuantumInspiredPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.28.", "error": "", "parent_id": "7cc9856e-6ea9-41a0-8463-a94f7d6f0710", "metadata": {"aucs": [0.8773349791724517, 0.8687883989713335, 0.8660995983232926, 0.872084360747394, 0.869457993000224, 0.875950773553993, 0.8627279407014596, 0.8674434644869997, 0.8613522210595032, 0.7345832226480781, 0.7398772559319451, 0.7435138166649075, 0.7449850949321817, 0.7240901548344502, 0.776356068085265, 0.7486998786063918, 0.7603105363638748, 0.7744955009379437, 0.5730224660450651, 0.128520191414084, 0.13928071067742398, 0.16895587492274922, 0.6319943155685481, 0.15117086652788037, 0.575525584070515, 0.535057712555842, 0.29921890153537023, 0.15092860137270003, 0.13573616830035262, 0.15487742685378691, 0.1166805850989896, 0.14986315228932579, 0.12560273915778375, 0.13830132557586583, 0.138900210880763, 0.1325332559714163, 0.9878288710026623, 0.9882200466129506, 0.983947356483188, 0.9786322333888565, 0.9835221110124662, 0.9838949336335747, 0.9828946247254113, 0.9862609427240624, 0.9790365973398378, 0.7280100296611521, 0.7378583931167545, 0.7305205124813947, 0.7464703474044261, 0.7049494975088821, 0.7170917143754194, 0.08836428953953857, 0.7240935017970029, 0.7017953270296581, 0.8325073749031033, 0.845284171099633, 0.8103418915461478, 0.8013157887847795, 0.8560996805441369, 0.856165700738122, 0.787930286752338, 0.13699956180591288, 0.38497661458394716, 0.44576438318430933, 0.24832148608124294, 0.3119080053004467, 0.3572099035749119, 0.3169196719966262, 0.12918330509822296, 0.13057612156259768, 0.1257592566545962, 0.34744023292639337, 0.3535301616083958, 0.1456385907910719, 0.33929854738007603, 0.3609234389672764, 0.3353875327757614, 0.31891300986934257, 0.4641785941900596, 0.29246340923546454, 0.13171202010459637, 0.12026143018243274, 0.0, 0.17041258723158392, 0.1200060859097144, 0.10675335875730219, 0.11584004979816598, 0.08114952418366606, 0.1495881496601198, 0.10649853316458835, 0.25786459006335727, 0.19909069198726137, 0.24484235974515656, 0.20321093381479882, 0.22498636858740007, 0.21805081440982899, 0.3221395211881377, 0.2542804575145228, 0.26472840625811267, 0.040029122353680946, 0.05448431287037836, 0.0678865063195413, 0.1172872883259517, 0.32719984619671416, 0.07586159007973492, 0.096734733512164, 0.07169282497245655, 0.16980334513444428, 0.21877243480073882, 0.28310014164071695, 0.26162762028886966, 0.2634011249400964, 0.25024551224696834, 0.29090366348784646, 0.16481139114439536, 0.10509357210452674, 0.25143971382690444, 0.6452781379859412, 0.6162293560697732, 0.6262369294773017, 0.6720361043230374, 0.6301701710711867, 0.6306425659019971, 0.6527221620300866, 0.6365157884047646, 0.6244545332173079, 0.13890947342526383, 0.13804735606266672, 0.13295440411448545, 0.12008863236328893, 0.14387653653035082, 0.12914930953882853, 0.170359517759625, 0.10693518534114754, 0.09404832801769003, 0.1969804880701782, 0.4283144421884926, 0.34237865833235437, 0.17284969742084555, 0.36883465170808316, 0.1792665696039638, 0.3292835579632011, 0.3264075997088153, 0.20420256970329376, 0.5467399759820504, 0.30768009186203793, 0.5023803351090704, 0.4701320967874403, 0.2788220288283173, 0.510222813453671, 0.4305990904810181, 0.6003865282493979, 0.5628531504212749, 0.354540354521356, 0.3296202649763048, 0.3543805842645683, 0.2910456856680401, 0.2101744277567693, 0.40001918872553643, 0.3998599123033949, 0.38155537175291754, 0.3363188004964841, 0.23765509088130132, 0.24094494943444633, 0.20089057649383857, 0.23573552201173764, 0.19328468026801948, 0.19812725178786605, 0.22400178622366906, 0.23476160360727882, 0.22575383788467707, 0.22142060242160344, 0.19831590599586235, 0.24383397940835727, 0.24337693231917024, 0.7740841292598244, 0.22283675829703742, 0.19332884256244798, 0.23849218676315964, 0.1977740015867907, 0.1199139499566576, 0.16336105887761299, 0.1538755653471131, 0.8747311951093784, 0.20085324244934077, 0.1966075814109659, 0.18369465235169624, 0.8542003702477383, 0.2100679124725945, 0.7928819304551523, 0.15681333471600867, 0.7107461443932246, 0.75021581448026, 0.7880094410877482, 0.21189841278875943, 0.209947627438118, 0.20876259285611454, 0.8015755332993899, 0.19500686418988555, 0.1866181173974082, 0.1880629013309575, 0.19428726313502942, 0.1926394902976224, 0.18336272589659908, 0.21372853633431976, 0.17912868973689533, 0.18822427041521228, 0.08775274809655098, 0.14323374422211288, 0.0967901671565633, 0.09839266197511243, 0.08303340053874342, 0.0887459931729363, 0.10609909032605724, 0.08219946752201834, 0.09018079564382042]}, "mutation_prompt": null}
{"id": "a9e829e1-f1a8-4f06-9642-31e70f4f275c", "solution": "import numpy as np\n\nclass AdaptiveSwarmDifferentialHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjustable inertia weight\n        self.cognitive_constant = 1.8  # Enhanced exploration\n        self.social_constant = 1.3  # Slightly reduced for better convergence\n        self.F = 0.9  # Increased diversity scaling factor\n        self.CR = 0.85  # Adjusted crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO with random positions and zero velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight based on evaluations\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.5 + 0.5 * (1 - evals / max_evals)**2)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions and update personal/global bests\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = np.copy(positions[i])\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = np.copy(positions[i])\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution to enhance diversity\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = np.copy(trial_vector)\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = np.copy(trial_vector)\n\n        return global_best_position, global_best_score", "name": "AdaptiveSwarmDifferentialHybridOptimizer", "description": "Adaptive Swarm-Differential Hybrid Optimizer (ASDHO) with self-tuning parameters for enhanced exploration and convergence balance.", "configspace": "", "generation": 9, "fitness": 0.38282728051679565, "feedback": "The algorithm AdaptiveSwarmDifferentialHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "7cc9856e-6ea9-41a0-8463-a94f7d6f0710", "metadata": {"aucs": [0.8553689739602778, 0.8637870695596386, 0.8502980867487021, 0.8538216553940993, 0.880049608749376, 0.18330098047489796, 0.8594730541817499, 0.8596602995706191, 0.8477078258992369, 0.7392517347215468, 0.7147139939374496, 0.719395514424874, 0.7211855853496617, 0.7275564240594964, 0.7158488121231692, 0.01758159152344274, 0.7219878793150414, 0.7226689093598373, 0.16708858879946675, 0.6263296874702995, 0.1691454347986573, 0.5194239201386426, 0.6026976424439574, 0.6505790837629342, 0.15204859213622057, 0.3934100332252486, 0.5883885021138469, 0.1621969024443668, 0.14968755024371783, 0.16592647421969764, 0.4341030955924301, 0.1483250801884316, 0.16623842390159538, 0.1319143873210623, 0.14173924281567363, 0.1746475108395491, 0.9885704295019598, 0.9824277435789105, 0.9886199291949668, 0.9761511762076559, 0.985622155893938, 0.9834513044170085, 0.9785775289326114, 0.9868856345335335, 0.9872688694755344, 0.7245735785261909, 0.7097665043313574, 0.059354726049632545, 0.7209200901271628, 0.7167803959124848, 0.1519642419621936, 0.701989120826201, 0.08868221921671104, 0.7072455799174273, 0.7896746622540041, 0.7059846122520617, 0.764439247259108, 0.21170288220625455, 0.1923886469841083, 0.8227774986859586, 0.8247560482543118, 0.23277454776857898, 0.7503878970435761, 0.4400936565012964, 0.39960921272196914, 0.4163502724393737, 0.360413241127176, 0.4664059923278634, 0.4267246601790192, 0.3518038492438538, 0.3475655946692079, 0.34371543120393977, 0.3558476459611608, 0.05471560568061573, 0.3718931175951278, 0.3887695540882278, 0.14829493410582395, 0.13308163751498503, 0.4846310115401289, 0.11150065677138521, 0.38306996941166427, 0.14279514155162576, 0.14887801812702894, 0.19861109890859996, 0.1708661928054266, 0.10925639162399148, 0.12605495793022126, 0.13748073108558423, 0.14235045531273194, 0.055437355578385694, 0.22903328383833033, 0.25550241307591026, 0.25537550821126354, 0.2781330052314709, 0.22823554377733202, 0.21344339653399047, 0.2834398243521987, 0.2481502415006045, 0.27523617150661783, 0.11183780163861523, 0.045526201060657745, 0.13711348376751942, 0.08146769338849336, 0.13322928804485712, 0.17319901887428857, 0.09127479422524176, 0.12283144321327633, 0.07800476568192716, 0.23819267035231528, 0.19983746786043555, 0.21146700234186133, 0.20610036002060728, 0.22475766906842454, 0.2073857530167833, 0.18716777713055532, 0.0, 0.20072744948438526, 0.662290402628608, 0.6228915668544754, 0.6189972068293048, 0.6419370535648488, 0.6194110768533697, 0.6061552896699136, 0.6583726724307377, 0.64818933381252, 0.6529364367269087, 0.13194710039268287, 0.5712172978149375, 0.15871784394856803, 0.1232585374233397, 0.1425211469844997, 0.16335385763754562, 0.13204073030382646, 0.16730553887812316, 0.14348324846575, 0.17423373448953283, 0.15958284234149145, 0.18398753314558192, 0.2278313856197519, 0.3364030413945781, 0.39213390443286666, 0.6070346520494931, 0.1609153079481459, 0.1980039040927145, 0.2878986355611114, 0.5137610239243983, 0.3525526285081202, 0.47132344115867486, 0.46549624059524, 0.5608476486583828, 0.3904894467394312, 0.5598611741925876, 0.6187781615078067, 0.4488738329160633, 0.2531903157072478, 0.2134503342888071, 0.37784412130319556, 0.2139138985331459, 0.35422307545240683, 0.3046897936401497, 0.36381579764867833, 0.27718495281705713, 0.22342134835032423, 0.21675921351841176, 0.194801073358294, 0.204766666690815, 0.22127751108356275, 0.20144704159921945, 0.23352407033293876, 0.20428972447032712, 0.22258909328225396, 0.1954876348192257, 0.20535806501426512, 0.23212024013821608, 0.7390448631546542, 0.24200701953331105, 0.6844454607403472, 0.24525016094089347, 0.6231191978477513, 0.21707400420841116, 0.8866542994950438, 0.16440570991553083, 0.1536081406722667, 0.8489402084013143, 0.19960126801717692, 0.8281533721238671, 0.19981759555047984, 0.16971309957240643, 0.15313646227252153, 0.8254163573685505, 0.1672208916546326, 0.7969958930420388, 0.20704404175675595, 0.7874604836077334, 0.20962720654241263, 0.21050460875270638, 0.7694802354878781, 0.7788788482343689, 0.19217475100513048, 0.18750446655542052, 0.19188035321142716, 0.19061399336503926, 0.4185971258877974, 0.19924293388684633, 0.20268865600893216, 0.223947635945989, 0.19957377941467203, 0.09184405238603555, 0.09020895434839526, 0.07985351209998937, 0.09582174051089265, 0.10649193209142249, 0.08161497955080488, 0.09569292520452333, 0.09271203186183408, 0.08926865052845367]}, "mutation_prompt": null}
{"id": "0831318c-d327-4ee6-8de8-ae5e14a02899", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.initial_inertia_weight = 0.7\n        self.final_inertia_weight = 0.3  # New inertia weight range for smoother transition\n        self.cognitive_constant = 1.5  # Reduced for balance\n        self.social_constant = 1.6  # Increased for stronger convergence\n        self.F = 0.9  # Increased diversity factor\n        self.CR = 0.85  # Slightly reduced to enhance exploitation\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(initial_weight, final_weight, evals, max_evals):\n            return initial_weight - (initial_weight - final_weight) * (evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.initial_inertia_weight, self.final_inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution to enhance exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with dynamic parameter tuning and elite mutation strategy for enhanced convergence and exploration.", "configspace": "", "generation": 10, "fitness": 0.37613520896782293, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "7cc9856e-6ea9-41a0-8463-a94f7d6f0710", "metadata": {"aucs": [0.7833937048052821, 0.7737617464174797, 0.7810530645107977, 0.8154872761188567, 0.8122608496974141, 0.775408523117684, 0.8170179290239996, 0.8179280809698739, 0.7941637582789614, 0.653470289014287, 0.6516218922277677, 0.6226935144024452, 0.6437057668870807, 0.6706422951426965, 0.6794593700199254, 0.6343299488331016, 0.6571408764454827, 0.6181025959184168, 0.5198173839161898, 0.5383211422583996, 0.1615799765796141, 0.5187551178867732, 0.16671804246780686, 0.1767272862252519, 0.4242960146480562, 0.5408084361332501, 0.5697900075888189, 0.13611753726892106, 0.13381359813015037, 0.1405599275401086, 0.14460531010235134, 0.144513682711368, 0.28540899096011485, 0.1341557310492364, 0.14349974421203038, 0.1485956948453402, 0.9909524312014837, 0.9849469646923371, 0.9876097405765202, 0.9808751352714564, 0.9856565398199084, 0.9852208110596323, 0.9843296006260861, 0.9868855442644976, 0.9869299764014852, 0.6109437990284701, 0.5376182660979727, 0.5979779057176451, 0.630824891395258, 0.5832946678998963, 0.5991600273644072, 0.6040714501756242, 0.5176856315599128, 0.6080925447093717, 0.8308375803260539, 0.7585768361531007, 0.6413346357323482, 0.8162061570550855, 0.7431062684962442, 0.7083063603615044, 0.7511062329683362, 0.7190041832810199, 0.7457405706101301, 0.37298504813872113, 0.3178956382440825, 0.32790281263189835, 0.2956236944283315, 0.3554065235778624, 0.357406411987079, 0.3543444117921596, 0.5005563871429435, 0.4260758620339259, 0.36703735686359296, 0.016530510847960644, 0.37494245477431487, 0.3064521254226573, 0.402257687143204, 0.3630959991170898, 0.32539130212614364, 0.28414950661738325, 0.28334606286678754, 0.11385490858810865, 0.1116763203958071, 0.10504133193222731, 0.18614119218962788, 0.12186801338832343, 0.03839573020055287, 0.07186996517345723, 0.1427778241490152, 0.0917413463684299, 0.2842040799214959, 0.25032199707533087, 0.23977308760037408, 0.2778642767208507, 0.2904014103093159, 0.24634906737394136, 0.3307936348106799, 0.253897818987433, 0.26420237873262353, 0.04083997716291965, 0.319948760170941, 0.11580867566830388, 0.11004148417809634, 0.12308798252416309, 0.09228411817271354, 0.09593951371163367, 0.20583332621290418, 0.06265609032520603, 0.25864726057612564, 0.23961286118632052, 0.24128423654684594, 0.24541774887988865, 0.22217842102560126, 0.25108108644500227, 0.2510528593343473, 0.2243827312511657, 0.17955892348749714, 0.5948757290651085, 0.5870651964367268, 0.5898710254869063, 0.5889912196143459, 0.5969054577719313, 0.6153500611475071, 0.6008243443824848, 0.5721085089668019, 0.582787918519243, 0.10129678382569651, 0.11514513706156448, 0.13326073952680306, 0.11556857752142391, 0.11388541863548218, 0.12787430326663907, 0.47598116193966344, 0.16959226259311255, 0.11795521099401107, 0.1555060955752271, 0.21463165768862813, 0.24604931785421402, 0.15331045624024775, 0.2535508458290835, 0.1877431976219005, 0.26091811563484624, 0.5069438717901933, 0.2562681441603085, 0.389782094106055, 0.4042436358874155, 0.38358571495521077, 0.5669466282102851, 0.44103996847574256, 0.32632342306071815, 0.5420274095842186, 0.5104334922432578, 0.46557833863683495, 0.36160484170505136, 0.3587667277033467, 0.24972800685618812, 0.26704485449640447, 0.24890184863402165, 0.3039642470633497, 0.3010371877932424, 0.3558870880440832, 0.23835821891887332, 0.19469981733430441, 0.1855516423948328, 0.2163705800086898, 0.22027491729816562, 0.23040353606631192, 0.23359274743705827, 0.22858837015947353, 0.19373435058398247, 0.1886028973579359, 0.22970295296932053, 0.21791774230147654, 0.2350458817683584, 0.24462346864845508, 0.6721135497794222, 0.5926360061354149, 0.532444862288902, 0.23069298494141688, 0.23410215525329536, 0.8011251876129799, 0.17162868619493887, 0.15343262294026294, 0.7856416448688441, 0.1975366473187138, 0.7943802747025477, 0.09960351632003406, 0.7714880121137363, 0.19758495217992533, 0.1666875838065065, 0.20556835264024198, 0.7162954734605675, 0.20169889674420405, 0.1683143318192768, 0.20732582173211944, 0.18625642395021091, 0.2071724985526373, 0.19743535346843444, 0.19657696703756522, 0.1874951237854231, 0.20360130558084388, 0.1917564825578838, 0.19411093768021526, 0.2024178871939788, 0.18633200342478307, 0.19779432884894754, 0.20547456627296956, 0.08470325787588207, 0.08622700276571216, 0.08843449817318705, 0.09035590535797888, 0.08433581955221892, 0.08139285321277878, 0.08461856635259812, 0.08038491699707462, 0.10015338996777923]}, "mutation_prompt": null}
{"id": "468f6a23-fe8f-42a3-86a8-001f8b094765", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Increased for initial exploration\n        self.cognitive_constant = 1.5  # Reduced for balanced exploration\n        self.social_constant = 1.5  # Balanced for convergence\n        self.F = 0.9  # Increased scale factor for diversity\n        self.CR = 0.85  # Reduced crossover probability for controlled exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution to enhance exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with dynamic parameter adjustment for enhanced exploration and convergence stability.", "configspace": "", "generation": 11, "fitness": 0.37489314927886136, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "7cc9856e-6ea9-41a0-8463-a94f7d6f0710", "metadata": {"aucs": [0.8026916407743866, 0.8022462236533174, 0.8285647480334786, 0.8384161038963145, 0.8304047579299009, 0.8326286450217908, 0.8136048903733941, 0.8492919662687184, 0.8424025869879902, 0.6989139101514814, 0.7134338220869852, 0.6876855071620183, 0.7168954044836977, 0.7065585021799283, 0.6863846962558778, 0.6914972927688354, 0.7058629838948953, 0.6967931226447558, 0.1644805843252949, 0.13183538328767985, 0.16714251087419196, 0.1425437346995484, 0.16274460902401422, 0.6632857396750033, 0.635300201654487, 0.17555726755196788, 0.5918362885947595, 0.1614422752863568, 0.13137667477073867, 0.13277860076978143, 0.14389442263622365, 0.5022188557547727, 0.15873994191835994, 0.14041246047821954, 0.1357686986291834, 0.14416190067067836, 0.9909532018192284, 0.9848825846121838, 0.9886262058298352, 0.9800529139899176, 0.9848501342358794, 0.9845638357894229, 0.9843265419733999, 0.9856460285966846, 0.9872675485360636, 0.6419161141961693, 0.7112215275808276, 0.7030406129142066, 0.6650840554038555, 0.6876995453701569, 0.6765702984875854, 0.6989572768387518, 0.6815732003411157, 0.6984517561241181, 0.7276984714594261, 0.8146042297109818, 0.7502547440305002, 0.78657975997303, 0.8006199932705041, 0.27374608794616073, 0.7292683023111727, 0.7533297856162751, 0.7222330198520768, 0.37586732341704787, 0.3888774902312805, 0.3828847700786149, 0.12704258014472447, 0.32392338289554956, 0.3666645768207004, 0.33022071791330465, 0.387227965627455, 0.42026149075452135, 0.4537614886406919, 0.010022082074353955, 0.46163659002407265, 0.38811699514125353, 0.28273951779732387, 0.3704379692421872, 0.396442111422855, 0.3956628698908268, 0.36597646659953775, 0.10112530284365329, 0.07437598049495542, 0.1301691654781456, 0.048252167152241454, 0.1442144213954567, 0.09995592520305108, 0.12873055398177458, 0.1214680259165547, 0.20548751299353007, 0.24966731592078495, 0.25960880637413564, 0.2688571281027625, 0.24274801842226512, 0.11885451731127217, 0.17134568061703137, 0.2562756799846204, 0.29315301483185263, 0.2612826152616603, 0.17414876070515528, 0.04459303651561708, 0.18239076175564417, 0.08725060565214793, 0.09947921413849414, 0.09353733437136091, 0.1425550572550277, 0.1099843684891233, 0.1424741750523374, 0.26509093445920495, 0.20559086991000697, 0.20559789739081036, 0.2892107647581913, 0.217152754456024, 0.0, 0.22092113496538512, 0.1253858536999194, 0.2512155173341284, 0.5761179207312204, 0.5808231586566934, 0.6203037015502444, 0.6430690375108923, 0.6462058329736042, 0.6259726732708525, 0.6545177655633603, 0.6156279713369319, 0.622804715860428, 0.1406020269971202, 0.15193058187695418, 0.1700087086253046, 0.17737933482735457, 0.1299732258800924, 0.14595974121375732, 0.113978643622352, 0.08871116267675094, 0.14534655379618822, 0.17308485471505097, 0.32927197914446293, 0.3047172603587679, 0.2530415269984264, 0.2391496817122053, 0.3108521885401905, 0.19711167030064158, 0.4498752297232752, 0.13900910530829147, 0.43149321205630675, 0.4073988238819696, 0.606971618102756, 0.4887057214217878, 0.3571472532865432, 0.42938611962313367, 0.6350938340165968, 0.535261580520637, 0.2807801122726059, 0.2920705043580738, 0.22363789288437042, 0.27550011304575506, 0.2895333871000455, 0.30558183655097026, 0.18672268799078662, 0.34670857884700534, 0.4763863586609416, 0.32224578813860305, 0.22628837522116174, 0.18361504470112322, 0.2424984747469553, 0.21026138456468457, 0.18738042241890196, 0.29028789830044244, 0.21036784251005824, 0.23106826052047091, 0.22602423571463404, 0.2057762316691224, 0.2390092114951442, 0.2432033250701925, 0.2194098466104365, 0.2154171724272963, 0.22326714670230485, 0.23654911764084352, 0.19671564301371314, 0.2307736526891091, 0.17802736395297702, 0.17079846702607815, 0.15396943880958658, 0.840739684766058, 0.18618476825910224, 0.8544185132058609, 0.1936301015179469, 0.1694458684903748, 0.16029067736209568, 0.16619739161646796, 0.2090612920662952, 0.6860302197774832, 0.20888158163868598, 0.16792838707136015, 0.2101011708031303, 0.21236157263222177, 0.7953925789015829, 0.7945735280244983, 0.204619199342833, 0.1850408334183571, 0.21302051297332858, 0.22017135664048648, 0.2000893175130174, 0.1864910584556687, 0.19103230671569105, 0.18208823120538709, 0.19317135161590648, 0.08022516601674301, 0.09127309884149104, 0.08858735994797995, 0.09159305998213896, 0.07815538750810369, 0.09203938668299616, 0.09583793089221815, 0.08422112974663398, 0.10351399437717501]}, "mutation_prompt": null}
{"id": "2facb3be-f2e7-4a36-9a94-af702218f562", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Reduced for adaptive balance\n        self.cognitive_constant = 1.8  # Slightly increased for exploration\n        self.social_constant = 1.5  # Adjusted for adaptive convergence\n        self.F = 0.9  # Increased scale factor for enhanced diversity\n        self.CR = 0.85  # Decreased crossover probability for stability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution to enhance exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with stochastic selection and dynamic parameter tuning for enhanced robustness and efficiency.", "configspace": "", "generation": 12, "fitness": 0.3742863095192924, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.28.", "error": "", "parent_id": "7cc9856e-6ea9-41a0-8463-a94f7d6f0710", "metadata": {"aucs": [0.8799186382837476, 0.8763714079200009, 0.8751661915854991, 0.8818114451617413, 0.1903111269657718, 0.8883201870293139, 0.8759573149107458, 0.8910044388305215, 0.8798207730206185, 0.7706766474145423, 0.7810321868971947, 0.7599886947103485, 0.7717338015703052, 0.7891407708169877, 0.7827196790933201, 0.7723106413976221, 0.7565947356937998, 0.7782456384068779, 0.674522364384657, 0.7449148820295427, 0.7087740300162657, 0.15630768821756724, 0.11529176771118421, 0.6660905505072823, 0.17472047263985535, 0.6366331509032387, 0.180050864402874, 0.17739329391157987, 0.11538159039315776, 0.16537762331395878, 0.14829167930005405, 0.1792341734381474, 0.1519920231688251, 0.1548427004173234, 0.17429945738264918, 0.14616392857834348, 0.9887295239817897, 0.9801218835315584, 0.9864451424077579, 0.9793477919798096, 0.9850629213258875, 0.9834502915810891, 0.981790806101398, 0.9856829739392113, 0.9872890139234358, 0.05950846305300128, 0.7334203571446868, 0.750159120164227, 0.746168892923931, 0.7015760494686796, 0.7615166583445873, 0.7122629537852936, 0.08877035014954926, 0.7525778804221833, 0.803067676956202, 0.7488495971183321, 0.36345067611179727, 0.2778655114861345, 0.7945482626161383, 0.21144890225223867, 0.794520052947189, 0.8131286951101311, 0.805457165151293, 0.3841138075745886, 0.333307550104863, 0.37287910859303985, 0.4658614119600646, 0.3890512095804375, 0.13033288521094033, 0.35942886409158803, 0.12888361817232052, 0.4066075141841391, 0.37789373975768925, 0.05425786566767998, 0.38866472887384107, 0.43809931436399874, 0.15202948207967215, 0.43499426850520995, 0.45889204983221554, 0.12698308295272476, 0.38419534216071405, 0.1266558561277401, 0.16895039481142105, 0.1622465975680092, 0.11246897178265425, 0.14046448815329693, 0.09898878589863203, 0.17282876711752293, 0.12030725131873077, 0.17775502440155, 0.3197914444727482, 0.2705863400628218, 0.26209260319150185, 0.24582514644406306, 0.18568066289874519, 0.21923809219206392, 0.2742908443729507, 0.2606487971584719, 0.2758634613022388, 0.049730769123057184, 0.2688486532067742, 0.1868443397583922, 0.1418662024302113, 0.1813905362988254, 0.10713770813231838, 0.1525401472323472, 0.09905499951291274, 0.06799241446673221, 0.2450661946378616, 0.19888475142780992, 0.2541524870378298, 0.2902055650884606, 0.251530600655564, 0.006425920353228531, 0.17523172198614956, 0.04889058779767097, 0.23522428266717121, 0.6217811366533125, 0.6745417184910277, 0.6766547208333191, 0.6743327308568783, 0.6734807553211959, 0.6385385913864647, 0.6994692064708026, 0.6479497187717924, 0.6761278433649991, 0.10734104573755954, 0.10340144170654164, 0.13438553669391928, 0.14101924187631032, 0.10545112131584156, 0.11497135997617591, 0.1791173151422747, 0.13864339630500577, 0.14109614649926294, 0.15527517888097842, 0.17507730357386897, 0.2180934696112551, 0.21913320068976805, 0.2277093785096891, 0.2666147981407504, 0.25459738009908084, 0.1763276631022016, 0.19057729775521193, 0.5600982314349643, 0.37255492705502224, 0.27468069605201095, 0.49926292612114587, 0.31985307297521093, 0.5036030115194985, 0.5117020414112541, 0.5124768644758821, 0.6829113130156851, 0.2486999751305058, 0.3647621992612682, 0.342603285045222, 0.3479776395238485, 0.32990338912003325, 0.30571562694810317, 0.289422178384672, 0.31784657382235026, 0.38622226439110274, 0.18177535162724667, 0.20985269402163553, 0.217489044281581, 0.22643763822755847, 0.23305945358951974, 0.18524601854350575, 0.22741192451187242, 0.20559856034419655, 0.21152545198762174, 0.2168312944411438, 0.7579620670384117, 0.2105653238664401, 0.21243967100716132, 0.2445429698308923, 0.24037525566368645, 0.19604846595141845, 0.20885034985915485, 0.18599091852974703, 0.16854841668056963, 0.16580227115943924, 0.1517830659296131, 0.9058876964616467, 0.20051863229512323, 0.1758417107341278, 0.12641497385197786, 0.1695714196920881, 0.15345143166010533, 0.16645749822683975, 0.16815701204632227, 0.7850348546932941, 0.21053176670142204, 0.7994902169048737, 0.21188132333968623, 0.21261971376045308, 0.867362830862808, 0.20598423655241604, 0.2130201064668471, 0.19924318068052504, 0.20637779227299557, 0.19774983608870278, 0.1982363304257706, 0.1977893404911807, 0.18066027447148447, 0.18577697526939263, 0.20759020589358124, 0.09888810252458857, 0.1303594393239197, 0.08864190195528576, 0.09672694812775384, 0.08610884748744974, 0.0780054197217418, 0.10655799461889925, 0.07713980186585556, 0.08782249099511608]}, "mutation_prompt": null}
{"id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adaptive inertia for dynamic balance\n        self.cognitive_constant = 1.8  # Further enhanced exploration\n        self.social_constant = 1.3  # Slightly reduced for convergence control\n        self.F = np.random.uniform(0.8, 1.0)  # Randomized adaptive scale factor\n        self.CR = 0.95  # Increased crossover probability for better exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with probabilistic parameter adjustment and enhanced diversity control for robust convergence.", "configspace": "", "generation": 13, "fitness": 0.41222832048210983, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "7cc9856e-6ea9-41a0-8463-a94f7d6f0710", "metadata": {"aucs": [0.8435138899914613, 0.8209755447336959, 0.8139161371332244, 0.8223550785644855, 0.8500097528582866, 0.8277381836651032, 0.8303938252202372, 0.8229897229980851, 0.8247413855038215, 0.711080034000384, 0.688029104329493, 0.678350920875486, 0.6643577036355273, 0.6638103002454068, 0.7001608869979624, 0.6842225457776123, 0.6701112621997753, 0.6846957748131597, 0.11032316178108126, 0.13107479380198328, 0.1601224903092463, 0.15725793570563218, 0.5990858386220044, 0.1624558352622849, 0.564840507915597, 0.14926666006769607, 0.1649679822060407, 0.12871859300235589, 0.13754067317464214, 0.14271538366667735, 0.12541703195019094, 0.15872592986616796, 0.14701901257991412, 0.10519965044475266, 0.14552183820159703, 0.1468915632755846, 0.9874755339164349, 0.9812637573069084, 0.9815934343500473, 0.9885096565431187, 0.9860135295999466, 0.9850489745339434, 0.972662866040137, 0.9912489944912821, 0.988257383653504, 0.6513675780749572, 0.6897043932548619, 0.6756099046661214, 0.6869288680207595, 0.6637947884864348, 0.6708167951297463, 0.6717999532123676, 0.6656921902888826, 0.08783951140100821, 0.7618122836730215, 0.7525788687018471, 0.8096650369356575, 0.8225444006880877, 0.8250885235332863, 0.3487638337156358, 0.7529801546760911, 0.776780407019801, 0.7601563325543352, 0.4172176974822047, 0.40631765766806016, 0.4452694925967674, 0.41916177002687804, 0.3103743309994679, 0.13381394693956405, 0.516994880887439, 0.3925235978403835, 0.47363910256802, 0.38895403699619635, 0.388927279683683, 0.5037548042512685, 0.4459239014246129, 0.4880084044138423, 0.4974623177868822, 0.4954094798655476, 0.49765693649763654, 0.4189452962197815, 0.23441132915348006, 0.2873877386678305, 0.27673729547588233, 0.19977616428849632, 0.26809852039243687, 0.26790876804485186, 0.20066188462400447, 0.25610117693931655, 0.22178960009414117, 0.3971435242489916, 0.4658180878745374, 0.44634211482477926, 0.3480033783887816, 0.37478766125497787, 0.4107246765583549, 0.424739487098743, 0.41176763406517003, 0.4202148034764317, 0.21097783419768845, 0.12584093554718745, 0.07635823403942033, 0.11252116000768897, 0.12407368525931939, 0.08472596683744682, 0.06641875164067002, 0.13572829529992247, 0.14699550946292528, 0.262568375572546, 0.22296433175171704, 0.2623800937937264, 0.3290974148199004, 0.28668813959358197, 0.25076869552977166, 0.24130809354983163, 0.2441703203138209, 0.26840957156404033, 0.6822239406600833, 0.6407407721571565, 0.6645648789014487, 0.6535532003218285, 0.6459889792056732, 0.6791405606517231, 0.6599497417210496, 0.6841852044073629, 0.6486634953740997, 0.13982332194861424, 0.12804181535139592, 0.14387958375343046, 0.6043157910387889, 0.11776036038500026, 0.1474054736892253, 0.1315963611873311, 0.5530000431989748, 0.14611513487518535, 0.2127973393365623, 0.18722929428760615, 0.2615631700777984, 0.318194512615117, 0.17340987605774894, 0.22944785341624552, 0.25276545424748753, 0.19569024592185147, 0.2745970695944475, 0.38057598598244624, 0.4325935227463329, 0.4900860904854175, 0.563009187632219, 0.3540597022508183, 0.4640662581765771, 0.44403040082724354, 0.607563353210918, 0.5365805645719353, 0.28729442002826233, 0.31310465151324507, 0.3753091401192101, 0.41492496912726917, 0.4164219898969208, 0.28633663271642795, 0.3211393501105203, 0.4481471157638218, 0.38475977978282416, 0.21019478644607292, 0.21288036045393277, 0.1847547129651258, 0.20732690278945665, 0.2173011477948864, 0.18926725822486334, 0.20411565590287062, 0.22321996164218294, 0.20182662922997285, 0.21557970323548914, 0.23836641033045625, 0.6718715692349472, 0.23109699672065498, 0.18388004142363357, 0.20370610149981094, 0.6465727835072488, 0.21648140359170587, 0.5942251440537273, 0.2022275791535353, 0.8837056138816304, 0.1614669762447395, 0.8548631552199898, 0.8708399889418057, 0.8203073777426958, 0.15826303905609507, 0.16257557201633444, 0.8165912666365063, 0.20581275069878835, 0.7643166296165027, 0.20880617785428213, 0.1686160892216032, 0.7939826175222291, 0.7635147861813073, 0.20337098252573726, 0.21277100791481196, 0.20902635198081287, 0.18240414322058318, 0.21096383791193662, 0.2207409930411507, 0.1740538860881905, 0.197979773894299, 0.19223957496528943, 0.31993142418896514, 0.18362252389412947, 0.209305994707515, 0.09475947533126239, 0.09990442194476823, 0.07925431338283984, 0.13968908657211776, 0.13926898845107538, 0.08636554924474382, 0.12877957673257623, 0.09481577722451018, 0.0975066843121476]}, "mutation_prompt": null}
{"id": "0969cfa2-42e3-4a65-9cd9-626bc2961d7d", "solution": "import numpy as np\n\nclass QuantumInspiredHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.65  # Adjusted inertia for improved search dynamics\n        self.cognitive_constant = 1.9  # Enhanced cognitive factor for individual search\n        self.social_constant = 1.4  # Increased social factor for better global search\n        self.F = np.random.uniform(0.7, 0.9)  # Slightly lower DE scale factor range\n        self.CR = 0.9  # Reduced crossover probability to balance exploration/exploitation\n        self.func_evals = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * np.sin(np.pi * evals / (2 * max_evals))  # Quantum-inspired adaptation\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "QuantumInspiredHybridPSO_DE", "description": "Quantum-Inspired Hybrid PSO-DE with probabilistic parameter tuning and quantum fluctuation for enhanced exploratory capabilities.", "configspace": "", "generation": 14, "fitness": 0.38886746654186916, "feedback": "The algorithm QuantumInspiredHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.30.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.9428044430111141, 0.9403145009658256, 0.892690639438686, 0.9088696258741914, 0.9259995235059877, 0.908567469527258, 0.9276557218631385, 0.9264840300788805, 0.9383718147272972, 0.8226250010767957, 0.8231828841074402, 0.8677156617690405, 0.8995078490847235, 0.8610255362500578, 0.8669012612383179, 0.8854475948998971, 0.8696053859501165, 0.8155769481865761, 0.12577911440973388, 0.11761038077621855, 0.09307338739410664, 0.12633294418880125, 0.11896624735525019, 0.14141792504993078, 0.14397602430335066, 0.19160909401495552, 0.16212451872651423, 0.08398896796408994, 0.07316746098896032, 0.10215385458693549, 0.10588453929097774, 0.11197028917070329, 0.13319917423280536, 0.09597466329669191, 0.13420253687497985, 0.1013195736958411, 0.9591613357654928, 0.9800856484115005, 0.9635891736082708, 0.9766487796683426, 0.9739262530864142, 0.9548762327146392, 0.9563039325437332, 0.9797214662551498, 0.9651292972932318, 0.8216555501836589, 0.8050555140972018, 0.7754502785306564, 0.7848459106865564, 0.7682626161453509, 0.7230002766515166, 0.7473804326619136, 0.7707227970300969, 0.7659345454722112, 0.8708564832947479, 0.7498220840954579, 0.840255820661334, 0.8552859176357595, 0.19412320220250456, 0.35942842764499916, 0.24023458009342635, 0.2249845422704888, 0.8625461740103174, 0.388133842977641, 0.13249651401063134, 0.29913466398309196, 0.13578334614163745, 0.49565498316565904, 0.13722810372853655, 0.30118268802310555, 0.6125157926660971, 0.3918089532663145, 0.6116651361874127, 0.49898021225662625, 0.3428519792588265, 0.26033534146454584, 0.22081845388150878, 0.46623866418816196, 0.2888348181054341, 0.3010618477877862, 0.538974101066309, 0.283972995722544, 0.31351653709747584, 0.39433262035193606, 0.26359936761072444, 0.22736213746224954, 0.11403761809860335, 0.23639710233203282, 0.37614899248019196, 0.280585403282854, 0.2627171727748049, 0.3856145257221112, 0.43353937497655337, 0.395019614276518, 0.4307901647248973, 0.40669368575463116, 0.4305457361783772, 0.5077653116714791, 0.49126446743862373, 0.06037625746436737, 0.09969592783528447, 0.36545137332693345, 0.08346957211533113, 0.08893122928194552, 0.14924569846713043, 0.15841606238428652, 0.2403208984885138, 0.08227908985944854, 0.14653929067533022, 0.1951261833708262, 0.22550363442695376, 0.32878334666985476, 0.1560860710776315, 0.3682936664441492, 0.32098139446126983, 0.2300503400787769, 0.25307707918211053, 0.6895820883275215, 0.8071490144641289, 0.8048425072259928, 0.758030502652913, 0.7115021329299892, 0.8059552844142779, 0.7503109440705641, 0.770478170658529, 0.8033131050201121, 0.10828298699891892, 0.17914809202794135, 0.07816240758507897, 0.10529312823747272, 0.1814022782353586, 0.1368466690238127, 0.1163043012113174, 0.09350155696070883, 0.08946114092783042, 0.2100769628256307, 0.1740777673875229, 0.19075282377566405, 0.2780948513291248, 0.15112982127593655, 0.1970155553901486, 0.6749234643862614, 0.222769569196976, 0.1979410122262628, 0.5386204853658307, 0.15959883772966532, 0.29280829195545544, 0.3426371475005361, 0.30755173511336753, 0.3273170638651999, 0.24822712713711992, 0.2044870926733684, 0.29808646743774814, 0.23078737401024696, 0.3053214667822546, 0.3527170505423891, 0.42706101292598175, 0.2732321711375284, 0.2955858197059055, 0.28862622921294734, 0.15532984953436457, 0.3856317989724066, 0.21689650540774064, 0.26993082055125583, 0.19973111144012967, 0.23223731532002312, 0.2066311717002629, 0.20411775399586152, 0.23159361987328342, 0.21765032533392592, 0.21361465727097861, 0.18138175399704015, 0.1832746098792819, 0.18257290138950488, 0.1998790595381018, 0.19729178267854386, 0.1917479278924158, 0.18649288390079755, 0.25408296921286455, 0.19180480367756214, 0.08884760060978203, 0.9488244447214026, 0.1605789833795881, 0.9343245897797902, 0.9373894618258164, 0.14148414180803426, 0.16698990275253323, 0.17792047335954408, 0.1640555167427743, 0.8409829961495161, 0.12674200233580235, 0.16967971455482367, 0.1561988980500908, 0.12698548556502576, 0.8210914473386257, 0.1989671054906792, 0.21395061207081445, 0.10512383479546639, 0.18868924081682414, 0.20376871844801092, 0.21870550299822866, 0.19815542017190868, 0.18710765627106118, 0.1814559950440785, 0.23141895347378227, 0.18047214907457076, 0.195940259200999, 0.09425229170697436, 0.09126075281073376, 0.10139189034003926, 0.13737731491289118, 0.10995625088769834, 0.0895072251941963, 0.1378727595471002, 0.09886540165258684, 0.12251739941681206]}, "mutation_prompt": null}
{"id": "3e967f00-cdcc-407e-96c7-c7172db7f897", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Increased swarm size for diversity\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.9  # Slightly increased inertia for exploration\n        self.cognitive_constant = 1.5  # Balanced for stable exploration\n        self.social_constant = 1.7  # Adjusted for better convergence control\n        self.F = np.random.uniform(0.6, 0.9)  # Broadened adaptive scale factor range\n        self.CR = 0.9  # Adjusted crossover probability for balanced exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight with a non-linear decay\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - (evals / max_evals) ** 2)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with dynamic parameter tuning and strategic search space adaptation for improved convergence.", "configspace": "", "generation": 15, "fitness": 0.31609791741152327, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.7035995130746249, 0.7151792022231691, 0.7135963470539237, 0.6765705755842419, 0.7370785100062964, 0.7175015831564577, 0.7099942784209268, 0.6956185151186021, 0.7418457889439056, 0.481891726168881, 0.4769154951019383, 0.5290933808497624, 0.4803931464408594, 0.4901725463633708, 0.5148241243830955, 0.46311740239431143, 0.5167240919975338, 0.5025292552869597, 0.12187932447285599, 0.19549871309742006, 0.10863347108081944, 0.13165244404843657, 0.12249922559825754, 0.1129144006549283, 0.2031825100510375, 0.2197370451636299, 0.12177479833160632, 0.10547596685631266, 0.10352882089310711, 0.11161950288522715, 0.11146050990621315, 0.11518148523127802, 0.11130004385649994, 0.11095032969543595, 0.1147228525885734, 0.0985840050531015, 0.9874463506203546, 0.9753698731862603, 0.9755651311907318, 0.9850319239082083, 0.9816902494420597, 0.9852914768223965, 0.9865780836955508, 0.9900631605912766, 0.9856480590897011, 0.4036217355029973, 0.4425847471924892, 0.44053615506849797, 0.39632891945296267, 0.42215174607807326, 0.39498769290793734, 0.08820571587225134, 0.41542120664056326, 0.4191608105210436, 0.5632978649493978, 0.6865732325764542, 0.606321885917839, 0.592270779199242, 0.6437369865136271, 0.6395382336002131, 0.6594259855071264, 0.5899626583192578, 0.7167014694134487, 0.2117941331616936, 0.27335147983414365, 0.38787385224223603, 0.18812963464792587, 0.23326867391701878, 0.3121922868550021, 0.19942588214013512, 0.30464662668704856, 0.26831290960769283, 0.23828065938733234, 0.26177103203330343, 0.2614753700627037, 0.22063072561274832, 0.2120243357422711, 0.2278437294769926, 0.21562502749620804, 0.2616738273013802, 0.2151184938670322, 0.15787102795317787, 0.2213366369738322, 0.18100052472758177, 0.16259298076957607, 0.23355579062338172, 0.17346630145876718, 0.17032643861434604, 0.1765444833198493, 0.1736927382216783, 0.3327819227032317, 0.3434557482896228, 0.33092930932318354, 0.2919897031449782, 0.40821020948803277, 0.3158635417423905, 0.34800158964864836, 0.40252693466723055, 0.38802942780955874, 0.059414560689438956, 0.0689400743596118, 0.08094488233619646, 0.06136854223447974, 0.07463844848199241, 0.10090029694964908, 0.05976252270401017, 0.10788317180449469, 0.03639666267128272, 0.18950330738432997, 0.20840434116039763, 0.19399981533860344, 0.17774692587416852, 0.20500688888121388, 0.21545220272430166, 0.17417367843897968, 0.2517906651908398, 0.21264281668384788, 0.5144769985176448, 0.6062102872297153, 0.5616801125507862, 0.5579561345274513, 0.5814091574727025, 0.5895759959397381, 0.5320182268884524, 0.5238336061922846, 0.5064992672034151, 0.09749415985979226, 0.10418077448923901, 0.09880427737428321, 0.11920850100802272, 0.10199790980881096, 0.09071144162996969, 0.14653881953909875, 0.09047191537631316, 0.11376677171622707, 0.1781610520228869, 0.15120189449375265, 0.16598029297213412, 0.1838093040172908, 0.2784631809031428, 0.2622785608747997, 0.1890768966922265, 0.20326857726801095, 0.21923737022197087, 0.35674296061028066, 0.38312496514479566, 0.3384453796431047, 0.37347581912732863, 0.3305065281258971, 0.33649840360665917, 0.37607099388374454, 0.3909602509198056, 0.39721700494352363, 0.2605898019856633, 0.25650823990457294, 0.24586363381223486, 0.25278160901308455, 0.24274193319154758, 0.25569224855955175, 0.29905962019387133, 0.3039458239813029, 0.3176757647572518, 0.19342061635305896, 0.22570829834111772, 0.21831430573510213, 0.192893163774828, 0.18519477785937932, 0.19193298378406853, 0.21775477729099835, 0.17796070101848693, 0.19285252904560213, 0.20637163901561373, 0.21709672959584958, 0.20960236564764945, 0.2106426009979191, 0.1926328108353197, 0.33268846631503457, 0.21645180992009405, 0.20125912636706267, 0.18510351084892485, 0.1695322350033699, 0.763145920575635, 0.7870439396383216, 0.17859787217132017, 0.6303546095592556, 0.16416758790370567, 0.1620640247106354, 0.1768396605213014, 0.17886436003620143, 0.1232092433495856, 0.2074308283031936, 0.2048263522701248, 0.502374484434857, 0.6180609716691674, 0.16716261232426222, 0.1985526717448216, 0.1979912561647441, 0.20666492918379809, 0.1903492582221784, 0.1762609965213896, 0.18878960657465382, 0.19085955103553032, 0.1851271691786548, 0.18313081783298202, 0.23202783784298442, 0.19945497956418723, 0.21142051287418018, 0.07837161878550192, 0.07835812562949418, 0.07900644468763418, 0.07605190092412628, 0.07293246179807289, 0.07696474016571087, 0.07392200462531151, 0.07440814537889129, 0.07339988946941667]}, "mutation_prompt": null}
{"id": "e3b04b75-fab0-4830-b791-e5af0bbf92cd", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adaptive inertia for dynamic balance\n        self.cognitive_constant = 1.8  # Further enhanced exploration\n        self.social_constant = 1.3  # Slightly reduced for convergence control\n        self.F = np.random.uniform(0.8, 1.0)  # Randomized adaptive scale factor\n        self.CR = 0.95  # Increased crossover probability for better exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with probabilistic parameter adjustment and enhanced diversity control for robust convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8435138899914613, 0.8209755447336959, 0.8139161371332244, 0.8223550785644855, 0.8500097528582866, 0.8277381836651032, 0.8303938252202372, 0.8229897229980851, 0.8247413855038215, 0.711080034000384, 0.688029104329493, 0.678350920875486, 0.6643577036355273, 0.6638103002454068, 0.7001608869979624, 0.6842225457776123, 0.6701112621997753, 0.6846957748131597, 0.11032316178108126, 0.13107479380198328, 0.1601224903092463, 0.15725793570563218, 0.5990858386220044, 0.1624558352622849, 0.564840507915597, 0.14926666006769607, 0.1649679822060407, 0.12871859300235589, 0.13754067317464214, 0.14271538366667735, 0.12541703195019094, 0.15872592986616796, 0.14701901257991412, 0.10519965044475266, 0.14552183820159703, 0.1468915632755846, 0.9874755339164349, 0.9812637573069084, 0.9815934343500473, 0.9885096565431187, 0.9860135295999466, 0.9850489745339434, 0.972662866040137, 0.9912489944912821, 0.988257383653504, 0.6513675780749572, 0.6897043932548619, 0.6756099046661214, 0.6869288680207595, 0.6637947884864348, 0.6708167951297463, 0.6717999532123676, 0.6656921902888826, 0.08783951140100821, 0.7618122836730215, 0.7525788687018471, 0.8096650369356575, 0.8225444006880877, 0.8250885235332863, 0.3487638337156358, 0.7529801546760911, 0.776780407019801, 0.7601563325543352, 0.4172176974822047, 0.40631765766806016, 0.4452694925967674, 0.41916177002687804, 0.3103743309994679, 0.13381394693956405, 0.516994880887439, 0.3925235978403835, 0.47363910256802, 0.38895403699619635, 0.388927279683683, 0.5037548042512685, 0.4459239014246129, 0.4880084044138423, 0.4974623177868822, 0.4954094798655476, 0.49765693649763654, 0.4189452962197815, 0.23441132915348006, 0.2873877386678305, 0.27673729547588233, 0.19977616428849632, 0.26809852039243687, 0.26790876804485186, 0.20066188462400447, 0.25610117693931655, 0.22178960009414117, 0.3971435242489916, 0.4658180878745374, 0.44634211482477926, 0.3480033783887816, 0.37478766125497787, 0.4107246765583549, 0.424739487098743, 0.41176763406517003, 0.4202148034764317, 0.21097783419768845, 0.12584093554718745, 0.07635823403942033, 0.11252116000768897, 0.12407368525931939, 0.08472596683744682, 0.06641875164067002, 0.13572829529992247, 0.14699550946292528, 0.262568375572546, 0.22296433175171704, 0.2623800937937264, 0.3290974148199004, 0.28668813959358197, 0.25076869552977166, 0.24130809354983163, 0.2441703203138209, 0.26840957156404033, 0.6822239406600833, 0.6407407721571565, 0.6645648789014487, 0.6535532003218285, 0.6459889792056732, 0.6791405606517231, 0.6599497417210496, 0.6841852044073629, 0.6486634953740997, 0.13982332194861424, 0.12804181535139592, 0.14387958375343046, 0.6043157910387889, 0.11776036038500026, 0.1474054736892253, 0.1315963611873311, 0.5530000431989748, 0.14611513487518535, 0.2127973393365623, 0.18722929428760615, 0.2615631700777984, 0.318194512615117, 0.17340987605774894, 0.22944785341624552, 0.25276545424748753, 0.19569024592185147, 0.2745970695944475, 0.38057598598244624, 0.4325935227463329, 0.4900860904854175, 0.563009187632219, 0.3540597022508183, 0.4640662581765771, 0.44403040082724354, 0.607563353210918, 0.5365805645719353, 0.28729442002826233, 0.31310465151324507, 0.3753091401192101, 0.41492496912726917, 0.4164219898969208, 0.28633663271642795, 0.3211393501105203, 0.4481471157638218, 0.38475977978282416, 0.21019478644607292, 0.21288036045393277, 0.1847547129651258, 0.20732690278945665, 0.2173011477948864, 0.18926725822486334, 0.20411565590287062, 0.22321996164218294, 0.20182662922997285, 0.21557970323548914, 0.23836641033045625, 0.6718715692349472, 0.23109699672065498, 0.18388004142363357, 0.20370610149981094, 0.6465727835072488, 0.21648140359170587, 0.5942251440537273, 0.2022275791535353, 0.8837056138816304, 0.1614669762447395, 0.8548631552199898, 0.8708399889418057, 0.8203073777426958, 0.15826303905609507, 0.16257557201633444, 0.8165912666365063, 0.20581275069878835, 0.7643166296165027, 0.20880617785428213, 0.1686160892216032, 0.7939826175222291, 0.7635147861813073, 0.20337098252573726, 0.21277100791481196, 0.20902635198081287, 0.18240414322058318, 0.21096383791193662, 0.2207409930411507, 0.1740538860881905, 0.197979773894299, 0.19223957496528943, 0.31993142418896514, 0.18362252389412947, 0.209305994707515, 0.09475947533126239, 0.09990442194476823, 0.07925431338283984, 0.13968908657211776, 0.13926898845107538, 0.08636554924474382, 0.12877957673257623, 0.09481577722451018, 0.0975066843121476]}, "mutation_prompt": null}
{"id": "d637aa9c-04ee-4e67-b43c-522c79d41217", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adaptive inertia for dynamic balance\n        self.cognitive_constant = 1.8  # Enhanced exploration\n        self.social_constant = 1.3  # Convergence control\n        self.F = np.random.uniform(0.8, 1.0)  # Adaptive scale factor\n        self.CR = 0.95  # Crossover probability for exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Quantum-inspired initialization\n        positions = self.quantum_initialization()\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score\n\n    def quantum_initialization(self):\n        # Quantum-inspired random initialization within bounds\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))", "name": "QuantumInspiredAdaptiveHybridPSO_DE", "description": "Quantum-Inspired Adaptive Hybrid PSO-DE with probabilistic parameter tuning and quantum initialization for enhanced exploration and convergence.", "configspace": "", "generation": 17, "fitness": 0.41222832048210983, "feedback": "The algorithm QuantumInspiredAdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8435138899914613, 0.8209755447336959, 0.8139161371332244, 0.8223550785644855, 0.8500097528582866, 0.8277381836651032, 0.8303938252202372, 0.8229897229980851, 0.8247413855038215, 0.711080034000384, 0.688029104329493, 0.678350920875486, 0.6643577036355273, 0.6638103002454068, 0.7001608869979624, 0.6842225457776123, 0.6701112621997753, 0.6846957748131597, 0.11032316178108126, 0.13107479380198328, 0.1601224903092463, 0.15725793570563218, 0.5990858386220044, 0.1624558352622849, 0.564840507915597, 0.14926666006769607, 0.1649679822060407, 0.12871859300235589, 0.13754067317464214, 0.14271538366667735, 0.12541703195019094, 0.15872592986616796, 0.14701901257991412, 0.10519965044475266, 0.14552183820159703, 0.1468915632755846, 0.9874755339164349, 0.9812637573069084, 0.9815934343500473, 0.9885096565431187, 0.9860135295999466, 0.9850489745339434, 0.972662866040137, 0.9912489944912821, 0.988257383653504, 0.6513675780749572, 0.6897043932548619, 0.6756099046661214, 0.6869288680207595, 0.6637947884864348, 0.6708167951297463, 0.6717999532123676, 0.6656921902888826, 0.08783951140100821, 0.7618122836730215, 0.7525788687018471, 0.8096650369356575, 0.8225444006880877, 0.8250885235332863, 0.3487638337156358, 0.7529801546760911, 0.776780407019801, 0.7601563325543352, 0.4172176974822047, 0.40631765766806016, 0.4452694925967674, 0.41916177002687804, 0.3103743309994679, 0.13381394693956405, 0.516994880887439, 0.3925235978403835, 0.47363910256802, 0.38895403699619635, 0.388927279683683, 0.5037548042512685, 0.4459239014246129, 0.4880084044138423, 0.4974623177868822, 0.4954094798655476, 0.49765693649763654, 0.4189452962197815, 0.23441132915348006, 0.2873877386678305, 0.27673729547588233, 0.19977616428849632, 0.26809852039243687, 0.26790876804485186, 0.20066188462400447, 0.25610117693931655, 0.22178960009414117, 0.3971435242489916, 0.4658180878745374, 0.44634211482477926, 0.3480033783887816, 0.37478766125497787, 0.4107246765583549, 0.424739487098743, 0.41176763406517003, 0.4202148034764317, 0.21097783419768845, 0.12584093554718745, 0.07635823403942033, 0.11252116000768897, 0.12407368525931939, 0.08472596683744682, 0.06641875164067002, 0.13572829529992247, 0.14699550946292528, 0.262568375572546, 0.22296433175171704, 0.2623800937937264, 0.3290974148199004, 0.28668813959358197, 0.25076869552977166, 0.24130809354983163, 0.2441703203138209, 0.26840957156404033, 0.6822239406600833, 0.6407407721571565, 0.6645648789014487, 0.6535532003218285, 0.6459889792056732, 0.6791405606517231, 0.6599497417210496, 0.6841852044073629, 0.6486634953740997, 0.13982332194861424, 0.12804181535139592, 0.14387958375343046, 0.6043157910387889, 0.11776036038500026, 0.1474054736892253, 0.1315963611873311, 0.5530000431989748, 0.14611513487518535, 0.2127973393365623, 0.18722929428760615, 0.2615631700777984, 0.318194512615117, 0.17340987605774894, 0.22944785341624552, 0.25276545424748753, 0.19569024592185147, 0.2745970695944475, 0.38057598598244624, 0.4325935227463329, 0.4900860904854175, 0.563009187632219, 0.3540597022508183, 0.4640662581765771, 0.44403040082724354, 0.607563353210918, 0.5365805645719353, 0.28729442002826233, 0.31310465151324507, 0.3753091401192101, 0.41492496912726917, 0.4164219898969208, 0.28633663271642795, 0.3211393501105203, 0.4481471157638218, 0.38475977978282416, 0.21019478644607292, 0.21288036045393277, 0.1847547129651258, 0.20732690278945665, 0.2173011477948864, 0.18926725822486334, 0.20411565590287062, 0.22321996164218294, 0.20182662922997285, 0.21557970323548914, 0.23836641033045625, 0.6718715692349472, 0.23109699672065498, 0.18388004142363357, 0.20370610149981094, 0.6465727835072488, 0.21648140359170587, 0.5942251440537273, 0.2022275791535353, 0.8837056138816304, 0.1614669762447395, 0.8548631552199898, 0.8708399889418057, 0.8203073777426958, 0.15826303905609507, 0.16257557201633444, 0.8165912666365063, 0.20581275069878835, 0.7643166296165027, 0.20880617785428213, 0.1686160892216032, 0.7939826175222291, 0.7635147861813073, 0.20337098252573726, 0.21277100791481196, 0.20902635198081287, 0.18240414322058318, 0.21096383791193662, 0.2207409930411507, 0.1740538860881905, 0.197979773894299, 0.19223957496528943, 0.31993142418896514, 0.18362252389412947, 0.209305994707515, 0.09475947533126239, 0.09990442194476823, 0.07925431338283984, 0.13968908657211776, 0.13926898845107538, 0.08636554924474382, 0.12877957673257623, 0.09481577722451018, 0.0975066843121476]}, "mutation_prompt": null}
{"id": "3541e4c6-76ef-4cf1-a5d3-b60b0f66e40f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Slightly increased swarm size for diversity\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Reduced inertia for faster convergence\n        self.cognitive_constant = 2.0  # Increased cognitive factor for exploitation\n        self.social_constant = 1.5  # Improved social factor for better diversity\n        self.F = np.random.uniform(0.6, 0.9)  # Adjusted adaptive scale factor\n        self.CR = 0.85  # Adjusted crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return max(0.4, weight * (1 - evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n\n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedAdaptiveHybridPSO_DE", "description": "Enhanced Adaptive Hybrid PSO-DE with stochastic parameter tuning and resilience-focused diversity strategies for robust optimization.", "configspace": "", "generation": 18, "fitness": 0.37103135306879126, "feedback": "The algorithm EnhancedAdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8180987341024466, 0.8405848521483359, 0.8371918352290051, 0.841594375934446, 0.833851035516715, 0.8216885048449059, 0.851629925747694, 0.8242853566006197, 0.8311453932129429, 0.6846698855770704, 0.7115658240897228, 0.6942263962329404, 0.7233726342204201, 0.6720006362432325, 0.6917381783952894, 0.7076118525252881, 0.7247012700924613, 0.6974434270636214, 0.4965771005142373, 0.17393787513984738, 0.1662041591226795, 0.6679797554991672, 0.14099989406713398, 0.17152249406769315, 0.16999018844448688, 0.1434282731971943, 0.16161864518679503, 0.13251944144771988, 0.14690946939459804, 0.12829862608379194, 0.15084601077867488, 0.13725131713293448, 0.1294630124069419, 0.13121771846479702, 0.17034868183616347, 0.16285535087188907, 0.9837917581176241, 0.985837553975238, 0.9750395167498372, 0.9821285422299755, 0.9808962310919972, 0.9666053835835625, 0.9860822549693643, 0.9906424522947276, 0.9777643410950259, 0.6137086582928959, 0.6654887914757883, 0.6345540787270609, 0.6310748507275934, 0.6450750682232529, 0.6380053419741494, 0.508330810318807, 0.08226012498599045, 0.58932451251238, 0.772420894949198, 0.35786985459471865, 0.758336329683027, 0.7389705865462446, 0.7813770120617962, 0.7506367615467423, 0.7681288287302024, 0.36784656178592723, 0.7645038174152339, 0.3306705867963182, 0.3199645080796881, 0.32693278343767895, 0.3316446018966944, 0.1299857351128294, 0.307955054903866, 0.3580289584947465, 0.3709959509236034, 0.3417090546152668, 0.3358669014305047, 0.25389180161006475, 0.32787806902531347, 0.33037557339630885, 0.44783744729283137, 0.3356856010906971, 0.36395112509235616, 0.3607309910254155, 0.380007762802549, 0.11186161795236826, 0.05969778702549977, 0.19955869329225473, 0.14178249432100443, 0.17013617499892264, 0.15704092148429716, 0.20263949463752184, 0.2200029276845391, 0.13001820239217265, 0.25588256649117147, 0.2779700183227777, 0.284432156908641, 0.2639469134158112, 0.323043794499841, 0.33281722026382954, 0.24773821267658358, 0.35104476960218245, 0.3094723292356716, 0.0542505863721211, 0.08193202089772222, 0.03353426489209599, 0.08040999492545964, 0.09073760720699175, 0.1146996751337318, 0.08184426982316306, 0.08367893388084102, 0.1331435506153419, 0.23614594765890595, 0.2244171174947054, 0.2810260394430498, 0.2614123035767729, 0.2877011780197122, 0.30033286540113535, 0.23550050364905184, 0.26010233351509326, 0.22306126910291957, 0.6056754998825852, 0.59854944757571, 0.6726491886689723, 0.6113018770812687, 0.6790958484345722, 0.6051002006835524, 0.6533101546347981, 0.6859746730399174, 0.6575432177531171, 0.11736718111562983, 0.11618853354295755, 0.1345452480957876, 0.16041681569656463, 0.12900123511616057, 0.14019602953579013, 0.1091618005325472, 0.0924476049434304, 0.15371108983104753, 0.20008113090048596, 0.19500989487676013, 0.23974032207292795, 0.16543202471096918, 0.2045521436703992, 0.21266200492541543, 0.21501528204614972, 0.2254985775065671, 0.26239310957806594, 0.5030257528266172, 0.42317633030467083, 0.41354402990446115, 0.4931513760065569, 0.5239417098240245, 0.48093948136220543, 0.5914280768390673, 0.5844478172079046, 0.5875579066809458, 0.3535783019824488, 0.2834327326403683, 0.3425774549576699, 0.3433530954826919, 0.28562551710851347, 0.28963225607802556, 0.4047308335662051, 0.3671430810708912, 0.3741556302727821, 0.1900822561685841, 0.2027790075395185, 0.20321614573653812, 0.20114528578328472, 0.23210038829108115, 0.20204859492603877, 0.1948891635587915, 0.20231759512185998, 0.21619609280790453, 0.20435558226077566, 0.21711045148835473, 0.23413155414142872, 0.21846396519659805, 0.5901587898369646, 0.2102002696872488, 0.24004944060870725, 0.2856116888709527, 0.24158610062363983, 0.8011620825179541, 0.16324478986585378, 0.1614636465611804, 0.19333467349184097, 0.8207414452691724, 0.1671727202834965, 0.1776082053492284, 0.8637156664527739, 0.16694815814025787, 0.7849940674568362, 0.11193661017403411, 0.20769520713640421, 0.7074811904253119, 0.1685576829737987, 0.168809511843093, 0.18904076849397322, 0.21296032104581042, 0.2078945395534766, 0.18550288712635665, 0.2018584306664436, 0.2039192409716808, 0.21234272562470402, 0.19909987555183462, 0.19684532049586012, 0.20722827983737913, 0.20109437944257258, 0.21929875324546744, 0.12317762185179182, 0.07720888434876616, 0.08403644517136977, 0.08841215707871852, 0.15258385872815994, 0.0920123256098816, 0.13286575061083805, 0.08811992442046923, 0.08470190789275733]}, "mutation_prompt": null}
{"id": "13b86ddd-7c3e-403b-bdd5-5a6bfddda0e2", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Slightly increased for better exploration\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.8  # Adjusted inertia for balanced exploration-exploitation\n        self.cognitive_constant = 1.5  # Optimized for effective personal learning\n        self.social_constant = 1.5  # Improved for better social learning\n        self.F = np.random.uniform(0.7, 0.9)  # Fine-tuned adaptive scale factor\n        self.CR = 0.9  # Slightly reduced crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.5 + 0.5 * (1 - evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with probabilistic learning factor adaptation and improved convergence dynamics.", "configspace": "", "generation": 19, "fitness": 0.3374339484866429, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.7244587389669472, 0.729359260184308, 0.7170230765405217, 0.709917328037695, 0.731760074910615, 0.7452074587524438, 0.7108278302795997, 0.6989733929083742, 0.7189579620268478, 0.45564184087667636, 0.5375694097001592, 0.5101308967010048, 0.5104314251996285, 0.503625827867178, 0.5346339930854733, 0.5286973224141689, 0.5265788138143379, 0.5274713397914693, 0.28437430354053916, 0.12768820704375816, 0.16257067908988243, 0.13186791710840184, 0.13997121623214392, 0.14126216639469036, 0.3709423315044278, 0.2386028627641037, 0.12603623751964355, 0.2272277169600576, 0.14473658028266367, 0.13286723776933362, 0.12719198151712385, 0.12736139702176774, 0.11923779131193346, 0.11224358617831731, 0.11403791482147496, 0.11393312849441573, 0.985306591752212, 0.9776687653493458, 0.9759307876109303, 0.9850367730158857, 0.9829102304062528, 0.9843495666279513, 0.9865832547529164, 0.9865076435110404, 0.9856003302774548, 0.4782050966915171, 0.4514831905471641, 0.47487585038589497, 0.4119167403433046, 0.47162868498519406, 0.453034061280966, 0.42129473885602486, 0.5022452622579205, 0.5045126431429134, 0.7301240315690141, 0.5971664780171555, 0.683844548690945, 0.6766862426574476, 0.7133641044006841, 0.6670091156528505, 0.6495182495781099, 0.6902138424343222, 0.6628496951076214, 0.29489249157488984, 0.2791331106720195, 0.25167531662905096, 0.2149774399508425, 0.257307337468925, 0.3519826761201722, 0.30244772419420873, 0.2720919861214429, 0.2702239470681532, 0.2984240351653529, 0.30163603755838553, 0.23886861938640636, 0.25682075983335995, 0.24666645878532445, 0.2644382530811549, 0.31197656692613795, 0.25548222084404404, 0.3415954462399323, 0.10906135334499845, 0.19825627750420527, 0.18092481176571673, 0.14702863166990354, 0.13265421204416328, 0.13976848124867625, 0.12106169488065077, 0.19039617296591527, 0.15503955456215845, 0.25008182587107464, 0.29020853310317674, 0.2918026150171993, 0.29281775773101604, 0.2891675086388533, 0.2886884344327679, 0.3010964344805732, 0.30916290436846283, 0.3077348879938875, 0.0762070024435465, 0.043681178312120705, 0.060492860323872466, 0.042242564137437655, 0.05332183927248024, 0.08327035236779134, 0.11349004326609069, 0.10126546429605532, 0.08417226713617854, 0.18401002695958313, 0.19971836087589967, 0.18206282969705034, 0.18875672750240802, 0.17017023516844687, 0.20228577877487075, 0.1847714329661012, 0.21366088497803792, 0.18980526311716295, 0.5196831318157682, 0.5684415568210541, 0.5459076222881758, 0.5806890589501883, 0.5753314087974033, 0.5762133723346001, 0.5317938472133652, 0.5440314044723386, 0.5462713338113927, 0.1273729428636836, 0.12784972768390723, 0.13146565999524407, 0.10671102776683805, 0.35548524461568964, 0.14516058696509737, 0.09681096353399532, 0.12044935118388422, 0.11108734567999745, 0.2678075057940571, 0.1620849599831914, 0.2258149370366337, 0.4024541410583281, 0.1694792959545186, 0.3400968729603123, 0.18172119784020213, 0.17016108183652323, 0.2157880802523069, 0.4046787825268887, 0.3701704322028029, 0.3622097117686167, 0.40602389098096303, 0.39651300914642096, 0.405925860573907, 0.39762395742792045, 0.4171580359672519, 0.40691849709051275, 0.27929180896972294, 0.2480372167740077, 0.29530295801488726, 0.23252187312566752, 0.2706031127840949, 0.18637100942341744, 0.32615958161127034, 0.32908217014671326, 0.2797508558656998, 0.21061558322133478, 0.2634706488337488, 0.2052149322996527, 0.20932250073130088, 0.22312877956979504, 0.21915067487831963, 0.2147493394631047, 0.21555715993566704, 0.2069466158229395, 0.3496397308926432, 0.22458698682821465, 0.2192943290111592, 0.426051560544776, 0.20124388571534968, 0.2016964584090174, 0.2298134414407823, 0.2278234201496726, 0.22853565234484663, 0.15796764046419198, 0.7691836978354079, 0.8027184331420383, 0.68659765601023, 0.7858926501519529, 0.17400261704889564, 0.7179701502491316, 0.7498128931004078, 0.15599372065868589, 0.16358487385071208, 0.16717774405312136, 0.6512215304939174, 0.1530929558862466, 0.16763250588800205, 0.19366542538101417, 0.21281164060328217, 0.18909185931721495, 0.1259306914039232, 0.19652354290444318, 0.18988521491039556, 0.20288591122115684, 0.20414650130861178, 0.20554637746255167, 0.18720853317560648, 0.19159149790986596, 0.18579176184981938, 0.19389316479134855, 0.10203264236438447, 0.08354569298678727, 0.08367949176188327, 0.08732458187176184, 0.09914297164411456, 0.08500314881613691, 0.10729182964780071, 0.09568665117523356, 0.09059314941929897]}, "mutation_prompt": null}
{"id": "231fd786-2c33-4bae-ad8f-ce6bd64b546e", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Modified for better sampling\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Adjusted for finer balance\n        self.cognitive_constant = 1.6  # Enhanced for more aggressive exploration\n        self.social_constant = 1.5  # Adjusted for stability\n        self.F = np.random.uniform(0.9, 1.1)  # Wider range for diversity\n        self.CR = 0.9  # Adjusted for variability in search\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic inertia adjustment\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)**2  # Quadratic decay for improved convergence\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedDynamicPSO_DE", "description": "Enhanced Dynamic PSO-DE with variable swarm adjustment and stochastic component scaling for superior exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.36988074821656597, "feedback": "The algorithm EnhancedDynamicPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.28.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8618747937392502, 0.8411306459306818, 0.8321368513719456, 0.8545324252996113, 0.8478585381276723, 0.8496174693198721, 0.8716007410029418, 0.8289349814335063, 0.8539307988286071, 0.7473236208616568, 0.7308897353519612, 0.7152624509622796, 0.7297825814537817, 0.7139460412564094, 0.7521814147681789, 0.759948539005914, 0.7412490455739427, 0.7209981955384877, 0.16504300202732047, 0.1637504659166189, 0.16513944960821048, 0.5918485621885929, 0.1293928718327768, 0.629676753714127, 0.1687793381784406, 0.17071593841649335, 0.6564218709140592, 0.13886437960177267, 0.11650882229635484, 0.10777722333248874, 0.5453440081423592, 0.1756228929843563, 0.5422336231648803, 0.15559170339925676, 0.16713582910752178, 0.14082123480972497, 0.9809034852356167, 0.981723785497451, 0.9804446235980744, 0.9818464086638515, 0.9865408550630569, 0.9849825900370981, 0.9867562471933471, 0.9829476432105902, 0.9858770853838388, 0.7139059509995117, 0.6928488516402573, 0.7164602604881019, 0.6941652448884292, 0.14972303444669854, 0.6783000469044513, 0.7079028354367701, 0.6706254476120573, 0.730348805296883, 0.7720576133270188, 0.37003563954229, 0.21781683852140976, 0.27537119859008496, 0.7555950172547845, 0.8007374561939582, 0.7045160179758561, 0.8453225919472476, 0.8510168821492865, 0.12898960129756964, 0.3695240162350789, 0.29053854275884095, 0.4302408671726329, 0.10388232554542587, 0.41518665971080837, 0.35702484312232075, 0.12647246494313535, 0.30942070225545737, 0.2717859449169906, 0.049680401723643075, 0.3055605494435417, 0.3674075205977553, 0.1279068244506003, 0.40983274549028903, 0.42114085515097144, 0.3438332806458816, 0.3178071590159668, 0.09127683579857016, 0.06902610222395467, 0.11121417814982992, 0.09617278243367222, 0.1328852844259043, 0.08167284714703404, 0.11963506456358886, 0.1248144121107736, 0.08452374078698066, 0.20305920573305158, 0.1912628513350565, 0.25237345432009073, 0.1575973968048403, 0.18774214937560296, 0.20831391890899953, 0.22512546501413777, 0.22843144127845694, 0.24129848661381337, 0.0, 0.17075923661180115, 0.0, 0.0734051659783016, 0.16599845838616567, 0.09133884930406788, 0.06746589726624641, 0.09482226185877007, 0.07912451256532604, 0.23413837829170858, 0.1471822504835587, 0.18636633414665482, 0.2170812021313231, 0.11671513955528112, 0.2922669215109178, 0.23855231461984805, 0.2970661739184719, 0.22218653745067596, 0.628805797725634, 0.6174515599973958, 0.6305100355253832, 0.6174172890733766, 0.6245566080579485, 0.6185832063715713, 0.6389681420891898, 0.5945938686968448, 0.6510635845452981, 0.16902976192640873, 0.11547188517962936, 0.13800812865887202, 0.1404163271584573, 0.14633823943212887, 0.6495983985867274, 0.10544883939440874, 0.1442720493449502, 0.1313846511178719, 0.1977332358305144, 0.2158932351707996, 0.3320763730701104, 0.19546806844044717, 0.2517462177216673, 0.22218640632909803, 0.30665029280112144, 0.1763879835834654, 0.2593042140398152, 0.38449036846804363, 0.33387188387805433, 0.43488900884533166, 0.591624076966814, 0.2584991902510748, 0.40308115097863506, 0.5743843765625408, 0.6516058467932452, 0.4049198943316116, 0.20287908054703996, 0.23385491072601838, 0.34230038607141844, 0.38497400892872624, 0.3730036056874755, 0.23460804772230792, 0.2667303917751177, 0.4242288572876123, 0.46738215178457576, 0.1939513646581229, 0.21974093041868037, 0.216878374809938, 0.22113843140878475, 0.20469682509290577, 0.2069023315544367, 0.21622035271017848, 0.19898791422085238, 0.1853773695029458, 0.24757356334823843, 0.21654261519947282, 0.23918287852301912, 0.7293401244926031, 0.21672511256146776, 0.22359706334502594, 0.22125421607628581, 0.2114584381103135, 0.2138570577826644, 0.19581293911593067, 0.8583422333067872, 0.8546143311799215, 0.855795590399145, 0.20920614832267326, 0.8680118915700045, 0.1923030746287815, 0.17365378504051043, 0.15839337508408857, 0.6429312507495253, 0.16743621417800314, 0.2114961481040748, 0.16824610486849234, 0.16785226989033963, 0.16877021062111286, 0.21316866904025433, 0.19942833602293109, 0.11193686741185016, 0.18708854577906664, 0.1935001664447269, 0.18692425027952153, 0.186028664650428, 0.18971987595349538, 0.19036558770640588, 0.1977439812926015, 0.19351261004974762, 0.18504743805161128, 0.08664017948989455, 0.09325133696539001, 0.09288739808819901, 0.08301114617062122, 0.0843766036935002, 0.09392201144172974, 0.1337275199687692, 0.10420877692086228, 0.09499962886606661]}, "mutation_prompt": null}
{"id": "c2ebff4b-1890-4698-b07a-1c9eb544728e", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.8\n        self.social_constant = 1.3\n        self.F = np.random.uniform(0.6, 0.9)  # Decreased lower bound for F\n        self.CR = np.random.uniform(0.85, 0.95)  # Stochastic CR within range\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Function to adjust inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            stochastic_factor = np.random.uniform(0.9, 1.1)  # Introduce stochastic factor\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component) * stochastic_factor\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE_Refined", "description": "Modified Hybrid PSO-DE with stochastic velocity adjustment and adaptive crossover for improved exploration-exploitation balance.", "configspace": "", "generation": 21, "fitness": 0.40063688642963863, "feedback": "The algorithm AdaptiveHybridPSO_DE_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8417625010191061, 0.8287784535176118, 0.8563381874647056, 0.8415166821780615, 0.8131255067527602, 0.8434222526534706, 0.8293217883406628, 0.8324008489062875, 0.8569631999737791, 0.7035506083922466, 0.7295956672195852, 0.723281576936556, 0.6963563319647358, 0.7169543388331918, 0.7142238090627818, 0.7244015970294878, 0.702756132557653, 0.7355441754997405, 0.5753336533389228, 0.17320502526066794, 0.1465051820460418, 0.1756401985332825, 0.4844960597683975, 0.16408394279504068, 0.16157170276661303, 0.1692057519617034, 0.15138940005165913, 0.1325843372169282, 0.14916882421380562, 0.11932694092794749, 0.1266275868081449, 0.555198604587164, 0.14381586788124368, 0.1400474938416617, 0.11741647173727998, 0.14008789870448002, 0.984630125598037, 0.9820801458245698, 0.9840827223607533, 0.9875674573658876, 0.9764940855940857, 0.9823439327629397, 0.9831047473011905, 0.9807979458698582, 0.9835081560326345, 0.6762619516432951, 0.6863331797338599, 0.6864700553852325, 0.15113949058482135, 0.6987095050615979, 0.7245487309633376, 0.08509697473160227, 0.08249554935549752, 0.7076782284425155, 0.7918753855665095, 0.7694563949411612, 0.7668015988807635, 0.7670711410829771, 0.8425495178724308, 0.8640077201101397, 0.7717358656743791, 0.8223633841815556, 0.808565723592645, 0.42617236095785505, 0.5184196618736407, 0.38564499879309233, 0.3938638495089416, 0.47519996401870246, 0.36011401441714075, 0.5313234955857176, 0.5759743231464565, 0.37904985213686404, 0.46582641638402944, 0.12485770500343008, 0.3284193971398667, 0.5387228102355192, 0.3534677149088906, 0.39023308754097263, 0.47269183108078805, 0.4513794427865758, 0.37905431834677084, 0.29665380744735304, 0.39750828880849687, 0.22032549086567255, 0.3250968827242988, 0.40416445634705656, 0.24717029557387415, 0.3018072003083616, 0.3529913333814224, 0.04190385967896726, 0.4491733981706644, 0.5543790095919354, 0.41754031988728846, 0.535653634779748, 0.4588892214107261, 0.3626081988212103, 0.3912694011431104, 0.5351157827039357, 0.4497095398178097, 0.08651912161920261, 0.16447506358623143, 0.11444497955904431, 0.22725560851908622, 0.2371740169120078, 0.13574849985194903, 0.15103023164661322, 0.08019024331104885, 0.1340727367931086, 0.28581612375369936, 0.30931447967231174, 0.20668721094807185, 0.3113838167925378, 0.3403301614733031, 0.258485544028063, 0.2748028198898581, 0.30144617378329686, 0.25928446379669534, 0.7070796126256403, 0.7120360832131662, 0.6366560647289912, 0.6869432716704573, 0.7069372199086442, 0.660003812873623, 0.6878068539909057, 0.7104863372130497, 0.6892284954392092, 0.10524333707222322, 0.12065641204484057, 0.11786786967395946, 0.1347050397853523, 0.1208113262402205, 0.6603447009565008, 0.16812677377088203, 0.1468845960021321, 0.1592869228828505, 0.16557622365706304, 0.2121381243003746, 0.18647572809442303, 0.3304389866023292, 0.1829200889027791, 0.20666924921823993, 0.19273066850255616, 0.22429832595897914, 0.20161965555505512, 0.46669697639734475, 0.4142973471459894, 0.4040600156026699, 0.4776049083611068, 0.5950426827736983, 0.4811078347761307, 0.5481165261251708, 0.5129200804465279, 0.6837694815286217, 0.30545569176457654, 0.40629938263853815, 0.3351083266145305, 0.37011719952046573, 0.30524535717688084, 0.2628775935002746, 0.40942628522299185, 0.32175391714477497, 0.49256374095577315, 0.20816531417138484, 0.22639562399155433, 0.24281924206944872, 0.2733237836495157, 0.19960932762864725, 0.22359360937995187, 0.21203801379342035, 0.19641567182922348, 0.20822514750032373, 0.6661151351617423, 0.674972960345252, 0.24033048110402455, 0.21257850343056117, 0.1956384523601835, 0.6266508635481853, 0.21534785149660474, 0.23811825690147648, 0.22278329122063956, 0.1860693997427194, 0.1552938541396356, 0.1536656829017593, 0.16899170696480437, 0.16774342745307513, 0.1674177964684448, 0.8188178963851256, 0.16154958229107563, 0.16890735088108144, 0.19893451205432133, 0.1693126830434254, 0.8292580613197316, 0.16794136518912695, 0.2107579946326419, 0.2061527196883458, 0.19841091891771412, 0.21151346699770535, 0.154277936598883, 0.2077102126622905, 0.18270337943337367, 0.20721342852489644, 0.2041289119251315, 0.18641180353608855, 0.19995434674235946, 0.1805858231154216, 0.17790791327881528, 0.2029879731553108, 0.09803110297564999, 0.10517666872603981, 0.08602087519662527, 0.09778932794690232, 0.08298493712669242, 0.1042815326013471, 0.08754958751834818, 0.09337026361309686, 0.0935813883702834]}, "mutation_prompt": null}
{"id": "5e453452-24f6-4a2c-9acc-6522c02ac304", "solution": "import numpy as np\n\nclass EvolutionaryAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Slightly increased for better coverage\n        self.population_size = 25  # Match swarm size for uniformity\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Lowered for better local convergence\n        self.cognitive_constant = 1.5  # Slightly reduced for balance\n        self.social_constant = 1.8  # Increased to enhance global attraction\n        self.F = np.random.uniform(0.6, 0.9)  # Wider range for adaptation\n        self.CR = 0.85  # Reduced to maintain diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))  # Initialized with random values\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.5 + 0.5 * np.cos(np.pi * evals / max_evals))  # Cosine decay for inertia\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EvolutionaryAdaptiveHybridPSO_DE", "description": "Evolutionary Adaptive Hybrid PSO-DE with stochastic parameter tuning for enhanced exploration and convergence.", "configspace": "", "generation": 22, "fitness": 0.38494117501859976, "feedback": "The algorithm EvolutionaryAdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8418785312123791, 0.8309698633322115, 0.8236215954625423, 0.8536878481735732, 0.8419225750196602, 0.8485160721964458, 0.858706597508768, 0.8438552021525095, 0.8517365547301434, 0.7229048333891023, 0.678406643822371, 0.703331667552751, 0.7033326052821005, 0.7027696229031379, 0.7215421225828131, 0.7203247811699429, 0.7223237332001922, 0.6887757852443652, 0.13744341259189063, 0.1545799692814177, 0.17108089731864273, 0.13727470110123063, 0.12957456544154233, 0.16991380097828968, 0.1711830049444346, 0.5819933966363642, 0.1404121293480619, 0.16150001867133346, 0.1412459895994994, 0.12827622907927416, 0.13265437777489075, 0.11558537566937188, 0.15141103878402495, 0.10443346279110899, 0.14206260149748196, 0.17089570444269686, 0.9871344991182132, 0.9820826745704376, 0.9768647734996486, 0.9895129172319452, 0.9822713071025246, 0.9804725127150156, 0.9860191530735299, 0.9894453001105151, 0.9839070466399635, 0.7021381524436505, 0.6651670146760424, 0.6611765124589056, 0.6601367058330845, 0.659274775585265, 0.6984497748449774, 0.651781595018977, 0.6583058460858223, 0.7229660572744854, 0.7614820385883778, 0.7779186769204625, 0.7980214439615032, 0.7939962499247329, 0.3742689436518528, 0.8070104206229884, 0.8352428054488863, 0.7628403640015213, 0.7573340297001688, 0.2683262204866964, 0.43870300350076574, 0.2445942971824816, 0.3269663904421547, 0.36043662189489445, 0.3692323841381634, 0.41177173441093007, 0.28908137480364615, 0.3011137610389535, 0.32357182559106545, 0.34812645934597886, 0.3286344530351868, 0.3607570844521787, 0.43579531001992533, 0.33966278168684083, 0.3872621371877556, 0.4143679625057529, 0.39815948175459515, 0.10847595724338521, 0.21168764345951696, 0.13232176715670796, 0.15988120142098472, 0.11625605483651746, 0.1565417475033677, 0.16709436012679812, 0.12603642144795157, 0.143194495128095, 0.24267112773247457, 0.29757176673800223, 0.251305713623162, 0.24318141151376227, 0.2909837332332146, 0.2924332330055127, 0.2844428525128099, 0.30809170706258515, 0.3553591935914766, 0.04803219867612718, 0.22092714798070412, 0.040986423695725915, 0.10850882938580364, 0.23184915109296156, 0.10225053300430464, 0.0976469129547437, 0.11733117752018918, 0.19953005372066523, 0.2270633293946932, 0.28446042975186026, 0.2306145075119571, 0.3673456250054573, 0.2755916187628329, 0.2931463337135529, 0.07975994831499611, 0.3270923128807435, 0.19510073455802046, 0.6281910238712938, 0.6336390483469563, 0.6275328757135201, 0.610950978466845, 0.6225717725992903, 0.6427503246881561, 0.6621497239108404, 0.6399788459145073, 0.642312707676759, 0.1181832457705595, 0.1650651327347341, 0.139944861993749, 0.1369446614790839, 0.1561993494490974, 0.1116918521129463, 0.10731433735862306, 0.1738469402158367, 0.14596116418849991, 0.1698691353349412, 0.2225025028040467, 0.3726728630602305, 0.3172071320101937, 0.4368057155556455, 0.19228183656988662, 0.13986579944059307, 0.5512081727384875, 0.22198041778064725, 0.5105834050868289, 0.34301270917133975, 0.25301093924030615, 0.5551077639136193, 0.21713686346568317, 0.46271282117296275, 0.5090441764967345, 0.4276204802673086, 0.28532223670095247, 0.29549625328835205, 0.25660095077760425, 0.3469425924848696, 0.3236573893382294, 0.2716761129392701, 0.3199443400532027, 0.3155174106788158, 0.3939232948141177, 0.34279444014567106, 0.21258054921515745, 0.22787919776812127, 0.22384911127717266, 0.23945376344322133, 0.21974555737871737, 0.2158592820599532, 0.22502135697614767, 0.19393618663825185, 0.2230197496307118, 0.22287232599110696, 0.23627009713763258, 0.6893904354337692, 0.2352003523908368, 0.24143254765498479, 0.1983200665647301, 0.25093496176254315, 0.23805127053591302, 0.2374188765720754, 0.16365948328068658, 0.8862293781350888, 0.8278047840148257, 0.19546876199519914, 0.8681756860681387, 0.862462688008379, 0.16475703866754443, 0.1773216031370759, 0.1786629574265356, 0.16682471547893452, 0.21013734114136284, 0.21084293281751776, 0.16813175287581528, 0.683137839887989, 0.7553912481713736, 0.21322206934366172, 0.21364159451296727, 0.7766318059171716, 0.19951531696136404, 0.18046128135693384, 0.18239737065855066, 0.1832680072167301, 0.18235832302004362, 0.21486236209337717, 0.19390866763002024, 0.2059123159433195, 0.1900701073748835, 0.10381885391933554, 0.09673707583615831, 0.09924033455406678, 0.07459464126120552, 0.07585028328110888, 0.0978503212951588, 0.10577056953846109, 0.10522308959446969, 0.09530907061950422]}, "mutation_prompt": null}
{"id": "091e2203-9d0a-4f83-b5e8-6a6d457e17b3", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Increased population for better sampling\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Adjusted for improved exploration-exploitation balance\n        self.cognitive_constant = 1.9  # Enhanced individual learning\n        self.social_constant = 1.4  # Enhanced social learning\n        self.F = np.random.uniform(0.7, 1.0)  # Broader range for scale factor\n        self.CR = 0.9  # Balanced crossover probability for exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Stochastic inertia adjustment\n        def stochastic_inertia(weight, evals, max_evals):\n            factor = np.random.uniform(0.85, 1.0)\n            return weight * (1 - evals / max_evals) * factor\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = stochastic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Multi-phase mutation for DE\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "DynamicAdaptiveHybridPSO_DE", "description": "Dynamic Adaptive Hybrid PSO-DE with stochastic inertia adjustment and multi-phase mutation for diverse search.", "configspace": "", "generation": 23, "fitness": 0.39420117166243845, "feedback": "The algorithm DynamicAdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.27.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8472593258843606, 0.8476277625937463, 0.8418098011333515, 0.8578006847561174, 0.8408497142447215, 0.8610030170436822, 0.8254040151087133, 0.84697997424467, 0.8385849839878712, 0.713782611538488, 0.7083763160678407, 0.7104756877165255, 0.7020217758751461, 0.6809198170240076, 0.7250517363801151, 0.7312812050951607, 0.7119267087128045, 0.7104919668870706, 0.15318526077190187, 0.1565175658402519, 0.13700307787720034, 0.5565872602414854, 0.15805095507215117, 0.14645757057871722, 0.15363044736815668, 0.1458166557956796, 0.6503868045077048, 0.13328556471612518, 0.13655354877484627, 0.34380634932923493, 0.15815351149506074, 0.14596395311490196, 0.13274925528584025, 0.15630920722670671, 0.13981458499691757, 0.1454521420739473, 0.9799768401986835, 0.9851176401356985, 0.9779536880441237, 0.9864198713756421, 0.9861123367007683, 0.9843924097779354, 0.9871046234027331, 0.9868596026969124, 0.9843713161201839, 0.6607613721996142, 0.6942672876254934, 0.6602809942861564, 0.6839990488802197, 0.6810640967743673, 0.6803429295631447, 0.6345460989870216, 0.6764126836457685, 0.6949848901675126, 0.8005463181862078, 0.7719131919427721, 0.7711331970548969, 0.8022946726510933, 0.8580887417319837, 0.7726406786777815, 0.8536801585777662, 0.809363431639223, 0.8074310219663663, 0.29825041603425295, 0.3615372106396363, 0.36166843996386866, 0.33991250781957383, 0.371354067637235, 0.12893002327996406, 0.33529233293272687, 0.3829709911846161, 0.3683414522317323, 0.3144716122714367, 0.3079388606062654, 0.3059634217783782, 0.34297321503676037, 0.3642091510281912, 0.32035969826527466, 0.3888495541888868, 0.3503206755870416, 0.3948544502591874, 0.058970408861712564, 0.168766817802391, 0.20569135209959355, 0.19586063573027646, 0.15563653711905967, 0.1993129813128608, 0.21726011318691385, 0.1599766307967464, 0.1350032149281737, 0.28313176712881705, 0.32554844122699644, 0.28546511895783866, 0.2896400165839236, 0.2680933361332193, 0.3035792210767472, 0.30448804250262407, 0.2922739369908439, 0.263145998385902, 0.04104873293120359, 0.13692011706915186, 0.04523829478023256, 0.07145043612157098, 0.130687722522715, 0.12826790119565157, 0.09103905045313532, 0.31449519617574606, 0.09669256570403628, 0.23906240837279025, 0.27295818658594195, 0.21081787639484362, 0.3300503977581969, 0.1776453445105588, 0.2548422194297766, 0.22171304047053741, 0.24544742399605757, 0.23671016985979687, 0.6054172457592613, 0.6374970690991772, 0.6733046732583114, 0.6469064928736572, 0.604594475434757, 0.6607359766343234, 0.6228445422425675, 0.6690260057039936, 0.6247318047142881, 0.11151122333528851, 0.11680264806537566, 0.1039877161795375, 0.11667988858056288, 0.1143348378254001, 0.12666975644586143, 0.1255665163541213, 0.1535943006211743, 0.11015419466811871, 0.45767738355849275, 0.20718707951646598, 0.308753490570417, 0.13924912618786278, 0.316330736572923, 0.25550663416642294, 0.2208260571983851, 0.1651389599504146, 0.24548708704625077, 0.4142801450112892, 0.5083801934544476, 0.5204670970927947, 0.4616676499176604, 0.41338176767117174, 0.5265818531376112, 0.48574283867662804, 0.5646341119974243, 0.5592306376815301, 0.25052834657049705, 0.267786374454857, 0.35065476699225684, 0.34487681958857097, 0.2813515592035666, 0.37689599434366006, 0.3453947496140026, 0.4991911211387775, 0.3431171259143715, 0.20694337028976073, 0.17990376863512014, 0.21133772731094058, 0.19766999519811268, 0.2315302891576575, 0.24355961346477806, 0.22933744388391775, 0.20754648551812138, 0.22077019512697815, 0.19023484993784745, 0.19478345377945094, 0.23455464559904382, 0.6651323408865679, 0.24260577568498132, 0.2189600116563657, 0.6162015977821887, 0.21315250902880112, 0.2344300807762867, 0.8147674909373206, 0.8881384908085402, 0.16486635266774397, 0.17007403212173344, 0.8820102987169633, 0.1576254996907539, 0.8318618586487107, 0.1754816032458162, 0.8503376501197079, 0.20264799809924094, 0.21068826647963135, 0.16834851769714765, 0.15499409585487522, 0.8135503501446207, 0.7496895995128973, 0.20352016323353284, 0.2034075016065956, 0.20688152359440304, 0.20093599654147032, 0.19445486238313447, 0.19057090749988226, 0.2171254041795584, 0.20696424921269563, 0.18430790885391235, 0.1891863984901203, 0.1939620933568713, 0.20541346742135225, 0.09066795646351455, 0.09248223566797165, 0.09500709015403552, 0.0821613018859102, 0.0894757483153168, 0.08734424440330935, 0.08829261347455408, 0.08290548411238019, 0.09541089647611734]}, "mutation_prompt": null}
{"id": "070ab001-173a-4c3b-86ea-71846fabac1c", "solution": "import numpy as np\n\nclass NicheOrientedAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30  # Increased swarm size for enhanced diversity\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # More adaptive inertia for balance\n        self.cognitive_constant = 1.5  # Balanced exploration and exploitation\n        self.social_constant = 1.5  # Balanced convergence control\n        self.F = np.random.uniform(0.7, 0.9)  # Modified adaptive scale factor range\n        self.CR = 0.9  # Modified crossover probability\n        self.func_evals = 0\n        self.niche_radius = 0.5  # Niche radius for maintaining diversity\n\n    def __call__(self, func):\n        # Initialize PSO with niching strategy\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n\n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "NicheOrientedAdaptiveHybridPSO_DE", "description": "Niche-Oriented Adaptive Hybrid PSO-DE with swarm niching and adaptive learning for diverse and robust search.", "configspace": "", "generation": 24, "fitness": 0.3776027655688008, "feedback": "The algorithm NicheOrientedAdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8415036297695335, 0.8352442619849891, 0.8333995143768642, 0.8399428734266645, 0.8527355805101904, 0.8551008702452884, 0.8364664708811382, 0.8411176867665289, 0.8549791452330092, 0.7330056421826264, 0.7145750401402673, 0.6983995241337999, 0.7041544166514561, 0.701342272367659, 0.711064949242497, 0.7111827653103286, 0.7025045354003767, 0.7209454440009756, 0.1479807592524709, 0.14798373232783235, 0.1335623197245872, 0.13742169189358555, 0.1694653334703473, 0.15053497467933208, 0.14774909343744147, 0.5683915013071528, 0.6187377208851998, 0.14928393413928442, 0.10383883061441634, 0.13396721948302293, 0.12621090024175408, 0.1069068591920006, 0.13140490222443912, 0.1345918587277405, 0.12850489219298888, 0.12037178629289669, 0.9869113968505056, 0.9854216474684565, 0.9694309344313478, 0.9771621462927012, 0.9874040636323903, 0.9854396244772459, 0.9814729944053133, 0.9895739849517005, 0.986485178762831, 0.6554856863127148, 0.6900616523693555, 0.6570225518571949, 0.642069657864896, 0.14843026298512452, 0.6800377395351006, 0.6632090656281806, 0.05003567097318207, 0.6846373999571584, 0.7887747460029811, 0.7909785965207338, 0.807032655935173, 0.3673387124461037, 0.6479040014899151, 0.15679149554328564, 0.2297168186245918, 0.7887345971287031, 0.8248101339137002, 0.1313682246091794, 0.35282392461571166, 0.399580232219902, 0.26330206239223797, 0.3765488940367502, 0.19177159774586983, 0.5935026382790475, 0.2899907304203606, 0.3803717606271194, 0.25119974617270324, 0.3720980313063219, 0.40679422831500356, 0.2902910214198593, 0.3652062876176625, 0.4289101853541828, 0.4314609885987618, 0.40993601951390424, 0.3862140969921475, 0.16197668005082544, 0.22466262419048832, 0.20579533227753533, 0.19312664130581947, 0.19950538256973027, 0.2220711822069117, 0.20405583417461126, 0.17283323799724348, 0.17274045054423026, 0.32589280545041766, 0.38807127692526744, 0.30876321702773946, 0.27469972923590324, 0.3102563577293932, 0.32520345030913445, 0.3171425647854058, 0.3526109961011771, 0.33235575990472066, 0.04825864324509055, 0.09610809426167566, 0.05871284241763974, 0.08903610577105214, 0.06741487083781539, 0.14469362559177157, 0.17913937499809907, 0.09088333033649343, 0.09165265960459346, 0.1519802865870291, 0.2576375856931561, 0.229545423384231, 0.2394087550315731, 0.2615027889406415, 0.2929983589603914, 0.08161486332538137, 0.3034904229971601, 0.1636990619894254, 0.6279590471133326, 0.6744000552774565, 0.64294495086335, 0.6726921402524378, 0.6521430776287664, 0.6706600012232226, 0.6629657182062536, 0.6853260033058884, 0.6795235272410871, 0.13375930508045897, 0.12511950619420986, 0.1392899510244029, 0.17774595131649185, 0.1747424966697545, 0.10408071480465242, 0.13762419672248638, 0.1446420513122061, 0.13367982680035728, 0.2703377507874567, 0.20924967304261877, 0.16758473537253415, 0.2640022774987244, 0.16462745750602914, 0.6098499482678287, 0.22604251199071668, 0.23750611154630763, 0.2702865735330452, 0.3705284023959432, 0.4070479674529309, 0.4676072488672244, 0.5017416100987784, 0.4923064338381752, 0.5005947495195132, 0.5204576401164258, 0.45225120380163797, 0.5359858609806236, 0.2717123505558686, 0.24556608370517807, 0.3121247555150064, 0.3039648430754096, 0.2583111741652726, 0.26224750145540077, 0.31230762586402494, 0.3094590104988111, 0.3184934084492749, 0.2735572563702965, 0.23404607336917516, 0.20070349114960984, 0.27102465731573433, 0.227578800404989, 0.23121766304105518, 0.21314423792693638, 0.2325796455371162, 0.22829043637110913, 0.5596605616624534, 0.6969070037250429, 0.2215865638830482, 0.20552388553405054, 0.19862282573816148, 0.19646605113579108, 0.24149387073552708, 0.21005842145431064, 0.18908408519215314, 0.785336877695128, 0.16435555837161886, 0.8583045761228533, 0.19832863425610192, 0.8984277048562648, 0.1970713489262681, 0.7935759893931267, 0.1774061055375301, 0.17003192563900194, 0.748739915372783, 0.2105922847569468, 0.21030390992167858, 0.15209805355081096, 0.16730107020791674, 0.16748296780797922, 0.20355523841291523, 0.8276567505986236, 0.15000049043018493, 0.19935272364147216, 0.19000956268594005, 0.21848984340040356, 0.18730258305350256, 0.19950028008920395, 0.1942380697534417, 0.18462057981603597, 0.19944391876482037, 0.19990788486360667, 0.14957585600298684, 0.09498923860719366, 0.11757588541940622, 0.143300828959522, 0.12779837260371385, 0.09715733318466879, 0.12885427746694245, 0.09254745893862559, 0.09606666619984261]}, "mutation_prompt": null}
{"id": "652bcde6-a786-4c75-8b0c-fe76866c6c03", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adaptive inertia for dynamic balance\n        self.cognitive_constant = 1.8  # Further enhanced exploration\n        self.social_constant = 1.3  # Slightly reduced for convergence control\n        self.F = np.random.uniform(0.8, 1.0)  # Randomized adaptive scale factor\n        self.CR = 0.95  # Increased crossover probability for better exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with probabilistic parameter adjustment and enhanced diversity control for robust convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8435138899914613, 0.8209755447336959, 0.8139161371332244, 0.8223550785644855, 0.8500097528582866, 0.8277381836651032, 0.8303938252202372, 0.8229897229980851, 0.8247413855038215, 0.711080034000384, 0.688029104329493, 0.678350920875486, 0.6643577036355273, 0.6638103002454068, 0.7001608869979624, 0.6842225457776123, 0.6701112621997753, 0.6846957748131597, 0.11032316178108126, 0.13107479380198328, 0.1601224903092463, 0.15725793570563218, 0.5990858386220044, 0.1624558352622849, 0.564840507915597, 0.14926666006769607, 0.1649679822060407, 0.12871859300235589, 0.13754067317464214, 0.14271538366667735, 0.12541703195019094, 0.15872592986616796, 0.14701901257991412, 0.10519965044475266, 0.14552183820159703, 0.1468915632755846, 0.9874755339164349, 0.9812637573069084, 0.9815934343500473, 0.9885096565431187, 0.9860135295999466, 0.9850489745339434, 0.972662866040137, 0.9912489944912821, 0.988257383653504, 0.6513675780749572, 0.6897043932548619, 0.6756099046661214, 0.6869288680207595, 0.6637947884864348, 0.6708167951297463, 0.6717999532123676, 0.6656921902888826, 0.08783951140100821, 0.7618122836730215, 0.7525788687018471, 0.8096650369356575, 0.8225444006880877, 0.8250885235332863, 0.3487638337156358, 0.7529801546760911, 0.776780407019801, 0.7601563325543352, 0.4172176974822047, 0.40631765766806016, 0.4452694925967674, 0.41916177002687804, 0.3103743309994679, 0.13381394693956405, 0.516994880887439, 0.3925235978403835, 0.47363910256802, 0.38895403699619635, 0.388927279683683, 0.5037548042512685, 0.4459239014246129, 0.4880084044138423, 0.4974623177868822, 0.4954094798655476, 0.49765693649763654, 0.4189452962197815, 0.23441132915348006, 0.2873877386678305, 0.27673729547588233, 0.19977616428849632, 0.26809852039243687, 0.26790876804485186, 0.20066188462400447, 0.25610117693931655, 0.22178960009414117, 0.3971435242489916, 0.4658180878745374, 0.44634211482477926, 0.3480033783887816, 0.37478766125497787, 0.4107246765583549, 0.424739487098743, 0.41176763406517003, 0.4202148034764317, 0.21097783419768845, 0.12584093554718745, 0.07635823403942033, 0.11252116000768897, 0.12407368525931939, 0.08472596683744682, 0.06641875164067002, 0.13572829529992247, 0.14699550946292528, 0.262568375572546, 0.22296433175171704, 0.2623800937937264, 0.3290974148199004, 0.28668813959358197, 0.25076869552977166, 0.24130809354983163, 0.2441703203138209, 0.26840957156404033, 0.6822239406600833, 0.6407407721571565, 0.6645648789014487, 0.6535532003218285, 0.6459889792056732, 0.6791405606517231, 0.6599497417210496, 0.6841852044073629, 0.6486634953740997, 0.13982332194861424, 0.12804181535139592, 0.14387958375343046, 0.6043157910387889, 0.11776036038500026, 0.1474054736892253, 0.1315963611873311, 0.5530000431989748, 0.14611513487518535, 0.2127973393365623, 0.18722929428760615, 0.2615631700777984, 0.318194512615117, 0.17340987605774894, 0.22944785341624552, 0.25276545424748753, 0.19569024592185147, 0.2745970695944475, 0.38057598598244624, 0.4325935227463329, 0.4900860904854175, 0.563009187632219, 0.3540597022508183, 0.4640662581765771, 0.44403040082724354, 0.607563353210918, 0.5365805645719353, 0.28729442002826233, 0.31310465151324507, 0.3753091401192101, 0.41492496912726917, 0.4164219898969208, 0.28633663271642795, 0.3211393501105203, 0.4481471157638218, 0.38475977978282416, 0.21019478644607292, 0.21288036045393277, 0.1847547129651258, 0.20732690278945665, 0.2173011477948864, 0.18926725822486334, 0.20411565590287062, 0.22321996164218294, 0.20182662922997285, 0.21557970323548914, 0.23836641033045625, 0.6718715692349472, 0.23109699672065498, 0.18388004142363357, 0.20370610149981094, 0.6465727835072488, 0.21648140359170587, 0.5942251440537273, 0.2022275791535353, 0.8837056138816304, 0.1614669762447395, 0.8548631552199898, 0.8708399889418057, 0.8203073777426958, 0.15826303905609507, 0.16257557201633444, 0.8165912666365063, 0.20581275069878835, 0.7643166296165027, 0.20880617785428213, 0.1686160892216032, 0.7939826175222291, 0.7635147861813073, 0.20337098252573726, 0.21277100791481196, 0.20902635198081287, 0.18240414322058318, 0.21096383791193662, 0.2207409930411507, 0.1740538860881905, 0.197979773894299, 0.19223957496528943, 0.31993142418896514, 0.18362252389412947, 0.209305994707515, 0.09475947533126239, 0.09990442194476823, 0.07925431338283984, 0.13968908657211776, 0.13926898845107538, 0.08636554924474382, 0.12877957673257623, 0.09481577722451018, 0.0975066843121476]}, "mutation_prompt": null}
{"id": "dd2d2409-8d04-42d7-9350-b7fd91bf91b1", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Increased swarm size for better exploration\n        self.population_size = 25  # Increased population size\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Slightly reduced inertia for more adaptability\n        self.cognitive_constant = 1.9  # Enhanced exploration factor\n        self.social_constant = 1.2  # Reduced slightly for better convergence control\n        self.F = np.random.uniform(0.7, 1.2)  # Wider range for adaptive scale factor\n        self.CR = 0.9  # Adaptive crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.5 + 0.5 * np.cos(np.pi * evals / max_evals))  # Stochastic weight variation\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * np.random.uniform(0.5, 1.5) * (b - c), self.lower_bound, self.upper_bound)  # Improved mutation\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "DynamicAdaptiveHybridPSO_DE", "description": "Dynamic Adaptive Hybrid PSO-DE with stochastic weight variation and improved mutation strategy for enhanced convergence.", "configspace": "", "generation": 26, "fitness": 0.3857141339745347, "feedback": "The algorithm DynamicAdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8124716354782815, 0.8406854462824879, 0.8035309521881016, 0.8300059825206036, 0.8154126781041581, 0.834733854372567, 0.8351098486947095, 0.8281412005215549, 0.8403425559545465, 0.6742918828103097, 0.6590067384703934, 0.6295689869217043, 0.6687743957211363, 0.6639898919795311, 0.6790011062447279, 0.700846071777196, 0.6642049610754568, 0.6901765359551003, 0.5326416874517816, 0.5742944049945427, 0.14621819725250262, 0.1475219991178397, 0.5687906536792744, 0.582910211493191, 0.16662726189014554, 0.15360800724559054, 0.1356225822159326, 0.13781259985390537, 0.123308711287486, 0.11589948045278109, 0.13970736355946212, 0.13291412528363977, 0.1278435174308442, 0.15474205563978072, 0.13154432405827887, 0.1166423655737655, 0.976654929659454, 0.9824842449357022, 0.9774308646749685, 0.9766882710857363, 0.9869779808807302, 0.9697822288715393, 0.9858278745001178, 0.9854416487377103, 0.9831811102695023, 0.6421811281153501, 0.6673446289331606, 0.6097349753295488, 0.6847006631703858, 0.6684403512296445, 0.6696505242766898, 0.6745493559980311, 0.6382324198736831, 0.6866650487235848, 0.7589755143987822, 0.7582417978326406, 0.7708005359496345, 0.765298948109091, 0.7691139138306883, 0.7188544455643929, 0.7571924071985887, 0.798448913465392, 0.7508539638780158, 0.4253963946802378, 0.40297504492637903, 0.3162083448513694, 0.37622487206842525, 0.3591858937717086, 0.4116297390220366, 0.3815497096374769, 0.3914376947509748, 0.32910123381332046, 0.009984794072651293, 0.3539315662308645, 0.35424264070620104, 0.321130166754356, 0.41665315732082986, 0.2966381784515638, 0.34602575369503363, 0.43826206428720094, 0.4495405828153415, 0.09988087728123429, 0.170795341476364, 0.19045923133896414, 0.13107309501074904, 0.15886122882641307, 0.182140731578047, 0.176956802829641, 0.15380824024382345, 0.18528239198770724, 0.2896253442743695, 0.2742153417716141, 0.2676738265203811, 0.23146264228207558, 0.33666328082058006, 0.2937800105863293, 0.28858762064142307, 0.34932287320205313, 0.3113002118760514, 0.05771586103489912, 0.09434758266299792, 0.06073707040205789, 0.1716618657954263, 0.265780323170242, 0.09340590934976412, 0.10289220827967127, 0.1351564178362159, 0.13341822174195528, 0.2512669718224414, 0.24295209108864568, 0.28268613804319775, 0.26199311032669936, 0.00599528731782939, 0.24746826265042865, 0.2500835094313053, 0.21330356338290135, 0.1991371562188493, 0.6215312978424765, 0.6212808624065136, 0.6397576575067023, 0.6295567139213192, 0.6246120130481433, 0.6303110865996698, 0.6237890591253186, 0.632193635528761, 0.6459386294457005, 0.15041431461631305, 0.1269136852198144, 0.15301474018642525, 0.11926364745066398, 0.13612479195194316, 0.17365248917077192, 0.14479992686769327, 0.11163669462056647, 0.11275680885704698, 0.28275817750523824, 0.1869328529124884, 0.14769920132181646, 0.276165142155397, 0.197309209175756, 0.2866877124066105, 0.21056504186655722, 0.2579012084020893, 0.42443865796844016, 0.511991426570298, 0.45411013040738135, 0.4778596462032073, 0.47948128968658, 0.3900059275906288, 0.5191457198793514, 0.519195425567636, 0.45328152442689806, 0.47888572388790185, 0.3111925106672242, 0.26216593170175595, 0.32619143299081643, 0.2998251093885397, 0.29863759927024935, 0.31210594964881, 0.33754583156458606, 0.3278861975630173, 0.34813593262276443, 0.19181099332245455, 0.20862412035356315, 0.19396973298783338, 0.20383684230267107, 0.19889098013907314, 0.1927154563192356, 0.1949012870896185, 0.255734061931572, 0.22203216440054352, 0.2433591904576885, 0.19854440426287112, 0.6199178235622191, 0.693789108177189, 0.1940090837614874, 0.6459192667079406, 0.2041534861354687, 0.19892694266890676, 0.22714304397288732, 0.2016667858960135, 0.8572777547369752, 0.16997597812428322, 0.16371681452855757, 0.870820457594677, 0.1844962783814521, 0.20337985906945255, 0.8705808513949441, 0.15800897966361593, 0.6798100275193936, 0.16548533756994854, 0.211137448804817, 0.7920585697923103, 0.20650268684315065, 0.16822724552922685, 0.19841831764453044, 0.2123844089288507, 0.21114720757967054, 0.2036955027633629, 0.18695991169228576, 0.18710552214343845, 0.1927737687412917, 0.18338725076737306, 0.22048898450589327, 0.18896206242004931, 0.18297970062713742, 0.19549630437719556, 0.0815954197359764, 0.09038576317002012, 0.08890456679232395, 0.12092478701650322, 0.11697059857856129, 0.0891174654184792, 0.10603081394168623, 0.09353037503161665, 0.0812211368979322]}, "mutation_prompt": null}
{"id": "2bf85660-6124-440a-b59d-a9081ddd029c", "solution": "import numpy as np\n\nclass MultiStrategyPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.9  # Adaptive inertia for dynamic balance\n        self.cognitive_constant = 1.7  # Enhanced exploration\n        self.social_constant = 1.5  # Balanced convergence control\n        self.F = np.random.uniform(0.7, 1.2)  # Wider range for adaptive scale factor\n        self.CR = 0.9  # Reduced crossover probability for diverse solutions\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Stochastic resampling for enhanced exploration\n            if self.func_evals + self.population_size >= self.budget:\n                break\n            for i in range(self.population_size):\n                if np.random.rand() < 0.1:  # Introduce stochastic resampling\n                    trial_vector = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                else:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                    a, b, c = personal_best_positions[indices]\n                    mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                    crossover_mask = np.random.rand(self.dim) < self.CR\n                    trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n\n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "MultiStrategyPSO_DE", "description": "Multi-Strategy PSO-DE with adaptive parameters and stochastic resampling for enhanced robustness and convergence.", "configspace": "", "generation": 27, "fitness": 0.33785022184787, "feedback": "The algorithm MultiStrategyPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.6960949614729971, 0.7240194200784773, 0.743733649533181, 0.7128094613003098, 0.7513543691414435, 0.7588295944160532, 0.7385057559907373, 0.7300463381707112, 0.7417898723018004, 0.5490889362209397, 0.5506012006502952, 0.5563802723479327, 0.5482618052100098, 0.5531746768938559, 0.584952284929946, 0.5836930310483557, 0.5693788830652526, 0.5489255341171566, 0.4720632785102775, 0.4693388592107215, 0.12828698180902343, 0.4585555258457432, 0.33134555290394796, 0.14846487782866202, 0.42211054666681747, 0.14849677213542378, 0.3751307202186209, 0.14202916136715482, 0.1373014997456956, 0.11651703121086643, 0.11023337453267146, 0.14831559722131082, 0.12316931593628466, 0.13238476045739866, 0.12764001763638322, 0.13744256026804635, 0.9880177304199051, 0.9875134687260546, 0.98430889104879, 0.26853297363238293, 0.9890333208053407, 0.9768019169527759, 0.9745929050391948, 0.9923609111070272, 0.9875742729915894, 0.5233755204893853, 0.5873733504006617, 0.5498494753696685, 0.5446626895921325, 0.5633473758996485, 0.5477522711220695, 0.5027172589174567, 0.5862103465167599, 0.559867027502049, 0.63875654011299, 0.6692770227424533, 0.6672715172844288, 0.7091391715537794, 0.68210671721093, 0.7192023789769767, 0.6616682272080253, 0.622670814741263, 0.7093576374451198, 0.29496824710222536, 0.31131164192089245, 0.2484921213773864, 0.42616433059800163, 0.22627188592842717, 0.290722169719826, 0.27439781054972523, 0.2935011408448396, 0.2725813468990985, 0.2681474197879268, 0.2914184431994046, 0.2509458285991407, 0.26345520540928624, 0.29909313263931947, 0.30956632631104797, 0.320512774896335, 0.26078959626801346, 0.24936245023965298, 0.1094215376429658, 0.15881236558361977, 0.12478717702632125, 0.0, 0.18247718224058485, 0.13257631544852266, 0.08940117877198117, 0.11737746630914558, 0.17381808648343888, 0.21454919866033884, 0.30447138469264157, 0.2780269496552431, 0.19556378666032936, 0.2153302753192996, 0.259075496552878, 0.24568790124247897, 0.294440024200761, 0.2843670952059789, 0.04815213508982197, 0.14004084803043293, 0.14538397613348553, 0.0945286274248689, 0.11540408058234719, 0.07649876857610238, 0.1757657519044984, 0.048306213830693334, 0.17312118052117098, 0.23043795332409345, 0.1795607732098764, 0.1996997133090953, 0.1466163072712059, 0.20597211498513202, 0.1963698058510911, 0.1926726468738924, 0.1604518130029572, 0.16345009605343608, 0.5191597027888198, 0.5387669038100142, 0.5187589839600932, 0.5545466294731378, 0.5145264308303825, 0.5293456168395733, 0.5529640649117536, 0.5570321569096501, 0.538505546622543, 0.13047226293001346, 0.07533389611085606, 0.1319345823699255, 0.10986025656234122, 0.11990496191280764, 0.1422470427444832, 0.14621041969313808, 0.12720788720995857, 0.10676454781924127, 0.1764300864151539, 0.14300077986519977, 0.1581244263699626, 0.20808297749869664, 0.24554638738356338, 0.16620509907984038, 0.2209515460619942, 0.19441880358229524, 0.1796218770519783, 0.35927098113683853, 0.38096279866995564, 0.3094539168206486, 0.32051682510431023, 0.4323106171589347, 0.3321506807122254, 0.4729427682074362, 0.3810394867592366, 0.2724851003178197, 0.25243971722652736, 0.2785930599536083, 0.2721502858938434, 0.1873367384498773, 0.2813184248322341, 0.25790988663647774, 0.31303937794589, 0.19646330620266905, 0.30863501735893906, 0.17763966101415574, 0.20030084709911922, 0.185266783155277, 0.22635288806602416, 0.1837684662432938, 0.1917043434132354, 0.18800536480001562, 0.20727782482660073, 0.22481472278180625, 0.21452289893845478, 0.5112124012106345, 0.5380120203055586, 0.1997483650967512, 0.5812140440689777, 0.20279050463766812, 0.23068172845941048, 0.19645606058488596, 0.19264127289270405, 0.7186850775119591, 0.261915766616456, 0.6899954087088302, 0.19008855418167447, 0.7670306644579299, 0.18781596132949108, 0.16959992572276494, 0.17636374557820744, 0.1838785435574607, 0.6387042280142481, 0.673823936242335, 0.1613061263447504, 0.19386334135889682, 0.15907321868926338, 0.6000239585966036, 0.21231117138716538, 0.18610215005907882, 0.21291183226003496, 0.20267582725222932, 0.18204783448381745, 0.1970124511917729, 0.19703010913491803, 0.189989262358369, 0.18638593754671207, 0.21021207325726587, 0.18311476337015298, 0.21124874431373641, 0.08051277321649797, 0.08599825995533827, 0.08814024265189424, 0.07832210831913522, 0.07050897099088449, 0.10514806380521002, 0.09910845350317321, 0.0838911368513503, 0.08532791836619613]}, "mutation_prompt": null}
{"id": "fd450cdf-1df4-4ace-a1e4-7f6ca628b7a6", "solution": "import numpy as np\n\nclass MultiStrategyAdaptivePSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Slightly larger swarm for better diversity\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.9  # Higher inertia for initial exploration\n        self.cognitive_constant = 2.0  # Enhanced cognitive component for exploration\n        self.social_constant = 1.0  # Further reduced social influence for convergence control\n        self.F = np.random.uniform(0.5, 0.9)  # Broadened scale factor range for diversity\n        self.CR = 0.85  # Slightly reduced crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.5 + 0.5 * (1 - evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Multi-strategy Differential Evolution\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 4, replace=False)\n                a, b, c, d = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c + 0.5 * (d - a)), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "MultiStrategyAdaptivePSO_DE", "description": "Multi-strategy Adaptive PSO-DE with probabilistic exploration-exploitation balance and differential selection strategy for improved optimization.", "configspace": "", "generation": 28, "fitness": 0.3866567159411503, "feedback": "The algorithm MultiStrategyAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.27.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8530536212482098, 0.8596230982909554, 0.8428535514339424, 0.83521268472324, 0.8548980248135922, 0.8421076000150487, 0.84392260153188, 0.8320549649480562, 0.8616190737535696, 0.7075918087127688, 0.7272454856590096, 0.6936643873904529, 0.7188254651507096, 0.7368529304077536, 0.7109082917214913, 0.7180412437873342, 0.7381308901870998, 0.7022788249703834, 0.1328539456231339, 0.24275218890488648, 0.13808573974282667, 0.2039913465731531, 0.18545817837939982, 0.2923719409590183, 0.17868143630672406, 0.25576088058939983, 0.1279297084032438, 0.12701761186228488, 0.12144240010447649, 0.11065692857697451, 0.12490490607395932, 0.13798332376302003, 0.13438079090536326, 0.12858386132739708, 0.12321205488222553, 0.13670286831197953, 0.9861806096126586, 0.9863026045495641, 0.964475450265642, 0.9790751447879715, 0.9864654065636927, 0.9734194381885184, 0.9753453660640377, 0.9904344703273326, 0.9714925182098421, 0.5814896777551262, 0.5139932169056418, 0.5269071436479028, 0.46636069678832914, 0.5471053971851512, 0.5215061383307997, 0.5430200542190933, 0.48480310173267205, 0.49063218433408473, 0.7487519654476833, 0.7578826609719308, 0.7373466431766416, 0.7993113397456274, 0.8174084860669419, 0.2671408200975862, 0.7854518114095257, 0.8519830819129017, 0.802932641431701, 0.19578440628716176, 0.1914504548913425, 0.25744084804792666, 0.2048609585705965, 0.2045617917070599, 0.20311076989293797, 0.19020063514733943, 0.21527009015916543, 0.19774528032885308, 0.4040928188498416, 0.18296001741196133, 0.1946749104329688, 0.21413474959525558, 0.22670247799382393, 0.24145296676831063, 0.24051867196211618, 0.23632498257765122, 0.2140628672646646, 0.26873064824913784, 0.19272725454092243, 0.11895627973815504, 0.44052263542370473, 0.18472975946110415, 0.10218789380515991, 0.07967539095003262, 0.1206349391511814, 0.45338006002155096, 0.34081197481857217, 0.5776314620498648, 0.29370974482072265, 0.41126327036704, 0.25468689193449434, 0.20418258215967633, 0.5515976067346735, 0.581355482563166, 0.4872232241614114, 0.05891812410625785, 0.08572174120141207, 0.04557514764011228, 0.16966265843715023, 0.2001887581055093, 0.2490732658909145, 0.20687337774665893, 0.19200890679157345, 0.18152085149576536, 0.24741914152970468, 0.3580606835355289, 0.2704190988874394, 0.3183131961544474, 0.3405242210499235, 0.34260455218891805, 0.3154735391763325, 0.3627935295126784, 0.3460930583038594, 0.7234783515528757, 0.7486369466539362, 0.7563232201249982, 0.7212108679437637, 0.7694427615453074, 0.6234705925660227, 0.7169856370980273, 0.7612100779659712, 0.7305078943103966, 0.13508900298733406, 0.11068363990110175, 0.11698210541343246, 0.14705919581983995, 0.12145802390621796, 0.11896655541449286, 0.10604335418651922, 0.13110202262336335, 0.11661008196687295, 0.23445490698733507, 0.17312420270314965, 0.4081257674565011, 0.1700775823647882, 0.18229847965612356, 0.16206474912895208, 0.20943499105011043, 0.15764270606308306, 0.23249253512192003, 0.38786619255764365, 0.4403437018552099, 0.4412380916365283, 0.4323509866011306, 0.4540636652934925, 0.4382236181165641, 0.43339168100770087, 0.44780876186955243, 0.4958913023534993, 0.2888878825985317, 0.3314981385509598, 0.34484407504781345, 0.3119149383382813, 0.31827629924250056, 0.33326816902183765, 0.33082532758283667, 0.3806800609788116, 0.362012036890224, 0.19781792645238683, 0.21179923103055087, 0.20120085884626748, 0.1779001367045917, 0.2055823920475004, 0.2168964683902912, 0.20454925457801365, 0.1962298001063263, 0.1948277757824236, 0.4136640978427818, 0.22514686578504195, 0.3363336178867983, 0.2181303096905961, 0.21027844016237296, 0.3251189229689807, 0.34280628428181614, 0.19914763539820313, 0.428775538888598, 0.16668292900762027, 0.8535450854475491, 0.16517185780377586, 0.8282852037006158, 0.8480226952637033, 0.7057874808373155, 0.1550017321824434, 0.7805052392553227, 0.7035973824237429, 0.5903827466649894, 0.7373654522141952, 0.2120493690935955, 0.15457708638049805, 0.7105878355633133, 0.6387771336223318, 0.21268370956457405, 0.21253314035237303, 0.16092537972096377, 0.18926916104702973, 0.2340997845181243, 0.19612506139573882, 0.20354738998747446, 0.19300679666528597, 0.21033509402915396, 0.19926537288512625, 0.18636843216653376, 0.18727240967627612, 0.11115180427608395, 0.0852342936321171, 0.09551127040273355, 0.08523242529912145, 0.1033843459527819, 0.08675395784223605, 0.07529638924970528, 0.0808310513524555, 0.08464402455517861]}, "mutation_prompt": null}
{"id": "d98bd336-1a16-4987-8da6-615b0d9df065", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Adjusted for better exploration\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Slightly reduced to improve convergence speed\n        self.cognitive_constant = 1.9  # Increased for enhanced local search\n        self.social_constant = 1.2  # Reduced for stability in convergence\n        self.F = np.random.uniform(0.7, 0.9)  # Modified adaptive scale factor\n        self.CR = 0.9  # Adjusted crossover for maintaining diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals) + 0.1  # Added base component for minimal inertia\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedAdaptiveHybridPSO_DE", "description": "Enhanced Adaptive Hybrid PSO-DE with dynamic strategy adaptation for improved convergence and exploration balance.", "configspace": "", "generation": 29, "fitness": 0.37531348427548605, "feedback": "The algorithm EnhancedAdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.800204970487263, 0.7976765532803534, 0.7823914582581941, 0.7971120678073512, 0.8056229620247164, 0.8082796360360155, 0.7914545986219913, 0.8093701085478477, 0.806383877964207, 0.6376767847445034, 0.6368850701276345, 0.6405747979660951, 0.651812617491757, 0.6028380186198785, 0.6481462991109581, 0.6333773730123292, 0.6394260798483069, 0.6301127364727555, 0.16845548989682646, 0.1550910065761122, 0.16504897911680982, 0.43943362770352645, 0.16303756501176925, 0.15936572606119648, 0.13626901941949576, 0.4490967500666644, 0.1420082149179911, 0.13470263522961268, 0.16213244762187096, 0.12937337771167, 0.16445869364673105, 0.14737772181530784, 0.5216329966291048, 0.1402670051943502, 0.13514076624761606, 0.11446606995474162, 0.9840506675436043, 0.9807405675406248, 0.9754793644816924, 0.9813330604772066, 0.9845871320796384, 0.9827193741561073, 0.9879070118650991, 0.9846065222967635, 0.9837289337724737, 0.6305799843140151, 0.61789344065503, 0.6318464179422558, 0.6298465535668211, 0.565556207362512, 0.6025944404434446, 0.6071292631912892, 0.5976317987439961, 0.6401865903524953, 0.7335168324731679, 0.7316771198661836, 0.674762102775377, 0.7324988468254843, 0.7508802165862561, 0.7765357587563079, 0.7004252572358587, 0.6889582698874461, 0.7916296358785078, 0.28161049340104494, 0.3444536177719324, 0.41538796532440503, 0.40140792541292625, 0.3750549126706647, 0.3461408288062092, 0.3138403390001324, 0.32932260402417735, 0.38559942018993487, 0.3511831592690644, 0.3161164280583897, 0.31356648476659743, 0.26851059247669895, 0.38930232867109205, 0.35560730941480767, 0.30881812484861604, 0.32096864568130834, 0.37186954830956653, 0.12281293615718547, 0.19653577427042523, 0.1555211682740577, 0.13338060311232947, 0.16554376422790684, 0.12827695367306713, 0.16326385772860663, 0.16799112948679906, 0.1409929272488043, 0.33286919961737815, 0.3146638209593208, 0.29259754817465067, 0.3200673948400454, 0.3098235318295164, 0.29084925255864824, 0.32792224670519166, 0.3647945014129277, 0.33293795815533656, 0.18183766541473412, 0.07431080258922973, 0.09363878065673248, 0.11067442004161676, 0.14585208874604105, 0.07461234672377026, 0.09052368142126466, 0.08614416347626552, 0.07366153196527925, 0.2231571029094802, 0.21305033060003475, 0.2385748457483764, 0.24880975225430157, 0.23895928071617467, 0.22026792372791437, 0.242851430976875, 0.2113992738514997, 0.2564987210579136, 0.6023725932768067, 0.604371393401822, 0.595256190805936, 0.5949180587029539, 0.6248897643495321, 0.6419420942367084, 0.5784252586858196, 0.593384350581115, 0.6017339447935213, 0.15595693763477103, 0.12725408243448455, 0.11626201100616695, 0.10253890587765924, 0.10643502216202994, 0.11976504550060596, 0.09982514376490004, 0.12172488446374663, 0.13039121108967755, 0.17276621176838702, 0.14484883055464526, 0.16674497085792395, 0.19023148688719171, 0.3033754239349171, 0.14300043540019958, 0.1705798748881554, 0.24514239666636894, 0.21212898866694085, 0.49642311849238663, 0.3828353894527996, 0.5066778573517365, 0.6107237923013822, 0.4573869967736647, 0.3815132459434809, 0.5149109062369188, 0.3746836890223344, 0.5920965807382207, 0.32902864565436196, 0.29559902214827183, 0.2819812399245245, 0.2872564436012913, 0.34712829428477043, 0.34911763995815415, 0.3690000805325562, 0.3489962976178159, 0.35251464862535453, 0.19393907395698207, 0.21435568160734353, 0.2244839504386037, 0.19551676175336463, 0.21604206758307998, 0.18845254668558442, 0.22894352718396105, 0.195980337184253, 0.21766679395268562, 0.20533295146958497, 0.19431931562588167, 0.23085691853469403, 0.19587218617546487, 0.22782399722538893, 0.20788966219603489, 0.22073687717137247, 0.23108748898832387, 0.2241708315070966, 0.19757875470578878, 0.848032316531626, 0.8209028151511103, 0.7780802018971519, 0.8216777503483915, 0.81613529010937, 0.18239850335457575, 0.7091009108489313, 0.1579090510346186, 0.20473150993836275, 0.20937694426719844, 0.7360664418211608, 0.15490540766673622, 0.7403522427444343, 0.16743299517160104, 0.19851211154327875, 0.2087236304491087, 0.2118380678073538, 0.18526820965511548, 0.19818673122233044, 0.18355485432562524, 0.1865622394731994, 0.1969644378432639, 0.1998598782648694, 0.1895413794410118, 0.19637230479259193, 0.1953298044202093, 0.07936977490702579, 0.08831525915803251, 0.09975302412605036, 0.08130884139673089, 0.08356971746742181, 0.08919605419045185, 0.13400446441369163, 0.09509840916047418, 0.09365698984290849]}, "mutation_prompt": null}
{"id": "efa867e3-6438-41c8-a964-269933e6d2ec", "solution": "import numpy as np\n\nclass StochasticHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Slightly reduced for experimental balance\n        self.cognitive_constant = 1.9  # Further enhanced exploration\n        self.social_constant = 1.4  # Slightly increased for convergence control\n        self.F = np.random.uniform(0.7, 1.0)  # Extended randomized adaptive scale factor\n        self.CR = 0.9  # Reduced crossover probability for focused exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "StochasticHybridPSO_DE", "description": "Stochastic Hybrid PSO-DE with adaptive inertia and probabilistic parameter tuning for enhanced exploration and convergence.", "configspace": "", "generation": 30, "fitness": 0.37723108804589495, "feedback": "The algorithm StochasticHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8119312476295238, 0.8247605183461686, 0.7996809043109029, 0.8007180157473115, 0.8339670216946069, 0.8274591991165865, 0.8338162327678397, 0.8280570354635572, 0.8032060694018814, 0.6879780813365145, 0.6905928854631884, 0.6701035816036075, 0.6867002867013065, 0.6786921801673491, 0.6979504774674754, 0.6809627114943965, 0.6906367464648053, 0.6768004659080902, 0.16017338550777327, 0.13497178909268437, 0.13897715997846738, 0.1604160024455914, 0.16246827722490886, 0.17319622308110194, 0.13380371580610095, 0.1735744644720144, 0.1501234941575048, 0.49599197135976947, 0.1461777249998888, 0.1483700944189721, 0.1424766942869683, 0.12451049361046318, 0.12071976227480086, 0.15585859875064123, 0.13960944241916529, 0.14814223881573674, 0.9841521502773166, 0.9786389107730464, 0.975444102379015, 0.9805995848172645, 0.9863591616729201, 0.9844582291907573, 0.987992737314223, 0.9863466734080049, 0.9843886789820028, 0.6731979276187833, 0.6864358591561828, 0.6708672991758607, 0.6259816667236159, 0.6381169677836814, 0.6731634139062415, 0.6409581974700969, 0.6473011477821204, 0.6478244978053591, 0.7144504358944093, 0.8168755060006949, 0.7776932129796993, 0.814265917458161, 0.21268215258384848, 0.7828445872393999, 0.42509033487728975, 0.7680307319379691, 0.8313303031447353, 0.42127097741355923, 0.37734807617300326, 0.27147672685490265, 0.3141360022129416, 0.37357481126582737, 0.39994614029850817, 0.30888659182599787, 0.41680569947687196, 0.35104255343224033, 0.3417713778816891, 0.29909188722024804, 0.1310425660087018, 0.37123732539890275, 0.29566870765923936, 0.43230816414096584, 0.3442363079722712, 0.3007139388127894, 0.3412014947633545, 0.05299973774477562, 0.1621665554433961, 0.15487513243341489, 0.11248981011223436, 0.18201303701806693, 0.12311952776709845, 0.17163882639909478, 0.18046543405851556, 0.15502488064941355, 0.27075559014128336, 0.3079091556115896, 0.2911999393693576, 0.29357987338477964, 0.27394852717280804, 0.2584258686130987, 0.2942095955308788, 0.3258415671627485, 0.30312041018671554, 0.12940605188950138, 0.20342953738080238, 0.24830614483859204, 0.08490564045244153, 0.15876686606963208, 0.14723760838988742, 0.0677495264632596, 0.1316139416462293, 0.06772681557088622, 0.2594911005166135, 0.20044129909550612, 0.26957939994676483, 0.2104952803756297, 0.23060869691472885, 0.2407012155598648, 0.23112180860428622, 0.2150332193189476, 0.21240954111763144, 0.5980774355915217, 0.6447526132515085, 0.6113148727876876, 0.5979266014530458, 0.6330044231465004, 0.6604552457004766, 0.6014227103687297, 0.6015368158995171, 0.5882261979876244, 0.11550365718108391, 0.1372673153515721, 0.14335785312192817, 0.1278405408498946, 0.13074373663624594, 0.11475141450448534, 0.1363677253006994, 0.1528962128893121, 0.11716307535550041, 0.16903425209093492, 0.20041655301666017, 0.20707100313840066, 0.23659404838062947, 0.21694735049021352, 0.2494220175600984, 0.25694313313093853, 0.560355327670447, 0.26432150970853674, 0.46920100323255276, 0.41567449227917275, 0.4746190132327224, 0.42293849234830494, 0.4655287736166842, 0.5436903207576483, 0.472383559309539, 0.5545552742242967, 0.4737469992201855, 0.33909259018245963, 0.30089593090907363, 0.24457067366645724, 0.35840894811942403, 0.40718332094958454, 0.3265207001309175, 0.4152348307760687, 0.34795609751704093, 0.37450513368913463, 0.24905630141451307, 0.2293272073414121, 0.2427458002013988, 0.187348997338723, 0.20042850599134732, 0.1829213789060523, 0.1972970509384785, 0.18980974563083952, 0.19906445959358832, 0.22331640752188142, 0.6025848128823664, 0.225736902749201, 0.6443743493683078, 0.18643142949649905, 0.21982372182038123, 0.19473959229390359, 0.21201530866071094, 0.21189019873225035, 0.7759554529755233, 0.8710542383265842, 0.8910899830097416, 0.19647538489366856, 0.8687125211631932, 0.1712110354356664, 0.15736390996405314, 0.17692090506984548, 0.15611988538513433, 0.7583881399549879, 0.20419814754469578, 0.7057138604415231, 0.16656955428596065, 0.1678472632169623, 0.16741160200532468, 0.21244844326823575, 0.20354031653934423, 0.21137813196588207, 0.19220428830345637, 0.19424614039190957, 0.2087899695406915, 0.1904009217819228, 0.17815011218456256, 0.192463412477742, 0.1941996633553872, 0.18665239559953595, 0.22036091696129168, 0.10507392728572118, 0.08791101001419632, 0.087181373635982, 0.10065168257189294, 0.08823986439236253, 0.08942595053613278, 0.11763404497552532, 0.08752000030369111, 0.0754465066447989]}, "mutation_prompt": null}
{"id": "36af3232-4fa2-4ac7-9633-c0114beffa5e", "solution": "import numpy as np\n\nclass RobustPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.9  # Slightly higher for robust exploration\n        self.cognitive_constant = 1.5  # Balancing exploration\n        self.social_constant = 1.5  # Balanced social component\n        self.F = np.random.uniform(0.7, 1.0)  # Slightly wider adaptive scale factor\n        self.CR = 0.9  # Adequate crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.5 + 0.5 * np.cos(np.pi * evals / max_evals))  # Cosine-based dynamic inertia\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i] + np.random.normal(0, 0.1, self.dim)  # Stochastic perturbation\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "RobustPSO_DE", "description": "Robust PSO-DE with adaptive inertia and stochastic perturbation for enhanced convergence and exploration.", "configspace": "", "generation": 31, "fitness": 0.31453724595764615, "feedback": "The algorithm RobustPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.6742739493469093, 0.7052950980343157, 0.6577357474813634, 0.7026594721306623, 0.7008560732839695, 0.7137265231034624, 0.7018633230829989, 0.7085000539906783, 0.6968357957878729, 0.4657054422426862, 0.43109711862089206, 0.47486807167427947, 0.44061779567106374, 0.4852207214758203, 0.5050119332374177, 0.5019104574139275, 0.4708730163545384, 0.5341720637065129, 0.1221478778499071, 0.1376213700532739, 0.13557170596626344, 0.112521767660831, 0.150951900226719, 0.12641567012980504, 0.11671047876379892, 0.17208803908640513, 0.10631989153252941, 0.11260437951483049, 0.0992124221144357, 0.11551968303479221, 0.09601479845839656, 0.10615467814454116, 0.12308472044421992, 0.10691428836842443, 0.10652742872449505, 0.10787538982929312, 0.9877335882657102, 0.9845945221057206, 0.9820873741860746, 0.9941332531241259, 0.9851922768664524, 0.9817492561281982, 0.9778640199089975, 0.9931192278129826, 0.9847839026020899, 0.32206453031066684, 0.3943950316906255, 0.29578090375402766, 0.3133391740629754, 0.30900417428111204, 0.376399758783195, 0.3184484761808162, 0.3577950925506145, 0.3490072882232558, 0.5225324960898783, 0.5742214570653106, 0.7058958008907769, 0.7249557769275943, 0.6748776517578003, 0.5903067257581823, 0.6443944614682839, 0.5814918704037846, 0.6703076810084079, 0.2233460070189751, 0.25084722972818896, 0.3129832684561087, 0.2990998983142782, 0.2643034234687138, 0.27208209307175857, 0.22339366335680888, 0.26990690808729245, 0.2487169703896812, 0.12675104097063727, 0.23436391534679502, 0.2185836346136032, 0.206477484815349, 0.27843973990469284, 0.2557466602486055, 0.18793865914135022, 0.297628687186975, 0.25383957782094013, 0.17149084648318547, 0.20145336443700157, 0.18837774412834551, 0.19167911159650153, 0.20333420530910185, 0.2080754367341343, 0.19648538779764702, 0.17816767407283318, 0.2040724536128169, 0.3510205362944544, 0.3998277311424473, 0.3248903858002956, 0.3060918893098663, 0.33550743203749056, 0.30563661223715644, 0.28406434822807414, 0.35125330076964845, 0.3676897022479243, 0.07136900983711914, 0.08729272922015008, 0.052444071591533636, 0.06775456811537173, 0.08083235639620723, 0.08900746542418003, 0.08568938741196452, 0.11638860188584366, 0.11167188106674653, 0.18946752964579783, 0.21019981439532331, 0.18933060952413439, 0.21802122766239285, 0.23173704299244158, 0.23360301515246062, 0.19482658506982986, 0.21996669558395643, 0.05414755107175728, 0.4751172844242719, 0.5642372101713742, 0.588028117309491, 0.5801840566871412, 0.5842656620735316, 0.5437803802112442, 0.5271713989393955, 0.6090719636700321, 0.5544927608705483, 0.09790887048054298, 0.09941854243908532, 0.1018550655269328, 0.10598595421784573, 0.09451783943170344, 0.0993654765539852, 0.09677713584840963, 0.09486903433937299, 0.09661857769564652, 0.14864301890097864, 0.15515854466590862, 0.20238345785677125, 0.24481733496733116, 0.24434177597976703, 0.28431498151101886, 0.28300814474207925, 0.35460324555828704, 0.16990461468525753, 0.3088826106346455, 0.30408996779648456, 0.2891038819354962, 0.28388839158262735, 0.28707423212561434, 0.3024498763521698, 0.317778891859521, 0.3342065099385164, 0.29886010666327845, 0.2397100314620786, 0.23225529178472648, 0.2433462423597429, 0.26121450956319836, 0.23872175263633555, 0.24472076936047438, 0.2556377775570262, 0.22766347020410072, 0.22963168150489788, 0.19671216863455643, 0.20303124163569752, 0.19097764006009565, 0.1919316267057557, 0.17857906481056285, 0.18863625767311698, 0.21057732584787714, 0.2062253921017534, 0.18730631342007764, 0.209752001459946, 0.19162763437295083, 0.24558099842677183, 0.2249335200359457, 0.18139915110578486, 0.21333998317688063, 0.3169464470228883, 0.1837827493797779, 0.20538321841509855, 0.1781775683093294, 0.7989711501183572, 0.16273959680915318, 0.16551931571857093, 0.6932821056367682, 0.18303756689355333, 0.6485550178137787, 0.19043741412091209, 0.7821287296975883, 0.1662142854222357, 0.5997064083699425, 0.20883122092538542, 0.6026299636919201, 0.16283750965354227, 0.7171856374560359, 0.21203940274813216, 0.20943632094583386, 0.20654760875224765, 0.18070144547583256, 0.19509839857311395, 0.18288715672915612, 0.19381692657143434, 0.19512482019477906, 0.1765215853392259, 0.18573151566463264, 0.1904417105924312, 0.18947751052270956, 0.0889894878112194, 0.07991974907725885, 0.07949223093407332, 0.07433890480333871, 0.07527136229730225, 0.08412626585423932, 0.08326758030030268, 0.0789408452349466, 0.07154954345097853]}, "mutation_prompt": null}
{"id": "c75435d8-172f-4a7a-aa23-bc4d37a4c001", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Increased swarm size for better diversity\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Adjusted for more exploration in early stages\n        self.cognitive_constant = 2.0  # Enhanced cognitive component for individual search\n        self.social_constant = 1.2  # Balanced for group guidance\n        self.F = np.random.uniform(0.7, 1.2)  # Wider adaptive scale factor range\n        self.CR = 0.9  # Slightly reduced crossover probability for diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * 0.5 * (1 + np.cos(np.pi * evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedAdaptiveHybridPSO_DE", "description": "Enhanced Adaptive Hybrid PSO-DE with stochastic parameter tuning and dynamic neighborhood exploration for improved diversity and convergence.", "configspace": "", "generation": 32, "fitness": 0.38369707487058674, "feedback": "The algorithm EnhancedAdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8178279540235797, 0.796981610143434, 0.8117138824725443, 0.8033742442393198, 0.8252618374933629, 0.8209592323977184, 0.8219813359102823, 0.83500462282364, 0.8108556465634894, 0.6540668510378299, 0.6790758593397572, 0.6540207933825437, 0.6884225011532208, 0.643304989976002, 0.6938348105119606, 0.675444415263583, 0.6975770576615331, 0.6798417775847864, 0.4962893585060003, 0.5186070365934936, 0.16519713083742882, 0.3977627728079368, 0.1630931673625542, 0.15840815984431444, 0.1639983521965045, 0.43714882956612366, 0.5526296588863551, 0.1542935017583955, 0.16193030630107041, 0.15083034437078402, 0.14800666166437915, 0.15281426748380034, 0.1469849928419832, 0.32716974504049134, 0.15594479199501288, 0.14408065372177647, 0.9805602982505895, 0.9801630704267823, 0.9806045092516023, 0.9782161208972642, 0.9846815146984061, 0.9821690849996495, 0.9884922321563171, 0.9863465113779616, 0.9814996895595357, 0.6664190695038467, 0.5769746834989242, 0.648396896755856, 0.6305085657470215, 0.14884030022995998, 0.6278706651700294, 0.6424366907309138, 0.6109807678220833, 0.6569769648009612, 0.669591943834716, 0.7419056306778133, 0.7048604291129421, 0.7463613715945907, 0.7620132147670635, 0.8039748745459145, 0.7352534754677962, 0.716208636462806, 0.7587796238425881, 0.24769024811542306, 0.3297551929119257, 0.38739036677888594, 0.3321511482444285, 0.3408693797157685, 0.4158092797645243, 0.3484162333886477, 0.2757403247326653, 0.32785940360842425, 0.3111752816647708, 0.3391357004830242, 0.32922407099335504, 0.36102655021311425, 0.44346661457823844, 0.3285606597013452, 0.2958310024866547, 0.31618601640135635, 0.40718158953683226, 0.090868189567612, 0.08437921103868684, 0.13973772970304654, 0.10875452992431744, 0.08399343910178925, 0.07879746421167033, 0.12760240070753348, 0.0699339029201217, 0.09011720140962731, 0.20447858915526762, 0.2119580317459555, 0.2223562733166985, 0.19456558947621183, 0.2423025077683888, 0.2253668067193254, 0.24331865311893874, 0.283693955057186, 0.26471009472689067, 0.15176853066057772, 0.1082484297462033, 0.14200643365832288, 0.1421341411520758, 0.1431479624529598, 0.13688812117741966, 0.08092576399418216, 0.29394802065128056, 0.11911754530555685, 0.20050951952261242, 0.21043716125536105, 0.206351152843528, 0.19204472856792787, 0.24311280399902446, 0.26533525738361574, 0.21761406786499005, 0.24702955771345392, 0.2129470460618712, 0.5652127627190305, 0.6209109889983546, 0.5582753512886788, 0.590124216251235, 0.6098337493123276, 0.5949833958861328, 0.5811969550100526, 0.6362841015937071, 0.5867458214750156, 0.15413480825168868, 0.11822661979072169, 0.1269128118615458, 0.15887020021672638, 0.1311368755129816, 0.14079772153375725, 0.1225268663454715, 0.12245644277626944, 0.4814075004197256, 0.2066768719680513, 0.18980234216173442, 0.24229830683390896, 0.17448156496054612, 0.14803882862132667, 0.15345930240939853, 0.17618993665922467, 0.15581250622434162, 0.19247683446339348, 0.44257571400832263, 0.4380692919936675, 0.4465698941569798, 0.4330895535308492, 0.4343223470513783, 0.44010964803002606, 0.6062490462013146, 0.5291633725277237, 0.5407236346782447, 0.3034657698269916, 0.2746486213055058, 0.4183854778201612, 0.30069126299081983, 0.3290785497474059, 0.2981036666995114, 0.2973745037361437, 0.25452672218356154, 0.3455829742741081, 0.20816397409399146, 0.2223956578678674, 0.20773708886312026, 0.2191486286002059, 0.22386946170040667, 0.20626215855233643, 0.18817167102949173, 0.19692187187979715, 0.23654302347370382, 0.24152724693352734, 0.22066588144247523, 0.21076441298994553, 0.6084465655059786, 0.6448247797206696, 0.2500546309788789, 0.24432053265133769, 0.20174255986132594, 0.20988535112622353, 0.8288598196360313, 0.8536484850926296, 0.8252340197925898, 0.1987352605966738, 0.8827486341983916, 0.19344819405129943, 0.8212875524986742, 0.7989465280769684, 0.15953644715108362, 0.16726936137753268, 0.16681078611483613, 0.696686567976842, 0.16672087449333306, 0.6885361374970297, 0.6314760003806221, 0.20336356319849314, 0.20157422353110743, 0.21234124970200619, 0.18569845004301888, 0.1960696807165292, 0.18665755457930278, 0.21281862986976574, 0.2407514486358474, 0.19991486301250583, 0.19217501125007197, 0.1851531360245744, 0.2012089470142182, 0.09401558852358172, 0.09069163108538159, 0.11501577096829174, 0.07285490286901053, 0.11097399050683054, 0.0925201216082252, 0.11145687239690283, 0.07956800399388098, 0.0865547650627625]}, "mutation_prompt": null}
{"id": "81526c9e-2ebe-41af-9015-1b5f932bf00a", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adaptive inertia for dynamic balance\n        self.cognitive_constant = 1.9  # Enhanced exploration slightly\n        self.social_constant = 1.5  # Adjusted for convergence control\n        self.F = np.random.uniform(0.7, 1.0)  # Randomized adaptive scale factor\n        self.CR = 0.9  # Adjusted crossover probability for exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Stochastic adjustment of inertia weight\n        def stochastic_inertia(weight, evals, max_evals):\n            return weight * (1 - np.random.uniform(0.5, 1.0) * evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = stochastic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution with dynamic mutation\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c) + np.random.randn(self.dim) * 0.1, self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "DynamicMutationHybridPSO_DE", "description": "Dynamic Mutation Hybrid PSO-DE with probabilistic individual updates and stochastic adaptive inertia for robust exploration.", "configspace": "", "generation": 33, "fitness": 0.3340982772358477, "feedback": "The algorithm DynamicMutationHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.7772234307802566, 0.7929697705956058, 0.8139725193001959, 0.7845730282494541, 0.7892837767233777, 0.7902706787725956, 0.7772464403275927, 0.7960010786258644, 0.8010526041375351, 0.6154573792103972, 0.601897653156541, 0.6462004121926257, 0.5770332284051534, 0.6258965848671489, 0.5922986340391435, 0.6155573735105458, 0.6124791885639994, 0.6623638238912906, 0.5312604321876837, 0.43239996798123903, 0.16655448360359382, 0.14395775250603582, 0.13122436758271183, 0.15251887727266145, 0.15781634985653725, 0.519320746146122, 0.4377498179461017, 0.15130619607363638, 0.1453745521289146, 0.1391264083701722, 0.4002683390337639, 0.2802485545118292, 0.13634110796197907, 0.1204450144268363, 0.12228693311255467, 0.10696675198083794, 0.9848889726221596, 0.9816248938699226, 0.9771436267852287, 0.9874650158388251, 0.9892866327360862, 0.9755414493934462, 0.988229442425937, 0.9889256767566351, 0.9848304870851469, 0.5299742273831343, 0.5827243227039353, 0.5599601370561409, 0.5892774438782328, 0.5397401784350874, 0.5438107428773715, 0.5350717785168535, 0.5504710415758185, 0.5308356846844136, 0.6740436710894095, 0.6140263288419054, 0.3569934654139917, 0.6181776086400718, 0.6432646624556855, 0.7273791634992386, 0.6792942220125174, 0.3566168299613417, 0.5480943672143621, 0.17540781281845852, 0.1928476689870079, 0.1788831136535589, 0.17358540827991387, 0.1847671216192276, 0.18685581020064568, 0.18084603890892592, 0.16650414503765265, 0.17294158726633957, 0.19563692007518996, 0.19146293630852695, 0.21049875152152786, 0.20424692976034065, 0.21613225984344664, 0.16458909158982993, 0.1931939245011376, 0.21598794452583148, 0.19200599324301426, 0.026016122667115504, 0.062262773229130874, 0.04626943642769932, 0.0, 0.06628167325812429, 0.04081678181508963, 0.03569890235489581, 0.06683545485510822, 0.03903380481280294, 0.1100245043416469, 0.11165104772438628, 0.08145379474830317, 0.0923413225632852, 0.10475769763170961, 0.1119256984943715, 0.1405958696915648, 0.10133193623220826, 0.08075809321555316, 0.10206359653585528, 0.24277348807000187, 0.07281865481055627, 0.08944669011410389, 0.07578120201024108, 0.1284880653096414, 0.14574383996725715, 0.2790426396549549, 0.058206151664185746, 0.16185349946749117, 0.1108153794353327, 0.1840734292692412, 0.19447194759895858, 0.18560346894306068, 0.19083420590480205, 0.12098404022464404, 0.1377336562470548, 0.2648816742784543, 0.4802408424985739, 0.5779100737579135, 0.5190640108025211, 0.5009284756606943, 0.5096225792511992, 0.4767589478668396, 0.4782772143561479, 0.5180949278437047, 0.5010034646978967, 0.1490925502073751, 0.12448024376850975, 0.10594423822316734, 0.0980423750511854, 0.12710879688095034, 0.11924142744248689, 0.1599045715064954, 0.12068580370881332, 0.1453393063368278, 0.21133061579294476, 0.1418766822306714, 0.37564468170387655, 0.26911392094332665, 0.21740818631479975, 0.26130258340215917, 0.2138244529718566, 0.20572115261670865, 0.1942569547221723, 0.353440818564031, 0.35541367256120504, 0.30490261172976685, 0.32906817074185946, 0.3544554804811231, 0.3280535920610862, 0.4273088428195442, 0.3916881427079828, 0.37712143597842107, 0.275154578725227, 0.24977269984403938, 0.2299043553469996, 0.28001297740610775, 0.26396270922621257, 0.33142524443873034, 0.23389323995473066, 0.2440995151620453, 0.26733045304367087, 0.2149206970876164, 0.21823675912636775, 0.20108001753353266, 0.1976710393412764, 0.1909233106988073, 0.1867585962875632, 0.1955992148599356, 0.22105628511369946, 0.21536525150839314, 0.2123232311976725, 0.2209463916703679, 0.48349247889634495, 0.5872750755911887, 0.2285826806296174, 0.19521648139710346, 0.2309329475704217, 0.6373659153370609, 0.6028164610711155, 0.17054189935147623, 0.8217734545834041, 0.8535025328480386, 0.16452660092097993, 0.8264353809658178, 0.7724601571837688, 0.15842627933379716, 0.8380174515928238, 0.7690181499484412, 0.5797684620015431, 0.2089650239472105, 0.20898462132003448, 0.16538192011285846, 0.20202303301222957, 0.16902266377535358, 0.21322741720405947, 0.21383943025072827, 0.21334806570071152, 0.20210076087185203, 0.1910743075877257, 0.21176339686162615, 0.19844806999524756, 0.18212027611364034, 0.1915680942130431, 0.21064161021275163, 0.17793045308649258, 0.20307460047556447, 0.08555773039688452, 0.08827445591310312, 0.08952782189958652, 0.07209649861876555, 0.07837122538261299, 0.08593726510573796, 0.10065980507521999, 0.07847762968291805, 0.083850547631528]}, "mutation_prompt": null}
{"id": "1deecb57-011d-42f9-86a4-c31edb2bbcf8", "solution": "import numpy as np\n\nclass QuantumInspiredHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.7  # Adjusted for entanglement exploitation\n        self.social_constant = 1.4  # Enhanced for quantum influence\n        self.F = np.random.uniform(0.7, 0.9)  # Adjusted quantum scale factor\n        self.CR = 0.9  # Quantum-inspired crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Quantum-inspired dynamic adjustment of inertia weight\n        def quantum_inertia(weight, evals, max_evals):\n            return weight * (np.cos(np.pi * evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = quantum_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Quantum-inspired Differential Evolution\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "QuantumInspiredHybridPSO_DE", "description": "Quantum-Inspired Hybrid PSO-DE leveraging quantum superposition and entanglement for enhanced exploration and exploitation.", "configspace": "", "generation": 34, "fitness": 0.3995174739312202, "feedback": "The algorithm QuantumInspiredHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8379985410731879, 0.8368324274681809, 0.8337413977149811, 0.8277301004966131, 0.8310920230571825, 0.8343893847848556, 0.8238293695506439, 0.8351154912244431, 0.8187552427260292, 0.7097193386457108, 0.6854999054982542, 0.7030242371814428, 0.7067886643772497, 0.7054663935380032, 0.7054734445023905, 0.7118924000317539, 0.7284025985626597, 0.017258355754319887, 0.16791935346014797, 0.14498421911074133, 0.6284043653567404, 0.5720136127369309, 0.15110097324769012, 0.14450677501730402, 0.1538578401683386, 0.6623061344148824, 0.16662580913793557, 0.16128790824085903, 0.13651638876897798, 0.13647512910898263, 0.13510277736946597, 0.13369572404000996, 0.1700237255629964, 0.12920529901950484, 0.10054257319522653, 0.1683210866718533, 0.9879209937851495, 0.9886471617917977, 0.9780870552896966, 0.9885556088908496, 0.9872578195033426, 0.9849467817645761, 0.9799735141430708, 0.9925552180608657, 0.9849139287616412, 0.686269101153046, 0.7338909179102281, 0.6649294474562444, 0.5727620019986659, 0.6734885524314258, 0.672202975081355, 0.5913362117848127, 0.0880749129527989, 0.688020137596513, 0.7781040400848278, 0.7561467431180354, 0.7626114610790375, 0.79088132199376, 0.7675617962006178, 0.8147504241561856, 0.7936195227108286, 0.7817876938789882, 0.7912802582479201, 0.3243052625039682, 0.3000392234192153, 0.1893380450805774, 0.3081978194439574, 0.40551799742757977, 0.3603836186359165, 0.12569811661072783, 0.1874812736410365, 0.36731578177531243, 0.32767261109431967, 0.4077545286871451, 0.439616631346857, 0.3916681658449854, 0.4722488198099385, 0.5272017853524316, 0.5174263511778846, 0.41865471761656103, 0.4467733768047303, 0.20538793846261927, 0.2917034260308935, 0.2977322801452169, 0.2961442232622117, 0.2682379289608965, 0.0, 0.23163674444248494, 0.28189993917309153, 0.20635094810432086, 0.31018990527014556, 0.4676928027412678, 0.39700829790880987, 0.3981233949639674, 0.37982952659165825, 0.4135193599199659, 0.445733077986737, 0.428860196966556, 0.4229170586599398, 0.07372188562094684, 0.1228708924385381, 0.07680746296100882, 0.25698719290986527, 0.2315533595124606, 0.12387481455282956, 0.0646939797182462, 0.11479096876959394, 0.06699123089063685, 0.31485962757150365, 0.2651133975357045, 0.27041486567109074, 0.3008419852017613, 0.2874224097466953, 0.2952545275489461, 0.245972940596891, 0.2685504788094252, 0.24963552032447656, 0.6737594509773404, 0.6639519968729908, 0.6564435877109107, 0.6554130151763294, 0.6773402238070154, 0.6608547739329536, 0.6880249204325488, 0.7093969014809329, 0.684100513945884, 0.15277320162272223, 0.11246201019746116, 0.15703133746055975, 0.10467427550423924, 0.11682755552847934, 0.16708137320000183, 0.16030738675513623, 0.13464122130735923, 0.12944647523341135, 0.17596539150749957, 0.2399822432265265, 0.3978240364197584, 0.6352199614545815, 0.33855378103992273, 0.16385933668211583, 0.3881379224478889, 0.1465838872022992, 0.1725000420269458, 0.5016017070074468, 0.43044996608580444, 0.4383846609153015, 0.41080417679075765, 0.5259411894682993, 0.39747947141475526, 0.5615429972770185, 0.553771720422668, 0.542842115337474, 0.2504794018319513, 0.3630045754692889, 0.23347143937414816, 0.27517784852391725, 0.35878774785318646, 0.38737768575841824, 0.3996903310771177, 0.34866168720879454, 0.4225978286181725, 0.19988647961980155, 0.21912337408791227, 0.19140815574024594, 0.21138891151828443, 0.19957961849697192, 0.1959544086041246, 0.19450392321794574, 0.20162767550741112, 0.22840902749523306, 0.24241999683444493, 0.6503077479658278, 0.7202893390471906, 0.6770203081181816, 0.23594363916134575, 0.2048219943958619, 0.19422472121706746, 0.22793510107450488, 0.6737539100657385, 0.15308969659381277, 0.8482241890136313, 0.807437734216701, 0.17267736367305297, 0.828446727442469, 0.13602258532608869, 0.7761930862331842, 0.1770934396857825, 0.16467951977827766, 0.16042907477431367, 0.20514427810053038, 0.169120820874197, 0.15365829377031837, 0.7495970472900035, 0.1687370993072651, 0.19888122322464974, 0.19922305695767772, 0.21098983840137853, 0.18813652255479785, 0.2034877003624136, 0.2149201326888952, 0.2016286252910523, 0.1824108313666577, 0.2081952944844102, 0.17440275855823273, 0.18535454899098813, 0.19254815649949264, 0.09615373574024833, 0.09778281107028342, 0.09020453076228696, 0.07437096715654312, 0.10341439659988994, 0.08748174950455434, 0.11079314264114981, 0.09256162430737258, 0.09136673125722516]}, "mutation_prompt": null}
{"id": "41ebf282-e458-4caf-bd44-129a661edf42", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Dynamic inertia for improved exploration-exploitation balance\n        self.cognitive_constant = 1.8\n        self.social_constant = 1.3\n        self.F = np.random.uniform(0.8, 1.0)  # Chaotic map for scale factor\n        self.CR = 0.95\n        self.func_evals = 0\n\n    def chaotic_sequence(self, n, x0=0.7):\n        x = x0\n        sequence = []\n        for _ in range(n):\n            x = 4.0 * x * (1.0 - x)\n            sequence.append(x)\n        return np.array(sequence)\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        chaotic_weights = self.chaotic_sequence(self.budget)\n        \n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n        \n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget) * chaotic_weights[self.func_evals]\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                velocities[i] = np.clip(velocities[i], -0.5, 0.5)  # Speed constraint\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            \n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE leveraging chaotic maps for parameter tuning and speed-constraint mechanisms for improved convergence.", "configspace": "", "generation": 35, "fitness": 0.4098929118853046, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8900915701467682, 0.9021996789505065, 0.9043490588270402, 0.8967826826105288, 0.9197114479255423, 0.9075688075350749, 0.9183909076978365, 0.8984554257447205, 0.9013808198287816, 0.8060310176856034, 0.822857235361248, 0.8274207040684824, 0.8414346324343522, 0.8368764468574743, 0.8372372395496682, 0.828941162284421, 0.7972252599626418, 0.8322686994336935, 0.18751691831191875, 0.1315096226460697, 0.15894976377125025, 0.1851295737845272, 0.18515306300362455, 0.06954231689593093, 0.11177908084582722, 0.11617599918260912, 0.17719115327488466, 0.12798178656961223, 0.1219279626295704, 0.13955015705424412, 0.10275431568320603, 0.12983379796530203, 0.1091047935592836, 0.10913186775661288, 0.13155278893438704, 0.11377313372283004, 0.920934197723643, 0.9117989611022811, 0.9240907754827218, 0.9609758831239306, 0.9742505307249512, 0.8781653106940595, 0.9536481700575694, 0.9772019502765812, 0.929857912640676, 0.7733798155320015, 0.7473138900807818, 0.7373835229230643, 0.7654876439386351, 0.7674053008901576, 0.727279417567277, 0.760775879830307, 0.7362521460104403, 0.7544746361604306, 0.22378321477260033, 0.8602098393623228, 0.22486284728004957, 0.9275878198371595, 0.8895233322706548, 0.3761563567489351, 0.2333260547711713, 0.2322364100098584, 0.24343136354856643, 0.6096059236813565, 0.5490457012575014, 0.41955985686428043, 0.13418004795885174, 0.4728253967949674, 0.37457896876649033, 0.703331275492069, 0.5351922907048074, 0.5088973234585279, 0.5147804425793597, 0.17199051050594916, 0.5691334623420383, 0.5895061117229432, 0.1334859581119785, 0.6265826661806251, 0.5436214541108555, 0.1320804314196996, 0.3717574174095737, 0.32311809987530904, 0.24950257750247196, 0.4134200006126726, 0.3726357757035522, 0.33083795046593345, 0.34698539303598475, 0.34395477493242166, 0.3250316242960667, 0.3362755374873575, 0.37418842655589213, 0.49430708642452315, 0.4072492083969138, 0.38873983975172666, 0.4029849953692066, 0.4482978083217818, 0.4148604540599561, 0.5018843147291243, 0.36951635490527324, 0.09831491094707667, 0.1432736440372604, 0.37207758200011487, 0.23497278482136696, 0.20238747400312418, 0.19462269017942457, 0.18100600837345926, 0.3681668080158571, 0.2313602469662045, 0.30008002728716054, 0.4294254106562051, 0.3109186389035439, 0.35002086779323394, 0.34464019727576256, 0.39622723730703535, 0.20804939707909698, 0.2758579476296037, 0.301261103283059, 0.7556952835982678, 0.7546546449784994, 0.7401026058880499, 0.7506335259367984, 0.712842651576968, 0.7716533659989357, 0.7769436775048195, 0.7900999258865844, 0.782562593632725, 0.15004884918287842, 0.108473200524699, 0.09066106710070021, 0.0990106627823043, 0.12926657840992395, 0.1143560942994929, 0.15634458345545754, 0.1040514502150165, 0.10595579196622362, 0.2236461700457788, 0.190525722744734, 0.25298088992850454, 0.2169171087694729, 0.18196909607412082, 0.1737788237607456, 0.440066592128606, 0.1370300073067665, 0.2054253066697238, 0.2881375850521839, 0.47468145882119017, 0.27975195712048795, 0.4328932157823301, 0.6113490686559114, 0.29496244954962836, 0.4051595367541059, 0.5259757564440779, 0.3565843723758749, 0.27477388466497377, 0.5238982494385661, 0.2560991124383961, 0.32412429451070934, 0.3328458144835701, 0.24902059250306463, 0.23568223852524395, 0.1850612136544999, 0.21276142528687292, 0.20203604932448616, 0.24365479689201552, 0.22071686039741367, 0.22285502527675005, 0.21921496017826314, 0.215725879463755, 0.22929787466744533, 0.24505944339051244, 0.2812191050664069, 0.21024867573888006, 0.17682494665348225, 0.18055050935879913, 0.1937668792003343, 0.18083499870568198, 0.19104207586605704, 0.20566576368753775, 0.19858903002442296, 0.18342600860626912, 0.8142147444925727, 0.9196837627957042, 0.18710569031949598, 0.9142544830584276, 0.18726832388785475, 0.14591142266116874, 0.15405863501672534, 0.8379207364878851, 0.8791521138898566, 0.8732433922344351, 0.8935014502901177, 0.16710178529187691, 0.15524476448338886, 0.16676848062729555, 0.20981804660553116, 0.207445864685047, 0.8118578581139148, 0.21066584322058157, 0.1833549735636616, 0.19891620852427427, 0.17652418830621608, 0.19644641133394303, 0.19288982326179593, 0.21246098369915534, 0.18843940701892925, 0.19827551209461702, 0.20817683384579133, 0.11974688442294013, 0.0918715462080163, 0.09861930824345488, 0.1398875055768114, 0.11912442748978114, 0.08573536205548393, 0.09682793909459675, 0.09457142268085295, 0.08341293851304055]}, "mutation_prompt": null}
{"id": "50ed1251-8011-40eb-8fef-cf8796027b00", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Slightly reduced inertia for finer control\n        self.cognitive_constant = 1.9  # Slight increase for better exploration\n        self.social_constant = 1.4  # Balanced for stable convergence\n        self.F = np.random.uniform(0.7, 1.2)  # Expanded range for adaptive mutation\n        self.CR = 0.9  # Diversified crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Adaptive inertia weight function\n        def adaptive_inertia(weight, evals, max_evals):\n            return weight * (0.5 + 0.5 * np.cos(np.pi * evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = adaptive_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with adaptive mutation strategies and inertia tuning for improved convergence.", "configspace": "", "generation": 36, "fitness": 0.3956288222655482, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.26.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8005844074181174, 0.8150093460376833, 0.8247920858410691, 0.835198058328858, 0.8269542513431523, 0.8411582953615994, 0.8345602210916431, 0.8271736564046103, 0.8422090341483757, 0.6861005666655124, 0.7125608622261157, 0.7237615035991062, 0.6421191595890078, 0.6741448257575117, 0.7043471331453497, 0.7206338597413451, 0.7077158849948562, 0.7106444759084249, 0.5870529043749108, 0.15249769798127222, 0.16778507372247553, 0.5307415334367847, 0.16402531002671839, 0.5804713419804073, 0.6230464414546812, 0.16303700416892608, 0.5546684364630261, 0.13288062448751536, 0.16029383761724625, 0.15176184679359572, 0.1418101291382341, 0.16290004506137612, 0.1488801484151041, 0.47138751529593725, 0.1628096991108947, 0.11122505221567158, 0.9875240294814653, 0.9886006957582925, 0.9834385614859383, 0.9884858361415312, 0.9890469943131515, 0.9861579700897455, 0.9783119566976575, 0.9912853821161765, 0.9857386030803641, 0.6542479485379987, 0.6786628114053032, 0.6630344618854759, 0.6798157308866198, 0.6817637703246204, 0.6399465906811015, 0.5911173646216819, 0.6779827014991033, 0.6885390650120322, 0.35362223721561836, 0.8062130845668648, 0.7961990898223933, 0.7744612646155007, 0.752253110541537, 0.7780704069774197, 0.6927170959713688, 0.8030049056571753, 0.6649487614202307, 0.3541078727276906, 0.4221719111012452, 0.3642306092386397, 0.3491251344377543, 0.46499677686075025, 0.41568057066767505, 0.3604389077776594, 0.4469775030911963, 0.4058318083429695, 0.31966177709749677, 0.3228439796243129, 0.38413614997657264, 0.507885407677757, 0.4754157040353023, 0.4999678573109577, 0.34542611677606727, 0.37850234820926487, 0.45471480812324494, 0.0, 0.1388707262264106, 0.19371799500809406, 0.17360565131903183, 0.16978012583237856, 0.18160513563559, 0.1644564031127096, 0.18360271340266954, 0.11761088013943666, 0.2615142142653831, 0.31054260148982626, 0.27044465787683425, 0.3008351396994603, 0.2463437883405274, 0.29933958075058176, 0.24449011459043912, 0.2547392146516131, 0.2759788076618719, 0.032387656081474425, 0.049136517093119836, 0.027403674203670514, 0.10119770730040312, 0.10046105329563049, 0.18527443568869906, 0.13448576304566684, 0.15088196548515276, 0.06992751742634806, 0.2004441945550356, 0.2534911484592187, 0.2754843822811668, 0.25316851386935935, 0.2820740365395241, 0.19787694341813822, 0.08008228827956354, 0.27276264146947193, 0.24920219630682328, 0.5956653690144583, 0.5880943815306302, 0.6126829048787094, 0.63441417428535, 0.6227631407926046, 0.6194628231117119, 0.6117346962929935, 0.6081277250764937, 0.6306370913845477, 0.12040124497499893, 0.13925711610548752, 0.07036997512403154, 0.12075702116775233, 0.5700433821779013, 0.14871660412625676, 0.11168471885231357, 0.10986668111760811, 0.12027692436240045, 0.2118450966797082, 0.35720142313651393, 0.19019881035119446, 0.2152903211030055, 0.16029720748205656, 0.20333230395083313, 0.1763907016435342, 0.3359580404865923, 0.24607473816841452, 0.2985538559082729, 0.3672775535991938, 0.3613512126880247, 0.5466121507698529, 0.4703781344113862, 0.4027982149454149, 0.4434580598712595, 0.5277372035765204, 0.5266345566349775, 0.2900362098508146, 0.3395132068364649, 0.34869451641993665, 0.3204837439691559, 0.2578574546503616, 0.327244848672974, 0.39249651241195904, 0.4710659613960878, 0.26650279145405853, 0.2500609321429269, 0.2091232835218957, 0.21505413672371432, 0.21108824754754207, 0.23223105210214035, 0.2063819422806239, 0.2167033461648067, 0.216769802201491, 0.2003819166176074, 0.23474459935226355, 0.23483188122318777, 0.20431268627090415, 0.21456748412104154, 0.23192281418169858, 0.6320872029961202, 0.22443166788781987, 0.18209914601776778, 0.20346388670495463, 0.2009185715133558, 0.8828330190669945, 0.8561852685210241, 0.8690708469540201, 0.8766449637862747, 0.1961101753063571, 0.15325703319431339, 0.17775902361881568, 0.16448105101684485, 0.7259273548379712, 0.16778012887124738, 0.16916924261836375, 0.7080148226059683, 0.7656283472827894, 0.6706615456890146, 0.1990241249975364, 0.19506599080236575, 0.2115935482027902, 0.18292318641408567, 0.20605122781371332, 0.1933470873537102, 0.2360919504460266, 0.2096064841632589, 0.18796172167269964, 0.21482140174397157, 0.17976539798482605, 0.17920939991463825, 0.08982278612613648, 0.09481861492576737, 0.0912810716062521, 0.11144367243076136, 0.15170740694992635, 0.09856772992870955, 0.11725495179118917, 0.09416773868016792, 0.08889355899183848]}, "mutation_prompt": null}
{"id": "fe8b6d7c-c3c4-4960-bd43-cc7946a6e0e6", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.8\n        self.social_constant = 1.3\n        self.F = np.random.uniform(0.8, 1.0)\n        self.CR = 0.95\n        self.func_evals = 0\n        self.quantum_prob = 0.05  # Small probability for quantum tunneling\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.quantum_prob:\n                    positions[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "QuantumInspiredPSO_DE", "description": "Quantum-Inspired Hybrid PSO-DE using stochastic tunneling and diversity preservation for enhanced global search.", "configspace": "", "generation": 37, "fitness": 0.3652683315696539, "feedback": "The algorithm QuantumInspiredPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.24.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.7529284993170551, 0.7329383731486727, 0.7260422838951589, 0.7299979900207938, 0.7919943920098828, 0.7362056484184316, 0.7638906421635884, 0.7868145250341074, 0.7772054950687015, 0.49428692222396853, 0.5444374117445354, 0.5164449230635966, 0.5591852986876558, 0.5309029890895962, 0.5702427963533918, 0.556874548199966, 0.5192820156239992, 0.5224674649207771, 0.33909030635525483, 0.3038384409500503, 0.4675796361528305, 0.15249111703150886, 0.13787405149347975, 0.15487076013592815, 0.1517301041483603, 0.12982044603595422, 0.13510451191452155, 0.12708809065560944, 0.1308092603072426, 0.1280482238570395, 0.15936839866652952, 0.11070964107550973, 0.121355446281868, 0.14785254180355112, 0.16886679975457797, 0.14824873396608895, 0.9887060050245561, 0.9856759668263405, 0.9711775120800599, 0.9593067549683773, 0.9912687689743505, 0.9679399115043603, 0.9878888149815241, 0.9886202689240431, 0.9828416584747053, 0.5456092168060366, 0.4825770734975684, 0.5256230233393506, 0.5436933893959387, 0.5034997629093406, 0.5385360381147872, 0.5335192974855127, 0.46464381571330815, 0.5113792843708656, 0.7255388628818021, 0.7152217427880254, 0.6265573314218097, 0.7391151183747564, 0.16163579377648496, 0.7623682230795251, 0.7223939237101284, 0.6878459866789414, 0.7335309120475701, 0.38498239668629464, 0.3546182446255519, 0.38996988908551955, 0.3052272780536127, 0.3475323970479498, 0.3028989193249886, 0.36423111520672813, 0.42133686748495247, 0.38914124731708943, 0.3562749880373083, 0.35430496335476525, 0.3474228043235267, 0.40799480978270397, 0.3058448154731074, 0.408919760791295, 0.3734099335385498, 0.39774730897190536, 0.36409498810034313, 0.24771912305829114, 0.07906127947217778, 0.194089916315214, 0.23762344839932525, 0.2995104757925864, 0.24520117254014973, 0.2652433849568432, 0.20273953724641958, 0.214725960654514, 0.4200694918250648, 0.3780245959877364, 0.3436464521627789, 0.3460431470586013, 0.3778462825223279, 0.3129611326839228, 0.3327523985758932, 0.3957106604953827, 0.410018436060537, 0.1329057992690429, 0.07069614991942796, 0.1128975792576663, 0.1344561022261178, 0.18975158027689376, 0.15960264047251216, 0.12052259351463257, 0.16240424411484022, 0.15035233010706217, 0.21487889772248914, 0.2084621368138725, 0.2126989205361347, 0.23143007873626187, 0.22713492854882666, 0.28629610253264104, 0.08033849890016775, 0.25676147311103514, 0.25287485791868125, 0.5908162192509537, 0.5987175743913571, 0.5829752600837885, 0.6060482205378644, 0.6145480828587486, 0.5935869159356801, 0.5726166913440006, 0.5911488442493762, 0.5978405325962594, 0.14530196990178157, 0.2999790234905271, 0.12353458868198364, 0.10592836436477138, 0.11489487629055728, 0.25910881645469086, 0.13330022685569942, 0.11157446541798566, 0.10995289110116213, 0.24718888439880615, 0.15716108869373524, 0.21746492721836153, 0.280554819861197, 0.16313426179385393, 0.144654851160816, 0.2512935954565322, 0.3571647026173884, 0.25123424072117984, 0.42900172930203284, 0.4047895131218169, 0.3587338275758195, 0.4334221832199562, 0.33126565197337476, 0.4045245272017246, 0.4061528788999561, 0.4793395173736028, 0.417848926320178, 0.29818638873049963, 0.312880232347582, 0.2934836563861257, 0.25776729269769005, 0.3273957856172657, 0.24678513335205365, 0.3395906003424505, 0.28379797730664236, 0.3228340436774769, 0.25018476159612857, 0.21959977970149547, 0.1827706214852829, 0.22303741746206862, 0.20490860695916546, 0.2028269353913773, 0.18741220563018723, 0.25160557749567036, 0.21914101934531027, 0.21971422596385448, 0.20514541458310576, 0.19059912168654125, 0.22208446105303503, 0.6043346267656979, 0.38754747755080154, 0.1964129640070632, 0.22243328077549207, 0.20482546761840803, 0.7767652310591278, 0.7905085506059032, 0.8209059284562322, 0.7728536008206188, 0.18074706594435597, 0.7254921433190541, 0.15858749996061672, 0.5545228904887846, 0.788392497959925, 0.3499881213265972, 0.20687693341442215, 0.2090277433424773, 0.2056969033340601, 0.19029687035345855, 0.20101043702000732, 0.1985002888581845, 0.20741357048772702, 0.20092602730515174, 0.1929596618562549, 0.20113479418072588, 0.2505802470161407, 0.17588167425621581, 0.19052799849960345, 0.18185964887994466, 0.19207517730228663, 0.17717426948314752, 0.17413483836975718, 0.0816746392574047, 0.08685481073259615, 0.08234328631106147, 0.08656519369387572, 0.07615537474553224, 0.09288195139298405, 0.12074311307820518, 0.09013555366455817, 0.08464859131012559]}, "mutation_prompt": null}
{"id": "4695b211-b610-42c8-883e-f9f17d363d41", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Slightly increased swarm size for better diversity\n        self.population_size = 25  # Increased population for better exploration\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Reduced inertia for more rapid convergence\n        self.cognitive_constant = 2.0  # Increased cognitive coefficient for personal exploration\n        self.social_constant = 1.4  # Slightly increased social influence\n        self.F = np.random.uniform(0.5, 0.9)  # Wider range for adaptive scale factor\n        self.CR = 0.9  # Reduced crossover probability for controlled exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1 - evals / max_evals)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE using adaptive parameter tuning and elite selection for improved performance.", "configspace": "", "generation": 38, "fitness": 0.4104455965510323, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.7921744462571191, 0.8249382691644591, 0.8162404977918414, 0.8294041758986435, 0.8369665536246531, 0.8415116214683496, 0.8216613077406173, 0.831188513567252, 0.8284227271993277, 0.6799041971181643, 0.6880336200840078, 0.689681239089025, 0.6739434434032914, 0.7142716476047926, 0.6985300729126006, 0.6736542695500254, 0.6728463150308661, 0.6846376904303073, 0.5801322026777438, 0.5803938649961078, 0.43975720381866035, 0.14240506267012043, 0.5772254897911501, 0.1644861925760508, 0.1493583898161378, 0.5969952808698793, 0.12794964697007816, 0.16751270215723946, 0.1574057003010193, 0.12345615301632185, 0.155440204804005, 0.1224428960349756, 0.13449799453096511, 0.12632430591559218, 0.13046722874248828, 0.14704928053173483, 0.9806028548977298, 0.9817210310149219, 0.9730141074740072, 0.9852688445316017, 0.9858645700604424, 0.9843280964873959, 0.9877802952197853, 0.9857024030352179, 0.9856032617269381, 0.6683957140984513, 0.668381745706726, 0.6596345328986006, 0.6726996049011886, 0.6439082194355968, 0.6422250827186049, 0.6554077727658387, 0.6441675938976132, 0.6582685321339405, 0.7093498557087133, 0.8234912225568334, 0.7847629969005484, 0.8103881094816625, 0.7697165181090878, 0.8005841784007907, 0.8308756770500452, 0.7880254218603585, 0.8046369002306699, 0.34680437525319263, 0.33038265561938984, 0.35464240929301805, 0.12451067713231967, 0.3017710129632978, 0.3951316112315256, 0.3328326477913107, 0.4187929335477072, 0.33441301911376964, 0.4701216479594412, 0.35328258502062104, 0.27782487293791025, 0.416530600914659, 0.3379248366955834, 0.5429465696659255, 0.38024721288294827, 0.3246505735322719, 0.3381571945630084, 0.2674870979872498, 0.30129430766726906, 0.2937415970870214, 0.20336962232676936, 0.33179418367527846, 0.16949543961523628, 0.28865900749981754, 0.3387928695996276, 0.2599543037190458, 0.39863344024878566, 0.44320892512369814, 0.40810839188337666, 0.3621273329993382, 0.39920560349982526, 0.3851121118455402, 0.40245049139606404, 0.42600378425984786, 0.45511424159874225, 0.05389883325575484, 0.12255014511103945, 0.04604525468218412, 0.10751482157813752, 0.37283794185497443, 0.2782118541361127, 0.1298684421060985, 0.16944538909871298, 0.10792340884146034, 0.2313002990193942, 0.27620865668643235, 0.23174247531516756, 0.3181478041646906, 0.2826721576710446, 0.29170524180759316, 0.24049765122090205, 0.2584619418777805, 0.2689882010154484, 0.6900181917508033, 0.6976666788922001, 0.6836459861358605, 0.6887889074167495, 0.659628274410385, 0.7212727679781075, 0.637349741754599, 0.6863232874578118, 0.6907042396166629, 0.14738741713341674, 0.11757850015743221, 0.12656869284150218, 0.1618453599891907, 0.10400909015991677, 0.13844792872628642, 0.12660850279291813, 0.13843978366481857, 0.10719894786266393, 0.18124236269021798, 0.2530057915396009, 0.16582911709590298, 0.20111027481597288, 0.12989239148416787, 0.21915490574565355, 0.14829087088268822, 0.1502344582809888, 0.31917230856629975, 0.46489037881218487, 0.46077329026653546, 0.6097495451805894, 0.4731190651262954, 0.5133065606792014, 0.42288713937176503, 0.5248933009686335, 0.6070960332785642, 0.48032210369375616, 0.335692677934302, 0.35499254024713134, 0.2827538756797999, 0.3466893448642854, 0.3549987600156228, 0.35971727074650184, 0.35854331851744303, 0.3685888852083187, 0.35047129422280954, 0.25196517753072345, 0.20002570720173685, 0.1993442994923963, 0.22359842945216357, 0.21982091358679123, 0.2179670350916043, 0.20432171755988293, 0.25087400301466245, 0.19516666880356903, 0.22123891898425596, 0.20183920626291196, 0.2159947585671793, 0.20831056875490472, 0.6452997211009153, 0.5293064677294594, 0.2143654705075959, 0.24267881725083462, 0.23589343646838856, 0.16443514131612724, 0.88438553714371, 0.8479446313781112, 0.17597968253116192, 0.8301756026428617, 0.8474719457934503, 0.16795048796185852, 0.8524304958213929, 0.7772911595705617, 0.7116878479799171, 0.1680157124069247, 0.20951731699512244, 0.7403017159274609, 0.16820502909846924, 0.20846741161966653, 0.1983664986890893, 0.1981885911166057, 0.12643222631819662, 0.17987608756477713, 0.20339416476541616, 0.18757737064253155, 0.1872300633895556, 0.19674026263406164, 0.19335102658144765, 0.18037622668314723, 0.1918424315102928, 0.20586456417373056, 0.07135994955051772, 0.08948874971410681, 0.08158756292355196, 0.08390510631012915, 0.08634204263366518, 0.09143860547335914, 0.12699305803610406, 0.08609399076224311, 0.08697281629483766]}, "mutation_prompt": null}
{"id": "ba0cdb16-07e1-4899-9b33-7843ac838831", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.8  # Slightly increased inertia for better global exploration\n        self.cognitive_constant = 1.9  # Enhanced cognitive exploration\n        self.social_constant = 1.2  # Further reduced for stability\n        self.F = np.random.uniform(0.7, 1.2)  # Broader adaptive scale factor range\n        self.CR = 0.9  # Reduced crossover probability to balance exploration and exploitation\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight - 0.5 * (evals / max_evals)  # More pronounced reduction\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with adaptive parameter tuning and diversity preservation for improved convergence.", "configspace": "", "generation": 39, "fitness": 0.3517197615345502, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.7295045657536394, 0.7366536761267402, 0.7560107592206629, 0.7527167724230728, 0.7852434939757849, 0.7637601311083102, 0.7411426088604102, 0.7733186211122238, 0.7641040737587409, 0.53393161110295, 0.578001560657547, 0.5763101435469196, 0.5545352559272776, 0.5605871372881223, 0.571151953555961, 0.5622366816502224, 0.5981269360758122, 0.5870117368510392, 0.43089498106171964, 0.145277120143815, 0.46466779947464454, 0.41893272248517255, 0.14917855316424178, 0.28224945411435076, 0.32832917922978444, 0.5437094717128486, 0.14842596356586668, 0.3244887688497623, 0.15625997666754043, 0.13955652211092384, 0.14600599622860244, 0.13602700162121473, 0.14663647646410372, 0.12351692384892465, 0.1324979090679308, 0.12869332610497042, 0.9892682455574714, 0.9806309879265231, 0.9816408382618662, 0.9846420350954654, 0.9792742051005426, 0.9753268988009758, 0.9873218819395821, 0.9917779626786725, 0.9803547496781838, 0.526838047718879, 0.5127801944204881, 0.059529168217781425, 0.5031480259967991, 0.53016783969448, 0.5508186923569816, 0.49656678497101814, 0.5679911312360073, 0.5469655331306129, 0.7627434933969262, 0.6482370856561622, 0.7012760610836418, 0.6657401516318548, 0.6983165255127084, 0.1906039704688255, 0.7722700068265106, 0.7341139755275469, 0.6784261130016478, 0.3023222515374908, 0.37066525613710655, 0.24455167908139241, 0.2981734999311295, 0.30698274443659146, 0.3484657100975389, 0.3056325871933441, 0.29186877015339985, 0.3088510407952141, 0.009784587095706954, 0.32088379230590136, 0.3161131225889414, 0.2985279973551892, 0.31069050286543576, 0.2744895166809329, 0.3083250068126805, 0.3223747976395003, 0.25038285372399993, 0.08426187273172558, 0.21526857403775634, 0.13303741814909842, 0.1499498846453987, 0.19771005522962748, 0.0003047551301675888, 0.16776596999155535, 0.1564100646628842, 0.14812837847367044, 0.27620483649416727, 0.22770635911479675, 0.2502575016823857, 0.28473549124778974, 0.2878871599890803, 0.33079608881630307, 0.2530473110107958, 0.33228034044749877, 0.29093034566193954, 0.02692006637717992, 0.0830510573711355, 0.056673636217739465, 0.0838292259024438, 0.09538254983946048, 0.06468633036509897, 0.06902608350694861, 0.12080665956991765, 0.037506246174521585, 0.1597363385850349, 0.18069033982931693, 0.18186846625793318, 0.21239239629327078, 0.20196349331977792, 0.20608064427310213, 0.17811565918659522, 0.19584040289547844, 0.04737798540957394, 0.5264968462224247, 0.569681579461358, 0.5920418536880875, 0.5238067194825905, 0.5763838236104964, 0.5876324406950441, 0.5706970200697326, 0.5949018477385937, 0.5622007493505451, 0.3699264443124748, 0.13486600577188168, 0.10179300321158258, 0.12946216530408006, 0.10820360257829653, 0.13338759354627472, 0.1171346225785661, 0.11336704910530371, 0.10403606085726702, 0.13501663659167285, 0.21206336111332835, 0.18163773711552844, 0.2013370826597558, 0.1546097357673729, 0.24787940760786875, 0.15975933224204453, 0.28133756135068566, 0.20627051505931604, 0.4216132118167605, 0.40079604162836424, 0.4368961350945254, 0.38763406999429906, 0.4095527882181178, 0.4128966495678619, 0.36453233724824663, 0.41362115735045735, 0.44732208189539957, 0.27854115958300885, 0.3282213036922702, 0.2774911713077318, 0.2647470311873542, 0.3202792891374726, 0.2584192029147996, 0.289529086405911, 0.2920076925719932, 0.3247650043261041, 0.19851686999810414, 0.1979011994809804, 0.20634704987560348, 0.22093066868855238, 0.2575644024846935, 0.19863990733553505, 0.21016289378071673, 0.1903848209523158, 0.21175247154772725, 0.21156538129029334, 0.20414527912672153, 0.49191355693374583, 0.2250102989797832, 0.61690381198903, 0.22420360867402267, 0.2230224758611189, 0.4625361533960811, 0.1962507487709958, 0.16375766071273667, 0.8500237069575032, 0.7716527955927939, 0.19569476926641494, 0.7920051943236514, 0.7795971636780993, 0.1763631677811529, 0.7478699994794447, 0.16733543242284543, 0.5762275825285654, 0.20440274889350563, 0.1671014974246331, 0.6532972167526694, 0.6851957795784194, 0.16756365796879968, 0.19946186343281347, 0.18916143571131905, 0.15403128216681528, 0.1833291595712817, 0.2006674345764955, 0.1744890538814725, 0.19228535163690175, 0.1903932205387816, 0.2257346721518264, 0.1848680981384292, 0.2629042793064307, 0.19086383684810104, 0.08442202046412839, 0.08027831984729838, 0.08852337125866638, 0.09213891047870215, 0.10790664522451698, 0.07813055059295382, 0.10699917890666766, 0.08450302569119716, 0.08555842135526859]}, "mutation_prompt": null}
{"id": "023ec168-bac4-4910-a770-fe3409f82b4d", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.8\n        self.social_constant = 1.3\n        self.F = np.random.uniform(0.6, 0.9)  # Adapted scale factor range for variability\n        self.CR = 0.85  # Slightly reduced crossover probability for intensified local search\n        self.func_evals = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def stochastic_momentum(weight, evals, max_evals):\n            return weight * np.random.uniform(0.9, 1.1) * (1 - evals / max_evals)  # Added randomness to inertia\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = stochastic_momentum(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = (inertia * velocities[i] + cognitive_component + social_component)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with stochastic momentum and adaptive crossover for improved exploration.", "configspace": "", "generation": 40, "fitness": 0.381717323635218, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8451305661060523, 0.8269150822721492, 0.8275218025574047, 0.8313029538358779, 0.8472563538793061, 0.8362045332570589, 0.8412548287037466, 0.8440873472609225, 0.8376898154074375, 0.7029362575618178, 0.7031812341359149, 0.733745865130114, 0.7017515192653523, 0.7341296811115513, 0.7196374748161734, 0.7157615056557692, 0.7091083354418241, 0.7201178198556355, 0.1319016332400248, 0.15160964052798576, 0.1620440655795744, 0.14291781761683287, 0.14957702653536975, 0.16720786439809054, 0.6245914720023551, 0.17115009631473677, 0.16764445525716076, 0.16109750623719266, 0.14273971150962095, 0.13591332051852367, 0.12420723510904208, 0.5843566612972969, 0.14813547365249813, 0.136272961091093, 0.14525331332226543, 0.15578436295371978, 0.985184358904112, 0.9822222649467804, 0.9740255638174754, 0.9833139856939555, 0.9889788924538765, 0.098710364108889, 0.9787870459036151, 0.989318175126498, 0.9809604440251396, 0.6877738759231367, 0.7239389071979359, 0.05904032000262449, 0.704784438041824, 0.15011511322600912, 0.7125863307215898, 0.6821135885404177, 0.08708912640762445, 0.6734414025378022, 0.7820260327048658, 0.7693879143905199, 0.22629207663591633, 0.818945193567338, 0.21102698975042067, 0.792164442362685, 0.8554329853215545, 0.3759153639899516, 0.7887678675383756, 0.4027613362899488, 0.4198964868802144, 0.3281136284911782, 0.1283737902324077, 0.38123132803489934, 0.4156320216890238, 0.3518729203452724, 0.42157201440954306, 0.4226506174610478, 0.4304344730583324, 0.30950005759535915, 0.34338262225449867, 0.48073423064805376, 0.31436385405761824, 0.4246794139999017, 0.3787719598767333, 0.3714922948667305, 0.3819862353134056, 0.20886113118855543, 0.24572729836357443, 0.2284863785455563, 0.22236192060399496, 0.2079066395532243, 0.23070611840989463, 0.19028756221619714, 0.23858961046652438, 0.225475120995407, 0.3613509733313466, 0.35356713858104927, 0.38313179067521874, 0.32145255228675873, 0.33205918900515596, 0.3400670279354999, 0.3847897319235831, 0.4059488076160833, 0.3578570622240972, 0.056603594650971534, 0.08698790043439186, 0.07930575057468525, 0.07207761645747979, 0.07417423342496365, 0.14247793763781869, 0.08707713830496688, 0.2112814890317286, 0.1489969765036281, 0.2827025356886651, 0.2798742517001328, 0.258349083109226, 0.27568987312782134, 0.27986115868112016, 0.25305498372505697, 0.2491683013844217, 0.23996977208384662, 0.26423969500776845, 0.657232918687674, 0.6972647719480718, 0.6481997176220635, 0.6502930619095637, 0.741320560845776, 0.677672407456648, 0.6951796182823866, 0.6626472315149158, 0.6755711319708808, 0.1281121569776149, 0.1301459089526006, 0.1280195663651279, 0.14453419392713673, 0.13787918276868671, 0.14125550621602145, 0.11433873067909917, 0.1387552357593449, 0.11771657531651092, 0.2381677155910018, 0.20430221956991856, 0.7176002036761175, 0.17413706100054316, 0.17890949272291234, 0.18209800390728892, 0.18747636897153286, 0.1402102272259964, 0.45069145481131334, 0.5113363215965251, 0.5107960582630422, 0.4378278068709708, 0.5112174325579506, 0.5515063544212764, 0.4614381279161658, 0.556077894658126, 0.5739551909042031, 0.41495935291067465, 0.34999318794557155, 0.3549478978361099, 0.39366016010441385, 0.3469184537759755, 0.33005872874113285, 0.40056553912244575, 0.2887405010825477, 0.3718338769164653, 0.4094657777947841, 0.206642852235422, 0.20740499895869868, 0.2087309738845523, 0.22861587007628736, 0.20127658825806505, 0.22092397849619194, 0.20794044590980576, 0.20365135019490066, 0.20537475918780057, 0.245597445334636, 0.2452700063003187, 0.702092688501714, 0.20033611595706302, 0.2011459119300868, 0.2195201552752103, 0.20000618518915048, 0.5798607535906677, 0.21005726258912982, 0.16413453267310418, 0.8819706656697912, 0.16068230945090423, 0.881053187615391, 0.8920383345926466, 0.16060815400793904, 0.15561871325258947, 0.17738553003293112, 0.8836687569855333, 0.16637531114142878, 0.2107210721867565, 0.21065905698496368, 0.16724082461431644, 0.16517037328718231, 0.7602271273768884, 0.21259267892301004, 0.2036828040933869, 0.19304016634616006, 0.19774211155877242, 0.18950627326837788, 0.2095012344221565, 0.19800725740383762, 0.18490202841981251, 0.19203788407297784, 0.19308515853640507, 0.215074018381752, 0.2156180426006542, 0.09205901332358679, 0.10897043752391622, 0.0828547765620049, 0.10804543260711708, 0.089454201199899, 0.10185576333835888, 0.08536329209411575, 0.0935223692666779, 0.08654649321390884]}, "mutation_prompt": null}
{"id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Slightly reduced for refined convergence\n        self.cognitive_constant = 1.5  # Adjusted for balanced exploration\n        self.social_constant = 1.6  # Increased for stronger social influence\n        self.F = np.random.uniform(0.5, 0.9)  # Broadened adaptive scale factor range\n        self.CR = 0.9  # Adjusted crossover probability for strategic balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with stochastic velocity adjustment and strategic mutation for improved exploration and convergence.", "configspace": "", "generation": 41, "fitness": 0.42870141976928383, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "8ada47f0-d794-49e7-b6ed-8a84806f2975", "metadata": {"aucs": [0.8576566449643015, 0.881370456319332, 0.8811023776997438, 0.8835913666778646, 0.8725891678040625, 0.8651150917360322, 0.8684413304263632, 0.8858458065983518, 0.8805696674194604, 0.7555631137231122, 0.7619556029173722, 0.7478292134942133, 0.7243490102944913, 0.76045429645202, 0.7654934261681949, 0.7585764270716563, 0.7732748649689264, 0.7655571985675484, 0.12115483993486709, 0.15520934994214874, 0.17819459455239117, 0.07417411138844854, 0.1733149267890567, 0.17789015716762513, 0.14927210748530073, 0.7064081780292664, 0.12108266897552245, 0.17100320916701695, 0.14108182598351682, 0.11173757318492605, 0.15317123370513042, 0.12715573770749566, 0.11341071348844178, 0.10516687069865016, 0.12112312708950557, 0.1251766206553715, 0.9851789376984205, 0.9887782361678231, 0.9768682091686163, 0.9885751553814965, 0.9853358467765109, 0.9861553445374898, 0.9767594771384877, 0.9925781321061359, 0.985316943944816, 0.6970373337485434, 0.7782388948163348, 0.7008176300504448, 0.7418473927605249, 0.7379069190908851, 0.774473142722404, 0.7270166726704186, 0.7389338990487031, 0.7542109327248996, 0.8334292466090863, 0.770307104527948, 0.862308751096581, 0.8048546198323272, 0.8388660519451728, 0.21214931550161054, 0.8451619749918791, 0.8185408606974324, 0.79250476718173, 0.47662063054423065, 0.46039892186412334, 0.12783154414767217, 0.47913046470392684, 0.13189585091470712, 0.510795614258968, 0.5134628048653866, 0.5070728749596212, 0.42527490957173697, 0.49333470519936795, 0.4285486327094601, 0.45658009079136375, 0.13235586673928867, 0.5173345164330324, 0.47715045586932625, 0.46372709664678247, 0.1330601191746078, 0.5571520324551844, 0.21170039662206774, 0.3448173319555511, 0.33153876879246336, 0.4023506817705921, 0.3825143775499926, 0.3369843342101342, 0.2900591234600234, 0.3054643613225405, 0.44153261629070395, 0.4270746405910214, 0.5287108834430669, 0.511271463528336, 0.5004528761361743, 0.399617807935866, 0.521860183672566, 0.4780872733511933, 0.5440169388118752, 0.5635067572777932, 0.0527898884101452, 0.10035079827455406, 0.2145832553718865, 0.19702358390414665, 0.2932696521181468, 0.10745563524887258, 0.0712449401596339, 0.16231987617148702, 0.07275359954377403, 0.2947963718834842, 0.32497814018398785, 0.341627559524439, 0.3583483818164426, 0.38248732557154674, 0.36269073526866724, 0.30989010614368606, 0.35329936557734376, 0.34685337669989813, 0.7288554355578641, 0.731545858812374, 0.7755137955513864, 0.7451958384566852, 0.769825705910341, 0.7742813524498485, 0.7447040040229023, 0.7748799893274072, 0.7483089850694135, 0.1436304764768387, 0.10184186412352225, 0.12097169788492446, 0.14100010476646874, 0.1708034613338375, 0.1248443531126886, 0.11253163275541467, 0.17023171745437937, 0.1198882143889265, 0.27080466388738067, 0.21454803487079155, 0.6832886743796189, 0.18155720842824874, 0.2125126903981197, 0.2287574470348226, 0.3068098712532351, 0.4471781443479843, 0.1874725908659156, 0.37590295964314013, 0.6032759420191998, 0.43380194063840294, 0.33163707465349845, 0.6631747524482504, 0.5981220525825264, 0.2909539576123886, 0.5705091092250615, 0.6451169769269616, 0.3411138468308025, 0.38853423267308695, 0.33636728935003557, 0.3710196213948691, 0.2759873738215788, 0.5213669088051953, 0.3124942842674976, 0.46185092806039696, 0.47902509891371947, 0.2544722871671026, 0.2998010197755492, 0.19627929013955936, 0.20877042560629377, 0.22042917742206758, 0.22992440833182748, 0.22404991430970034, 0.24954828637909954, 0.21921125642255568, 0.24740287834609365, 0.22219112333657776, 0.2441826476736847, 0.22055600568857625, 0.7724294182298476, 0.7762607170949904, 0.2501819363859882, 0.19895024210480639, 0.2435959397471904, 0.16378529348721949, 0.906674489393336, 0.18736493118458253, 0.8635929801971516, 0.9320082611822531, 0.12185513287340632, 0.16751284755908313, 0.17725810434292177, 0.8975069540325118, 0.20762507773902994, 0.8255671270020343, 0.21110275633466358, 0.16938676427929966, 0.12671090446641686, 0.15605766497563922, 0.21346731947637498, 0.1993728985361951, 0.2121076036310069, 0.18195535770918936, 0.21135384866758045, 0.2132477855979681, 0.1863237844692378, 0.20112842356437288, 0.19290782618288393, 0.2006983084635201, 0.191972386513368, 0.1912532790315601, 0.10109886285465841, 0.09727623067585212, 0.08222747243795026, 0.1032426836019984, 0.09560330705991149, 0.09693488717882448, 0.1449232743239237, 0.09358768540411688, 0.09527377615845944]}, "mutation_prompt": null}
{"id": "6d21a3ab-22f7-446c-a632-a321634a69ab", "solution": "import numpy as np\n\nclass QuantumEnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Slightly increased for potential exploration\n        self.cognitive_constant = 1.4  # Slightly adjusted for cognitive balance\n        self.social_constant = 1.7  # Increased for enhanced social influence\n        self.F = np.random.uniform(0.4, 0.8)  # Narrowed adaptive scale factor range\n        self.CR = 0.85  # Slightly reduced crossover probability for diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Quantum-inspired position update\n        def quantum_position_update(position, global_best):\n            return position + np.random.uniform(-1, 1, self.dim) * (global_best - position)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = self.inertia_weight * (0.9 - 0.5 * (self.func_evals / self.budget))\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                new_position = positions[i] + velocities[i]\n                if np.random.rand() < 0.5:  # Apply quantum update with 50% probability\n                    new_position = quantum_position_update(new_position, global_best_position)\n                positions[i] = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "QuantumEnhancedHybridPSO_DE", "description": "Quantum-Enhanced Hybrid PSO-DE leveraging quantum-inspired position updates and diverse mutation strategies for robust convergence across varied landscapes.", "configspace": "", "generation": 42, "fitness": 0.3908596473998133, "feedback": "The algorithm QuantumEnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8563195221748647, 0.8551511452890463, 0.8698372153519505, 0.8554125595791184, 0.869843487781345, 0.8721196359431784, 0.8486676092252095, 0.8534099581571207, 0.8642230319466278, 0.7446390296657537, 0.731194201306093, 0.7501348382765857, 0.7109097435360933, 0.7289610072087904, 0.710714104699538, 0.7331890476533539, 0.7422338871820844, 0.7384966919737965, 0.16247242362776615, 0.14477286189252647, 0.14920217279403114, 0.5264872200059425, 0.5753807426115551, 0.175233553756463, 0.1805887173580859, 0.16907460187140677, 0.16498036502078195, 0.14832401233410852, 0.14422895384546608, 0.13427199940102197, 0.14408873889082774, 0.13820155618424013, 0.1254250627353991, 0.1399929220510132, 0.581756061844924, 0.12411936357046582, 0.9820959542040437, 0.989107184882744, 0.9765263312149228, 0.9764413181102118, 0.9839650490643785, 0.981132784882147, 0.9771688385540594, 0.9922062033560912, 0.985300471909807, 0.7025907525878926, 0.661246076310268, 0.6371562911223015, 0.675587935336964, 0.6897214716581558, 0.6605181825151902, 0.08870650584862083, 0.08651882397394561, 0.7169199762077179, 0.78890048600439, 0.779748901026758, 0.37331986609939083, 0.8897522137566694, 0.1614528156195052, 0.8175690684555198, 0.8112296823800935, 0.814045472436146, 0.825010574251689, 0.23702684438940824, 0.2859231883898653, 0.29057850172632993, 0.12848584750239866, 0.2900855366464229, 0.3123045243879182, 0.47704392275371943, 0.3168583931646255, 0.2811171975654355, 0.49826189879134586, 0.3044648445410323, 0.31593657247164364, 0.35312083432279817, 0.40823723850505855, 0.33460899013684886, 0.13251986373945124, 0.2615762153897564, 0.32310523861074103, 0.0, 0.08086693885183283, 0.3704725623715023, 0.35116520484464087, 0.10697957503626909, 0.1474790646901889, 0.33506103558719946, 0.00867624333893835, 0.4014619022384408, 0.41864764639863317, 0.25489604010195266, 0.46023369421151383, 0.4610596398586315, 0.39059332626091225, 0.3445832921689217, 0.4993599941123703, 0.5495674886982189, 0.3785899380060107, 0.03678120205525903, 0.08674718823741656, 0.06301179494433584, 0.0890143649800943, 0.15700136103188722, 0.09317126699260025, 0.16998277232595915, 0.13311780754065528, 0.1092874982749481, 0.24946558455076495, 0.32930327407886517, 0.2924874399140096, 0.3373481564423759, 0.390415224621505, 0.36080862289167825, 0.3336052912765649, 0.3240088857308975, 0.21518946872566058, 0.6980246584214078, 0.7066388533797967, 0.7477025595314712, 0.7108010154128142, 0.757195086556889, 0.7559415984057464, 0.710065505873783, 0.7530138772290329, 0.6321665112682342, 0.1402123082835306, 0.09252548412772321, 0.13542085446343533, 0.1085811626334815, 0.1273400614726986, 0.17020833761244625, 0.1069126739396481, 0.13028688520093934, 0.12180256380763399, 0.19375921030640475, 0.1842458594854398, 0.1953324995096617, 0.4431627765055176, 0.2554875332809614, 0.21770565716629597, 0.4784477903540437, 0.1501223623048461, 0.2168111583837038, 0.542732886831243, 0.42689914837502485, 0.5164619276115626, 0.5411204150293296, 0.6256454342666133, 0.5076475697880971, 0.6379197664725875, 0.6407874292468576, 0.5949279781027105, 0.382327852756991, 0.33924476197029474, 0.2122697404266608, 0.333019601466782, 0.3076448254762335, 0.4210259443175328, 0.4810919506532737, 0.4432439446891375, 0.42921547665156856, 0.20712816543948076, 0.2156753253403858, 0.2429021696770738, 0.23075884302679162, 0.19651968009089638, 0.18772145922470596, 0.21053837617349314, 0.24517667808960775, 0.22395262440716956, 0.24206944152574283, 0.7279620368418858, 0.2424315170598691, 0.23707618635206595, 0.20330461981128478, 0.19531168679909883, 0.2126894431573706, 0.23540582039280422, 0.20916136150249598, 0.17227539770950773, 0.877401237571183, 0.16237920557843522, 0.1950455425112677, 0.9037232085781782, 0.9003745318503419, 0.15699062004435405, 0.15610461124324226, 0.16614544884959537, 0.12772717831731895, 0.21040150554211212, 0.16887893355056494, 0.167702595599312, 0.12754214259139585, 0.16703254224022257, 0.825019208682613, 0.19939570066602252, 0.10516317769994799, 0.19933182202746935, 0.1909069157994001, 0.20600212372096793, 0.21795424242399652, 0.19739392168074732, 0.18759424615605735, 0.1885844703772468, 0.19387247711639655, 0.19116690826767913, 0.08465428821922838, 0.11559566440768754, 0.09962917109399527, 0.09088768093949418, 0.08224036467385432, 0.0951379708587945, 0.1394256805454248, 0.09267625018835057, 0.10470619413230264]}, "mutation_prompt": null}
{"id": "7c325ffa-8279-4393-8c9e-1a8cdad958fb", "solution": "import numpy as np\n\nclass AdaptiveSynergyPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for enhanced balance\n        self.cognitive_constant = 1.3  # Adjusted for refined self-learning\n        self.social_constant = 1.8  # Increased for stronger social influence\n        self.F = np.random.uniform(0.4, 0.9)  # Broadened range for adaptive scaling\n        self.CR = np.random.uniform(0.7, 0.95)  # Dynamic crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.3 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveSynergyPSO_DE", "description": "Adaptive Synergy PSO-DE with probabilistic mutation and dynamic crossover for enhanced search adaptability.", "configspace": "", "generation": 43, "fitness": 0.411056463367986, "feedback": "The algorithm AdaptiveSynergyPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8657385341217115, 0.8708245420064697, 0.8687509604314778, 0.853671299354578, 0.8656734876245462, 0.8690409138899394, 0.8618781031196654, 0.8856293713244366, 0.8623437118331148, 0.7523968064565829, 0.7578293222941723, 0.7293076711499553, 0.7415358660220058, 0.7508570367054448, 0.7383871339427028, 0.7355320059058521, 0.7398633161820262, 0.7382968800183858, 0.17773181113922565, 0.5762293007341475, 0.14965153630485106, 0.17349479939496926, 0.16907946782772465, 0.1510287701261228, 0.1452391136964727, 0.17251480550808007, 0.1828800612847059, 0.10221687312257222, 0.13427970148263302, 0.164652132852666, 0.17804853839302393, 0.12945695786012146, 0.17096880863064812, 0.11303692314937486, 0.1531028243026762, 0.12698254143092347, 0.9873949560278926, 0.985309732006007, 0.9848439992298671, 0.9850561243359537, 0.9771361522593343, 0.9855069550239145, 0.9854408772136509, 0.9812563646038058, 0.9855417683932408, 0.0587167251604751, 0.7276773315700672, 0.6394428502101481, 0.7290714170268907, 0.690410229111176, 0.7191768947855746, 0.6861036599940226, 0.08855291705512336, 0.68605189402008, 0.8397814900511671, 0.8612733168135572, 0.8555210074717337, 0.7560262803417769, 0.21329953240228772, 0.4389443722420079, 0.8275280898279804, 0.8384107676781523, 0.22237201941158946, 0.49708685494994365, 0.4157272726307777, 0.25829494210696125, 0.37104942465791546, 0.399271903126199, 0.28808559887101515, 0.37568094119263884, 0.3420393081372205, 0.6818096010974779, 0.4564851263725954, 0.4412217488756405, 0.2878673339352482, 0.3920342231620616, 0.6325047546689702, 0.30324600060304696, 0.47354608963459366, 0.39617335900284856, 0.3711403282423441, 0.29125156994452506, 0.3959586252248669, 0.09953869893431477, 0.2937683229248442, 0.06151187920328993, 0.04608826440655034, 0.32704093774077203, 0.3196206556992174, 0.07593775286662263, 0.4497644835212694, 0.49017691746847636, 0.2250956262005861, 0.4580081563745594, 0.5395974231111142, 0.2093175154916317, 0.5403946212826707, 0.43821881083817416, 0.14203742377498219, 0.15855731941530826, 0.047155421569476275, 0.17372295161444273, 0.275749126630528, 0.09583463632470157, 0.08909754913652668, 0.18670311287641594, 0.09874495707589726, 0.2014014805094011, 0.3211907692924747, 0.35328313559796254, 0.27616463709364747, 0.34973028997264544, 0.3747612715149268, 0.19498427923388173, 0.3179358553215085, 0.3532823541262685, 0.15366678190665894, 0.7469914091886394, 0.7875012074380408, 0.6234930027103743, 0.7393127700555033, 0.20937871190152268, 0.6320711266510349, 0.706855785677388, 0.7604680442394621, 0.6298798744508027, 0.08733976411101851, 0.15971840132907933, 0.0938075671462657, 0.16104201372216975, 0.15993801707911193, 0.13381102575978343, 0.14525964251207968, 0.12125090397880556, 0.10003811826195708, 0.20394893590475371, 0.6194198687537147, 0.2099060612192164, 0.5505323746462768, 0.32510239720452105, 0.2665880451411783, 0.2116710104510484, 0.2605043926913502, 0.19256555660167451, 0.5988963142278861, 0.5625654516464391, 0.5097180394121772, 0.6324594158161787, 0.5772879862950251, 0.5401095223690976, 0.6709796239815145, 0.6543094472967802, 0.549601259996823, 0.39409596710066364, 0.37436794524377104, 0.2932552513823219, 0.34255735482215754, 0.4349479180413409, 0.3369235696454117, 0.47678362423421494, 0.5322273573801013, 0.3442529466652845, 0.26013504390940123, 0.22632573141018208, 0.2610011489537789, 0.23509607912794428, 0.20666005445393376, 0.2425824943700866, 0.21298372527988707, 0.22889228668663986, 0.22252101098040888, 0.2372396170085277, 0.7200565795902583, 0.22371591630603294, 0.6186824362115311, 0.24035786010397076, 0.6413223492850804, 0.7270124024224757, 0.20353280103333538, 0.22526581040562865, 0.18541198952519355, 0.871882112228578, 0.15340123197189492, 0.8228088973923494, 0.1657986803409902, 0.1692538222364105, 0.20754053911146053, 0.17214842501654493, 0.8538705924000864, 0.20967751697765902, 0.16911416504418486, 0.7851757873284992, 0.16903438825217654, 0.2121096569109956, 0.20852297803320996, 0.15459857118907416, 0.855516106846751, 0.8491605255537729, 0.20611280354372308, 0.1941444128069939, 0.19170229507127134, 0.22607432512765901, 0.21228173465982414, 0.21643475333958573, 0.19698328191652925, 0.19742927596127713, 0.2199562430687826, 0.10003275009637924, 0.10480493933118773, 0.09075229105548299, 0.1079132178126454, 0.1024790983514633, 0.11559761390856527, 0.08660700123756082, 0.11208722745425659, 0.09210038507875962]}, "mutation_prompt": null}
{"id": "31db1495-eb3c-4da3-af7b-49bdc7c8b06d", "solution": "import numpy as np\n\nclass AdvancedAdaptivePSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted inertia for dynamic stability\n        self.cognitive_constant = 1.4  # Tuning for improved exploration\n        self.social_constant = 1.7  # Enhanced to strengthen convergence\n        self.F = np.random.uniform(0.4, 0.8)  # Adaptive scale factor range\n        self.CR = 0.85  # Modified crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1.0 - (evals / max_evals))\n\n        # Neighborhood topology adjustment\n        def neighborhood_best(positions, scores):\n            neighborhood_size = 3\n            best_pos = None\n            best_score = np.inf\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                for neighbor in neighbors:\n                    if scores[neighbor] < best_score:\n                        best_score = scores[neighbor]\n                        best_pos = positions[neighbor]\n            return best_pos\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            neighborhood_best_position = neighborhood_best(personal_best_positions, personal_best_scores)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (neighborhood_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdvancedAdaptivePSO_DE", "description": "Advanced Adaptive PSO-DE with dynamic neighborhood topology and self-adaptive parameter tuning for robust optimization.", "configspace": "", "generation": 44, "fitness": 0.4083665976302914, "feedback": "The algorithm AdvancedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8479314711277387, 0.8726028877233869, 0.8613335808386667, 0.8586707806742961, 0.8305771809920417, 0.866772042240694, 0.8674493504920148, 0.8669228683858767, 0.8757151861827561, 0.724194464808815, 0.7403093133807477, 0.7542333502261991, 0.7225811103208023, 0.7567844022557435, 0.7742941689798644, 0.7460373092963579, 0.7516752701905993, 0.7434365235932443, 0.15756193754218717, 0.14851959484652366, 0.16942609771358197, 0.1476255201015625, 0.6914507864688414, 0.5987737016743913, 0.1496064157150404, 0.5454356099290463, 0.15182714107252648, 0.1476178894467417, 0.14194579526721884, 0.15013732677135527, 0.17015227381155695, 0.15023427192392813, 0.13444704791781625, 0.13126113805275985, 0.11035808271333936, 0.13201085724122186, 0.9887409675014813, 0.9750040534981322, 0.9818378711990803, 0.9784138715888646, 0.981947989481813, 0.9781480075708492, 0.9837071133516704, 0.9920437191978956, 0.9877655487303533, 0.7490170631834651, 0.7369359946734374, 0.7068133546311355, 0.7097256676264165, 0.7605100674313918, 0.7229975367519015, 0.701178683087156, 0.717651246652431, 0.08934229122941983, 0.7447388198392151, 0.22375054708571074, 0.8314811740312738, 0.8382698502550971, 0.8484053758286262, 0.8020954955844541, 0.698715079018821, 0.8234199834720728, 0.7671028365142256, 0.24108231708175987, 0.5515510000487419, 0.29575242292767856, 0.3720439918474734, 0.24100750307717023, 0.32867281552177685, 0.45693017248739354, 0.4809024864966054, 0.23041999448854733, 0.2675774608816126, 0.3055778547227286, 0.31327482003028584, 0.4019762218422608, 0.28452334873793816, 0.3411313932438579, 0.311545258403893, 0.44026473582259074, 0.2547977249517187, 0.060345430127874744, 0.06727136080932472, 0.18821657727502683, 0.1053333944075957, 0.08964441009579549, 0.41577819676089334, 0.3057016276102874, 0.4218609394044939, 0.29604581056248824, 0.4581381815151887, 0.44920084933666016, 0.43406891167597084, 0.47047184428142996, 0.17483593235957673, 0.5061796662578992, 0.4714267878103706, 0.33174141880424546, 0.27679328456354657, 0.054276228752650035, 0.2558968685433096, 0.03369631106964932, 0.07937694612209001, 0.23347992288568498, 0.18181929399721597, 0.21910093725724955, 0.19010563143843395, 0.16887721592980176, 0.301715459884355, 0.3212337124379908, 0.324586942408414, 0.31458021657628243, 0.2770753783386871, 0.3304935994397452, 0.30428558544821194, 0.35915837339036694, 0.05768743235962992, 0.7347980260575413, 0.7095175225737076, 0.7027064115551666, 0.7304820297469541, 0.7303497132178194, 0.6828196376986359, 0.7370588205557562, 0.7115538547028992, 0.6601097067234272, 0.130313464722282, 0.08811191207260816, 0.13120965455839817, 0.09997871428734428, 0.116256827762375, 0.09504432675775187, 0.13811699538994981, 0.13253237134148732, 0.14818010151889616, 0.22656310114626554, 0.3270845370335481, 0.2185381852988285, 0.191241696443064, 0.3015217867115886, 0.15324678496149913, 0.18297348308049044, 0.18792899728520895, 0.6894643284698778, 0.46441090832601784, 0.535475493326, 0.5460213256734165, 0.4963522371010668, 0.525385705690413, 0.5724648475185649, 0.6878449033388225, 0.6817710995501464, 0.6806518787083381, 0.29589127261449744, 0.3800091460118069, 0.37497736483753474, 0.42301258256355034, 0.37090427273312443, 0.4259681847922311, 0.45405623579547183, 0.22085668951599968, 0.4488820895287271, 0.23959224782359845, 0.2353787122590294, 0.23763896582244792, 0.22168219531177924, 0.22406388732948823, 0.23759023647733934, 0.22047115997706435, 0.2167252696444284, 0.20244567970436556, 0.20389727009061098, 0.24171765757377228, 0.2450338332089098, 0.21088316839502919, 0.24142007861250536, 0.244958374341268, 0.2051414982888693, 0.20872973194193223, 0.243318309093287, 0.2111181058969399, 0.8918583565119773, 0.163230130974372, 0.16640846537869625, 0.9040494733774422, 0.19364383279962927, 0.8469860473594166, 0.17631864487166604, 0.8932575312838991, 0.7767563647262729, 0.21039862566865164, 0.20941544896481068, 0.15592020697496267, 0.8416137598868714, 0.16623366608853463, 0.20333687054011174, 0.21319679516082057, 0.10412789900007902, 0.19519916846497054, 0.18241794724270666, 0.19312721630896068, 0.21893729606516976, 0.175513638008455, 0.18671773517484658, 0.2565386818292491, 0.1949266556067616, 0.1905068092795511, 0.1563166844210886, 0.10626317812791364, 0.12835892487600764, 0.09734459115087668, 0.11290109952661553, 0.08950814365421034, 0.12450350162595314, 0.09383321443823534, 0.09386771019303919]}, "mutation_prompt": null}
{"id": "29bd36b6-fddf-4317-a039-d4197bbd636b", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Increased swarm size for better exploration\n        self.population_size = 25  # Synchronized population size\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for improved balance between exploration and exploitation\n        self.cognitive_constant = 1.4  # Refined for enhanced individual learning\n        self.social_constant = 1.7  # Enhanced for stronger collective learning\n        self.F = np.random.uniform(0.6, 0.95)  # Fine-tuned adaptive scale factor\n        self.CR = 0.85  # Adjusted crossover for strategic exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with enhanced velocity dynamics and diversified mutation strategy for robust convergence.", "configspace": "", "generation": 45, "fitness": 0.37251633797291106, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.7979570041109123, 0.7992385784806479, 0.7980997569768608, 0.8137317948660845, 0.8169356495850856, 0.8214340282312749, 0.8046946471741357, 0.8067868649556253, 0.795494448158254, 0.6180565974851806, 0.6489117602810647, 0.6568864371457994, 0.6267269765748519, 0.6369653551701717, 0.6264318201557633, 0.6450312825709443, 0.6210217469240458, 0.6222051397159913, 0.1732759441102797, 0.166529981451498, 0.14117419517263385, 0.16550372086042575, 0.1646124231589512, 0.15639309393856182, 0.5855075834020924, 0.42465901900203096, 0.15147202577935748, 0.37543191302312884, 0.1214442520934006, 0.1315599363035631, 0.15465750018451707, 0.12240221167104792, 0.10828806535331859, 0.13141427447286425, 0.12457947014047421, 0.13641472664109278, 0.9841429257325586, 0.9725991943946577, 0.9709563418840534, 0.9851419825682546, 0.9817114592652227, 0.9679430293945134, 0.981337600774391, 0.9868209175224462, 0.985883461932407, 0.5767669218865477, 0.5829484751605294, 0.5806931525321026, 0.5786688732784773, 0.5963912152958781, 0.5940953642832643, 0.5601455870195305, 0.5948051855351435, 0.5759350561190177, 0.7331117288209523, 0.6950910752847976, 0.727496168894094, 0.821647597365724, 0.7667028414074895, 0.7034534903366507, 0.7583928575949599, 0.7708892103605989, 0.7872468190794043, 0.3400851269515305, 0.32722411216497926, 0.2717620098371176, 0.30346508986009546, 0.34322375647846304, 0.4004459231010885, 0.26575084479626787, 0.34299511721286446, 0.381799159256085, 0.3605818962497487, 0.3031961037701768, 0.3195078385664759, 0.2801111630542532, 0.36755611309027825, 0.3021579666104399, 0.3380203353549085, 0.3542571612345561, 0.36081053611028924, 0.09818812069545091, 0.17137816719145826, 0.1751642236956208, 0.11976412768725786, 0.11682396564286524, 0.14754966286120874, 0.11460749120808666, 0.10842603189589606, 0.15089997421073476, 0.2666994822230163, 0.3109870807714715, 0.28759110891330864, 0.26220552280669707, 0.2358936260834127, 0.26285848431477077, 0.27044926924946155, 0.3147907070920958, 0.3047672800294916, 0.031040758961164094, 0.048823333425410786, 0.13095818708346452, 0.1712276777958598, 0.10834941230998507, 0.07602454808606873, 0.06411801605241396, 0.1095801474251441, 0.12121594025239679, 0.209009948268007, 0.21423298946089175, 0.23251592737685578, 0.21467233475811842, 0.22349687482556324, 0.2255208962472106, 0.30526658201238877, 0.2110848235763999, 0.22088777271340176, 0.5700202871889549, 0.6106201230805857, 0.5925356837219331, 0.6102844315844467, 0.6232357234029209, 0.5937466599184376, 0.6266905798546738, 0.6021270350203716, 0.5941446429971733, 0.12283426495797867, 0.13353325892709633, 0.10727283877757632, 0.1476363340282867, 0.12428260894816645, 0.12303070931152993, 0.11957106655033845, 0.1633020845608698, 0.11368118862482168, 0.2344005739524595, 0.21890820218616114, 0.2654397868392683, 0.17040832743282264, 0.1799423096333912, 0.23607809817300507, 0.2732100897484031, 0.22318216367266352, 0.21551859571332166, 0.4467670299369725, 0.5318019267556024, 0.47991105444104276, 0.48012596915706285, 0.3802418554859115, 0.4697433532860299, 0.5130521058254194, 0.529543423360983, 0.5739343986111185, 0.29456364687457215, 0.32879275728804747, 0.30889101129446583, 0.2561331610685623, 0.2909320835677265, 0.29855477970906963, 0.34643987193780734, 0.32597960792702396, 0.41917345016743746, 0.1897207937671408, 0.22145745048665721, 0.24133318594174757, 0.20414340859371283, 0.2317309948609505, 0.204961441376864, 0.226291019347875, 0.2402632719536124, 0.20489506530202117, 0.18913032957742926, 0.6248763135639526, 0.2343733041595638, 0.5853991646367427, 0.19798326777298658, 0.2346280141085153, 0.19951610456075475, 0.23220385683641176, 0.6223053446237172, 0.16006269377940374, 0.8226661510670428, 0.8681123790842202, 0.7885298020616331, 0.829907539001608, 0.1390442246188449, 0.8184707781129904, 0.17789053901441443, 0.1575304400496076, 0.7094979396920273, 0.1675212987134027, 0.2105648817223047, 0.16404406865501897, 0.1678457887710163, 0.16797974376988567, 0.21312049731947147, 0.2086153653791889, 0.208516694320535, 0.18174917962700843, 0.2050158377978334, 0.19842075044523255, 0.19037092729973604, 0.2012519371889695, 0.21357407850556087, 0.21595127708617645, 0.19533465939515782, 0.18679648936320947, 0.07502747748371219, 0.08736079543589315, 0.08742622067509043, 0.08092981934704624, 0.08689177843547569, 0.08852904476117751, 0.12738385424736065, 0.1021627478067767, 0.09103030519330935]}, "mutation_prompt": null}
{"id": "41b5ccf2-6dda-42b8-8c7c-0e15682c1627", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Slightly reduced for refined convergence\n        self.cognitive_constant = 1.5  # Adjusted for balanced exploration\n        self.social_constant = 1.6  # Increased for stronger social influence\n        self.F = np.random.uniform(0.5, 0.9)  # Broadened adaptive scale factor range\n        self.CR = 0.9  # Adjusted crossover probability for strategic balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with stochastic velocity adjustment and strategic mutation for improved exploration and convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8576566449643015, 0.881370456319332, 0.8811023776997438, 0.8835913666778646, 0.8725891678040625, 0.8651150917360322, 0.8684413304263632, 0.8858458065983518, 0.8805696674194604, 0.7555631137231122, 0.7619556029173722, 0.7478292134942133, 0.7243490102944913, 0.76045429645202, 0.7654934261681949, 0.7585764270716563, 0.7732748649689264, 0.7655571985675484, 0.12115483993486709, 0.15520934994214874, 0.17819459455239117, 0.07417411138844854, 0.1733149267890567, 0.17789015716762513, 0.14927210748530073, 0.7064081780292664, 0.12108266897552245, 0.17100320916701695, 0.14108182598351682, 0.11173757318492605, 0.15317123370513042, 0.12715573770749566, 0.11341071348844178, 0.10516687069865016, 0.12112312708950557, 0.1251766206553715, 0.9851789376984205, 0.9887782361678231, 0.9768682091686163, 0.9885751553814965, 0.9853358467765109, 0.9861553445374898, 0.9767594771384877, 0.9925781321061359, 0.985316943944816, 0.6970373337485434, 0.7782388948163348, 0.7008176300504448, 0.7418473927605249, 0.7379069190908851, 0.774473142722404, 0.7270166726704186, 0.7389338990487031, 0.7542109327248996, 0.8334292466090863, 0.770307104527948, 0.862308751096581, 0.8048546198323272, 0.8388660519451728, 0.21214931550161054, 0.8451619749918791, 0.8185408606974324, 0.79250476718173, 0.47662063054423065, 0.46039892186412334, 0.12783154414767217, 0.47913046470392684, 0.13189585091470712, 0.510795614258968, 0.5134628048653866, 0.5070728749596212, 0.42527490957173697, 0.49333470519936795, 0.4285486327094601, 0.45658009079136375, 0.13235586673928867, 0.5173345164330324, 0.47715045586932625, 0.46372709664678247, 0.1330601191746078, 0.5571520324551844, 0.21170039662206774, 0.3448173319555511, 0.33153876879246336, 0.4023506817705921, 0.3825143775499926, 0.3369843342101342, 0.2900591234600234, 0.3054643613225405, 0.44153261629070395, 0.4270746405910214, 0.5287108834430669, 0.511271463528336, 0.5004528761361743, 0.399617807935866, 0.521860183672566, 0.4780872733511933, 0.5440169388118752, 0.5635067572777932, 0.0527898884101452, 0.10035079827455406, 0.2145832553718865, 0.19702358390414665, 0.2932696521181468, 0.10745563524887258, 0.0712449401596339, 0.16231987617148702, 0.07275359954377403, 0.2947963718834842, 0.32497814018398785, 0.341627559524439, 0.3583483818164426, 0.38248732557154674, 0.36269073526866724, 0.30989010614368606, 0.35329936557734376, 0.34685337669989813, 0.7288554355578641, 0.731545858812374, 0.7755137955513864, 0.7451958384566852, 0.769825705910341, 0.7742813524498485, 0.7447040040229023, 0.7748799893274072, 0.7483089850694135, 0.1436304764768387, 0.10184186412352225, 0.12097169788492446, 0.14100010476646874, 0.1708034613338375, 0.1248443531126886, 0.11253163275541467, 0.17023171745437937, 0.1198882143889265, 0.27080466388738067, 0.21454803487079155, 0.6832886743796189, 0.18155720842824874, 0.2125126903981197, 0.2287574470348226, 0.3068098712532351, 0.4471781443479843, 0.1874725908659156, 0.37590295964314013, 0.6032759420191998, 0.43380194063840294, 0.33163707465349845, 0.6631747524482504, 0.5981220525825264, 0.2909539576123886, 0.5705091092250615, 0.6451169769269616, 0.3411138468308025, 0.38853423267308695, 0.33636728935003557, 0.3710196213948691, 0.2759873738215788, 0.5213669088051953, 0.3124942842674976, 0.46185092806039696, 0.47902509891371947, 0.2544722871671026, 0.2998010197755492, 0.19627929013955936, 0.20877042560629377, 0.22042917742206758, 0.22992440833182748, 0.22404991430970034, 0.24954828637909954, 0.21921125642255568, 0.24740287834609365, 0.22219112333657776, 0.2441826476736847, 0.22055600568857625, 0.7724294182298476, 0.7762607170949904, 0.2501819363859882, 0.19895024210480639, 0.2435959397471904, 0.16378529348721949, 0.906674489393336, 0.18736493118458253, 0.8635929801971516, 0.9320082611822531, 0.12185513287340632, 0.16751284755908313, 0.17725810434292177, 0.8975069540325118, 0.20762507773902994, 0.8255671270020343, 0.21110275633466358, 0.16938676427929966, 0.12671090446641686, 0.15605766497563922, 0.21346731947637498, 0.1993728985361951, 0.2121076036310069, 0.18195535770918936, 0.21135384866758045, 0.2132477855979681, 0.1863237844692378, 0.20112842356437288, 0.19290782618288393, 0.2006983084635201, 0.191972386513368, 0.1912532790315601, 0.10109886285465841, 0.09727623067585212, 0.08222747243795026, 0.1032426836019984, 0.09560330705991149, 0.09693488717882448, 0.1449232743239237, 0.09358768540411688, 0.09527377615845944]}, "mutation_prompt": null}
{"id": "b4b8580a-efe8-499e-ba42-50e36e492b36", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Increased for better exploration\n        self.cognitive_constant = 1.4  # Slightly adjusted for improved balance\n        self.social_constant = 1.7  # Further increased for stronger convergence\n        self.F = np.random.uniform(0.4, 0.9)  # Broadened adaptive scale factor range\n        self.CR = 0.85  # Slightly reduced crossover probability for diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of cognitive constant\n        def dynamic_cognitive(cognitive, evals, max_evals):\n            return cognitive * (0.5 + 0.5 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = self.inertia_weight * (0.9 - 0.4 * (self.func_evals / self.budget))\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = dynamic_cognitive(self.cognitive_constant, self.func_evals, self.budget) * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with adaptive learning rates and strategic diversity maintenance for robust optimization.", "configspace": "", "generation": 47, "fitness": 0.39760585896889933, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8407696062854867, 0.874687426256343, 0.856943167076645, 0.8658687217741214, 0.8777473502700338, 0.8685563592080393, 0.8786035920259203, 0.8621727359872156, 0.8611418697037774, 0.7433634149266151, 0.7318580523368615, 0.7342779180109886, 0.7222696323446851, 0.7488780281113476, 0.7488203533652096, 0.7310029118876935, 0.74110946001857, 0.7335608052934836, 0.1384607348803858, 0.17596356067243613, 0.14575029772045, 0.09622721823921931, 0.146441848144635, 0.14918902154307034, 0.15298677993804666, 0.17807302387605273, 0.1554296479788223, 0.11438089068089508, 0.12498593725552709, 0.1271342247046383, 0.5527365022795906, 0.11369613795216249, 0.13790877891208364, 0.11432337703237261, 0.13647205846671318, 0.12367206425181687, 0.9877887826464569, 0.9889559914249055, 0.09910698636691961, 0.9885241592692384, 0.988856961235435, 0.9851968426904986, 0.9795658857720753, 0.9925900927879044, 0.9879273287885509, 0.723182038155694, 0.7601871359394778, 0.7090713719723055, 0.6776316239401758, 0.6958033526708286, 0.67743050085349, 0.6983713982162745, 0.690296126069625, 0.08862730129657503, 0.7775704228527163, 0.22066869642198683, 0.8320412715919168, 0.8541357629657156, 0.21360076730590793, 0.18673078256709597, 0.8241453182740867, 0.8373297445021816, 0.8597390903647446, 0.5455748025272291, 0.3656313108127942, 0.5287556803940288, 0.48098367186100643, 0.1301769786171728, 0.4185895785524829, 0.4646429356400783, 0.3701498874527064, 0.4521260317995872, 0.32889106871945395, 0.3968328461960675, 0.41593233355363457, 0.4143282803294708, 0.4895933276886414, 0.39736371485147903, 0.5028617844287016, 0.32876197666895335, 0.4031473378044542, 0.2774883865498785, 0.26944389009394376, 0.3310001224386597, 0.237533473232185, 0.09770887891959157, 0.3597350337204088, 0.30068505938664825, 0.3311013216911117, 0.16546025983838064, 0.43366906871079547, 0.09197932537540054, 0.40430330455265606, 0.4346841540455142, 0.5873237919548042, 0.18792260513897896, 0.4239647900470894, 0.496523681214029, 0.2548667663535411, 0.06951421749423625, 0.17234156061499795, 0.06140196943635001, 0.08120760846876984, 0.3275241314096533, 0.0, 0.13290219345942245, 0.08477354738164378, 0.08837989862224771, 0.29429792324982984, 0.32607950418305454, 0.2872338471496261, 0.2849855442777649, 0.3789855862929197, 0.3429769037757201, 0.3120381229273299, 0.34069379542041656, 0.3233369333567446, 0.6965111928864639, 0.7515820060691971, 0.7157642508478839, 0.7383756306842917, 0.7655205182157432, 0.7386683209953764, 0.738338251899039, 0.7438492679092561, 0.7139703771070671, 0.11546512007848031, 0.09118214557391835, 0.1791507648051922, 0.15253913143992193, 0.10200966849374615, 0.11562323194137913, 0.1610157761925871, 0.11422983111113805, 0.136966459151034, 0.2197112746363553, 0.3085318774138165, 0.1598794159738498, 0.1689256333053878, 0.3170744951661464, 0.2564929279697459, 0.16884956406457152, 0.2865135797220961, 0.20075664660872383, 0.53756077264051, 0.41800638195291706, 0.426204485260572, 0.5246993769077182, 0.5792060851778114, 0.6859638498137441, 0.5641881457283464, 0.5033016623936062, 0.672893237878719, 0.38976747267238865, 0.39060659705480827, 0.3934389724380126, 0.30621601735419246, 0.254883321896357, 0.31726656904467654, 0.4525448607720145, 0.29104558588477847, 0.5273246688451203, 0.2043309816233213, 0.22897062759551967, 0.20809324920413108, 0.2519928455401761, 0.20622569785445766, 0.25408274285782007, 0.21236579771657982, 0.22360378798138214, 0.23148147058386415, 0.8150447670188625, 0.25011241363375825, 0.21617764621230384, 0.7764277246130091, 0.20272036218245337, 0.1923266385211827, 0.1975431852376246, 0.6908551190698339, 0.18484532673424225, 0.8646660004031741, 0.8887087067657127, 0.16504103847229834, 0.16283468251182898, 0.9242594319918623, 0.16127688817517316, 0.1532308928592251, 0.17530506568225446, 0.8874665791124167, 0.1278789772159835, 0.20953963006108278, 0.16951441329129646, 0.16860320446089394, 0.12607781509381644, 0.16781083272854336, 0.1992664284307495, 0.1992084795346276, 0.1989281381039184, 0.19296055850575444, 0.17118095082214746, 0.1761989121855304, 0.2137839118174476, 0.21485155667174327, 0.21251978322791576, 0.18106870545096299, 0.1767553357220789, 0.19581163268441382, 0.08306917331763597, 0.09275649197141589, 0.08903890380292268, 0.11588811794468279, 0.09244254749922942, 0.09695154796330041, 0.11611237969714328, 0.08506364928002508, 0.1280283706268006]}, "mutation_prompt": null}
{"id": "00ff80f6-946a-4b8e-8e9b-bdca4e220e2c", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Reduced for more adaptive dynamics\n        self.cognitive_constant = 1.4  # Balanced for adaptive exploration\n        self.social_constant = 1.7  # Further increased for stronger influence\n        self.F = np.random.uniform(0.4, 0.8)  # Narrowed scale factor for stability\n        self.CR = 0.85  # Reduced crossover probability for selective interactions\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight using entropy\n        def dynamic_inertia(weight, evals, max_evals):\n            entropy = -np.sum(velocities * np.log(np.abs(velocities) + 1e-9)) / self.swarm_size\n            return weight * (0.9 - 0.3 * entropy * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Quantum-inspired Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveQuantumPSO_DE", "description": "Adaptive Quantum-Inspired Hybrid PSO-DE with entropy-based velocity adjustment and quantum mutation for enhanced exploration and convergence.", "configspace": "", "generation": 48, "fitness": 0.39085484589695685, "feedback": "The algorithm AdaptiveQuantumPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8976987060186333, 0.8912008357627196, 0.8974549112151067, 0.8783692497614495, 0.8888701194062876, 0.9039471046696042, 0.8911403608564933, 0.8917488042872135, 0.9071832511882433, 0.7418774251267437, 0.7855223825654895, 0.8018828432624999, 0.7813189676064303, 0.8016298619000756, 0.7887283852158021, 0.7999629712969091, 0.7956564047628962, 0.05372280445407973, 0.15016546117943685, 0.7166940467914378, 0.15392868513427327, 0.106892477226331, 0.1748058084391676, 0.15670889788394293, 0.15705061639747253, 0.1748278042759006, 0.12181081093530943, 0.11982093554075623, 0.1256070508285626, 0.13094880949440235, 0.15239440750446376, 0.17268989601635354, 0.11025691505080215, 0.12079607883576904, 0.15257582270337844, 0.15701127860813646, 0.9851265288508957, 0.9888029862583563, 0.9479046780454398, 0.9876209913118253, 0.9858545729138724, 0.9861063155155271, 0.9704037301724957, 0.9925944314814623, 0.9852536558125522, 0.7550774548434509, 0.7444241564083247, 0.059002985854503254, 0.7673590213124761, 0.7405354342014723, 0.7724087845181636, 0.7263027832445514, 0.7435798900368732, 0.7047168983316799, 0.8673066609547551, 0.8599021681089261, 0.38416398554136966, 0.8663836912168897, 0.16213758152371882, 0.2741140521981802, 0.8601857085200614, 0.40438405449161974, 0.8210446457777635, 0.40205369422171644, 0.3746109555951014, 0.13235160488000253, 0.4310911939830011, 0.13036305684596627, 0.35970620825484967, 0.4198695769689418, 0.34629625561154187, 0.3609491043517029, 0.4466670624253436, 0.29923779583302945, 0.3123891316889289, 0.48219424247406695, 0.4892684234962146, 0.4214651338682893, 0.4259409057302258, 0.32041162917898514, 0.3021145703310808, 0.1164590388695842, 0.3573940684472081, 0.16357504721370042, 0.27497083440811665, 0.12868175762006018, 0.17648263735146608, 0.390401146114404, 0.29436347039209654, 0.03859669858701342, 0.43924928818114384, 0.5072686080881723, 0.530513807076125, 0.46244927464626695, 0.1914718732953543, 0.47764950237313863, 0.4400035402434337, 0.5947131986986449, 0.17170536703455486, 0.03668879793061863, 0.169125456876412, 0.05045425152200911, 0.11483278161136601, 0.1527043205045706, 0.11997369716053485, 0.09512389643765817, 0.11378713303171117, 0.07392918861409148, 0.3112333777824481, 0.2820785315642884, 0.3003217442011036, 0.3701295176061177, 0.37459981826101507, 0.37548044201138786, 0.29583449944751683, 0.24469642145310966, 0.250853587397602, 0.7845440086131324, 0.7342206887844112, 0.7772384571873671, 0.7660786629512549, 0.7238786626235272, 0.7333276723375597, 0.7808546247456143, 0.7806699682949588, 0.6683181305740866, 0.1791372911242426, 0.15435975463224494, 0.14565805165490597, 0.1262800742951926, 0.12866456551911376, 0.13099352914986262, 0.10917429910663645, 0.15304710026669854, 0.12843879964548266, 0.2799951055250869, 0.37839974273256627, 0.3644911165799781, 0.199624190676008, 0.2951405697237113, 0.19780066384735506, 0.21221607403919307, 0.603580477560244, 0.19597238576560794, 0.5278451608997483, 0.2919964240361743, 0.5625188460729023, 0.5189383682128978, 0.47770908929615663, 0.3578018566836758, 0.5807371943665616, 0.7216233118879407, 0.711368800365183, 0.27882360293885944, 0.3705151777336909, 0.26598010712867504, 0.28525502755580145, 0.209533391124185, 0.3473841135956802, 0.2164547832638969, 0.3082833586955014, 0.1414697322544196, 0.22200315170018292, 0.24188325643974973, 0.22442265957781204, 0.26513628491649077, 0.1940333136315492, 0.1951044910284715, 0.19846825128655532, 0.3084521839983818, 0.23989206670543362, 0.19774414492247527, 0.2074234838392408, 0.21357844072690457, 0.7327256155689169, 0.22589045731446222, 0.2160568484092268, 0.22166392079994102, 0.24871121714893318, 0.19733595344391985, 0.8738065835513843, 0.9334378377109074, 0.1880304190371752, 0.11702358732824836, 0.9337137062977321, 0.16217488255791546, 0.1537982414437571, 0.17803892361890217, 0.19621880545787074, 0.21058883313755894, 0.16666559400704428, 0.21190932185876976, 0.1691745056290176, 0.11064960782687627, 0.20978551193632755, 0.21378922802542166, 0.2135842453289697, 0.20305448355682287, 0.18713043583162026, 0.21468422934436526, 0.19086410168212642, 0.22347925055812434, 0.19458337427068773, 0.19622436739652105, 0.1882100593847813, 0.1774863792219138, 0.1762341396386382, 0.10479068187431861, 0.09973586310380467, 0.07989365452448638, 0.11321222297390154, 0.13670195867094825, 0.10376448311179554, 0.11100306069794719, 0.09777112173409752, 0.0861880484424471]}, "mutation_prompt": null}
{"id": "fd71cc84-eddb-4e74-b1ea-8f274e9711d3", "solution": "import numpy as np\n\nclass AdvancedAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Increased swarm size for better sampling\n        self.population_size = 25  # Increased population size for diversity\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for better balance\n        self.cognitive_constant = 1.4  # Lowered for more global focus\n        self.social_constant = 1.8  # High for stronger social influence\n        self.F = np.random.uniform(0.4, 0.8)  # Narrowed scale factor range for refinement\n        self.CR = 0.85  # Slightly reduced crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = np.zeros(self.dim)\n        global_best_score = np.inf\n\n        # Dynamic cross-entropy method for selecting promising solutions\n        def cross_entropy_selection(scores, positions):\n            selection_prob = np.exp(-scores / np.min(scores))  # Convert scores to probabilities\n            selection_prob /= np.sum(selection_prob)\n            chosen_indices = np.random.choice(self.swarm_size, size=self.swarm_size // 2, p=selection_prob)\n            return positions[chosen_indices]\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = self.inertia_weight * (0.9 - 0.5 * (self.func_evals / self.budget))\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            selected_positions = cross_entropy_selection(personal_best_scores, personal_best_positions)\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(len(selected_positions), 3, replace=False)\n                a, b, c = selected_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdvancedAdaptiveHybridPSO_DE", "description": "Advanced Adaptive Hybrid PSO-DE with dynamic cross-entropy search for enhanced diversity and convergence.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities contain NaN').", "error": "ValueError('probabilities contain NaN')", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {}, "mutation_prompt": null}
{"id": "3e1ba78d-1f93-4dbe-be66-c148e3bb43fb", "solution": "import numpy as np\n\nclass AdaptiveSwarmEvoHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for better balance\n        self.cognitive_constant = 1.6  # Slightly increased for enhanced exploration\n        self.social_constant = 1.5  # Reduced for gentler convergence\n        self.F = np.random.uniform(0.4, 0.8)  # Narrowed adaptive scale factor range\n        self.CR = 0.85  # Balanced crossover probability for exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveSwarmEvoHybrid", "description": "Adaptive Swarm and Evolutionary Hybrid: Improved convergence leveraging adaptive parameters for dynamic velocity and mutation strategies.", "configspace": "", "generation": 50, "fitness": 0.4028578670440131, "feedback": "The algorithm AdaptiveSwarmEvoHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8629534392331136, 0.8468623436944087, 0.8481066895473794, 0.8580642518517433, 0.8608146531267148, 0.8682556860195034, 0.8612379938840893, 0.854520463019959, 0.8729847470551793, 0.7427981807847399, 0.7262335180749739, 0.738258222015076, 0.690290621959515, 0.7591900587507784, 0.7538128675780088, 0.7354791636036082, 0.7457102219861356, 0.7036406150791066, 0.16273275520644293, 0.17490951476930205, 0.14900428669473986, 0.14958557342911405, 0.15945908181692559, 0.1831915178979754, 0.44873088375054504, 0.5242481769345726, 0.47623903194877604, 0.151015262552045, 0.13803435392054164, 0.13537620247695215, 0.12970003362408755, 0.4731725573173913, 0.15944393964846604, 0.1701505412562324, 0.1646533118709922, 0.1508847583610594, 0.9854203907073128, 0.9887293170896762, 0.9743396632331072, 0.9876349971000622, 0.9852269022467243, 0.9859693819716001, 0.969604702773456, 0.993799937687395, 0.98498092467318, 0.6721266320260961, 0.6844279635817194, 0.6672816606999137, 0.6876844977398824, 0.6749079363569128, 0.7136504356821729, 0.6936314188114562, 0.6720067150104865, 0.6482370219131108, 0.801731821349378, 0.777028954606005, 0.7615639566689585, 0.8393470392214919, 0.21013063555579148, 0.07223399490437454, 0.8160161579683954, 0.872654026907194, 0.8189000913848254, 0.35692183449733716, 0.33715335101960087, 0.3337517136707542, 0.6195329104317253, 0.38661348468731216, 0.2976002337200302, 0.388550802110914, 0.3789704585572322, 0.3043849456517742, 0.31367702410222487, 0.31510535493876723, 0.287814812148686, 0.3568405351411261, 0.41303296267378475, 0.34735892685607095, 0.33382936866205737, 0.48081961231964176, 0.4271179790781263, 0.2654420077468045, 0.278722942875101, 0.30461112160548176, 0.26810306940071127, 0.28238707933775054, 0.2867038809309653, 0.305213432755865, 0.04934522882112902, 0.36506593024355416, 0.44020984155003684, 0.23813416624280503, 0.08107075215479564, 0.30336436859084837, 0.20388584983866798, 0.2090144419888399, 0.4575229417421296, 0.32168860227493745, 0.5377630188846944, 0.12346313839989798, 0.3081835693024183, 0.1503827550937611, 0.11289607419046266, 0.26790376118643555, 0.17274946133814262, 0.07829264239967249, 0.17918379388503713, 0.1526820700287128, 0.042942446579674276, 0.30910980858262005, 0.33645315837016276, 0.32564095916531477, 0.28391502356666465, 0.38351265416376834, 0.2628608943941505, 0.22879290473204106, 0.0, 0.6974300641409064, 0.7776629971553909, 0.7654023576729733, 0.7369573698762713, 0.776421734775259, 0.7010884157234022, 0.7402412959558621, 0.7643369733895533, 0.7244457374520348, 0.14845849550141432, 0.0946013994825633, 0.13639166265772307, 0.14962832737467302, 0.10633495855921338, 0.1504953043548749, 0.1224895578514581, 0.10055994851095784, 0.1518096229818835, 0.24711996090098298, 0.5544039396748471, 0.34373276362207483, 0.2043300329141855, 0.17815239941262173, 0.32002189963496164, 0.2092309898715211, 0.48360670835308306, 0.26022186988891727, 0.3861518242427846, 0.5324836286976921, 0.47669012961850366, 0.6151987365155158, 0.23697115531870883, 0.6255195173012688, 0.538572458701017, 0.6002993002306838, 0.5806996494476102, 0.3998859156483371, 0.3279856492012837, 0.32121637191103936, 0.4056747409398741, 0.28320770547276997, 0.410489565981906, 0.39547898745707466, 0.38419749729435004, 0.28589593070996033, 0.231342465064596, 0.22632080743133942, 0.23058126991041172, 0.23067130297387195, 0.21101447322093714, 0.2066563331686544, 0.2037018055314067, 0.2141851054937206, 0.2299188637602264, 0.2533192154225019, 0.19525129955042808, 0.2189023878635118, 0.20729128023673993, 0.6614007720304786, 0.7384254368921712, 0.22284428101905707, 0.1897283389760589, 0.21827057658729387, 0.8303546434773321, 0.9117995107692838, 0.18773961427047847, 0.13074637943801048, 0.9161842108982103, 0.16795951597609893, 0.15887002165173125, 0.17786256435364867, 0.16291838824554106, 0.20605938677819713, 0.2110243972118545, 0.16962732113795753, 0.2073409806958273, 0.16403271375634743, 0.8284284464773346, 0.21364317549339595, 0.19907515893071814, 0.2107918556115005, 0.18659617354750102, 0.20340500984740784, 0.21979421973720148, 0.1898703044711756, 0.20465259880281494, 0.20837016774063, 0.1790314034101197, 0.18267960515242132, 0.19058142063698946, 0.0831818813328713, 0.09744440551490863, 0.09049093202704894, 0.1113761614725608, 0.11112009592235861, 0.091265464099055, 0.1244835570137297, 0.08335848532939272, 0.0978147415196956]}, "mutation_prompt": null}
{"id": "6e1d835d-a0b6-410e-8785-0ec5c413833e", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Slightly increased for enhanced exploration\n        self.cognitive_constant = 1.4  # Balanced for improved performance\n        self.social_constant = 1.7  # Increased to enhance convergence\n        self.F_min, self.F_max = 0.4, 1.0  # Adaptive scaling factor range\n        self.CR = 0.85  # Slightly decreased to adjust exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Adaptive scale factor\n        def adaptive_scale(evals, max_evals):\n            return self.F_min + (self.F_max - self.F_min) * (1 - (evals / max_evals))**2\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            current_F = adaptive_scale(self.func_evals, self.budget)\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + current_F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with stochastic velocity adjustment, strategic mutation, and adaptive scaling for enhanced exploration and convergence.", "configspace": "", "generation": 51, "fitness": 0.3880312984710268, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8274395300166929, 0.8333475303972433, 0.8289078107389034, 0.8322392425103236, 0.19055375371538275, 0.8379458359167822, 0.8472330904025834, 0.8407211803971225, 0.8201112763500975, 0.7041952127029114, 0.7115951581408518, 0.6853247347911179, 0.6969590034516719, 0.704817800571912, 0.6801708990263373, 0.6969312010037334, 0.6951192133869013, 0.7113124357285682, 0.17041394736991844, 0.14975309425686756, 0.15201923006826346, 0.1551788127054795, 0.1443599128513663, 0.15130260604449608, 0.5896605390129013, 0.1652027142004403, 0.15028245639083104, 0.13109851663174865, 0.12457805839276348, 0.13113720203283064, 0.1526590083584629, 0.16078480358985214, 0.14812680479939355, 0.1189680115679006, 0.16610984225649628, 0.1423308767196244, 0.9909785817531995, 0.9856038789921333, 0.9874865793194199, 0.9819458638679006, 0.9852130137958935, 0.9831501329855034, 0.9843033102245086, 0.9869452617860153, 0.989144413117238, 0.6572065251132144, 0.6437864191580756, 0.6879929850407571, 0.6256083757112301, 0.6695169575311116, 0.6378386709826793, 0.6749344417867293, 0.08848103021420317, 0.6733478985958476, 0.7685653780563746, 0.7036321452057109, 0.7929247876878865, 0.7322604616918371, 0.8541682281843186, 0.7751560060233073, 0.7903168515799086, 0.6736014083896051, 0.817685729715426, 0.11419856366513126, 0.2506642529615487, 0.29270010786866585, 0.3582756423429986, 0.1296088409890328, 0.40821433727782785, 0.42683783912257256, 0.3249282341941211, 0.2927853450251837, 0.2652043648872837, 0.022062321722861822, 0.32300817476061416, 0.32802835781101225, 0.11491211987652628, 0.2943906947988878, 0.4995985967092642, 0.12442268990632166, 0.2977275310319494, 0.08006306127028895, 0.28175962955583655, 0.12612178545321495, 0.26197207978116044, 0.21439686733108487, 0.3147437696950418, 0.30373011621309887, 0.19720753160881344, 0.2920007811943103, 0.3336006750144064, 0.3928813602123342, 0.33847903369969223, 0.4024731699029228, 0.2986391781371214, 0.23476370395070922, 0.3763749213066382, 0.3707041064942318, 0.36545292765752213, 0.05302732477998029, 0.13925363630593524, 0.05140859204994508, 0.11034792708088004, 0.08674772329095815, 0.11233203810213888, 0.10274799742513974, 0.09229662219307089, 0.25218954237152114, 0.2813346385118781, 0.2760076104120761, 0.32134099372403735, 0.3373261455618789, 0.2915395635646739, 0.31894126215739604, 0.15195887972637634, 0.25681809359231633, 0.3029124187623502, 0.6601887481741285, 0.6866202247899431, 0.7137401942127788, 0.7304073817530595, 0.6866760495992209, 0.6242596781531167, 0.6907348256650714, 0.6241034792053324, 0.7292819730942737, 0.1494834086526471, 0.10972535232678182, 0.1454582644995397, 0.1422107446291906, 0.11400301033854088, 0.10173257084255927, 0.10949481265810079, 0.14692015996361274, 0.15950098715865957, 0.20412377904189738, 0.23768777046165812, 0.2582642028070381, 0.1627661759629846, 0.7450043259945909, 0.20733165605443782, 0.38361350257599847, 0.2623168955260984, 0.203719333390873, 0.5805187008780046, 0.4899538470359387, 0.5466467067606653, 0.4578916385168186, 0.4266579019649296, 0.3910984658556066, 0.6319793104988105, 0.6526488302939057, 0.6126249331909828, 0.3219633293775488, 0.3490709274747248, 0.3296841236175001, 0.31537075850123686, 0.38093672507392307, 0.3925469127633622, 0.20953508268596766, 0.351158763190223, 0.49035980398396206, 0.24448731803421364, 0.23117925508182213, 0.21126157943590984, 0.2187476033225202, 0.22812122458857498, 0.1982091861110744, 0.20036281594029504, 0.20636554728966916, 0.2158750849087282, 0.6677983018145348, 0.19954042833790253, 0.23790644019665885, 0.23970366591876757, 0.21165754955972826, 0.21883598963068884, 0.2255429633082897, 0.5910790053884926, 0.20452505149907008, 0.872095355232259, 0.16409523085694167, 0.1526876318567456, 0.899489473938377, 0.19987305248078568, 0.8605078376231403, 0.16882959427480815, 0.16905271264658217, 0.18298402699152772, 0.7400730171948717, 0.16707179523489035, 0.7030463390386942, 0.7554297514379276, 0.163510957382889, 0.20807928246657736, 0.21339676589892664, 0.8104552174856096, 0.12684360720694143, 0.20527901639706747, 0.19944384457953446, 0.19376908392917092, 0.2046962683200393, 0.18510052712161773, 0.20331423661323655, 0.19336579913683494, 0.1925689227649331, 0.19431495758189055, 0.10588137257684771, 0.09941295342140333, 0.07974688551838027, 0.10352184554685884, 0.09698846031876351, 0.08867347671261783, 0.08209415590920521, 0.08105754018839562, 0.09464378824171238]}, "mutation_prompt": null}
{"id": "4249342e-1318-4d46-92bc-fa8f1c8bd9f7", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.4\n        self.social_constant = 1.8\n        self.F = np.random.uniform(0.5, 0.9)\n        self.CR = 0.85\n        self.quantum_factor = 0.5\n        self.func_evals = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                quantum_jitter = self.quantum_factor * np.random.randn(self.dim)\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component + quantum_jitter\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveQuantumPSO_DE", "description": "Adaptive Quantum-Inspired PSO with Differential Evolution for enhanced exploration and balanced convergence efficiency.", "configspace": "", "generation": 52, "fitness": 0.30793203760944676, "feedback": "The algorithm AdaptiveQuantumPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.7389146815305883, 0.7696243349800413, 0.764697772850246, 0.7452417247873679, 0.7838075803124498, 0.7810433065385953, 0.7389445144819708, 0.756014470729073, 0.7646194836296596, 0.5502054038350532, 0.4982289385753744, 0.5022909583211675, 0.4900914651380823, 0.5492894939322834, 0.5229778567673407, 0.47499213473105184, 0.5309347163901061, 0.5514256763547323, 0.11308972297605802, 0.09212525207577815, 0.10752283180310951, 0.10558015873105253, 0.11408415810676176, 0.11367944979290767, 0.10770168642680034, 0.11825197512798225, 0.09755743701457176, 0.09793641524759733, 0.09292223574612313, 0.09911703217695689, 0.10449767273847554, 0.09977198776073148, 0.11918441359344922, 0.11514896970699118, 0.11231971984968403, 0.09168063925596759, 0.9821032980598532, 0.9641018661296018, 0.9799678543823483, 0.9810916981896535, 0.9674629351947448, 0.979998017313258, 0.9805599032040948, 0.9908233162636628, 0.9804672246740388, 0.35943697294516874, 0.4257465737731072, 0.3682963351215285, 0.3900133636991471, 0.39693906276565094, 0.4186816872522505, 0.34283769042154066, 0.36175929433452625, 0.3941981061521407, 0.579449180776376, 0.5498616815145683, 0.4600538608512078, 0.6356710691433931, 0.6759186215173132, 0.5779981910616651, 0.6017031985680537, 0.6307723413826939, 0.7326464569381602, 0.22090965183795297, 0.16376409447869633, 0.24730482423065736, 0.23039174283291763, 0.22291893883295844, 0.19113708959722175, 0.23600872204413958, 0.22421014095935687, 0.2418780785830138, 0.21877270236907775, 0.2398404906795758, 0.2595991677628502, 0.2656525477707037, 0.26884044010348573, 0.34072410220192495, 0.2375801724889406, 0.22616771524415447, 0.1908468827303429, 0.1641232623614869, 0.14063406893347363, 0.1958345567251224, 0.1494918476981444, 0.22253148329349848, 0.14408466969525058, 0.12591759295613525, 0.15070197823385312, 0.17869380818273206, 0.2570527677768648, 0.33970125514773697, 0.2800113704336308, 0.22830475907593284, 0.32292112429412556, 0.27133371928308814, 0.28562093425827895, 0.348316529639382, 0.3209885582011439, 0.032636853545884525, 0.025422436889121713, 0.103149510356766, 0.034219113673759294, 0.08246107489484089, 0.07145149838648612, 0.0734474128835031, 0.12998057469986857, 0.07129546285041888, 0.2005616759186486, 0.20454381399096766, 0.18260996958196973, 0.19559575178970245, 0.21459681177899814, 0.209543598612553, 0.18991709117350752, 0.21152104080801282, 0.1365396132470743, 0.5359921959254086, 0.5778679558675133, 0.5626472279791783, 0.534147835626801, 0.5999616151954706, 0.5928615333619394, 0.5589996753408548, 0.566457993080731, 0.5245727739822238, 0.10255014115680261, 0.08802988788124744, 0.08562161757183384, 0.08410811938229512, 0.11053722631631224, 0.09704318638793175, 0.09038998731822068, 0.11772891119771689, 0.07924469868094586, 0.1600799132284012, 0.2006250441214087, 0.3241418057815517, 0.19122674498553083, 0.21042922932526764, 0.1646070977319214, 0.2741623424026861, 0.22276976537647708, 0.1384348555199234, 0.3122040953549232, 0.33747005838922417, 0.3335396087604826, 0.3338203070260738, 0.3400920025241617, 0.341241334586153, 0.3144133514623213, 0.358041547712891, 0.34570488084854445, 0.23570589235058237, 0.22883731460368473, 0.24645954614484733, 0.2193669989990934, 0.2741439131259643, 0.23597483965553523, 0.2605972114607765, 0.2333475841666104, 0.2559946114694541, 0.18567395725790525, 0.2000824823720463, 0.21615607100685164, 0.20428788028974854, 0.1915429153780539, 0.193348409767498, 0.18339671048202777, 0.20580445892926924, 0.20447035991161666, 0.18682558013045703, 0.1829689075874169, 0.18814526877769666, 0.20663075012336862, 0.182700657170067, 0.21650757040552393, 0.19259305301344598, 0.19284055125093102, 0.1854754923363856, 0.18102794817779133, 0.7668721237944672, 0.7699956286596092, 0.191361781646759, 0.18203011817136194, 0.6653841003529141, 0.5257002770587832, 0.18483928998199073, 0.16368220753395057, 0.19978186924485852, 0.206744460579126, 0.20572425120866633, 0.6048810034655125, 0.16695975087584136, 0.1661050534994214, 0.2123472189318948, 0.21255031193352625, 0.20386585459127327, 0.17726735825854156, 0.17557289651710672, 0.19122702320983187, 0.176539874840544, 0.17977626240586564, 0.18135906918411848, 0.1851150855383905, 0.17585621461892675, 0.1802467110771957, 0.08611016997208931, 0.0743427224768155, 0.07889516235175309, 0.07004700746140402, 0.0790336599722079, 0.08194694677745118, 0.08055055282434131, 0.08122615438638836, 0.08032727683567942]}, "mutation_prompt": null}
{"id": "ff557f37-3b34-4bda-851d-ad8fd32df009", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adaptive inertia for dynamic balancing\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.4  # Slightly reduced for varied social influence\n        self.F = np.random.uniform(0.4, 0.8)  # Adjusted for wider exploration range\n        self.CR = 0.85  # Altered crossover probability for diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.rand(self.swarm_size, self.dim) * 2 - 1  # Random initial velocities\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Quantum-inspired random update\n        def quantum_update(position, best_position):\n            return np.random.uniform(size=self.dim) * (best_position - position)\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = self.inertia_weight * (0.9 - 0.4 * (self.func_evals / self.budget))\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component + \\\n                                quantum_update(positions[i], global_best_position)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n\n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveQuantumInspiredPSO_DE", "description": "Adaptive Quantum-Inspired Hybrid PSO-DE with a probabilistic update mechanism leveraging quantum behavior and adaptive parameter tuning for enhanced exploration and convergence.", "configspace": "", "generation": 53, "fitness": 0.3723496667801007, "feedback": "The algorithm AdaptiveQuantumInspiredPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.840073744826809, 0.8476136800959819, 0.8558053709164113, 0.8560448035943303, 0.19010013360405487, 0.8777952538996991, 0.856205677331807, 0.874179465442202, 0.8686571316717341, 0.6836687889326434, 0.7218660815671192, 0.743696626373386, 0.6875116021172414, 0.7009414785874204, 0.04816712983871507, 0.694111127077696, 0.7358452687326533, 0.7182653774692437, 0.16842883852154067, 0.14897395809730096, 0.607020144628144, 0.14964064592019644, 0.5941268468788907, 0.15765125784723044, 0.17244490291239778, 0.1561410775220251, 0.5439415984404465, 0.5543062463402738, 0.14135303626219753, 0.11861676101769514, 0.14549844859968053, 0.13360675100711394, 0.14180989933810584, 0.14427170201986306, 0.14135329454933077, 0.1748693213409237, 0.9891295960959504, 0.987430830636033, 0.9739302279278882, 0.07458568098789731, 0.9888434597828608, 0.951079409319439, 0.07460235071044952, 0.9928623679820746, 0.9813517302184412, 0.6707519899226635, 0.675452704185425, 0.5468644013399582, 0.6614328623042409, 0.6716403596872452, 0.6468000548545003, 0.5968741925947061, 0.08522995178204607, 0.08859726272046864, 0.37039980408692796, 0.815830032871892, 0.7477678112445518, 0.8254805714375448, 0.8141270803563907, 0.2746120576502563, 0.7632583547702861, 0.8336175392606131, 0.8127840307310554, 0.3916734240730694, 0.4506121038973818, 0.36363947911444106, 0.33318578463593085, 0.3120850803906353, 0.13362673022664295, 0.3191091051795477, 0.2638542756273451, 0.3839528937386518, 0.33389645775762355, 0.2718068624186758, 0.12976165846744248, 0.4157734399967836, 0.36567878827000855, 0.3752327235687166, 0.4688787625215125, 0.4397536796802075, 0.4229048625701608, 0.08693094444039429, 0.09663554069134428, 0.3472396932425812, 0.28123755264166217, 0.028984543159461085, 0.0758652256721618, 0.19823709249748267, 0.34066514627548117, 0.051080532751765495, 0.23548568812513704, 0.09043518416840923, 0.2355086130748424, 0.062222182460527464, 0.4425647562247885, 0.13247500393107625, 0.3984073225867496, 0.4535958682383422, 0.3049424956265906, 0.06522672418286346, 0.057052688772779914, 0.24968239420112703, 0.16227243357408516, 0.11293091807813782, 0.13373659196475074, 0.11989513092910198, 0.09893797531864168, 0.07964519108588042, 0.2587285166297787, 0.30488067559691046, 0.322935409314716, 0.31942042512632596, 0.35401207941122204, 0.3185015420393065, 0.31707708209120444, 0.3158971450593001, 0.2364124999000744, 0.7399489970081754, 0.7428036647650118, 0.7374682516833551, 0.6854885420575935, 0.774662772009672, 0.6946544487590557, 0.7303209544325868, 0.639817404417053, 0.6336256779363709, 0.13401063341516783, 0.1466147678531352, 0.08242268969967481, 0.12550226826530653, 0.1498758691136205, 0.11879942181014991, 0.12947207474128442, 0.10171717067122132, 0.09954052401599167, 0.6317352867348731, 0.2466755526836163, 0.30142510107865406, 0.45175365519401456, 0.1587975635677531, 0.1287565631527936, 0.15127376055988695, 0.40882682946273263, 0.5059003941317877, 0.5649320239717657, 0.5771774362299317, 0.533923669682173, 0.584933310009033, 0.6176193331472359, 0.5474384501346917, 0.5903013889666477, 0.6033774695305194, 0.6015608234277061, 0.3795335996660676, 0.3635583833846313, 0.3483666257767837, 0.3210991632406125, 0.29326633057418205, 0.3999476759327326, 0.42790481966214944, 0.37053475609908015, 0.3992408217362723, 0.22732713934403748, 0.2088985723804021, 0.225942677869287, 0.22569406221655652, 0.2304411153609145, 0.1954189798499859, 0.2212810050203694, 0.18748088794306783, 0.2432298178770439, 0.2343098243800471, 0.6096235871669293, 0.6395522292557818, 0.2091472964512685, 0.2216817232427335, 0.2398134408301228, 0.24202377058996105, 0.21354182718150982, 0.5569010094331783, 0.17426811580184698, 0.26547509810345227, 0.8639771467444047, 0.16770084006447994, 0.8886631719478856, 0.12227079191183621, 0.1755002659084568, 0.1774619764067631, 0.1593613658443661, 0.20504369228880315, 0.2036029779057138, 0.16991670101709166, 0.16749028294554047, 0.1646038097207274, 0.2058457363233711, 0.2143412216210533, 0.20954848592291342, 0.10483341567503979, 0.1847828924347955, 0.19283666212729633, 0.1919400921560599, 0.17906888390340758, 0.19703535029908392, 0.19759809061489708, 0.24349462275261347, 0.19597077700472898, 0.17896489392318382, 0.09270522675976867, 0.09967906630889867, 0.08522145462653496, 0.12300143464752511, 0.14584089996979677, 0.09600110185112376, 0.10558135533509505, 0.09313251409357359, 0.10072661274956174]}, "mutation_prompt": null}
{"id": "cbab8d24-08a5-48a7-9d51-e2f0fb1b3267", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Adjusted for stable balance between exploration and exploitation\n        self.cognitive_constant = 1.7  # Increased for more individual exploration\n        self.social_constant = 1.4  # Reduced to decrease premature convergence risk\n        self.F = np.random.uniform(0.4, 0.85)  # Adjusted scale factor range for diversity\n        self.CR = 0.85  # Adjusted crossover probability for better balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of parameters\n        def dynamic_parameter(base, evals, max_evals):\n            return base * (0.8 + 0.3 * (1 - evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_parameter(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveMultiStrategyPSO_DE", "description": "Adaptive Multi-Strategy PSO-DE with randomness infusion and adaptive control for enhanced search efficiency and convergence.", "configspace": "", "generation": 54, "fitness": 0.3981657876793339, "feedback": "The algorithm AdaptiveMultiStrategyPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8657947291895793, 0.8763963118011147, 0.8704106100799868, 0.8533132778434585, 0.8690429273741065, 0.8842864556690053, 0.8739548934494911, 0.8829932054332532, 0.8980358600217808, 0.764120506914615, 0.7667931718361496, 0.7628347736141377, 0.7593437768310661, 0.7638531320546273, 0.7742786469050058, 0.7660783526150017, 0.7703455617337416, 0.7514062653807804, 0.6233341153140656, 0.14139900264714378, 0.6371339930760591, 0.15354525655468132, 0.17887857571063992, 0.17397848290082985, 0.173899235715252, 0.1421580116144231, 0.1497816266805807, 0.1467037723872603, 0.13536874659522546, 0.14454162361332912, 0.11244816974813143, 0.11968098942864513, 0.12795998992270796, 0.14733498817732593, 0.14714813300087481, 0.13692947523949883, 0.9839965008333805, 0.9857580246689767, 0.9781549860224612, 0.9876314694336368, 0.9857108561891023, 0.9839609552910455, 0.9690180885708279, 0.9937965936494206, 0.983745507262208, 0.7657734112927783, 0.7389406957372581, 0.059484201108971124, 0.7126183153037486, 0.6784772780236878, 0.7415310313400821, 0.7192322063807245, 0.6438086829490497, 0.6803526127243559, 0.36782176441022174, 0.8315365044353653, 0.2244695525127105, 0.8492526647148241, 0.16140361929563674, 0.8313119826340294, 0.8458341911202951, 0.41081575267304116, 0.38723056645227216, 0.38720492553736574, 0.3916154775045124, 0.11965736766201429, 0.4929270513913161, 0.3396840811329638, 0.13444211593763689, 0.4180078522524525, 0.5160410467509071, 0.3571699110073987, 0.4108726381692134, 0.2918957821637663, 0.3966311092449647, 0.5275859613067977, 0.47924783120784764, 0.36115721686225966, 0.397115996232946, 0.4113171857173409, 0.3045960607520044, 0.28708364965764754, 0.39994313727034236, 0.23443744833421498, 0.3041494308565299, 0.4099247843043565, 0.15617984495261372, 0.2634659825015133, 0.20957451991590192, 0.23050414033120648, 0.46418204823739906, 0.47214088552072075, 0.4886511680988601, 0.4456285826145274, 0.4701157948885184, 0.15504848450089537, 0.5042709206516947, 0.5109169892321723, 0.26098231642329606, 0.03616183769017567, 0.11289353809377478, 0.18885596090599588, 0.12936346317791525, 0.08584364357824958, 0.1201017977556259, 0.19814758493755102, 0.17688560020625732, 0.12001895515674454, 0.25287699517278617, 0.2686118488443592, 0.27738731546210327, 0.3054273222072931, 0.29090712624317117, 0.30534603523853543, 0.26648064598888044, 0.3749189836453036, 0.0, 0.7275327532262081, 0.7542996556161818, 0.7653589701522361, 0.18276543566318026, 0.7361311224958283, 0.643166860469981, 0.7076166882062445, 0.754384891261328, 0.7100966023802722, 0.13385490837570213, 0.1166371876839738, 0.1571185790171199, 0.1562176040969252, 0.1692559795994072, 0.15630846136280052, 0.147192000640607, 0.1110394533843817, 0.1410113547858236, 0.36448643416012405, 0.14847571525656256, 0.34792801841464194, 0.15282423618802454, 0.183581590056487, 0.2709532687996603, 0.14666242212635028, 0.18623468083018524, 0.43304466350330595, 0.5675767232470383, 0.5365345311174051, 0.5499501358729758, 0.36577480101137194, 0.5748659309674702, 0.4261438753651089, 0.5213248862266459, 0.6516302698379094, 0.5875211571300978, 0.3408557578793753, 0.44458381201525854, 0.3600790543946133, 0.32134347846814915, 0.23179401874728933, 0.3981135616326975, 0.34126907703725273, 0.3261343546875419, 0.27111414241165943, 0.21681662771368015, 0.23599082898472823, 0.2383889121192888, 0.20690371535631558, 0.21106820036285823, 0.2550661316013456, 0.1980139785010171, 0.2523045146761512, 0.20577168640492816, 0.7287252000550934, 0.19642856744002946, 0.21746943048967082, 0.697438916352364, 0.21985113744798523, 0.19132993553831246, 0.2465712550343161, 0.2323918638213468, 0.2471291339580266, 0.18452456648129978, 0.9168009922460526, 0.18783504557098685, 0.162998200924782, 0.9042533754717516, 0.1404879620547037, 0.15362865166701067, 0.1774547789924119, 0.1764959869966557, 0.7840766403311159, 0.8535982260158488, 0.16971854423223487, 0.15395031338521925, 0.16670131602619453, 0.8632506279664522, 0.18956614018555795, 0.21316401119045514, 0.2101145210835974, 0.19239350952151102, 0.209087776085506, 0.19745544735596476, 0.1923416282471324, 0.19488254527727822, 0.2050139253878892, 0.18520987328796978, 0.19168762217807767, 0.21042536435658732, 0.09873758938706523, 0.09911355872564254, 0.09341391131141186, 0.1149900860185431, 0.1038400072951905, 0.08684874529771369, 0.13680283400583082, 0.09889855764888689, 0.1038250593302128]}, "mutation_prompt": null}
{"id": "e4c3aa33-6c42-4271-8912-3e2876b8cd2d", "solution": "import numpy as np\n\nclass AdaptivePSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for improved exploration\n        self.cognitive_constant = 1.4  # Modified for diverse cognitive search\n        self.social_constant = 1.6  # Increased for stronger social cohesion\n        self.F = np.random.uniform(0.4, 0.9)  # Broadened adaptive scale factor range\n        self.CR = 0.85  # Adjusted crossover probability for enhanced convergence\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        # Memory for storing past global best positions\n        memory = []\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if global_best_position is not None:\n                memory.append(global_best_position)\n                if len(memory) > 5:\n                    memory.pop(0)\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c) + np.random.uniform(-0.2, 0.2, self.dim), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptivePSO_DE", "description": "Adaptive PSO-DE with dynamic mutation scaling and memory-based search diversification.", "configspace": "", "generation": 55, "fitness": 0.34041733059828694, "feedback": "The algorithm AdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8507177248656299, 0.8390550511473235, 0.8271401366546934, 0.8452823604890856, 0.8322062378260149, 0.8487630610470945, 0.8397749992949807, 0.8501643371927845, 0.841999964437844, 0.5410772545997782, 0.6871150858545696, 0.6983385083209025, 0.520881217193534, 0.6591213341049781, 0.6571579549854891, 0.712795162157789, 0.642964988001275, 0.633800869493845, 0.15284069743582562, 0.17760990751673233, 0.4822005489059751, 0.1610893820202316, 0.15118721540929636, 0.1714161020802929, 0.14920231759182678, 0.15850283714371705, 0.29802213321910453, 0.12941850604608263, 0.14624516559606926, 0.16541680555527105, 0.13823485932073676, 0.14079945282821082, 0.112560149376705, 0.13044082628662013, 0.15880338862797994, 0.12401882328702218, 0.98802105087968, 0.9855504580170917, 0.9811793991752163, 0.98103800849122, 0.9888346104559299, 0.9824324619017097, 0.9884751527849938, 0.9915331631847281, 0.9867757962189454, 0.7010973450992629, 0.6539541458745624, 0.5784197689050394, 0.5412451433209026, 0.6271441858272769, 0.6451833927009172, 0.6485215008806513, 0.6654667090011044, 0.6703864616875614, 0.3597116794756118, 0.3772727670820687, 0.7988338587648365, 0.772994193137541, 0.28071035942538203, 0.582088770654765, 0.6233563484945879, 0.5671117150140546, 0.2310432279034198, 0.19122396902150063, 0.2093106722491358, 0.20016059539388176, 0.2056545761482823, 0.21815381953168922, 0.20392393768563855, 0.32379286784457917, 0.1887323997232654, 0.1896291862125672, 0.19316649135500186, 0.2047281953107868, 0.21379625076062347, 0.19172054117959414, 0.18669284534709008, 0.22213574036631645, 0.2233320927847845, 0.23693067545526614, 0.24451485522124172, 0.015360289071657873, 0.026643979369421644, 0.005204286620110521, 0.06420293204464655, 0.06514554432383535, 0.0068205610338469835, 0.059266060266366494, 0.00751563760295737, 0.028566410018032506, 0.09798498510122733, 0.11863151851278786, 0.060820908760105374, 0.1137313698109137, 0.08376760981975817, 0.13669748104106116, 0.05533856263708148, 0.07311550760547891, 0.06632140478275816, 0.03309830218195997, 0.32006211716743793, 0.17681808814471445, 0.10117763242285416, 0.08976732477432103, 0.09900377945599559, 0.06381644077761317, 0.0945106394102384, 0.07416198999498924, 0.11734876829127183, 0.18763929116728817, 0.1858150891625595, 0.11889142187037027, 0.1594427543338961, 0.20320882861017198, 0.18280332241512087, 0.15897191239143216, 0.14978877599563512, 0.544564771616753, 0.5240748237653838, 0.5319331743459372, 0.581462465623598, 0.5599039546246729, 0.598665631279791, 0.5377681707203203, 0.5267754825107303, 0.5135701596560074, 0.1319835403042411, 0.11890853606409602, 0.11017764481047321, 0.12887444814003846, 0.0934769723214458, 0.1123655263968536, 0.14600745080910382, 0.11105392158035032, 0.1137241117805674, 0.27248371624783996, 0.3574182557255533, 0.2496110266486532, 0.30266109390880924, 0.19295716996980883, 0.22178828113113125, 0.17996036400631965, 0.22104058505799784, 0.19567493022793092, 0.3715781520072877, 0.3514624859949459, 0.421284924136872, 0.504910540097522, 0.39092049238973325, 0.5117123215322719, 0.32700771346561286, 0.40747839207600667, 0.4889116283639413, 0.30166493858344856, 0.2680132123331592, 0.2897410021202299, 0.41034293846396774, 0.36423582082528483, 0.3025615924664986, 0.28855119743625823, 0.26388694437167703, 0.25904257893881844, 0.21271280563470674, 0.2810485132208861, 0.23088191389712787, 0.24944297582881736, 0.24591441988897123, 0.21042870243606115, 0.21840316035037521, 0.20526326450870813, 0.2434296541704919, 0.6857977945373825, 0.22361886663398034, 0.2112842697562104, 0.2075694408893619, 0.6581255695503518, 0.6622910228361099, 0.7081612986317939, 0.2744516185719066, 0.23735622225508335, 0.7970038586994322, 0.8760978240995922, 0.16548082659067254, 0.1955634504319098, 0.8533605962215973, 0.8381930047395537, 0.15800088854694372, 0.8444044048122178, 0.1630529775322106, 0.6027286783636168, 0.16909321166110403, 0.1691386090264767, 0.20772889895272606, 0.20426194245076157, 0.16884187663155792, 0.21320031126219197, 0.2137421045004113, 0.2120787454153864, 0.1910066323884485, 0.21268120121144707, 0.19379971998019407, 0.1782325834937255, 0.18964428250250331, 0.19156140098877938, 0.1985306561256741, 0.19557868616174368, 0.19305909736774685, 0.0936160352059977, 0.08816039420689126, 0.08698415356285072, 0.12893307792990416, 0.09444448666718364, 0.13621106285991058, 0.10996602169753311, 0.09972757369478347, 0.1038512559144954]}, "mutation_prompt": null}
{"id": "25a291d9-ab55-43cf-94e9-ab0eefdb3c79", "solution": "import numpy as np\n\nclass QuantumInspiredPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.72  # Adjusted for quantum-inspired effect\n        self.cognitive_constant = 1.4  # Tuned for dynamic learning\n        self.social_constant = 1.3  # Balanced for quantum influence\n        self.F = np.random.uniform(0.6, 1.0)  # Enhanced scale factor for quantum adaptation\n        self.CR = 0.85  # Optimized crossover probability for quantum effect\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.swarm_size, self.dim))  # Small random initial velocity\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Quantum-inspired dynamic inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.95 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "QuantumInspiredPSO_DE", "description": "Quantum-Inspired PSO-DE with dynamic learning and adaptive quantum gates for enhanced exploration and convergence.", "configspace": "", "generation": 56, "fitness": 0.40368705628586177, "feedback": "The algorithm QuantumInspiredPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8353752175630285, 0.8198151359816575, 0.8129829865189877, 0.8440184454434956, 0.8384428535981939, 0.8473057592039391, 0.822014707258709, 0.8394647893607753, 0.8434459847408698, 0.6579991877277465, 0.7031465747516157, 0.714430828659671, 0.6836561092747282, 0.7010606171188438, 0.6993564789668458, 0.6897034150848083, 0.7097154383994104, 0.6793813652655043, 0.1490059417678924, 0.16339853638264923, 0.14762819036034447, 0.17424916194770068, 0.14362899729109446, 0.12090806735169568, 0.1370325714099998, 0.1720414475621146, 0.16782923290948926, 0.43955670874760666, 0.12781669981221078, 0.13614289325948736, 0.11454398949878464, 0.15370027920440077, 0.14815521550429422, 0.13809422795522786, 0.14464078975955474, 0.14732611728348022, 0.9873814398766605, 0.9804649546615151, 0.9809180693808363, 0.9836534409907965, 0.98171718582136, 0.9599240102587707, 0.9814057773721886, 0.9918606229709116, 0.9813745143245279, 0.6826147470247825, 0.7160142443149031, 0.6906846635143524, 0.687987375739959, 0.6831123368878877, 0.6657211903192292, 0.6527281252563573, 0.6517519453331804, 0.6817400300239369, 0.7752631674125379, 0.7762410829249674, 0.7783923978368714, 0.7069103277368848, 0.7858762786084852, 0.7633491751373029, 0.6995129677582268, 0.7675911611716739, 0.8226757814815415, 0.36553955583497544, 0.5017709225983804, 0.3090858764358342, 0.13093612007777844, 0.3618702868324636, 0.40321902783039965, 0.42590512083540866, 0.404076166670167, 0.39947716324993376, 0.32338848402667586, 0.48570824978044636, 0.38790923487314954, 0.366717257274066, 0.34541461103465576, 0.4311928401768127, 0.3280814180394207, 0.4312737908953227, 0.43003565041499214, 0.1733575433081751, 0.2042142590341297, 0.14035126705123457, 0.16925882505608747, 0.19396958142840892, 0.1864793265898642, 0.16024630603098844, 0.1460035364786041, 0.14450047301088143, 0.3009519923567162, 0.39604711558352823, 0.2755701679602205, 0.30394081147310714, 0.3239248601122736, 0.3213725758602556, 0.3488375120543753, 0.37533401172923475, 0.3584730262780943, 0.07864600481634976, 0.07417157581687717, 0.18859945551885215, 0.15616267335376344, 0.19980613056200602, 0.0987639616901893, 0.27240243643703044, 0.06490821054160567, 0.08625128100400048, 0.23901157605246404, 0.22464234131020422, 0.31984263213299113, 0.2685172512155124, 0.24224001015801555, 0.25946186899248236, 0.24177824469695175, 0.2931000455062376, 0.17889275643685143, 0.6614233475204414, 0.6435569107411909, 0.6580855208297137, 0.6448789217602653, 0.6560117231161448, 0.6749120601652054, 0.6071577365759298, 0.6578613868210743, 0.6709870910717848, 0.11460601943795568, 0.12235231274107305, 0.13844111977533435, 0.12925815942881924, 0.5181311407472597, 0.13725854949852423, 0.1344524865107093, 0.12970921001732227, 0.16680437938809756, 0.18735496753924152, 0.23987291142649347, 0.20569291563017011, 0.2498201472485322, 0.19614135599260096, 0.2244417468820188, 0.18560821426925467, 0.17594402013738275, 0.20656828602007682, 0.39534530724956296, 0.48173340340042436, 0.507984306216547, 0.5093099562984651, 0.5392729832251257, 0.612769022997117, 0.6333697666146085, 0.6005141861800617, 0.6008071232013603, 0.28257740737555137, 0.3580626426364605, 0.41654269123824783, 0.48033575942687357, 0.36416336863182364, 0.47687391665490864, 0.3449938510864705, 0.3635635330245168, 0.34144469382957854, 0.199770314585895, 0.24706886415750173, 0.2165042671394226, 0.22339941150390663, 0.22831421149663012, 0.26797229935080435, 0.20258385681104107, 0.21848684831529452, 0.2138157681825763, 0.23759181482359149, 0.23661165113289817, 0.23498378570654055, 0.6505396086256314, 0.712291982782169, 0.2218378951524007, 0.6725672585372319, 0.23990979500615672, 0.5749775284399978, 0.14551039668779342, 0.8628675268418541, 0.17643670194160388, 0.19874784057180173, 0.8882254601594208, 0.16807555545635444, 0.8484212507700475, 0.17888819603375927, 0.16832893921851078, 0.7896889792818887, 0.16772824141334186, 0.16767104509711794, 0.7400243636460795, 0.8045185687148205, 0.7455527721762418, 0.1989726885469164, 0.21358571146724248, 0.16744109948383246, 0.22086656632613566, 0.1871823309849816, 0.18499944801833035, 0.22255272103809343, 0.18400192174518548, 0.1864765269453389, 0.19560053358724694, 0.18774841956961108, 0.20081533402211837, 0.10337039534507442, 0.09361658326234812, 0.10044854071394216, 0.1277278464534951, 0.1472681307104562, 0.09815872772275902, 0.17219374765672568, 0.08360868080385153, 0.09734324141486306]}, "mutation_prompt": null}
{"id": "ee0f5cd2-8831-4214-968f-e08b15910730", "solution": "import numpy as np\n\nclass RefinedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Reduced for improved convergence\n        self.cognitive_constant = 1.4  # Slight adjustment for exploration\n        self.social_constant = 1.8  # Increased for enhanced social influence\n        self.F = np.random.uniform(0.4, 0.9)  # Broadened adaptive scale factor range\n        self.CR = 0.8  # Adjusted crossover probability for adaptation\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.3 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "RefinedHybridPSO_DE", "description": "Refined Hybrid PSO-DE with dynamic neighborhood and adaptive mutation for improved convergence and exploration.", "configspace": "", "generation": 57, "fitness": 0.37765610047779735, "feedback": "The algorithm RefinedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8679356800905202, 0.8673596351491037, 0.8713116155896046, 0.8778487666460422, 0.8731863278002792, 0.8744766247591392, 0.8535382465826385, 0.8701952089720444, 0.8760648446025907, 0.719816196593513, 0.7513212165472363, 0.7323658183170041, 0.7567630100250853, 0.7183422839952514, 0.748259815587889, 0.052936698226201395, 0.7459682970088569, 0.7285550367906093, 0.16510458571931574, 0.15342055524587317, 0.1447666507469556, 0.17193443635588468, 0.17217883869564465, 0.1648324779776158, 0.1308699112328886, 0.1501950370534887, 0.16303540650378912, 0.1517311990606024, 0.15154927459584322, 0.13599436404050358, 0.1387133895279814, 0.17352741081446799, 0.12402304556856891, 0.5949793610478515, 0.1434736932122591, 0.11337191835455851, 0.9816368973574677, 0.97064860215483, 0.9707705280986683, 0.9851064301140938, 0.9798467771993997, 0.0989204697430448, 0.9810023356150356, 0.9879828767153757, 0.9853839546869569, 0.7013115216169244, 0.6913355799120613, 0.7022185983596003, 0.7195782771611876, 0.6988028246328846, 0.68513016972847, 0.6501456014364326, 0.7012490674060858, 0.6920977236317853, 0.7484583087111194, 0.3662961323752433, 0.14005087480738254, 0.2123752003181496, 0.8417839591113776, 0.21214247431299793, 0.8291684857878762, 0.8438339468006636, 0.791078976629805, 0.3116138164787384, 0.40390860317101773, 0.12231428539129652, 0.31458067233065756, 0.3020659174575475, 0.3354184032831897, 0.3292779713546119, 0.26116735984178074, 0.3350858654510196, 0.2711511762671891, 0.31630647528069844, 0.2796488012582614, 0.36222604058720176, 0.3779783898441247, 0.30228601020999735, 0.3132739192871564, 0.2891620914112848, 0.3942215458426671, 0.14422415848243286, 0.1292737250437438, 0.2017054171245154, 0.15798573753420408, 0.1951048756289404, 0.07925539171322926, 0.06354012177460977, 0.15579995023599025, 0.2531953639611333, 0.20613658438835936, 0.3231690639215321, 0.2606431284692793, 0.24689132495767685, 0.34276241245528516, 0.2368415272816049, 0.3030747465019845, 0.28727500583975485, 0.3110369151071052, 0.03758105345918339, 0.07204417538263785, 0.05599761414219395, 0.08371595971201129, 0.17892210665257824, 0.1769341092854989, 0.09245601359866851, 0.1390679326834685, 0.09819246244383484, 0.24563956421027477, 0.4632296836292076, 0.2949839269824355, 0.3119191786983402, 0.31988347886746993, 0.3178623113813376, 0.246059080804772, 0.22712483555624152, 0.24792656072421693, 0.6799555822550316, 0.6232944242233648, 0.647151458953042, 0.652186110171161, 0.6756215119757288, 0.6836750726282126, 0.615666771322684, 0.6612558682008891, 0.6668946571630713, 0.10833471905936054, 0.0854025054500227, 0.1077692607169114, 0.1356310441902986, 0.13609447659795293, 0.12919988143660088, 0.13834381034769905, 0.1334500271761757, 0.10892855857877914, 0.27804488093438473, 0.19799464943691714, 0.5730824471679095, 0.22241992774787445, 0.22724461428319598, 0.22264301402393472, 0.19852856514551553, 0.19807687253571093, 0.2400290885345957, 0.45811573308097, 0.4912124270212115, 0.505144981505298, 0.4234252901402179, 0.5613012734334237, 0.6250453295994776, 0.6758313497250152, 0.6842352507086055, 0.6357172364947106, 0.31467500468993925, 0.31933044344762807, 0.365864115595, 0.3787795903880289, 0.3165560101401603, 0.4371697275059935, 0.35487836136691475, 0.3852638440990178, 0.3304931967344278, 0.2128496352529492, 0.18516411550661727, 0.23490417885527393, 0.22044423205192964, 0.23197141125293697, 0.22398077843897113, 0.19589171628563895, 0.2386710672663246, 0.24353528455137607, 0.25020646052603424, 0.7426571385599685, 0.2457763279831866, 0.24686120987768223, 0.23812289084268778, 0.7215341814284266, 0.22109556213354176, 0.2523916699933071, 0.24708358512776252, 0.1488069728664998, 0.8997424050263786, 0.1832473660510462, 0.19955535530485913, 0.8825293005896923, 0.17478060246785498, 0.15812311026120784, 0.17182537523803332, 0.15919087499501672, 0.727453170287964, 0.16844323818868756, 0.21240257774366655, 0.8306893926538182, 0.7524833657160768, 0.16858237151812938, 0.1987507607907102, 0.19928109246711634, 0.6975190931682526, 0.18880594389174676, 0.19888066985636466, 0.18687193252038048, 0.1797203511347356, 0.1872587681951331, 0.2010696940176241, 0.2136444715296788, 0.18769636694401848, 0.2000891014907168, 0.13456048962640776, 0.09518602824989886, 0.09656195414193902, 0.09011745544657257, 0.0935068458640852, 0.0973385455858996, 0.1000589681496995, 0.10435662148914804, 0.09404034102066638]}, "mutation_prompt": null}
{"id": "1334b363-ddef-43ca-b218-9febd0c70d79", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for better exploration\n        self.cognitive_constant = 1.4  # Balanced cognitive behavior\n        self.social_constant = 1.7  # Increased for stronger collective influence\n        self.F = np.random.uniform(0.6, 0.8)  # Narrowed scale factor for stability\n        self.CR = 0.85  # Slightly reduced crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1.0, 1.0, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of parameters\n        def dynamic_adjustment(weight, evals, max_evals):\n            return weight * (0.5 + 0.5 * np.cos(np.pi * evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_adjustment(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with dynamic parameters and multi-phase strategy for enhanced exploration and global convergence.", "configspace": "", "generation": 58, "fitness": 0.397128550077833, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8193568362310039, 0.8255913926425418, 0.8212134940222704, 0.8459679024005933, 0.1820065091961418, 0.8264015114119384, 0.8200388919268644, 0.8243631229910574, 0.837938295705486, 0.6640834092418129, 0.6728110348327567, 0.7029028094482952, 0.6807043567541415, 0.6868387055868668, 0.6756939313099599, 0.6976411180654662, 0.6781605961229712, 0.6979842243621368, 0.14706777696707163, 0.1419286163489515, 0.12295164067135489, 0.14410858604421883, 0.14050935155681055, 0.16115040681142778, 0.17291199339406882, 0.6445167697888026, 0.0673940681678703, 0.11227542065188412, 0.15828185193565092, 0.1264175608081709, 0.15237789977853755, 0.13215091950304503, 0.15092426754091415, 0.13071643640392827, 0.11472963242106893, 0.12267717894212982, 0.9885484019932502, 0.9826070821357173, 0.9840164171305456, 0.9849095299597511, 0.978620500039361, 0.9627316359240459, 0.9820504404381744, 0.9923977264175109, 0.9809304481194576, 0.6682629554754513, 0.6876549286624203, 0.6199313287202306, 0.6388448943541654, 0.14997364541319236, 0.656942878125776, 0.08670809292271808, 0.6148917943371572, 0.6452673612082254, 0.364598992494904, 0.7600716728796617, 0.8577799091085243, 0.7570475269897613, 0.16048658812723682, 0.7834409670342619, 0.8353938607823232, 0.737435756311694, 0.7889273356359239, 0.2921990788242075, 0.34776917696960485, 0.38526331624197463, 0.3579862368487111, 0.3982545929069259, 0.34399411639651456, 0.47965334509823176, 0.4600117304134327, 0.42885669050239705, 0.33880670315604866, 0.40259216677848497, 0.3821729179818407, 0.42964500078696244, 0.4968975533521266, 0.40426910651229786, 0.40524449057329615, 0.2924176184780687, 0.48100858924286716, 0.23159800180098733, 0.23379020631664915, 0.283750248567182, 0.21300822375803996, 0.26187818124946627, 0.284060814574855, 0.26198312536832746, 0.24786864590444002, 0.3108374954759552, 0.36420980152981297, 0.4422711222182736, 0.42156100197953583, 0.4064971368094563, 0.3636669881857256, 0.3588530064567945, 0.381168931517022, 0.36068573065754894, 0.4318973879216772, 0.05889224439112417, 0.07979435549329228, 0.06538225972194411, 0.15853076177971615, 0.17736202398005485, 0.12057482084186699, 0.1240508828413005, 0.14412871889430512, 0.07929164749783268, 0.25854292000221857, 0.2642089711787927, 0.23932610157150247, 0.006080869931234134, 0.27202848157759896, 0.2701294705145997, 0.25473850334950343, 0.24107355762941496, 0.2126082097055767, 0.6614137134056028, 0.6784552977582858, 0.668737744805501, 0.6838598882488423, 0.6672691321012236, 0.6883523251648503, 0.6513122903431383, 0.6701982743225632, 0.7043778581203541, 0.14094633806949242, 0.13098418516680432, 0.08831462653093225, 0.17152249085365334, 0.12755087599228332, 0.1426949049672097, 0.11696867560658253, 0.09060133994583464, 0.5576972935445995, 0.2679811191499849, 0.19948021286015827, 0.2598756724411708, 0.3674262772143133, 0.19588948583064703, 0.16161321813768403, 0.2389114473204904, 0.18500740169493435, 0.6483943313520791, 0.47320699756663775, 0.440166639896716, 0.47844857836941024, 0.4793617951578717, 0.4385538657819209, 0.6413841663780966, 0.6633614416138929, 0.5941989598442969, 0.5142183632966896, 0.31419819050176134, 0.2806184612263276, 0.3163501793403857, 0.37334851641507616, 0.30367713572061816, 0.3526600607030832, 0.3638780355255885, 0.381728699901303, 0.34086650952362385, 0.2164352579666785, 0.21243389575821625, 0.24393265042295842, 0.20228459024003065, 0.23727685364113538, 0.19893548221548485, 0.20942997002303043, 0.21863340433641643, 0.2105694718310147, 0.6621676716320726, 0.6125031734513802, 0.19618499009432278, 0.6442246332209538, 0.2311577109211137, 0.23882734761753988, 0.23304753974220882, 0.6296264604427688, 0.671114744841208, 0.1647346625471522, 0.8399244858311473, 0.8524698339544294, 0.16658278164964957, 0.8679793116372899, 0.8400667849950365, 0.15681877237664898, 0.176055194722319, 0.8101657147073706, 0.1273714368071629, 0.16778993752053828, 0.21110153914270535, 0.20854760628390467, 0.7775032530039663, 0.7018160188768667, 0.20943413058880767, 0.1995382728146986, 0.19656829191785852, 0.19441333016312834, 0.20907028245644788, 0.1892129349906878, 0.1830262098294213, 0.18443867907535827, 0.17997809869336812, 0.18692123117659243, 0.19098475277246063, 0.18369954833783309, 0.07727081551934878, 0.09441759176429554, 0.09028705009927784, 0.09266090545194461, 0.11377596650807575, 0.09850024454176143, 0.10891031629476455, 0.08954752281303535, 0.08669996784824474]}, "mutation_prompt": null}
{"id": "796cf641-deba-4338-9b96-6e43f283fe14", "solution": "import numpy as np\n\nclass QuantumInspiredHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Slightly increased for better exploration\n        self.cognitive_constant = 1.4  # Adjusted for even exploration-exploitation balance\n        self.social_constant = 1.7  # Slightly increased to enhance social influence\n        self.F = np.random.uniform(0.4, 0.8)  # Narrowed adaptive scale factor range\n        self.CR = 0.85  # Slightly reduced crossover probability for diversified search\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Quantum-inspired mutation for enhanced exploration\n            for i in range(self.swarm_size):\n                if np.random.rand() < 0.1:\n                    bit_flip_mask = np.random.rand(self.dim) < 0.1\n                    positions[i][bit_flip_mask] = self.lower_bound + np.random.rand(np.sum(bit_flip_mask)) * (self.upper_bound - self.lower_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "QuantumInspiredHybridPSO_DE", "description": "Quantum-Inspired Hybrid PSO-DE with probabilistic bit-flip mutation for enhanced diversification and convergence.", "configspace": "", "generation": 59, "fitness": 0.40928022440437184, "feedback": "The algorithm QuantumInspiredHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.848859262192678, 0.857950201419188, 0.8505584124926838, 0.8495404231652157, 0.8623172835919976, 0.8614195130615317, 0.8502316537100363, 0.8409782370766614, 0.8538812421996314, 0.6932347373397353, 0.7253064594377248, 0.7226090548744075, 0.6923396474127551, 0.7260548379579297, 0.7416008455932631, 0.68990731035428, 0.7486245383570298, 0.7160732361727131, 0.4966049502845761, 0.46987347487212605, 0.41439585848328386, 0.41531574550130845, 0.38841563434356385, 0.3393121497892695, 0.3154948605732728, 0.36631766397468335, 0.4638420120528921, 0.35817244225897216, 0.15027957857599672, 0.1596797598778238, 0.15111290236875408, 0.21169437732235397, 0.23793976023555485, 0.14746653218374106, 0.13940035466047718, 0.1535977115734971, 0.9881708810088878, 0.9862479701036774, 0.9834227610429884, 0.9883995182827443, 0.9884767039101129, 0.9804044651593365, 0.9885729987029392, 0.9916654852828028, 0.9847794068135062, 0.6274937544301055, 0.680207512902261, 0.6305030212664899, 0.6361727833309065, 0.672198012672643, 0.6042704512969158, 0.5127965299758959, 0.5988886876336383, 0.6438201620996253, 0.8233896917010552, 0.8524395609953678, 0.8427024826162273, 0.7974725590685793, 0.8580833125342944, 0.20658964015736736, 0.8395696549568675, 0.8432829597356591, 0.8113248015635837, 0.2026341673580765, 0.2484841756716264, 0.11634834680381867, 0.2894547181323951, 0.26423848019405305, 0.502748495693647, 0.29368173282484844, 0.2658813627157811, 0.32798860049474365, 0.34019081580655597, 0.3532893268866507, 0.3043204100238365, 0.31402414918389665, 0.22965957857546337, 0.37754170143253885, 0.3260509293001267, 0.2826627473477338, 0.3490141091116393, 0.0960810160753941, 0.0, 0.2742347726736737, 0.34417924526480803, 0.2231482315843195, 0.0, 0.333105479785323, 0.05121470701601971, 0.3265055549415775, 0.17038675490137356, 0.3335326699642881, 0.1519877387062255, 0.4255833856713541, 0.2912944097869663, 0.4972967020630604, 0.4608971905609296, 0.155063443303323, 0.4451181639165974, 0.034162149674514364, 0.23858947934454278, 0.19395227217894995, 0.1891258415387378, 0.17025212450055494, 0.08018526458875308, 0.08825307826437001, 0.16704081258990222, 0.08915926076072067, 0.30783474439479686, 0.33402705375742403, 0.20922499955129725, 0.33370119646191443, 0.3645904068918583, 0.37136211329973423, 0.2522953688941134, 0.37585355361730677, 0.341337380340088, 0.7256738938984302, 0.7279052093125347, 0.6877636714107522, 0.71540820541423, 0.7266538392510816, 0.6684738223898579, 0.6676367232553366, 0.7330246428551728, 0.7048987550158512, 0.13629922963107688, 0.13914120687178055, 0.08501770645288798, 0.12461040232876808, 0.12723246980091862, 0.10108588862852741, 0.1497682189699805, 0.15786332170585282, 0.10875468787289522, 0.24131353021938617, 0.2316241702715175, 0.24684381543485123, 0.2422689524932189, 0.19940700067524708, 0.4898928618072632, 0.18617033262654337, 0.4910228727722128, 0.6124458387451774, 0.4966258044158661, 0.5042082323330368, 0.4890332968247829, 0.5259010175307528, 0.21866499423432828, 0.4891191076495921, 0.5309377218473783, 0.5043248483649563, 0.5173316763988824, 0.3557864225144044, 0.4075206059696207, 0.36363629331658387, 0.37285283860161367, 0.2105341567569381, 0.38553292669431627, 0.31229618166522755, 0.16394875519774577, 0.3631114835558844, 0.19622229837319005, 0.22801878024917044, 0.19301848397865273, 0.19675743853042316, 0.21689227308959635, 0.23476155084773742, 0.20286595086729842, 0.22572435438788985, 0.20647718934191994, 0.5730584952120511, 0.21577155613546084, 0.7007652071805861, 0.6505890970501321, 0.23014600127908003, 0.21310729361334357, 0.23354231565342476, 0.730739867832958, 0.21645703554358642, 0.16938697021025106, 0.9035884983151854, 0.8744050448794893, 0.8451464774033113, 0.8640205023385669, 0.20072132301214496, 0.1780220846329017, 0.17791604133815475, 0.17336490163362628, 0.2099824448610944, 0.16625849075134214, 0.21161981673560737, 0.7460361516362377, 0.852473747193526, 0.2043327097861396, 0.20886743006090114, 0.21402131106458733, 0.21203895236499704, 0.2216871842039373, 0.19028576308329892, 0.20051073084686133, 0.21083474551850578, 0.18447096384826156, 0.21465513659115443, 0.20056043436959237, 0.17767474212475953, 0.19348625044481316, 0.10301057721403473, 0.09950749814335835, 0.09247685372329817, 0.10551971821637596, 0.12344270344223296, 0.09338763820209695, 0.12188903892634428, 0.08692344281727238, 0.08698047925195751]}, "mutation_prompt": null}
{"id": "d87b1483-07f2-4fa5-8c9c-d59a869d8881", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Increased slightly for better exploration\n        self.cognitive_constant = 1.4  # Adjusted for enhanced individual learning\n        self.social_constant = 1.7  # Increased for stronger social pull\n        self.F = np.random.uniform(0.4, 0.8)  # Altered scale factor range\n        self.CR = 0.8  # Adjusted crossover probability for exploration-exploitation balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize Quantum-inspired PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Quantum rotation operator for velocity adjustment\n        def quantum_rotation(v, p_best, g_best, beta):\n            random_vector = np.random.uniform(-1, 1, self.dim)\n            return v + beta * np.cross(p_best - v, g_best - v) + random_vector\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for Quantum-inspired PSO\n            beta = np.random.uniform(0, 1.5)  # Quantum step factor\n            for i in range(self.swarm_size):\n                velocities[i] = quantum_rotation(velocities[i], personal_best_positions[i], global_best_position, beta)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveQuantumPSO_DE", "description": "Adaptive Quantum-Inspired PSO-DE with dynamic quantum rotation and hybrid crossover for enhanced convergence and diversity.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('incompatible dimensions for cross product\\n(dimension must be 2 or 3)').", "error": "ValueError('incompatible dimensions for cross product\\n(dimension must be 2 or 3)')", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {}, "mutation_prompt": null}
{"id": "a8c283b7-693b-4e23-bc16-a78e2a452dee", "solution": "import numpy as np\n\nclass DynamicSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Modified inertia for dynamic control\n        self.cognitive_constant = 1.4  # Slightly adjusted for exploration\n        self.social_constant = 1.7  # Increased social influence for rapid convergence\n        self.F = np.random.uniform(0.4, 0.8)  # Narrowed and shifted scale factor range\n        self.CR = 0.85  # Slightly reduced crossover probability for increased exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.3 * (evals / max_evals))  # Adjusted dynamic range\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "DynamicSwarmDE", "description": "Dynamic Swarm-DE with adaptive inertia and probabilistic mutation for balanced exploration and exploitation.", "configspace": "", "generation": 61, "fitness": 0.3881929023759689, "feedback": "The algorithm DynamicSwarmDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8726625223445308, 0.8784592398095523, 0.8777633102362163, 0.8740726265637708, 0.8689039767113875, 0.88073468874166, 0.8645929354477357, 0.8751710644077786, 0.873060728433633, 0.7363948664902931, 0.7529909241401989, 0.7657905508695957, 0.7385664563163433, 0.7715819360000571, 0.761895655113171, 0.7514688861462647, 0.7582127842336426, 0.7401985625007563, 0.15153314627661307, 0.16454277719426647, 0.167452366467705, 0.07612903131437199, 0.1411919182022663, 0.1305250816575495, 0.12594908846809139, 0.17337941912519295, 0.1392291282726852, 0.12922207869131996, 0.15034388869328208, 0.17331239158623446, 0.1315673812411251, 0.15331771204590927, 0.13584043920353905, 0.11342495702040212, 0.13942484561665025, 0.1408724689357388, 0.9859533222891868, 0.9889540469958217, 0.09919038080534393, 0.9876396790710967, 0.9857803930035255, 0.9860872070013276, 0.9726545651300861, 0.9925944314814623, 0.9860198415885322, 0.7424630197158203, 0.6399532880367205, 0.6943253502145226, 0.7152046690929057, 0.7513601139924847, 0.7070774589425958, 0.7064537571766922, 0.08761862913765239, 0.08827151158608482, 0.7799643865467218, 0.8675115653424482, 0.853108997196593, 0.8431048736144078, 0.8311100360718666, 0.20927018057015734, 0.8652007626208147, 0.8646409322616464, 0.2358088283496822, 0.45873754352161167, 0.3880499475125322, 0.2816916095094336, 0.4337670733394058, 0.2816212354253975, 0.40762597989466365, 0.4251003534841038, 0.3754784868962374, 0.3782866279869662, 0.31788554674723, 0.29610404317688976, 0.2685163586120717, 0.13229509925693927, 0.29461999832714025, 0.46865243345652685, 0.3805279059105797, 0.3720888748735304, 0.3622528516305773, 0.2584040018261934, 0.29889443796758364, 0.40686967146242603, 0.3495230420286789, 0.03269070818701603, 0.009906345101256542, 0.3002371728834814, 0.01082281594740031, 0.29120906061028595, 0.49372453124191196, 0.34926495748138187, 0.19092890500876158, 0.38145650276241116, 0.4902664665322889, 0.22021173007788353, 0.5229746870160995, 0.45409895633461606, 0.5230586522375587, 0.061757294428366194, 0.08144528920635696, 0.11173974157038369, 0.23210433393168972, 0.08592688683053551, 0.09561022832516797, 0.07304785555645699, 0.10092218909739259, 0.07085893636527218, 0.281030227420222, 0.33603259010119935, 0.33227671205778486, 0.2662621397920797, 0.37729220382313633, 0.35656742188417856, 0.2424348473659863, 0.34164160067532334, 0.30396256986144776, 0.7237862929187455, 0.687231960194558, 0.6317398754651447, 0.661840840495395, 0.749098504328852, 0.6757028160259595, 0.7382396620566241, 0.6501200176217579, 0.7654033772040949, 0.10405256838755961, 0.10113645031239415, 0.1150137450798957, 0.1717126626123201, 0.07622887720067373, 0.1541670779373504, 0.1708454166188954, 0.13173113431844286, 0.1260591467056552, 0.26243230171002063, 0.19576335143579393, 0.19270544535975132, 0.23628073586595388, 0.48664979721857904, 0.21376912378058677, 0.20114799960218566, 0.19701234508810972, 0.30344801741678407, 0.5269061338585641, 0.1759957686782132, 0.5787723304981864, 0.4943535458311603, 0.6386616523985442, 0.6401485059710433, 0.6757927007682514, 0.6842254764055534, 0.6374711452179151, 0.3536109464243018, 0.2839823241959917, 0.24843075860724162, 0.34364092081902897, 0.4398270727344181, 0.48657589580459604, 0.27291367373630104, 0.2978232744988143, 0.3718495501188199, 0.24202513220314348, 0.2369700269404723, 0.19442641135828576, 0.22029496390432446, 0.25376688366594014, 0.19233393253659947, 0.20491773810899627, 0.23275295051037304, 0.2541707481836114, 0.25091273122517643, 0.6349234146511491, 0.20508774222277537, 0.2028404282020594, 0.19268455381735394, 0.7702813231241122, 0.23520236256157667, 0.20973616376390836, 0.24371229070354716, 0.18190420550303454, 0.9275455156729795, 0.18698426682170466, 0.1170121871667017, 0.918661562472535, 0.1604932507170419, 0.15366861148798439, 0.17806835902331708, 0.16299909422446945, 0.7934727718175925, 0.16557323006798086, 0.16973318281098349, 0.1683660873076911, 0.8021342795398931, 0.16692419790306123, 0.21375070423366138, 0.21383974771047265, 0.19909170674928833, 0.21508554651407508, 0.18921385492003306, 0.20168977824613954, 0.2093047290854163, 0.21397793329834314, 0.18254815673948566, 0.20553142527011004, 0.22825444208405254, 0.1953912855594666, 0.1017046549020506, 0.08342315495641828, 0.09179535106829972, 0.10668710991473385, 0.16772790444434083, 0.0931427489720732, 0.13160309116454938, 0.10099501690170165, 0.09416700580738258]}, "mutation_prompt": null}
{"id": "045c49eb-a20c-4489-94ca-7e5e0c1fa4f0", "solution": "import numpy as np\n\nclass AdaptiveEnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Adjusted for improved convergence\n        self.cognitive_constant = 1.4  # Reduced for smoother exploration\n        self.social_constant = 1.8  # Increased for stronger group influence\n        self.F = np.random.uniform(0.4, 0.9)  # Adaptive scale factor for mutation\n        self.CR = 0.85  # Adjusted crossover probability for balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.4 * (evals / max_evals))\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveEnhancedHybridPSO_DE", "description": "Adaptive Enhanced Hybrid PSO-DE with dynamic social-cognitive balance and mutation adaptation for robust exploration and convergence.", "configspace": "", "generation": 62, "fitness": 0.4002779766080759, "feedback": "The algorithm AdaptiveEnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8983270820114921, 0.8977019376225079, 0.89074608611275, 0.8983691153818492, 0.8990981677101749, 0.8937590792734421, 0.9185611876898201, 0.8936822281444986, 0.8916051314762472, 0.789597123971874, 0.8033205535972758, 0.8038516060914743, 0.06667229799657348, 0.8072001709395714, 0.8331004244312081, 0.8005400425031192, 0.8118614883439785, 0.8132586042008487, 0.1747098991814371, 0.18526251597921772, 0.7065417194779985, 0.07475421959336015, 0.1805392415746201, 0.1578959626005828, 0.18251860295632194, 0.17892415213600976, 0.11408135728682733, 0.17116257487642217, 0.09203290248436335, 0.10085827769568056, 0.1796120196375054, 0.15334901776664933, 0.13550363717027025, 0.11469494582538609, 0.14385890104649646, 0.14253617420349163, 0.984330356191243, 0.9888494192790178, 0.9505592248950798, 0.987763569111749, 0.9862569834126058, 0.9863656992054096, 0.9767642728764417, 0.9925992458639288, 0.9849262602721921, 0.792476639877309, 0.7625496743198944, 0.7705355658069015, 0.7784092596242447, 0.7660880023117452, 0.7970097153470664, 0.7561137629756169, 0.7478038910495518, 0.0886612102605624, 0.2235826938938722, 0.8749210135033675, 0.38467091634222383, 0.9174130339157884, 0.22052523042237127, 0.06133372104736845, 0.8580596736882352, 0.898789713934487, 0.38967044092435676, 0.47768298878649207, 0.48146996934279407, 0.34772080228208724, 0.12929226991868437, 0.3730233897293742, 0.13565507236244834, 0.34564590852499255, 0.3352271245485199, 0.42847584511474746, 0.5053808294407862, 0.3567906619566328, 0.4187781223946001, 0.6164582462419621, 0.37455457876246334, 0.13389335153567394, 0.5080448579359579, 0.4553280809532776, 0.4060926921577629, 0.0, 0.0713020398588966, 0.36854595708780624, 0.35728465311810054, 0.14182001977149883, 0.13158867409766795, 0.271687474366903, 0.010721899849386873, 0.4648940066674251, 0.3422346116859277, 0.31976236520390844, 0.5249566170608685, 0.410553703010223, 0.4240108495579039, 0.18006472589860445, 0.4930015995308268, 0.279640263492842, 0.2199606669938189, 0.04446356612035762, 0.1340241451734464, 0.05281652692994154, 0.19427725617127112, 0.23490352215154864, 0.0961671554495157, 0.0875340110819609, 0.15593997287096173, 0.07570761494807432, 0.28832352391115224, 0.291993353561687, 0.3599287947547788, 0.2311413051177884, 0.38628054407889645, 0.34216223766537257, 0.21591431974790753, 0.37931993981321244, 0.22620556354916233, 0.7698492504750359, 0.7214996822989596, 0.7826179559074143, 0.7541620510422582, 0.780301395461407, 0.6650042441697328, 0.7331423058434241, 0.7998734710832178, 0.7581737868476834, 0.11574981682932817, 0.09151047875618401, 0.06507167682173187, 0.11351480249161738, 0.14207945043298786, 0.12303894684280059, 0.11710351012245734, 0.15190642337101634, 0.08132545930860668, 0.6093244248907375, 0.1967572517560524, 0.3121186930194332, 0.23469421225980291, 0.22927151520616362, 0.17763294659556939, 0.21727635558887393, 0.21511393091672248, 0.20695706256107382, 0.43734337520042876, 0.5592116980300549, 0.6866576910460911, 0.5116194813580088, 0.5273041971199801, 0.3332095629433318, 0.643527738139273, 0.7625135120249439, 0.6447108098149412, 0.38131243286075156, 0.3446969858282052, 0.32953137877520644, 0.36162912175088846, 0.2562442489175758, 0.373815622595813, 0.2814942270853339, 0.5488497717413415, 0.41378795307205873, 0.2545603951399994, 0.2268963298686354, 0.2170618884325084, 0.22385427674304959, 0.2358181304793321, 0.1929573580664442, 0.21413568031424124, 0.23782234770608812, 0.23182443672406572, 0.2490881346829381, 0.7522075027565366, 0.24436825433500087, 0.22491537507202097, 0.2063346742093135, 0.7895959001338544, 0.2414933424141663, 0.24776172522188966, 0.7943959577188587, 0.2024126475844662, 0.9205199519286497, 0.16338899865265633, 0.9106607398363624, 0.9274776806654063, 0.1628758186162742, 0.16173828200779594, 0.1782552992932237, 0.15721668567749403, 0.1665533683846515, 0.7545438511177969, 0.212576471022359, 0.1680453168061109, 0.27949345519811164, 0.1673492575058605, 0.2138488796750545, 0.19549049420811793, 0.10522054216588439, 0.19374384066801187, 0.18701261525825907, 0.20611292493025057, 0.21196037363228493, 0.1946849090214351, 0.21857984990104884, 0.19146969373638167, 0.19061975484820726, 0.1986840105770432, 0.11679102480035308, 0.1039074340357915, 0.09688009657484942, 0.09466943074618905, 0.09373634216193638, 0.09486523413116177, 0.11349361068473662, 0.08822273534447356, 0.10355279503936343]}, "mutation_prompt": null}
{"id": "7f9df766-0e65-45fd-bf99-66607d23383b", "solution": "import numpy as np\n\nclass QuantumInspiredHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.65  # Adjusted for better balance\n        self.cognitive_constant = 1.4  # Fine-tuned for exploration balance\n        self.social_constant = 1.7  # Slightly increased for more social influence\n        self.F = np.random.uniform(0.4, 0.85)  # Adaptive scale factor for DE\n        self.CR = 0.85  # Adjusted crossover for strategic diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Quantum-inspired position update\n        def quantum_update(position, best_position):\n            return np.where(np.random.rand(self.dim) < 0.1, \n                            np.random.uniform(self.lower_bound, self.upper_bound, self.dim), \n                            position + np.random.randn(self.dim) * (best_position - position))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                quantum_position = quantum_update(positions[i], global_best_position)\n                positions[i] = np.where(np.random.rand(self.dim) < 0.1, quantum_position, positions[i] + velocities[i])\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "QuantumInspiredHybridPSO_DE", "description": "Quantum-inspired Hybrid PSO-DE with probabilistic quantum update and strategic mutation for enhanced diversity and convergence.", "configspace": "", "generation": 63, "fitness": 0.36248440696088824, "feedback": "The algorithm QuantumInspiredHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.7891556047903638, 0.8374489347193838, 0.842208286010454, 0.8255610855527249, 0.8482461951657355, 0.8571554382346555, 0.8117946209900977, 0.8724046258766763, 0.8539429939213048, 0.6738885543000082, 0.6963696227702487, 0.6647541781239266, 0.6693702427859912, 0.6698837236217261, 0.7068246033665715, 0.7037448534554295, 0.7277526567126722, 0.6751416952270746, 0.17116093287502676, 0.31655604666054393, 0.16015809183940877, 0.11867615977763035, 0.14668322921977783, 0.23814284031547994, 0.11267483348824459, 0.13172373771038093, 0.14448824568436613, 0.1578104298728673, 0.11137611713849893, 0.22258203574532154, 0.14071177192543616, 0.12788275356788803, 0.14393857279834987, 0.11673783107608382, 0.13051020456802598, 0.1296251426189432, 0.9840473596298861, 0.988940584926575, 0.9813373005050091, 0.9852632049062766, 0.9890278479385368, 0.9782307453344056, 0.9852314299256354, 0.9887402641800197, 0.9846810381937036, 0.5309436743706017, 0.5243044560899122, 0.5337383114685949, 0.5304680508105386, 0.5813884152705695, 0.5722343927596156, 0.5441603997002956, 0.5206735811688952, 0.3766609750914919, 0.7851181127950249, 0.8099709427090271, 0.7598967573628839, 0.7170237019961224, 0.16099090515923054, 0.7700719847900777, 0.7145997910028852, 0.7567267868691523, 0.8023900858570616, 0.1924477717079559, 0.46446475683831046, 0.18381637560033803, 0.2209922367639071, 0.14739772317984623, 0.19089672924298895, 0.35579762898407896, 0.19967909844720533, 0.2607519767712142, 0.2653200053456888, 0.030055502774819054, 0.1760608838410168, 0.30293266858604617, 0.12853677316067447, 0.2525309379902888, 0.3608839377869639, 0.20122554894019462, 0.2637671648275104, 0.0, 0.2891614661906712, 0.20818322468143924, 0.29215777081049654, 0.39342332099243327, 0.27704808143115844, 0.27656096013627796, 0.058805964850143444, 0.27019268456490886, 0.39295501909413544, 0.3677956891503076, 0.3502467184030379, 0.4427827557378541, 0.4477511419702409, 0.40849995599099287, 0.47020766264885583, 0.1915073300907728, 0.49771786887964786, 0.13610492269938934, 0.08227805244612318, 0.06879375104273566, 0.23125918797129064, 0.22568103134908657, 0.2458126028270039, 0.05239139819500105, 0.07663776525260779, 0.17835897549156376, 0.2584372703242427, 0.3083611704349737, 0.27179537015868804, 0.31188694058227484, 0.332856668508106, 0.3150207340602639, 0.21011426014574264, 0.3289657130593975, 0.30975404576479926, 0.692706469705378, 0.6832221752569305, 0.6964872846656163, 0.652780921203554, 0.7074345170465779, 0.7317819140209867, 0.6627849774797416, 0.7036333991674011, 0.6737338548086133, 0.10850434283747823, 0.1340312969840599, 0.10416516123341246, 0.12484045846336378, 0.10025176488304899, 0.116845525933028, 0.12152333232964396, 0.12805405551248272, 0.11844853551717172, 0.3048132406537004, 0.1744117659222204, 0.1716090933513047, 0.1903711530115515, 0.2004560621471746, 0.16937779916969575, 0.2344914170825455, 0.2103617343629226, 0.17724763595382176, 0.41986813791983824, 0.39153413081883304, 0.38382222416115075, 0.3960342643648409, 0.3995381491093636, 0.41382920687189806, 0.411846272154644, 0.43644399404534295, 0.4661490261821696, 0.34103360272899486, 0.2828819113615818, 0.28477800777821094, 0.3264425051997678, 0.2960621765141319, 0.30298666113120354, 0.3161390745640653, 0.2056410580237954, 0.19968765934861832, 0.1914494301263877, 0.18834513586045765, 0.20913402415010174, 0.19105986070496594, 0.20750346075841408, 0.18923280098358253, 0.19067082715766803, 0.19142902732395561, 0.20580600825010364, 0.21599486873560958, 0.3973157840470637, 0.2301729683397773, 0.3307116985879518, 0.21647821984911064, 0.48996199093098003, 0.19491550119049939, 0.2095202236577708, 0.28230576860711576, 0.18467265278352307, 0.7854504369057496, 0.14383610771893673, 0.8616141080276694, 0.8695575926952971, 0.17128058482622022, 0.7771254890887273, 0.1775549872663249, 0.17342825446617915, 0.20896099371195154, 0.19077885754144408, 0.20891923275376068, 0.16391208778143118, 0.20546672627888607, 0.16878806281510028, 0.2107273264570746, 0.2004219503665814, 0.21173242776037182, 0.20302578229727675, 0.1749539256455751, 0.18386472863326553, 0.1818304075176087, 0.19887395762798665, 0.19851647485545654, 0.19267748028383735, 0.19315767467497147, 0.18827846427467643, 0.09146356360801378, 0.08204536688625308, 0.08310028649392676, 0.10065095304107996, 0.08113999221743284, 0.08718569672060061, 0.0926951058348886, 0.08722054495519749, 0.07961487845013959]}, "mutation_prompt": null}
{"id": "69fae6aa-4606-411f-8d06-85b7cc798ee5", "solution": "import numpy as np\n\nclass AdaptiveLigandPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Slightly reduced for refined convergence\n        self.cognitive_constant = 1.5  # Adjusted for balanced exploration\n        self.social_constant = 1.4  # Reduced for less social dominance\n        self.F = np.random.uniform(0.4, 0.8)  # Narrowed adaptive scale factor range\n        self.CR = 0.85  # Adjusted crossover probability for strategic balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Boundary reflection method\n        def boundary_reflection(pos):\n            return np.where(pos > self.upper_bound, self.upper_bound - (pos - self.upper_bound), \n                            np.where(pos < self.lower_bound, self.lower_bound + (self.lower_bound - pos), pos))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = boundary_reflection(positions[i] + velocities[i])\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveLigandPSO_DE", "description": "Adaptive Ligand PSO-DE with dynamic boundary reflection and adaptive crossover probability for enhanced convergence stability.", "configspace": "", "generation": 64, "fitness": 0.41435099228609423, "feedback": "The algorithm AdaptiveLigandPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.30.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8986003117582382, 0.9062755074426655, 0.8972248686557367, 0.8965778903797923, 0.9092478461985278, 0.9111137164487552, 0.898768452349663, 0.9055616331568996, 0.9156306071397873, 0.8239055586541425, 0.8059055620210388, 0.8261869102340047, 0.811161223206013, 0.8230529508914515, 0.8291351974590443, 0.8390733876476751, 0.8232625305942033, 0.8132592337627385, 0.15273511729613898, 0.18362806708381263, 0.17084644051308828, 0.1302489633456111, 0.18455342315170353, 0.14131002518566094, 0.14632885374524252, 0.7565755460361262, 0.1775957758891915, 0.14244778512162137, 0.1587809014041095, 0.11346025441695562, 0.15572162143896418, 0.15492708817085366, 0.129712442215137, 0.13177476059798843, 0.11485191783952664, 0.12150232378989001, 0.9362511823100619, 0.913914851367674, 0.9260152440779529, 0.9067076291582866, 0.8895855355445446, 0.9459800464746395, 0.8986279430701217, 0.9938006695568723, 0.928763390073834, 0.8263279073812757, 0.788974112320485, 0.7981700933748966, 0.8121931884238358, 0.8259774814158567, 0.7922363015793563, 0.768403900653126, 0.7850617329024194, 0.7658633507203414, 0.8752729066028118, 0.22916550538609326, 0.8722076354414645, 0.8622376785225893, 0.875406164042215, 0.8643891917182794, 0.8825007342686946, 0.35982158880228676, 0.8404146819695377, 0.4548003769744532, 0.1922341203140009, 0.2720222783542908, 0.13391784593247436, 0.20467590311128492, 0.20052894096970197, 0.6601733942199752, 0.33967225719800886, 0.22417565259442618, 0.13366463834999465, 0.23788340013464837, 0.29845685922832643, 0.497051149786621, 0.245334709449888, 0.3387327900326662, 0.5424502979768855, 0.39441116901655127, 0.21976544319280422, 0.16599805100960052, 0.15064040097703058, 0.26855776109195517, 0.23564819464002584, 0.2555192272846555, 0.1527775134202538, 0.1764032348242941, 0.1089940923992081, 0.3768016337924276, 0.4281517122112217, 0.3750055625041998, 0.5294749351952486, 0.521238544023833, 0.2953598741133774, 0.2956426056407513, 0.3398950852149166, 0.564420067784098, 0.3532097510690082, 0.0441003848042113, 0.08457514686258727, 0.23503465536171153, 0.16459859108048513, 0.09599966172617147, 0.13372784975348417, 0.30443660044167287, 0.2150837176797985, 0.10152222409421008, 0.3445954924845741, 0.21965901476250715, 0.25555413792489456, 0.3570197974295536, 0.26693056997133024, 0.3932988346397783, 0.28159684247112116, 0.22558757105083516, 0.2205824090086127, 0.7632870227674191, 0.7617730730261937, 0.8042057431473982, 0.7926411250579151, 0.7372106310208583, 0.7858682124204618, 0.8006633706198587, 0.7180711328644667, 0.623172414861958, 0.1603045606342568, 0.09088730866120054, 0.12825219606959237, 0.09649223954265895, 0.15764621975097293, 0.1615748900469658, 0.1218149301206447, 0.10814920214403789, 0.16770793886228696, 0.16500027053493138, 0.6970261424036269, 0.3247868068768194, 0.28010017449013325, 0.2527538517114917, 0.6053221503754546, 0.27721107993826244, 0.16501831792019128, 0.47400590908851625, 0.4078147815583081, 0.5036033436302328, 0.28048960394363975, 0.5665663777626531, 0.3900893133559633, 0.42253533198279947, 0.7585493233741849, 0.23866250328510996, 0.6017024246028198, 0.3431681769227616, 0.28675373884170263, 0.36973126036361503, 0.31387754333060125, 0.30886749547892245, 0.2971552395496456, 0.5233858425405062, 0.23305572170011946, 0.24279781051976757, 0.22275139806821753, 0.22486169904809306, 0.23381283795211005, 0.24867207556727455, 0.2610852865678839, 0.20108414356217885, 0.20060750997486443, 0.22670863599062974, 0.247059400485918, 0.7348267944218609, 0.19696252833025207, 0.20508054684255095, 0.18270493006059418, 0.19958735387521276, 0.22338878452665978, 0.18597351621801694, 0.2499189659149691, 0.8030869759783368, 0.8956729410766051, 0.9325067023577638, 0.1884146429883603, 0.16618210602287764, 0.9316280598686129, 0.1254643029898883, 0.15412050831469826, 0.17642346051863111, 0.9037767283620393, 0.7714812464549331, 0.8945516861581206, 0.16981659816691486, 0.16766874350537675, 0.11265079284300228, 0.1693555873756475, 0.21313552977125205, 0.21351194152015418, 0.10501357247532228, 0.18030742256437227, 0.21040397421160884, 0.18315181262279823, 0.184316398861479, 0.17606334366533516, 0.18731831507760732, 0.19214335674364214, 0.19395819404707426, 0.21797847551152683, 0.09819522917836443, 0.0985422574803686, 0.10292000752436437, 0.14402306138720888, 0.16312090520526545, 0.10201050875994078, 0.11952786497315315, 0.09670584770841673, 0.10701775843387751]}, "mutation_prompt": null}
{"id": "7927ba6c-861d-45ab-998c-ec69b8cfdd9c", "solution": "import numpy as np\n\nclass AdaptivePSO_RDMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted inertia for improved balance\n        self.cognitive_constant = 1.4  # Slightly reduced for nuanced exploration\n        self.social_constant = 1.7  # Increased for enhanced convergence\n        self.F = np.random.uniform(0.6, 1.0)  # Expanded adaptive factor range\n        self.CR = 0.85  # Slightly reduced crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1.0 - 0.6 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Reinforced Differential Mutation for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptivePSO_RDMutation", "description": "Adaptive Particle Swarm Optimization with Reinforced Differential Mutation for robust exploration and exploitation.", "configspace": "", "generation": 65, "fitness": 0.3790738127086347, "feedback": "The algorithm AdaptivePSO_RDMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8002890803342405, 0.7993943878836999, 0.8157698898362239, 0.8073182223919821, 0.8090158290801568, 0.8052357990695019, 0.8005696532118821, 0.8169806680870925, 0.8177760001710372, 0.6867708569925435, 0.6425808194940874, 0.6578407679555078, 0.6304229373573765, 0.6431883395893363, 0.6535390414280711, 0.6566016649349169, 0.6708392230661968, 0.6607980068930586, 0.17196992921845833, 0.3933795543548888, 0.15293108595947835, 0.5317720132943358, 0.14983910759993646, 0.5792213651279747, 0.13752112191563193, 0.16212201639429258, 0.16478371000131353, 0.15966587404469645, 0.13625397849015608, 0.13450411237459825, 0.15151071755214673, 0.13081749226773487, 0.14389910234252534, 0.11671170888981564, 0.13855411465601042, 0.16047567413815444, 0.9887624844979629, 0.9889592566042589, 0.09918889655797047, 0.988609513497326, 0.9888812329510122, 0.9863952941964405, 0.9772495056952715, 0.9925818499939546, 0.9902655723904347, 0.5933797610938905, 0.6467931432816052, 0.6157827584283729, 0.6040739666259745, 0.5982310648303564, 0.6144131895301665, 0.6428316024942546, 0.08808196374987087, 0.6591404029386141, 0.746938504409657, 0.7375625203991114, 0.7210496068749863, 0.7695623222380569, 0.20941592513052265, 0.7285776496489524, 0.7616124979499506, 0.7810095152423495, 0.7918277597005532, 0.40268821357130624, 0.395725727885344, 0.43039767013359165, 0.34899960526329377, 0.30512219594326184, 0.3582071608286036, 0.35562684239634135, 0.35077269771112995, 0.3667692437643768, 0.3837363509856657, 0.3186955791951769, 0.4270404246143876, 0.4037238840767191, 0.3766438304346804, 0.4360992964876421, 0.4139055537722799, 0.40634281404457195, 0.43403974583110905, 0.049934642527654116, 0.24398300614626545, 0.19947834231078598, 0.21996861050984695, 0.2393373878650078, 0.2175529757263296, 0.14239204315315346, 0.21933887436678556, 0.14866225424117907, 0.31556035797879445, 0.34248159389883326, 0.3015519626220896, 0.29252026833560574, 0.33145491640489533, 0.32676410345685003, 0.34794161680189706, 0.4033597598623322, 0.3002204496540003, 0.05595508531277826, 0.1061774246062741, 0.16407935420005437, 0.13729151089127556, 0.07426745392453737, 0.13007308360246694, 0.07156245366656089, 0.12305694443133108, 0.07081826519234713, 0.19853909975736173, 0.23905836610124365, 0.2467559257120282, 0.2328676009765671, 0.23524829736364028, 0.23517580591464016, 0.24872429048114875, 0.25510571846774177, 0.20355737284930286, 0.5568269907426603, 0.6270252282913868, 0.6337504749265692, 0.6176456653806179, 0.6530752758816036, 0.6303338543109991, 0.6218601408012789, 0.6303922874046877, 0.6144193444273157, 0.10752138842454917, 0.11582806570055859, 0.1290495899810592, 0.11540750263485555, 0.1318175939803683, 0.1267662732890139, 0.13306160107704668, 0.10814038201964626, 0.1454682841126934, 0.17870177544625787, 0.2229982149112567, 0.19242554550395585, 0.269562601522071, 0.22496153545505893, 0.2294410362415995, 0.16993961434360805, 0.1708093112639264, 0.25218521745647826, 0.535046444627922, 0.49621700865614604, 0.5198500814339895, 0.4362518589105241, 0.4337400086733616, 0.4720822959450488, 0.5937418988774431, 0.4695495782561716, 0.4716842330682762, 0.33051509399721535, 0.33092532237366834, 0.3817444579114492, 0.3431489465886358, 0.3546483480685413, 0.3370990402502809, 0.3305996592787034, 0.4463775880746933, 0.37524554336813476, 0.2656893995749451, 0.22575912509270746, 0.2084416622784696, 0.20774846462984908, 0.203455037697314, 0.22392548035298798, 0.210893094045278, 0.26858226968920784, 0.19991502755485058, 0.19734233718316796, 0.22077324798450437, 0.610370827937555, 0.24054938206990184, 0.5967603935036254, 0.23510458013806645, 0.21889298825577574, 0.23789198573844406, 0.5919916315050207, 0.08850334835856355, 0.8648173846853804, 0.162487244602731, 0.8455725102455373, 0.866203792480112, 0.16294969437127582, 0.1595136875608909, 0.17854524868050325, 0.8617553415436513, 0.7048176839144332, 0.20399700726359982, 0.2086710940790465, 0.16782322165107455, 0.1985506378618337, 0.7451937190417914, 0.21366017499676027, 0.19920033420293226, 0.21162306795118735, 0.21107226950559554, 0.21365425623413303, 0.18642298572493965, 0.20160421886525914, 0.19053954231387238, 0.18063996825264328, 0.1750043759456552, 0.18276267185338546, 0.20742346229738273, 0.0882649362159611, 0.09026650103683531, 0.0983942623598506, 0.11773524989533468, 0.08757785325159217, 0.09271091156686184, 0.12134733078584936, 0.0846787459535342, 0.08659398678808283]}, "mutation_prompt": null}
{"id": "cb95058c-8b67-4ec7-b364-1eb462cdc8a4", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Slightly reduced for refined convergence\n        self.cognitive_constant = 1.5  # Adjusted for balanced exploration\n        self.social_constant = 1.6  # Increased for stronger social influence\n        self.F = np.random.uniform(0.5, 0.9)  # Broadened adaptive scale factor range\n        self.CR = 0.9  # Adjusted crossover probability for strategic balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with stochastic velocity adjustment and strategic mutation for improved exploration and convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8576566449643015, 0.881370456319332, 0.8811023776997438, 0.8835913666778646, 0.8725891678040625, 0.8651150917360322, 0.8684413304263632, 0.8858458065983518, 0.8805696674194604, 0.7555631137231122, 0.7619556029173722, 0.7478292134942133, 0.7243490102944913, 0.76045429645202, 0.7654934261681949, 0.7585764270716563, 0.7732748649689264, 0.7655571985675484, 0.12115483993486709, 0.15520934994214874, 0.17819459455239117, 0.07417411138844854, 0.1733149267890567, 0.17789015716762513, 0.14927210748530073, 0.7064081780292664, 0.12108266897552245, 0.17100320916701695, 0.14108182598351682, 0.11173757318492605, 0.15317123370513042, 0.12715573770749566, 0.11341071348844178, 0.10516687069865016, 0.12112312708950557, 0.1251766206553715, 0.9851789376984205, 0.9887782361678231, 0.9768682091686163, 0.9885751553814965, 0.9853358467765109, 0.9861553445374898, 0.9767594771384877, 0.9925781321061359, 0.985316943944816, 0.6970373337485434, 0.7782388948163348, 0.7008176300504448, 0.7418473927605249, 0.7379069190908851, 0.774473142722404, 0.7270166726704186, 0.7389338990487031, 0.7542109327248996, 0.8334292466090863, 0.770307104527948, 0.862308751096581, 0.8048546198323272, 0.8388660519451728, 0.21214931550161054, 0.8451619749918791, 0.8185408606974324, 0.79250476718173, 0.47662063054423065, 0.46039892186412334, 0.12783154414767217, 0.47913046470392684, 0.13189585091470712, 0.510795614258968, 0.5134628048653866, 0.5070728749596212, 0.42527490957173697, 0.49333470519936795, 0.4285486327094601, 0.45658009079136375, 0.13235586673928867, 0.5173345164330324, 0.47715045586932625, 0.46372709664678247, 0.1330601191746078, 0.5571520324551844, 0.21170039662206774, 0.3448173319555511, 0.33153876879246336, 0.4023506817705921, 0.3825143775499926, 0.3369843342101342, 0.2900591234600234, 0.3054643613225405, 0.44153261629070395, 0.4270746405910214, 0.5287108834430669, 0.511271463528336, 0.5004528761361743, 0.399617807935866, 0.521860183672566, 0.4780872733511933, 0.5440169388118752, 0.5635067572777932, 0.0527898884101452, 0.10035079827455406, 0.2145832553718865, 0.19702358390414665, 0.2932696521181468, 0.10745563524887258, 0.0712449401596339, 0.16231987617148702, 0.07275359954377403, 0.2947963718834842, 0.32497814018398785, 0.341627559524439, 0.3583483818164426, 0.38248732557154674, 0.36269073526866724, 0.30989010614368606, 0.35329936557734376, 0.34685337669989813, 0.7288554355578641, 0.731545858812374, 0.7755137955513864, 0.7451958384566852, 0.769825705910341, 0.7742813524498485, 0.7447040040229023, 0.7748799893274072, 0.7483089850694135, 0.1436304764768387, 0.10184186412352225, 0.12097169788492446, 0.14100010476646874, 0.1708034613338375, 0.1248443531126886, 0.11253163275541467, 0.17023171745437937, 0.1198882143889265, 0.27080466388738067, 0.21454803487079155, 0.6832886743796189, 0.18155720842824874, 0.2125126903981197, 0.2287574470348226, 0.3068098712532351, 0.4471781443479843, 0.1874725908659156, 0.37590295964314013, 0.6032759420191998, 0.43380194063840294, 0.33163707465349845, 0.6631747524482504, 0.5981220525825264, 0.2909539576123886, 0.5705091092250615, 0.6451169769269616, 0.3411138468308025, 0.38853423267308695, 0.33636728935003557, 0.3710196213948691, 0.2759873738215788, 0.5213669088051953, 0.3124942842674976, 0.46185092806039696, 0.47902509891371947, 0.2544722871671026, 0.2998010197755492, 0.19627929013955936, 0.20877042560629377, 0.22042917742206758, 0.22992440833182748, 0.22404991430970034, 0.24954828637909954, 0.21921125642255568, 0.24740287834609365, 0.22219112333657776, 0.2441826476736847, 0.22055600568857625, 0.7724294182298476, 0.7762607170949904, 0.2501819363859882, 0.19895024210480639, 0.2435959397471904, 0.16378529348721949, 0.906674489393336, 0.18736493118458253, 0.8635929801971516, 0.9320082611822531, 0.12185513287340632, 0.16751284755908313, 0.17725810434292177, 0.8975069540325118, 0.20762507773902994, 0.8255671270020343, 0.21110275633466358, 0.16938676427929966, 0.12671090446641686, 0.15605766497563922, 0.21346731947637498, 0.1993728985361951, 0.2121076036310069, 0.18195535770918936, 0.21135384866758045, 0.2132477855979681, 0.1863237844692378, 0.20112842356437288, 0.19290782618288393, 0.2006983084635201, 0.191972386513368, 0.1912532790315601, 0.10109886285465841, 0.09727623067585212, 0.08222747243795026, 0.1032426836019984, 0.09560330705991149, 0.09693488717882448, 0.1449232743239237, 0.09358768540411688, 0.09527377615845944]}, "mutation_prompt": null}
{"id": "5d61c81e-a552-4364-8fd1-d26c3f2491b7", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE_Grid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for refined convergence\n        self.cognitive_constant = 1.5  # Maintained for balanced exploration\n        self.social_constant = 1.4  # Slightly reduced for varied social influence\n        self.F = np.random.uniform(0.6, 1.0)  # Adaptive scale factor range\n        self.CR = 0.8  # Adjusted crossover probability for adaptable balance\n        self.func_evals = 0\n        self.grid_size = 10  # Added grid-based partitioning for exploration\n\n    def __call__(self, func):\n        # Initialize PSO with grid-based partitioning\n        grid_step = (self.upper_bound - self.lower_bound) / self.grid_size\n        grid_positions = np.linspace(self.lower_bound + grid_step / 2, self.upper_bound - grid_step / 2, self.grid_size)\n        grid_indices = np.random.choice(self.grid_size, (self.swarm_size, self.dim))\n        positions = grid_positions[grid_indices]\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE_Grid", "description": "Enhanced Hybrid PSO-DE with adaptive grid-based search space partitioning for improved exploration and convergence.", "configspace": "", "generation": 67, "fitness": 0.39588050537648745, "feedback": "The algorithm EnhancedHybridPSO_DE_Grid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.830368836992769, 0.8405582828608293, 0.8330439185618643, 0.8385002540707378, 0.8731441427441788, 0.8641410362014752, 0.8460917215634464, 0.8622341595392484, 0.839539351921797, 0.6772911936924688, 0.7071821875961201, 0.7374333195944751, 0.7086365090220966, 0.7119251645674098, 0.7286430137996363, 0.7101871428468616, 0.6953498984778748, 0.7216381424110925, 0.15348402404900463, 0.17188532159429304, 0.6305833622187955, 0.5895618357133843, 0.1786368900609927, 0.17041864232717874, 0.16403128750942686, 0.6217732641155893, 0.7169367534956312, 0.1418989042671387, 0.13256515756298182, 0.1759027628187445, 0.5534412375682792, 0.15183811346194376, 0.14273936436857004, 0.12667851893594417, 0.15163549090266093, 0.13950073866762103, 0.9884557150623555, 0.9813067580162013, 0.9796275445928506, 0.9801270201580703, 0.9849372208026657, 0.9853643728135086, 0.9880978270383884, 0.9883237398736829, 0.9844163571981409, 0.6787793111761691, 0.701757577161894, 0.718080906168034, 0.6826804597052443, 0.7179325933467738, 0.6874455164440771, 0.7014808769472396, 0.6754418363607528, 0.7106759731310346, 0.747953772782318, 0.7929157882444191, 0.8050325212750358, 0.6063689033777985, 0.7921874452465157, 0.6809061586151024, 0.785521485500845, 0.7501969312846841, 0.7885632065604079, 0.3731717202656716, 0.3542275349526943, 0.40234566104172564, 0.37764863938752713, 0.12668396730789988, 0.31853278758940873, 0.37202860587485775, 0.5549029577680529, 0.3735676875984354, 0.2666427625062191, 0.3215796726684076, 0.5615259322484585, 0.39352693968937125, 0.3965864779960756, 0.3569541100599809, 0.3434020318160864, 0.3873394028413778, 0.39797134170666726, 0.1518978738794522, 0.14140117932971463, 0.1759596814965083, 0.12775730294233578, 0.18383353611239117, 0.0753309634417827, 0.088136701958202, 0.21368535711951675, 0.11101550390372872, 0.23352421774347443, 0.27366257440425035, 0.2981244209400098, 0.2649925266008376, 0.27819111190262125, 0.3455485022437641, 0.27661644556815157, 0.3069559569446888, 0.3105680807083546, 0.06457610150229798, 0.1293929708726057, 0.03456862146548212, 0.12590790329917567, 0.12568090527059905, 0.08963762113419615, 0.11618850758606591, 0.07495024487123192, 0.09462214030176641, 0.2425369118478492, 0.21814436901146728, 0.21121178829132536, 0.31009471844187275, 0.25544098517795977, 0.25953964324221646, 0.1479903878318446, 0.1884055968247227, 0.2617677787726246, 0.6351201644524302, 0.601926176343234, 0.6604705054138621, 0.6274640580786114, 0.5865875750174603, 0.6536639833988367, 0.6590124317675893, 0.6772717063211455, 0.6688825160811005, 0.12263898910834847, 0.10554771645173444, 0.13878232296588522, 0.11085843186212774, 0.14956812211562898, 0.1449862030446839, 0.12121506118090308, 0.13883274121286227, 0.11004694014734706, 0.3774617099731501, 0.15954957651135881, 0.31922457979377783, 0.23224723686311777, 0.4427586588901403, 0.19870801299284657, 0.19446760080300718, 0.1969093250586248, 0.2142622124176261, 0.5318952031459163, 0.4978313059552276, 0.5334570406736094, 0.5200343141700468, 0.5961350616340764, 0.4052825932309987, 0.64078384881771, 0.6103352283020019, 0.5735118989762855, 0.3258680273368002, 0.33794714450251717, 0.2910742733223144, 0.3548064578389022, 0.4921038289918017, 0.21246622229350143, 0.15824904867288092, 0.44674011391415136, 0.4310347256532715, 0.2137554473275678, 0.19991011082388344, 0.22079219243503645, 0.2220469007051139, 0.29951587859933027, 0.26737049135383173, 0.20308186915195048, 0.19624568432281075, 0.2412771287756712, 0.24388522976374394, 0.2200079305045144, 0.2142940660069409, 0.21966221931178553, 0.24552091578681257, 0.21812727522049558, 0.2489489037047522, 0.6458914807926306, 0.24479657330100513, 0.19802374958713886, 0.20342614942649528, 0.1970860924012321, 0.1997359019601599, 0.19792810168876418, 0.8472020033779608, 0.21051637693548275, 0.8812538935023106, 0.17154979689809702, 0.2100212242424071, 0.16537202774560333, 0.12711841147524394, 0.209657431361561, 0.770914543876954, 0.8152436153943452, 0.12766142746741027, 0.15725070406574104, 0.8457951467604685, 0.19900717521845968, 0.1867056378460492, 0.20839250382688101, 0.2054241812521037, 0.19472240360532822, 0.1807621009273116, 0.19174749794312884, 0.19266804838454576, 0.18750894252252237, 0.1448898617257779, 0.09914686268783168, 0.08974133931573758, 0.10630198016274062, 0.09644475985897694, 0.11615568393980469, 0.08224973032483796, 0.0884907450666349, 0.12042678366713588]}, "mutation_prompt": null}
{"id": "dd2a7758-3eee-4234-94d6-bce3b5df65d4", "solution": "import numpy as np\n\nclass StochasticAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 22  # Slightly increased swarm size for coverage\n        self.population_size = 22  # Slightly increased population size for diversity\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = np.random.uniform(0.5, 0.9)  # Stochastically varied inertia\n        self.cognitive_constant = 1.4  # Slightly reduced cognitive influence\n        self.social_constant = 1.8  # Increased for stronger herd behavior\n        self.F = 0.8  # Fixed scale factor for predictability\n        self.CR = np.random.uniform(0.7, 0.95)  # Stochastically varied crossover rate\n        self.func_evals = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.7 - 0.3 * (evals / max_evals))  # Adjusted inertia dynamic range\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "StochasticAdaptiveHybridPSO_DE", "description": "Stochastic Adaptive Hybrid PSO-DE with dynamic interactivity for efficient global search and convergence.", "configspace": "", "generation": 68, "fitness": 0.3644088354663259, "feedback": "The algorithm StochasticAdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8681090841982029, 0.8656329059692651, 0.8697067624584427, 0.8400867324788839, 0.8698814815589642, 0.8618646091368288, 0.854481024066418, 0.8479041362429098, 0.8573041448124135, 0.7265150613668667, 0.7382562849369227, 0.07441213858168594, 0.7325054410368219, 0.74500652599092, 0.7436338892467558, 0.7382554940279179, 0.7232442337389878, 0.7889679630275999, 0.1781635954267049, 0.15591937793064503, 0.6258025061762195, 0.1529024986307992, 0.14534450071030547, 0.18026409726119252, 0.3859015841830905, 0.17756354938353014, 0.15032352872591348, 0.12332070577100385, 0.11129786950337073, 0.1513393267999893, 0.13501504986289004, 0.1372449833625642, 0.5949156215763032, 0.13610973044374208, 0.15539997486162305, 0.4707340595119317, 0.9848439163595178, 0.9768713724877596, 0.9841829233062279, 0.9851397978441256, 0.983866112725166, 0.9805209186265396, 0.985437501489986, 0.9871332603921567, 0.9857664073884587, 0.0, 0.7467363577016333, 0.7395147499209536, 0.6978325362772542, 0.15016030664217883, 0.7239047997890331, 0.0881762052157592, 0.7097726654338155, 0.08908924965923892, 0.8062096605490334, 0.7981462029861345, 0.7794399976709323, 0.3718397232590933, 0.27337425520547787, 0.8603646468862084, 0.7469370184187705, 0.8557189629836321, 0.7847279771794133, 0.3982322473509584, 0.4520913977542941, 0.3169761853994377, 0.12827963844146584, 0.4199768737238432, 0.2967319782229453, 0.1282299077456872, 0.1338814302385517, 0.2660435714355792, 0.4232069305663283, 0.3590416933808309, 0.3111035823601792, 0.13127102715444738, 0.5186855277758018, 0.31972401081742585, 0.4232747195539961, 0.13416995162741874, 0.3082448435367596, 0.14816537707718525, 0.1482387673381108, 0.04579399432733666, 0.17756378676508267, 0.20698077141310756, 0.0645965377478247, 0.22474365777379257, 0.1892613266207942, 0.16178281469597677, 0.1311369549747058, 0.3317198509682696, 0.16344373537141288, 0.38016237834585087, 0.38886188622343465, 0.19256853341144098, 0.36528355943052926, 0.36460353474538154, 0.14701247630329617, 0.034793062424361976, 0.10920282230977119, 0.06743374558682114, 0.0, 0.08496295166629952, 0.09299544557338235, 0.15955826577062548, 0.10748987175446478, 0.07000117937975447, 0.2862109772597735, 0.26069414580926764, 0.2005362101896223, 0.2796890139738655, 0.2838199671446746, 0.23376181388324524, 0.08308216731859497, 0.2640762265003246, 0.17789912088134352, 0.6500039153431167, 0.667906548699559, 0.625768597547382, 0.700207789157368, 0.6628692953624523, 0.5896215282047801, 0.6504013551179564, 0.7023299325865315, 0.6387750648039442, 0.12003656334280854, 0.13654299921004398, 0.10723730794897823, 0.1366963299978171, 0.14273689100394038, 0.132200627166986, 0.13913749536815334, 0.14375304244781328, 0.17532192643654976, 0.22851549213455513, 0.20204267072900528, 0.15393385950865868, 0.1663758347720401, 0.14362323220879047, 0.2232996594340667, 0.24853214872454832, 0.25047798966499035, 0.18896455826383718, 0.5696831499240009, 0.47149571555339764, 0.47121618424779677, 0.54960940102989, 0.6124427472706352, 0.5468326834841573, 0.5503604926553587, 0.5547736767647066, 0.56649146511938, 0.35240975755055093, 0.22275342845810342, 0.2654718454852948, 0.34029465056273533, 0.33471808384670654, 0.3467193846993293, 0.21581344045340944, 0.26846914330691984, 0.27122052173576017, 0.23620317517533684, 0.2220439869960713, 0.23621543752645635, 0.23198435741476064, 0.22793838713007064, 0.21638341360007673, 0.2775807689461155, 0.20854678856405962, 0.25094326263799327, 0.22025099246479507, 0.22664033092766311, 0.19643856174196728, 0.19546157521661356, 0.7619205542385926, 0.21015641768005322, 0.24283215054255647, 0.20992438536049707, 0.21610768277414127, 0.18499897491592, 0.2636825297782217, 0.1535784114829144, 0.18035117940775303, 0.1674564382182514, 0.8299149722378051, 0.17421151755371334, 0.16317006987745786, 0.8722824130090455, 0.20771581410639295, 0.2095295214248193, 0.7553243835978798, 0.16802659514735319, 0.21135779480379213, 0.28384027174999615, 0.15354930213844886, 0.7797004735150667, 0.12841770365434846, 0.17830808625161065, 0.19684632900690302, 0.2034547525000402, 0.21826221134014434, 0.19901956772535168, 0.2017991389004602, 0.2288158019377251, 0.19878768545890013, 0.19432804728171227, 0.07518205566266556, 0.10071725549550337, 0.09692893030552263, 0.094117601367385, 0.0816383058668505, 0.14803887501187096, 0.10036154902318772, 0.09068896537438886, 0.10591383188155101]}, "mutation_prompt": null}
{"id": "a2f44a40-54a5-43d5-86af-b946182a8e98", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Dynamically adjusted for better convergence control\n        self.cognitive_constant = 1.4  # Slightly reduced for refined local search\n        self.social_constant = 1.7  # Further increased to enhance social influence\n        self.F = np.random.uniform(0.4, 0.8)  # Tighter adaptive scale factor for stability\n        self.CR = 0.85  # Slightly reduced crossover probability for diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveMultiStrategyPSO_DE", "description": "Adaptive Multi-Strategy PSO-DE with dynamic parameter tuning for enhanced global and local search balance.", "configspace": "", "generation": 69, "fitness": 0.3909176288070804, "feedback": "The algorithm AdaptiveMultiStrategyPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.29.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.9062934472017359, 0.914669970217342, 0.9078685720157325, 0.9065292035567291, 0.9142525489670301, 0.8995576531454591, 0.9063891302168714, 0.9011189681550567, 0.9083532489438876, 0.8020970318441647, 0.8110267218607676, 0.8221619436042964, 0.8166941472997999, 0.8317616893682032, 0.8267234440581757, 0.811628138988316, 0.8373331217423589, 0.7945342743726421, 0.11542015373519154, 0.7454873122062706, 0.15581236142944077, 0.1767678470415054, 0.123696797413553, 0.13119540147555053, 0.1523188153897561, 0.15871139407672885, 0.12239134851747335, 0.12845255574897185, 0.18429588993300727, 0.15464072181508381, 0.12923300725203957, 0.15648033030061814, 0.09967358143690563, 0.11378911436437888, 0.13003287666028518, 0.15736121559984573, 0.9841196623084969, 0.9854328215902818, 0.960117298567669, 0.9875933673371954, 0.9859052016753739, 0.986112638465455, 0.9699976231769718, 0.9925944314814623, 0.9848141157891558, 0.7985382860876296, 0.8104108634837253, 0.7245602684560013, 0.801214043642981, 0.8151725392045028, 0.7887990426194365, 0.7995587510319866, 0.7922104249423517, 0.08870661719997752, 0.7830152292211242, 0.35401212100728885, 0.3883696972486579, 0.9186766638801017, 0.21222504295990685, 0.8714739722234827, 0.8678432367504545, 0.2480928441112502, 0.3644400972626318, 0.404764140144555, 0.19432210093135482, 0.4121083489932582, 0.13105623446989323, 0.10724318987352977, 0.19981115166476715, 0.45822839081589817, 0.40792888677500194, 0.43175464361389426, 0.3216734456241246, 0.25451391514110433, 0.3677416425703254, 0.49731551060922685, 0.2328997144688475, 0.22160374881234224, 0.5594478633566834, 0.5145287850108832, 0.6005062171507385, 0.11247923566686113, 0.12519333179387138, 0.4535360333528923, 0.1695411155167449, 0.027160626473227034, 0.16031878903282526, 0.05598740715842809, 0.4377258734905315, 0.1202062501182205, 0.4428406267462812, 0.31749326655467225, 0.44982334162424054, 0.47132931030151004, 0.4108738544308591, 0.3955778182353421, 0.49696526315932166, 0.5401799834603506, 0.3114704319027244, 0.044980100279080726, 0.0780595888125225, 0.10265443881247682, 0.14221899426486084, 0.16505750208332393, 0.09873761859783203, 0.07401414924440253, 0.07284763199929489, 0.075033798009418, 0.24141025999377064, 0.17511441840225928, 0.25528679978835866, 0.35304637047977117, 0.3078852343062263, 0.40001638690081565, 0.19168301794049858, 0.3673547919332345, 0.18281549787656637, 0.7870182991040479, 0.6568808590845745, 0.6044264450457708, 0.7947745141050935, 0.7414566194179568, 0.6477971244223257, 0.7804648239230711, 0.7377877626854705, 0.7773765342171763, 0.1248568652489388, 0.08415062342244617, 0.14790060430779617, 0.1736447386883616, 0.15896929413378658, 0.15658774386666097, 0.15985465506924645, 0.11840603727126853, 0.1600826238780113, 0.2849367512036397, 0.17473210764035407, 0.18221840882262852, 0.5373370467516043, 0.25373467704207353, 0.19889170105656606, 0.16277407783066533, 0.24378390356937185, 0.2079907786595293, 0.5179558661184025, 0.4536219422361384, 0.6910831108651996, 0.3970219538695777, 0.6157849160966986, 0.5479890957117823, 0.7508072515324293, 0.5833287085199921, 0.7670965805862194, 0.3277289422663606, 0.3241562377017302, 0.2813412742002812, 0.35097586761691757, 0.23607810758375425, 0.3172209204576444, 0.37665171752213045, 0.28187346522520695, 0.1562173949029908, 0.24013037910959578, 0.2575345421959826, 0.2183077387333724, 0.21733484582446505, 0.26406545909333967, 0.20299918834048025, 0.20230146158840245, 0.24288186004763812, 0.2574918347508033, 0.18276562178390054, 0.2025120600938244, 0.226855898630269, 0.22497222067268519, 0.21030088438922234, 0.19220967745880957, 0.20913939761559963, 0.2501056212101943, 0.2274048603168518, 0.1828045899448394, 0.9395069708825551, 0.18845888599990035, 0.1979936871570087, 0.9338815068405946, 0.8900038868905089, 0.15399776579819702, 0.17812265711283404, 0.16440522788533285, 0.20861632517125317, 0.167496233887656, 0.21109434078257228, 0.16933762059113155, 0.20018583999374073, 0.21113672663392136, 0.19518019544386467, 0.20443454977687825, 0.20235583033724558, 0.20450671995211356, 0.19527911265392472, 0.18545422008468937, 0.22167535367934743, 0.20108620185199277, 0.20814940259667414, 0.1908670705443717, 0.17890475317570198, 0.2202523915603678, 0.09096831320553866, 0.09963646952039507, 0.08428581480887731, 0.09069419034501969, 0.12840481115163727, 0.10178907883514876, 0.12499856994714864, 0.09506203537860625, 0.08896997611968038]}, "mutation_prompt": null}
{"id": "464c22cc-b455-4ad5-b847-c9c19aa06bfc", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Adjusted for more refined convergence\n        self.cognitive_constant = 1.5  # Balanced exploration constant\n        self.social_constant = 1.6  # Increased social influence\n        self.F = np.random.uniform(0.4, 0.9)  # Broadened adaptive scale factor range\n        self.CR = 0.85  # Slightly reduced crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploitation\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with adaptive learning mechanisms and diversity preservation for balanced exploration and exploitation.", "configspace": "", "generation": 70, "fitness": 0.4007263621861728, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.9053188963568406, 0.9020313054996277, 0.9153027556913217, 0.88903332716172, 0.911618528855435, 0.9058980819789396, 0.9120891743616926, 0.9097298179572447, 0.9151822525829448, 0.8175905493140745, 0.814815886381197, 0.8194162502201261, 0.817792775716226, 0.8266647982787884, 0.8356046959457388, 0.8217231848042079, 0.8114745067510716, 0.8021557136197051, 0.17600292630105652, 0.18302643693574006, 0.1561996960712857, 0.18844329842381757, 0.14167928402242647, 0.15250870363791613, 0.15467224299730986, 0.18070678343032998, 0.15975534548689652, 0.14319521780012423, 0.7874639976217026, 0.11478424207091398, 0.11305464551483468, 0.11520287699401255, 0.15870091333710934, 0.13936298765732014, 0.13770807608526303, 0.15620153615491894, 0.9781281629948467, 0.9854029652836912, 0.9713504225569305, 0.9876876272918389, 0.9859223243436055, 0.9860946518901054, 0.9768217223138452, 0.9937975344996599, 0.984735003855243, 0.7899944378560051, 0.794592665309821, 0.8126757589412927, 0.7979028205957748, 0.7796676463546022, 0.7552634963076252, 0.800304303435521, 0.7749675980204176, 0.7743413655114262, 0.8015965896355324, 0.22461963233694993, 0.39018178276816884, 0.8885127968316271, 0.19313966316032483, 0.8683624435481286, 0.3026531722858622, 0.8880827863627561, 0.8989936300837105, 0.1354547451657354, 0.21247343430596166, 0.587645956352159, 0.5140242397247459, 0.20306191177923938, 0.3647241551897028, 0.5212998417611774, 0.38082619287651265, 0.13318840246085806, 0.44119283103677365, 0.1336177554217507, 0.4018015822091071, 0.5292603330429537, 0.500325084373027, 0.13487907205861227, 0.43125882644901314, 0.22208858678475962, 0.37550189475773654, 0.10944550680770482, 0.2562482457311873, 0.3454497178208442, 0.2517439166563037, 0.3599297843986403, 0.19310982655629783, 0.26825709167995526, 0.1569968499467863, 0.23920735227872014, 0.35513065284021406, 0.5675805213283238, 0.14825615118968527, 0.37984491127532616, 0.39394494155310744, 0.16388430604649762, 0.43311113653650635, 0.5515707142823649, 0.5344562015295313, 0.051503719598585795, 0.10159520390075305, 0.27817676992343165, 0.08917190018943433, 0.1027025455275472, 0.19928990354147003, 0.07713002730043039, 0.11013210031059717, 0.1605745321434282, 0.3605504088362058, 0.28054449571954143, 0.28804617239534247, 0.35420370267305845, 0.2273767565105007, 0.33681739771625885, 0.271909174151864, 0.34714193475002053, 0.26392221789974113, 0.7368507185325051, 0.8355523245302532, 0.7778181501518622, 0.7624337266975807, 0.717624331144811, 0.6344520610317712, 0.7671397799086647, 0.6578298299889571, 0.7040638645117774, 0.1316195893418144, 0.08896499279615566, 0.12077563340612374, 0.15676090877944793, 0.1363490299968424, 0.1117805950240256, 0.1836074645938549, 0.1347706638346321, 0.15328123944332184, 0.28464343902741684, 0.26764153508812516, 0.2457587669487561, 0.16560967804533722, 0.13497251164492996, 0.40329291864754246, 0.18245009346346042, 0.6774459190760378, 0.1960104728797223, 0.7366044539363419, 0.2917112426060918, 0.45562640913851715, 0.552389020081741, 0.5616259368253238, 0.48049673564858364, 0.574169693472554, 0.5547672460191378, 0.6311893927742152, 0.39451074809881426, 0.3276626956204688, 0.37207754820782335, 0.284137298946734, 0.2310327905934405, 0.37577788866239925, 0.340862963071193, 0.17571545989924342, 0.25326464824072414, 0.1956946030381962, 0.23780914104232587, 0.2029512258061491, 0.21517368419627647, 0.1922945926506726, 0.22066090332311727, 0.24301837487615774, 0.2783619028646339, 0.24692920369667026, 0.21120831667007645, 0.7712825277420469, 0.20900314620512395, 0.2028863290379409, 0.22572612320827945, 0.2084692976227418, 0.22360101957145218, 0.2534099969771396, 0.2500456975432338, 0.12243579083311829, 0.9278688523778548, 0.1879497987849662, 0.19871917950177942, 0.9347930267511008, 0.21107519708707867, 0.1587485177220218, 0.17843336433759394, 0.20535647562486004, 0.15433916909188916, 0.7218910018604262, 0.16887008449991914, 0.1551452383206835, 0.12643462781919357, 0.16814721967098945, 0.21406096964340526, 0.19953198443901665, 0.10406482476947876, 0.20982758668260626, 0.21995918103961787, 0.22522140798230605, 0.20352380090332534, 0.18386669285112944, 0.2011084934502897, 0.19711344889030347, 0.20049118653826137, 0.18168228576429568, 0.1265422153260295, 0.08493620192647944, 0.0863107101655507, 0.1418323860054188, 0.1125117633788304, 0.10757229169910676, 0.10589798489459934, 0.086190887636872, 0.08330553380037886]}, "mutation_prompt": null}
{"id": "27d9cfb0-0c0f-4400-b1cc-66e8d8116164", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Increased swarm size for better diversity\n        self.population_size = 25  \n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for better momentum control\n        self.cognitive_constant = 1.4  # Slightly reduced for controlled exploration\n        self.social_constant = 1.8  # Further increased for enhanced social learning\n        self.F = np.random.uniform(0.4, 0.7)  # Adjusted adaptive scale factor range\n        self.CR = 0.85  # Slightly reduced crossover probability for more cautious exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.5 * (evals / max_evals))  # Adjusted function for dynamic inertia\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 4, replace=False)  # Use 4 indices for dual mutation strategy\n                a, b, c, d = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c + d - c), self.lower_bound, self.upper_bound)  # Modified mutation strategy\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "EnhancedHybridPSO_DE with dual-strategy mutation and adaptive swarm dynamics for robust optimization.", "configspace": "", "generation": 71, "fitness": 0.35391685464283507, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.26.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8297601692967634, 0.8168676811376478, 0.8282594938281174, 0.8327642798468856, 0.8340012953724916, 0.8390924137378335, 0.8116010506540912, 0.8037457947577122, 0.8065899521913984, 0.6752915149697805, 0.6642329386671347, 0.674298619293027, 0.6732067966589184, 0.700545481083481, 0.6747187510346693, 0.6778949368083516, 0.6769139477555144, 0.6718513898916223, 0.13472844789687277, 0.14785346707155456, 0.15129155580564935, 0.1564754140320207, 0.17081145550482613, 0.42773639264331886, 0.16292836727014803, 0.17263047910077534, 0.16223774051898832, 0.14875022287058637, 0.28059160780535697, 0.14860101727511843, 0.11981102438148794, 0.1433046379782319, 0.1202635952616854, 0.1635484541832538, 0.13532285927296694, 0.12172767007364504, 0.9874319414199099, 0.9712388062728037, 0.9808662033450655, 0.9815166413163362, 0.9862023911813131, 0.9757939426871439, 0.9807781225539354, 0.9867365346180841, 0.986165133922804, 0.6308366160348524, 0.6507546335924445, 0.6764671932961733, 0.5886527792556414, 0.6054950307880819, 0.6509219170150271, 0.6256400747599987, 0.612393927042246, 0.6261515896996884, 0.7197385516401285, 0.7965707830234369, 0.6604676806261582, 0.7581256134611646, 0.6987128969593626, 0.7443628596998559, 0.7293725576688586, 0.7606460428379862, 0.7209418729624159, 0.2999163411256991, 0.32426309559605204, 0.5034877245932491, 0.1294122040466611, 0.1271924682369614, 0.13215531107658463, 0.32350983214864015, 0.12457162344981021, 0.31399032934643323, 0.2810555676647327, 0.12742435380577188, 0.29438929193750374, 0.12895238162318678, 0.35245279368142923, 0.3842647830866234, 0.12880124065414766, 0.3012899171076271, 0.3661515178074042, 0.10618874329044481, 0.11272382046172702, 0.05514119679168927, 0.0738485669770178, 0.08808838630291316, 0.07612338000661734, 0.0940225206031784, 0.12969643349272897, 0.07284228987746189, 0.1826275106971379, 0.20473233591663542, 0.2134422504943514, 0.15509358856397082, 0.20868551308830008, 0.160816350872112, 0.1736953471291819, 0.2265468119923102, 0.16162308390938773, 0.04410957613140509, 0.2553990616102052, 0.04992222187065798, 0.11071421817960914, 0.10183642615572897, 0.13611719563571312, 0.08385844773385454, 0.13559472572690323, 0.16532500660949523, 0.2975574640411439, 0.21484999935235927, 0.23221718596020724, 0.33232030243722765, 0.18573977273282782, 0.28042698823513845, 0.25731312347656465, 0.2442763325147036, 0.2202653224512665, 0.5731625726277592, 0.6007446240340439, 0.5794794883635135, 0.585113440882524, 0.5948826500676357, 0.6054104683378151, 0.5886399787785619, 0.6205911960385886, 0.5837479985922103, 0.1408593489757568, 0.11144366922142779, 0.11687095564634475, 0.1381595243514281, 0.1283417636729759, 0.1086970200474805, 0.1109251841416472, 0.1424700046258338, 0.11149020884299354, 0.2250703350178095, 0.23833052333104388, 0.32376371582386976, 0.19569923856731497, 0.1882739841699279, 0.172597746819384, 0.18132574863015993, 0.21294268702999464, 0.19879260805915067, 0.36109173398494654, 0.419691439339851, 0.45387318099090757, 0.40634485415905297, 0.45895432858073815, 0.4720518827716592, 0.5643093054599551, 0.5638480444022518, 0.6107061252310063, 0.23714384957750922, 0.32464703823356, 0.24978606384378965, 0.2652083438419487, 0.35149700816736207, 0.3503420487859801, 0.3067553679554398, 0.27190404970626414, 0.20708951019767075, 0.20799130455202663, 0.22497772414332717, 0.2183967458771845, 0.22572518949454812, 0.22965518226876924, 0.19784069549722683, 0.19383972569300634, 0.2428646455943959, 0.20383299888641282, 0.6005480188245997, 0.20757809093584223, 0.2392797958294326, 0.23751675129385064, 0.19529532871444433, 0.7080067467348765, 0.2175703965963799, 0.18713112592481773, 0.22041946374600307, 0.15639923287487745, 0.1644600512573159, 0.8340848714020536, 0.16947358794407663, 0.874626166335709, 0.16912911254343976, 0.1727777485121893, 0.17702794920438314, 0.15824072757868923, 0.12563098538915218, 0.16783006287201518, 0.7023615434761548, 0.20592778903170106, 0.16793784192434047, 0.6725096308928037, 0.21281335980297567, 0.21282416808215565, 0.2094425809898236, 0.22042813185919774, 0.19979565321903436, 0.19386138411348597, 0.18968612188606926, 0.20719661992173277, 0.2002426320000873, 0.23528183571189487, 0.18477303181888272, 0.20873101923537873, 0.10903878789673127, 0.08519870726084577, 0.08794911470321276, 0.10707171990537989, 0.1042479166373399, 0.09442425336619198, 0.1241119450054623, 0.08889657154462183, 0.09977142419519847]}, "mutation_prompt": null}
{"id": "27ef0355-c400-4775-b5fe-23d32ade9ef2", "solution": "import numpy as np\n\nclass AdaptivePSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 22  # Adjusted swarm size for diversity\n        self.population_size = 22\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Increased for improved exploration\n        self.cognitive_constant = 1.4  # Slightly reduced to balance with social influence\n        self.social_constant = 1.8  # Further increased for stronger social alignment\n        self.F = np.random.uniform(0.4, 0.8)  # Narrower scale factor range for controlled mutation\n        self.CR = 0.85  # Lowered crossover probability for more conservative variation\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))  # Init with random velocities\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic inertia weight adjustment\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 4, replace=False)  # More candidates for mutation\n                a, b, c, d = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c) + self.F * (c - d), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptivePSO_DE", "description": "Adaptive PSO-DE with dynamic subgroup reformation and adaptive step size for balanced exploration and exploitation.", "configspace": "", "generation": 72, "fitness": 0.39452883906699154, "feedback": "The algorithm AdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8328620378513882, 0.8247762707574606, 0.8375843005520385, 0.8536656920224228, 0.18954837170868355, 0.8650318677334381, 0.8178123014525526, 0.8330078578890403, 0.8500362499402073, 0.6898290086214833, 0.7004909017711568, 0.7242898623233602, 0.7025922892592276, 0.7184970002169249, 0.713912340010183, 0.7268855893181347, 0.7251451432520799, 0.7219110713040703, 0.1660153604935607, 0.17092574396969595, 0.14899846797512095, 0.14759338750003204, 0.17241970462891565, 0.13988813831029534, 0.16367150718510748, 0.45287800539660505, 0.15980566562899678, 0.15173687525939317, 0.1516253161492468, 0.13177488165521156, 0.13685394529701111, 0.13166261999951512, 0.12989885997147887, 0.1344641546350831, 0.1593691408219181, 0.17006049614875485, 0.9875106806735529, 0.9840415997412079, 0.9794914437833773, 0.9825093071631454, 0.9906915058613431, 0.9694979339553532, 0.9793292750796784, 0.9917394921277625, 0.9853225438474711, 0.6245831315288931, 0.6615685099006274, 0.6594554416676122, 0.6240401286606156, 0.6451160545772818, 0.6681455727034639, 0.6730042474529239, 0.12322514831803222, 0.6719522742748674, 0.8003542143953449, 0.7648554242540286, 0.8242051996233334, 0.8569568024668739, 0.8630876697169857, 0.8146723458167571, 0.8023235255659418, 0.7556893360961153, 0.7647735016866264, 0.3723248167804666, 0.32780316410562016, 0.34660129966167164, 0.4487647335893882, 0.1294958648219312, 0.5061482724585133, 0.12736796823252894, 0.3209741845763108, 0.2917171105859322, 0.2522322415959819, 0.26318512885441747, 0.2726732960886281, 0.35994612779847335, 0.46096881023679714, 0.3289764689694561, 0.3151722739559144, 0.38721865651184484, 0.36011619118564564, 0.10858911219970802, 0.06448900690655135, 0.07654383048299374, 0.2763908851387741, 0.23873755166283595, 0.3476030939353961, 0.22597544862335528, 0.2992635624422538, 0.23812752678638405, 0.3587944327784056, 0.43716620946400686, 0.5240313928991157, 0.4151501050078299, 0.30474389986221795, 0.3433265853398627, 0.43635477194277905, 0.36987867535579766, 0.5021882292916566, 0.059538683610486975, 0.12186123257651105, 0.17004781556484616, 0.08236489032680605, 0.14118910470916812, 0.19230815165900583, 0.23199367528948156, 0.12304701477863689, 0.1097053492781972, 0.27546718541311177, 0.3171198134597828, 0.3143851043502325, 0.30771711612891306, 0.311867676332269, 0.3269632263390375, 0.26858574442009675, 0.2988337963276013, 0.28881079421864575, 0.7098637774820442, 0.7335584377331058, 0.6996618959398879, 0.7126601412291805, 0.6739289501580616, 0.7003349593909305, 0.695609775234952, 0.711492632310418, 0.6523490165196058, 0.15225804445175328, 0.10325443170913862, 0.10923719886627892, 0.5036358060981774, 0.15810778304619322, 0.12486183758215752, 0.12453435583660688, 0.14780426508524813, 0.17230493658290558, 0.4954021160355496, 0.4383828699304604, 0.20471846925156445, 0.29062573644454515, 0.232915969073479, 0.27667812768043654, 0.31464128842253025, 0.5410336087770983, 0.253093376895948, 0.49515015392406714, 0.4807329170119937, 0.4764619143057064, 0.46559451342841973, 0.49164975919275666, 0.6270466799840537, 0.5460944973427415, 0.5574094966164065, 0.6204433083236361, 0.40114542181736634, 0.3574164866649616, 0.3650270872093704, 0.36289655857126035, 0.21098298783478975, 0.3667498448698373, 0.4179455765713941, 0.3423541853426343, 0.45127302905492517, 0.2338357646819128, 0.2034211870568795, 0.21071665105123238, 0.2138739625813979, 0.20106799052295632, 0.19813365809985606, 0.20476850261879032, 0.2241092547817679, 0.2088537543044897, 0.21299579705906824, 0.18842531054809264, 0.23172979509843505, 0.24008378985072554, 0.2043579598363905, 0.6583102882515397, 0.2395003297049466, 0.21512060403383126, 0.23094938457545555, 0.8843887189220918, 0.1995812962618947, 0.16029343470921176, 0.8677325657546878, 0.8917341569369686, 0.1875003016972261, 0.1580038270759172, 0.17836031494190208, 0.823065164648032, 0.2069596445197952, 0.20870819436104726, 0.16896918704472808, 0.16566454203598768, 0.16844566706571984, 0.16738710959688996, 0.21338166615749987, 0.1996480836581781, 0.21110548193526302, 0.19088640698023762, 0.20134727054126478, 0.1903202353971737, 0.17332928064748598, 0.20354540669240828, 0.21188734025459377, 0.1925851556683419, 0.18159425339835866, 0.21347501242312106, 0.11277093517907721, 0.11139662931710059, 0.11488993456152907, 0.10869194224945222, 0.09147333834521831, 0.09946621807043288, 0.1211075282961177, 0.08819860799920332, 0.08424613177238993]}, "mutation_prompt": null}
{"id": "9991d9f0-b31b-466d-9287-6b0dd9469b69", "solution": "import numpy as np\n\nclass RefinedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for better balance\n        self.cognitive_constant = 1.4  # Fine-tuned for enhanced adaptability\n        self.social_constant = 1.5  # Increased for more significant social influence\n        self.F = np.random.uniform(0.4, 0.9)  # Slightly widened adaptive scale factor range\n        self.CR = 0.85  # Adjusted crossover probability for better balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "RefinedHybridPSO_DE", "description": "Refined Hybrid PSO-DE with adaptive inertia and diverse mutation strategies to enhance search balance and convergence.", "configspace": "", "generation": 73, "fitness": 0.4194945602156882, "feedback": "The algorithm RefinedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8904538730031527, 0.8748174016805284, 0.8653408557010029, 0.8679021069071625, 0.8876084268937653, 0.8800041010461024, 0.8822854877579791, 0.8776369942962525, 0.8764303592268301, 0.7769042236345871, 0.7500345146358601, 0.7772240042519192, 0.767870865084905, 0.7750707250088649, 0.772815648803136, 0.7904796042328168, 0.7829810530190584, 0.761030792967343, 0.17170966300169144, 0.15301793736413838, 0.17711148243320007, 0.1143931786548652, 0.7289142045752162, 0.15637209811366315, 0.6714518993664773, 0.18830850595594362, 0.15198394592889086, 0.14220433422684164, 0.15528908757942517, 0.12822550071243455, 0.1403011756991549, 0.13903786386793804, 0.09903592516954307, 0.14874165317955435, 0.11234193003663617, 0.12525446915061456, 0.9852413729351636, 0.9858556479824322, 0.9694004223546229, 0.9877137139567789, 0.9842217710012604, 0.9860129828913043, 0.9712353849135827, 0.9937951742701864, 0.9856514412987364, 0.7357507282843252, 0.7785094995380071, 0.6890298480947807, 0.761384127346007, 0.7520700651434916, 0.7557231544331754, 0.7448530634535924, 0.08781404222431743, 0.7469488439910896, 0.38070564922197014, 0.8440236033275168, 0.8350035131504492, 0.8652153045241158, 0.21373001089563337, 0.15238945514059798, 0.39193625224307993, 0.8423906086514112, 0.8545163617122803, 0.5426015052161903, 0.36300823874374366, 0.5290444955544911, 0.38587106208837296, 0.32517609783605883, 0.13525177671067923, 0.4940202698088556, 0.4470270379870904, 0.4565284020317947, 0.3375253300225518, 0.4043153738324776, 0.3885602109890127, 0.47477347403963654, 0.46126214698278123, 0.41827043605171743, 0.48545141337620945, 0.43695014822382183, 0.3730765359354308, 0.3124187406019411, 0.3821916677375231, 0.3243716940486695, 0.25555274523895144, 0.3212020749987764, 0.34339343570162384, 0.2820710945783884, 0.34374002427998773, 0.2159463989209932, 0.3911324962168774, 0.3723892383815657, 0.4441822433248881, 0.4441303215811653, 0.4350068406492186, 0.14437600084966484, 0.4320695089783744, 0.48894027013312036, 0.26174435106304317, 0.16021833184111334, 0.10391496820136159, 0.06911217856450314, 0.07666867984883796, 0.09080411989968429, 0.17814218106380353, 0.06862931922957027, 0.15731879939844817, 0.07267927774933125, 0.3059489821403424, 0.33175439554783803, 0.3151504111633804, 0.3244111630905875, 0.35225189431099957, 0.34651162996047447, 0.2870350912904378, 0.2769337637637417, 0.22711891195006717, 0.7312264664089763, 0.7714728361890545, 0.6869290347192905, 0.7686285190140507, 0.7437060707800224, 0.7187725994512716, 0.7104564011773241, 0.7674068432348943, 0.7418235747873068, 0.6694271303215369, 0.13603217783770283, 0.06278181666151139, 0.17030376774171652, 0.12211369635720493, 0.11857003293945545, 0.14926886581134258, 0.14023528584857836, 0.12195705625265385, 0.28138640213338384, 0.2717283307137033, 0.7067755033314236, 0.25806129647354403, 0.16316870306519282, 0.2739545640248786, 0.17996606190889886, 0.21794975880448342, 0.5915402756345225, 0.45611741269136497, 0.6722847675108565, 0.3415514021700111, 0.5534506833537618, 0.2763670332991043, 0.6107620161449764, 0.4739230621244127, 0.6930484853896646, 0.650226230017591, 0.5232589358579856, 0.34048429040720496, 0.38421418428807597, 0.37257643547946506, 0.2833660620010341, 0.23830631983054107, 0.4680754708887156, 0.4703886889067813, 0.36325816581093084, 0.21115376936132058, 0.23856999801530454, 0.19479659606062538, 0.25412372461823085, 0.20249949177362392, 0.19596115877165954, 0.2289905677552262, 0.23105283402271115, 0.21474535237021908, 0.779381327144453, 0.21879875852985486, 0.24740881508164525, 0.7585064616660468, 0.24607950870149653, 0.24259564422958868, 0.22874825874897475, 0.20545781175321154, 0.70895575000603, 0.08860516407768104, 0.9204297932823121, 0.18690544759163463, 0.16251807290056508, 0.9225213092809896, 0.1768903383157624, 0.8420718523669717, 0.8936197226929901, 0.1670933245582764, 0.16735623961386514, 0.1675721026895628, 0.16949464522764335, 0.20773919732795498, 0.789661566498306, 0.21000569788525036, 0.20377273475315738, 0.20992209606554957, 0.21198989484684616, 0.22769084949157925, 0.20249730939570132, 0.18466606420585885, 0.18858610352913385, 0.2056746907743311, 0.1993349193600895, 0.1794255552240429, 0.19059356256455173, 0.1790583584376102, 0.08979143901058795, 0.09750838040134968, 0.09745411957047456, 0.11241972548940415, 0.08981991010107648, 0.09843472843261314, 0.08850405112365056, 0.09667087528804841, 0.08951147992899844]}, "mutation_prompt": null}
{"id": "fca3918f-0f53-4994-b02f-9fe8bb94cde8", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.population_size = 30\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Further balanced for dynamic control\n        self.cognitive_constant = 1.4  # Slightly reduced for fine-tuned personal influence\n        self.social_constant = 1.8  # Increased for enhanced social influence\n        self.F = np.random.uniform(0.4, 0.8)  # Different adaptive scale factor range\n        self.CR = 0.85  # Adjusted crossover for flexible adaptation\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.7 - 0.3 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added Gaussian noise for robust exploration\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n\n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with dynamic parameter tuning and improved mutation for robust exploration and early convergence.", "configspace": "", "generation": 74, "fitness": 0.3280453033166108, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8774116551118071, 0.8714664961085564, 0.8552296336700445, 0.8712168322283578, 0.8748813629360357, 0.8883364556295728, 0.8919723538318644, 0.8651218973601483, 0.8750921387925956, 0.744013200425742, 0.7410135306272485, 0.591799794445836, 0.7473235549987547, 0.735059386221024, 0.7522959951132135, 0.7304138521363104, 0.4957401481190924, 0.7473041968912975, 0.6079100246764583, 0.15594393129073614, 0.179620089967374, 0.17669517456484007, 0.1493597311864966, 0.15870204628499074, 0.1226206848684751, 0.14560807906200712, 0.16707027288449916, 0.117661473161359, 0.09032483087125276, 0.10704356310847685, 0.1307463988507046, 0.1417252968524959, 0.14649356859738416, 0.12799420159677954, 0.14013703687997747, 0.11614275544432107, 0.972471115650699, 0.9875879373902668, 0.9726969559763958, 0.9731089537744025, 0.9877950959803661, 0.9832660692520515, 0.9824451517027936, 0.9873441620106674, 0.9779737765370516, 0.5775321055311429, 0.7068117660871068, 0.4772830416293389, 0.5756983415069381, 0.5332508166311538, 0.653545779064988, 0.5910060581359845, 0.5721548524571544, 0.6550346290166089, 0.5719650808056433, 0.364042687961458, 0.23515328366413968, 0.37061726057440636, 0.6708562011410151, 0.2700557837082027, 0.23736978987275303, 0.5120238312556211, 0.8227057508501061, 0.19904246482290933, 0.1897895413546361, 0.1890804250273782, 0.22212084106188146, 0.20134573685838153, 0.18375027979528702, 0.18821079291483533, 0.17997703472359805, 0.1997384857881529, 0.21446024666073027, 0.21788604604966377, 0.20276553031107702, 0.21673122646975274, 0.19622666070474382, 0.21673891328812134, 0.18664167619587158, 0.21425307504583824, 0.2259528892293282, 0.04547900236013103, 0.056889919295453506, 0.08875277535943282, 0.05658245322719335, 0.017213677739819078, 0.02681190763050978, 0.07962537009827175, 0.04358549060030359, 0.048631720543485635, 0.13940436113962007, 0.18196203946794431, 0.11464277602482542, 0.1192566798794269, 0.10687220423760224, 0.13467266090385188, 0.09673435630037197, 0.09830255154990242, 0.10909239607472898, 0.03517207910623166, 0.21576062932795614, 0.09132767374403361, 0.08889465747878289, 0.07783796643873231, 0.24641600092808513, 0.0742595010420255, 0.16393263579523376, 0.07282366021071007, 0.15280314772905856, 0.15082744141715354, 0.1446581879959178, 0.21006478322480038, 0.19013063462815205, 0.1493584549284267, 0.08211122818733163, 0.18872209254886463, 0.09235756815488061, 0.5273969126532109, 0.5317492950317646, 0.5082089323563099, 0.5782988256611861, 0.5093989191715111, 0.5541629821688892, 0.5563935573106555, 0.5355275776670048, 0.5471032913387268, 0.11478451500169162, 0.11221771869579755, 0.11532095982900759, 0.12163932036254077, 0.15527230505242573, 0.12571171191035524, 0.12955296595704113, 0.13322657833338414, 0.12932634697426892, 0.18488912317106287, 0.29217134100434994, 0.2062801107719331, 0.20364904340923362, 0.1585487624336629, 0.18174318151166047, 0.20659717498579788, 0.20477004527775, 0.24533141436196915, 0.3366463056417496, 0.3187700849175882, 0.4029427290290687, 0.40449065690535213, 0.2961470658591566, 0.36977515601095023, 0.3992499701560974, 0.5267938841589288, 0.3730694187458342, 0.20817578053800967, 0.3513566170706057, 0.2936045754549659, 0.24318638719188213, 0.2994738002947308, 0.30214588550019117, 0.2680708194449096, 0.2840564244065835, 0.32669041361959816, 0.2131529394773264, 0.2246202503494361, 0.18856674643220106, 0.23134303914395127, 0.22780973548639716, 0.1872777718239238, 0.24049872215209012, 0.21795836399371815, 0.22231164322606622, 0.19173696870163437, 0.24264491912553898, 0.7229163148621662, 0.2211887648458689, 0.1872958955356243, 0.2500854965710402, 0.21712157955837752, 0.24346633333162293, 0.22196785062878488, 0.1830220029428693, 0.9061699451987566, 0.18653130167728127, 0.14816508209971724, 0.8915851867194714, 0.19722190798092365, 0.8592473177836444, 0.1776817942383182, 0.16975565756182054, 0.5634114911288421, 0.21090504735616056, 0.16909455001841123, 0.15468570273798976, 0.737352403650508, 0.1679144418435513, 0.2130230105237796, 0.8796429692150022, 0.1045550939838702, 0.20320884941651085, 0.20307283992081615, 0.19104457986980783, 0.19357639785113323, 0.18334981867353561, 0.18591651924887587, 0.21413677478507542, 0.19431523949267004, 0.17934600154401237, 0.10772391877980048, 0.08673735250569903, 0.08268181139497977, 0.0936498782314773, 0.08090292637816454, 0.09454510650056613, 0.1260703887854252, 0.10583619886820395, 0.08985331029907206]}, "mutation_prompt": null}
{"id": "cbea943d-7008-4332-bd6c-aeee0e0691da", "solution": "import numpy as np\n\nclass AdvancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Slightly increased for better exploration\n        self.cognitive_constant = 1.4  # Adjusted for nuanced exploration\n        self.social_constant = 1.7  # Enhanced for stronger global convergence\n        self.F = np.random.uniform(0.6, 1.0)  # Expanded adaptive scale factor range\n        self.CR = 0.8  # Adjusted crossover probability for controlled diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdvancedHybridPSO_DE", "description": "Advanced Hybrid PSO-DE with adaptive inertia and dynamic crossover improving exploration and convergence precision.", "configspace": "", "generation": 75, "fitness": 0.3896727342051978, "feedback": "The algorithm AdvancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8563242332973506, 0.8553990645172217, 0.8583853923417698, 0.8567447813286341, 0.878351924565753, 0.8732395206318972, 0.8489192469072215, 0.8776927713738356, 0.8484603355420375, 0.7401692921272759, 0.696313930155193, 0.730474263893775, 0.72722335388937, 0.7335239793065836, 0.7478781961305823, 0.7412170515906751, 0.7626135988246787, 0.7444418578585024, 0.1542416988358971, 0.16846534712666794, 0.5300106775648313, 0.16892566280568722, 0.1661606492064882, 0.17654907054483504, 0.5112942466288325, 0.1753636978806744, 0.16745858622483156, 0.1486694247815803, 0.14409410437294878, 0.14340683697749323, 0.16797913438403433, 0.1289488483988811, 0.16621815586577782, 0.1723385656196137, 0.13016439313498196, 0.11979000266088446, 0.9876367946606003, 0.988959811079782, 0.09912400004868305, 0.9877909427231729, 0.9858274925020856, 0.9868883964856462, 0.9719715137779535, 0.9925818499939546, 0.9854263556853029, 0.7009675195055205, 0.6749613696759245, 0.685782665578909, 0.6802103088417433, 0.7164124933654931, 0.7106253708142578, 0.6845020644490194, 0.7209294447151733, 0.6649399184822196, 0.8049204178953246, 0.7596647159613167, 0.8325240368000721, 0.8885966508141568, 0.8292495416163991, 0.7332627536393165, 0.8022551475939658, 0.8709204859822129, 0.8305549967783828, 0.36888396206976604, 0.4120264709187962, 0.4232285148816275, 0.12998191056485697, 0.12895690918328018, 0.4354269578260882, 0.31451215940992594, 0.38240302851364905, 0.35313854701897984, 0.3529952939215113, 0.306552925949804, 0.37529103646686424, 0.4842796907660273, 0.43194974216026116, 0.3514416022274842, 0.359726835921529, 0.4813969546835162, 0.3304677303693344, 0.11299259474332235, 0.15261461337739735, 0.14800172193436922, 0.19199976085718506, 0.13792500351204184, 0.13156529947055673, 0.21399251652638884, 0.16298260384735985, 0.12690539403080803, 0.22496162736409564, 0.3206655767546037, 0.21979001665187847, 0.2239739849708129, 0.22482594632719444, 0.2919862058826991, 0.3323338122952346, 0.3269446080057934, 0.2612295430442749, 0.0, 0.06563706304653738, 0.04864239496320499, 0.139975348734647, 0.0766247042072924, 0.11043129147980235, 0.08011604623127566, 0.07208772395133056, 0.07221881838205702, 0.1947019752602328, 0.22772169365192307, 0.22519984414004546, 0.3092669652313266, 0.2393840224026611, 0.25062614672330996, 0.24137586725189564, 0.2899098487969666, 0.2193241251185798, 0.6437231946772972, 0.6955269351352982, 0.637948938658476, 0.6651149742038982, 0.6445078935890771, 0.6751371865930075, 0.622179380896768, 0.6809426670747514, 0.6501270336289435, 0.13251698043299787, 0.12384440411176989, 0.1476567368541628, 0.13431310223348902, 0.13146813019700643, 0.13419300132116607, 0.12117874723119237, 0.11421337910269791, 0.11150534221593811, 0.21120864220107838, 0.20992357709548182, 0.14287137860300425, 0.2233949505503411, 0.5409212184212585, 0.14751236843917026, 0.12801579659520668, 0.5281853329474097, 0.18097322217187373, 0.3544699755692229, 0.4989850897748487, 0.5681153024469012, 0.5473543262732666, 0.4949306422155496, 0.4977007316664007, 0.5575538892895766, 0.5379281412029726, 0.5463077240531011, 0.2670383395477677, 0.3404954682547029, 0.28589836827495296, 0.47956024234925054, 0.3002622204363895, 0.35915830127428705, 0.3719071220004494, 0.3967520223320268, 0.379121401342705, 0.23581561463847212, 0.22785835203294103, 0.20717532969149588, 0.19841696754762916, 0.20766434903688546, 0.18187686621709553, 0.20234560510905952, 0.23276213879213592, 0.23086553303073454, 0.20430421085104167, 0.20442516118975496, 0.20792700596094782, 0.6807335759459632, 0.7114712064478451, 0.22504408779769625, 0.6790463254456189, 0.22298852088406285, 0.2439703913361223, 0.0883042705503585, 0.8887194883299068, 0.15593930479878038, 0.1711288641350298, 0.9106964979502671, 0.1413327628971749, 0.16104198239691847, 0.17830664689933273, 0.8573327438996788, 0.7659770339153338, 0.7616651599201489, 0.2097205616337655, 0.1685052394652362, 0.15342368727649358, 0.16883263451273123, 0.19993443797820765, 0.20924346163292584, 0.21214486444378933, 0.19902552926859762, 0.2049742333279534, 0.19533089447761287, 0.19058596049219767, 0.2029929497279137, 0.19883844398046757, 0.2292680771080191, 0.20441232135035592, 0.20685386684098317, 0.08605949733402651, 0.09430456015928756, 0.09886862107663963, 0.1345491389806983, 0.09230338918590009, 0.080822182732745, 0.11810070343659751, 0.08831859701119249, 0.0875829749665269]}, "mutation_prompt": null}
{"id": "80dd2dfa-f5fa-4868-9fc4-51a31ae7a463", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Slightly increased for better exploration\n        self.cognitive_constant = 1.4  # Balanced cognitive influence\n        self.social_constant = 1.7  # Stronger social influence for convergence\n        self.F = np.random.uniform(0.4, 0.8)  # Refined adaptive scale factor range\n        self.CR = 0.85  # Adjusted crossover probability for exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with volatility-controlled mutation and diversified crossover for robust optimization.", "configspace": "", "generation": 76, "fitness": 0.4003767473962419, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8446884452315627, 0.8607707293493256, 0.8526850337842073, 0.8533572029537896, 0.8509435336191166, 0.8485327123297118, 0.8656479905371335, 0.8526542431880377, 0.8738470092596515, 0.7163962465832008, 0.7494880216459326, 0.7667822175291882, 0.7293414176609451, 0.7251924271482528, 0.7498409780994351, 0.7355199004904631, 0.7445823524141117, 0.7338016185962499, 0.16772851768506736, 0.1795342796799223, 0.145019496653936, 0.172606588509721, 0.5869579882898477, 0.16610997852710319, 0.15340139872907788, 0.627068392804326, 0.1151001787400171, 0.1580674277578592, 0.11703510883792656, 0.14640058898011143, 0.154301586226968, 0.14825583770160322, 0.12698649584056365, 0.1571523973130894, 0.12458466796517809, 0.15150857918069782, 0.9877859415640815, 0.9889554337008994, 0.09918155511344617, 0.987677780224579, 0.9888539171919204, 0.9850840317553985, 0.9720638148310231, 0.9925944314814623, 0.9879916686437323, 0.6739081112072127, 0.608627311956661, 0.5560977603106838, 0.6855462201031461, 0.676727663005551, 0.7252148165237848, 0.670188842428179, 0.08777856144525853, 0.6130458103176879, 0.7580999726577622, 0.8204910948524319, 0.8421516429701688, 0.8031637972844956, 0.2671955857540085, 0.26507114378092955, 0.8255123051388735, 0.8480763275822172, 0.17795401025704016, 0.46431922520464775, 0.441069451210204, 0.483629637457507, 0.40583894462790426, 0.26329776685201167, 0.32406078961695295, 0.394223883269072, 0.27730434266549375, 0.30752577684688953, 0.32699836959050943, 0.26465256931648395, 0.31737439197492745, 0.4928538429945417, 0.4035722888262431, 0.38100348149965835, 0.43870725813142686, 0.3431518945454718, 0.33571170876402445, 0.3136729180125779, 0.32835577936789273, 0.4063995138743468, 0.27682329348569523, 0.3368351555230351, 0.3495624469732297, 0.3115452860969836, 0.4134954367104072, 0.18181422048443374, 0.416860736993798, 0.3170445744717383, 0.4369561005621384, 0.40449250511797963, 0.3564120001208847, 0.16208779841325505, 0.4311577475918186, 0.6054729419952314, 0.09127236907043002, 0.04767372684435178, 0.09201804541577108, 0.09909374503979684, 0.23379711770519174, 0.07554732881112702, 0.13248174702798188, 0.2043269948074814, 0.1816389049101026, 0.10212622071165933, 0.2891692996701738, 0.31505042884483336, 0.25755536633278553, 0.31309695638842516, 0.3490426802862062, 0.3470513125877819, 0.3101753073294611, 0.3186294471692842, 0.3442849476882376, 0.6675748346934252, 0.7751847530307128, 0.7276850835450863, 0.659525121001197, 0.6427245574180303, 0.7271932425510058, 0.6831891202664705, 0.7421692795989727, 0.6027726453242567, 0.18211881524974294, 0.09428568368230716, 0.15250494499939393, 0.1581937878486922, 0.13413264895962673, 0.12338445801348064, 0.10894026186664629, 0.10077315833905454, 0.08533751451990723, 0.6340890903961824, 0.2839194525384603, 0.14384143832006535, 0.21403735282147995, 0.18284542763097156, 0.21155227261869491, 0.17013664391852157, 0.33546754557527325, 0.25565657868414815, 0.5814276835515542, 0.5173822465882167, 0.5901263612549266, 0.5089431788681678, 0.5378312757766637, 0.6082552872308559, 0.6479223735760373, 0.5164568946285091, 0.5673766233341828, 0.4456074260046966, 0.3138522003618449, 0.40797697851833203, 0.330309242542153, 0.36249774679703806, 0.41676014590008115, 0.33180718102275175, 0.4029554151393493, 0.4379894757934575, 0.23626045546305763, 0.2555881681171458, 0.21250476715055422, 0.2261045436426462, 0.23288307316944523, 0.2251073973550849, 0.20366663200681157, 0.23793686764284772, 0.22568211677200833, 0.21687397785705076, 0.20586674652465886, 0.2194467409346571, 0.24410757478106526, 0.20936116488376977, 0.2190032425164795, 0.2063131395329557, 0.2172459183786597, 0.19381534168485215, 0.13478879332106275, 0.8988067928893746, 0.16577464671202957, 0.19626549917945835, 0.9275736526277225, 0.8274530179253559, 0.15808659169429395, 0.17825917651253587, 0.8214035498691555, 0.15521173296263824, 0.8465170175245755, 0.2092738427512424, 0.168627136743428, 0.7885651687303941, 0.7334749273572767, 0.21375675827088736, 0.19951777063148524, 0.20323885631591387, 0.18940756298361539, 0.20016482714374784, 0.19689163016839561, 0.19302579283913546, 0.20059167965226266, 0.1922405193511949, 0.20916047064664622, 0.21611001943503827, 0.1792693622874092, 0.0946712297057758, 0.10765421967175604, 0.09022176934783765, 0.12163976602103543, 0.10340024953517968, 0.08564154172422644, 0.11359916762252253, 0.08937402529166627, 0.0939901856711367]}, "mutation_prompt": null}
{"id": "7e30a105-a427-4cd8-80eb-c04b739a7788", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for better exploration\n        self.cognitive_constant = 1.4  # Slightly reduced for improved stability\n        self.social_constant = 1.8  # Strengthened to increase social pull\n        self.F = np.random.uniform(0.4, 0.8)  # Narrowed adaptive scale factor range for diversity\n        self.CR = 0.85  # Lowered crossover probability to enhance exploration-exploitation balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "EnhancedHybridPSO_DE with adaptive inertia and mutation strategy focusing on diversity and convergence balance.", "configspace": "", "generation": 77, "fitness": 0.3888826484866719, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8434484422721122, 0.8477499505668087, 0.8581839635444231, 0.8559008760021309, 0.8680106595845788, 0.8642624017998464, 0.8603593636493903, 0.8473095049528397, 0.850217110143303, 0.702638179841922, 0.7470150470195045, 0.7391945564288813, 0.7098407761733069, 0.7250071933458049, 0.7337673482782052, 0.7030456702241947, 0.7289979657799206, 0.7389839183301556, 0.14113943705443321, 0.17734305942991135, 0.14527021660011397, 0.1113132838783899, 0.15119586698266763, 0.1509647348966926, 0.1484202774978174, 0.17182617253719168, 0.16905844188948782, 0.1351503054577814, 0.13871805358312483, 0.14695398150761974, 0.13494677230017738, 0.15917370552213328, 0.1637376013842622, 0.11245465320587045, 0.15025330501271417, 0.1677776718072277, 0.9878481480000468, 0.9890129766995288, 0.09919745922088263, 0.9877357515184183, 0.9889029646304082, 0.9861345320642697, 0.9769505613543948, 0.9926032378044168, 0.9884085498615921, 0.6912915673455042, 0.6060066714655996, 0.6478824881216103, 0.670718029493446, 0.6740746991714108, 0.6349428420046106, 0.6545317616074722, 0.08739755396818893, 0.08854457141195471, 0.8274700184846753, 0.8432498803460038, 0.7880272711732641, 0.27921900084983664, 0.19168214632461478, 0.071535033510024, 0.8183464584876912, 0.7224380361359903, 0.8278638814035726, 0.3852529414718694, 0.3323723421727999, 0.3493286673807384, 0.42110181417542936, 0.32396471009814287, 0.31068962086845964, 0.4473720992769419, 0.3245385630104056, 0.26124535650816216, 0.37878004056339887, 0.29312366592692507, 0.2794534456010229, 0.361611594195719, 0.3923433344678572, 0.44171668768459116, 0.40184736330578574, 0.3105247091644614, 0.352718752792185, 0.31381176068391103, 0.09867601991476127, 0.1857579419589328, 0.24385990415026426, 0.008902706377445058, 0.26413663237862195, 0.3321022033028824, 0.0995739769885211, 0.25746598083216465, 0.4604736108331423, 0.5009059051821254, 0.40142930476148997, 0.5403560646666059, 0.5092398384307428, 0.4265927531262016, 0.4877036469261822, 0.4707262091104809, 0.1307072536678583, 0.0, 0.2350050069029921, 0.09602978785473681, 0.27570703093644766, 0.08589057089980434, 0.11115771026445798, 0.1434486422452803, 0.15309376233077743, 0.07198901807915536, 0.15337255810019357, 0.29579442942923007, 0.33376480207750825, 0.29830326738490387, 0.3517513994794186, 0.35640507676984434, 0.25278355774610584, 0.30358136293332716, 0.25723672641627704, 0.6996262109854109, 0.6771321854369415, 0.745632893006995, 0.6960441941268036, 0.5948395393775561, 0.7473444650635273, 0.7183655490232097, 0.6909989243398846, 0.7256167787557047, 0.16553266723427673, 0.11213285521051308, 0.13639322348312322, 0.14541275866866288, 0.1384455070170656, 0.129250532200319, 0.09362776322652921, 0.1030613053294297, 0.08430597310340238, 0.24019021617044112, 0.21868355098619974, 0.39600476404073515, 0.6114118526150814, 0.24020940651432188, 0.4444130605109836, 0.2155407051015018, 0.586827345496514, 0.1824812227175685, 0.5957077889435385, 0.5244790189877613, 0.5599640204009628, 0.5451022630683856, 0.20288692742778824, 0.4881471814177296, 0.535328657172, 0.6297729462595711, 0.6266009555949927, 0.28652443929989035, 0.45606100663365656, 0.4132679078592596, 0.3823423150549561, 0.4118271709512821, 0.3726523214238845, 0.39607526376591273, 0.4020269348073584, 0.3699506934553146, 0.20790474174970286, 0.21965686330032286, 0.20262736765844014, 0.22857296076135747, 0.20424106812736187, 0.23321445898086945, 0.2023502024151319, 0.2243470672229202, 0.2209504903692594, 0.21560784984026216, 0.676819573254058, 0.24061361923732028, 0.23175404772745745, 0.6377262036280096, 0.24949983478213833, 0.2182753163748553, 0.2387085055866669, 0.5742859026945728, 0.2092950588785537, 0.9029589026103698, 0.1573762560511588, 0.13127542869593511, 0.9115013754617183, 0.2079884527622452, 0.1611018281503619, 0.17494256509369788, 0.8644033799081433, 0.7993080461957507, 0.2040806919732967, 0.21035012755400007, 0.16741783196058058, 0.6364941022964543, 0.16781219821200577, 0.20402964322088468, 0.21357530175568384, 0.2123266928174854, 0.19257458464669108, 0.1807727911949054, 0.18944195762959393, 0.18427985710582195, 0.19654897835092255, 0.1945581384482522, 0.19895528113634797, 0.2095806948717306, 0.1809606597424458, 0.09333227658415821, 0.09078479683244367, 0.09819555284953696, 0.09827938600359698, 0.08219284275502892, 0.09534677526298596, 0.12032733217210845, 0.0922078763586196, 0.10130637884790339]}, "mutation_prompt": null}
{"id": "ca06c89f-9812-4e48-9999-49a4c463e33a", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 22  # Increased swarm size for broader exploration\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Fine-tuned for better balance\n        self.cognitive_constant = 1.4  # Slightly reduced for stability\n        self.social_constant = 1.8  # Boosted for enhanced social driving force\n        self.F = np.random.uniform(0.4, 0.7)  # Narrowed adaptive scale factor range for control\n        self.CR = 0.85  # Slightly reduced crossover probability for diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.3 * (evals / max_evals))  # Adjusted for smoother decay\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with stochastic velocity adjustment and adaptive mutation strategies for robust convergence across diverse landscapes.", "configspace": "", "generation": 78, "fitness": 0.38720118164635686, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.29.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8762188110571845, 0.8960189383998899, 0.8893998333831558, 0.8740208933106945, 0.885884856775201, 0.8950299308054941, 0.8876426939730602, 0.9052365417372193, 0.9006093216581097, 0.786475877719844, 0.7819205515166217, 0.7719365333680984, 0.7822953688126099, 0.7660161205820695, 0.7858619559162947, 0.7981263500230623, 0.8007969086676885, 0.7012198249252546, 0.17946240322541906, 0.1543807954256914, 0.1574911695496568, 0.15431918831717262, 0.1662200770699086, 0.17115274359033228, 0.17455578104313796, 0.15801304773830194, 0.16168184008575592, 0.13851418105432567, 0.10933237746209745, 0.11733047123375984, 0.11052774275862154, 0.16259622660052753, 0.15100050010205868, 0.1685105839673584, 0.13745789473383951, 0.10261059383526883, 0.986807247103389, 0.9865290956466465, 0.9726733426157294, 0.9770920768978808, 0.9890627770685574, 0.9745119565414899, 0.9730715001861707, 0.9910693388813857, 0.987416627167846, 0.7645527384575033, 0.7587635582817707, 0.7365337214580379, 0.7831889426489784, 0.7643685278135395, 0.7695099904883721, 0.7877667266354544, 0.6812113532399615, 0.7527357355716484, 0.8402339248945634, 0.22738497543428626, 0.3809680208234456, 0.8701144966360819, 0.16124865653030995, 0.8651983144334541, 0.23424651920086048, 0.8410089519925424, 0.35306822817426864, 0.27763468191274876, 0.13359687944217935, 0.2424888958234167, 0.7113774812396794, 0.25084953517362496, 0.37400336516926114, 0.5382619550079568, 0.2850998169048602, 0.35812513922782196, 0.28608057961421995, 0.238923842245785, 0.27703749521512944, 0.2873683437413991, 0.48837148392747776, 0.301064072254135, 0.29131845757151265, 0.269771903325439, 0.4601971474232899, 0.22069713676266833, 0.07019895165087342, 0.09110551667171862, 0.3429562923667038, 0.06911457760444228, 0.26812324401607446, 0.15980367965958175, 0.31583911458538283, 0.04982983281270881, 0.2431320886965651, 0.5007346819934182, 0.10227445197532803, 0.17257624328809795, 0.5007589573543465, 0.13881426713155598, 0.5765004835966563, 0.24718659281583266, 0.37565447869115143, 0.0, 0.06245139378918119, 0.14822545258781084, 0.07765576130476115, 0.29692985762696045, 0.14275950186263076, 0.09114343477509212, 0.10139519254118512, 0.12134222291518437, 0.304819962713634, 0.38712954896686447, 0.302795410827314, 0.22198554437133633, 0.006511380799312572, 0.3470323956421093, 0.2390558370867355, 0.36888852707152286, 0.2673005577336407, 0.7410321293962063, 0.6744985791819226, 0.6718670064091801, 0.7136147497993541, 0.7925052762434186, 0.6762511187892373, 0.6424721758660608, 0.6349015736169168, 0.61736345990371, 0.11237693933270798, 0.10375469878375976, 0.14467980953794013, 0.13203601955757494, 0.182149298969274, 0.14309647284216775, 0.129229563602553, 0.1226292328520836, 0.14224071032739416, 0.14028369452520761, 0.18677670296149584, 0.27272371839620524, 0.23452044350489187, 0.21700140399176915, 0.14387822484292867, 0.3334798196140809, 0.23240962418216482, 0.7061042368933377, 0.4974545668871063, 0.23951331507624396, 0.3784608640673416, 0.2785762880423738, 0.5606383940895272, 0.6775065052646523, 0.7175684504364663, 0.6886057661231626, 0.5695443347597483, 0.37014778335114795, 0.39880203475071707, 0.27706887305678995, 0.4048935786145418, 0.21717351537062768, 0.2712653883823113, 0.43533343031122074, 0.39058912732480533, 0.313862303797834, 0.20181359362181606, 0.22178355394271032, 0.19241169967737926, 0.20716189188542056, 0.2075407874040015, 0.21816628868980792, 0.21869507501024843, 0.232875636926126, 0.2416951962233579, 0.24438989338063033, 0.22441945318105483, 0.1964265063866646, 0.2241598416435937, 0.1984379721612205, 0.22363852172823007, 0.7779416413002878, 0.20764279083913917, 0.24923143852894836, 0.15263417830541604, 0.9259402341474561, 0.16305705985411623, 0.891484384602901, 0.9258742569836566, 0.910853169117717, 0.159191197482055, 0.178336467340395, 0.9147692814653394, 0.16461516600309445, 0.21177567374530193, 0.17012687427544204, 0.16682978953418837, 0.1685143130514678, 0.22481145542559522, 0.11263121764093142, 0.21336798727567696, 0.10456996542481334, 0.18701973907665126, 0.17669864369600496, 0.18241659298805868, 0.19195453825613729, 0.19141492972142538, 0.22256079778853133, 0.2081761605691801, 0.1839734071101301, 0.21399462344953812, 0.14998996926970742, 0.10245501767902843, 0.09548091499349409, 0.09686498630138063, 0.12212046606870608, 0.09766954944744499, 0.15493711901785978, 0.1061124602326099, 0.09841973735354881]}, "mutation_prompt": null}
{"id": "15793b4b-1e25-4b93-8933-a34c8f17d600", "solution": "import numpy as np\n\nclass AdvancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Increased for exploration\n        self.cognitive_constant = 1.4  # Slightly decreased for exploration balance\n        self.social_constant = 1.7  # Enhanced for social influence\n        self.F = np.random.uniform(0.4, 0.9)  # Extended adaptive scale factor range\n        self.CR = 0.85  # Adjusted for strategic crossover\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (1.0 - 0.5 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdvancedHybridPSO_DE", "description": "Advanced Hybrid PSO-DE with adaptive inertia, diversified mutation, and competitive selection for enhanced exploration and convergence.", "configspace": "", "generation": 79, "fitness": 0.3919502287228439, "feedback": "The algorithm AdvancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8185879600315277, 0.8460328194639705, 0.8465634308961422, 0.820362713496596, 0.8409134300808025, 0.862378209803776, 0.8216723895002274, 0.834321105222386, 0.8425801418966701, 0.667853779537309, 0.6968235520123627, 0.7135223855213751, 0.6737699320651755, 0.6887964475603785, 0.71783461404315, 0.6821686319358256, 0.6958819337811446, 0.051853391083353406, 0.16361498242823036, 0.16543121751207268, 0.16137452716891498, 0.1660384572866317, 0.14840670996718597, 0.587396443305659, 0.620346669974496, 0.16551249230703757, 0.1684808078207316, 0.13404546616295587, 0.11312979783564459, 0.14452939695672562, 0.35555011773249745, 0.14219262083185424, 0.157836760924995, 0.12889680722001085, 0.1555759850078472, 0.13890361816444874, 0.9887364679016541, 0.9889562581665766, 0.09917109624479237, 0.9885483308058015, 0.9888684480493181, 0.9854584257333445, 0.9736581066496276, 0.9925900927879044, 0.9875694714747026, 0.6575512584087522, 0.6536132882708126, 0.6041331457030138, 0.6601236907275361, 0.6328644110580921, 0.6447501208329698, 0.6074130473263242, 0.5798765911859889, 0.6250891819655124, 0.744872172987602, 0.21520949972461012, 0.7753902300075834, 0.767794518821884, 0.8296940282131431, 0.7854639363888242, 0.7315526407965987, 0.7564458387578625, 0.8251258926767064, 0.4043383475231923, 0.3877621225832729, 0.3521610853749485, 0.3801163310083814, 0.12629544817045102, 0.34439619466444826, 0.39526704188496, 0.3963208708195999, 0.40919858168173917, 0.36233879991832474, 0.4130689557440529, 0.34357525185288673, 0.385346612859395, 0.3320353035484954, 0.38457459613424716, 0.2548489981105375, 0.33858037779501005, 0.329285153793603, 0.22450307119056545, 0.3423508209951327, 0.2717885452372182, 0.27113335596096233, 0.10904063678868947, 0.35203764172078267, 0.28521397421407124, 0.31703888459358043, 0.31863619412832866, 0.4454581578688387, 0.4899573850483705, 0.33880424792698405, 0.3414071107514688, 0.4500698973182995, 0.46980054229101187, 0.4608256310281924, 0.528140067593271, 0.4872289925215587, 0.059093571455506755, 0.1711067565717853, 0.058021379369676995, 0.13379357609950693, 0.09465724488876004, 0.16827508090039955, 0.10802992244560572, 0.16446992874000066, 0.07171842116855076, 0.27079265999859403, 0.23402688686114848, 0.2553025410247963, 0.26650452632718247, 0.2926519250917837, 0.31324168928411367, 0.2800077228289084, 0.31089524673081614, 0.2745407510250064, 0.6732120094995263, 0.7099573644160229, 0.7205160757339621, 0.664560795166373, 0.6967143443077901, 0.6661484397889325, 0.679371652791001, 0.7228335233000653, 0.6841167227399041, 0.11979579096868653, 0.10851282705899812, 0.1178828387881311, 0.10678963952943232, 0.13267934565380424, 0.12304746988079929, 0.16205259604339994, 0.12824790886716642, 0.13504626040208112, 0.24695686487471935, 0.17286688711241005, 0.19252757154693823, 0.1953348540938339, 0.1628952257615769, 0.18766319642146256, 0.1503779343249496, 0.25402501867029204, 0.25798050832417296, 0.4931876087976148, 0.5462111491098767, 0.47601662127295075, 0.5480100254165055, 0.5371598572848262, 0.5028113398136249, 0.5046938122524864, 0.5741834309608476, 0.5804605419351899, 0.38287090517448275, 0.36299444439926387, 0.3682920425431857, 0.3136238823561178, 0.35180495948036383, 0.30064488654931165, 0.3566011746619079, 0.39550240039601514, 0.34457577002030404, 0.22443367489888233, 0.2313962219714747, 0.20784655275373676, 0.19855138554631602, 0.19376572723223096, 0.2093110455500955, 0.18816792721992892, 0.22182949551731268, 0.2168635659024699, 0.5572920032917112, 0.23045494000479916, 0.2414706437375691, 0.21420106713746256, 0.2407293129751863, 0.5866734194325505, 0.23547531631984597, 0.6780361576223088, 0.2386899919831319, 0.16163634981686814, 0.8951552482372869, 0.7814624137494837, 0.19232774713870693, 0.8901753165796724, 0.20855575161605056, 0.16455560497629595, 0.17770849155930868, 0.16689630448401982, 0.742160608593079, 0.1629335955273976, 0.210747500260152, 0.16765484448093426, 0.1253646599841446, 0.7667106551502159, 0.21391920476228032, 0.19484129599154754, 0.2025078536818189, 0.19459027879655777, 0.1875019173046104, 0.18219532646599623, 0.19886568376252112, 0.1986762461802839, 0.18797486381370399, 0.22261078455927896, 0.2049801175642909, 0.18095923914047274, 0.0953393742464883, 0.09648899152439427, 0.08262001565066834, 0.13957993559324877, 0.09255791559994975, 0.08313630550871165, 0.0842751523031755, 0.09084271687495926, 0.08601912540272316]}, "mutation_prompt": null}
{"id": "151e09a8-8f8d-4b14-8189-9e22dfe8ec92", "solution": "import numpy as np\n\nclass AdvancedSynergisticPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Increased swarm size for better diversity\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Increased inertia for exploration\n        self.cognitive_constant = 1.4  # Slightly reduced for more controlled exploration\n        self.social_constant = 1.8  # Enhanced social influence for convergence\n        self.F = np.random.uniform(0.4, 0.8)  # Slightly broadened adaptive scale factor range\n        self.CR = 0.85  # Adjusted crossover probability for strategic exploration\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component + np.random.normal(0, 0.1, self.dim)  # Added random perturbation\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdvancedSynergisticPSO_DE", "description": "Advanced Synergistic PSO-DE with adaptive learning rate and random perturbation for improved optimization.", "configspace": "", "generation": 80, "fitness": 0.354267121214751, "feedback": "The algorithm AdvancedSynergisticPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.7811430424963716, 0.8264433498052399, 0.8018016936919199, 0.8066222148328529, 0.8071029150557977, 0.8338487092593398, 0.8250419844826625, 0.8259917757363084, 0.8283031191175548, 0.5911097048729674, 0.6713635097504218, 0.6528172269371566, 0.628000882211734, 0.6157582031604417, 0.6445694273783669, 0.5936742425102521, 0.6151460680551524, 0.6454070297779377, 0.14796510864215617, 0.12383090291236132, 0.1518208659729835, 0.1430516075115933, 0.11811559033848129, 0.16511954278786667, 0.30698222703031974, 0.20842175612190728, 0.15754802955588765, 0.11686698733648648, 0.11659442280167753, 0.11414033508743981, 0.1257516777949761, 0.11307881159441291, 0.13359202703064843, 0.12001364587084518, 0.12344693340657031, 0.12222143076726077, 0.9854319969896176, 0.9683592318455654, 0.9806177677248192, 0.9810579451548405, 0.9775184755447436, 0.9778191452783798, 0.9771530058211064, 0.9908476641195717, 0.9727839207988856, 0.4879253703676273, 0.4810844807743543, 0.45731495821946433, 0.4507799838944364, 0.5111269619218722, 0.4885252357239386, 0.44416541102624785, 0.4574303908565738, 0.5039657745206154, 0.6967651448912646, 0.7846014698518602, 0.7859472618795115, 0.8184679320627825, 0.7632020696959525, 0.1586159842291578, 0.753227864677478, 0.7469362867525696, 0.7757206387274181, 0.21756679890274455, 0.2229869947655383, 0.2485114178189568, 0.2152403447917146, 0.128055314169649, 0.20173040956011978, 0.23087047230767122, 0.24205944785138223, 0.20684106954302128, 0.40346453606722565, 0.19236949913520962, 0.19163968272574539, 0.3280983970646876, 0.19414657663674395, 0.19720538007527044, 0.25831123388315336, 0.218081589662789, 0.21078772986934513, 0.17906891958645754, 0.07342154415916158, 0.1634318425303236, 0.24933822962314844, 0.19837253805514365, 0.20455086137183331, 0.2177870934397903, 0.10852353107970247, 0.3020413099437991, 0.3713731324903681, 0.30263602557243285, 0.11512126571677361, 0.39710873038015215, 0.3861687618387879, 0.4113997603255364, 0.43716907941736716, 0.41788132154551016, 0.4078251196928935, 0.0411540416135302, 0.18201058195835573, 0.10377554049631255, 0.18551815248607162, 0.2365777224578408, 0.12184917160214281, 0.08100161347047774, 0.07953353930154039, 0.1365866232496099, 0.24049187394874894, 0.24298316726977376, 0.2753900728648503, 0.24816010614495243, 0.26725270344142293, 0.28015081631073246, 0.20773252185951618, 0.2966011032740453, 0.22052940745324046, 0.6441583930932824, 0.681833136007485, 0.6370000084652494, 0.6622753908202865, 0.6683818602325571, 0.6213288420595325, 0.6219279273997877, 0.6711909743045492, 0.6440486162047161, 0.13502749667447533, 0.1006449428281938, 0.12487942778041161, 0.1135381693557097, 0.09284555827659946, 0.10743014941750184, 0.1012655584483727, 0.1144834279263347, 0.11848801466586523, 0.20382890373284723, 0.21685024205626546, 0.4084766834015523, 0.19282432616804412, 0.18834796282079824, 0.5223309598204394, 0.19724496579060147, 0.39838357408883585, 0.2304220279200252, 0.39794961112401583, 0.3768401377486803, 0.39329202192595314, 0.412678638089771, 0.41953798736779646, 0.40248417338928777, 0.38612728317043366, 0.4173828079304842, 0.4167965859974795, 0.30396146409168556, 0.3155238482425683, 0.31069485926452634, 0.26849811277608804, 0.2796312038832921, 0.31616568717099836, 0.33622178276197445, 0.3129303548587471, 0.3466943520688611, 0.219719565370605, 0.21406680582522353, 0.21652818379043426, 0.19785300139276518, 0.2310790371450141, 0.21951246429110882, 0.20565744131237296, 0.20429332467642458, 0.19472924916903545, 0.2621199291250209, 0.38027952892649364, 0.3564146159987239, 0.21519694887386154, 0.27800233839735955, 0.4812743772550855, 0.20292928928467913, 0.22118185555942504, 0.30510342073154384, 0.18547483069863335, 0.8630747751916261, 0.17494759111382407, 0.14773784529496792, 0.8430692117585484, 0.16855535111378472, 0.15754963675386358, 0.17729693843258243, 0.15737650811443504, 0.16549347130020164, 0.6003633912806939, 0.16900580528809295, 0.2078317060638999, 0.16812761055230785, 0.7195282617199934, 0.21331472796375417, 0.21276910244422198, 0.7678455888535763, 0.18924488339305, 0.17533700734296942, 0.19042058532115147, 0.20427941998326948, 0.1817484953548355, 0.18094535110762755, 0.18889439447473744, 0.17876301404048955, 0.17943676065921754, 0.0875646425940646, 0.08795563642697635, 0.09833388992330216, 0.09599860060165843, 0.08611889701353015, 0.08454288995090231, 0.12582508576669793, 0.07991985753340491, 0.08961249236085767]}, "mutation_prompt": null}
{"id": "873775ab-5f03-4444-bb64-bd49a671d49d", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Slightly reduced for refined convergence\n        self.cognitive_constant = 1.5  # Adjusted for balanced exploration\n        self.social_constant = 1.6  # Increased for stronger social influence\n        self.F = np.random.uniform(0.5, 0.9)  # Broadened adaptive scale factor range\n        self.CR = 0.9  # Adjusted crossover probability for strategic balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with stochastic velocity adjustment and strategic mutation for improved exploration and convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8576566449643015, 0.881370456319332, 0.8811023776997438, 0.8835913666778646, 0.8725891678040625, 0.8651150917360322, 0.8684413304263632, 0.8858458065983518, 0.8805696674194604, 0.7555631137231122, 0.7619556029173722, 0.7478292134942133, 0.7243490102944913, 0.76045429645202, 0.7654934261681949, 0.7585764270716563, 0.7732748649689264, 0.7655571985675484, 0.12115483993486709, 0.15520934994214874, 0.17819459455239117, 0.07417411138844854, 0.1733149267890567, 0.17789015716762513, 0.14927210748530073, 0.7064081780292664, 0.12108266897552245, 0.17100320916701695, 0.14108182598351682, 0.11173757318492605, 0.15317123370513042, 0.12715573770749566, 0.11341071348844178, 0.10516687069865016, 0.12112312708950557, 0.1251766206553715, 0.9851789376984205, 0.9887782361678231, 0.9768682091686163, 0.9885751553814965, 0.9853358467765109, 0.9861553445374898, 0.9767594771384877, 0.9925781321061359, 0.985316943944816, 0.6970373337485434, 0.7782388948163348, 0.7008176300504448, 0.7418473927605249, 0.7379069190908851, 0.774473142722404, 0.7270166726704186, 0.7389338990487031, 0.7542109327248996, 0.8334292466090863, 0.770307104527948, 0.862308751096581, 0.8048546198323272, 0.8388660519451728, 0.21214931550161054, 0.8451619749918791, 0.8185408606974324, 0.79250476718173, 0.47662063054423065, 0.46039892186412334, 0.12783154414767217, 0.47913046470392684, 0.13189585091470712, 0.510795614258968, 0.5134628048653866, 0.5070728749596212, 0.42527490957173697, 0.49333470519936795, 0.4285486327094601, 0.45658009079136375, 0.13235586673928867, 0.5173345164330324, 0.47715045586932625, 0.46372709664678247, 0.1330601191746078, 0.5571520324551844, 0.21170039662206774, 0.3448173319555511, 0.33153876879246336, 0.4023506817705921, 0.3825143775499926, 0.3369843342101342, 0.2900591234600234, 0.3054643613225405, 0.44153261629070395, 0.4270746405910214, 0.5287108834430669, 0.511271463528336, 0.5004528761361743, 0.399617807935866, 0.521860183672566, 0.4780872733511933, 0.5440169388118752, 0.5635067572777932, 0.0527898884101452, 0.10035079827455406, 0.2145832553718865, 0.19702358390414665, 0.2932696521181468, 0.10745563524887258, 0.0712449401596339, 0.16231987617148702, 0.07275359954377403, 0.2947963718834842, 0.32497814018398785, 0.341627559524439, 0.3583483818164426, 0.38248732557154674, 0.36269073526866724, 0.30989010614368606, 0.35329936557734376, 0.34685337669989813, 0.7288554355578641, 0.731545858812374, 0.7755137955513864, 0.7451958384566852, 0.769825705910341, 0.7742813524498485, 0.7447040040229023, 0.7748799893274072, 0.7483089850694135, 0.1436304764768387, 0.10184186412352225, 0.12097169788492446, 0.14100010476646874, 0.1708034613338375, 0.1248443531126886, 0.11253163275541467, 0.17023171745437937, 0.1198882143889265, 0.27080466388738067, 0.21454803487079155, 0.6832886743796189, 0.18155720842824874, 0.2125126903981197, 0.2287574470348226, 0.3068098712532351, 0.4471781443479843, 0.1874725908659156, 0.37590295964314013, 0.6032759420191998, 0.43380194063840294, 0.33163707465349845, 0.6631747524482504, 0.5981220525825264, 0.2909539576123886, 0.5705091092250615, 0.6451169769269616, 0.3411138468308025, 0.38853423267308695, 0.33636728935003557, 0.3710196213948691, 0.2759873738215788, 0.5213669088051953, 0.3124942842674976, 0.46185092806039696, 0.47902509891371947, 0.2544722871671026, 0.2998010197755492, 0.19627929013955936, 0.20877042560629377, 0.22042917742206758, 0.22992440833182748, 0.22404991430970034, 0.24954828637909954, 0.21921125642255568, 0.24740287834609365, 0.22219112333657776, 0.2441826476736847, 0.22055600568857625, 0.7724294182298476, 0.7762607170949904, 0.2501819363859882, 0.19895024210480639, 0.2435959397471904, 0.16378529348721949, 0.906674489393336, 0.18736493118458253, 0.8635929801971516, 0.9320082611822531, 0.12185513287340632, 0.16751284755908313, 0.17725810434292177, 0.8975069540325118, 0.20762507773902994, 0.8255671270020343, 0.21110275633466358, 0.16938676427929966, 0.12671090446641686, 0.15605766497563922, 0.21346731947637498, 0.1993728985361951, 0.2121076036310069, 0.18195535770918936, 0.21135384866758045, 0.2132477855979681, 0.1863237844692378, 0.20112842356437288, 0.19290782618288393, 0.2006983084635201, 0.191972386513368, 0.1912532790315601, 0.10109886285465841, 0.09727623067585212, 0.08222747243795026, 0.1032426836019984, 0.09560330705991149, 0.09693488717882448, 0.1449232743239237, 0.09358768540411688, 0.09527377615845944]}, "mutation_prompt": null}
{"id": "921c867e-7a39-4dc3-9a42-59fb3f344172", "solution": "import numpy as np\n\nclass RefinedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for improved stability\n        self.cognitive_constant = 1.7  # Enhanced cognitive factor for personal influence\n        self.social_constant = 1.5  # Refined social factor for collective influence\n        self.F = np.random.uniform(0.6, 0.8)  # Narrowed scale factor range for controlled perturbation\n        self.CR = 0.85  # Reduced crossover probability to focus on exploitation\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "RefinedHybridPSO_DE", "description": "Refined Hybrid PSO-DE with adaptive learning rates for enhanced convergence and exploration.", "configspace": "", "generation": 82, "fitness": 0.403095136023408, "feedback": "The algorithm RefinedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.844398935998089, 0.8315128712352239, 0.8151111249098968, 0.8327232699105261, 0.847200590715383, 0.8586068877714981, 0.8477095449871639, 0.8283306728465949, 0.8420820964504574, 0.6907720368821604, 0.7131069162354917, 0.7094502507824543, 0.7110694156542907, 0.6925350177729994, 0.7034786993228979, 0.7240200756935429, 0.7147207749718367, 0.7120059557671836, 0.1676699202946731, 0.6128630429777777, 0.6041547799250336, 0.13645893251887697, 0.16202974908262802, 0.15567415024447095, 0.14420623620565476, 0.13640193359479513, 0.17411203407298903, 0.44989601905602683, 0.12230980728747398, 0.1387778801572518, 0.14426260438249905, 0.13415849930991175, 0.13193990121803034, 0.17072981570151713, 0.1133757538481781, 0.14750117814919927, 0.9854245867098118, 0.9887367801900322, 0.9779066940040233, 0.9885409459486365, 0.9852435919657991, 0.9860477011810038, 0.971531211358357, 0.9937929794407022, 0.9858034375798883, 0.6517920134339708, 0.6886501087237633, 0.05888035889345933, 0.641465681512731, 0.6702305646382671, 0.6717291723335115, 0.6540618513805301, 0.6770574779286883, 0.6414170483954444, 0.7526563737530997, 0.7507134424861087, 0.7493803250860994, 0.7821177893931386, 0.21413431085311718, 0.07223463061154112, 0.7599870389514092, 0.8057848475533814, 0.7910536075197343, 0.3862658250296125, 0.49635638470250876, 0.36094957351564294, 0.380252357537344, 0.12838084328113308, 0.30694627448056166, 0.35859197656439523, 0.384944412266331, 0.37205272712377924, 0.37521046853899653, 0.3754670883494887, 0.33509428146383524, 0.43459194669761914, 0.552203888347983, 0.40247777649594996, 0.4081578171635868, 0.3684779765307221, 0.39075173270815844, 0.19004438142441782, 0.21852106641383884, 0.2802207950304154, 0.2767818676337165, 0.24794183540151915, 0.2547244887177682, 0.23937131912675202, 0.25225055202362523, 0.2351499346717042, 0.39074277537143065, 0.4400070941012123, 0.3450593213517703, 0.3489234022229032, 0.38051773506698705, 0.36802786232710216, 0.41267093232042895, 0.5217472781155601, 0.3971614426552905, 0.04508774278880212, 0.25271800240327325, 0.09625860508976258, 0.13169909464247087, 0.07964558166919056, 0.17421317687574833, 0.12496747311296985, 0.12303064904176386, 0.07021624786155511, 0.26789688665535827, 0.27871647710276015, 0.247058810226365, 0.3057177856027905, 0.30710320156155335, 0.30685808250856383, 0.24454080038054882, 0.2623479222822316, 0.23303692005266874, 0.6724311936319161, 0.6790224167131357, 0.6967119540123653, 0.6651553575951512, 0.721787840926605, 0.6924792888849348, 0.6607802860005677, 0.6707911321420433, 0.6759045930542413, 0.16980585043630925, 0.1297291840754855, 0.15130920274781112, 0.1183069253124226, 0.12862211398303458, 0.08792710713570828, 0.11341860285228289, 0.12641950239049804, 0.1376300366537242, 0.2772593131304557, 0.3224119819377159, 0.5189964480266875, 0.1564245588201717, 0.24034887952797068, 0.17060727877792448, 0.22957811101036163, 0.2230565852284231, 0.25694516241923415, 0.5844974650333379, 0.5543783610302362, 0.41209420508643857, 0.5190259991109543, 0.406167862343524, 0.48794845116527874, 0.5711654635341394, 0.6408821758011392, 0.5516605744291054, 0.37454841408120865, 0.39474577941673805, 0.33619019022982166, 0.36900957047083516, 0.31387262516103476, 0.24493616878952174, 0.4240826904897004, 0.3485163940930194, 0.42574107657281235, 0.2077011142397187, 0.21024716496536044, 0.22936561215972573, 0.2218330654104229, 0.25703087455358176, 0.20651149341792274, 0.2088949013255852, 0.21345390217326599, 0.1927725995186298, 0.2025471441238299, 0.6481036788894228, 0.2019626220087265, 0.20198932151331384, 0.2329111512292893, 0.6078796462959992, 0.21899038186671338, 0.6567271031364719, 0.24123044651929737, 0.7627050731339333, 0.9065319486450647, 0.26045078820922285, 0.8601696108094294, 0.8759123540592103, 0.20946948797934206, 0.15840702708139853, 0.17832667374953182, 0.8624881567622541, 0.6406263079626651, 0.7670334039128529, 0.16942716851483508, 0.1539148822746842, 0.22199109871033873, 0.1679573706717019, 0.21317599028374423, 0.20374777261446264, 0.10510749314145162, 0.19692037539035534, 0.19005624846503133, 0.21830415384077317, 0.19211853922821387, 0.18114359097651644, 0.18678344902353605, 0.21205541059593802, 0.21073214286772923, 0.17745682590853862, 0.10603730984121962, 0.10426401182810163, 0.08890352903272547, 0.11244074882464594, 0.12619763369043924, 0.10418743940541375, 0.11909532932534017, 0.0973530641543553, 0.08369753013442172]}, "mutation_prompt": null}
{"id": "bca8a8a2-18d1-4f3f-94f2-1aec47617277", "solution": "import numpy as np\n\nclass AdaptiveQuantumEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.alpha = 0.9  # Quantum-inspired exploration parameter\n        self.beta = 0.2  # Convergence adjustment factor\n        self.mutation_factor = np.random.uniform(0.3, 0.7)  # Adaptive mutation intensity\n        self.crossover_probability = 0.85  # Adjusted for strategic diversity\n        self.func_evals = 0\n\n    def quantum_position_update(self, position, best_position):\n        return position + self.alpha * np.random.uniform(-1, 1, self.dim) * (best_position - position)\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(population[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = population[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = population[i]\n\n            # Quantum-inspired position update\n            for i in range(self.population_size):\n                if self.func_evals >= self.budget:\n                    break\n                new_position = self.quantum_position_update(population[i], global_best_position)\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                new_score = func(new_position)\n                self.func_evals += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n                    if new_score < global_best_score:\n                        global_best_score = new_score\n                        global_best_position = new_position\n\n            # Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_probability\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n\n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveQuantumEvolution", "description": "Adaptive Quantum-inspired Evolutionary Strategy with dynamic parameter tuning for efficient exploration and exploitation balance.", "configspace": "", "generation": 83, "fitness": 0.2642316061398463, "feedback": "The algorithm AdaptiveQuantumEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.660595441974589, 0.7051826511759227, 0.697873880779905, 0.6836749274163102, 0.708451424093264, 0.7075316833758538, 0.6732465070668021, 0.6880478153156104, 0.6887990902102107, 0.3894141574352469, 0.4387817384955023, 0.2396473525224444, 0.3460607368067924, 0.4220757475550262, 0.46963757740684675, 0.41556937668043614, 0.4063763401155168, 0.43712866487695345, 0.09373341986276651, 0.09408755431876548, 0.10889889222707794, 0.09321266264610062, 0.10443389770102496, 0.1080875390880004, 0.09745345893067947, 0.09727412434048144, 0.09036852210460089, 0.09908474266082301, 0.09986499633869717, 0.09283301079259287, 0.09100596690183216, 0.09731723483640176, 0.09129607196649703, 0.07655041792922113, 0.10546448934328057, 0.10409284351118964, 0.8252790123173581, 0.8265199567117889, 0.7571940820395694, 0.6970990371118942, 0.8316528580115209, 0.7724787679403858, 0.7953817970696012, 0.6969829109225931, 0.7664556184177247, 0.3081123124952466, 0.25993646168959905, 0.18018380162416292, 0.2767550971671714, 0.28234059191449346, 0.2735374483425699, 0.24996593469261985, 0.20600865528397705, 0.2683379151439277, 0.3761540019976123, 0.6676136559840175, 0.5456643683325864, 0.5944678571867769, 0.7068200277455142, 0.6441062799308616, 0.632264632853088, 0.5684772876903802, 0.5475594383941123, 0.17276656688120784, 0.16067869388592337, 0.17510514544509992, 0.13340283495076943, 0.16021705622370774, 0.15832203549150803, 0.1605637303151488, 0.15418335694011143, 0.16793893102364565, 0.13006302465634778, 0.2158587706628161, 0.13366932017108757, 0.14743679883033178, 0.22519085978126607, 0.1582871959348615, 0.14227263882716257, 0.1661659686801804, 0.1519224145027851, 0.11308414611263362, 0.13095074186485167, 0.08546845099686651, 0.08822014636081621, 0.13968264246626927, 0.14401346342174315, 0.11082963318292027, 0.09375426416354571, 0.13922914920044005, 0.19525443275078702, 0.24920872289993512, 0.2756847251031278, 0.21888418689934963, 0.19311676335098427, 0.2125983348014594, 0.2632241341336561, 0.25563414162355325, 0.2739529481302295, 0.037989292314422496, 0.055545893454546635, 0.05858655157227999, 0.07274032869724578, 0.05044251822962231, 0.07605243959673913, 0.0484762145663411, 0.1328525629455769, 0.06622344742968056, 0.15111377659538772, 0.1794117259963286, 0.1203438748142226, 0.16173826553500292, 0.17571296077210974, 0.19648592998514036, 0.1535119960570721, 0.1719422705610143, 0.17839186131153473, 0.5088583236377118, 0.5011613295866248, 0.4971498051566796, 0.46358959088401497, 0.4792425552630746, 0.5412221475573327, 0.5035735123152842, 0.5260715998897367, 0.5060506469608534, 0.0896808165571652, 0.08799064384071065, 0.08761272397829967, 0.08440838550498375, 0.09136245567445733, 0.08593977269333541, 0.0895679514527774, 0.07606406879459449, 0.09030989819522928, 0.14029949943316045, 0.13219067998290734, 0.16741127788117305, 0.13558335079690298, 0.1389098233878946, 0.1647589832630696, 0.15447875915205955, 0.1613906524157399, 0.1576989932247863, 0.31502235011535284, 0.2781793646681169, 0.339371703931288, 0.3001855140667089, 0.3130524236857384, 0.32046412728005935, 0.2991930716110953, 0.3550567618826391, 0.3372092837948384, 0.195436264950419, 0.2368752975928865, 0.25787926129816574, 0.20800411321793377, 0.21078054745477248, 0.2539433210620776, 0.22255761527790752, 0.22452908099710733, 0.27412551331233004, 0.20373077182624433, 0.19081986155935549, 0.19092751176480183, 0.18484215083131605, 0.17254199313694663, 0.1691977749503365, 0.19316615592854092, 0.16911152485179592, 0.19943802414309142, 0.1906148962149895, 0.1737921757009242, 0.18572096513084047, 0.1986265151621236, 0.18585637488904272, 0.17930527160910648, 0.17321091883248174, 0.17512062580789056, 0.18573515413647834, 0.17902690178168756, 0.3036080482463376, 0.47613507298023083, 0.5226324075230051, 0.600183195416789, 0.15795738735331777, 0.3697282327883692, 0.16146825685455135, 0.1738652354401411, 0.1978758151104304, 0.19462896517596973, 0.2710932479612619, 0.19476321744264546, 0.6150804836443109, 0.4307864851395119, 0.19970433630613105, 0.2555389456772066, 0.31949950585785214, 0.1870457541851568, 0.17794000074725758, 0.17336774381818654, 0.176575939364933, 0.17678378843849551, 0.1749450329262221, 0.18888320018842264, 0.17226971315441664, 0.1674778321465017, 0.08197417957864928, 0.0736523713331968, 0.07833653226689696, 0.06728499826509937, 0.06796480168582297, 0.07499591402396222, 0.0768967500915434, 0.07910587663918889, 0.06384517758097585]}, "mutation_prompt": null}
{"id": "b2b156ca-6eb3-480c-8a6f-23a3dfb2a2b4", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Slightly increased to enhance exploration\n        self.population_size = 25  # Adjusted for parallelism\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Increased for diverse search trajectories\n        self.cognitive_constant = 1.4  # Slightly decreased to balance exploration-exploitation\n        self.social_constant = 1.8  # Increased for stronger global convergence\n        self.F = np.random.uniform(0.6, 0.9)  # Narrower range for robust mutation\n        self.CR = 0.85  # Slightly reduced to fine-tune crossover\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with dynamic inertia, accelerated convergence, and refined mutation strategies for improved performance across black box functions.", "configspace": "", "generation": 84, "fitness": 0.38195836118330945, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.811290890443299, 0.8156174170778974, 0.8186936210967499, 0.825286302394614, 0.8531627288351575, 0.818370619542194, 0.8111230342519029, 0.8345481060247025, 0.8267136454442467, 0.679846354460852, 0.6810891922519862, 0.6504529763929578, 0.6815834558781924, 0.6639144279752627, 0.6242043045634236, 0.6681386765410515, 0.7004196350255585, 0.6838344052914127, 0.14869468638647088, 0.13668343367239744, 0.16267234819110676, 0.15159262582631017, 0.15982108184534605, 0.1748356857188612, 0.15273058224958092, 0.1637033717361328, 0.47679302020859815, 0.12540107737651995, 0.15097419370973564, 0.12688049232012477, 0.1440252070308483, 0.14600044589567784, 0.1500803105470817, 0.16292987648995183, 0.1664087085797934, 0.13525689819806397, 0.9819539468077576, 0.9710017638512501, 0.9682758457797108, 0.9853441547626256, 0.9823536948278448, 0.9678688362607935, 0.9808017722016057, 0.9879786528807509, 0.9858767793845676, 0.6523666448082324, 0.6558068016159536, 0.6224604860218849, 0.6469395842595322, 0.6027906056946641, 0.6176717253692764, 0.6037124519356294, 0.6332986959220531, 0.6755777619516161, 0.7100362256093604, 0.7705904720776519, 0.21925156112782784, 0.7866199919578261, 0.7773494836444852, 0.26255063585834326, 0.7633452346544878, 0.7809621337211414, 0.8248303702638995, 0.2919443614282844, 0.32881192598355347, 0.34989077230126187, 0.12994798812462538, 0.30689044632430773, 0.1297058236080213, 0.29270859320310905, 0.3580729826264182, 0.3339826311632742, 0.373403630341535, 0.35001759381293807, 0.3597115459723975, 0.3774686749634264, 0.3446850149107813, 0.38482685915247683, 0.3880223435543573, 0.35637605341988843, 0.38652548403384446, 0.06160404601619762, 0.21343603969303215, 0.16529645002598858, 0.13808148191997172, 0.19299489445101503, 0.1591919268964842, 0.1362631656723906, 0.1562052036134257, 0.14264972612382354, 0.29034126910298397, 0.30158657930315536, 0.2921121602585097, 0.2505187271013777, 0.26961570263807666, 0.26831544053437084, 0.30918325555321713, 0.25059701686904057, 0.32064036058425216, 0.0, 0.09683297766746468, 0.21166188182171308, 0.06259473152374617, 0.07502007045229842, 0.08829288211314923, 0.06887236480195957, 0.10332052369332412, 0.1328346979011038, 0.19549509727566472, 0.2299511497603568, 0.219475866197395, 0.20386178901770802, 0.34266500737965677, 0.21562594315867323, 0.20603390277551226, 0.27576889165507523, 0.19292552281943354, 0.6037740520509918, 0.6179927541802837, 0.6039979803369857, 0.6278840337818022, 0.641604479758719, 0.6279808246883536, 0.6311835483159196, 0.6404555806695309, 0.6573713287042369, 0.13434770001198282, 0.12344897016607104, 0.11580444299691994, 0.13326766316302185, 0.14289567276383186, 0.15105398195395225, 0.130951918040489, 0.125654966882907, 0.14651772048698952, 0.16896258755334015, 0.20608119913878742, 0.6488737502988324, 0.3196054734240059, 0.19436606854600913, 0.254821604857453, 0.19620703133541406, 0.2193032887109122, 0.26998613134712146, 0.37151537954017266, 0.520433322581443, 0.43934713892613464, 0.41564240366366434, 0.45100334099262607, 0.5551722357921782, 0.5263240161715129, 0.6003744775393107, 0.5659778074198085, 0.288355119764121, 0.3342785357704957, 0.34674399521043253, 0.26972917399965723, 0.2870770665452558, 0.20407105795594072, 0.37848162403828123, 0.43487426472432644, 0.25966094300413356, 0.18498226584576738, 0.21322738193240243, 0.21473179531078534, 0.22442962205111971, 0.21264627891256482, 0.19780423738598907, 0.20441601732093773, 0.19966027101317174, 0.19608938378925111, 0.2109868401085221, 0.2393712065349154, 0.7479605460762271, 0.21713408399655276, 0.6697901527948166, 0.19599764947326115, 0.21716727635876, 0.21490370595057862, 0.19933498945666261, 0.159859443999124, 0.88595895315539, 0.874109531464074, 0.8396179624644629, 0.8529853591149028, 0.7486571843905048, 0.16130388966975606, 0.17679906778239896, 0.8221021559229055, 0.789788150979061, 0.1684117634827047, 0.2107091933263583, 0.7425305700668565, 0.7132391052227969, 0.16890589999254557, 0.21095952198121937, 0.1989908885783913, 0.2049170078538297, 0.189382280638826, 0.20890882773483477, 0.17953071272185062, 0.1907498263927494, 0.18833121971842937, 0.20792489088929977, 0.17941186854730573, 0.1863302633326549, 0.17918793559530843, 0.07982799734750101, 0.08320240313512772, 0.08568784974726495, 0.12147920486070618, 0.1661711757828923, 0.09099896704970956, 0.13230752815258473, 0.08542123388959899, 0.08996619447337983]}, "mutation_prompt": null}
{"id": "2b97f2d4-3057-4eac-b074-4a60863d7742", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6  # Slightly reduced for refined convergence\n        self.cognitive_constant = 1.5  # Adjusted for balanced exploration\n        self.social_constant = 1.6  # Increased for stronger social influence\n        self.F = np.random.uniform(0.5, 0.9)  # Broadened adaptive scale factor range\n        self.CR = 0.9  # Adjusted crossover probability for strategic balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with stochastic velocity adjustment and strategic mutation for improved exploration and convergence.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8576566449643015, 0.881370456319332, 0.8811023776997438, 0.8835913666778646, 0.8725891678040625, 0.8651150917360322, 0.8684413304263632, 0.8858458065983518, 0.8805696674194604, 0.7555631137231122, 0.7619556029173722, 0.7478292134942133, 0.7243490102944913, 0.76045429645202, 0.7654934261681949, 0.7585764270716563, 0.7732748649689264, 0.7655571985675484, 0.12115483993486709, 0.15520934994214874, 0.17819459455239117, 0.07417411138844854, 0.1733149267890567, 0.17789015716762513, 0.14927210748530073, 0.7064081780292664, 0.12108266897552245, 0.17100320916701695, 0.14108182598351682, 0.11173757318492605, 0.15317123370513042, 0.12715573770749566, 0.11341071348844178, 0.10516687069865016, 0.12112312708950557, 0.1251766206553715, 0.9851789376984205, 0.9887782361678231, 0.9768682091686163, 0.9885751553814965, 0.9853358467765109, 0.9861553445374898, 0.9767594771384877, 0.9925781321061359, 0.985316943944816, 0.6970373337485434, 0.7782388948163348, 0.7008176300504448, 0.7418473927605249, 0.7379069190908851, 0.774473142722404, 0.7270166726704186, 0.7389338990487031, 0.7542109327248996, 0.8334292466090863, 0.770307104527948, 0.862308751096581, 0.8048546198323272, 0.8388660519451728, 0.21214931550161054, 0.8451619749918791, 0.8185408606974324, 0.79250476718173, 0.47662063054423065, 0.46039892186412334, 0.12783154414767217, 0.47913046470392684, 0.13189585091470712, 0.510795614258968, 0.5134628048653866, 0.5070728749596212, 0.42527490957173697, 0.49333470519936795, 0.4285486327094601, 0.45658009079136375, 0.13235586673928867, 0.5173345164330324, 0.47715045586932625, 0.46372709664678247, 0.1330601191746078, 0.5571520324551844, 0.21170039662206774, 0.3448173319555511, 0.33153876879246336, 0.4023506817705921, 0.3825143775499926, 0.3369843342101342, 0.2900591234600234, 0.3054643613225405, 0.44153261629070395, 0.4270746405910214, 0.5287108834430669, 0.511271463528336, 0.5004528761361743, 0.399617807935866, 0.521860183672566, 0.4780872733511933, 0.5440169388118752, 0.5635067572777932, 0.0527898884101452, 0.10035079827455406, 0.2145832553718865, 0.19702358390414665, 0.2932696521181468, 0.10745563524887258, 0.0712449401596339, 0.16231987617148702, 0.07275359954377403, 0.2947963718834842, 0.32497814018398785, 0.341627559524439, 0.3583483818164426, 0.38248732557154674, 0.36269073526866724, 0.30989010614368606, 0.35329936557734376, 0.34685337669989813, 0.7288554355578641, 0.731545858812374, 0.7755137955513864, 0.7451958384566852, 0.769825705910341, 0.7742813524498485, 0.7447040040229023, 0.7748799893274072, 0.7483089850694135, 0.1436304764768387, 0.10184186412352225, 0.12097169788492446, 0.14100010476646874, 0.1708034613338375, 0.1248443531126886, 0.11253163275541467, 0.17023171745437937, 0.1198882143889265, 0.27080466388738067, 0.21454803487079155, 0.6832886743796189, 0.18155720842824874, 0.2125126903981197, 0.2287574470348226, 0.3068098712532351, 0.4471781443479843, 0.1874725908659156, 0.37590295964314013, 0.6032759420191998, 0.43380194063840294, 0.33163707465349845, 0.6631747524482504, 0.5981220525825264, 0.2909539576123886, 0.5705091092250615, 0.6451169769269616, 0.3411138468308025, 0.38853423267308695, 0.33636728935003557, 0.3710196213948691, 0.2759873738215788, 0.5213669088051953, 0.3124942842674976, 0.46185092806039696, 0.47902509891371947, 0.2544722871671026, 0.2998010197755492, 0.19627929013955936, 0.20877042560629377, 0.22042917742206758, 0.22992440833182748, 0.22404991430970034, 0.24954828637909954, 0.21921125642255568, 0.24740287834609365, 0.22219112333657776, 0.2441826476736847, 0.22055600568857625, 0.7724294182298476, 0.7762607170949904, 0.2501819363859882, 0.19895024210480639, 0.2435959397471904, 0.16378529348721949, 0.906674489393336, 0.18736493118458253, 0.8635929801971516, 0.9320082611822531, 0.12185513287340632, 0.16751284755908313, 0.17725810434292177, 0.8975069540325118, 0.20762507773902994, 0.8255671270020343, 0.21110275633466358, 0.16938676427929966, 0.12671090446641686, 0.15605766497563922, 0.21346731947637498, 0.1993728985361951, 0.2121076036310069, 0.18195535770918936, 0.21135384866758045, 0.2132477855979681, 0.1863237844692378, 0.20112842356437288, 0.19290782618288393, 0.2006983084635201, 0.191972386513368, 0.1912532790315601, 0.10109886285465841, 0.09727623067585212, 0.08222747243795026, 0.1032426836019984, 0.09560330705991149, 0.09693488717882448, 0.1449232743239237, 0.09358768540411688, 0.09527377615845944]}, "mutation_prompt": null}
{"id": "a0e1181e-23a1-422b-b549-cda15135373e", "solution": "import numpy as np\n\nclass AdvancedAdaptivePSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Increased for broader search capability\n        self.cognitive_constant = 1.4  # Fine-tuned for effective personal learning\n        self.social_constant = 1.7  # Increased for stronger global influence\n        self.F = np.random.uniform(0.6, 0.9)  # Narrowed adaptive scale factor range\n        self.CR = 0.85  # Slightly reduced crossover probability for balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdvancedAdaptivePSO_DE", "description": "Advanced Adaptive PSO-DE with dynamic inertia, strategic crossover, and enhanced mutation for superior optimization performance.", "configspace": "", "generation": 86, "fitness": 0.37098583630736415, "feedback": "The algorithm AdvancedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8501059037663984, 0.8324803718449197, 0.8152732557483802, 0.8437850641835932, 0.8489778975001626, 0.8461557994752642, 0.8118647764799918, 0.831723368411382, 0.8404052829769386, 0.6773717314527528, 0.7069855309606975, 0.6609160503919984, 0.6711129867900388, 0.6866777425413393, 0.6942398510280057, 0.6963778058486827, 0.684676849601104, 0.7149362091977811, 0.17266147834688073, 0.16716777339066735, 0.15355035484258206, 0.1474101036004295, 0.1687564021251472, 0.13351824075534646, 0.15438670397989718, 0.15315560271992035, 0.15425000284956691, 0.13099313823654846, 0.14636309626170674, 0.14884908986373124, 0.11253257998970023, 0.1295739546777953, 0.12115367299330004, 0.14008809360659524, 0.14405181234422926, 0.1490027925298939, 0.9840064919033742, 0.9726093982869054, 0.9659047486408889, 0.9852051322561348, 0.9817249564470066, 0.9678847447398846, 0.9812547248245022, 0.9866745401699965, 0.985823290698036, 0.6682923201510129, 0.6301871215983946, 0.6398614922600915, 0.6115212900136578, 0.6727065659814613, 0.6738482183256279, 0.6052211302848969, 0.5997411709220135, 0.6683612082016921, 0.7632479078826878, 0.8169774376095582, 0.7907890144454031, 0.7635941622182868, 0.7961128668411213, 0.2680854591991907, 0.8234451989912245, 0.7536086720884281, 0.771537947402535, 0.48584007412055796, 0.2844274645447503, 0.5426861821300069, 0.32459908853864516, 0.21761260333497123, 0.449900042210724, 0.31873818243979135, 0.367523537843915, 0.3120632537814625, 0.3568897156351917, 0.2651469591316997, 0.28840977386005673, 0.322045364257736, 0.4021077460510615, 0.5351300333487684, 0.3010512202583544, 0.3520080787597766, 0.39255860476736837, 0.14527839173340018, 0.15660914461867392, 0.14661177765347622, 0.1643784320847872, 0.1539789317489887, 0.16119617212921344, 0.14532716985042882, 0.17030781152782326, 0.10613315425246161, 0.2749952595725311, 0.35018163879844544, 0.32487139207002946, 0.26047939665493136, 0.3019101571332493, 0.27055260627150635, 0.24798640294255703, 0.3954591451233024, 0.36477538680242527, 0.03329546453664567, 0.06577702710376265, 0.0, 0.06691606202492617, 0.0829198986196743, 0.15649236817098278, 0.10414895178012029, 0.10635956801666346, 0.11577774343823388, 0.21421030769149907, 0.2455892251092796, 0.2305470436986201, 0.2644538935404528, 0.2010316092738036, 0.26336869772825544, 0.20785487582063378, 0.2564369074757463, 0.2674462044446816, 0.6215151899797906, 0.6438492030779204, 0.592388921042026, 0.5916352718369497, 0.6116148883105067, 0.6350607677275859, 0.6215859311809963, 0.654638100905846, 0.6091391047900674, 0.11398231850550478, 0.14615398518628242, 0.127097448925645, 0.14670649199576324, 0.11159364757950097, 0.13743317739567507, 0.1511734375904662, 0.14854951712047626, 0.16351989125697453, 0.18481098950033803, 0.30474115081339703, 0.19375897400349895, 0.2055228958352292, 0.14803500565756933, 0.23024591524298132, 0.338036544944862, 0.19778398111544948, 0.16426532068180077, 0.37145432263146916, 0.5666396631228419, 0.4992610455622858, 0.419390657736915, 0.6253521386523138, 0.5385707111721086, 0.5187845942599868, 0.48454709532639795, 0.5522723958624219, 0.29505358801033243, 0.33168187234757074, 0.3567621247994853, 0.30638542732526963, 0.2053482694344575, 0.27750603441978383, 0.3727224353554409, 0.5003391256841738, 0.32496759839181966, 0.23029580975560382, 0.23160222436907685, 0.2064024819150213, 0.22642459039479002, 0.21341542065761432, 0.20029316461330937, 0.23270783356916647, 0.24764569065306774, 0.24640786538351045, 0.21886521296190875, 0.2393030418014075, 0.24200416640238787, 0.6056901421152976, 0.21389095958620963, 0.20213129562528753, 0.6150502838200691, 0.22095342550246821, 0.20594766030974643, 0.16743410409604764, 0.8538285145521722, 0.8810914715251462, 0.19885513903338325, 0.19766360518789994, 0.16346211172437575, 0.15696566999953432, 0.17803722224684992, 0.15751940596813807, 0.19960424293861667, 0.21072480939888194, 0.21134929853118178, 0.7587240335178318, 0.16828988431251124, 0.16885793959938422, 0.20908251388988597, 0.18579172793592402, 0.2092126282728528, 0.2147737957114757, 0.20565929750876089, 0.19231797911641713, 0.19762667710819393, 0.18920888539087022, 0.18497394111606602, 0.19761718794569494, 0.21963384625709037, 0.18501954764302075, 0.10068436939388392, 0.09517208105433872, 0.10254382320802247, 0.10550588686306506, 0.11034286645251035, 0.09436352612115717, 0.11712780250608246, 0.0938273294283154, 0.09698430694650961]}, "mutation_prompt": null}
{"id": "8b9c710f-f252-4915-bc17-fb6f9e50bb12", "solution": "import numpy as np\n\nclass AdaptiveQuantumHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Slightly increased for broader exploration\n        self.cognitive_constant = 1.4  # Slightly reduced for nuanced exploration\n        self.social_constant = 1.8  # Further increased for stronger social influence\n        self.F = np.random.uniform(0.4, 0.8)  # Narrowed adaptive scale factor range for control\n        self.CR = 0.85  # Slightly reduced crossover probability for diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.3 * (evals / max_evals))\n\n        # Quantum-inspired state rotation for velocity update\n        def quantum_rotation(position, global_best, angle):\n            rotation_matrix = np.array([[np.cos(angle), -np.sin(angle)], [np.sin(angle), np.cos(angle)]])\n            rotated_position = np.dot(rotation_matrix, np.array([position, global_best]))\n            return rotated_position[0]\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                quantum_angle = np.pi / 4  # Fixed angle for quantum state rotation\n                velocities[i] = quantum_rotation(velocities[i], global_best_position, quantum_angle)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveQuantumHybridPSO_DE", "description": "Adaptive Quantum-Inspired Hybrid PSO-DE with stochastic velocity adjustment, strategic mutation, and quantum-inspired state rotation for enhanced exploration and convergence.", "configspace": "", "generation": 87, "fitness": 0.3796776323596464, "feedback": "The algorithm AdaptiveQuantumHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8342855366087314, 0.8516729650752533, 0.8220303884417582, 0.8042397627630407, 0.8117008918703071, 0.8339172658867691, 0.8111645364547966, 0.8234418774073786, 0.8109149910776878, 0.6869723190446091, 0.6597150131970269, 0.7028653409023342, 0.6654618012856555, 0.6741721499783566, 0.723493951507569, 0.6846803038275127, 0.6707492867293204, 0.6896113034370747, 0.20853639737548668, 0.11506878435667589, 0.11388430606201294, 0.11331004259005328, 0.12901853165615973, 0.0945814486631571, 0.12615211722305208, 0.1302381158878958, 0.12945953505800967, 0.1029772243150503, 0.11386248995456227, 0.11834711013416455, 0.1007533954277906, 0.1257224302339962, 0.09349508359771075, 0.14637841037371813, 0.11719301320821829, 0.0968998722699449, 0.8818378346868534, 0.8964824084944981, 0.8816713702267285, 0.9547346061250903, 0.9185163923885473, 0.940901788956495, 0.953438877443125, 0.9654503033462718, 0.9667494027250211, 0.46002778867520033, 0.5558198213970555, 0.4950399666853911, 0.4639833276383114, 0.441927343681607, 0.47936546579521055, 0.48627206413722124, 0.4910553394097328, 0.3899039074019188, 0.8235610050159204, 0.8380542509265739, 0.17119445558603308, 0.7483910642756109, 0.8229742205636021, 0.7512250697246176, 0.7753463471284912, 0.7494016385627794, 0.7884643219401795, 0.20807984258540613, 0.31651910026927543, 0.20491413517751567, 0.17848420582170477, 0.1731964587188739, 0.2829700412650188, 0.17934708704698865, 0.16703004911758434, 0.1789205226538263, 0.4297274637079853, 0.4844595222654775, 0.5618068580322759, 0.3787351552715562, 0.6629876010746228, 0.29942560545198116, 0.49514582364183934, 0.3189725537962149, 0.26580883759239626, 0.3288888185305002, 0.1130721355897375, 0.3133936131962394, 0.29318450918748806, 0.10372129016474951, 0.3944306841013713, 0.44925635108418127, 0.20664246562759958, 0.27845608823851986, 0.45453351722154944, 0.5360956490888734, 0.3736028545740797, 0.45226685676611367, 0.11429728631904745, 0.2280081612550039, 0.5224124793814864, 0.560209368832386, 0.28888851508876956, 0.17204354410233258, 0.18546095537720408, 0.11572059740756135, 0.18121550593194735, 0.15343982465386363, 0.24990490532480092, 0.16053308800092636, 0.14363197716504328, 0.09666269016751672, 0.21376173301787837, 0.3029312447099939, 0.284483428829717, 0.29464222849485877, 0.3512738250705215, 0.31731588839179103, 0.24308743411389044, 0.3136289488408437, 0.3352901217711578, 0.6493419192437843, 0.7084195625084023, 0.583826877939694, 0.6644704176663785, 0.5812317179891486, 0.7121780690644952, 0.7129462045489298, 0.7502745351960964, 0.7235646379885531, 0.08338044520951371, 0.10854196306560948, 0.08799318882783025, 0.09236399452824384, 0.08598335648215649, 0.10849316351754912, 0.08188588658174267, 0.09913451460540124, 0.08884085593157309, 0.13943005650803786, 0.1771386711511308, 0.18764467324893808, 0.14188152699059808, 0.17158738201630364, 0.13882476199062055, 0.17077797494865932, 0.14655847082467421, 0.1838621081913372, 0.38059965292147235, 0.40394114668807857, 0.4352190317230946, 0.4158128172014872, 0.48556964386223544, 0.4256949896059222, 0.4449606137842754, 0.4954096619323791, 0.4039719369569541, 0.30397683313897994, 0.282827228584969, 0.32098302360830444, 0.3325077685179846, 0.34871624712916394, 0.34815643601876356, 0.3444787921557597, 0.28945121668583296, 0.36807138004870654, 0.26303442285281886, 0.2661003523663491, 0.24393306430988448, 0.24648940222973814, 0.23907970322435423, 0.2743884293755142, 0.26287078740112, 0.26177411342810575, 0.2477532399396517, 0.18338717527209714, 0.2002146293869781, 0.2105844203835836, 0.18386507753610049, 0.20955368380922434, 0.2130624081633956, 0.20166250269081132, 0.20474754693764918, 0.26489701005714106, 0.18653260636854996, 0.849631961557458, 0.18736651749455602, 0.6823228097111194, 0.8783852582225791, 0.8130032522059192, 0.6947797442152809, 0.716741293129165, 0.8160687494245205, 0.8427600623192143, 0.704709928927544, 0.2062860819056157, 0.6132568305006916, 0.38486922091325537, 0.32990456386324973, 0.1980874110784525, 0.20927128499319747, 0.1665279857469666, 0.17349566661261073, 0.19298542812040542, 0.1748106954823221, 0.17726606411132617, 0.1891841395614362, 0.18792129345021347, 0.17568619775126848, 0.18992126204313153, 0.1989497244579702, 0.07496566507503177, 0.08815977942189801, 0.07523738120400503, 0.08776190086269575, 0.0801714572733494, 0.09503999693037657, 0.07671354618706083, 0.08024830948138639, 0.08134336645449725]}, "mutation_prompt": null}
{"id": "e8c3a96a-65bd-4f05-88fb-96e6486c6eda", "solution": "import numpy as np\n\nclass AdaptiveCoevolutionaryPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Slightly increased for adaptive momentum\n        self.cognitive_constant = 1.4  # Adjusted for balanced self-exploration\n        self.social_constant = 1.7  # Enhanced for stronger peer influence\n        self.F = np.random.uniform(0.4, 0.9)  # Broadened adaptive differential weight\n        self.CR = 0.85  # Adjusted crossover probability for strategic diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Coevolutionary differential evolution with dynamic selection pressure\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveCoevolutionaryPSO_DE", "description": "Adaptive Coevolutionary PSO-DE with dynamic selection pressure and activity-based mutation for diversified exploration and exploitation.", "configspace": "", "generation": 88, "fitness": 0.40316709372578985, "feedback": "The algorithm AdaptiveCoevolutionaryPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8409570648674862, 0.8578724054917084, 0.843670356774888, 0.8711757821609162, 0.8564186943639248, 0.8557625971205086, 0.8537527889248546, 0.8591533610042591, 0.8646625114516971, 0.7300044210935367, 0.6936626868076925, 0.7072031283167712, 0.6805458040782695, 0.7334506184903898, 0.7357132965648439, 0.7047379039539104, 0.7312553777624033, 0.7362479773156405, 0.1766016888131282, 0.177200855140075, 0.13691327269624198, 0.17374893795072965, 0.15978150708722283, 0.16495921104136346, 0.1483441991351372, 0.5891167032936411, 0.12314072644623753, 0.1545670217516415, 0.11492432737248492, 0.14227506372391274, 0.1589784058916508, 0.15196990323900084, 0.16981866859934502, 0.1550155995278334, 0.12161594611228665, 0.14419577614981938, 0.9877887826464569, 0.9889559914249055, 0.09918759367711028, 0.9885241592692384, 0.988856961235435, 0.9861461231412344, 0.977094425284748, 0.9925900927879044, 0.988000514737823, 0.6721330013987532, 0.6357868286116588, 0.6276989617795944, 0.6777820787664983, 0.6587193360133932, 0.6832983643213917, 0.6304428403653213, 0.08760464580850602, 0.5880662133455443, 0.7787510787807725, 0.7942453008864564, 0.8168560484300917, 0.7760049853354672, 0.2115644496256095, 0.796207523128625, 0.7992666103140602, 0.8385971080081277, 0.8046530903897138, 0.46307030221997203, 0.45822744132543736, 0.5004509956433386, 0.34377983672930335, 0.34720871050185254, 0.40226036726814896, 0.43729518502158404, 0.38211092289077975, 0.40131614532769433, 0.43037064039480366, 0.3235279295258179, 0.3786015403636348, 0.4939429725905806, 0.47631313718118595, 0.41584257804344005, 0.4398597947070991, 0.2888585449338228, 0.1309034705984613, 0.26681805535085124, 0.10865991937482866, 0.27863830257132927, 0.22704527527868545, 0.12005163840515087, 0.2973824668581506, 0.216476258402168, 0.28231171654128007, 0.3477202049929107, 0.26354829434454197, 0.42454888167556426, 0.4345059299693561, 0.4419724083183403, 0.373920638153289, 0.4700148550203104, 0.39181962865508324, 0.5626341105834272, 0.52895905936691, 0.08889227973000069, 0.17951218781306288, 0.1560700292056194, 0.11491055608215806, 0.2014051529494334, 0.09191524550847663, 0.2194673492721404, 0.12793628690440162, 0.09111852769380935, 0.2863263399191297, 0.3366382135488112, 0.25845460960144306, 0.3233197085376883, 0.3314761880124295, 0.31323268452147934, 0.26487636275130566, 0.35480684540103524, 0.31809423273190085, 0.6733814259983658, 0.6956293037721895, 0.7225161756609482, 0.6714124499404144, 0.7119540488539227, 0.7053053688307693, 0.7256627326722751, 0.7124381263173203, 0.7379288712313357, 0.14847046647233053, 0.13643267443521578, 0.12612906612939756, 0.12641937751524857, 0.14781404250515406, 0.13844794081094947, 0.16821120702991377, 0.11559408954822925, 0.13436996429173031, 0.6195892892143149, 0.1698188359138505, 0.24210056302376626, 0.17855306681954375, 0.2462413528846601, 0.17848594188925293, 0.1608913125007171, 0.19320190067376386, 0.19732901562245175, 0.5220142988922485, 0.5333608318537231, 0.4516649179668032, 0.631413190851523, 0.5585590140517693, 0.6369401714827769, 0.619923156729331, 0.6273260608079192, 0.6224323821609903, 0.32910840034994726, 0.4413582646920531, 0.36994261233391, 0.3506493369587059, 0.4683725587218942, 0.3250122469307376, 0.4334848521947676, 0.3780524826905044, 0.3130026234629294, 0.19522539450429255, 0.26140003460092065, 0.22081153069151882, 0.22868730714233665, 0.2265491667735059, 0.2453713932905448, 0.21080682378272153, 0.22351162932350432, 0.2141247963783468, 0.7641331796866144, 0.22233832662946285, 0.6608395042655828, 0.20569052283601985, 0.21715550775169357, 0.2376152485755033, 0.2192907382259125, 0.2174420297888442, 0.21938107216285108, 0.7835492210532535, 0.9111689046463589, 0.8383895240467855, 0.12987874936007515, 0.8986117015033077, 0.16228639435514924, 0.15789017566824093, 0.17748786604762534, 0.16734865700645263, 0.7235107097641236, 0.208792949288095, 0.21009768966896814, 0.16851165997672013, 0.2811545286774525, 0.16750621743537608, 0.2136289890521592, 0.1982556312153556, 0.2118203110834287, 0.1847354920317431, 0.2038506825656955, 0.19291517304947026, 0.1896061292240957, 0.21138290066540288, 0.19734935030248535, 0.21417139502835203, 0.20246367123313314, 0.202901120888191, 0.08358212947082777, 0.10699730536112495, 0.09441097363063722, 0.12103234506359861, 0.10101374774773608, 0.09813416456565904, 0.11517188059013828, 0.08276157010999963, 0.08074345394928384]}, "mutation_prompt": null}
{"id": "d7e8b712-5ddd-45b9-b214-60e7e61e08c7", "solution": "import numpy as np\n\nclass AdaptiveQuantumHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Adjusted for enhanced stability\n        self.cognitive_constant = 1.4  # Slightly reduced for strategic exploration\n        self.social_constant = 1.5  # Balanced for improved convergence\n        self.F = np.random.uniform(0.4, 0.8)  # Slightly shifted adaptive scale factor range\n        self.CR = 0.85  # Moderately adjusted crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO with quantum positions\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic neighborhood influence\n        def dynamic_social_influence(weight, evals, max_evals):\n            return weight * (0.8 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            social_influence = dynamic_social_influence(self.social_constant, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = social_influence * r2 * (global_best_position - positions[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                quantum_displacement = np.random.normal(0, 1, self.dim)\n                positions[i] = positions[i] + velocities[i] + quantum_displacement\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveQuantumHybridPSO_DE", "description": "Adaptive Quantum-Inspired Hybrid PSO-DE with dynamic neighborhood influence and quantum-based position update for enhanced exploration and convergence.", "configspace": "", "generation": 89, "fitness": 0.3563030683704038, "feedback": "The algorithm AdaptiveQuantumHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.7995564959176195, 0.8500926591568903, 0.8119328208900014, 0.8282099185542915, 0.859305392875967, 0.8469697324942485, 0.8265283581829035, 0.839132578185329, 0.8225882696184386, 0.6665599725337987, 0.6965296827253113, 0.7167387346500456, 0.6875946801325374, 0.706101232951175, 0.6789458128457927, 0.7015577039235061, 0.6980934253659801, 0.6821452831800883, 0.1276796096104983, 0.13399685580677123, 0.10851117004310273, 0.1831028690480483, 0.10609939118327005, 0.13293446029755962, 0.09592910275911204, 0.10625976167274531, 0.11195496652166237, 0.1418805912354968, 0.11737957558945822, 0.14265551527166698, 0.09945807644253946, 0.12575686470103842, 0.11900503994516798, 0.11036381621570746, 0.11762997872590863, 0.11962275995281002, 0.9809884244568708, 0.9849508799042628, 0.9811686056815667, 0.9847461496706855, 0.9809523903514816, 0.9800590289840959, 0.9870932191353411, 0.9893379373931165, 0.9784272283912978, 0.5240174215823264, 0.5655381860907246, 0.5707022759393989, 0.4617886375756636, 0.4608208976567161, 0.48368986330571706, 0.41854253988396417, 0.2517686907976664, 0.5088546215801938, 0.7355680993368818, 0.7819901043125842, 0.8018350338048865, 0.814061570711695, 0.779008410725563, 0.8280908037190094, 0.7569603829490068, 0.7702058262675907, 0.7503425305512605, 0.482128033322607, 0.1750717808195391, 0.16545434546506343, 0.28562717344659105, 0.14580898336805947, 0.14054394588309138, 0.15925698325595894, 0.13824454514327844, 0.18907334677634768, 0.29757290893419763, 0.17911040521419186, 0.23001890538673353, 0.1832308747726884, 0.1725547371200319, 0.1863737614116161, 0.18949609343931617, 0.22273596831448994, 0.18119753472705113, 0.2415152598181357, 0.19098278677524672, 0.3440633325114293, 0.2905583409122351, 0.09464678921426917, 0.25011568436906295, 0.2832206629522871, 0.061945060578179945, 0.20422982940860435, 0.46533920268090967, 0.3580131058599708, 0.09726952622468465, 0.39985365866256073, 0.48947932785741965, 0.29932558810875654, 0.5274726363315634, 0.41650119831945653, 0.30248419940027127, 0.10501295200161587, 0.18403770567931887, 0.090588161035287, 0.11182283706284435, 0.1976203694265618, 0.24430316075978853, 0.14764543986111967, 0.1398800859107543, 0.09648147205707047, 0.2371810267893275, 0.3180896714787236, 0.25989882317859947, 0.3227150066433395, 0.3289883710515096, 0.3005487440984159, 0.2894590071391644, 0.3221466418846637, 0.2985165463251991, 0.7032146636011198, 0.5707366018086419, 0.6339817348736994, 0.6186159318161963, 0.7149809184268533, 0.7079636574281827, 0.677798798740012, 0.6690185393146835, 0.618726880339272, 0.09086070432629678, 0.08280879089601112, 0.10095296767472794, 0.1091966713696596, 0.09072387367481116, 0.09013885111002451, 0.09766200423118665, 0.09615513664507269, 0.09007987258687045, 0.141063604554735, 0.1529173052072771, 0.1723935663536602, 0.25285492938864895, 0.14722977005942994, 0.16412260976341164, 0.26886395694668563, 0.17089937921166254, 0.1400799854558873, 0.38390135641189616, 0.41578893749890655, 0.3881621783106425, 0.37864875931043607, 0.38392711762539, 0.4554259267316436, 0.41217050093917573, 0.44157312414509375, 0.4769507168922169, 0.2403902461453954, 0.30940835109594744, 0.2711398657882308, 0.28677182191443085, 0.30134070044680983, 0.30702673978755113, 0.34209724116487317, 0.32089002909445574, 0.33141226489607034, 0.18654075773322443, 0.18827574801727776, 0.17824438283346333, 0.17996926290917348, 0.20482108285947553, 0.18112176274158343, 0.19308767171717978, 0.19435956476008942, 0.20289241456721052, 0.284770249569159, 0.2885349365410944, 0.40355596784301295, 0.19390550792477723, 0.19936214351521653, 0.26037028127196815, 0.18761590273107875, 0.20122552230481583, 0.19200019787140565, 0.2033155135986534, 0.8664010388950986, 0.7773347744837694, 0.16632668615659585, 0.9180601985415279, 0.15337198083602088, 0.15506901924537742, 0.17442598379098329, 0.8706590840325407, 0.19539499022678297, 0.20699359054428612, 0.16945150439804435, 0.20678059917846736, 0.7303931578780367, 0.38897435131617886, 0.15390837008014624, 0.21368007376772657, 0.21145856469991176, 0.19774665490234977, 0.19597376858913207, 0.1842487583688599, 0.18019971688597902, 0.1804257361159758, 0.20015452117794186, 0.17729754314755142, 0.2057334492708729, 0.17785533011259558, 0.07413334138428795, 0.0808402004375488, 0.09215108088172541, 0.07238376851367867, 0.07404349076160888, 0.07847469991985778, 0.07053051714315839, 0.07289877146380508, 0.07688553640980567]}, "mutation_prompt": null}
{"id": "ac6d151c-e29a-45fb-8a7d-dc4ece000781", "solution": "import numpy as np\n\nclass AdaptivePSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Increased swarm size for better exploration\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.5  # Slightly reduced for refined convergence\n        self.cognitive_constant = 1.4  # Adjusted for balanced exploration\n        self.social_constant = 1.7  # Increased for stronger social influence\n        self.F = np.random.uniform(0.4, 0.9)  # Broadened adaptive scale factor range\n        self.CR = 0.85  # Adjusted crossover probability for strategic balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptivePSO_DE", "description": "Adaptive Particle Swarm Optimization with dynamic differential evolution for balanced exploration and exploitation across diverse landscapes.", "configspace": "", "generation": 90, "fitness": 0.395733564652643, "feedback": "The algorithm AdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8635143799970685, 0.8708058566504557, 0.8596314910463394, 0.8651039951544857, 0.8649263202859236, 0.8880079169107934, 0.8476113467060566, 0.8528745465231555, 0.8954687127985186, 0.7583178646457875, 0.7326197172594584, 0.7223513765893756, 0.7453333312020041, 0.7582514544484277, 0.7343537805640141, 0.7562063636660816, 0.7482070161135532, 0.7398592844280565, 0.17005741810786057, 0.14050725761974248, 0.16662067724294416, 0.15363629045220606, 0.17431010941065905, 0.5709826073680363, 0.17955678326934066, 0.1550994461700439, 0.17587605508296655, 0.11052088669944837, 0.15066950017247704, 0.15143570206237522, 0.1771862379317638, 0.12705861306345467, 0.13666435896553097, 0.42213108387624765, 0.1153131322069606, 0.11845899292057749, 0.981628406797005, 0.97091135030917, 0.9636407700087644, 0.9851288451030296, 0.979745758416378, 0.9678330965407332, 0.9807640846421504, 0.9866571013535896, 0.9857695147341867, 0.7401558027058187, 0.7120326539049429, 0.6820469887262761, 0.7131638382507113, 0.7433081800863557, 0.6871546007958225, 0.6863689878132868, 0.7115942480509547, 0.7192560183381986, 0.8573828105763395, 0.3832925812230086, 0.8318885961992166, 0.8459961329503022, 0.881030746431133, 0.21244709236440518, 0.8577469925303385, 0.8077871184760943, 0.23456738702439983, 0.40237821994921663, 0.1316845236251467, 0.41401862014776825, 0.3413066625419676, 0.3926980228265985, 0.6093299643779635, 0.13010846034033197, 0.3445506136288162, 0.4175891671529687, 0.3003982373471459, 0.2896976147576955, 0.3447533841324568, 0.45168429816701505, 0.34376555651423524, 0.4507741367497563, 0.3580377315707438, 0.38606754841781854, 0.42456765664979823, 0.19882970871060113, 0.2019094351092301, 0.255304158803212, 0.20607705040130253, 0.21732730211637152, 0.2576521325521959, 0.1951108046715393, 0.2776364418258829, 0.23442176307432505, 0.30884205142077903, 0.2862678456106791, 0.36590838983338503, 0.34655621610305065, 0.4343095133501793, 0.354969544095207, 0.35874835884158096, 0.44054003311093215, 0.38710047649221546, 0.049328643682038265, 0.048146103237397986, 0.1395852785565148, 0.09473945234018977, 0.1777703704894189, 0.0987598635047221, 0.07517924725961456, 0.10867688685052923, 0.09875410049869393, 0.19742743098904425, 0.29432483101259166, 0.2766823344429147, 0.26294347309047983, 0.29529727264503813, 0.3055077477748087, 0.24745858689340672, 0.30799436168058114, 0.2524603884442038, 0.7050258554020832, 0.7577166441259425, 0.6816826139051663, 0.6907184801427615, 0.740994000121034, 0.6642894413765275, 0.700154648429844, 0.6963825102369181, 0.7336811549098075, 0.1374054588490219, 0.13440410565129712, 0.1577717056360527, 0.17185680789987523, 0.12247420088686956, 0.12445067902462303, 0.09386696389096272, 0.15198329658043752, 0.10227289507804849, 0.6084517373484406, 0.22385021387485549, 0.297377525273657, 0.24763260990494684, 0.314141505397701, 0.6583030252992113, 0.18996760599841078, 0.19113160764264425, 0.26272748209773467, 0.3527463081217931, 0.554407344031091, 0.5038188193196973, 0.40545839949776996, 0.4083002406268881, 0.4021238894643929, 0.6520197804068968, 0.6764453013698801, 0.6451298916099746, 0.2907080546342675, 0.28125642931291583, 0.3561282492930923, 0.390597087013823, 0.21494603351623376, 0.21174080362363934, 0.3303964203239027, 0.36509481430395463, 0.352774982561594, 0.22481797253960878, 0.2671505469448032, 0.19686596292754976, 0.21776600031440296, 0.20956838664815258, 0.20465373548340626, 0.21818763300334354, 0.2577658047332886, 0.22783730264587088, 0.19692984191000817, 0.19871784826754857, 0.2214999790594374, 0.2059810497389044, 0.20334440481554183, 0.23878302348579095, 0.2019716211952196, 0.19137703936183947, 0.20323398555570482, 0.1652580217748949, 0.9099199166782953, 0.1521662174561661, 0.19858143721716903, 0.8813425055199638, 0.14098282211741675, 0.9045722333203653, 0.17728230834756598, 0.15892593211580786, 0.20600458944703082, 0.16836100527880593, 0.2122925560313519, 0.8478668768474513, 0.8357244594640908, 0.16852350755034673, 0.19919021955053906, 0.21209321082790744, 0.21134896654958224, 0.22477075867229424, 0.19287689796604968, 0.19500535521169315, 0.18848346594871057, 0.20899797540676002, 0.18159279151278584, 0.18993022424929373, 0.190535931607263, 0.18721400622343654, 0.13905369418771385, 0.09277653029531063, 0.10940055846818375, 0.08400921355801294, 0.08919847028938088, 0.09542225275713156, 0.12173322038225742, 0.09759476748974139, 0.09736967162590371]}, "mutation_prompt": null}
{"id": "e437f22c-0d3b-4e77-9b8e-ce5afc136e6b", "solution": "import numpy as np\n\nclass DiversifiedMutationPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Slightly increased to maintain equilibrium between exploration and exploitation\n        self.cognitive_constant = np.random.uniform(1.2, 1.7)  # Adaptive cognitive component\n        self.social_constant = np.random.uniform(1.3, 1.8)  # Adaptive social component\n        self.F = np.random.uniform(0.4, 0.8)  # Narrowed scale factor range for focused mutation\n        self.CR = 0.85  # Slightly reduced for enhanced diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "DiversifiedMutationPSO_DE", "description": "Diversified Mutation PSO-DE with adaptive cognitive and social components for robust exploration and exploitation.", "configspace": "", "generation": 91, "fitness": 0.4111153905599361, "feedback": "The algorithm DiversifiedMutationPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.29.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8566360303675487, 0.8771007141607603, 0.8737167293997723, 0.8603240710683879, 0.8935606440493755, 0.8624007374260705, 0.8593604142006703, 0.8762807160605078, 0.8644294752185633, 0.695216825199458, 0.7433912741367238, 0.7294263209000311, 0.6980682978177052, 0.7537924897842847, 0.7510736105262188, 0.726059639628039, 0.8009311106633118, 0.7566657862164485, 0.14923514359076906, 0.14461782965070347, 0.17995962391086873, 0.17813004188025428, 0.15494369440287958, 0.6828171858061711, 0.17199959805328013, 0.13642056499015143, 0.15090377706638647, 0.12502533836753082, 0.14178000507966804, 0.11742794523669109, 0.13540815264736517, 0.11824673736284019, 0.10834871111796607, 0.13125875744195525, 0.12291870309518438, 0.12528473467378298, 0.9863184770360823, 0.9848417405245177, 0.9787068505980038, 0.9884973398118344, 0.9853801537224489, 0.9881438060017361, 0.9923748696645631, 0.9878694713447329, 0.9811575703843993, 0.6895609174769868, 0.7021932951466907, 0.7230609125155829, 0.6577622380554183, 0.7040648520601915, 0.7201386650797412, 0.671448573174203, 0.7107238835362995, 0.7222986282339655, 0.8304263512526635, 0.22508631763074716, 0.37624334124112735, 0.838256180156312, 0.8697902056318475, 0.2094066314950438, 0.8238159620949661, 0.8660881868592886, 0.8237707768005853, 0.354416752927984, 0.26096684672304704, 0.4537079041617238, 0.3503647552772394, 0.11866936061623379, 0.407225302979645, 0.3491071826785507, 0.21752484676820982, 0.49004902466798606, 0.022450461758650064, 0.2573595797427155, 0.43132364020998726, 0.43316264745038435, 0.31674245288958547, 0.4104134560750906, 0.3730197676124799, 0.34935985819007354, 0.5177034310845426, 0.3440418180209427, 0.14043099819989624, 0.3206406940021479, 0.2894254584231447, 0.05833091641339028, 0.08231605810869846, 0.29381391566733694, 0.08039870245052061, 0.2752030311050746, 0.43750075142147204, 0.27919235316758717, 0.5197074862084181, 0.4074573381399734, 0.06624628816159983, 0.43016991958006934, 0.4571635209248198, 0.17916202378305512, 0.5340733974814623, 0.1285599019596153, 0.1388567710000227, 0.11481856698765802, 0.1402746124676072, 0.08932562496822716, 0.19061116761558528, 0.1778513836034099, 0.0846395959025964, 0.24766744894044168, 0.2871834033142747, 0.16786809831659577, 0.2940169129513803, 0.3183593516104807, 0.044552733317018256, 0.35314390154865205, 0.2648831041902938, 0.10956683021124392, 0.29328647144678865, 0.6655838911594106, 0.7410452372251526, 0.734213111680224, 0.7331269244546514, 0.6300742293930075, 0.6340136104318794, 0.7260255411224155, 0.6978216117908885, 0.7544180393797956, 0.14690719530902174, 0.11764031259175356, 0.17396808804538944, 0.12111028164686455, 0.14924067297761356, 0.13270179103336888, 0.14828604014558644, 0.1251615833056834, 0.13341459639109676, 0.2019156930235173, 0.2187581564557748, 0.20861586558152057, 0.23429830880705682, 0.16641200348668173, 0.6331926942694073, 0.14717055722426353, 0.17890385255185337, 0.22781226315605863, 0.5528489047617501, 0.624426100574252, 0.5282611768881857, 0.5826896400625617, 0.6729165212742786, 0.5136566751060586, 0.6476514454887394, 0.5887932832002983, 0.6625134807092339, 0.36668185418220023, 0.23051387751677188, 0.32699438191012475, 0.3699829296767676, 0.42321734165063907, 0.3432326753380024, 0.380379690056564, 0.4716087903687395, 0.49186097439236687, 0.21555775247833453, 0.18950434135772842, 0.25293249056735834, 0.1903737915083933, 0.20680015751192504, 0.24301072269372503, 0.2094998628738577, 0.23433426428753779, 0.25604957072672485, 0.2408391173707808, 0.7447295191580314, 0.20674050682604628, 0.23490980865666344, 0.5865417065805423, 0.7080141103533604, 0.6608714778267224, 0.19859440890628444, 0.1833650485537659, 0.885844206823279, 0.1620127993236261, 0.931033677377323, 0.19791792887772985, 0.16837164867739463, 0.8363171482584681, 0.19875489588550588, 0.8972988543767066, 0.16229280855331985, 0.779090433746604, 0.1548969174535767, 0.1688614506463365, 0.7994870456008353, 0.8376628114822299, 0.12681318316472534, 0.8242073918288726, 0.16959800647097878, 0.21166116199862584, 0.2109287879308368, 0.20580772459310437, 0.20268998860415333, 0.21214448881499626, 0.18329753772385948, 0.1905494706835016, 0.1970873929223076, 0.18976141934400015, 0.1859115148066407, 0.09396827067956404, 0.09462489014259556, 0.093862679846619, 0.09281056140172717, 0.09136698114845987, 0.09082270637528422, 0.09454690336551208, 0.09532783674312473, 0.09566682908459734]}, "mutation_prompt": null}
{"id": "cac554fc-d0d9-49a6-9ba5-3d9b95d32c75", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.6\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.6\n        self.F = np.random.uniform(0.5, 0.9)\n        self.CR = 0.9\n        self.func_evals = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        chaotic_sequence = np.random.rand(self.budget)\n        chaotic_sequence = np.sin(np.pi * chaotic_sequence)\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                perturbation_index = np.random.randint(0, self.budget)\n                chaotic_perturbation = chaotic_sequence[perturbation_index] * (self.upper_bound - self.lower_bound)\n                velocities[i] += chaotic_perturbation * (np.random.rand(self.dim) - 0.5)\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with adaptive neighborhood topology and chaotic perturbation for diversified search and robust convergence.", "configspace": "", "generation": 92, "fitness": 0.3576712736291587, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.7607169845487376, 0.7865234520270136, 0.7741846525621685, 0.8024282570130132, 0.7961648059192357, 0.7996264616205033, 0.7693396888717536, 0.8001823928959348, 0.7967741584262132, 0.5935998000086391, 0.6115876881734772, 0.6621064636676786, 0.5453837400256318, 0.6140749394300093, 0.6469625008338118, 0.6266251980376419, 0.6489912045878125, 0.6419834976961407, 0.10186272095439197, 0.12638378600695255, 0.0848020448906085, 0.11197391412501678, 0.09555041463207614, 0.08594531457391463, 0.09432796685655354, 0.11019548882675101, 0.13994260770569344, 0.08829079092933023, 0.10219316207549889, 0.09092233240485825, 0.10315512421682849, 0.09903705395664442, 0.12126064278748705, 0.09339797212187528, 0.10362332884373737, 0.09190091975494563, 0.9886884438430803, 0.9825495801171497, 0.9776605175133923, 0.9836925558586598, 0.9891721260106067, 0.9741788826814236, 0.9796039170981077, 0.9952487622065022, 0.9837257116254374, 0.444654181466134, 0.5009148709199391, 0.5033578834474239, 0.45133263179284655, 0.4707693764295021, 0.4998610206912246, 0.4048538239897439, 0.3798942752797826, 0.5217469544615567, 0.7333780133643333, 0.7685384431160253, 0.745692561606683, 0.7202885586858043, 0.761505761353162, 0.6987659336899398, 0.7417892308017782, 0.7523339159349494, 0.7662135919806397, 0.33211602443105404, 0.27263963638330424, 0.2218323874105923, 0.3714882057580977, 0.2153194105092161, 0.3305238823268929, 0.39388996732492454, 0.26533105875398155, 0.3383041734386144, 0.03642180530599304, 0.05113424280962431, 0.25119362748485297, 0.25744977629860166, 0.2330712085782517, 0.3677217456779095, 0.19518191625164727, 0.20407948941202114, 0.20322837143503403, 0.3516215406366836, 0.349276150394659, 0.3270950393030626, 0.32486292334058864, 0.3297053256520389, 0.3451040904027919, 0.3130481617627864, 0.41902396571566325, 0.34958167449227195, 0.469575236207188, 0.562714121135256, 0.4813024671481233, 0.45289109174318076, 0.4627694409443065, 0.49373457842678625, 0.5031029864504586, 0.5468487437073964, 0.5413942124312523, 0.0844917802974352, 0.1842607913283255, 0.0768860671256294, 0.2270269279848771, 0.13538103973892068, 0.14227151467147647, 0.08451862777451102, 0.11652218854128737, 0.24278337002473394, 0.25449006870067825, 0.2748214487175654, 0.3110025319657731, 0.26726329522204273, 0.33145576100054697, 0.31289162784603386, 0.28081498214683087, 0.29403742137407307, 0.3262618064669208, 0.6212715665381143, 0.6953706237766109, 0.6685386703919098, 0.6884919966467009, 0.7279114048053684, 0.6553033317152079, 0.6394054804536067, 0.692749429845743, 0.698430824747899, 0.09179126894866552, 0.09100865337672404, 0.087141594682564, 0.08251177955812616, 0.13364715560710627, 0.08313934541803825, 0.07956194461928645, 0.09580921428353173, 0.0935033725875355, 0.16868792842001545, 0.14247459629646997, 0.16309755217564348, 0.1821280214844191, 0.15960136513408707, 0.12371362232379945, 0.13848058736289204, 0.1607427695524689, 0.20740113231270685, 0.32951805194699924, 0.36135704254229306, 0.3459045499354064, 0.33029699428707315, 0.34052568425678564, 0.4222679554761438, 0.3287817563730948, 0.4108919473999606, 0.39901153869895734, 0.27920607456836966, 0.2723475446428778, 0.2982213867142818, 0.29381750499945214, 0.2770246350122709, 0.26291424608294556, 0.25772960672079415, 0.29474847705593354, 0.3422848452740185, 0.18570709164823063, 0.1769594651598667, 0.18871821241900133, 0.17898616721860616, 0.15779472694758356, 0.17423654279636247, 0.1838410548658167, 0.19204678648619278, 0.18064412609267433, 0.21018930737797514, 0.19113512996649962, 0.17867132178237732, 0.23207283715217386, 0.18631919346298942, 0.1761970572206777, 0.1938757604497675, 0.2090404208971699, 0.20313176887375772, 0.5283755291773926, 0.7987925034201023, 0.16486481799157005, 0.1634089579888619, 0.7487638779556074, 0.1590871847471188, 0.16414725064500613, 0.6254836035685047, 0.8123403640542851, 0.20039821187099582, 0.7011878184780778, 0.20466061363175925, 0.7574030590003404, 0.16323564653521794, 0.19119642866929254, 0.21201060490569756, 0.20635294218564504, 0.2114182388500685, 0.18629610790833662, 0.1884908864437922, 0.18181515679038862, 0.17965560719165208, 0.19386261266570148, 0.16828824227469008, 0.184411384043068, 0.17887501712750997, 0.17341697396509392, 0.06417524612874803, 0.07382589798806383, 0.07116685762387875, 0.07173832195196661, 0.06773564609632199, 0.07219435609321079, 0.07452946112001169, 0.06824250858849756, 0.07262219196398578]}, "mutation_prompt": null}
{"id": "0a3369df-6d7e-4f19-968f-8e79efc99790", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Increased swarm size for more diverse search\n        self.population_size = 25  # Increased population size for DE phase\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Slightly increased to enhance exploratory capability\n        self.cognitive_constant = 1.3  # Slightly reduced for less aggressive personal exploration\n        self.social_constant = 1.7  # Further increased for stronger social influence\n        self.F = np.random.uniform(0.6, 0.9)  # Refined adaptive scale factor range\n        self.CR = 0.8  # Slightly reduced crossover probability for better diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 + 0.2 * np.cos(np.pi * evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "DynamicAdaptiveHybridPSO_DE", "description": "Dynamic Adaptive Hybrid PSO-DE with extended exploration and exploitation balance through diverse mutation strategies.", "configspace": "", "generation": 93, "fitness": 0.33458251063709143, "feedback": "The algorithm DynamicAdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.7275598535053616, 0.7834019232278272, 0.7477587668425189, 0.76340356880702, 0.7768414895224709, 0.7899379866114666, 0.7637218104871931, 0.7559503482142084, 0.761872048785407, 0.5464476794115571, 0.571982563930624, 0.5628387852989019, 0.5244213594172286, 0.5677818127350469, 0.5642048555277075, 0.5781413253727921, 0.6094612409552453, 0.5944007089846155, 0.29908117147422286, 0.14818510441564725, 0.1478009057976466, 0.28650704735317456, 0.32657055747320896, 0.14328892078526168, 0.1539179279539692, 0.4889370371461329, 0.3829079688743594, 0.13531296917453728, 0.13773696508042899, 0.1307192781102483, 0.1483249102163703, 0.1323915189770336, 0.13471039347383518, 0.10857198718604721, 0.14259883221014114, 0.2437589439589226, 0.9853151705686437, 0.972797751874967, 0.9768941820138659, 0.9813495836616816, 0.9798816603280052, 0.9588179929615145, 0.981802371838173, 0.9899761969889765, 0.9811273857705545, 0.5392225064111518, 0.4934909106278117, 0.5064992720714059, 0.5007671453511109, 0.5581496090964211, 0.5500838531756924, 0.47139804346245573, 0.5418276349349644, 0.566883832548331, 0.7097954024450863, 0.7369497664401063, 0.6505154342900361, 0.6295824754549, 0.6727988892357739, 0.20562675498398697, 0.7093441016697262, 0.6588616870505504, 0.7417827083256683, 0.23807349337122974, 0.2472494814866122, 0.25042162001064394, 0.2599469026678959, 0.27833509118873634, 0.24975482043077613, 0.2517385882845996, 0.2606917457704261, 0.2726130336657324, 0.25142888491189674, 0.2414968726766945, 0.25214794875492264, 0.24872701501980843, 0.2947185471467244, 0.2599915047733089, 0.27051055925042145, 0.2680082313079616, 0.2515766008015681, 0.09682343686209627, 0.13565035963143368, 0.08819177609916518, 0.06773246772986097, 0.09084311706025072, 0.10647812166517256, 0.10790768374180948, 0.09240142773452675, 0.09672214581944094, 0.2034226665133465, 0.18303515742709042, 0.17042691446856684, 0.1863188085594849, 0.17088671258704957, 0.24431882432525776, 0.20653792786971936, 0.2796850450692068, 0.2646669135936863, 0.02669378820667989, 0.11110797464066313, 0.029137965893158202, 0.06486765040216746, 0.04876504383484648, 0.11476696491906513, 0.060153921607669525, 0.03591722237013073, 0.09925573894360018, 0.15965848248388503, 0.17980673440494122, 0.17004885877320997, 0.22498651498743538, 0.20117999954720134, 0.20579596867159533, 0.21865223608386886, 0.25004489025948984, 0.15007537619360467, 0.5789030200812679, 0.5642099021026395, 0.5610704087769588, 0.5440908369478807, 0.5617531823448723, 0.5504691245993165, 0.5582516871791846, 0.5807051655728779, 0.5248695493031026, 0.13185401419134812, 0.10893856825470116, 0.09158687224021211, 0.14151683838441553, 0.11117325580899395, 0.11805334054178107, 0.1249336495981559, 0.10716684763401862, 0.1130147627999506, 0.15289908227720184, 0.15478165157798085, 0.25519820592978026, 0.23941318276905255, 0.19239019604961938, 0.16096706128074623, 0.2574577069166798, 0.16343862899376693, 0.365814987868033, 0.3959871545482503, 0.41766751250546696, 0.3715306945850263, 0.40891176544905006, 0.40383482512302493, 0.23960366426059865, 0.4380260099362534, 0.4847225717059851, 0.4330961056192888, 0.3084304185079625, 0.30275408464559483, 0.27985743811890285, 0.25457156835827977, 0.2870698935979814, 0.280377245143854, 0.3384628202968053, 0.3485249322521923, 0.25273134648735585, 0.18583088337789078, 0.1925774087549985, 0.19261808605305553, 0.19913879983502503, 0.2080992641276721, 0.19005293192298855, 0.20537902047402068, 0.25096053349005476, 0.21916625967838488, 0.4238264600559831, 0.20732556794428414, 0.4820149006833543, 0.23054949663082436, 0.2316805907488998, 0.1959687573813591, 0.2270663694715096, 0.2250618899204866, 0.5370220599600586, 0.1512248653623952, 0.8110532940573912, 0.2615282751554281, 0.7485537269786053, 0.7840908969001009, 0.16496560292172036, 0.15383552471578132, 0.1778674394905322, 0.169649083974022, 0.1669827510526598, 0.1672833090706345, 0.2102777335318582, 0.6216201482989276, 0.7355000617399317, 0.16613582501647284, 0.19819949771037637, 0.20885622920229885, 0.20861880655695964, 0.19284325953551884, 0.20042845069467963, 0.18247237167968522, 0.19577058649975287, 0.19894029560518356, 0.22204635262206862, 0.20621717232655934, 0.1770608369981257, 0.1900455450979872, 0.09014392271538896, 0.07716990282180847, 0.08106443709404942, 0.09214828790320861, 0.0810229334847491, 0.08697391659610398, 0.10727214426132958, 0.08954604046967651, 0.10360303641224167]}, "mutation_prompt": null}
{"id": "ff46f690-c13d-44cb-9b09-e20325862bed", "solution": "import numpy as np\n\nclass RobustHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Slightly increased for broader initial exploration\n        self.cognitive_constant = 1.4  # Adjusted for balanced exploration\n        self.social_constant = 1.7  # Heightened for stronger convergence\n        self.F = np.random.uniform(0.4, 0.9)  # Expanded scale factor range\n        self.CR = 0.85  # Adjusted crossover probability for strategic balance\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dual strategy in Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                alt_mutant_vector = np.clip(b + self.F * (c - a), self.lower_bound, self.upper_bound)\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                alt_trial_vector = np.where(~crossover_mask, alt_mutant_vector, personal_best_positions[i])\n\n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n                if self.func_evals < self.budget:\n                    alt_trial_score = func(alt_trial_vector)\n                    self.func_evals += 1\n                    if alt_trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = alt_trial_score\n                        personal_best_positions[i] = alt_trial_vector\n                        if alt_trial_score < global_best_score:\n                            global_best_score = alt_trial_score\n                            global_best_position = alt_trial_vector\n\n        return global_best_position, global_best_score", "name": "RobustHybridPSO_DE", "description": "Robust Hybrid PSO-DE with adaptive inertia and dual mutation strategies for enhanced optimization performance.", "configspace": "", "generation": 94, "fitness": 0.36908746698130096, "feedback": "The algorithm RobustHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8095174657057387, 0.829952066908912, 0.8309005749052077, 0.8041596397757182, 0.787655303847912, 0.8324188040232018, 0.8231161113291835, 0.8170803323699837, 0.8332576198514149, 0.6614511747656435, 0.6786915162063907, 0.6576810868630463, 0.6283810151249616, 0.6551709756700841, 0.672386073958654, 0.6583743552285217, 0.7227623481768428, 0.6868130302656752, 0.4184299936529039, 0.37675283934746595, 0.3715872293187136, 0.3727771069464293, 0.1484752447875275, 0.44859909356038385, 0.5866535588332631, 0.5057050815780886, 0.16580947003852475, 0.1644996943824546, 0.28071629854104163, 0.3705789475914558, 0.16320715305579447, 0.15899614700858233, 0.4615241381294194, 0.14663624264803476, 0.17022926588791198, 0.4580355796109187, 0.9823742696598994, 0.9835383758037834, 0.09872197411761319, 0.9829611610852178, 0.9806030843535959, 0.9776938469641812, 0.9663984996944637, 0.98910465045477, 0.9829502037918183, 0.57733788146433, 0.5986412854310355, 0.5546897659417526, 0.6185204707944894, 0.559470320913378, 0.5970936290701025, 0.542258543441997, 0.577159905171588, 0.49331361736091617, 0.7172049207884563, 0.7556049589349402, 0.3509062105585402, 0.7398491384351782, 0.7597444955538175, 0.7762733005686057, 0.6428443462635332, 0.7574291418921463, 0.7616037081859388, 0.24615704931671178, 0.22560567773534757, 0.2617777451146318, 0.12904662503726505, 0.2963285612553511, 0.2845908870329311, 0.28374407408361046, 0.2638678422965144, 0.2530890374026251, 0.22017757786734837, 0.24896494079179154, 0.2995553485707726, 0.3176055940926532, 0.20825043585510372, 0.2810765282513644, 0.2875286918068528, 0.24411792874569416, 0.3403334836788504, 0.11869008754087373, 0.17602966559447464, 0.24049445787909374, 0.14655246548862555, 0.1833409825497775, 0.15612666629333238, 0.13640179419880627, 0.050015505937195615, 0.21385238753545133, 0.27114288120942975, 0.18473485580887594, 0.16252329770776452, 0.2898445641207773, 0.1780716169882246, 0.29134764568434235, 0.27658396703179755, 0.37799347209772927, 0.0897049180858025, 0.03385599668179584, 0.07402400934238451, 0.049720405653705946, 0.09778289574187926, 0.12629318625958552, 0.09150494736277359, 0.07214434462723762, 0.17263373840770946, 0.07078650216793103, 0.1425757866943228, 0.1990565369128916, 0.2316290356366909, 0.21460919072433793, 0.2341226840649273, 0.28272338433859867, 0.22633874130102882, 0.22141062601517425, 0.17108974667162802, 0.5890080931225334, 0.6582770602184997, 0.665355842627797, 0.6013729163982737, 0.6248939823628987, 0.6150305866606455, 0.5970839187888743, 0.6131425980762724, 0.6756533969286609, 0.1334589138640243, 0.10078024381224748, 0.13277079870539144, 0.1510922555881622, 0.1329468453181526, 0.12316096861967796, 0.1545126241860254, 0.15503636409209454, 0.13469183843479293, 0.19888541113864644, 0.2779246951946388, 0.1919315203988482, 0.18310931216168835, 0.19986093141378514, 0.35076775784284075, 0.15537068309245772, 0.3629914407317907, 0.607403344462701, 0.5050339616419113, 0.380833401938938, 0.5775752735358739, 0.4380756185028014, 0.27691441905879965, 0.5104358518284915, 0.5063980758728439, 0.5284736340613478, 0.4701080947067018, 0.27689597350483264, 0.3150069020009092, 0.33352583656673873, 0.2741622245861731, 0.19661437673297244, 0.3646576358714749, 0.43900259998006674, 0.3789425018389345, 0.3612707266058245, 0.1782260550228313, 0.22282743134086802, 0.19109223645813422, 0.20981909407598642, 0.18518724159018052, 0.21670863854620548, 0.20590575018779633, 0.20933097111199395, 0.1973085251280725, 0.6151283877896585, 0.23259884681012832, 0.2143788462462478, 0.5944819883751993, 0.23907933422133765, 0.24065545403013422, 0.23526682871373084, 0.4586048381469626, 0.5530577071380143, 0.18953944805660128, 0.8590473434935262, 0.1846950753240595, 0.185313822652035, 0.8823129798337193, 0.16149682850869596, 0.15740235417631498, 0.17489078648909073, 0.19919223159370336, 0.4735536178426418, 0.6489359733632609, 0.20934375319732812, 0.1540247650728992, 0.7463911738478036, 0.20436388688970486, 0.19943705093828823, 0.19426580857734654, 0.20734386051662645, 0.1915171355371088, 0.1709130187713196, 0.1820710889222309, 0.17664707475951602, 0.21959239690117172, 0.18432858267838614, 0.19273137338153512, 0.19523505498658378, 0.18982170333973913, 0.08032971936289102, 0.0928976294778453, 0.09728633411593879, 0.1056953035674364, 0.09554465348028718, 0.08934937876558602, 0.10062945744238527, 0.0895796295593767, 0.08622763864199767]}, "mutation_prompt": null}
{"id": "c2900623-fbc3-42bd-be18-094e99abb9f1", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # A bit higher for broader exploration\n        self.cognitive_constant = 1.4  # Slightly reduced for focused learning\n        self.social_constant = 1.8  # Increased to strengthen the social component\n        self.F = np.random.uniform(0.4, 0.8)  # Reduced range for controlled exploration\n        self.CR = 0.85  # Slightly reduced for balance in crossover diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO with chaotic map\n        rand_sequence = np.random.rand(self.swarm_size, self.dim)\n        positions = self.lower_bound + (self.upper_bound - self.lower_bound) * (np.sin(np.pi * rand_sequence) ** 2)\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with probabilistic strategy adjustments and chaotic map initialization for enhanced global search.", "configspace": "", "generation": 95, "fitness": 0.3610302846248282, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8604059006086537, 0.8510905763295561, 0.8529526408535195, 0.8532705261689633, 0.8710983371362835, 0.8669346173575969, 0.8663088809879157, 0.8805663470822022, 0.8543854588568122, 0.723645723443681, 0.7384428391110331, 0.7256789678776336, 0.7395904627889875, 0.7282420050146594, 0.7374449287720408, 0.7030905461162199, 0.7241904884125958, 0.7230166353989427, 0.5963427525161904, 0.15156440324858556, 0.1777166047602433, 0.1518344643422772, 0.6341817314086877, 0.1692896254659919, 0.14516637275601374, 0.11504862349400646, 0.15993356551305282, 0.13977033455355448, 0.1482010581482729, 0.1675438686544417, 0.13897639702790987, 0.14035111211128148, 0.13591310800532497, 0.13393351224378658, 0.1189982652501167, 0.12848319190269353, 0.9592849819769432, 0.9882367975313973, 0.9830632651819284, 0.9889584496237448, 0.9883121526380682, 0.9890988480093079, 0.9813521439356393, 0.9883783359363875, 0.9887429745844166, 0.5051620993494187, 0.7133426425982068, 0.058699776055177955, 0.6982856732383612, 0.1505421837913694, 0.6360232199162142, 0.6247339585510583, 0.08554221002704976, 0.08530876419517952, 0.22550265449554452, 0.8374164679405909, 0.7933395400048455, 0.21281066488194655, 0.8686829130197028, 0.1896265200787618, 0.7871822188272858, 0.34717209067008736, 0.7838652593964606, 0.3913861255532296, 0.34997566705237737, 0.37337948224652384, 0.3646411594557769, 0.37109349769563327, 0.12787818277120677, 0.36536664160568966, 0.3241365407571025, 0.3351042296993746, 0.25163901475495676, 0.3100747646323534, 0.02192922911148365, 0.44501856577277776, 0.36908668132524947, 0.34357641661793403, 0.30944554219494635, 0.16424138180098924, 0.47361749780866247, 0.3709214086463617, 0.12183249838272314, 0.38527232173400694, 0.21357133087746571, 0.12417458152395577, 0.21604143422638522, 0.10758113075726272, 0.05314283741234105, 0.14177814978938208, 0.42971241776797786, 0.0724158381921397, 0.19478926901410865, 0.19238483720432042, 0.4434176126707875, 0.05231519967466447, 0.3113833001700943, 0.6385835887708919, 0.09209438171048567, 0.09101606865282863, 0.30184855241587794, 0.06070174739356682, 0.11949035280425924, 0.12767306021396707, 0.10013551566043277, 0.10399971280781772, 0.10968536819541408, 0.0, 0.2982362303546946, 0.3544652470552915, 0.2814017448227727, 0.2937335530223001, 0.3354122505663779, 0.35355133540827954, 0.30482239804325284, 0.0, 0.28491721835434825, 0.7213331150793736, 0.7266403727676038, 0.6579921767202186, 0.7177082085794299, 0.6771368900084108, 0.7796932821707225, 0.7071271396536869, 0.7202045768818808, 0.6591399659514408, 0.06707825812660961, 0.13848472089598074, 0.12798276651836182, 0.15324460544174368, 0.10927410401069282, 0.09747348303896919, 0.16429360539276783, 0.11533595926103024, 0.12295920128863513, 0.1951173403658557, 0.7409596447220147, 0.21656844509789452, 0.18114764780552672, 0.23548239076028, 0.6411547187521345, 0.1850410746066301, 0.17967780292980717, 0.1726307004773716, 0.45301777273333765, 0.5183005687826123, 0.614569010456516, 0.6074225052452863, 0.5926318794283414, 0.48501745124143414, 0.615762755951184, 0.5986582043922877, 0.6490744434872885, 0.2263521679664876, 0.39455343316072666, 0.2212041241701067, 0.31851397382311375, 0.20440601802827296, 0.20829592368344496, 0.4227259851706454, 0.4745759169419851, 0.45971099998535836, 0.2668628979239098, 0.23022461820509543, 0.211672211730917, 0.19845783527405414, 0.1910594378867645, 0.19468095879283132, 0.2232803777870176, 0.2006019960475507, 0.22883588347431527, 0.205048430846817, 0.21611907562067323, 0.23833348173042646, 0.22699878241483662, 0.6500612469482406, 0.21592964667638093, 0.21220566584218858, 0.2059586857926794, 0.6606270383327278, 0.19851784561248087, 0.16675795947188, 0.15400317792413976, 0.158046734304241, 0.1874166268223828, 0.2130087783789717, 0.18533446811318854, 0.16747414863349064, 0.17691859431791856, 0.08217999048619984, 0.8274133075085901, 0.0827410345025208, 0.16497599576633493, 0.21179500160419507, 0.12747148247834972, 0.20346147883581212, 0.16485859725439678, 0.1563638743782121, 0.19081932553742553, 0.20723596319059168, 0.1874398619237484, 0.179036765156394, 0.18965593726034446, 0.19374090280781242, 0.2230921410122182, 0.20373547417991744, 0.20035040567163387, 0.09232132176167984, 0.09387124560383509, 0.09585713082002534, 0.09454564557585199, 0.09706823987277513, 0.09737827040265368, 0.08902171296129147, 0.08279180755476645, 0.09684183266776292]}, "mutation_prompt": null}
{"id": "89c22525-6c91-4c56-b406-5b43bf2e3380", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = np.random.uniform(0.5, 0.7)  # Randomized for diverse dynamics\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.6\n        self.F = np.random.uniform(0.4, 0.8)  # Narrowed adaptive scale factor for precision\n        self.CR = 0.85  # Reduced for more controlled crossover\n        self.func_evals = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        while self.func_evals < self.budget:\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid PSO-DE with dynamic dimensional adjustment and selective local intensification for improved balance between exploration and exploitation.", "configspace": "", "generation": 96, "fitness": 0.3979021746902405, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8824704682587884, 0.867844904506849, 0.9121604477572376, 0.8678374340070385, 0.861091097740283, 0.8852584502711861, 0.8701464932206681, 0.8700094628132072, 0.8971017012863487, 0.7594235689863195, 0.7584096306193857, 0.7901654706681938, 0.746744342403849, 0.765093368227809, 0.8006591552160475, 0.7339177316745156, 0.7586328947486728, 0.8026829789751848, 0.13031438850191646, 0.15730278444970613, 0.5711291965212462, 0.18456863560875503, 0.17326570525566753, 0.18340676056568128, 0.16801817390953688, 0.1561962628120276, 0.7103608446965739, 0.1436578085585476, 0.1436851402506989, 0.154090361108156, 0.17247280264677523, 0.17234492364619403, 0.1517181398949946, 0.1297838184895147, 0.11127075084858862, 0.14101488202447565, 0.9850579276419438, 0.984623501303058, 0.9875115623629936, 0.9875674814207798, 0.9716243647732054, 0.9853177012818949, 0.9842803819282858, 0.9804379691468051, 0.9877503211866505, 0.7383118808899014, 0.7806942580679114, 0.671999874313157, 0.745223539751019, 0.14983800692272686, 0.7582495213306515, 0.7328656498964716, 0.7379163336255551, 0.7770679097727153, 0.8671868329732155, 0.38026873172519016, 0.8932568638498071, 0.8290488297673748, 0.27423968070109506, 0.2203297071836985, 0.8143288426141622, 0.8878103745210173, 0.2337508099891894, 0.4885089664391552, 0.57216939793423, 0.22514526171408256, 0.44433457087009864, 0.4554950501361762, 0.2242462357961824, 0.4606746374440671, 0.3843767974755533, 0.259975256010761, 0.3617441811782084, 0.4901364449401191, 0.22538052270453723, 0.46937178277446556, 0.45281934805447577, 0.2573876462718453, 0.46289772826409215, 0.45312337249035395, 0.23939224762951805, 0.2640216304738221, 0.3010967205172055, 0.018324879365907654, 0.2602240276649328, 0.2659658588462226, 0.14961537242854994, 0.023134718695278944, 0.25138198080084984, 0.07168777047235131, 0.38521110739060993, 0.4215106526949749, 0.1883392273138731, 0.3364547947199332, 0.3317329295153493, 0.10486732300433665, 0.4449546480657829, 0.46186340528851, 0.1406214252645257, 0.09615923434782381, 0.10178070079524382, 0.04103694461252749, 0.27476837310567903, 0.23958134284580257, 0.10678097269420739, 0.11875616151956037, 0.11769265496858117, 0.09211669090132724, 0.30360850704675335, 0.2975569165679369, 0.3765778847564778, 0.29264203118373866, 0.3291058934657294, 0.2616161751696541, 0.2784979816319535, 0.19408916112555485, 0.17965594969965182, 0.644706401112894, 0.759380610650982, 0.6981614910740184, 0.7690555990903201, 0.7224483096642893, 0.5686342500043401, 0.7134486594328655, 0.7292052797672174, 0.6386804386634874, 0.15475402631085777, 0.12739959239475795, 0.11484677067319715, 0.13709947677297984, 0.10822675002728355, 0.18245350044562214, 0.11758406171572677, 0.12698036735741958, 0.1080168595055424, 0.16313183963393751, 0.27455981418297604, 0.18883874963310254, 0.15187540099726793, 0.28255465625562715, 0.28602407044587697, 0.3034301964096716, 0.20257129287697695, 0.22535370990995718, 0.6734639969164904, 0.35962376784095007, 0.5234943585438279, 0.31518861882522, 0.42203910183514237, 0.7163977837685158, 0.6723378999582327, 0.6091863624304641, 0.579851260406727, 0.3497684815277474, 0.30141850526360425, 0.25756960022364594, 0.3660734993423912, 0.35700286043623697, 0.47952045289538114, 0.4362644434448859, 0.3579402995117129, 0.4933257724663662, 0.21149083905502275, 0.2519910687349092, 0.23714353045424863, 0.25100208973900484, 0.2164690813898804, 0.24448140419649833, 0.22985340933367304, 0.22504809238619017, 0.19372909780871073, 0.20743567899887638, 0.2508163311519299, 0.19570202629823175, 0.20724509018188553, 0.19416863247077154, 0.2513412238348788, 0.19450601611214502, 0.22140944501958526, 0.24898856898925836, 0.1745390345438793, 0.18633882009182312, 0.18652407992861952, 0.8741997649827641, 0.20409262000378503, 0.19827210790978478, 0.167029139990588, 0.17159639641601754, 0.9046142671430386, 0.20874899318780604, 0.21222505136643288, 0.8906023463425883, 0.1693953535046161, 0.21247299514186557, 0.8726157068252116, 0.16654388428093547, 0.8592593188500279, 0.7989452406543147, 0.2042620561377796, 0.22263472466401613, 0.19866865141258916, 0.19767062334558583, 0.1845808472942787, 0.20188288909309626, 0.196731770581152, 0.18673149482640994, 0.19340771395182677, 0.09627924760918816, 0.09362404409610392, 0.07953771475799853, 0.12185508628758956, 0.10118272136713202, 0.1253769283470325, 0.09520973948792233, 0.105799184826602, 0.09968696983884096]}, "mutation_prompt": null}
{"id": "e9fe98a3-fac5-459c-8c15-fbe27f885296", "solution": "import numpy as np\n\nclass AdaptivePSO_SAM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.population_size = 20\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.7  # Increased for better exploration\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.4  # Slightly reduced for strategic convergence\n        self.F = np.random.uniform(0.4, 0.9)  # Broadened and adjusted adaptive scale factor range\n        self.CR = 0.92  # Slightly higher crossover probability\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.8 - 0.3 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Self-Adaptive Mutation for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                factor = np.random.uniform(0.4, 0.8)\n                mutant_vector = np.clip(a + factor * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptivePSO_SAM", "description": "Adaptive Particle Swarm Optimization with Momentum and Self-Adaptive Mutation for Enhanced Exploration and Convergence.", "configspace": "", "generation": 97, "fitness": 0.4298919898889512, "feedback": "The algorithm AdaptivePSO_SAM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.29.", "error": "", "parent_id": "6fbc50af-dfab-48c9-bafd-68a2e06d04d8", "metadata": {"aucs": [0.8636924106923243, 0.875282410288782, 0.8700267272357789, 0.8779566793682727, 0.8769134160827562, 0.8902315517896756, 0.8848369209391382, 0.8698982155734737, 0.888353331481482, 0.7429555350244124, 0.7777161127985307, 0.778033988819187, 0.7806066694098048, 0.7604057988404181, 0.7377585455799918, 0.776959089992946, 0.7749817574975223, 0.7456469127266739, 0.1581481113330907, 0.17572841196600963, 0.17950763213368826, 0.18229881451627195, 0.6861659823654198, 0.18348726098755308, 0.12760970772211044, 0.15075843896181051, 0.6779696867471843, 0.15424141835707483, 0.14594944115308006, 0.13386191257323987, 0.15224116695098877, 0.1381319656478821, 0.14959709324120596, 0.11500399779895432, 0.11681710804156353, 0.1401855918985222, 0.9819426823099074, 0.9890120855661878, 0.9772808721933847, 0.9851924835702472, 0.9878876055528388, 0.9775987755293343, 0.9781717219529652, 0.9914654322306915, 0.9847076912587693, 0.7358558751733002, 0.7526482140498413, 0.5461622317807513, 0.747959099252054, 0.7489708301362851, 0.7535547730823396, 0.7227348423269231, 0.7623529374835838, 0.12378599641166343, 0.839796716584825, 0.8309092781318473, 0.8856860800950069, 0.9334626128546415, 0.2776349046612796, 0.8552091075316516, 0.894192606278068, 0.8690690490172474, 0.8995411211999292, 0.13066390909027636, 0.5551223511103536, 0.4515143503160599, 0.5763002358242298, 0.31405942010673005, 0.40585304239989617, 0.45564452642727193, 0.5718792428517627, 0.5306376694112266, 0.5306903789555195, 0.49295374877972553, 0.47151655499788103, 0.4747406507345959, 0.41264933044362484, 0.564341609853787, 0.6101923169299761, 0.3893797200830189, 0.4781101781727105, 0.2675323891891397, 0.3203732933074579, 0.20880697533746462, 0.26067707948954655, 0.1829812386778341, 0.065439504347239, 0.5775617137925637, 0.1337157595000673, 0.5303100224824334, 0.05950216576468448, 0.399940350604577, 0.184530199437286, 0.6031593079392173, 0.5550278461025273, 0.21675698966180657, 0.6625089508370743, 0.23331021808840824, 0.6664959658840471, 0.036540151905461116, 0.236634658586807, 0.21683642048622565, 0.07856714957867572, 0.3391778099997158, 0.22001017513937715, 0.09433287454697725, 0.12080189306622069, 0.12697784295683212, 0.16774084794970934, 0.3364667670623247, 0.37617980835349896, 0.4148353703639145, 0.3777947367027117, 0.42322446438628336, 0.2338814451408171, 0.367232447753444, 0.4363082146399051, 0.811996705947416, 0.8151648001020559, 0.74638989077981, 0.7646731763120946, 0.18217106252178406, 0.796905799827833, 0.7154170128710822, 0.7896729088049298, 0.7484486102846211, 0.09441810609929613, 0.14915964445577934, 0.12979507381724653, 0.15929033818934746, 0.13008386397011107, 0.14994175688385836, 0.13203717353903432, 0.07813690577677557, 0.16493941694325098, 0.2606811063369153, 0.20330683572857677, 0.1541259311085883, 0.14354838016574067, 0.21491762150822002, 0.6210241486759867, 0.2730588723467101, 0.20683021145762137, 0.7457786548164633, 0.538444305260481, 0.6568788335556432, 0.5311608014391485, 0.6583324686024961, 0.5386209384471164, 0.5797331803181267, 0.6830664961491094, 0.725536493620992, 0.6983636583728826, 0.43793118597782965, 0.43722332836269406, 0.3741080430015622, 0.4340429732027441, 0.3363428376663865, 0.4781658022752435, 0.2860992532317145, 0.4952465818804619, 0.4440821944687332, 0.2161281522152333, 0.25980599211498634, 0.18228335115524918, 0.21049537243826721, 0.20855199135032398, 0.21249243244039628, 0.23853968006263238, 0.235905286472205, 0.23680475883209717, 0.18378887461172622, 0.2064488411856299, 0.24815896079832278, 0.21896746602255468, 0.24886718669749797, 0.24434518761941426, 0.24916608931629747, 0.2422511469235833, 0.7399204031821682, 0.16417316491005296, 0.9287235996462871, 0.16703379945484775, 0.19827930276591232, 0.9297859507195738, 0.1705479270195206, 0.1541102143551234, 0.17426289708515375, 0.8779730514054801, 0.8691459848537745, 0.20859780706264797, 0.1696053314950413, 0.15692613551715717, 0.09371246703192282, 0.1681533909115076, 0.21468734893529562, 0.21361931794488154, 0.21163775259547046, 0.18794486223008677, 0.21832816948798084, 0.20081903346479302, 0.18717196030197547, 0.19846800321597347, 0.19504325359194652, 0.19613597890259094, 0.2028810810016335, 0.2170891815035978, 0.08313602710616774, 0.09822589318745756, 0.10130663674807505, 0.14622709553445767, 0.10423314596039923, 0.09458807784536549, 0.1638577506342137, 0.08586441281981783, 0.08499152192088]}, "mutation_prompt": null}
{"id": "3edafba9-30a7-4839-9c19-9683fbeb7b16", "solution": "import numpy as np\n\nclass AdaptivePSO_SAM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Adjusted swarm size for better coverage\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.8  # Slightly increased for better inertia\n        self.cognitive_constant = 1.7  # Slightly increased to enhance individual learning\n        self.social_constant = 1.3  # Slightly reduced for controlled social learning\n        self.F = np.random.uniform(0.3, 0.7)  # Refined adaptive scale factor range\n        self.CR = 0.9  # Adjusted crossover probability for diversity\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.5 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Enhanced Self-Adaptive Mutation for improved exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                factor = np.random.uniform(0.3, 0.7)\n                mutant_vector = np.clip(a + factor * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "AdaptivePSO_SAM", "description": "Adaptive Particle Swarm Optimization with Dynamic Inertia and Enhanced Self-Adaptive Mutation for Improved Exploration and Exploitation Balance.", "configspace": "", "generation": 98, "fitness": 0.39596956657899746, "feedback": "The algorithm AdaptivePSO_SAM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "e9fe98a3-fac5-459c-8c15-fbe27f885296", "metadata": {"aucs": [0.8357372447042677, 0.8407450721413788, 0.8182885584175481, 0.8381003158130347, 0.8234953199342953, 0.8482138305333683, 0.8499479707910089, 0.8332740779447603, 0.8388163217871638, 0.7015442958972178, 0.6970682177094332, 0.6730676655539234, 0.6590252413147873, 0.6959017096854607, 0.6877215473377074, 0.6574558322265716, 0.6792958715818594, 0.7077735812405174, 0.16310722818945977, 0.15969570515069753, 0.16413517253334098, 0.12069574748778433, 0.4114982649669824, 0.1659909991553744, 0.16722892074495432, 0.5546779772914665, 0.16166280592640137, 0.12985165086075634, 0.1275090116046318, 0.1659516259901549, 0.13454639254842915, 0.1049972784757065, 0.1452374304139008, 0.1466849135337156, 0.13944791642471988, 0.10721844152606663, 0.9763398681600624, 0.9846371390524338, 0.9706740491307865, 0.9810439276715877, 0.9844788284710455, 0.9760966808729407, 0.9810865941960195, 0.9906023013483112, 0.9800746049389691, 0.6400532946208102, 0.6473216654756887, 0.5958653762041447, 0.6205992336481574, 0.6047442302655452, 0.6266232734399242, 0.6429897764385766, 0.6312041665125492, 0.687549671157789, 0.7256826585729106, 0.8449375015896905, 0.8370062448318436, 0.843397822929943, 0.8180669950409348, 0.8566310674794855, 0.7587989778825321, 0.8515702545427714, 0.8362818535204655, 0.24497005877589673, 0.3564991971119119, 0.3103023843621344, 0.27817016530160343, 0.27198343716707163, 0.2464601977415648, 0.27366608569074824, 0.2918533483539769, 0.22338602442388178, 0.24714973837101795, 0.27170792247069286, 0.28232289669134925, 0.26262596039235264, 0.26724051135854787, 0.3595421601315625, 0.335568211514767, 0.26473874431405764, 0.2713243322655514, 0.009565949633373538, 0.10963847426151896, 0.18197357182331997, 0.5218400350369521, 0.31213573380484383, 0.02022651226791672, 0.4448466655720267, 0.48495223897648065, 0.12988182590597697, 0.10736360591883931, 0.2265803083944944, 0.5225638811925881, 0.1763022903093241, 0.194913476488487, 0.29034030551934853, 0.6162362457611295, 0.14601000431123923, 0.1533817192147513, 0.12041884995460672, 0.049245379142687895, 0.06551305032090726, 0.10924488382785769, 0.11813095516004546, 0.15965241905467298, 0.08046043859471264, 0.2534013503630461, 0.06902919691133669, 0.16109593122674792, 0.3226909755597521, 0.28481465385162785, 0.33110373063172704, 0.354922073060828, 0.2887590870047748, 0.22737818177817182, 0.3216517472872671, 0.2143483877155582, 0.7418744595061499, 0.749854089656834, 0.7543590088715526, 0.757902600348576, 0.5860285568190757, 0.6753166011241082, 0.6762438462299607, 0.6835545898269508, 0.5733289407091255, 0.1412786156878303, 0.08789176464573412, 0.13244718304189596, 0.10079148537944516, 0.12485023626133662, 0.130036467521345, 0.11365787737003064, 0.15734473631935653, 0.12871753631839256, 0.41882877275867514, 0.29191502496038624, 0.18769259728741505, 0.20425127940360843, 0.18576376836857378, 0.18128108676385757, 0.16931319143504175, 0.22589863175969405, 0.2881420777924635, 0.5099125816905377, 0.5273567267225356, 0.5139351233664139, 0.546172438049368, 0.5616055281396126, 0.5623377820711429, 0.5684197768999717, 0.5264649760946931, 0.5611565917337329, 0.35957188159428, 0.39635752991944306, 0.3972737247394258, 0.4331966754290125, 0.4278369245670818, 0.38870763980211853, 0.43884832246915395, 0.4526013307900857, 0.42777573695291093, 0.2062660748780225, 0.2239365834371131, 0.1913499302747449, 0.20048799169476883, 0.2230767938702506, 0.20540506694274696, 0.19766987623562338, 0.20867305402130298, 0.21301778342705713, 0.23585602650376492, 0.2038505749299543, 0.2123361160507372, 0.23355406574252424, 0.19343692648126698, 0.6244231755868834, 0.21878327457799618, 0.2399315704244135, 0.23525780550013897, 0.185082336314205, 0.8705221880318417, 0.8307810311007134, 0.16668224964219702, 0.8816368855791735, 0.7960414172338899, 0.15800024173583593, 0.849372509731253, 0.15846948751031864, 0.12624832406717046, 0.20404217118327084, 0.21211422452585882, 0.8409037824434884, 0.7096874419361869, 0.16807179631575875, 0.21337675832337022, 0.8256685074587382, 0.21138307709332937, 0.19224088578545984, 0.19122019081179842, 0.2029802283484924, 0.20502377061048793, 0.18717199330887824, 0.1944471901476068, 0.19667329536708422, 0.1905855664163264, 0.17926121119688865, 0.13626253954833667, 0.09003023301528679, 0.08596725750304979, 0.11999798188067057, 0.10810970827153255, 0.09727293564191986, 0.10765755605809157, 0.08446932023813447, 0.12646735119615604]}, "mutation_prompt": null}
{"id": "944270d8-ab84-437b-8cc5-586b0f361464", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 25  # Adjusted swarm size for diversity\n        self.population_size = 25\n        self.upper_bound = 5.0\n        self.lower_bound = -5.0\n        self.inertia_weight = 0.8  # Slightly increased for enhanced exploration\n        self.cognitive_constant = 1.4\n        self.social_constant = 1.6  # Slightly increased for faster convergence\n        self.F = np.random.uniform(0.5, 1.0)  # Expanded adaptive scale factor range\n        self.CR = 0.9  # Lowered crossover probability for refinement\n        self.func_evals = 0\n\n    def __call__(self, func):\n        # Initialize PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))  # Randomized initial velocities\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        # Dynamic adjustment of inertia weight\n        def dynamic_inertia(weight, evals, max_evals):\n            return weight * (0.9 - 0.4 * (evals / max_evals))\n\n        # Optimization loop\n        while self.func_evals < self.budget:\n            # Evaluate current positions\n            for i in range(self.swarm_size):\n                if self.func_evals >= self.budget:\n                    break\n                score = func(positions[i])\n                self.func_evals += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions for PSO\n            inertia = dynamic_inertia(self.inertia_weight, self.func_evals, self.budget)\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - positions[i])\n                social_component = self.social_constant * r2 * (global_best_position - positions[i])\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Self-Adaptive Mutation for enhanced exploration\n            if self.func_evals + self.population_size * 2 >= self.budget:\n                break\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = personal_best_positions[indices]\n                factor = np.random.uniform(0.5, 0.9)  # Adjusted mutation factor range\n                mutant_vector = np.clip(a + factor * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, personal_best_positions[i])\n                \n                if self.func_evals < self.budget:\n                    trial_score = func(trial_vector)\n                    self.func_evals += 1\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "EnhancedAdaptivePSO", "description": "Enhanced Adaptive Particle Swarm Optimization with Dynamic Parameters for Improved Flexibility and Convergence.", "configspace": "", "generation": 99, "fitness": 0.37654623185766234, "feedback": "The algorithm EnhancedAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "e9fe98a3-fac5-459c-8c15-fbe27f885296", "metadata": {"aucs": [0.7704928590146436, 0.7607260672399173, 0.7982979829046352, 0.7798199684140825, 0.7780800939777353, 0.7879268329355518, 0.782893937854337, 0.7747213303749116, 0.8007758659585247, 0.5970585807188953, 0.5905075070371133, 0.5844540173304211, 0.5936849760622959, 0.6126778919216581, 0.566904308637164, 0.6002227817019438, 0.6007317568448837, 0.5998931739252169, 0.1415539691954516, 0.1522099989658574, 0.44676446290540306, 0.1497524954104954, 0.13736509979692313, 0.15636688652155195, 0.15465195819099753, 0.13220689212030556, 0.14892447664385922, 0.142035771403344, 0.14284838526793797, 0.13200581141100443, 0.15330662289666652, 0.1243910539306935, 0.11894139699588635, 0.12700023317340803, 0.1516179558776426, 0.13831796964451082, 0.9845402615783234, 0.9854221397818309, 0.976846094220468, 0.980908346276668, 0.9818708905275161, 0.9715430343672575, 0.9787423595733896, 0.9906235754295245, 0.9805872542398179, 0.6063047478496084, 0.5867455935489538, 0.05906573372589996, 0.5542527452912314, 0.5339442916123098, 0.5801391086678842, 0.08795730750385211, 0.532725460144735, 0.528043256264785, 0.6693639239032514, 0.7217186566343721, 0.7078546387652521, 0.8169624883853396, 0.7756591531735506, 0.7611385558661303, 0.7510527189498599, 0.7646760121450865, 0.6719381900233405, 0.28344248621859613, 0.3706796306476843, 0.2612735958103236, 0.2545378421924327, 0.31668530287386953, 0.32604007687434333, 0.3543284877881089, 0.3448171468603025, 0.29572282080086, 0.32569016579559207, 0.2916232816938391, 0.2258505295396902, 0.3380999667087856, 0.315530243711995, 0.32676068040267914, 0.35205968073759697, 0.36211399576594516, 0.3621077548811752, 0.21636980957606378, 0.2458334353176087, 0.21088296610467094, 0.2600518793295632, 0.25626975073786273, 0.3141813888901922, 0.24823924115481522, 0.25545402810888895, 0.24785870455211068, 0.45761416289221823, 0.3933513420548298, 0.3680980021552468, 0.41037718278006974, 0.410635442431977, 0.3799785039986019, 0.4446617484938693, 0.5021049101712658, 0.3833292543468635, 0.03218524239449161, 0.06295748701467418, 0.07926025655485713, 0.14467468348236834, 0.12700778193543005, 0.15526102598582547, 0.08942217634488481, 0.11805844647619756, 0.13452946847823843, 0.22743569976996525, 0.23357666792255782, 0.24813113566698353, 0.2570911637046551, 0.2760399026955441, 0.2557421889931023, 0.23464782749469582, 0.2634977307204702, 0.24164475465849378, 0.6461135709980451, 0.595263186003939, 0.6038131531717779, 0.6671265827663722, 0.6499065633585879, 0.6311766352302759, 0.6301857615780742, 0.6189486082794119, 0.6324555311568943, 0.11926922059568856, 0.1020011994546216, 0.11667514955009795, 0.1429389261700582, 0.10918511305544065, 0.12973509133695316, 0.15388009220249166, 0.12798060258190058, 0.1309292743733953, 0.22974381122389353, 0.21375631623508284, 0.222383864401411, 0.36197686009156105, 0.17492165293184714, 0.2622701528829927, 0.26126345843040466, 0.15457822964779677, 0.19293844105916347, 0.4329134164154238, 0.4449105873637743, 0.3973494457817758, 0.47826487767227965, 0.4531514938080723, 0.44498791761343914, 0.4458733198088837, 0.4807804987864913, 0.4404071013937052, 0.2725285909154038, 0.2722594420597486, 0.3301886517281589, 0.31505911248328744, 0.29028984135589486, 0.3374795754902852, 0.3936750733631571, 0.3941547345511762, 0.3589445248542761, 0.21384202108942763, 0.21183787371374874, 0.20832546096936844, 0.20697317322169706, 0.23409221374594413, 0.21973652157293588, 0.2010918090136925, 0.22031639407039616, 0.1937277084449408, 0.22893118550666336, 0.18643366199231515, 0.23713712886898275, 0.5348620386607077, 0.1982064589760546, 0.20944839863751952, 0.21303356724179223, 0.21083545854560115, 0.5662008325434409, 0.15989983246393513, 0.7862972963410455, 0.18302403544754775, 0.16714267893619095, 0.8371246632909015, 0.8039353565476206, 0.78137713982193, 0.8223249373359952, 0.7959632168878864, 0.7563879265073624, 0.2077740504208032, 0.1686356875041909, 0.16674953132399173, 0.7709219513185862, 0.16836630791698082, 0.7399382072522644, 0.20346858200274265, 0.2114257213233517, 0.192089677718275, 0.19632115187580734, 0.2160912952420404, 0.19647898864250657, 0.21493041388800072, 0.1798858691058336, 0.18388336427812269, 0.17988217220824876, 0.18838083664262206, 0.08736683176835736, 0.08288407520219976, 0.0794743533409541, 0.1044705651729162, 0.07905287554062057, 0.1031247355773861, 0.1254659035114688, 0.08463739911907653, 0.08456429439858237]}, "mutation_prompt": null}
