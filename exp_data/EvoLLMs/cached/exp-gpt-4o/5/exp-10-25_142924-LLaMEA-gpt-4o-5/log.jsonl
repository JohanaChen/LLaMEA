{"id": "60b8271b-6484-4115-837a-e88465695ccc", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.7)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Differential Evolution (DE) parameters\n        population_size = 10 * self.dim\n        F = 0.8  # Differential weight\n        CR = 0.9  # Crossover probability\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(population_size, 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimization", "description": "A hybrid metaheuristic leveraging differential evolution for exploration and local search based on Nelder-Mead for exploitation.", "configspace": "", "generation": 0, "fitness": 0.2996913005976132, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6377537345751776, 0.6057005691054824, 0.608423752467986, 0.6631126759456876, 0.6636317412028632, 0.6603848306409916, 0.6669008070844533, 0.6395546263053686, 0.6308959827887979, 0.42855216830807075, 0.44911084571493576, 0.4597300584692764, 0.4442193275075471, 0.45673522794876276, 0.45229771783724304, 0.45517473384208096, 0.4758552322911319, 0.45400213375062515, 0.09744681863722104, 0.10383108069795521, 0.10760123637081287, 0.10607619367719212, 0.11415168980685741, 0.09803314129344654, 0.09959412355010122, 0.09634000516948182, 0.10398960172723148, 0.09397787095046062, 0.09090567827029739, 0.10966238005547824, 0.10197027641769241, 0.1030709840826537, 0.0992489523939486, 0.09794966932283167, 0.0887363633108984, 0.10841301111133617, 0.9806164642140757, 0.9131818418276485, 0.9674545387139455, 0.9574454447453314, 0.9162789564746359, 0.937231638163827, 0.9708179656152067, 0.9572804101259852, 0.9689147118055341, 0.2814939444909077, 0.30318856322258636, 0.2883060103456959, 0.29168486882568134, 0.31825971744031445, 0.3669074459152236, 0.39140590411621035, 0.3429273956985808, 0.4031833158368874, 0.30705165981921234, 0.5248197934116622, 0.2827533843233698, 0.5446581167637885, 0.5107403124377873, 0.5252956318567661, 0.48803742374257464, 0.5922773014258165, 0.505131848408342, 0.37305471492840325, 0.3541051215205181, 0.3720768561737926, 0.37042916862316555, 0.3793042967062247, 0.3776577116594929, 0.3792122953791638, 0.3476718507842701, 0.3480167646634129, 0.3026354789757465, 0.3640541411450128, 0.39762821355201217, 0.37100078025510363, 0.33886180330462523, 0.3750689226894449, 0.33923604775387184, 0.33633489254365256, 0.26676867967982043, 0.3042210714990501, 0.2886901676868051, 0.11610012168024242, 0.1339401469755387, 0.1522276667941973, 0.304680336204733, 0.30249405470709845, 0.30031532607172684, 0.12285628988007624, 0.2884441789015274, 0.27842787698332094, 0.26601362677693696, 0.24924597369108503, 0.2278919809986033, 0.254020217726323, 0.2584959632225641, 0.29285425617120797, 0.40373396997367894, 0.07716767646559097, 0.08365207074340564, 0.1290087332651434, 0.25724870992652304, 0.17159667414606083, 0.16107992981267583, 0.0796739948586539, 0.19883892442517603, 0.21530917133298355, 0.17299535502412, 0.1573265769538319, 0.15971607817082933, 0.17323709166293755, 0.17064851631627498, 0.2256463282811425, 0.15708043946773964, 0.1818684560855165, 0.17687872274787386, 0.4893190747074364, 0.5658227615152963, 0.5396265676835408, 0.5825484804953565, 0.5194954166074343, 0.5234497698391409, 0.5503516547598771, 0.5622393662396253, 0.5216637238551876, 0.09229761187493901, 0.09748998580666357, 0.307016422367862, 0.08801044499768795, 0.2879647134845299, 0.10840264092687302, 0.09278582169818661, 0.10023192731946162, 0.10710391982431788, 0.16955139306040434, 0.18838471453599637, 0.15361601093858612, 0.18590175042738133, 0.14422619692796146, 0.14838358655216688, 0.16616012635609623, 0.13262196337375975, 0.1680883464046956, 0.3323818074146906, 0.23914006800231902, 0.2813544635211933, 0.24041609545045606, 0.2405874668903314, 0.254373365766405, 0.2770251598692398, 0.2895279804087503, 0.28864305134495194, 0.2127110866091183, 0.20130335336567773, 0.20618953738154544, 0.1871093410533078, 0.19610716306425957, 0.19919216686757835, 0.2097595104676202, 0.21403932474586773, 0.21424935429765934, 0.2000283077219478, 0.17285441867364093, 0.21121117289425895, 0.19581234581114204, 0.20882658394146147, 0.19560528540425126, 0.197803047996982, 0.19957242281288323, 0.2267895362200576, 0.1756661772252497, 0.20040529780152883, 0.18507916901113675, 0.18224259066645376, 0.18116609781360016, 0.17042098134926564, 0.17880170750786872, 0.17857836770905378, 0.1901123924673891, 0.15913458539894543, 0.6146527334847871, 0.6642467290753948, 0.1786073737026942, 0.1837129273288146, 0.18065534538024897, 0.1560537480675288, 0.4253556126346931, 0.4626547573058126, 0.18663092210097143, 0.19398173815315445, 0.18439307777624092, 0.4527330480455082, 0.41469584210199806, 0.18140629115873808, 0.20305394883256211, 0.5316099012261919, 0.20528741010302132, 0.20362981382311462, 0.18092013717636768, 0.205728143313465, 0.19135710311348542, 0.1723337966182733, 0.20040487820637587, 0.19660211477049838, 0.1967602312647655, 0.1779066497016596, 0.07475523351751467, 0.08189960399449014, 0.07748828042388356, 0.08340394975122112, 0.07796257805289675, 0.07083379670599155, 0.08089460580215146, 0.07668016700841163, 0.07992899346406102]}, "mutation_prompt": null}
{"id": "b644781c-4dab-47b8-a05d-0002502bac38", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.8)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 12 * self.dim\n        F = 0.5  # Initial Differential weight\n        CR = 0.7  # Initial Crossover probability\n        delta_F = 0.1  # Adaptation step for F\n        delta_CR = 0.05  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(population_size, 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.1, F - delta_F)  # Decrease F for unsuccessful trials\n                    CR = max(0.1, CR - delta_CR)  # Decrease CR for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimization", "description": "A hybrid metaheuristic using adaptive differential evolution for exploration and local search based on Nelder-Mead for exploitation.", "configspace": "", "generation": 1, "fitness": 0.30642902356194124, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.22.", "error": "", "parent_id": "60b8271b-6484-4115-837a-e88465695ccc", "metadata": {"aucs": [0.7656956788038893, 0.7560874958093753, 0.7630899104865385, 0.77599327879515, 0.7551491781797216, 0.7457768343786775, 0.7608888567747307, 0.7521372186744013, 0.7757661421436683, 0.5546228858287288, 0.5729645870947432, 0.5617217122983739, 0.5667838525793779, 0.5657679127542607, 0.5869426623670613, 0.5608269337133203, 0.5584659022838612, 0.566391353343226, 0.5391759328969485, 0.5520493523317433, 0.5421756062521329, 0.5589825095417087, 0.5598410968000038, 0.5662940558136634, 0.549390105577875, 0.5486552462918993, 0.5003867807561521, 0.44040773548094214, 0.5149323236944565, 0.42648609490328293, 0.48738605773297783, 0.435504417881896, 0.5070836941034937, 0.16350214493186666, 0.5095460759947257, 0.46737341586634606, 0.9693539061577992, 0.9304986860674211, 0.9337607410933634, 0.9517465047228757, 0.9298942613402773, 0.9491928868332584, 0.9309625182425754, 0.9373776162711316, 0.9674471978340928, 0.16155489329715167, 0.18796707167915938, 0.24614880082361634, 0.192130225516827, 0.17986611364496352, 0.15987283122399254, 0.21416098575680753, 0.17211559028559242, 0.2060621011095527, 0.16644866324365104, 0.1721385333377422, 0.17951344155312143, 0.257583069175535, 0.2021965605112266, 0.27403702166382826, 0.175164484649732, 0.2554794067210756, 0.2195608019785521, 0.3441860496244129, 0.3122808970538161, 0.29426527297789407, 0.2876842921866243, 0.29235111660145807, 0.27307367056237497, 0.34517385093203035, 0.30266861978999093, 0.32930833679572047, 0.26997636823891114, 0.28856454729243874, 0.2788285919994741, 0.2790607788862757, 0.26101496119839973, 0.26953397503725274, 0.26530992271042975, 0.2616732844604186, 0.2568636681065303, 0.14742780920509102, 0.012469260686015171, 0.02043717698759706, 0.04182503905024382, 0.13965154210743536, 0.015235098020905613, 0.1334304327793454, 0.13895762039492388, 0.047007000805834975, 0.12976698197795555, 0.13975669629417975, 0.19008047323036714, 0.06539699611694627, 0.12827711320303892, 0.11339241733064631, 0.166318630017815, 0.1983653609606717, 0.08905383506214926, 0.07442807694081133, 0.04305351994287576, 0.06265993020842375, 0.023466280078366597, 0.08894786480092576, 0.03653837431724427, 0.06993670637158245, 0.09979799286197522, 0.10986566627144989, 0.07777104872043417, 0.059010674362325544, 0.08605168112398698, 0.1741323294885846, 0.13440525920930324, 0.1007072864975147, 0.12921701429262789, 0.10651288806162806, 0.16553286511755105, 0.47916028656746956, 0.5247046592714281, 0.5040402057445166, 0.4769253286636266, 0.471469861428531, 0.45442255016440103, 0.5075588651889174, 0.52533741619438, 0.5182384306290547, 0.09873157511268438, 0.11763711769040985, 0.10271423310806838, 0.12363873512582013, 0.10429703044164274, 0.10150825699441479, 0.10296871646643468, 0.10262129234700856, 0.10014759802170958, 0.19354394128797703, 0.14382397430264704, 0.1660035332759533, 0.20320031003663186, 0.14886632361601582, 0.18557765354596545, 0.17751948638405224, 0.1620824511268738, 0.1518127385727014, 0.21081303157799192, 0.24438068918269418, 0.2591682757909466, 0.21972824360464982, 0.2437945150420111, 0.2340213440433183, 0.24308763739690475, 0.23666441428592244, 0.2546421727554238, 0.1585318637440134, 0.20396663655384484, 0.18417451347269265, 0.16154893119406932, 0.1845448112058281, 0.19759379219595985, 0.18743105969242502, 0.19155825083538225, 0.17591338688995073, 0.22376401265425605, 0.23401886582083975, 0.20178168617712577, 0.2215450894896066, 0.2018160004556112, 0.21357070710980985, 0.2080652236668571, 0.22222675588965068, 0.20189941005325396, 0.40704980493093557, 0.3860103491546987, 0.43439699470993065, 0.37651072659363893, 0.35898274985540923, 0.3343560281364508, 0.3737711849184293, 0.22091181427037232, 0.38275590903798806, 0.4007834589393485, 0.17791352989001175, 0.35984234611424526, 0.40573811269040294, 0.4020987927947326, 0.3693977428959978, 0.36219242190358647, 0.367071543107346, 0.3787031726662864, 0.35502948133043544, 0.3327046525544737, 0.3593590816424619, 0.18920489866281276, 0.33238297345604595, 0.35141517798612876, 0.3498204331469579, 0.39395089965147556, 0.17854986367663928, 0.21452313916344024, 0.19337784163689054, 0.18977322202783853, 0.1972815684220578, 0.17796725275289194, 0.19237002585372842, 0.20081073795308113, 0.20787027590553997, 0.20449770011675616, 0.07363711743574808, 0.0824040215279972, 0.08309825522073755, 0.07990459127390581, 0.07546347799270425, 0.07081252048512288, 0.0718048394938422, 0.07804337398659811, 0.07813798607343492]}, "mutation_prompt": null}
{"id": "c923e9b6-8299-4f5e-b8fe-dac10a2a880d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.75)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim\n        F = 0.5  # Initial Differential weight\n        CR = 0.7  # Initial Crossover probability\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.1, F - delta_F)  # Decrease F for unsuccessful trials\n                    CR = max(0.1, CR - delta_CR)  # Decrease CR for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimization", "description": "A hybrid metaheuristic using adaptive differential evolution for exploration, enhanced by a dynamic mutation strategy, and local search based on Nelder-Mead for exploitation.", "configspace": "", "generation": 2, "fitness": 0.33306929231994525, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "b644781c-4dab-47b8-a05d-0002502bac38", "metadata": {"aucs": [0.8082469639997758, 0.8109070242606385, 0.8185794399993072, 0.8107119519877679, 0.8164278455034998, 0.8145880839293616, 0.8199510653997198, 0.8168502689076519, 0.8162859700053438, 0.6348031913596096, 0.6688096919428226, 0.6486235216957115, 0.6764319659341547, 0.6433756805714023, 0.6687801630622203, 0.6557381709171596, 0.6584757313598015, 0.6803534394468174, 0.6053524920313857, 0.596229665280609, 0.6564342345803906, 0.6477816112363513, 0.6251493211356511, 0.6702370062486134, 0.6298807586330057, 0.6535566996330406, 0.6486213410388277, 0.6036444220478019, 0.550868393310223, 0.1713536940885393, 0.545842668663976, 0.5916829849884725, 0.6215712755283598, 0.5329627686271172, 0.6001153850920953, 0.5762851935142348, 0.9710769799853327, 0.967496897555768, 0.9552865372934682, 0.9422749870108632, 0.9540935952968729, 0.9501481592398016, 0.9356577015611739, 0.9744893368097961, 0.9506534080971593, 0.19639695338068608, 0.16925958447202794, 0.16586681712725326, 0.23503757826103988, 0.17000206431281217, 0.1527311425770158, 0.2104341452009545, 0.23296700217918365, 0.2438957435558824, 0.21152307879689602, 0.200634191814823, 0.16508338106935194, 0.22575044709667902, 0.2313207704901552, 0.25405766548476993, 0.23050449726084354, 0.2464653088742177, 0.20062693244493535, 0.34655696186397333, 0.3497363053277952, 0.34717050294552065, 0.36391443267468304, 0.3713624890294527, 0.3483885067447908, 0.3688207524036313, 0.36108326154728343, 0.36772218925796507, 0.3251528124336315, 0.33165737356948444, 0.3125762101119942, 0.32824205573178566, 0.33973688844169525, 0.32006712958161077, 0.3181362426164326, 0.29328784344386793, 0.29550274821910427, 0.09810622050466644, 0.1820110326573391, 0.017618227912237105, 7.454993743249982e-05, 0.014736432487980733, 0.005420170002156333, 0.18572596489468873, 0.14635752755823228, 0.17862407830198046, 0.18444626723980484, 0.23171426069218282, 0.11111276749111221, 0.10614792697784237, 0.05686188180635421, 0.08359717937280509, 0.20425513960861497, 0.17792620287005634, 0.1622568757286419, 0.1454423881713326, 0.07590484525681584, 0.03638043718409678, 0.159885467261492, 0.22209362363737484, 0.024186710224612384, 0.11521208632677604, 0.02906489446247873, 0.08876480685141519, 0.13064018584044157, 0.09296660885804808, 0.1161949011316199, 0.13600063700069553, 0.08472493367717981, 0.14116230971701693, 0.10076661808507215, 0.07441909141910596, 0.09301478881146119, 0.5485546738045988, 0.5638907216304676, 0.5815763379675944, 0.5386220604491057, 0.545022105448677, 0.49742480807415146, 0.5384073427380403, 0.527990009339204, 0.5542182471428316, 0.11274366680042147, 0.11338599232778457, 0.10939164355220632, 0.11691838083291839, 0.10125759624345698, 0.12052132182229469, 0.09852811774484871, 0.10559416349192174, 0.10888319257965173, 0.17607634032194586, 0.21310359702964432, 0.17192928817475261, 0.17448659171719993, 0.20826326954834729, 0.1924494080865531, 0.16973127474135197, 0.16035940939197713, 0.15595793790907775, 0.19729079783351366, 0.22733370186372626, 0.23561693281127494, 0.25784928655346373, 0.24135288608308947, 0.27677439503468004, 0.2664341077215069, 0.2893278382847664, 0.27892034025992685, 0.20421470962576327, 0.20959206922130225, 0.18858767295077927, 0.17627099198089258, 0.1736804815411328, 0.19927616296532524, 0.20224451853130565, 0.18274750801296358, 0.1553041669183749, 0.23071598790965253, 0.20224094950061422, 0.18311027912026367, 0.2417510832650107, 0.20130648133655404, 0.25107953452715237, 0.20525202723453895, 0.23164705195688018, 0.2539601339227451, 0.22675983668139132, 0.22950619270285189, 0.3793726474248217, 0.42378753640707, 0.4240682311939753, 0.38854273967706443, 0.39656078230754577, 0.21870904926601198, 0.37530360248547334, 0.45671785521368025, 0.3929859251341966, 0.4341745707300241, 0.4117619743539148, 0.18286067554176788, 0.5050301080293558, 0.46032461078279197, 0.1743147047596929, 0.42383438860297484, 0.3878899005284582, 0.4611667208407386, 0.3438401386730473, 0.18730794063211875, 0.19526916354249313, 0.3915379435161104, 0.36488757386754944, 0.4159559351399522, 0.39730199411677447, 0.19379744255864706, 0.20339376549220178, 0.22434113887241214, 0.18176909383597317, 0.20230927768526463, 0.19222214111725244, 0.20563336307393287, 0.19257128199667872, 0.20816204684263162, 0.08391882883931956, 0.08621907866290601, 0.09328354467782485, 0.07683347971537113, 0.09228124505994761, 0.09703840511449469, 0.08454040812718044, 0.08052094856675762, 0.08301157372220391]}, "mutation_prompt": null}
{"id": "9edfe728-0840-4453-a06e-219fba73d0e7", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.7)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 12 * self.dim\n        F = 0.6  # Initial Differential weight\n        CR = 0.8  # Initial Crossover probability\n        delta_F = 0.02  # Adaptation step for F\n        delta_CR = 0.02  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with topology-aware mutation strategy\n        while evaluations < self.num_de:\n            centroid = np.mean(population, axis=0)\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c) + 0.1 * (centroid - population[i]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)\n                    CR = min(1.0, CR + delta_CR)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.1, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Simulated Annealing-inspired optimization for exploitation\n        if evaluations < self.budget:\n            options = {'maxiter': self.num_nm, 'adaptive': True}\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options=options)\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimization", "description": "An enhanced hybrid metaheuristic combining adaptive differential evolution with topology-aware mutation and a simulated annealing-inspired local search for intensified exploitation.", "configspace": "", "generation": 3, "fitness": 0.32853173295819943, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.22.", "error": "", "parent_id": "c923e9b6-8299-4f5e-b8fe-dac10a2a880d", "metadata": {"aucs": [0.7835725341797963, 0.7765119562320031, 0.7764259288650935, 0.7699078222272027, 0.7952399251028477, 0.7791539519565469, 0.7814824867282953, 0.7759812257800105, 0.7760463672641337, 0.5858264279098995, 0.6093026973589355, 0.5956223473398933, 0.614274425338776, 0.5830630706600763, 0.6149546631910612, 0.5996624530737045, 0.6169140248653029, 0.6157652279642187, 0.4327309131853543, 0.4405153743099217, 0.45343629177214584, 0.41619539244848636, 0.3928185621423338, 0.4744640279188157, 0.3649807755065603, 0.45207644728869256, 0.4210389555724189, 0.16184272779032904, 0.3489145587771947, 0.3597511964646929, 0.35405578233308965, 0.3703219979017469, 0.33994532646329023, 0.3613371475210376, 0.32790542730076666, 0.16151883014044743, 0.9334768964233016, 0.9331692368242925, 0.9496445601945889, 0.9788445881951178, 0.961099792510593, 0.9189005108317134, 0.9637373374745032, 0.953091106075308, 0.9395445657655382, 0.3304161178670143, 0.3304363806523253, 0.2534170967465471, 0.26932467749858835, 0.2098203579173391, 0.296413936162117, 0.32662149099368476, 0.3188188848451302, 0.23508285382084748, 0.19902870110566329, 0.1898398357748765, 0.17508199349572717, 0.21348229580204348, 0.25207006157819045, 0.2597568389272672, 0.19008901028829184, 0.19919212394914143, 0.19500788015603399, 0.3652917636959775, 0.36730750624420805, 0.3903657237328625, 0.4017738603727532, 0.3753905022889743, 0.3839632899840303, 0.37425208258215015, 0.3995279588875611, 0.3928404689338737, 0.34313116897069007, 0.3577778969790012, 0.3802444375148186, 0.33901321877076396, 0.3508062609757956, 0.3571690554682534, 0.35222215618676733, 0.3425317594867707, 0.3472839339488083, 0.2450070094199679, 0.17314283037413225, 0.029141193192837256, 0.22946733117206997, 0.23699427383447103, 0.2200394004260956, 0.024097386741613214, 0.027134570773022615, 0.026780381493548, 0.23827133804681178, 0.24824395985822123, 0.25042505439438245, 0.06432594611141262, 0.27127291298735035, 0.23496101816997983, 0.30720920482944947, 0.2877846374364431, 0.2656620294355161, 0.17574487776934034, 0.0862975286415778, 0.0828858277386284, 0.22815067005607748, 0.08373495371989281, 0.10894644540546816, 0.1435724912358033, 0.0809268885463611, 0.07579932399405132, 0.13939209873365965, 0.054139163465477536, 0.09199590457335438, 0.18185541742762312, 0.10483757201469979, 0.15265263433681375, 0.16175404114703085, 0.15868256221303034, 0.14833850301575335, 0.5234707949358328, 0.574374343136925, 0.5395287998493161, 0.5349372813475289, 0.5659407971949808, 0.5831387851289598, 0.5654433781327102, 0.5468967117600801, 0.5433825545576827, 0.10493443907455002, 0.11217443258367243, 0.10001547304157288, 0.09387850980665158, 0.09903853069253743, 0.11778627275682885, 0.09676336462891122, 0.09967303239783742, 0.09067873664628934, 0.15711166474607818, 0.16695592795686187, 0.17087443318847417, 0.18430797378559682, 0.16070267274362482, 0.1585795351546374, 0.1729719255328086, 0.1808907726846526, 0.1720202055891541, 0.24060051689549744, 0.2719132561374925, 0.2611976729084756, 0.21686616249590362, 0.202224065906755, 0.22553364300864087, 0.2746028423510617, 0.24298740318454315, 0.2256221867689282, 0.17801845857366716, 0.20700938410885905, 0.20037459219693587, 0.16504718311794664, 0.16201613943598425, 0.18696497867649686, 0.20760917406091317, 0.20296741228821402, 0.1739359147445675, 0.2303818255922242, 0.18065773167167865, 0.21283412794373158, 0.20017967901803235, 0.21590362462280044, 0.2611585503011945, 0.20522006042896312, 0.1930061859157327, 0.2175500655426995, 0.4035904357702873, 0.41275555649488105, 0.21769902121776263, 0.4185860289909029, 0.4317119657607926, 0.22870946575732198, 0.41133134679329453, 0.40787599742261316, 0.4199913432701946, 0.17566466245291779, 0.5036211264535236, 0.5300181882029587, 0.5206524293406921, 0.48493066578911936, 0.49762411106229165, 0.48826117911299804, 0.5062509235204042, 0.46436101186821, 0.42215246732445144, 0.42576267922283184, 0.4131906438780777, 0.17920788302929436, 0.1780703701826063, 0.4493423541471725, 0.4387947974120474, 0.3816330244434073, 0.4431664180129935, 0.203640808307456, 0.18608762987803718, 0.18362930246233067, 0.2144953494458045, 0.21006109814830065, 0.2488652023032647, 0.20124953321372807, 0.21910552454797816, 0.21456596341538703, 0.08018421768572648, 0.08300491937340082, 0.07849194356787992, 0.08618379289250411, 0.08379260967131852, 0.07837494482706697, 0.07824472770427349, 0.07919201790889818, 0.08034761922405109]}, "mutation_prompt": null}
{"id": "67bf5002-dfb4-4f51-8e32-6241c877498d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.7)\n        self.num_nm = budget - self.num_de\n\n    def chaotic_map(self, iteration):\n        return 0.7 * (1 - (iteration / self.num_de)) + 0.3 * np.sin(iteration)\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim\n        F = 0.5  # Initial Differential weight\n        CR = 0.7  # Initial Crossover probability\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        iteration = 0\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                F = self.chaotic_map(iteration)  # Use chaotic map for F\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    CR = max(0.1, CR - delta_CR)  # Decrease CR for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n            iteration += 1\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Sequential Quadratic Programming for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='SLSQP', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm})\n            evaluations += result.nfev\n            if result.success and result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimization", "description": "An enhanced hybrid metaheuristic combining chaotic maps for adaptive parameter tuning in differential evolution and a sequential quadratic programming for fine-tuned local search.", "configspace": "", "generation": 4, "fitness": 0.3142744730828576, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.20.", "error": "", "parent_id": "c923e9b6-8299-4f5e-b8fe-dac10a2a880d", "metadata": {"aucs": [0.7267626504618241, 0.7423397879249571, 0.7472684616084113, 0.7401580740008611, 0.7422481408242563, 0.7423029265377241, 0.7574952633810905, 0.7241317245637122, 0.7284394497302342, 0.44670336861777926, 0.4646732459442531, 0.49471969991015896, 0.49619551272111795, 0.48479353360831867, 0.4498475468283264, 0.48588963070554614, 0.5084572346383205, 0.49265489224333336, 0.44665991404771443, 0.4245922038999299, 0.3577916401134307, 0.4397405860012993, 0.41487654997109213, 0.4320589821489581, 0.46554343715050694, 0.42338114067441934, 0.44758075012227894, 0.36156616129066776, 0.36434497245114494, 0.4010888193783635, 0.33220024542013427, 0.3219671610563134, 0.40686594087612815, 0.3579537460880411, 0.3377959838288891, 0.3310373187169081, 0.9495353689823396, 0.956735714564701, 0.9351565200239111, 0.9473419276563393, 0.9560201089048568, 0.9632209848107771, 0.9535103969762432, 0.966720400610651, 0.9628584525941694, 0.29483110271564383, 0.2955351039542151, 0.27493147288656195, 0.29276502800452897, 0.22662531618892645, 0.28612098747820325, 0.254256693567681, 0.28958175425655786, 0.31550822996185157, 0.15244550082859465, 0.1626434295463579, 0.16798361775014714, 0.19591070540159983, 0.24138609999653748, 0.21722292217054096, 0.17115866218161735, 0.1666214364897809, 0.18065451403563093, 0.3610112863832985, 0.3508256264403178, 0.36729469843771234, 0.3303759575912466, 0.3574944061971791, 0.3366041117340305, 0.33858449536697677, 0.39936936245488974, 0.3613826078642076, 0.31152678511166365, 0.36206281553533437, 0.3421665013601354, 0.3598663626583468, 0.33674065758521243, 0.33540958096408136, 0.3507362789745735, 0.2986376626666817, 0.34616389277484205, 0.19156400598101508, 0.20804005614663923, 0.2184398612166113, 0.21482243406992496, 0.22970610201368924, 0.20728397391279674, 0.19820438378634297, 0.22596862292934872, 0.20885219275761968, 0.22714921115936204, 0.23556247093753357, 0.23087150953344748, 0.2147966748418937, 0.30408900998258137, 0.2232405110860819, 0.2354282547849561, 0.23837442511356577, 0.27588086252943966, 0.1886542296314624, 0.20402250632158025, 0.21164716100239167, 0.21353376824595338, 0.2053129678090162, 0.20469261324946952, 0.19652186867951382, 0.19967302303860246, 0.1786394512671584, 0.17027777704114955, 0.1671009255264333, 0.1802828344685964, 0.18995238948500426, 0.19102607572047514, 0.1906232481752842, 0.22005715065815756, 0.20228486124208434, 0.20041782269542563, 0.4908805149156821, 0.4654513931179729, 0.48929829634563815, 0.4730822472387386, 0.47320000237679616, 0.48807840189249085, 0.49366800364376706, 0.4980316894805804, 0.4762976561503418, 0.1088387557727627, 0.10745167957784285, 0.10480105453042687, 0.10146049386841371, 0.08897582233106183, 0.08791904282741647, 0.09654949580890859, 0.10169199661215611, 0.08814724577772759, 0.15349170132739998, 0.16429320964720828, 0.18077929531258818, 0.1969945192632524, 0.16294705950386756, 0.12987191941527565, 0.1525436836271178, 0.15558701091723237, 0.14652977058852246, 0.21185826906021843, 0.21519991937549166, 0.2176511426146286, 0.23308242158653758, 0.2068525143345511, 0.21642413597652155, 0.24149683776147146, 0.22584838132261853, 0.22035774283644483, 0.16081696832531944, 0.17586431946930803, 0.17046660545529813, 0.16331420400826113, 0.15773800707455543, 0.1754398806345402, 0.18387962655601886, 0.17112854357286778, 0.13690486872745244, 0.20878418830621726, 0.19207215151906454, 0.23006059033786752, 0.2261902921217963, 0.19533904260712875, 0.21750622408668407, 0.20201541340608442, 0.2165931244228656, 0.19989747311347672, 0.4395633882657235, 0.4182062652673316, 0.20388134891646081, 0.4448230499303346, 0.21583812571470895, 0.21759899619755851, 0.2149818626606248, 0.4062256023367474, 0.4277722668994971, 0.36853333127181154, 0.3398099775349075, 0.18122979694906205, 0.3928073096231314, 0.38147155587383774, 0.36243401831722244, 0.41582876477849506, 0.360377166048517, 0.34137038426778865, 0.3332066627235939, 0.3590194344234533, 0.3588619238974402, 0.1793511505663784, 0.18186762992580718, 0.17169261594904017, 0.1910371668750941, 0.35941012585327625, 0.35256741068026254, 0.18434402738599953, 0.21859290333977144, 0.19589827586488018, 0.20406873223136823, 0.21089965879451922, 0.19916931831922602, 0.20376678969737438, 0.1949044892507683, 0.20741238943916762, 0.09403635624843287, 0.07614583087230731, 0.06640216011131483, 0.09172836100199766, 0.07647770733472303, 0.08231245362050554, 0.07376317087374229, 0.0922302121115488, 0.07306369000027191]}, "mutation_prompt": null}
{"id": "315ee08c-dcb0-446e-9dd2-ee92dde01912", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.75)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim\n        F = 0.5  # Initial Differential weight\n        CR = 0.7  # Initial Crossover probability\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.1, F - delta_F)  # Decrease F for unsuccessful trials\n                    CR = max(0.1, CR - delta_CR)  # Decrease CR for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimization", "description": "A hybrid metaheuristic using adaptive differential evolution for exploration, enhanced by a dynamic mutation strategy, and local search based on Nelder-Mead for exploitation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c923e9b6-8299-4f5e-b8fe-dac10a2a880d", "metadata": {"aucs": [0.8082469639997758, 0.8109070242606385, 0.8185794399993072, 0.8107119519877679, 0.8164278455034998, 0.8145880839293616, 0.8199510653997198, 0.8168502689076519, 0.8162859700053438, 0.6348031913596096, 0.6688096919428226, 0.6486235216957115, 0.6764319659341547, 0.6433756805714023, 0.6687801630622203, 0.6557381709171596, 0.6584757313598015, 0.6803534394468174, 0.6053524920313857, 0.596229665280609, 0.6564342345803906, 0.6477816112363513, 0.6251493211356511, 0.6702370062486134, 0.6298807586330057, 0.6535566996330406, 0.6486213410388277, 0.6036444220478019, 0.550868393310223, 0.1713536940885393, 0.545842668663976, 0.5916829849884725, 0.6215712755283598, 0.5329627686271172, 0.6001153850920953, 0.5762851935142348, 0.9710769799853327, 0.967496897555768, 0.9552865372934682, 0.9422749870108632, 0.9540935952968729, 0.9501481592398016, 0.9356577015611739, 0.9744893368097961, 0.9506534080971593, 0.19639695338068608, 0.16925958447202794, 0.16586681712725326, 0.23503757826103988, 0.17000206431281217, 0.1527311425770158, 0.2104341452009545, 0.23296700217918365, 0.2438957435558824, 0.21152307879689602, 0.200634191814823, 0.16508338106935194, 0.22575044709667902, 0.2313207704901552, 0.25405766548476993, 0.23050449726084354, 0.2464653088742177, 0.20062693244493535, 0.34655696186397333, 0.3497363053277952, 0.34717050294552065, 0.36391443267468304, 0.3713624890294527, 0.3483885067447908, 0.3688207524036313, 0.36108326154728343, 0.36772218925796507, 0.3251528124336315, 0.33165737356948444, 0.3125762101119942, 0.32824205573178566, 0.33973688844169525, 0.32006712958161077, 0.3181362426164326, 0.29328784344386793, 0.29550274821910427, 0.09810622050466644, 0.1820110326573391, 0.017618227912237105, 7.454993743249982e-05, 0.014736432487980733, 0.005420170002156333, 0.18572596489468873, 0.14635752755823228, 0.17862407830198046, 0.18444626723980484, 0.23171426069218282, 0.11111276749111221, 0.10614792697784237, 0.05686188180635421, 0.08359717937280509, 0.20425513960861497, 0.17792620287005634, 0.1622568757286419, 0.1454423881713326, 0.07590484525681584, 0.03638043718409678, 0.159885467261492, 0.22209362363737484, 0.024186710224612384, 0.11521208632677604, 0.02906489446247873, 0.08876480685141519, 0.13064018584044157, 0.09296660885804808, 0.1161949011316199, 0.13600063700069553, 0.08472493367717981, 0.14116230971701693, 0.10076661808507215, 0.07441909141910596, 0.09301478881146119, 0.5485546738045988, 0.5638907216304676, 0.5815763379675944, 0.5386220604491057, 0.545022105448677, 0.49742480807415146, 0.5384073427380403, 0.527990009339204, 0.5542182471428316, 0.11274366680042147, 0.11338599232778457, 0.10939164355220632, 0.11691838083291839, 0.10125759624345698, 0.12052132182229469, 0.09852811774484871, 0.10559416349192174, 0.10888319257965173, 0.17607634032194586, 0.21310359702964432, 0.17192928817475261, 0.17448659171719993, 0.20826326954834729, 0.1924494080865531, 0.16973127474135197, 0.16035940939197713, 0.15595793790907775, 0.19729079783351366, 0.22733370186372626, 0.23561693281127494, 0.25784928655346373, 0.24135288608308947, 0.27677439503468004, 0.2664341077215069, 0.2893278382847664, 0.27892034025992685, 0.20421470962576327, 0.20959206922130225, 0.18858767295077927, 0.17627099198089258, 0.1736804815411328, 0.19927616296532524, 0.20224451853130565, 0.18274750801296358, 0.1553041669183749, 0.23071598790965253, 0.20224094950061422, 0.18311027912026367, 0.2417510832650107, 0.20130648133655404, 0.25107953452715237, 0.20525202723453895, 0.23164705195688018, 0.2539601339227451, 0.22675983668139132, 0.22950619270285189, 0.3793726474248217, 0.42378753640707, 0.4240682311939753, 0.38854273967706443, 0.39656078230754577, 0.21870904926601198, 0.37530360248547334, 0.45671785521368025, 0.3929859251341966, 0.4341745707300241, 0.4117619743539148, 0.18286067554176788, 0.5050301080293558, 0.46032461078279197, 0.1743147047596929, 0.42383438860297484, 0.3878899005284582, 0.4611667208407386, 0.3438401386730473, 0.18730794063211875, 0.19526916354249313, 0.3915379435161104, 0.36488757386754944, 0.4159559351399522, 0.39730199411677447, 0.19379744255864706, 0.20339376549220178, 0.22434113887241214, 0.18176909383597317, 0.20230927768526463, 0.19222214111725244, 0.20563336307393287, 0.19257128199667872, 0.20816204684263162, 0.08391882883931956, 0.08621907866290601, 0.09328354467782485, 0.07683347971537113, 0.09228124505994761, 0.09703840511449469, 0.08454040812718044, 0.08052094856675762, 0.08301157372220391]}, "mutation_prompt": null}
{"id": "71cb8600-3d24-45de-aa47-0b83013b9cfc", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.7)  # Slightly reduced DE budget\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 12 * self.dim  # Slightly increased population size\n        F = 0.6  # Adjusted initial Differential weight\n        CR = 0.8  # Adjusted initial Crossover probability\n        delta_F = 0.04  # Adaptation step for F\n        delta_CR = 0.02  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.2, F - delta_F)  # Decrease F for unsuccessful trials\n                    CR = max(0.2, CR - delta_CR)  # Decrease CR for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "An enhanced hybrid metaheuristic integrating adaptive differential evolution with adaptive parameter control and improved Nelder-Mead exploitation.", "configspace": "", "generation": 6, "fitness": 0.3335788124602016, "feedback": "The algorithm HybridOptimizationEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.22.", "error": "", "parent_id": "c923e9b6-8299-4f5e-b8fe-dac10a2a880d", "metadata": {"aucs": [0.7625851024532337, 0.7614925590835508, 0.7752991363707431, 0.7779108352790552, 0.7673729440505411, 0.7749958743046208, 0.784596716188084, 0.7705739369057677, 0.7788499538636874, 0.5724955110151766, 0.6021940465355702, 0.572472746285726, 0.6011596468482514, 0.6024231059139318, 0.5836663566086987, 0.5933157244846718, 0.5675248525667964, 0.5863341016003798, 0.47853300586732184, 0.44085803246238053, 0.5288081380676011, 0.4067662332609613, 0.4056108820993085, 0.45518906203542864, 0.41937963675793877, 0.5264297280485732, 0.4205434124666786, 0.16744944178569388, 0.41966506773684065, 0.39230677277803205, 0.40363659211888203, 0.3835411868888333, 0.4066464061515668, 0.3847696611387591, 0.34839926732509807, 0.3756404714456074, 0.938154709928764, 0.9404999275433558, 0.9609939511828045, 0.9645662680488941, 0.9517595906170099, 0.9245745943457451, 0.9448385483369482, 0.9779064964120092, 0.9425949281956142, 0.31509616593252876, 0.2836884320948685, 0.32851025771882536, 0.30104816824041214, 0.20144716216789815, 0.301353802042023, 0.34892181385523346, 0.34818967464131023, 0.32958400244865294, 0.19142192227390165, 0.2046573305432169, 0.22107388444592624, 0.24210835109787665, 0.23514760809516333, 0.26047866991977386, 0.2678657453703436, 0.2526537286396848, 0.288000928915475, 0.3762872171087115, 0.3645251150328157, 0.3732236165784486, 0.3806807549282616, 0.35776319070576323, 0.3577150724415409, 0.38503272164174307, 0.4208761526684437, 0.3585265854403953, 0.35764851654692287, 0.34724006932180296, 0.34954562455630267, 0.375719266991451, 0.34779492445389226, 0.35782329419198244, 0.36188204863813467, 0.3369988549455255, 0.33139021504316135, 0.1802603334496471, 0.25091717377471134, 0.24368476848534082, 0.017379377435249643, 0.22107506247825925, 0.04940941156151801, 0.02575709439570495, 0.23866975641269417, 0.21228798696972273, 0.24781361711274486, 0.2495683773214311, 0.29832235257499495, 0.26773243872993, 0.2623565276566422, 0.2718261785962437, 0.27914020722084276, 0.3196992829376769, 0.22832533261475185, 0.06453443336422837, 0.044775125780568525, 0.08650724057577952, 0.05219094405781455, 0.026690872495797158, 0.13947017053680888, 0.1092584473921655, 0.08871760844538545, 0.1527485797160396, 0.12906967001302638, 0.06975920389622403, 0.12330616922203463, 0.205348222334218, 0.10902877556778912, 0.13905184365225942, 0.18348080484070828, 0.11350281544850149, 0.10440877287111539, 0.563195373445617, 0.5595718877885674, 0.56102802793749, 0.5397059660112893, 0.5447686432493439, 0.5603834436257489, 0.5480222878265555, 0.5552474449202616, 0.5665845601411492, 0.10511202647150164, 0.12915701754075892, 0.1038866902470541, 0.13342970004469712, 0.09408337323671512, 0.11323366460715856, 0.11360903813761503, 0.10663601722221006, 0.11227154165462794, 0.1526482435975366, 0.19174419895873007, 0.1586005763585152, 0.16846587680701008, 0.1552060977755575, 0.18647699000237639, 0.20721150753802275, 0.13997244815380672, 0.22267429528028604, 0.3214870641059594, 0.24004957455357723, 0.30608795849468506, 0.23735208431711075, 0.22671959169546274, 0.27253450555433645, 0.30078480079187864, 0.2988469417063139, 0.2546809680929316, 0.16603318731117267, 0.1999557758454208, 0.17310043812128717, 0.15492845977886605, 0.15371293999545144, 0.2201629783657777, 0.18526551995447704, 0.22382400145939496, 0.16521972403434015, 0.22257711774860656, 0.21006051821389105, 0.20739278585193366, 0.21797569723732257, 0.19931819792750816, 0.23331814378950588, 0.24681553889294716, 0.22165024623722307, 0.2564669096849036, 0.40564375523812646, 0.3978014213186596, 0.41331236587146436, 0.4310686838607436, 0.22011074192194224, 0.4145168259231936, 0.4164127721036921, 0.403085572813223, 0.436498840781099, 0.1754198306846685, 0.4246902906744532, 0.4601162496421667, 0.5414223956992361, 0.48734104378983467, 0.42998053642640854, 0.470001996984034, 0.4225257744052825, 0.4647676579225527, 0.446943122603196, 0.42713525553537635, 0.1916126682275766, 0.18958503386747538, 0.4195717116563066, 0.19049615319532254, 0.4504079041920458, 0.48732754279384316, 0.17031137281856668, 0.1900706933761641, 0.1800227037099852, 0.1987244170670428, 0.20979295110125917, 0.21853046698879208, 0.19360925367712256, 0.1867793228088407, 0.185807389437317, 0.18967993545423012, 0.08099559714695137, 0.08035816800121831, 0.09406533058949063, 0.0934766424373138, 0.09532645600827705, 0.07295105568164251, 0.07608249177058657, 0.09589909712381617, 0.10017435670840424]}, "mutation_prompt": null}
{"id": "54223759-61bb-4794-89b9-7de07b38293a", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)  # Slightly reduced DE budget for increased NM\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim  # Slightly reduced population size\n        F = 0.6  # Differential weight\n        CR = 0.9  # Adjusted initial Crossover probability\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.3, F - delta_F)  # Smoothed decrease for unsuccessful trials\n                    CR = max(0.3, CR - delta_CR)  # Smoothed decrease for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "An enhanced hybrid metaheuristic integrating adaptive differential evolution with advanced Nelder-Mead exploitation and dynamic population size control.", "configspace": "", "generation": 7, "fitness": 0.3588747196943313, "feedback": "The algorithm HybridOptimizationEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.22.", "error": "", "parent_id": "71cb8600-3d24-45de-aa47-0b83013b9cfc", "metadata": {"aucs": [0.8072829092640096, 0.7901897785967573, 0.7951695916869922, 0.7866035306560019, 0.8053502120460301, 0.8015023706650959, 0.8045887597573335, 0.7979726543369293, 0.790521088754224, 0.5988871590729319, 0.6395014364661051, 0.6372210800857138, 0.6235740102784918, 0.6174106686475234, 0.6303248906860701, 0.6249282122698487, 0.6293071645265973, 0.6321263786618763, 0.5272196361009921, 0.4378428884152561, 0.4638530366505472, 0.5184642303211124, 0.48368642614355783, 0.4305894425718063, 0.4916174292427742, 0.4574137786817337, 0.4897889534304616, 0.3778434882974322, 0.3934612317661963, 0.37042709257595574, 0.42801070343880543, 0.3794788606667495, 0.16013473011025725, 0.4007858673402773, 0.162432159665703, 0.16382245303040543, 0.9264654111711822, 0.9542619841670149, 0.956066346398736, 0.9553464485130797, 0.9484123248653991, 0.9430080128270528, 0.9598095521525553, 0.954234438681227, 0.9476423158675416, 0.3874677399070805, 0.386494992102027, 0.34696143049629125, 0.38169873081578554, 0.3382803979751918, 0.21782974906304664, 0.3954723377222401, 0.3946759139861884, 0.39140000177026446, 0.23973501579793377, 0.19965665358525497, 0.17727078503387605, 0.24477159310294394, 0.3443024889954799, 0.23285006684922915, 0.26249846802274024, 0.3016975512274841, 0.21855149132743013, 0.4257918484434149, 0.40338517336859725, 0.418041667325432, 0.4263865617758109, 0.4665549988450238, 0.432267093800373, 0.39199747950511876, 0.379561838211408, 0.45623848243324006, 0.4080382152203059, 0.4018382515695531, 0.3975122935722534, 0.42852264030923914, 0.40128989333517473, 0.4037643134090677, 0.3859887705591495, 0.39840644230291755, 0.3969692010079596, 0.29309449696446965, 0.2927074513416036, 0.268749402462768, 0.25380667816562796, 0.30082435100746074, 0.27358737459451454, 0.2938522331956819, 0.295421309973956, 0.28427884146430793, 0.29307298807617654, 0.31753978447205045, 0.31671170432942175, 0.31548859802572904, 0.2549690170741371, 0.32698636062929687, 0.3235668343978366, 0.3215250836924338, 0.27974879561187294, 0.2131860179569358, 0.21559556418149328, 0.07211049604283182, 0.041532115751900855, 0.039679431518684805, 0.22015409741720682, 0.09019780936257316, 0.09938468898453101, 0.19286230244786984, 0.11728962324109438, 0.12880629853350112, 0.09950482996915255, 0.13761959057380513, 0.12623190785386051, 0.1191882948698556, 0.24560056241178585, 0.1314115117788326, 0.10570667774003673, 0.5965866474047199, 0.5948089296814846, 0.6074286449878274, 0.6037968501403106, 0.5794906649735287, 0.5995370490813353, 0.6127458411991322, 0.5810470222734455, 0.6077803499721424, 0.34952380302652597, 0.13310892169526833, 0.1242994212143973, 0.09707180591746056, 0.11156015667931896, 0.13344677403777272, 0.09965854351019132, 0.11230004176849906, 0.12403837372719118, 0.15227830449808555, 0.17503673511627016, 0.17342893538801019, 0.15299508473783296, 0.16724911322149238, 0.15659662297462196, 0.1592584004226153, 0.16657111550317916, 0.20727765764247774, 0.29429216954474413, 0.2734913843464539, 0.2669059650292034, 0.26420736844849746, 0.23596970190844369, 0.256568630566656, 0.31750662328390034, 0.3224667599150267, 0.2903620770560542, 0.22614092847921874, 0.19887967084333735, 0.21707712680626112, 0.18324571387823718, 0.1611697772742846, 0.18694360919451358, 0.2502649533321831, 0.24302349127556866, 0.2082085532807123, 0.21095504187026892, 0.20063128401428054, 0.2364181921160775, 0.21697427971131056, 0.2099988597773743, 0.26633490928162207, 0.22265680514647124, 0.20679292124630722, 0.22191173939661013, 0.4526359101726908, 0.4296478685673185, 0.4355418989239511, 0.45432405767198547, 0.22160265944434265, 0.460560811196006, 0.44617838773098617, 0.48232373676891227, 0.4297826053990925, 0.508505254370363, 0.471623395582194, 0.18270445862433238, 0.5040029760650364, 0.45008633253526753, 0.5245867563171467, 0.4969917224626109, 0.47061247713133225, 0.514636779560774, 0.5062706807858046, 0.5269056500962532, 0.47672953331730206, 0.46683435293716147, 0.18742535455183662, 0.1874151806975578, 0.19259556537712208, 0.45996599368131197, 0.1921569078782357, 0.20630815372448275, 0.222155821608365, 0.21576384827361295, 0.1936016622566512, 0.2228915399147512, 0.19161320281056793, 0.24214770686900566, 0.23269558070824659, 0.23511963674947245, 0.09923390617374261, 0.09046646039734829, 0.09184063056652192, 0.08983177925190755, 0.08023328368408833, 0.08130279201871093, 0.07204900338891818, 0.08950980837703593, 0.07846214309427957]}, "mutation_prompt": null}
{"id": "2d3abb56-bf72-40d0-9ce1-a1f395994a60", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)  # Slightly reduced DE budget for increased NM\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim  # Slightly reduced population size\n        F = 0.6  # Differential weight\n        CR = 0.9  # Adjusted initial Crossover probability\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.3, F - delta_F)  # Smoothed decrease for unsuccessful trials\n                    CR = max(0.3, CR - delta_CR)  # Smoothed decrease for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "An enhanced hybrid metaheuristic integrating adaptive differential evolution with advanced Nelder-Mead exploitation and dynamic population size control.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "54223759-61bb-4794-89b9-7de07b38293a", "metadata": {"aucs": [0.8072829092640096, 0.7901897785967573, 0.7951695916869922, 0.7866035306560019, 0.8053502120460301, 0.8015023706650959, 0.8045887597573335, 0.7979726543369293, 0.790521088754224, 0.5988871590729319, 0.6395014364661051, 0.6372210800857138, 0.6235740102784918, 0.6174106686475234, 0.6303248906860701, 0.6249282122698487, 0.6293071645265973, 0.6321263786618763, 0.5272196361009921, 0.4378428884152561, 0.4638530366505472, 0.5184642303211124, 0.48368642614355783, 0.4305894425718063, 0.4916174292427742, 0.4574137786817337, 0.4897889534304616, 0.3778434882974322, 0.3934612317661963, 0.37042709257595574, 0.42801070343880543, 0.3794788606667495, 0.16013473011025725, 0.4007858673402773, 0.162432159665703, 0.16382245303040543, 0.9264654111711822, 0.9542619841670149, 0.956066346398736, 0.9553464485130797, 0.9484123248653991, 0.9430080128270528, 0.9598095521525553, 0.954234438681227, 0.9476423158675416, 0.3874677399070805, 0.386494992102027, 0.34696143049629125, 0.38169873081578554, 0.3382803979751918, 0.21782974906304664, 0.3954723377222401, 0.3946759139861884, 0.39140000177026446, 0.23973501579793377, 0.19965665358525497, 0.17727078503387605, 0.24477159310294394, 0.3443024889954799, 0.23285006684922915, 0.26249846802274024, 0.3016975512274841, 0.21855149132743013, 0.4257918484434149, 0.40338517336859725, 0.418041667325432, 0.4263865617758109, 0.4665549988450238, 0.432267093800373, 0.39199747950511876, 0.379561838211408, 0.45623848243324006, 0.4080382152203059, 0.4018382515695531, 0.3975122935722534, 0.42852264030923914, 0.40128989333517473, 0.4037643134090677, 0.3859887705591495, 0.39840644230291755, 0.3969692010079596, 0.29309449696446965, 0.2927074513416036, 0.268749402462768, 0.25380667816562796, 0.30082435100746074, 0.27358737459451454, 0.2938522331956819, 0.295421309973956, 0.28427884146430793, 0.29307298807617654, 0.31753978447205045, 0.31671170432942175, 0.31548859802572904, 0.2549690170741371, 0.32698636062929687, 0.3235668343978366, 0.3215250836924338, 0.27974879561187294, 0.2131860179569358, 0.21559556418149328, 0.07211049604283182, 0.041532115751900855, 0.039679431518684805, 0.22015409741720682, 0.09019780936257316, 0.09938468898453101, 0.19286230244786984, 0.11728962324109438, 0.12880629853350112, 0.09950482996915255, 0.13761959057380513, 0.12623190785386051, 0.1191882948698556, 0.24560056241178585, 0.1314115117788326, 0.10570667774003673, 0.5965866474047199, 0.5948089296814846, 0.6074286449878274, 0.6037968501403106, 0.5794906649735287, 0.5995370490813353, 0.6127458411991322, 0.5810470222734455, 0.6077803499721424, 0.34952380302652597, 0.13310892169526833, 0.1242994212143973, 0.09707180591746056, 0.11156015667931896, 0.13344677403777272, 0.09965854351019132, 0.11230004176849906, 0.12403837372719118, 0.15227830449808555, 0.17503673511627016, 0.17342893538801019, 0.15299508473783296, 0.16724911322149238, 0.15659662297462196, 0.1592584004226153, 0.16657111550317916, 0.20727765764247774, 0.29429216954474413, 0.2734913843464539, 0.2669059650292034, 0.26420736844849746, 0.23596970190844369, 0.256568630566656, 0.31750662328390034, 0.3224667599150267, 0.2903620770560542, 0.22614092847921874, 0.19887967084333735, 0.21707712680626112, 0.18324571387823718, 0.1611697772742846, 0.18694360919451358, 0.2502649533321831, 0.24302349127556866, 0.2082085532807123, 0.21095504187026892, 0.20063128401428054, 0.2364181921160775, 0.21697427971131056, 0.2099988597773743, 0.26633490928162207, 0.22265680514647124, 0.20679292124630722, 0.22191173939661013, 0.4526359101726908, 0.4296478685673185, 0.4355418989239511, 0.45432405767198547, 0.22160265944434265, 0.460560811196006, 0.44617838773098617, 0.48232373676891227, 0.4297826053990925, 0.508505254370363, 0.471623395582194, 0.18270445862433238, 0.5040029760650364, 0.45008633253526753, 0.5245867563171467, 0.4969917224626109, 0.47061247713133225, 0.514636779560774, 0.5062706807858046, 0.5269056500962532, 0.47672953331730206, 0.46683435293716147, 0.18742535455183662, 0.1874151806975578, 0.19259556537712208, 0.45996599368131197, 0.1921569078782357, 0.20630815372448275, 0.222155821608365, 0.21576384827361295, 0.1936016622566512, 0.2228915399147512, 0.19161320281056793, 0.24214770686900566, 0.23269558070824659, 0.23511963674947245, 0.09923390617374261, 0.09046646039734829, 0.09184063056652192, 0.08983177925190755, 0.08023328368408833, 0.08130279201871093, 0.07204900338891818, 0.08950980837703593, 0.07846214309427957]}, "mutation_prompt": null}
{"id": "86754339-4730-4d24-b3d8-96f9b51f88d4", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.7)  # Slightly increased DE budget for exploration\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 12 * self.dim  # Increased population size for diversity\n        F = 0.5  # Differential weight\n        CR = 0.8  # Initial crossover probability\n        delta_F = 0.1  # Adaptation step for F\n        delta_CR = 0.05  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with adaptive mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.2, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.2, F - delta_F)  # Decrease F for unsuccessful trials\n                    CR = max(0.2, CR - delta_CR)  # Decrease CR for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Enhanced Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid algorithm combining adaptive differential evolution with enhanced Nelder-Mead and adaptive parameter control.", "configspace": "", "generation": 9, "fitness": 0.32706083486840043, "feedback": "The algorithm HybridOptimizationEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.21.", "error": "", "parent_id": "54223759-61bb-4794-89b9-7de07b38293a", "metadata": {"aucs": [0.7544180635199524, 0.745905216456153, 0.7425179335819458, 0.7271210714807298, 0.7413331410934016, 0.7546723967507394, 0.7438408742657546, 0.7541727067516741, 0.7380087596405867, 0.5432367513198313, 0.5344028220488516, 0.5592174554215718, 0.5608920401568342, 0.5461299146786088, 0.5564441377586764, 0.5269707275689229, 0.5370226563172036, 0.5466382526497396, 0.40964696548910506, 0.429778631622977, 0.41665011664951157, 0.4234620548361262, 0.397663506298675, 0.42795108622514144, 0.4502530355072727, 0.4501939516332951, 0.38597670534807227, 0.36246193052956954, 0.31614673065380794, 0.38156886615487107, 0.37554468587206424, 0.308436649710896, 0.373013362360997, 0.3892877915197692, 0.16094902741279016, 0.39436111549441066, 0.9811617743591603, 0.92881552071462, 0.9557417627586422, 0.9642531728649277, 0.8982851309030481, 0.9234414832446626, 0.9768724485208887, 0.9375604090135465, 0.9187642022796165, 0.3356711106185293, 0.31064264254113716, 0.33080981660916264, 0.29934453217256585, 0.31363148834428156, 0.2674909598040086, 0.3373632848326483, 0.33782037908974805, 0.34494770576668443, 0.19437838192767865, 0.215760867172468, 0.21403100380612072, 0.25646083439836964, 0.2324396026083244, 0.24199425837317756, 0.18638734127546974, 0.2659847995385932, 0.18734331730366116, 0.28202594878024023, 0.3574875127758227, 0.3858003942013839, 0.3779704453048114, 0.2816393059699056, 0.2964303439948395, 0.37983936761487547, 0.4067348835939343, 0.3763794012342734, 0.3497888157728549, 0.22500237532014078, 0.35073430007213524, 0.3557831929708881, 0.34429478240586897, 0.3564651558725974, 0.3548777771168017, 0.35171606325935156, 0.3643424367399579, 0.0288467762230048, 0.02224865709355983, 0.14628058017502665, 0.018690663310687694, 0.018329831488687387, 0.23391848350647593, 0.23687931905712967, 0.20678670557443324, 0.23559423656224732, 0.2871104236933103, 0.23767127335341742, 0.27770853565656994, 0.2289064113871887, 0.05524395171528873, 0.2736110134252481, 0.29417571046731095, 0.25610276222903083, 0.2754325327109356, 0.08339419640639933, 0.12052997092160278, 0.07648267348755866, 0.24177436451086964, 0.06584042545635926, 0.05147731535578881, 0.1651650471366487, 0.16608522706666085, 0.07396467817877861, 0.077464876000641, 0.08146683611121097, 0.09629382389869612, 0.17841960839810322, 0.18926143953500574, 0.11953750850616629, 0.1284405232623025, 0.08891690918524653, 0.212055090413388, 0.5530550620095775, 0.5662343129992605, 0.5617321039379082, 0.5561308387820569, 0.549381920107497, 0.5371729579186617, 0.5584583491379802, 0.49884900339880633, 0.5604006562353245, 0.12388732310542705, 0.11748270207622447, 0.092978154795338, 0.1516303286561853, 0.11916754237262306, 0.10789184858764289, 0.10552527534736056, 0.11145299744703407, 0.09647496889860374, 0.14818477314494471, 0.18426321834644865, 0.17471881130804523, 0.22325241793242834, 0.15355993936774104, 0.15248359283079482, 0.19462597191656505, 0.1823833312629668, 0.2060810114427304, 0.2272606718454423, 0.26876538931662686, 0.2792725862319365, 0.22072892465628213, 0.23868444182475723, 0.233875143284485, 0.273926420573002, 0.31293453712392616, 0.26976638233909145, 0.17262839731527124, 0.17946163243956526, 0.2080851095599645, 0.16683507399275355, 0.1415859648293324, 0.19765711021886634, 0.18667122929929236, 0.20508222805775467, 0.22554215990926052, 0.21158622266770166, 0.23265229671452237, 0.20337689410867366, 0.1924288034634245, 0.19933477828555202, 0.21572367709477702, 0.20076364748097397, 0.2136924696385354, 0.21256922068616035, 0.38893316332475414, 0.40276070222921767, 0.3982090341500213, 0.4410552121882181, 0.40366637703959063, 0.40070609334686036, 0.42201187322307543, 0.4270460717806108, 0.3949850440870417, 0.413155491923325, 0.44672208506397404, 0.4826840033263423, 0.5260578072472565, 0.4366693171572199, 0.43929535410272025, 0.4439543000246282, 0.40531576048456797, 0.4794264505988569, 0.5110268867031351, 0.19661864893986736, 0.42346530627216405, 0.18242162106020876, 0.4076918742833031, 0.18742980662196607, 0.43489480590887963, 0.471704210413076, 0.451686130008781, 0.19570995006472436, 0.19834123146480775, 0.19439512284358573, 0.19253097652653817, 0.1902083113398907, 0.22675330583308229, 0.1976628550283942, 0.21701995477521874, 0.2155188095894076, 0.08755991617806669, 0.07675373574596756, 0.07841620073677336, 0.09403422825783869, 0.08842133422783738, 0.07893922668996622, 0.07143926925137889, 0.0917515377911875, 0.08062985731212535]}, "mutation_prompt": null}
{"id": "b95be5ae-774b-412c-bd0f-bb8a656dfa6a", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)  # Slightly reduced DE budget for increased NM\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim  # Slightly reduced population size\n        F = 0.6  # Differential weight\n        CR = 0.9  # Adjusted initial Crossover probability\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.3, F - delta_F)  # Smoothed decrease for unsuccessful trials\n                    CR = max(0.3, CR - delta_CR)  # Smoothed decrease for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "An enhanced hybrid metaheuristic integrating adaptive differential evolution with advanced Nelder-Mead exploitation and dynamic population size control.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "54223759-61bb-4794-89b9-7de07b38293a", "metadata": {"aucs": [0.8072829092640096, 0.7901897785967573, 0.7951695916869922, 0.7866035306560019, 0.8053502120460301, 0.8015023706650959, 0.8045887597573335, 0.7979726543369293, 0.790521088754224, 0.5988871590729319, 0.6395014364661051, 0.6372210800857138, 0.6235740102784918, 0.6174106686475234, 0.6303248906860701, 0.6249282122698487, 0.6293071645265973, 0.6321263786618763, 0.5272196361009921, 0.4378428884152561, 0.4638530366505472, 0.5184642303211124, 0.48368642614355783, 0.4305894425718063, 0.4916174292427742, 0.4574137786817337, 0.4897889534304616, 0.3778434882974322, 0.3934612317661963, 0.37042709257595574, 0.42801070343880543, 0.3794788606667495, 0.16013473011025725, 0.4007858673402773, 0.162432159665703, 0.16382245303040543, 0.9264654111711822, 0.9542619841670149, 0.956066346398736, 0.9553464485130797, 0.9484123248653991, 0.9430080128270528, 0.9598095521525553, 0.954234438681227, 0.9476423158675416, 0.3874677399070805, 0.386494992102027, 0.34696143049629125, 0.38169873081578554, 0.3382803979751918, 0.21782974906304664, 0.3954723377222401, 0.3946759139861884, 0.39140000177026446, 0.23973501579793377, 0.19965665358525497, 0.17727078503387605, 0.24477159310294394, 0.3443024889954799, 0.23285006684922915, 0.26249846802274024, 0.3016975512274841, 0.21855149132743013, 0.4257918484434149, 0.40338517336859725, 0.418041667325432, 0.4263865617758109, 0.4665549988450238, 0.432267093800373, 0.39199747950511876, 0.379561838211408, 0.45623848243324006, 0.4080382152203059, 0.4018382515695531, 0.3975122935722534, 0.42852264030923914, 0.40128989333517473, 0.4037643134090677, 0.3859887705591495, 0.39840644230291755, 0.3969692010079596, 0.29309449696446965, 0.2927074513416036, 0.268749402462768, 0.25380667816562796, 0.30082435100746074, 0.27358737459451454, 0.2938522331956819, 0.295421309973956, 0.28427884146430793, 0.29307298807617654, 0.31753978447205045, 0.31671170432942175, 0.31548859802572904, 0.2549690170741371, 0.32698636062929687, 0.3235668343978366, 0.3215250836924338, 0.27974879561187294, 0.2131860179569358, 0.21559556418149328, 0.07211049604283182, 0.041532115751900855, 0.039679431518684805, 0.22015409741720682, 0.09019780936257316, 0.09938468898453101, 0.19286230244786984, 0.11728962324109438, 0.12880629853350112, 0.09950482996915255, 0.13761959057380513, 0.12623190785386051, 0.1191882948698556, 0.24560056241178585, 0.1314115117788326, 0.10570667774003673, 0.5965866474047199, 0.5948089296814846, 0.6074286449878274, 0.6037968501403106, 0.5794906649735287, 0.5995370490813353, 0.6127458411991322, 0.5810470222734455, 0.6077803499721424, 0.34952380302652597, 0.13310892169526833, 0.1242994212143973, 0.09707180591746056, 0.11156015667931896, 0.13344677403777272, 0.09965854351019132, 0.11230004176849906, 0.12403837372719118, 0.15227830449808555, 0.17503673511627016, 0.17342893538801019, 0.15299508473783296, 0.16724911322149238, 0.15659662297462196, 0.1592584004226153, 0.16657111550317916, 0.20727765764247774, 0.29429216954474413, 0.2734913843464539, 0.2669059650292034, 0.26420736844849746, 0.23596970190844369, 0.256568630566656, 0.31750662328390034, 0.3224667599150267, 0.2903620770560542, 0.22614092847921874, 0.19887967084333735, 0.21707712680626112, 0.18324571387823718, 0.1611697772742846, 0.18694360919451358, 0.2502649533321831, 0.24302349127556866, 0.2082085532807123, 0.21095504187026892, 0.20063128401428054, 0.2364181921160775, 0.21697427971131056, 0.2099988597773743, 0.26633490928162207, 0.22265680514647124, 0.20679292124630722, 0.22191173939661013, 0.4526359101726908, 0.4296478685673185, 0.4355418989239511, 0.45432405767198547, 0.22160265944434265, 0.460560811196006, 0.44617838773098617, 0.48232373676891227, 0.4297826053990925, 0.508505254370363, 0.471623395582194, 0.18270445862433238, 0.5040029760650364, 0.45008633253526753, 0.5245867563171467, 0.4969917224626109, 0.47061247713133225, 0.514636779560774, 0.5062706807858046, 0.5269056500962532, 0.47672953331730206, 0.46683435293716147, 0.18742535455183662, 0.1874151806975578, 0.19259556537712208, 0.45996599368131197, 0.1921569078782357, 0.20630815372448275, 0.222155821608365, 0.21576384827361295, 0.1936016622566512, 0.2228915399147512, 0.19161320281056793, 0.24214770686900566, 0.23269558070824659, 0.23511963674947245, 0.09923390617374261, 0.09046646039734829, 0.09184063056652192, 0.08983177925190755, 0.08023328368408833, 0.08130279201871093, 0.07204900338891818, 0.08950980837703593, 0.07846214309427957]}, "mutation_prompt": null}
{"id": "9fb5a2df-bde2-41ac-8a03-dcf94cf5b9af", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)  # Slightly reduced DE budget for increased NM\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim  # Slightly reduced population size\n        F = 0.6  # Differential weight\n        CR = 0.9  # Adjusted initial Crossover probability\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.3, F - delta_F)  # Smoothed decrease for unsuccessful trials\n                    CR = max(0.3, CR - delta_CR)  # Smoothed decrease for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "An enhanced hybrid metaheuristic integrating adaptive differential evolution with advanced Nelder-Mead exploitation and dynamic population size control.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "54223759-61bb-4794-89b9-7de07b38293a", "metadata": {"aucs": [0.8072829092640096, 0.7901897785967573, 0.7951695916869922, 0.7866035306560019, 0.8053502120460301, 0.8015023706650959, 0.8045887597573335, 0.7979726543369293, 0.790521088754224, 0.5988871590729319, 0.6395014364661051, 0.6372210800857138, 0.6235740102784918, 0.6174106686475234, 0.6303248906860701, 0.6249282122698487, 0.6293071645265973, 0.6321263786618763, 0.5272196361009921, 0.4378428884152561, 0.4638530366505472, 0.5184642303211124, 0.48368642614355783, 0.4305894425718063, 0.4916174292427742, 0.4574137786817337, 0.4897889534304616, 0.3778434882974322, 0.3934612317661963, 0.37042709257595574, 0.42801070343880543, 0.3794788606667495, 0.16013473011025725, 0.4007858673402773, 0.162432159665703, 0.16382245303040543, 0.9264654111711822, 0.9542619841670149, 0.956066346398736, 0.9553464485130797, 0.9484123248653991, 0.9430080128270528, 0.9598095521525553, 0.954234438681227, 0.9476423158675416, 0.3874677399070805, 0.386494992102027, 0.34696143049629125, 0.38169873081578554, 0.3382803979751918, 0.21782974906304664, 0.3954723377222401, 0.3946759139861884, 0.39140000177026446, 0.23973501579793377, 0.19965665358525497, 0.17727078503387605, 0.24477159310294394, 0.3443024889954799, 0.23285006684922915, 0.26249846802274024, 0.3016975512274841, 0.21855149132743013, 0.4257918484434149, 0.40338517336859725, 0.418041667325432, 0.4263865617758109, 0.4665549988450238, 0.432267093800373, 0.39199747950511876, 0.379561838211408, 0.45623848243324006, 0.4080382152203059, 0.4018382515695531, 0.3975122935722534, 0.42852264030923914, 0.40128989333517473, 0.4037643134090677, 0.3859887705591495, 0.39840644230291755, 0.3969692010079596, 0.29309449696446965, 0.2927074513416036, 0.268749402462768, 0.25380667816562796, 0.30082435100746074, 0.27358737459451454, 0.2938522331956819, 0.295421309973956, 0.28427884146430793, 0.29307298807617654, 0.31753978447205045, 0.31671170432942175, 0.31548859802572904, 0.2549690170741371, 0.32698636062929687, 0.3235668343978366, 0.3215250836924338, 0.27974879561187294, 0.2131860179569358, 0.21559556418149328, 0.07211049604283182, 0.041532115751900855, 0.039679431518684805, 0.22015409741720682, 0.09019780936257316, 0.09938468898453101, 0.19286230244786984, 0.11728962324109438, 0.12880629853350112, 0.09950482996915255, 0.13761959057380513, 0.12623190785386051, 0.1191882948698556, 0.24560056241178585, 0.1314115117788326, 0.10570667774003673, 0.5965866474047199, 0.5948089296814846, 0.6074286449878274, 0.6037968501403106, 0.5794906649735287, 0.5995370490813353, 0.6127458411991322, 0.5810470222734455, 0.6077803499721424, 0.34952380302652597, 0.13310892169526833, 0.1242994212143973, 0.09707180591746056, 0.11156015667931896, 0.13344677403777272, 0.09965854351019132, 0.11230004176849906, 0.12403837372719118, 0.15227830449808555, 0.17503673511627016, 0.17342893538801019, 0.15299508473783296, 0.16724911322149238, 0.15659662297462196, 0.1592584004226153, 0.16657111550317916, 0.20727765764247774, 0.29429216954474413, 0.2734913843464539, 0.2669059650292034, 0.26420736844849746, 0.23596970190844369, 0.256568630566656, 0.31750662328390034, 0.3224667599150267, 0.2903620770560542, 0.22614092847921874, 0.19887967084333735, 0.21707712680626112, 0.18324571387823718, 0.1611697772742846, 0.18694360919451358, 0.2502649533321831, 0.24302349127556866, 0.2082085532807123, 0.21095504187026892, 0.20063128401428054, 0.2364181921160775, 0.21697427971131056, 0.2099988597773743, 0.26633490928162207, 0.22265680514647124, 0.20679292124630722, 0.22191173939661013, 0.4526359101726908, 0.4296478685673185, 0.4355418989239511, 0.45432405767198547, 0.22160265944434265, 0.460560811196006, 0.44617838773098617, 0.48232373676891227, 0.4297826053990925, 0.508505254370363, 0.471623395582194, 0.18270445862433238, 0.5040029760650364, 0.45008633253526753, 0.5245867563171467, 0.4969917224626109, 0.47061247713133225, 0.514636779560774, 0.5062706807858046, 0.5269056500962532, 0.47672953331730206, 0.46683435293716147, 0.18742535455183662, 0.1874151806975578, 0.19259556537712208, 0.45996599368131197, 0.1921569078782357, 0.20630815372448275, 0.222155821608365, 0.21576384827361295, 0.1936016622566512, 0.2228915399147512, 0.19161320281056793, 0.24214770686900566, 0.23269558070824659, 0.23511963674947245, 0.09923390617374261, 0.09046646039734829, 0.09184063056652192, 0.08983177925190755, 0.08023328368408833, 0.08130279201871093, 0.07204900338891818, 0.08950980837703593, 0.07846214309427957]}, "mutation_prompt": null}
{"id": "dbb79e9c-b28c-4686-94ca-b21a18915567", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)  # Reduced DE budget\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 12 * self.dim  # Increased population size\n        F = 0.5  # Adjusted differential weight\n        CR = 0.8  # Initial Crossover probability\n        delta_F = 0.02  # Reduced adaptation step for F\n        delta_CR = 0.02  # Reduced adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)\n                    CR = min(1.0, CR + delta_CR)\n                else:\n                    F = max(0.4, F - delta_F)\n                    CR = max(0.5, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization with stochastic tunneling for exploitation\n        if evaluations < self.budget:\n            result = minimize(lambda x: func(x) * np.exp(0.1 * evaluations / self.budget),\n                              best_solution, method='Nelder-Mead', \n                              bounds=[(self.lower_bound, self.upper_bound)]*self.dim, \n                              options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedV2", "description": "A refined hybrid metaheuristic combining adaptive differential evolution with enhanced Nelder-Mead and stochastic tunneling for improved global exploration.", "configspace": "", "generation": 12, "fitness": 0.34849342152867824, "feedback": "The algorithm HybridOptimizationEnhancedV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.22.", "error": "", "parent_id": "54223759-61bb-4794-89b9-7de07b38293a", "metadata": {"aucs": [0.7739817491519547, 0.7587078983864953, 0.7527845033744901, 0.774041729513152, 0.7593922489895584, 0.7609135989929152, 0.7735699636654811, 0.7887369727152065, 0.7658765439416559, 0.5625035262630707, 0.5792578210272821, 0.5884212331302194, 0.5745971409052029, 0.5744040441780254, 0.5874564211805411, 0.5980520825637421, 0.6042592515702585, 0.5730078987250917, 0.1512053494982616, 0.4021361224656774, 0.3783688278258782, 0.38536171078562453, 0.147694137155707, 0.3713285066215011, 0.1542614386406609, 0.3549131523279372, 0.15068495805835114, 0.1325476689073446, 0.37058755980541336, 0.14756408527289244, 0.14425970118852405, 0.13128891449847158, 0.3658725112420188, 0.14754367257561385, 0.13748129149154298, 0.3585406110725968, 0.9538248326620757, 0.9263887688755071, 0.9370152848305842, 0.9568711722046602, 0.9307756551588824, 0.966394805262671, 0.9465754542267664, 0.9530949602820523, 0.949754371489012, 0.4429235902144597, 0.42230637154598993, 0.39051755083621154, 0.4487493975314645, 0.4629832062889917, 0.3955877943469158, 0.4357078048716684, 0.38367222338148244, 0.4298845150981929, 0.2850106287833154, 0.25038944399751184, 0.2608452905002714, 0.305665990516496, 0.2925185720401654, 0.2330450721412506, 0.29393790197768854, 0.294986215670787, 0.28237679453596154, 0.44457189858438595, 0.4445510814967656, 0.45655343610881327, 0.4552302664568507, 0.44402312830779234, 0.4390729819995597, 0.44733943956675404, 0.45885974242982785, 0.44343673129099503, 0.4350678611098757, 0.43414678712946375, 0.4403722519278519, 0.4156823015929414, 0.4353876549657657, 0.4589107476729556, 0.45064500557962606, 0.42302171596880467, 0.4344156679865736, 0.030707086756291746, 0.03072134051932296, 0.04001081504139581, 0.16738578403102078, 0.3288035765121228, 0.3395192726977406, 0.34803393216906786, 0.3235324072023452, 0.3341204963518961, 0.38717411569486826, 0.3840298368475792, 0.3789458373398187, 0.32615959360350266, 0.3658508985966492, 0.31657306549392983, 0.3800540101622206, 0.3788274630385625, 0.37007943220168027, 0.06508005919283766, 0.2603060686990373, 0.08002842754206763, 0.3512932100611088, 0.11294096205926285, 0.25445738956576924, 0.04554548727430596, 0.08416963071838035, 0.14464406908456717, 0.13422763929236248, 0.1499883351747392, 0.19349266006324328, 0.16368400585599485, 0.13746144957580686, 0.18087862990549175, 0.13695082650454826, 0.11255610693036211, 0.13705889928914838, 0.6235782996162351, 0.6138951876498395, 0.5725023224991437, 0.6213527868034432, 0.6042727102939766, 0.5917694717884894, 0.6280760671944448, 0.615652546733897, 0.6343952604954296, 0.0952512269946888, 0.09520016986091362, 0.12978343433885275, 0.14579200606044684, 0.1261177465474147, 0.12917222596407774, 0.1251666671507239, 0.1267517043313583, 0.09370800196377271, 0.21828483747122895, 0.15607588320046306, 0.15044362343989848, 0.15692468184811226, 0.18075394634521358, 0.19373625194008215, 0.1282355967131611, 0.13809362068503028, 0.1422584877758607, 0.3523091904038742, 0.3309535888648677, 0.31570422329409487, 0.32483095534979634, 0.29425160404889283, 0.3053469082430904, 0.32314943421134457, 0.37414881050731974, 0.3038918695403149, 0.21293123870541786, 0.24170525868162618, 0.2288567854152741, 0.1816764203096063, 0.1961137208974243, 0.22637869188236492, 0.22417054895373056, 0.2447285160051177, 0.24856936550684272, 0.20367114790204888, 0.19084551697454044, 0.279404759994344, 0.22394304646317764, 0.23573018784859745, 0.20275186463590122, 0.2179189281422672, 0.237323257222673, 0.21555721547623197, 0.21008700050103668, 0.20487896855878351, 0.22041847882959786, 0.47412634660762, 0.22897644584437415, 0.4678469808811282, 0.4669177378247641, 0.21431346758790004, 0.4727194349687659, 0.16528584563102633, 0.5091784893369653, 0.491331851712164, 0.6278687256172144, 0.18186400190108543, 0.5377059263055965, 0.4890588444435683, 0.5676341073572517, 0.49289205665925107, 0.5456790461489619, 0.48848232081083565, 0.15772075841936817, 0.4987270461860036, 0.17767886803167454, 0.18343484635925889, 0.18426107741295983, 0.5306841822504433, 0.5169814690920573, 0.21166273793457913, 0.21409247045451196, 0.1965280112102109, 0.21509722025031675, 0.21209582920233916, 0.2055227879084568, 0.18131045615865315, 0.21502006364538573, 0.2019608369352751, 0.10250150373889755, 0.08095671912807445, 0.08090197099309804, 0.08684462785256042, 0.09127040601363356, 0.09128883773701435, 0.0903510155806806, 0.08910546653350848, 0.07721590424662772]}, "mutation_prompt": null}
{"id": "308bbc81-48bb-4270-8397-c938e9580942", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)  # Slightly reduced DE budget for increased NM\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim  # Slightly reduced population size\n        F = 0.6  # Differential weight\n        CR = 0.9  # Adjusted initial Crossover probability\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.3, F - delta_F)  # Smoothed decrease for unsuccessful trials\n                    CR = max(0.3, CR - delta_CR)  # Smoothed decrease for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "An enhanced hybrid metaheuristic integrating adaptive differential evolution with advanced Nelder-Mead exploitation and dynamic population size control.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "54223759-61bb-4794-89b9-7de07b38293a", "metadata": {"aucs": [0.8072829092640096, 0.7901897785967573, 0.7951695916869922, 0.7866035306560019, 0.8053502120460301, 0.8015023706650959, 0.8045887597573335, 0.7979726543369293, 0.790521088754224, 0.5988871590729319, 0.6395014364661051, 0.6372210800857138, 0.6235740102784918, 0.6174106686475234, 0.6303248906860701, 0.6249282122698487, 0.6293071645265973, 0.6321263786618763, 0.5272196361009921, 0.4378428884152561, 0.4638530366505472, 0.5184642303211124, 0.48368642614355783, 0.4305894425718063, 0.4916174292427742, 0.4574137786817337, 0.4897889534304616, 0.3778434882974322, 0.3934612317661963, 0.37042709257595574, 0.42801070343880543, 0.3794788606667495, 0.16013473011025725, 0.4007858673402773, 0.162432159665703, 0.16382245303040543, 0.9264654111711822, 0.9542619841670149, 0.956066346398736, 0.9553464485130797, 0.9484123248653991, 0.9430080128270528, 0.9598095521525553, 0.954234438681227, 0.9476423158675416, 0.3874677399070805, 0.386494992102027, 0.34696143049629125, 0.38169873081578554, 0.3382803979751918, 0.21782974906304664, 0.3954723377222401, 0.3946759139861884, 0.39140000177026446, 0.23973501579793377, 0.19965665358525497, 0.17727078503387605, 0.24477159310294394, 0.3443024889954799, 0.23285006684922915, 0.26249846802274024, 0.3016975512274841, 0.21855149132743013, 0.4257918484434149, 0.40338517336859725, 0.418041667325432, 0.4263865617758109, 0.4665549988450238, 0.432267093800373, 0.39199747950511876, 0.379561838211408, 0.45623848243324006, 0.4080382152203059, 0.4018382515695531, 0.3975122935722534, 0.42852264030923914, 0.40128989333517473, 0.4037643134090677, 0.3859887705591495, 0.39840644230291755, 0.3969692010079596, 0.29309449696446965, 0.2927074513416036, 0.268749402462768, 0.25380667816562796, 0.30082435100746074, 0.27358737459451454, 0.2938522331956819, 0.295421309973956, 0.28427884146430793, 0.29307298807617654, 0.31753978447205045, 0.31671170432942175, 0.31548859802572904, 0.2549690170741371, 0.32698636062929687, 0.3235668343978366, 0.3215250836924338, 0.27974879561187294, 0.2131860179569358, 0.21559556418149328, 0.07211049604283182, 0.041532115751900855, 0.039679431518684805, 0.22015409741720682, 0.09019780936257316, 0.09938468898453101, 0.19286230244786984, 0.11728962324109438, 0.12880629853350112, 0.09950482996915255, 0.13761959057380513, 0.12623190785386051, 0.1191882948698556, 0.24560056241178585, 0.1314115117788326, 0.10570667774003673, 0.5965866474047199, 0.5948089296814846, 0.6074286449878274, 0.6037968501403106, 0.5794906649735287, 0.5995370490813353, 0.6127458411991322, 0.5810470222734455, 0.6077803499721424, 0.34952380302652597, 0.13310892169526833, 0.1242994212143973, 0.09707180591746056, 0.11156015667931896, 0.13344677403777272, 0.09965854351019132, 0.11230004176849906, 0.12403837372719118, 0.15227830449808555, 0.17503673511627016, 0.17342893538801019, 0.15299508473783296, 0.16724911322149238, 0.15659662297462196, 0.1592584004226153, 0.16657111550317916, 0.20727765764247774, 0.29429216954474413, 0.2734913843464539, 0.2669059650292034, 0.26420736844849746, 0.23596970190844369, 0.256568630566656, 0.31750662328390034, 0.3224667599150267, 0.2903620770560542, 0.22614092847921874, 0.19887967084333735, 0.21707712680626112, 0.18324571387823718, 0.1611697772742846, 0.18694360919451358, 0.2502649533321831, 0.24302349127556866, 0.2082085532807123, 0.21095504187026892, 0.20063128401428054, 0.2364181921160775, 0.21697427971131056, 0.2099988597773743, 0.26633490928162207, 0.22265680514647124, 0.20679292124630722, 0.22191173939661013, 0.4526359101726908, 0.4296478685673185, 0.4355418989239511, 0.45432405767198547, 0.22160265944434265, 0.460560811196006, 0.44617838773098617, 0.48232373676891227, 0.4297826053990925, 0.508505254370363, 0.471623395582194, 0.18270445862433238, 0.5040029760650364, 0.45008633253526753, 0.5245867563171467, 0.4969917224626109, 0.47061247713133225, 0.514636779560774, 0.5062706807858046, 0.5269056500962532, 0.47672953331730206, 0.46683435293716147, 0.18742535455183662, 0.1874151806975578, 0.19259556537712208, 0.45996599368131197, 0.1921569078782357, 0.20630815372448275, 0.222155821608365, 0.21576384827361295, 0.1936016622566512, 0.2228915399147512, 0.19161320281056793, 0.24214770686900566, 0.23269558070824659, 0.23511963674947245, 0.09923390617374261, 0.09046646039734829, 0.09184063056652192, 0.08983177925190755, 0.08023328368408833, 0.08130279201871093, 0.07204900338891818, 0.08950980837703593, 0.07846214309427957]}, "mutation_prompt": null}
{"id": "2c9a0f1c-db36-406a-b5a8-2890354edd99", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationAdvanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)  # Adjusted DE budget for increased NM\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 12 * self.dim  # Adjusted population size for exploration\n        F = 0.7  # Increased differential weight for exploration\n        CR = 0.85  # Adjusted Crossover probability\n        delta_F = 0.02  # Adaptation step for F\n        delta_CR = 0.01  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.4, F - delta_F)  # Stabilize F update for unsuccessful trials\n                    CR = max(0.4, CR - delta_CR)  # Stabilize CR update for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationAdvanced", "description": "An advanced hybrid metaheuristic combining adaptive differential evolution with enhanced Nelder-Mead exploitation and dynamic learning, improving adaptability and convergence robustness.", "configspace": "", "generation": 14, "fitness": 0.3539660882446847, "feedback": "The algorithm HybridOptimizationAdvanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.22.", "error": "", "parent_id": "54223759-61bb-4794-89b9-7de07b38293a", "metadata": {"aucs": [0.7588030418677902, 0.7523535902169819, 0.7572132031746175, 0.7657850201358559, 0.7764661225433651, 0.7417523592054229, 0.7548008400674953, 0.7720302882580016, 0.7548192148091815, 0.5499432940606273, 0.5718753581504187, 0.5594296040977322, 0.562206987875838, 0.5629026636413863, 0.5769501104111076, 0.5592674649522243, 0.5928767034038338, 0.5619719105074443, 0.3845392005476781, 0.40924685316064713, 0.389678903778266, 0.38441376834009244, 0.4038491752234369, 0.38907737433513234, 0.38751210922412194, 0.3972273865724515, 0.15805761789090156, 0.1487096755841052, 0.3655231459423005, 0.37210508890884386, 0.36241190022035563, 0.3830971400985784, 0.3675184490098814, 0.3488585319954093, 0.3933788047804635, 0.3733842738728115, 0.9153691959589383, 0.908817085478278, 0.9535362039669715, 0.9458243785050068, 0.9603670181930408, 0.9251455662872183, 0.9729910036353144, 0.9652699814065677, 0.931738665233171, 0.43973966154452615, 0.4052725515656176, 0.4355347038231314, 0.27355948755110904, 0.3921924038047948, 0.2565630896109389, 0.44127045828066547, 0.3983394533879777, 0.4044088104909741, 0.23589004219995824, 0.21783509946486046, 0.19985557685615463, 0.5237186041453112, 0.2711579978162576, 0.28442884378388955, 0.2979608399572108, 0.21546750060383435, 0.2856661060451563, 0.44635106399745916, 0.43099357543446837, 0.4411712144132923, 0.45283228688856236, 0.4416368969199691, 0.4521678978601219, 0.4357123730687189, 0.4439542016029313, 0.44839797939836135, 0.4362371813915582, 0.4109476024758183, 0.4366976335540439, 0.4307970120452074, 0.4398682687822364, 0.43424443407899016, 0.42890462896100334, 0.42123263438803205, 0.4275813242504205, 0.22005942295117276, 0.3426698919655812, 0.32882180675003825, 0.3440612050087941, 0.023548523101120766, 0.0, 0.3404096792781265, 0.3283742607072604, 0.004275801401489865, 0.3552349732851916, 0.34111789583403906, 0.3180276703443783, 0.3427981864542776, 0.07934475646238826, 0.33852662206947526, 0.39896252200815585, 0.3664011835316845, 0.043917902893162, 0.07706164735314491, 0.07902125178303487, 0.24172932101801736, 0.3362045306229554, 0.03859496650708427, 0.0944356553496567, 0.14222419395751973, 0.06349108581828133, 0.22511247536952395, 0.11022079446491084, 0.0930078360337655, 0.12874344768764567, 0.13641525873021343, 0.13685147150340815, 0.1437145624629207, 0.11112057925825758, 0.13105817081394433, 0.11439882416707203, 0.6132449806665721, 0.6301970036983857, 0.613115818169055, 0.6176090663224907, 0.5611669180710888, 0.6141124427832452, 0.6154902374587315, 0.6019781170938958, 0.6251807795128057, 0.11584242314450399, 0.10904595121023009, 0.1080373218286359, 0.1156431784715205, 0.11041978172642808, 0.12731044654350188, 0.09089762848325478, 0.11129785800292025, 0.10028399822154666, 0.19435511622534918, 0.15473993171000433, 0.14111883608165987, 0.16522490592437933, 0.19497963373698823, 0.15610869927849003, 0.15572576061241272, 0.23147110736435317, 0.1624367503005929, 0.29135499199061965, 0.30741968237375317, 0.2665326657842797, 0.2973927191870931, 0.28694457786153127, 0.26762244509854083, 0.30538309038230405, 0.2974703734812416, 0.27887540301888625, 0.24608129588160266, 0.22993822900604133, 0.23350349732565012, 0.1770725259504492, 0.15967511060291895, 0.22350741158174892, 0.18788711718932238, 0.2341851352573736, 0.2186720327581535, 0.21430594681652138, 0.20686398294774566, 0.20787907535222294, 0.2084689535083778, 0.20854291836806182, 0.1976823223090145, 0.28762447682052683, 0.23610662260671622, 0.2023306703408454, 0.46169179549205797, 0.2183738845599873, 0.20676111446038314, 0.4805346857123204, 0.2081110113715281, 0.47599797657125287, 0.4535919004188852, 0.48534559063673655, 0.4695881687967216, 0.1663960018756765, 0.17265037749992085, 0.5321479455020383, 0.5447344765108217, 0.5061492681998008, 0.5557461136667212, 0.5263731413530934, 0.5130846525371908, 0.5144024297645673, 0.47549640542530447, 0.4925618288186747, 0.191520019839721, 0.48888103077427914, 0.4868508163621428, 0.5005724647493981, 0.5101865768179099, 0.4979238816500994, 0.5323097186947694, 0.20041642497959966, 0.21605624489583364, 0.23499334021984797, 0.20548579230792874, 0.2272664438494758, 0.2093443561465569, 0.20570030657886496, 0.20134590893296378, 0.19825573573336364, 0.08628341146906426, 0.09462596761117636, 0.09218120862522916, 0.09192219710288596, 0.07985834679728399, 0.08619592095634399, 0.08689796313982512, 0.08378073859176405, 0.08407941548673192]}, "mutation_prompt": null}
{"id": "1df3cf8c-667a-420d-87e5-a0e897322ddb", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)  # Slightly reduced DE budget for increased NM\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim  # Slightly reduced population size\n        F = 0.6  # Differential weight\n        CR = 0.9  # Adjusted initial Crossover probability\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.3, F - delta_F)  # Smoothed decrease for unsuccessful trials\n                    CR = max(0.3, CR - delta_CR)  # Smoothed decrease for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "An enhanced hybrid metaheuristic integrating adaptive differential evolution with advanced Nelder-Mead exploitation and dynamic population size control.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "54223759-61bb-4794-89b9-7de07b38293a", "metadata": {"aucs": [0.8072829092640096, 0.7901897785967573, 0.7951695916869922, 0.7866035306560019, 0.8053502120460301, 0.8015023706650959, 0.8045887597573335, 0.7979726543369293, 0.790521088754224, 0.5988871590729319, 0.6395014364661051, 0.6372210800857138, 0.6235740102784918, 0.6174106686475234, 0.6303248906860701, 0.6249282122698487, 0.6293071645265973, 0.6321263786618763, 0.5272196361009921, 0.4378428884152561, 0.4638530366505472, 0.5184642303211124, 0.48368642614355783, 0.4305894425718063, 0.4916174292427742, 0.4574137786817337, 0.4897889534304616, 0.3778434882974322, 0.3934612317661963, 0.37042709257595574, 0.42801070343880543, 0.3794788606667495, 0.16013473011025725, 0.4007858673402773, 0.162432159665703, 0.16382245303040543, 0.9264654111711822, 0.9542619841670149, 0.956066346398736, 0.9553464485130797, 0.9484123248653991, 0.9430080128270528, 0.9598095521525553, 0.954234438681227, 0.9476423158675416, 0.3874677399070805, 0.386494992102027, 0.34696143049629125, 0.38169873081578554, 0.3382803979751918, 0.21782974906304664, 0.3954723377222401, 0.3946759139861884, 0.39140000177026446, 0.23973501579793377, 0.19965665358525497, 0.17727078503387605, 0.24477159310294394, 0.3443024889954799, 0.23285006684922915, 0.26249846802274024, 0.3016975512274841, 0.21855149132743013, 0.4257918484434149, 0.40338517336859725, 0.418041667325432, 0.4263865617758109, 0.4665549988450238, 0.432267093800373, 0.39199747950511876, 0.379561838211408, 0.45623848243324006, 0.4080382152203059, 0.4018382515695531, 0.3975122935722534, 0.42852264030923914, 0.40128989333517473, 0.4037643134090677, 0.3859887705591495, 0.39840644230291755, 0.3969692010079596, 0.29309449696446965, 0.2927074513416036, 0.268749402462768, 0.25380667816562796, 0.30082435100746074, 0.27358737459451454, 0.2938522331956819, 0.295421309973956, 0.28427884146430793, 0.29307298807617654, 0.31753978447205045, 0.31671170432942175, 0.31548859802572904, 0.2549690170741371, 0.32698636062929687, 0.3235668343978366, 0.3215250836924338, 0.27974879561187294, 0.2131860179569358, 0.21559556418149328, 0.07211049604283182, 0.041532115751900855, 0.039679431518684805, 0.22015409741720682, 0.09019780936257316, 0.09938468898453101, 0.19286230244786984, 0.11728962324109438, 0.12880629853350112, 0.09950482996915255, 0.13761959057380513, 0.12623190785386051, 0.1191882948698556, 0.24560056241178585, 0.1314115117788326, 0.10570667774003673, 0.5965866474047199, 0.5948089296814846, 0.6074286449878274, 0.6037968501403106, 0.5794906649735287, 0.5995370490813353, 0.6127458411991322, 0.5810470222734455, 0.6077803499721424, 0.34952380302652597, 0.13310892169526833, 0.1242994212143973, 0.09707180591746056, 0.11156015667931896, 0.13344677403777272, 0.09965854351019132, 0.11230004176849906, 0.12403837372719118, 0.15227830449808555, 0.17503673511627016, 0.17342893538801019, 0.15299508473783296, 0.16724911322149238, 0.15659662297462196, 0.1592584004226153, 0.16657111550317916, 0.20727765764247774, 0.29429216954474413, 0.2734913843464539, 0.2669059650292034, 0.26420736844849746, 0.23596970190844369, 0.256568630566656, 0.31750662328390034, 0.3224667599150267, 0.2903620770560542, 0.22614092847921874, 0.19887967084333735, 0.21707712680626112, 0.18324571387823718, 0.1611697772742846, 0.18694360919451358, 0.2502649533321831, 0.24302349127556866, 0.2082085532807123, 0.21095504187026892, 0.20063128401428054, 0.2364181921160775, 0.21697427971131056, 0.2099988597773743, 0.26633490928162207, 0.22265680514647124, 0.20679292124630722, 0.22191173939661013, 0.4526359101726908, 0.4296478685673185, 0.4355418989239511, 0.45432405767198547, 0.22160265944434265, 0.460560811196006, 0.44617838773098617, 0.48232373676891227, 0.4297826053990925, 0.508505254370363, 0.471623395582194, 0.18270445862433238, 0.5040029760650364, 0.45008633253526753, 0.5245867563171467, 0.4969917224626109, 0.47061247713133225, 0.514636779560774, 0.5062706807858046, 0.5269056500962532, 0.47672953331730206, 0.46683435293716147, 0.18742535455183662, 0.1874151806975578, 0.19259556537712208, 0.45996599368131197, 0.1921569078782357, 0.20630815372448275, 0.222155821608365, 0.21576384827361295, 0.1936016622566512, 0.2228915399147512, 0.19161320281056793, 0.24214770686900566, 0.23269558070824659, 0.23511963674947245, 0.09923390617374261, 0.09046646039734829, 0.09184063056652192, 0.08983177925190755, 0.08023328368408833, 0.08130279201871093, 0.07204900338891818, 0.08950980837703593, 0.07846214309427957]}, "mutation_prompt": null}
{"id": "b52eccd6-d53f-4d94-a051-645a0078f53d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)  # Slightly reduced DE budget for increased NM\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim  # Slightly reduced population size\n        F = 0.6  # Differential weight\n        CR = 0.9  # Adjusted initial Crossover probability\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.3, F - delta_F)  # Smoothed decrease for unsuccessful trials\n                    CR = max(0.3, CR - delta_CR)  # Smoothed decrease for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "An enhanced hybrid metaheuristic integrating adaptive differential evolution with advanced Nelder-Mead exploitation and dynamic population size control.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "54223759-61bb-4794-89b9-7de07b38293a", "metadata": {"aucs": [0.8072829092640096, 0.7901897785967573, 0.7951695916869922, 0.7866035306560019, 0.8053502120460301, 0.8015023706650959, 0.8045887597573335, 0.7979726543369293, 0.790521088754224, 0.5988871590729319, 0.6395014364661051, 0.6372210800857138, 0.6235740102784918, 0.6174106686475234, 0.6303248906860701, 0.6249282122698487, 0.6293071645265973, 0.6321263786618763, 0.5272196361009921, 0.4378428884152561, 0.4638530366505472, 0.5184642303211124, 0.48368642614355783, 0.4305894425718063, 0.4916174292427742, 0.4574137786817337, 0.4897889534304616, 0.3778434882974322, 0.3934612317661963, 0.37042709257595574, 0.42801070343880543, 0.3794788606667495, 0.16013473011025725, 0.4007858673402773, 0.162432159665703, 0.16382245303040543, 0.9264654111711822, 0.9542619841670149, 0.956066346398736, 0.9553464485130797, 0.9484123248653991, 0.9430080128270528, 0.9598095521525553, 0.954234438681227, 0.9476423158675416, 0.3874677399070805, 0.386494992102027, 0.34696143049629125, 0.38169873081578554, 0.3382803979751918, 0.21782974906304664, 0.3954723377222401, 0.3946759139861884, 0.39140000177026446, 0.23973501579793377, 0.19965665358525497, 0.17727078503387605, 0.24477159310294394, 0.3443024889954799, 0.23285006684922915, 0.26249846802274024, 0.3016975512274841, 0.21855149132743013, 0.4257918484434149, 0.40338517336859725, 0.418041667325432, 0.4263865617758109, 0.4665549988450238, 0.432267093800373, 0.39199747950511876, 0.379561838211408, 0.45623848243324006, 0.4080382152203059, 0.4018382515695531, 0.3975122935722534, 0.42852264030923914, 0.40128989333517473, 0.4037643134090677, 0.3859887705591495, 0.39840644230291755, 0.3969692010079596, 0.29309449696446965, 0.2927074513416036, 0.268749402462768, 0.25380667816562796, 0.30082435100746074, 0.27358737459451454, 0.2938522331956819, 0.295421309973956, 0.28427884146430793, 0.29307298807617654, 0.31753978447205045, 0.31671170432942175, 0.31548859802572904, 0.2549690170741371, 0.32698636062929687, 0.3235668343978366, 0.3215250836924338, 0.27974879561187294, 0.2131860179569358, 0.21559556418149328, 0.07211049604283182, 0.041532115751900855, 0.039679431518684805, 0.22015409741720682, 0.09019780936257316, 0.09938468898453101, 0.19286230244786984, 0.11728962324109438, 0.12880629853350112, 0.09950482996915255, 0.13761959057380513, 0.12623190785386051, 0.1191882948698556, 0.24560056241178585, 0.1314115117788326, 0.10570667774003673, 0.5965866474047199, 0.5948089296814846, 0.6074286449878274, 0.6037968501403106, 0.5794906649735287, 0.5995370490813353, 0.6127458411991322, 0.5810470222734455, 0.6077803499721424, 0.34952380302652597, 0.13310892169526833, 0.1242994212143973, 0.09707180591746056, 0.11156015667931896, 0.13344677403777272, 0.09965854351019132, 0.11230004176849906, 0.12403837372719118, 0.15227830449808555, 0.17503673511627016, 0.17342893538801019, 0.15299508473783296, 0.16724911322149238, 0.15659662297462196, 0.1592584004226153, 0.16657111550317916, 0.20727765764247774, 0.29429216954474413, 0.2734913843464539, 0.2669059650292034, 0.26420736844849746, 0.23596970190844369, 0.256568630566656, 0.31750662328390034, 0.3224667599150267, 0.2903620770560542, 0.22614092847921874, 0.19887967084333735, 0.21707712680626112, 0.18324571387823718, 0.1611697772742846, 0.18694360919451358, 0.2502649533321831, 0.24302349127556866, 0.2082085532807123, 0.21095504187026892, 0.20063128401428054, 0.2364181921160775, 0.21697427971131056, 0.2099988597773743, 0.26633490928162207, 0.22265680514647124, 0.20679292124630722, 0.22191173939661013, 0.4526359101726908, 0.4296478685673185, 0.4355418989239511, 0.45432405767198547, 0.22160265944434265, 0.460560811196006, 0.44617838773098617, 0.48232373676891227, 0.4297826053990925, 0.508505254370363, 0.471623395582194, 0.18270445862433238, 0.5040029760650364, 0.45008633253526753, 0.5245867563171467, 0.4969917224626109, 0.47061247713133225, 0.514636779560774, 0.5062706807858046, 0.5269056500962532, 0.47672953331730206, 0.46683435293716147, 0.18742535455183662, 0.1874151806975578, 0.19259556537712208, 0.45996599368131197, 0.1921569078782357, 0.20630815372448275, 0.222155821608365, 0.21576384827361295, 0.1936016622566512, 0.2228915399147512, 0.19161320281056793, 0.24214770686900566, 0.23269558070824659, 0.23511963674947245, 0.09923390617374261, 0.09046646039734829, 0.09184063056652192, 0.08983177925190755, 0.08023328368408833, 0.08130279201871093, 0.07204900338891818, 0.08950980837703593, 0.07846214309427957]}, "mutation_prompt": null}
{"id": "5247092b-c26a-4943-91d1-8c55afd931a6", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)  # Slightly reduced DE budget for increased NM\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim  # Slightly reduced population size\n        F = 0.6  # Differential weight\n        CR = 0.9  # Adjusted initial Crossover probability\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F)  # Increase F for successful trials\n                    CR = min(1.0, CR + delta_CR)  # Increase CR for successful trials\n                else:\n                    F = max(0.3, F - delta_F)  # Smoothed decrease for unsuccessful trials\n                    CR = max(0.3, CR - delta_CR)  # Smoothed decrease for unsuccessful trials\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead', bounds=[(self.lower_bound, self.upper_bound)]*self.dim, options={'maxiter': self.num_nm, 'adaptive': True})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "An enhanced hybrid metaheuristic integrating adaptive differential evolution with advanced Nelder-Mead exploitation and dynamic population size control.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "54223759-61bb-4794-89b9-7de07b38293a", "metadata": {"aucs": [0.8072829092640096, 0.7901897785967573, 0.7951695916869922, 0.7866035306560019, 0.8053502120460301, 0.8015023706650959, 0.8045887597573335, 0.7979726543369293, 0.790521088754224, 0.5988871590729319, 0.6395014364661051, 0.6372210800857138, 0.6235740102784918, 0.6174106686475234, 0.6303248906860701, 0.6249282122698487, 0.6293071645265973, 0.6321263786618763, 0.5272196361009921, 0.4378428884152561, 0.4638530366505472, 0.5184642303211124, 0.48368642614355783, 0.4305894425718063, 0.4916174292427742, 0.4574137786817337, 0.4897889534304616, 0.3778434882974322, 0.3934612317661963, 0.37042709257595574, 0.42801070343880543, 0.3794788606667495, 0.16013473011025725, 0.4007858673402773, 0.162432159665703, 0.16382245303040543, 0.9264654111711822, 0.9542619841670149, 0.956066346398736, 0.9553464485130797, 0.9484123248653991, 0.9430080128270528, 0.9598095521525553, 0.954234438681227, 0.9476423158675416, 0.3874677399070805, 0.386494992102027, 0.34696143049629125, 0.38169873081578554, 0.3382803979751918, 0.21782974906304664, 0.3954723377222401, 0.3946759139861884, 0.39140000177026446, 0.23973501579793377, 0.19965665358525497, 0.17727078503387605, 0.24477159310294394, 0.3443024889954799, 0.23285006684922915, 0.26249846802274024, 0.3016975512274841, 0.21855149132743013, 0.4257918484434149, 0.40338517336859725, 0.418041667325432, 0.4263865617758109, 0.4665549988450238, 0.432267093800373, 0.39199747950511876, 0.379561838211408, 0.45623848243324006, 0.4080382152203059, 0.4018382515695531, 0.3975122935722534, 0.42852264030923914, 0.40128989333517473, 0.4037643134090677, 0.3859887705591495, 0.39840644230291755, 0.3969692010079596, 0.29309449696446965, 0.2927074513416036, 0.268749402462768, 0.25380667816562796, 0.30082435100746074, 0.27358737459451454, 0.2938522331956819, 0.295421309973956, 0.28427884146430793, 0.29307298807617654, 0.31753978447205045, 0.31671170432942175, 0.31548859802572904, 0.2549690170741371, 0.32698636062929687, 0.3235668343978366, 0.3215250836924338, 0.27974879561187294, 0.2131860179569358, 0.21559556418149328, 0.07211049604283182, 0.041532115751900855, 0.039679431518684805, 0.22015409741720682, 0.09019780936257316, 0.09938468898453101, 0.19286230244786984, 0.11728962324109438, 0.12880629853350112, 0.09950482996915255, 0.13761959057380513, 0.12623190785386051, 0.1191882948698556, 0.24560056241178585, 0.1314115117788326, 0.10570667774003673, 0.5965866474047199, 0.5948089296814846, 0.6074286449878274, 0.6037968501403106, 0.5794906649735287, 0.5995370490813353, 0.6127458411991322, 0.5810470222734455, 0.6077803499721424, 0.34952380302652597, 0.13310892169526833, 0.1242994212143973, 0.09707180591746056, 0.11156015667931896, 0.13344677403777272, 0.09965854351019132, 0.11230004176849906, 0.12403837372719118, 0.15227830449808555, 0.17503673511627016, 0.17342893538801019, 0.15299508473783296, 0.16724911322149238, 0.15659662297462196, 0.1592584004226153, 0.16657111550317916, 0.20727765764247774, 0.29429216954474413, 0.2734913843464539, 0.2669059650292034, 0.26420736844849746, 0.23596970190844369, 0.256568630566656, 0.31750662328390034, 0.3224667599150267, 0.2903620770560542, 0.22614092847921874, 0.19887967084333735, 0.21707712680626112, 0.18324571387823718, 0.1611697772742846, 0.18694360919451358, 0.2502649533321831, 0.24302349127556866, 0.2082085532807123, 0.21095504187026892, 0.20063128401428054, 0.2364181921160775, 0.21697427971131056, 0.2099988597773743, 0.26633490928162207, 0.22265680514647124, 0.20679292124630722, 0.22191173939661013, 0.4526359101726908, 0.4296478685673185, 0.4355418989239511, 0.45432405767198547, 0.22160265944434265, 0.460560811196006, 0.44617838773098617, 0.48232373676891227, 0.4297826053990925, 0.508505254370363, 0.471623395582194, 0.18270445862433238, 0.5040029760650364, 0.45008633253526753, 0.5245867563171467, 0.4969917224626109, 0.47061247713133225, 0.514636779560774, 0.5062706807858046, 0.5269056500962532, 0.47672953331730206, 0.46683435293716147, 0.18742535455183662, 0.1874151806975578, 0.19259556537712208, 0.45996599368131197, 0.1921569078782357, 0.20630815372448275, 0.222155821608365, 0.21576384827361295, 0.1936016622566512, 0.2228915399147512, 0.19161320281056793, 0.24214770686900566, 0.23269558070824659, 0.23511963674947245, 0.09923390617374261, 0.09046646039734829, 0.09184063056652192, 0.08983177925190755, 0.08023328368408833, 0.08130279201871093, 0.07204900338891818, 0.08950980837703593, 0.07846214309427957]}, "mutation_prompt": null}
{"id": "c6d397fd-9536-4aa4-9816-00ee60a1f9c8", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)  # Further optimized DE budget allocation\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 12 * self.dim  # Increased population size for diversity\n        F = 0.7  # Enhanced differential weight\n        CR = 0.85  # Slightly reduced Crossover probability for diversity\n        delta_F = 0.04  # Adaptation step for F\n        delta_CR = 0.02  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.5)  # Reduced F increment for more stability\n                    CR = min(1.0, CR + delta_CR * 0.5)  # Reduced CR increment for more stability\n                else:\n                    F = max(0.2, F - delta_F)  # Allowing F to decrease further for more exploration\n                    CR = max(0.2, CR - delta_CR)  # Allowing CR to decrease further for more exploration\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-5, 'fatol': 1e-5})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A refined hybrid metaheuristic integrating adaptive differential evolution with improved Nelder-Mead exploitation, incorporating mutation diversity and convergence boosting strategies.", "configspace": "", "generation": 18, "fitness": 0.3903989466714079, "feedback": "The algorithm HybridOptimizationEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.21.", "error": "", "parent_id": "54223759-61bb-4794-89b9-7de07b38293a", "metadata": {"aucs": [0.7902096652716056, 0.7841708685567668, 0.7998347238992577, 0.7924746360017006, 0.7847754630110588, 0.7789560491552969, 0.7806583474601698, 0.8003336896277274, 0.7818311963239035, 0.6372084024480867, 0.6197692088476923, 0.6323162196917214, 0.6082905801771907, 0.6005127891016252, 0.6390621199789905, 0.6177421834204362, 0.6106850883700035, 0.6229227246579663, 0.5137261134754637, 0.5764539682219783, 0.564045343315219, 0.5271830963627495, 0.5487645668605173, 0.5370996303395962, 0.49104277106773664, 0.5270132390807978, 0.5561003191127664, 0.5233514536369581, 0.45801150460797957, 0.5280962763345752, 0.46185138636072465, 0.4904672178814943, 0.4908326635555418, 0.5179563022330372, 0.40448210770458803, 0.5061489391622991, 0.9357267209666646, 0.9038254447478502, 0.902592040135796, 0.9364926113814056, 0.9092008877174664, 0.8737942665064564, 0.9355364249850252, 0.9371706244800808, 0.8971106788172659, 0.44553453690763967, 0.35251460307114424, 0.4464774329334199, 0.4235966253731378, 0.4162225061449538, 0.26574842066373594, 0.43709865261118963, 0.44946430517915037, 0.44931756328236283, 0.18648870324432087, 0.21461062426439304, 0.17671922403780205, 0.23910247329930756, 0.2863930243215266, 0.22684023212238047, 0.2181489946155819, 0.2566147309138306, 0.22325981415213303, 0.4674622486974972, 0.45988558438992755, 0.4472275276092581, 0.45908234109059376, 0.4736580233682436, 0.48705211417561, 0.46578024288418307, 0.47703765256043873, 0.45253338258602027, 0.4267930413823646, 0.43356694134594465, 0.435766465858086, 0.4546339000820483, 0.4294650107477562, 0.4480799567757313, 0.43896965838873747, 0.43097913164031065, 0.44782542100714984, 0.1326664018970236, 0.3427163389384641, 0.24968436428540064, 0.3410086514028239, 0.3408058475406821, 0.35226299629248936, 0.35018266986742286, 0.3412558472895264, 0.3224405233673452, 0.3384449304847137, 0.3906362106931013, 0.38217661476685383, 0.366856935450912, 0.3590181753061158, 0.32604834575852415, 0.3620255141041948, 0.06657263268077529, 0.08879349897924094, 0.1592464450116915, 0.32670172003660314, 0.27558843298214863, 0.3535727738007136, 0.3536089661770966, 0.3593498521359313, 0.26939687375461585, 0.13792282280714785, 0.2942488190470762, 0.10443990403098902, 0.18087058657937483, 0.18413791164635973, 0.26839776693618056, 0.1671070904753007, 0.13908809428463575, 0.08813468084273268, 0.13429594047636162, 0.11354776531468191, 0.6204750773853123, 0.6149511648425352, 0.6115959659285952, 0.6034704301656426, 0.5988668771833755, 0.6068923111485109, 0.6045408483576167, 0.6125178253100336, 0.618785327860447, 0.10729076369317592, 0.11344205731092971, 0.14147709999478086, 0.11514213495887138, 0.41516716038277146, 0.1131456499970589, 0.12218596655556357, 0.10782849121264004, 0.09433845420076037, 0.19240535085607735, 0.23395231364779356, 0.21281398133830876, 0.19223355738755543, 0.16698750494618708, 0.17577437731480094, 0.20697078500976018, 0.19984009429178573, 0.17641121608530463, 0.25689100596011816, 0.2580164747108593, 0.34899736887588484, 0.24826326477317284, 0.23164921723013865, 0.2743288613594186, 0.2861276228064703, 0.2632092968986146, 0.27257895532858534, 0.18455218776294058, 0.18141698165658504, 0.18911599433655535, 0.14332404017761624, 0.14920377237322502, 0.22249312609215954, 0.18387239490546858, 0.2355703341605333, 0.17030972972369895, 0.24765673477484051, 0.22952428489636345, 0.2283245423897715, 0.2265869176946389, 0.18857632622363507, 0.22601582999088354, 0.2467636566329151, 0.20075459446464572, 0.22096203379183155, 0.5120707914329159, 0.5097804482040543, 0.5058091705150825, 0.5045706343562011, 0.504130786507717, 0.525963937157864, 0.527288369947845, 0.5090947859548887, 0.5137840273165535, 0.49477094458670934, 0.5034636905966219, 0.5405483442714473, 0.5557167392967823, 0.5127343479445212, 0.5275568136096136, 0.5531978126846626, 0.4939032775395209, 0.5612093137901171, 0.5390752240427414, 0.49644003681611293, 0.5397867246820768, 0.544795184500824, 0.5151527300501768, 0.4849999804144077, 0.19053230519737052, 0.6154376975665481, 0.1809482998289157, 0.18784203332883243, 0.18628030597221046, 0.35379775295001614, 0.2191746318767822, 0.19605051100188597, 0.21584715997328463, 0.19884721640492375, 0.21907558758811352, 0.23090200765449242, 0.07450647720613635, 0.08131095410725897, 0.08178024484115953, 0.08880362571705847, 0.08281486602529331, 0.12177711501420707, 0.0772612980224412, 0.08009501730524171, 0.12362030763830589]}, "mutation_prompt": null}
{"id": "da1e159f-bf6c-44ca-831f-85d6dbdc741c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 14 * self.dim  # Slightly increased population size for more diversity\n        F = 0.65  # Adjusted differential weight for stability\n        CR = 0.80  # Adjusted Crossover probability for enhanced exploration\n        delta_F = 0.05  # Modification step for F\n        delta_CR = 0.03  # Modification step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.5)\n                    CR = min(1.0, CR + delta_CR * 0.5)\n                else:\n                    F = max(0.15, F - delta_F)  # Allow for more decrease in F for better exploration\n                    CR = max(0.15, CR - delta_CR)  # Allow for more decrease in CR for better exploration\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-5, 'fatol': 1e-5})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedV2", "description": "A novel hybrid algorithm combining enhanced adaptive differential evolution with a refined Nelder-Mead exploitation strategy for diverse mutation and stable convergence.", "configspace": "", "generation": 19, "fitness": 0.36595188802773354, "feedback": "The algorithm HybridOptimizationEnhancedV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.21.", "error": "", "parent_id": "c6d397fd-9536-4aa4-9816-00ee60a1f9c8", "metadata": {"aucs": [0.7730083326619455, 0.7615186696921536, 0.7640502089453982, 0.7726319777844013, 0.7507262039286174, 0.7553036458746459, 0.7664260160848763, 0.7582008462919771, 0.7517988071533045, 0.5628811792362096, 0.5925366908231622, 0.5637086272487261, 0.5844602408328209, 0.5774813006456759, 0.5874536067510472, 0.5643686321277287, 0.5904118605070199, 0.5859705578667349, 0.5388375085295407, 0.5217734106533949, 0.5447467912149055, 0.5348810553270498, 0.5197482138815657, 0.5357741232939905, 0.49942331608027557, 0.528742651867888, 0.5078799720331626, 0.4801346702177345, 0.4783413344612695, 0.4727385707241327, 0.4697039326960356, 0.4209029322610972, 0.4550906535678729, 0.4736172478112558, 0.46739268072413664, 0.46596385418765973, 0.8847827598798519, 0.8654136057126538, 0.9041294502936733, 0.8652863053690109, 0.8943566157524374, 0.899774803660309, 0.8975515257613175, 0.9046597255672104, 0.8952531746933541, 0.44284192123745025, 0.35585401538383776, 0.44066905197877904, 0.37308556388801195, 0.3950683413613473, 0.4206909080690542, 0.44838681897588606, 0.42550806042982225, 0.37956541258748056, 0.19601664719941236, 0.1890971265165986, 0.18679759939923224, 0.23250212408104176, 0.20660076472623357, 0.24460374245065264, 0.1931386869771211, 0.2594004429913892, 0.20158590266751475, 0.4601978925783815, 0.4448714320147834, 0.44023650241182755, 0.44834613365506937, 0.49087797351088613, 0.4653336974625849, 0.46653551205921495, 0.4450751026929387, 0.4613461313559213, 0.41974854599159883, 0.43407947694306404, 0.4365002545270872, 0.43120549515475715, 0.4303791079305195, 0.45993515322363276, 0.4527594572763092, 0.446931990889057, 0.430377390827441, 0.2881877267560956, 0.029896657648295744, 0.3532331915147672, 0.343297269496056, 0.0, 0.3247795162219579, 0.35319325266458135, 0.3409092696519519, 0.3419049804011465, 0.354397237292566, 0.28521452436357664, 0.3147990047851593, 0.34242681356076643, 0.3198689909440964, 0.09826294686598935, 0.3710288960877278, 0.36756068408164333, 0.3995258918113448, 0.3193842261195742, 0.09581524215122994, 0.07890240443818508, 0.050358302109695274, 0.07850171102490244, 0.13659887398216486, 0.2854805931818061, 0.26456328427476594, 0.2787965161767645, 0.10954031263584552, 0.07013308161967835, 0.1314459226472543, 0.24963635647124716, 0.10758691832493272, 0.3620798282696136, 0.08643173567106333, 0.13489616645476743, 0.090443311118517, 0.6019915380461777, 0.5925756955138815, 0.6054315042980165, 0.5967092353185157, 0.6169362306224984, 0.5861307589394067, 0.5993339074643973, 0.5942368891008392, 0.6206049726948271, 0.13928234758612268, 0.11089018732091904, 0.08768931439568783, 0.10531283924816093, 0.1058384226381921, 0.1209216443542126, 0.10103258844016094, 0.09855011136688885, 0.11670886395145896, 0.17753486368212756, 0.1524317307944879, 0.23410248211762508, 0.24804539203037013, 0.1801215628391274, 0.18815056047006473, 0.1942722320317084, 0.14205971602375578, 0.1734269820408939, 0.23058493560538773, 0.23970437552364388, 0.23322266096353794, 0.2034977697775212, 0.24555598843621296, 0.2347037175356752, 0.28584531605103636, 0.24904860757324898, 0.22122528436910238, 0.17545227797433838, 0.163732570009832, 0.2544593046008393, 0.17794382176177148, 0.18871307653177782, 0.2020776426802393, 0.2191796424734298, 0.20156677703745318, 0.18161973657426222, 0.24999855687961559, 0.22672734728692745, 0.22132817408017158, 0.20655282349148496, 0.22009306766301584, 0.21605577638250506, 0.22076597192131386, 0.2044185805623261, 0.23137254499298354, 0.5124972123589309, 0.20987984375772561, 0.2067555329193621, 0.5085997191963374, 0.509495723150982, 0.22290917234154206, 0.5099199928982021, 0.21826008239208528, 0.21785778103966658, 0.4878777914750724, 0.5178327109746712, 0.5046662257820065, 0.5045656113770847, 0.5417777830938534, 0.507779156530258, 0.5139201313926378, 0.49946158382193084, 0.5120276917472332, 0.5328042454942166, 0.5200392947266728, 0.4747426628270146, 0.4943330578292261, 0.18506501700370703, 0.5234374265162862, 0.17294360088999017, 0.4851317098327509, 0.5046685539873604, 0.20763340360756066, 0.22211065990018675, 0.23313334688845933, 0.20186442096990875, 0.1899871475107533, 0.22920747051289747, 0.21367177247954516, 0.19343350087848143, 0.21242271074286256, 0.08418326621889005, 0.08046535481773553, 0.0812900963543487, 0.08227146639496319, 0.08267683817769578, 0.06783803103069297, 0.07776920671971088, 0.08596113134019723, 0.09959943909366553]}, "mutation_prompt": null}
{"id": "1889c4e5-3a3e-4606-b685-5b7a25d08192", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)  # Slightly increased DE budget allocation\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 14 * self.dim  # Further increased population size for more diversity\n        F = 0.8  # Adjusted differential weight for better exploration\n        CR = 0.75  # Modified crossover probability for balance\n        delta_F = 0.05  # Slightly increased adaptation step for F\n        delta_CR = 0.03  # Slightly increased adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.5)  # Reduced F increment for more stability\n                    CR = min(1.0, CR + delta_CR * 0.5)  # Reduced CR increment for more stability\n                else:\n                    F = max(0.3, F - delta_F)  # Allowing F to decrease further for more exploration\n                    CR = max(0.3, CR - delta_CR)  # Allowing CR to decrease further for more exploration\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A robust hybrid metaheuristic combining adaptive differential evolution with enhanced Nelder-Mead, utilizing dynamic parameter tuning for improved exploration and exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.3547294204457155, "feedback": "The algorithm HybridOptimizationEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.20.", "error": "", "parent_id": "c6d397fd-9536-4aa4-9816-00ee60a1f9c8", "metadata": {"aucs": [0.7365048979935953, 0.755381425058273, 0.7323329348358656, 0.7306417465746876, 0.7278702494043128, 0.733178953622007, 0.7188156540645105, 0.7488993856992223, 0.7245771042918308, 0.5197124766140953, 0.5174937742436512, 0.5434741231961537, 0.5379698735616728, 0.5352114672017798, 0.5310081190504472, 0.5386832908954615, 0.5379466987262419, 0.52958520714626, 0.4542046378724418, 0.4579919825209595, 0.45654802428573016, 0.448068601969951, 0.44024439939114723, 0.4392131414919547, 0.4398199322058034, 0.4473517859966173, 0.4609248906647234, 0.4258952466698229, 0.4233909925710888, 0.43580192846965027, 0.44491225595632955, 0.4206138194889312, 0.4023942293606747, 0.4183982345690067, 0.4183653382305672, 0.41527227197880345, 0.907699192234367, 0.9093145501883729, 0.9242112318749465, 0.9177508519031798, 0.892585316785337, 0.9465155131624189, 0.9379072760582698, 0.9109994068444464, 0.9173987757132014, 0.3747324947866023, 0.4319953026944874, 0.42952615260716265, 0.3511844204872512, 0.365612140641415, 0.4002621446309914, 0.42250558517100667, 0.419110938725053, 0.42177189214980537, 0.20775833589183834, 0.2065811496015758, 0.18048571894205523, 0.2594839531192489, 0.2282196704364856, 0.27325709728917913, 0.2121994950951076, 0.23806574401635294, 0.2098670737805487, 0.3970725190219443, 0.41118455326027403, 0.40010406454062264, 0.4174218044965039, 0.3952396162348629, 0.41650235572039496, 0.4298351459317298, 0.4045204117279011, 0.4148699759818576, 0.3835219325458835, 0.3801631462629672, 0.379832624182066, 0.3851166224772764, 0.38147680321016275, 0.39094428500163747, 0.3815750932744305, 0.39397272451821175, 0.3901160242032019, 0.2972252385999975, 0.23090247256933893, 0.23504284204634585, 0.29801307686506795, 0.28709831611248016, 0.30637998260459776, 0.29910073658311664, 0.2939321554489087, 0.031459412976551526, 0.30671338177674656, 0.06726822387936227, 0.3009713398854019, 0.282736725528031, 0.0753223889488901, 0.33651639987616566, 0.35693419009370086, 0.30562883379180483, 0.2905004973539108, 0.30307302131414116, 0.2521177420330477, 0.1429875949645828, 0.10824742058082926, 0.28779136774233915, 0.295758035703539, 0.23765160653739315, 0.2443725317968799, 0.23357869175759538, 0.10768425895105138, 0.1131157344702648, 0.1393989581840528, 0.22614180328353484, 0.10993984319029881, 0.2244451017790836, 0.09905219480171401, 0.13727708582426135, 0.10425805058938786, 0.577843351894495, 0.5877878476099885, 0.5851105121611968, 0.5784042367745552, 0.5754173258161713, 0.5847007454001496, 0.5979766451105046, 0.5859448949233694, 0.5825991928785479, 0.0976707318983121, 0.12772003723059333, 0.10303684016986026, 0.35864352878934347, 0.081743592084908, 0.11704519705461969, 0.10861089588726869, 0.10632865489056242, 0.10251596681570752, 0.1447031247325511, 0.13919233093666483, 0.16786966351856447, 0.15438606639331542, 0.19672795628821294, 0.15598439452139845, 0.19532563952793103, 0.19631794115305967, 0.1630832789038814, 0.24250328106585928, 0.24282728929096142, 0.26619568833537144, 0.23666303478132011, 0.23222242888259848, 0.24057242806303036, 0.2794570035940611, 0.2656610488971092, 0.2513697135431514, 0.18328617533967717, 0.1953517513861539, 0.1960508693372327, 0.21613537855551823, 0.18184975414270643, 0.18255214388501173, 0.19346094554947235, 0.22711673642402952, 0.19262016903410928, 0.21131003445959273, 0.24032075442764922, 0.2028460571010834, 0.21726517546980628, 0.18844011583467146, 0.23767701511821582, 0.23568119969076173, 0.23670393271250745, 0.20285151512455357, 0.46423057021435765, 0.4679465202962315, 0.46753562616578515, 0.2166804632363447, 0.47222987382243686, 0.47140294204075806, 0.4611949075004562, 0.47068454973457263, 0.4711896360245288, 0.48624072980664035, 0.45533115789089273, 0.4693765221928321, 0.5231836450202045, 0.47974104251211647, 0.47382474350173576, 0.4568191903518759, 0.5301028930592927, 0.4433164443553884, 0.5369297791349905, 0.45575192446359947, 0.48032884598999603, 0.18673592329468713, 0.1808494531297894, 0.19145951227934777, 0.4374573203371702, 0.4835667191388944, 0.45440884539576376, 0.21626580370980542, 0.19980544716241222, 0.2300051113517202, 0.24455838924485684, 0.2165965096930963, 0.22141567160752607, 0.21043610440546823, 0.17965159603658687, 0.2146862074986423, 0.08493291297854921, 0.08793435165706653, 0.08353591320524556, 0.09230715965890701, 0.08791472595100969, 0.0798424585552111, 0.08013388446887693, 0.08074203740496977, 0.08278103564063077]}, "mutation_prompt": null}
{"id": "222ae2f5-01f1-49c3-a448-3e5ae15fbfda", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)  # Further optimized DE budget allocation\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 14 * self.dim  # Increased population size for diversity\n        F = 0.75  # Enhanced differential weight\n        CR = 0.80  # Slightly reduced Crossover probability for diversity\n        delta_F = 0.03  # Adjusted adaptation step for F\n        delta_CR = 0.01  # Adjusted adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.5)  # Reduced F increment for more stability\n                    CR = min(1.0, CR + delta_CR * 0.5)  # Reduced CR increment for more stability\n                else:\n                    F = max(0.2, F - delta_F)  # Allowing F to decrease further for more exploration\n                    CR = max(0.2, CR - delta_CR)  # Allowing CR to decrease further for more exploration\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-5, 'fatol': 1e-5})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid metaheuristic integrating adaptive differential evolution with enhanced Nelder-Mead exploitation, incorporating mutation diversity and dynamic convergence strategies.", "configspace": "", "generation": 21, "fitness": 0.368559630137943, "feedback": "The algorithm HybridOptimizationEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.21.", "error": "", "parent_id": "c6d397fd-9536-4aa4-9816-00ee60a1f9c8", "metadata": {"aucs": [0.7562344249120669, 0.7699017037215847, 0.7625201687184217, 0.7599224582290254, 0.7502505255984864, 0.7768522428413196, 0.7734441142551192, 0.747374754459551, 0.7511634262951988, 0.5666024483723358, 0.5636297964727216, 0.5699825852170395, 0.5748613810276071, 0.5744807441423163, 0.5699928166256306, 0.560241785317494, 0.5767962699412537, 0.5719070457979419, 0.5338495396912398, 0.4758169928492002, 0.471979998721088, 0.4882019005770445, 0.49755497984487074, 0.5249050820721533, 0.49250248726409374, 0.496160783646185, 0.5047134855244404, 0.16252516877686174, 0.4459608612497782, 0.4770942181994491, 0.4311629199756689, 0.4577609087701977, 0.44956460663863196, 0.4536680351418836, 0.4438880927165172, 0.44760934600520164, 0.8997441980613285, 0.8996970398694758, 0.9059660755509705, 0.9123583330857175, 0.9198562210987977, 0.9211278453153111, 0.8899974278222468, 0.8928070538309683, 0.9255303769753525, 0.2858174899731669, 0.41345887098911227, 0.43477554811756136, 0.32549552808552107, 0.35732593908884935, 0.3719334280174109, 0.42430323167026995, 0.4543886576270778, 0.4619943207371524, 0.15828009576555302, 0.17152873290640014, 0.19090184777803554, 0.280255269024585, 0.26043811207035705, 0.24074013720863097, 0.19991990207330013, 0.2514850184135694, 0.18299240803092565, 0.45118865815919984, 0.4504636768200939, 0.4624375837191378, 0.4253367808406211, 0.4546722324348276, 0.44865924857120065, 0.47740232444011577, 0.49296021732898765, 0.451470255111158, 0.4213486309724993, 0.4206989381874089, 0.4340472000218166, 0.41817717294282397, 0.4113349133391462, 0.43225563355130825, 0.4232478173648142, 0.42584651334706947, 0.42296003632696044, 0.3027901457074974, 0.33783963475799916, 0.3376569476291198, 0.3365444999405949, 0.3390847682079452, 0.3454092676859898, 0.3515067122454739, 0.3415683810224478, 0.03550453452725211, 0.33675338326519144, 0.36113067207657923, 0.3809363162179725, 0.3591399883496946, 0.35688719667838953, 0.3519955695428958, 0.34729717699693874, 0.0864196302076613, 0.3317372636594359, 0.10583834183868768, 0.09400964455654015, 0.28652558278672724, 0.19151163758451184, 0.3015614518261457, 0.34077608356436107, 0.28910349149633874, 0.31011038503277, 0.25961589984559386, 0.11766594365609417, 0.05590077915984548, 0.1354568328953123, 0.13507458934359784, 0.10266312431293123, 0.10966466656683549, 0.25996094918376245, 0.1079938824102008, 0.09093618646386514, 0.6083956405959086, 0.5928659822556757, 0.6168342478866229, 0.6002904604695034, 0.593930510797944, 0.6132853108071971, 0.6172324621927266, 0.5960365564015393, 0.601078607747805, 0.09782615462585031, 0.1211964317990123, 0.08638834477997392, 0.12288821880485334, 0.07917648510167186, 0.09282272495623511, 0.09908861186290763, 0.12169835875508617, 0.11179165818501913, 0.16443872138639348, 0.18742167459697623, 0.16434593436400535, 0.16405808607036454, 0.21063690024300008, 0.1466266360075389, 0.18893779454089876, 0.16471493524976832, 0.1717926212687878, 0.22326175309356933, 0.2601839406204217, 0.237021445450335, 0.21639910560325804, 0.26811134527510827, 0.24422766234206128, 0.27641602716674296, 0.2776602414537789, 0.24403669337667144, 0.17286214750606144, 0.20398601005369188, 0.1869848426360733, 0.18027877485004062, 0.1723827833495365, 0.1822077320479515, 0.18753128348623926, 0.20920460782057304, 0.2127915568645079, 0.2092942080817335, 0.2363499299290761, 0.21347852735684192, 0.22672909142060926, 0.19444726138286328, 0.2390908075853403, 0.21828732868239642, 0.2176976087421204, 0.23695479729818936, 0.22329740706632106, 0.5112844121910785, 0.5084331629274841, 0.5331598215271398, 0.22649844998319568, 0.5224724565586978, 0.21923207165384972, 0.5063740991877079, 0.2270770151875975, 0.5593631988235298, 0.5500818627936865, 0.5143790229975891, 0.5734924052701058, 0.5700452434361483, 0.571296729212687, 0.537360745162196, 0.4887486160122998, 0.5382804314272313, 0.5093637719307937, 0.582144252232615, 0.5281858912272082, 0.24423353526250136, 0.18743229754229696, 0.1974713826666129, 0.4921942156291832, 0.5358120520620582, 0.5141549841882032, 0.18507435982493547, 0.34622837559009456, 0.2179503034760636, 0.27097485574881197, 0.19942235884497073, 0.202015176058718, 0.18977078325352248, 0.19765001024281392, 0.2563887945588307, 0.10119650448191164, 0.08031198749193647, 0.07932042231456815, 0.08060942154331185, 0.07768525486779654, 0.09068151984905615, 0.08054997818961851, 0.09843214679774259, 0.07579413375224942]}, "mutation_prompt": null}
{"id": "b49a12b0-b2a7-4045-a352-372ae303dae8", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim\n        F = 0.7\n        CR = 0.85\n        relaxation_prob = 0.05  # Introduced probabilistic relaxation\n        delta_F = 0.04\n        delta_CR = 0.02\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    if np.random.rand() > relaxation_prob:\n                        F = min(1.0, F + delta_F * 0.5)\n                        CR = min(1.0, CR + delta_CR * 0.5)\n                else:\n                    if np.random.rand() > relaxation_prob:\n                        F = max(0.2, F - delta_F)\n                        CR = max(0.2, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-5, 'fatol': 1e-5})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A refined hybrid metaheuristic integrating adaptive differential evolution with enhanced Nelder-Mead exploitation, utilizing probabilistic relaxation for diversity and stability improvement.", "configspace": "", "generation": 22, "fitness": 0.3821793713813839, "feedback": "The algorithm HybridOptimizationEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.22.", "error": "", "parent_id": "c6d397fd-9536-4aa4-9816-00ee60a1f9c8", "metadata": {"aucs": [0.7923928740022426, 0.8038954252599475, 0.7967515582672315, 0.7890122971250609, 0.7898934942017477, 0.7757315361421886, 0.8055809898689437, 0.7885842288292843, 0.788072369225883, 0.6566358630661826, 0.621827165066442, 0.6152247140290557, 0.6357923358458093, 0.6125356641133635, 0.6331102990710842, 0.6109050281224693, 0.6404878454714222, 0.627110255587905, 0.5331671401413934, 0.5666867384207559, 0.5467069321942948, 0.5114879410140761, 0.55305805137718, 0.5301780721841056, 0.572377145608458, 0.5463115240742538, 0.528924963957938, 0.49773067649982217, 0.4656194772484644, 0.5044636667086118, 0.5028422234954689, 0.4963161590320404, 0.43187206706964665, 0.16303645831166336, 0.511171344920047, 0.4827448839881927, 0.9079744510327666, 0.9010379971202648, 0.9501239334199699, 0.9280675447109592, 0.8766111073976998, 0.9304376516346567, 0.9126359666477547, 0.8916500677140917, 0.9288630974037801, 0.4133792546100431, 0.44964137546432925, 0.3936403147795825, 0.32217786710162666, 0.3401057309257316, 0.4038258864789527, 0.4446706191414397, 0.37627339779127744, 0.4461004671413078, 0.16999605511461013, 0.19568534899348577, 0.15897587875886166, 0.31112328751094065, 0.29704546198783244, 0.243117822665314, 0.21734297903123223, 0.21755202930230955, 0.21838701094493795, 0.4705062558862858, 0.45495533067122595, 0.4568189083441805, 0.4588648897483928, 0.44575108929214813, 0.4509777176577421, 0.4622951665309283, 0.4567948092682411, 0.4456602397419671, 0.43868182211397744, 0.426881717429053, 0.44339549493487396, 0.44212634570721676, 0.43432950222868494, 0.45311925424437705, 0.43008712689413087, 0.4338454165543113, 0.4473618224806756, 0.040136196405492264, 0.3504975619823515, 0.3480292751975559, 0.0244703121300216, 0.3537276093142736, 0.3404993302335808, 0.33370872283585284, 0.34426883590150115, 0.33688512447271146, 0.36364183250869264, 0.35207027762568865, 0.0649139854336257, 0.3535709147046189, 0.38315238067136037, 0.3374325570229717, 0.3468080439922153, 0.33598344689818915, 0.38323725154904387, 0.32522410881364283, 0.3175885327786503, 0.1318152860874352, 0.3272943780347166, 0.35350939960127103, 0.13860039485812503, 0.31072990361217867, 0.29739792978281754, 0.269450333976768, 0.13032634777635865, 0.09293357016972581, 0.17399464188753377, 0.15276591150052776, 0.12100128613700945, 0.16120670102855506, 0.1419196209214486, 0.15073151158163378, 0.08809370653424542, 0.6232296710356905, 0.6146175067864472, 0.6141584965877148, 0.6127586716185576, 0.614112429199525, 0.6235351219461904, 0.6098400980926608, 0.613278721075478, 0.6154824951098066, 0.12338971399336118, 0.11263179565118153, 0.10953656127608302, 0.0964967962742016, 0.09568181450330071, 0.0889405281372907, 0.10516086972937988, 0.10889943364794086, 0.10219900979425234, 0.18394184011824344, 0.17593510380687039, 0.1539749157795739, 0.17557188558675885, 0.23426120810358175, 0.19879624000442286, 0.1540143565309412, 0.23680275957958397, 0.21078400704087252, 0.22521857628833875, 0.22956749698444368, 0.2762349166911313, 0.280551139493613, 0.24436095291654347, 0.27611725137882004, 0.23212378307303239, 0.29688871932575567, 0.26358230191458754, 0.1888462626530385, 0.19661587021439675, 0.1940773656372028, 0.19641024807382979, 0.17294451087503981, 0.1739622239154136, 0.19491584491932012, 0.2083574555316633, 0.19307241527832908, 0.22093065857314997, 0.21641821149392737, 0.21126822918153598, 0.22896571644281472, 0.22366069673575695, 0.2155036107110797, 0.2422370849913339, 0.27201294862572123, 0.21566637510207265, 0.5357016819769673, 0.5163510015454549, 0.5039617918264201, 0.5203826163932319, 0.22355689121482536, 0.5175690083337644, 0.5206292164292536, 0.5175208800241908, 0.5208774481133143, 0.5143089140147346, 0.5298547312783525, 0.18742479271763823, 0.5511064925613796, 0.5142715265439952, 0.6035748616446739, 0.5770544149546946, 0.4953402729105094, 0.5700760691771145, 0.5356556227578015, 0.5197251945735126, 0.49665215440630905, 0.5177053417316652, 0.19353148930543662, 0.18542308263026097, 0.4866968933004354, 0.5422877521210292, 0.52589714000404, 0.23714132428790857, 0.1940023788490235, 0.2083963229696767, 0.20547751901534006, 0.20963430847077957, 0.20429063937312153, 0.20560712017225158, 0.21621806025538248, 0.19175273016753658, 0.08182726173006272, 0.08305446372064473, 0.08245710263087547, 0.08865226886934108, 0.0810588540117897, 0.07849256814694094, 0.0949405133411576, 0.08046180752623, 0.08084662625881467]}, "mutation_prompt": null}
{"id": "c2f7be48-e804-4f48-9aab-0ab9166cf744", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)  # Adjusted DE budget allocation for better exploration\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim  # Reduced population size for faster convergence\n        F = 0.65  # Slightly decreased differential weight\n        CR = 0.75  # Reduced crossover probability for exploration\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.5)\n                    CR = min(1.0, CR + delta_CR * 0.5)\n                else:\n                    F = max(0.3, F - delta_F)  # Allowing F to decrease more for exploration\n                    CR = max(0.3, CR - delta_CR)  # Allowing CR to decrease more for exploration\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A refined hybrid metaheuristic that combines improved adaptive differential evolution with flexible Nelder-Mead exploration, enhancing mutation diversity and convergence control.", "configspace": "", "generation": 23, "fitness": 0.37942404809994706, "feedback": "The algorithm HybridOptimizationEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.22.", "error": "", "parent_id": "c6d397fd-9536-4aa4-9816-00ee60a1f9c8", "metadata": {"aucs": [0.8225248628284807, 0.8023868402390841, 0.8124796759129035, 0.8165445054124525, 0.8176313421356842, 0.8035859037448666, 0.8028126960761105, 0.8147065680958809, 0.8086386449819907, 0.6436042668680158, 0.6587526759878846, 0.6776831633770724, 0.653396850273813, 0.6634770846879182, 0.6465992271657895, 0.673393417074496, 0.6588331799020364, 0.6619574530819774, 0.5721555801821876, 0.5289702389828368, 0.5322698879834299, 0.5720468920914131, 0.5120308807153948, 0.531925586914854, 0.5470774401656455, 0.5745757214779464, 0.5468777614014388, 0.4803563783500783, 0.4915069505589822, 0.47959443935873003, 0.5022963112134626, 0.1625190510048924, 0.49004517203270015, 0.4773948348768323, 0.4979941186857997, 0.49706268612967974, 0.9295918382947492, 0.9365607456133931, 0.9262874597110214, 0.9419135077435946, 0.9228006389947343, 0.929736758484904, 0.9397423568209523, 0.9346517024520726, 0.9101383468512947, 0.4401270458795059, 0.38645175062574133, 0.40130768192715816, 0.4107834907099889, 0.4413834572333796, 0.43439760153342954, 0.4150146727646121, 0.4251856894784134, 0.4368940065939251, 0.20922540806214562, 0.21189143209686412, 0.21109984632593382, 0.27011043785543076, 0.2773184889376873, 0.2870222139533629, 0.2744562749704115, 0.2826449900782082, 0.24969564451312198, 0.4132316688910731, 0.42336750140184465, 0.4183337695922813, 0.40867899779128336, 0.41037381424749186, 0.43480184113618003, 0.43279894510004735, 0.44277889223878175, 0.41556204673867947, 0.3896284601898815, 0.4054451972101988, 0.40434699166143184, 0.4067347104265844, 0.4069683026385249, 0.4171899012828947, 0.39466789731887353, 0.38973211867319857, 0.3914868029208599, 0.2667384175484626, 0.3041650795005858, 0.25370648174856325, 0.2953591812881903, 0.30447033907031096, 0.27618420065245486, 0.25671744676548847, 0.02952943570192912, 0.30795577088037795, 0.3127921003448013, 0.2903507922596501, 0.3180372168391433, 0.2809657852284586, 0.30018529186369747, 0.3069677395087609, 0.33465814251273174, 0.290262951060403, 0.28359152908785823, 0.2527445521018342, 0.25688251861464617, 0.22891112823527815, 0.28597940284429324, 0.29585964011030375, 0.29786168723536643, 0.22745244416847155, 0.2498747763260274, 0.28689018520986387, 0.13419891661181793, 0.18425101335353355, 0.14596032505891288, 0.12452687374052207, 0.1299115048037358, 0.2555779455309656, 0.1638801289720514, 0.11207482317758044, 0.11645021284367174, 0.5948702734023058, 0.5996595681504557, 0.6041167590573977, 0.6131710852446091, 0.5995660832063567, 0.5949462570799228, 0.6110795094490266, 0.6164648492567104, 0.6065737321782405, 0.11587915466980248, 0.10594255840561129, 0.12709396090223324, 0.11030632188947076, 0.11558137370592869, 0.10357965311451789, 0.09979950913761881, 0.10551062390730281, 0.11622383618422372, 0.15070864157111097, 0.1815974311460079, 0.19674377718175728, 0.1543618260492371, 0.19990930898776638, 0.19678041651009603, 0.17070973871253314, 0.1534403418946655, 0.15941315739033635, 0.32444618875922726, 0.31056832588710015, 0.25730463250456037, 0.30367685804470357, 0.2655428099495588, 0.289876979046676, 0.27444740489750197, 0.3410074845157991, 0.30256548242591563, 0.1921944977816482, 0.17220011788448553, 0.21790512863195133, 0.18069793049752902, 0.18112568449640565, 0.21817424620596215, 0.2136384101932144, 0.23893444934159958, 0.197731293900823, 0.21117205028191932, 0.18795903590260266, 0.21338983795256694, 0.2163465556917301, 0.23653579462443075, 0.2260746032060873, 0.1952398554850393, 0.20361360476629953, 0.21108290609085767, 0.47530877807692873, 0.4780447689352042, 0.22417455871370218, 0.4732956720185615, 0.21955886326245178, 0.223207167456819, 0.47144867926495126, 0.4920160359882919, 0.4777507990606087, 0.4589218117850029, 0.4909429615982357, 0.48298858500265296, 0.5237925083268015, 0.472075159513361, 0.557441387149491, 0.48543674334443454, 0.4409964877044956, 0.4537755599395731, 0.5173388171362305, 0.4521436940515011, 0.485184173828748, 0.48836223683351065, 0.480423115121005, 0.4535420040527004, 0.45109898566943873, 0.4935819460030101, 0.45928740987770733, 0.18853342423291997, 0.1890134725980095, 0.19001893216373333, 0.21053622743711564, 0.19472941400005517, 0.22565673169117795, 0.19060882771239618, 0.19559201900685752, 0.18863891069027694, 0.08384568228332467, 0.08762978336886118, 0.08555792767574599, 0.09383627596629796, 0.09642981507610371, 0.09613381205142835, 0.07436374312573135, 0.07793623160043373, 0.07671671310158235]}, "mutation_prompt": null}
{"id": "708dcf93-81d6-4189-b4b3-4583c15959c5", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)  # Further optimized DE budget allocation\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 10 * self.dim  # Adjusted population size for balance\n        F = 0.8  # Adjusted differential weight for more aggressive mutations\n        CR = 0.9  # Higher Crossover probability for exploration\n        delta_F = 0.05  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.2, F + delta_F * 0.5)  # Adjust F increment for stability\n                    CR = min(1.0, CR + delta_CR * 0.5)  # Enhanced CR increment strategy\n                else:\n                    F = max(0.4, F - delta_F * 0.5)  # Allowing F to decrease with more exploration focus\n                    CR = max(0.4, CR - delta_CR * 0.5)  # Allowing CR to decrease for more exploration\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-5, 'fatol': 1e-5})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A refined hybrid metaheuristic integrating adaptive differential evolution with improved Nelder-Mead exploitation, incorporating mutation diversity and enhanced convergence boosting strategies.", "configspace": "", "generation": 24, "fitness": 0.38324239379625913, "feedback": "The algorithm HybridOptimizationEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.22.", "error": "", "parent_id": "c6d397fd-9536-4aa4-9816-00ee60a1f9c8", "metadata": {"aucs": [0.7967897770322112, 0.791956881234219, 0.7879111047295966, 0.78612225381929, 0.7854779845493592, 0.7932012078977082, 0.8011440691920693, 0.8022613684483075, 0.7863209915846124, 0.6005015782400434, 0.6308020752750955, 0.6232504658939316, 0.6288351304227129, 0.6190671382969424, 0.626085104378508, 0.641679316900383, 0.6496307156801786, 0.6614372005528487, 0.5184957455814845, 0.4976684084068772, 0.4806698483065176, 0.48035590675618967, 0.494682158011001, 0.5120862795684415, 0.46647017576993455, 0.5075393887242734, 0.46785748745410305, 0.1569376794710282, 0.46081014467659065, 0.43595647865670983, 0.47044270125188936, 0.4303566477076317, 0.4610709959945347, 0.4342182150885424, 0.44420856837247413, 0.46348641151351777, 0.9392114348037668, 0.9719749240612011, 0.9557960040616277, 0.9577276263522043, 0.9549682018326939, 0.9498061153673203, 0.9378540574496523, 0.9819059443339413, 0.9486063579502485, 0.460701771437633, 0.4045188595671231, 0.47462854523692954, 0.48784223873850485, 0.4350422017328227, 0.486953581330276, 0.47716931918920213, 0.4483338788582236, 0.488989754285054, 0.25138446663865577, 0.19620342634575172, 0.2264817053451056, 0.2553341620531452, 0.3023270398673378, 0.3013221633015756, 0.2505652534682833, 0.3236548500985462, 0.23037800763335703, 0.4228906320161635, 0.45535407343648626, 0.43574962871516365, 0.45914400866597405, 0.4613828990802533, 0.46120142685687526, 0.446231635815988, 0.4900537267518358, 0.46631427928107705, 0.44170547593493414, 0.43652643466486385, 0.4375071985672182, 0.4493113237538574, 0.446463118006888, 0.4525934549818328, 0.4404847006424558, 0.4310953900877229, 0.443363602599955, 0.28994403305909344, 0.3384861351836467, 0.031078798899310422, 0.3404632099864888, 0.34383542521606636, 0.28293008107297524, 0.3490142805658979, 0.3469591920724302, 0.3323384234291359, 0.3111027084582585, 0.3500581116706476, 0.3617504978705899, 0.06884814169614728, 0.34063246903728894, 0.32469370846873624, 0.3758726579342597, 0.38531001251439057, 0.09973731631902116, 0.29519294292725384, 0.28717992010255655, 0.3075199039199742, 0.05088840794550775, 0.2811189055958945, 0.35147096196156724, 0.27856490610194695, 0.31466234941683835, 0.09279933272415508, 0.17034717591611337, 0.09404121417495115, 0.20265188498587927, 0.2647744806839648, 0.12197712446000164, 0.37207698801775446, 0.1590269563469674, 0.1200789939087834, 0.20666807238062213, 0.6339704449011154, 0.6338573132121413, 0.6343497869308234, 0.6238848098769352, 0.6430621260761096, 0.6454744500544224, 0.6186517443415392, 0.6271778167211487, 0.63590432432956, 0.10916477905749467, 0.11480926229176225, 0.10656912331665203, 0.11691357662391944, 0.09827710363630648, 0.1122799005607511, 0.13136241191684017, 0.09847189431414405, 0.12372606627474092, 0.15590450394832733, 0.28606073363637674, 0.17467561732382197, 0.16414231323717654, 0.16716217690045343, 0.17582628647471088, 0.15729137676661686, 0.14977847752466655, 0.19381454798983377, 0.3070313895042863, 0.26238735820126224, 0.32069958801545106, 0.24959037630006364, 0.3042810851792591, 0.2799422879633461, 0.31849398095361503, 0.3312746279113189, 0.3186702371966461, 0.2432169517898758, 0.2145333840073107, 0.24285863834188082, 0.19279016462835885, 0.21844477700016474, 0.19303856784661277, 0.2513273945968123, 0.2510134647840976, 0.20704141566697054, 0.21712927948487126, 0.22142374805036358, 0.2069768934632018, 0.2087481703887022, 0.22363946001474033, 0.22584058405747987, 0.27516778040706114, 0.18377939246891017, 0.22653965354591543, 0.20789312894920187, 0.5057918431649475, 0.23228639039057364, 0.5095914024074374, 0.5084491918651355, 0.5144621229438523, 0.21866605592700106, 0.5111853752022455, 0.5023470169614077, 0.49348526324241426, 0.5174910024148516, 0.4890798693825832, 0.5495560778057629, 0.5111808018226096, 0.5207919726542614, 0.49651962058766064, 0.17083574731622575, 0.5089731269950871, 0.5541564777082459, 0.1849960566952017, 0.5083274667136504, 0.5403344222997561, 0.17949450492492247, 0.5157118895968952, 0.5151050391116057, 0.5353496988217097, 0.2044389735171258, 0.1922319718573069, 0.22000175561950364, 0.20214034284769256, 0.186642052194252, 0.24662119649858028, 0.1880039915250794, 0.22361055536938734, 0.20446881097151381, 0.18106209201505363, 0.08529173070246543, 0.08089023663591466, 0.08204196828988519, 0.0960962411902263, 0.0913993319757832, 0.08808209628164698, 0.09090694992030113, 0.0843905390289057, 0.08459280597452612]}, "mutation_prompt": null}
{"id": "4b61ecb6-1998-4b63-839b-11c6abe0bbf3", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass AdvancedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)  # Further optimized DE budget allocation\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        # Adaptive Differential Evolution (DE) parameters\n        population_size = 14 * self.dim  # Increased population size for diversity enhancement\n        F = 0.8  # Enhanced differential weight for better exploration\n        CR = 0.8  # Adjusted Crossover probability for balance\n        delta_F = 0.03  # Adaptation step for F\n        delta_CR = 0.03  # Adaptation step for CR\n\n        # Initialize DE population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        # DE loop with dynamic mutation strategy\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.6)  # Adjusted F increment\n                    CR = min(1.0, CR + delta_CR * 0.6)  # Adjusted CR increment\n                else:\n                    F = max(0.3, F - delta_F)  # Allowing F to decrease for more exploration\n                    CR = max(0.3, CR - delta_CR)  # Allowing CR to decrease for more exploration\n\n                if evaluations >= self.num_de:\n                    break\n\n        # Take the best solution found by DE\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        # Nelder-Mead optimization for exploitation\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-5, 'fatol': 1e-5})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "AdvancedHybridOptimization", "description": "An advanced hybrid metaheuristic blending adaptive differential evolution with accelerated Nelder-Mead refinement, utilizing dynamic parameter tuning and enhanced exploration-exploitation balance.", "configspace": "", "generation": 25, "fitness": 0.3549748358533163, "feedback": "The algorithm AdvancedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.20.", "error": "", "parent_id": "c6d397fd-9536-4aa4-9816-00ee60a1f9c8", "metadata": {"aucs": [0.7424802599056499, 0.731725731532458, 0.7394284981058457, 0.7438621029876379, 0.7283502053437154, 0.7165947199741762, 0.7395410959904379, 0.7446293162394854, 0.7451481206139365, 0.5392401338960107, 0.5179865378667577, 0.5475295874228437, 0.5382855550793018, 0.5391529219875444, 0.543290221372685, 0.5332922414185217, 0.5519448373471967, 0.5446174416891826, 0.4415504650617763, 0.4569008140974845, 0.42407814029617386, 0.45725286048420066, 0.451561609943506, 0.44063401008895864, 0.4394507860696004, 0.4410239990714139, 0.4327748753894489, 0.40732004320277393, 0.41901475412697364, 0.42756498747967187, 0.41380706551655455, 0.3923216334039126, 0.39490578648486463, 0.407854851167601, 0.4200088163575689, 0.4245879431823506, 0.9093218858571892, 0.9022791627922916, 0.9344549042744753, 0.9273664065698585, 0.9291544621904778, 0.9328936738277397, 0.9185374515340797, 0.9400422313520658, 0.9614294846659939, 0.42711357619034684, 0.4286880236342553, 0.3944494125682483, 0.317723166700126, 0.35708513705259504, 0.39549530715949954, 0.42222313362862474, 0.4126239962637811, 0.4250886258818566, 0.23308727745285074, 0.1962373380607032, 0.1749095861950506, 0.2547692996842893, 0.25874274308304435, 0.27709225878009536, 0.25964288862908735, 0.25858805461656853, 0.2640290876538909, 0.3985979572376669, 0.42136394372415487, 0.3982185850226748, 0.3980387807286916, 0.4054501209160475, 0.41736410066850727, 0.41098138842187304, 0.4178622120210461, 0.4074498651366454, 0.4060876326062265, 0.38954970463828154, 0.379445701687524, 0.3930975334552269, 0.387411948020012, 0.4106156059960634, 0.38294214942060545, 0.38940353169127884, 0.38685292753053013, 0.29986848514982434, 0.280888545400263, 0.2917435196616647, 0.3056371497022108, 0.24391278484227974, 0.2929315995708779, 0.2925621912450349, 0.3003962886319028, 0.2946823029577501, 0.28835068233978667, 0.3294948776107406, 0.30537018995518506, 0.07673042389229434, 0.16445360477238213, 0.3152203782791668, 0.3120683783216299, 0.31140270390463665, 0.3194043603322869, 0.1282391045742406, 0.2797515921104987, 0.12269688349490449, 0.26612276115028877, 0.04376392887534697, 0.0771027092375498, 0.2557266974293452, 0.27919583882086696, 0.24952838235996122, 0.14916356155969301, 0.20641715914103698, 0.1523178458682598, 0.13802800502054213, 0.21733584773802872, 0.20644766819547422, 0.13248909826580024, 0.11833517644484459, 0.22511615790622552, 0.5680177421004033, 0.570162225183096, 0.5825810723180233, 0.5820062867651624, 0.57574960719993, 0.5714569847471036, 0.594262477329834, 0.5807453418283126, 0.589339051462439, 0.11058961316615856, 0.11946670190103215, 0.10780173421292927, 0.10347054578471793, 0.10780688700250085, 0.10190761623259947, 0.09157643621603007, 0.09951270948387736, 0.12850461687593484, 0.16939624722788016, 0.23340161963313866, 0.17141748945145574, 0.1721069776694496, 0.16856040602784073, 0.15497551397402565, 0.1649513426917234, 0.1421449367622334, 0.15510219025896932, 0.24307809347587195, 0.27322591474652413, 0.2700131063851703, 0.262842746631775, 0.24586006562805884, 0.2576577127731692, 0.31682787431989445, 0.27456695485140403, 0.24792108053041095, 0.1561774810289498, 0.20491457611580477, 0.17848114551860272, 0.1800484435697428, 0.18248124329006699, 0.17580922632749885, 0.20609747983151605, 0.20862422760022914, 0.18662057050986547, 0.22631399250623685, 0.2191341094213699, 0.1952494295121181, 0.20824250554035573, 0.21415184567494017, 0.19950010499016568, 0.20644346110086575, 0.22494122871532873, 0.22779027684365605, 0.21796817661159162, 0.46268997831380687, 0.22334938533920767, 0.4636481007626396, 0.4704283729408357, 0.4790449678277806, 0.21518596436828308, 0.47088054628047493, 0.4646858832757258, 0.2058712122760703, 0.4502990266770004, 0.4763924224072955, 0.5301480959678687, 0.547317691309249, 0.48995895570464465, 0.4489889513843517, 0.45089128682035584, 0.4908816477857506, 0.4718670571175181, 0.497978313682248, 0.5102933265393632, 0.4434598914900705, 0.48268482814961855, 0.4431036920780612, 0.4181794697739367, 0.2110253928896877, 0.4924945905252627, 0.2169451290320189, 0.21661628510729647, 0.20264853922124726, 0.21776447193164916, 0.1990531423075651, 0.19650929319102317, 0.21366527668596413, 0.24099432035771984, 0.2190780588221367, 0.08127791553739294, 0.08568031604917647, 0.0753421257458694, 0.07822593092887453, 0.08770242055661581, 0.08113256060713281, 0.0811003084355254, 0.08380428768378356, 0.09086554268704217]}, "mutation_prompt": null}
{"id": "53936b56-0692-4b74-bea1-275e10cb550b", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 26, "fitness": 0.39364215683193937, "feedback": "The algorithm HybridOptimizationEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.21.", "error": "", "parent_id": "c6d397fd-9536-4aa4-9816-00ee60a1f9c8", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "1167b514-eab1-4b2f-ae67-f52213edf895", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "668e8194-1c03-4441-9402-a0da17c55d85", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "14f041ac-63b8-41ca-a252-dd7a5696c098", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "16bf3069-31a6-4183-818c-a3eb0d2703a3", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "d3c03eff-296f-4b2f-b657-c0620a84b251", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "9268697c-8e85-4073-af36-a3e30b25134b", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "35815eef-8ead-4b87-8503-a90adbdbcf87", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "65945106-e79e-4967-a962-a5e673be4807", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "fb6dac8d-7eab-4110-8ab5-03cc8227d5d0", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "b9690482-1063-4de9-a740-d40e140b249d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass DynamicEvolutionaryOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.6)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 16 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.06\n        delta_CR = 0.02\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                chaotic_factor = np.sin(np.pi * evaluations / self.budget)\n                mutant = np.clip(a + F * (b - c) * chaotic_factor, self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.2)\n                    CR = min(1.0, CR + delta_CR * 0.3)\n                else:\n                    F = max(0.15, F - delta_F)\n                    CR = max(0.2, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "DynamicEvolutionaryOptimization", "description": "Dynamic Evolutionary Optimization (DEO): Incorporates dynamic parameter adaptation and chaotic maps to enhance exploration and exploitation balance in hybrid differential evolution and Nelder-Mead framework.", "configspace": "", "generation": 36, "fitness": 0.3571898188669771, "feedback": "The algorithm DynamicEvolutionaryOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.19.", "error": "", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7593694781973797, 0.7311661762738886, 0.7315222673135758, 0.7659961723806461, 0.7403414787909695, 0.7614504014057422, 0.7396240471503959, 0.7350046063497182, 0.7447243570187534, 0.573988880492365, 0.5569378599694143, 0.5690241198900687, 0.5681054044166028, 0.5484390854703116, 0.5805456522702259, 0.5702927970327585, 0.5897809374047684, 0.5980729432477578, 0.16972058410024515, 0.5179446799684215, 0.5380136091208789, 0.17481432320674573, 0.48323874985720516, 0.510128116896108, 0.4930682911794192, 0.1681717177302735, 0.5624877440003823, 0.16943048717803755, 0.5037030840901451, 0.5282873447738082, 0.46793232861703904, 0.1681215286594132, 0.4977280561500117, 0.4663411074815924, 0.16196333808966834, 0.5188953041330602, 0.7162694003694925, 0.74897308421124, 0.5103288382269389, 0.748176438124242, 0.767499689557133, 0.7421546277922382, 0.6783137623280837, 0.7693327037190378, 0.6076874220926545, 0.4307827726800756, 0.4240017246251748, 0.4497443668316685, 0.38550805584316195, 0.3978611367995104, 0.3399856693456602, 0.4309740461539986, 0.4449962712785934, 0.43593055362765376, 0.1752187047682604, 0.18384547327977363, 0.16005774855026556, 0.23851574656800179, 0.24546779718423006, 0.23089521360078602, 0.1839930440327191, 0.21065086141178302, 0.20181027212210123, 0.4543117515222902, 0.4308495271970788, 0.4383620812806194, 0.4350452208010517, 0.40900313230931085, 0.4644612769199481, 0.45839442515773055, 0.4811934751376904, 0.441497762660377, 0.424397516516132, 0.42753357864457886, 0.4325737398269788, 0.43049253481219796, 0.4345564316223409, 0.4496557484143586, 0.42421574759489433, 0.4207524043591381, 0.42380581069659495, 0.027263355895243868, 0.2648051848821442, 0.348849339127859, 0.024848905059151383, 0.31268133823086364, 0.29466685344008703, 0.3385819616088429, 0.31069174484048434, 0.31621201421207357, 0.3624436210572204, 0.34828925100197416, 0.31976969566853897, 0.33541700983226863, 0.3838470701489376, 0.388285467307264, 0.37527312953809544, 0.39778781560675447, 0.38175947642946284, 0.33576131657477315, 0.294805437232212, 0.31000687300936647, 0.34696096909743945, 0.35839147397296256, 0.356433787683486, 0.30058484262084384, 0.297210056458338, 0.32810662893413345, 0.140732579449253, 0.041655298661500084, 0.1558808503123995, 0.3185177052103063, 0.35182783185824174, 0.16954898246336048, 0.12027460524148681, 0.17012885820627566, 0.16903789261974855, 0.5966409681431554, 0.5904690573598737, 0.5911077238087672, 0.5962271384789476, 0.5879784082548145, 0.5811926577083213, 0.592351003886058, 0.583771633041205, 0.6060475292405063, 0.10493106681058084, 0.11288178608103772, 0.10149211300219196, 0.10223955926052841, 0.08311849220579148, 0.09572465438988731, 0.1216065779789629, 0.11108625922279192, 0.0973873976688654, 0.20192519642334905, 0.16736769007245111, 0.1635856597152502, 0.1641080622420512, 0.1528865146202517, 0.20748247138606424, 0.16797701330860926, 0.22333376043444564, 0.1804873741567593, 0.23896120905946294, 0.2182936040864708, 0.20062383144167084, 0.22937111943265476, 0.23052361408520194, 0.22115180089061381, 0.2753421163396841, 0.24796571882046736, 0.2571118643970405, 0.17949294464047505, 0.19571345846606636, 0.1973233007172559, 0.17265772073589036, 0.17310615700702836, 0.14232142072396892, 0.18637456287228438, 0.17641597251171026, 0.14601644784207657, 0.19491351318368122, 0.25571873624421737, 0.227143042030874, 0.21590211823808003, 0.23602117843226567, 0.2351400786649278, 0.21592523447333578, 0.22940226313743572, 0.20840901636071918, 0.22172194676202817, 0.5051519550844319, 0.5230169736775256, 0.5400574622101177, 0.22363011945939393, 0.233766063387863, 0.5117280154173238, 0.5113282192048847, 0.21899077257291433, 0.5296281876430531, 0.5288329869778792, 0.503965809228025, 0.5407941018571254, 0.5123270456719502, 0.5457670723542649, 0.4949775025089863, 0.517166718603933, 0.4939915457881877, 0.49520223056859936, 0.48844892774891757, 0.5083121549221563, 0.19086456873913693, 0.18978368344554275, 0.5169181162411373, 0.4946867646213894, 0.5391200277522887, 0.4652688798159764, 0.21085191970850514, 0.226881411998336, 0.19520093363381252, 0.29916587454307797, 0.21746918964766337, 0.21149388926662505, 0.21660020916243106, 0.22083165551265416, 0.20864403012179167, 0.0829383403791144, 0.06956659378437458, 0.0812272721309053, 0.08558533060787976, 0.08581940354547368, 0.07416881269228348, 0.08394009353397325, 0.07080250032956903, 0.07182187426748365]}, "mutation_prompt": null}
{"id": "d8726a5b-7dda-4623-a998-249f5e6da109", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "0963e340-9081-4a4f-90a6-c97a89ff3b2a", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "35ee0e21-8f78-41a8-9dea-0663473e99cd", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "6f28aed1-e31b-43c3-906b-eb1d13bb876a", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "66823cbf-0725-443a-92a6-5e55e3d05592", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "72eaf775-b429-48a2-ae22-7d61f4354886", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "ca8fdb2e-16c0-4b96-9926-f3403182bc1c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhanced", "description": "A hybrid optimization technique blending adaptive differential evolution with enhanced Nelder-Mead, featuring selective mutation, adaptive parameter tuning, and enhanced exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7813998012728802, 0.7695300395977707, 0.7797683680170207, 0.7917188234084809, 0.762746336749367, 0.7863980303070377, 0.7786720135661418, 0.7828194238675512, 0.7688061025793886, 0.5900411613703775, 0.6057955773582607, 0.605405494713027, 0.5949363396500464, 0.6313316394890474, 0.6192555020388286, 0.6256809071718633, 0.6516893022634169, 0.6154687037863871, 0.5763345183714502, 0.5866957303916687, 0.5715534757726354, 0.578327281642629, 0.5776726756098498, 0.5643442229294917, 0.5946461810977188, 0.5656923702834165, 0.5586701511837144, 0.5494120418342062, 0.5763639232611562, 0.5569948459879663, 0.5439482850564654, 0.5289267759184725, 0.5396721013514197, 0.5472262373149356, 0.5380695074980076, 0.5545193992562092, 0.8368692942487657, 0.8545361270058907, 0.8800434423533493, 0.8851000714225901, 0.8559187719801868, 0.5624063800791, 0.8609928834557702, 0.9089034648186523, 0.89332209847946, 0.4847322072822864, 0.4852044685579724, 0.44882553412614234, 0.39853567685914193, 0.42602516761822384, 0.3645231017120584, 0.48293775696974406, 0.4906761192771305, 0.48191301898339667, 0.20453925209985147, 0.18835255982143162, 0.16979634449327352, 0.22731309663410648, 0.29040223526713316, 0.23019512511712836, 0.17502487246281284, 0.22289168471288134, 0.1637347241522239, 0.4732104882564576, 0.4990510080167856, 0.4829117790234637, 0.4850402653789163, 0.49003202713238436, 0.4965002692927897, 0.48729809146440006, 0.5185010486603454, 0.4980918347296903, 0.47332994457853017, 0.48673671238649063, 0.4844375883829867, 0.47518358324697074, 0.465169920149179, 0.48890280584035717, 0.4819048105992214, 0.47478826766471516, 0.464628428034104, 0.39889599603233605, 0.28163170036897534, 0.39348123238697663, 0.4007837450211714, 0.38029350996505584, 0.3787095477972374, 0.4052271204388198, 0.38693485233950575, 0.40002084453044495, 0.41783008705827485, 0.4080292615298051, 0.3913148994851874, 0.3803120644663178, 0.3702146309005171, 0.4028268317669995, 0.427833913546694, 0.4412940228449286, 0.42481521369554354, 0.23730055798188365, 0.36671966483828977, 0.36860464064427556, 0.4024756290695648, 0.39190680050222093, 0.39361357183824297, 0.35076207052554853, 0.32873492752521327, 0.037625132486192925, 0.12072804318284125, 0.23312189322852617, 0.1676665861265617, 0.1504789124524788, 0.23249716715261803, 0.14420275147043593, 0.07725130868377639, 0.11937947628956902, 0.09268496446033592, 0.6299213081333753, 0.6210804494948955, 0.6237670719252516, 0.6285621294598676, 0.6174253470404814, 0.612763408933825, 0.6233910438647476, 0.6227076060564447, 0.6314787144792027, 0.091218820746653, 0.09707745200636786, 0.10891476530849487, 0.13485003338763968, 0.0857292875241139, 0.10798293866291242, 0.10381868152189222, 0.09006020760083955, 0.11860868866891361, 0.1461220687107827, 0.16127407886036182, 0.14627657420250684, 0.1811000269247658, 0.14858612340114719, 0.19034789258768192, 0.18012368113298838, 0.17189500918474165, 0.1859390261710826, 0.25555256489070666, 0.20508797874931606, 0.2542715935568458, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.2653804632486213, 0.27341637535504904, 0.2264702746261249, 0.1569270563432481, 0.15996647856024904, 0.1970652489551179, 0.16930591817756646, 0.1681070708838659, 0.19182129834192285, 0.1728005259926111, 0.23322518500939837, 0.18668720188846544, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.20856622802417124, 0.22456798472390094, 0.23127792328859198, 0.2063089365504288, 0.20572018243907209, 0.2350512256414572, 0.22210084010225606, 0.5536968343980988, 0.20413109479108493, 0.22005034428509485, 0.5587707472717103, 0.2277199640501748, 0.2212775334636703, 0.20303661351524793, 0.2319143357984833, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.5384563647627174, 0.5385615494463508, 0.5794802320636884, 0.5676270086338883, 0.5428721422864853, 0.5630550754901109, 0.5395186894164997, 0.5343856156773907, 0.5627127207081131, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938207, 0.40770144594632096, 0.21599698505480047, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.09320994520533399, 0.08765667072870653, 0.08057455114338585, 0.09578146956733913, 0.08304708833466934, 0.12243837469962349, 0.08754051161522036, 0.0831829454309938, 0.0719487052385741]}, "mutation_prompt": null}
{"id": "2300b08e-82bc-4850-83dc-ebfe08d7eb3c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedWithStochasticTunneling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n        self.beta = 5.0\n\n    def __call__(self, func):\n        def tunneling_func(x):\n            return -np.exp(-self.beta * func(x))\n\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([tunneling_func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = tunneling_func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < func(best_solution):\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedWithStochasticTunneling", "description": "A hybrid optimization algorithm blending stochastic tunneling with adaptive differential evolution and enhanced Nelder-Mead for efficient convergence through landscape transformation and selective mutation.", "configspace": "", "generation": 44, "fitness": 0.25971031355034346, "feedback": "The algorithm HybridOptimizationEnhancedWithStochasticTunneling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7928746613570566, 0.776226330771834, 0.7884350744065877, 0.5096050625501816, 0.4798655931703364, 0.16913784405119947, 0.49427808682996777, 0.49597913338107824, 0.4984092309548659, 0.36576756971133506, 0.0, 0.3441102057215737, 0.3598173395042301, 0.0, 0.4170649884636456, 0.33484885010391796, 0.3326626168500385, 0.008012116427139837, 0.04291592729116911, 0.0688081148075631, 0.03867874322047682, 0.11346592466509542, 0.07792956455026212, 0.07576054024713719, 0.042470012287540104, 0.030719865699002313, 0.02266914584851276, 0.047465909550209684, 0.03801769813150546, 0.03877505766011602, 0.08215848676889559, 0.0798983928147442, 0.07400208314887313, 0.03355562341035834, 0.01679031805932396, 0.031968030695407657, 0.8784388188873071, 0.8545361270058907, 0.8800434423533493, 0.4755290260323761, 0.47907008635206105, 0.47730459505267586, 0.8142032179835714, 0.8394929351989717, 0.846039406576222, 0.4804043486392423, 0.47237353925111936, 0.39015336248835997, 0.30007787460065416, 0.37028216387644375, 0.4508073024354622, 0.2912580798609955, 0.28971984338505885, 0.38297133510566905, 0.171313589757772, 0.13204100963122578, 0.1417971006194212, 0.17832205530153622, 0.19105860285121978, 0.1829379521264919, 0.18724730347509533, 0.23870655758006487, 0.20445456689163444, 0.4147472828524901, 0.3301221266397196, 0.3944553168623901, 0.39087934509490474, 0.418712529214069, 0.38917690876571065, 0.43423744321808166, 0.0, 0.3912298506156613, 0.39970208166828025, 0.2639829392175289, 0.3889952172560077, 0.06257947860184998, 0.04514719686096813, 0.3621859054548777, 0.41037608500616385, 0.3272975313702775, 0.3776855993767707, 0.0, 0.0, 0.0, 0.3545566500238597, 0.011087282683348909, 0.3441431359409759, 0.3731452085336502, 0.32261184291716605, 0.3427848498685815, 0.4066461091592056, 0.3917157482173421, 0.37791812966408345, 0.36378792633023294, 0.3495917786469861, 0.3974280920971325, 0.39755028064422127, 0.42636578754557686, 0.39138463151136693, 0.30369543212374883, 0.017920717561652255, 0.10146868919082774, 0.0, 0.3345858047482687, 0.0, 0.2853551798333347, 0.0, 0.30517183593594077, 0.2954433449847329, 0.01844812883621838, 0.021049748278931246, 0.06863384798040284, 0.003002124625062441, 0.129382671420457, 0.22706474738635885, 0.057989392167570486, 0.04063068930216218, 0.6328587725387875, 0.6353710565867436, 0.6372327222125617, 0.5145937415352937, 0.17816729419803268, 0.4886305743002304, 0.6105829052065228, 0.6167412218424704, 0.6232114874646102, 0.05041943184228603, 0.048826482577304486, 0.03746203869057463, 0.07825867691725397, 0.06503550053620533, 0.09393977279877086, 0.1219018157648144, 0.10650613007261323, 0.10746526086470198, 0.1496177870329426, 0.18488617439393606, 0.15388677660338201, 0.13757644454576368, 0.13995305109012823, 0.11903691567717545, 0.17993441398443066, 0.17560627777318516, 0.15796760175623525, 0.25555256489070666, 0.20508797874931606, 0.22063595226509747, 0.21810611709164673, 0.2684332930356721, 0.24007965155787803, 0.1590522265761365, 0.17477318890145255, 0.15712565198388817, 0.16235895428501046, 0.16255650127566856, 0.1795473629639306, 0.1625481919418439, 0.18269779512881512, 0.16007162712483058, 0.09593122394561382, 0.11098178214013443, 0.1194013242121682, 0.22868127483142875, 0.21109901287844368, 0.22845761733490755, 0.2770977313386388, 0.19356077320558507, 0.21447258880871323, 0.16717157377384684, 0.1965539940573875, 0.14184888730160528, 0.14015726603251966, 0.1623097622783125, 0.16132691202115546, 0.15586874141360962, 0.1576959772568287, 0.09468277692787508, 0.15266472701068434, 0.1386380825827429, 0.15248283612636482, 0.16840145961744857, 0.18665492166074016, 0.5735391591787689, 0.5851198729479412, 0.5763155010751213, 0.5380008242345775, 0.13119690055637, 0.11772085075267857, 0.15781475877135964, 0.5093749787779939, 0.1824947268878132, 0.501691881926391, 0.16095458326595635, 0.4804780401259954, 0.1550146435055747, 0.5071229828232746, 0.5430811831793931, 0.5399093383942276, 0.20193179250733062, 0.21240064522938196, 0.40770144594632096, 0.21599698505480036, 0.18385675929890333, 0.4247473202798774, 0.20129471254792408, 0.30465205286532526, 0.20160261533378032, 0.07429965474503375, 0.06577844906377928, 0.0528574252680033, 0.07691766158948199, 0.08260369672212764, 0.08090462008945942, 0.08719313250470062, 0.09063802867748871, 0.07598083674520217]}, "mutation_prompt": null}
{"id": "79036571-2824-43e6-9adf-36f257152323", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 45, "fitness": 0.397839755528747, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.21.", "error": "", "parent_id": "53936b56-0692-4b74-bea1-275e10cb550b", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "fe72ccc1-6aed-45ab-86ba-813f7c902cfc", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass AdvancedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 15 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.06\n        delta_CR = 0.04\n        epsilon = 0.005\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([0.5]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)\n                    CR = min(1.0, CR + delta_CR * 0.35)\n                else:\n                    F = max(0.15, F - delta_F)\n                    CR = max(0.2, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-5, 'fatol': 1e-5})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "AdvancedHybridOptimization", "description": "An advanced hybrid approach blending adaptive differential evolution with a refined Nelder-Mead, incorporating a dynamic mutation strategy, adaptive parameter control, and strategic local search enhancements.", "configspace": "", "generation": 46, "fitness": 0.36994708167506785, "feedback": "The algorithm AdvancedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.776422738977725, 0.7552281361695117, 0.7468583772644665, 0.7596959725046909, 0.7566923487811189, 0.7388998539442808, 0.760367985127879, 0.7649515878305241, 0.7635498270571257, 0.5869174409404438, 0.568727034962298, 0.557590607775456, 0.5730364935119857, 0.5987255165226464, 0.5657651010868991, 0.5571771697429134, 0.5695107404539959, 0.5806692210821612, 0.4807667472876266, 0.5135323334866225, 0.534664384639402, 0.4839287034678783, 0.5039232285393256, 0.5244791844113135, 0.5061675328446067, 0.518198489479547, 0.5139040469672956, 0.16634298812739212, 0.4486802902313213, 0.4776060854466787, 0.47119260047890166, 0.48568358694612357, 0.50071474514053, 0.4584649690686411, 0.4501599088569789, 0.44006903247715623, 0.8735188597528813, 0.8790064136941371, 0.842728220099227, 0.8911607987801868, 0.867905937219448, 0.8445067943032063, 0.8754039988381813, 0.8779166505250382, 0.8580254347167677, 0.4045640154086847, 0.45913342160151993, 0.437719381213565, 0.40084052431677286, 0.43237483049329173, 0.32780327971861056, 0.4465148716518038, 0.4487845815449404, 0.4529111354557903, 0.19848280596878665, 0.1824497676789446, 0.16721692230953522, 0.2800904211470232, 0.30777167889768586, 0.2563155312154338, 0.1753410160051866, 0.2421943144827301, 0.2889148650241712, 0.4591207019911827, 0.4416079254402071, 0.43399452776194913, 0.43306808794987994, 0.44743283342928464, 0.4430671450416809, 0.4581643343101425, 0.47552708800414456, 0.46295589877346754, 0.44221840855894246, 0.4273763649612856, 0.43720695207396343, 0.43913106615593456, 0.4443741337301752, 0.44227190628282964, 0.41359696733146567, 0.42746482933757857, 0.4339029949667058, 0.34565979289894033, 0.030783059724828865, 0.33809599671527335, 0.3174901822633457, 0.3573799737945731, 0.3329550266796478, 0.34651321845110483, 0.0, 0.3336401144898238, 0.35307830174059796, 0.3187918604993819, 0.3275351326209568, 0.3212243091413678, 0.34007086780992457, 0.3790830921498233, 0.36191619836935507, 0.3316382022141222, 0.38695477838879755, 0.07663687511483153, 0.2964805420519182, 0.06496064320192474, 0.34552483710845117, 0.34947040358293746, 0.34642904460596324, 0.2788341457000828, 0.1160888310981556, 0.2947361420596317, 0.13665209569468917, 0.07652327920176172, 0.20414632830458446, 0.09576386415142957, 0.0944182865063603, 0.2704541901215254, 0.10931708582454558, 0.12081641609602733, 0.15780182778788987, 0.5979035820462815, 0.6014385222300613, 0.605002351501674, 0.6107499263945806, 0.5970767975344096, 0.5979185900776534, 0.6003662748746352, 0.5980308018321203, 0.5958009698675697, 0.10726273506910289, 0.1013639563434775, 0.11730901627030621, 0.11113862005328734, 0.10419211468537792, 0.10250626904808813, 0.13780795500213427, 0.12573015357833972, 0.11501912467237763, 0.16415559681371938, 0.16928504418410661, 0.20281383238542372, 0.21092014234065193, 0.14954026186443592, 0.15030388479503576, 0.18049529668311992, 0.224549102603668, 0.2132811149581716, 0.23969361924285837, 0.22560185997377868, 0.2617365904971912, 0.24728923893811028, 0.273578051009047, 0.22767187931955546, 0.29398654690384973, 0.2663844820933141, 0.23907994094470586, 0.17576305811770687, 0.1895213434319759, 0.17462028237667415, 0.17998035696924197, 0.2002927262909645, 0.17100414522796203, 0.18780987364989277, 0.20473914929209802, 0.1977875339640046, 0.2641387848142873, 0.2592628113100547, 0.2320057144447656, 0.19368651083426158, 0.2332342143498285, 0.20307750649145184, 0.2426139332872641, 0.2080778276161379, 0.22220783745273098, 0.5235466786063407, 0.5124944420275539, 0.5073161630751388, 0.2268555657310224, 0.22528165169548897, 0.5080470904197046, 0.5377140976996218, 0.20392982631928602, 0.4947215856445707, 0.18074629662616515, 0.5029039514008811, 0.5326406153643524, 0.5562319309972676, 0.511249677919111, 0.5452162147626785, 0.4974735656355518, 0.5419453245694036, 0.5004182282830025, 0.5346871276985932, 0.5088790815636794, 0.4815979393812678, 0.5134305062401261, 0.1829367995309824, 0.47920594709423514, 0.47358187641991567, 0.5826397064792797, 0.1872942110879643, 0.21284975253133775, 0.18997719789263734, 0.19763404553883057, 0.2168566452928119, 0.24674917585347522, 0.18145528423376645, 0.22610710748805896, 0.22907614183774316, 0.20307342194575906, 0.07781671623088315, 0.08014495775690089, 0.09648829452990026, 0.09124529039040719, 0.08055693362278837, 0.06777831737262607, 0.08429242442327745, 0.08585090109032845, 0.08161447899399377]}, "mutation_prompt": null}
{"id": "aa596163-62a0-4913-85e9-d3528a999c29", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "19177646-d6a0-43b9-b617-e35dfc30a92b", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "d0628f54-e769-4083-aec3-f003e9c92a59", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 16 * self.dim\n        F = 0.6\n        CR = 0.9\n        delta_F = 0.02\n        delta_CR = 0.02\n        epsilon = 0.005\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        def stochastic_ranking(fitness, constraints, pf=0.45):\n            N = len(fitness)\n            indices = np.arange(N)\n            for i in range(N - 1):\n                for j in range(N - 1 - i):\n                    swap = False\n                    if constraints[indices[j]] == constraints[indices[j + 1]]:\n                        if fitness[indices[j]] > fitness[indices[j + 1]]:\n                            swap = True\n                    elif np.random.rand() < pf:\n                        if constraints[indices[j]] > constraints[indices[j + 1]]:\n                            swap = True\n                    if swap:\n                        indices[j], indices[j + 1] = indices[j + 1], indices[j]\n            return indices\n\n        constraints = np.zeros(population_size)\n        while evaluations < self.num_de:\n            ranked_indices = stochastic_ranking(fitness, constraints)\n            for i in ranked_indices:\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.2)\n                    CR = min(1.0, CR + delta_CR * 0.3)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A refined hybrid algorithm incorporating stochastic ranking for constraint handling, improved mutation strategies, and adaptive fitness sharing to maintain diversity.", "configspace": "", "generation": 49, "fitness": 0.3604789342353072, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.19.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.653078806437454, 0.6535369020894884, 0.6515287992372176, 0.6582531853361948, 0.6568055667648018, 0.6647131094232037, 0.6459075597238979, 0.6930686325706429, 0.6608975699336728, 0.43262329054962634, 0.45928104950040194, 0.4439279184070227, 0.45838695550577, 0.4560016800060376, 0.43733810521583016, 0.45453983646965535, 0.4410397795151251, 0.4625628733661714, 0.4887656887395574, 0.4972771396264407, 0.4844122982153898, 0.4861031958046804, 0.4798832817792321, 0.4788665024193811, 0.16399748781406998, 0.4759210756855191, 0.48890995008769955, 0.4610642873845412, 0.4627628829952849, 0.47663261270409063, 0.14247955632414488, 0.457885661571661, 0.46139996569132047, 0.46097354558068204, 0.1541619114992685, 0.46717362859616884, 0.8745447511906429, 0.8198697505324285, 0.8777106187205286, 0.8192631958704439, 0.8169149093115319, 0.8858715786647207, 0.8491895109705141, 0.8364928190329255, 0.8420997834790399, 0.29360556866809306, 0.43700215074372395, 0.36934018495818277, 0.4177537406335591, 0.37668557824195825, 0.3587514029346258, 0.45000375397755477, 0.4484711937165923, 0.4494699483479653, 0.19553065267680592, 0.16026789150395848, 0.18443122051337413, 0.2394049475655693, 0.24251903411513365, 0.24962697799498312, 0.21003812621427265, 0.21558668267044645, 0.19896272586391683, 0.45174912235934694, 0.44398991351180006, 0.4325773758141963, 0.4454823110508218, 0.4510349851959028, 0.4517260019859848, 0.4531808559125208, 0.4623695494453163, 0.45612666749582875, 0.4188323512261647, 0.4218363107537966, 0.4198874402031598, 0.4425681914225492, 0.42412293787662736, 0.4411634484110213, 0.42510098133293805, 0.40924848426774474, 0.4318040032038438, 0.33194401385622496, 0.32377241101558973, 0.2998503539449934, 0.3427855227503114, 0.31815389799284344, 0.3000993224717522, 0.34580821909228454, 0.3373662138104956, 0.32967787115805036, 0.3357400672242017, 0.3153749762690685, 0.36922435516067587, 0.35150451122000526, 0.08193434968833535, 0.3952579026820957, 0.3733465402236319, 0.3648951616920213, 0.4064617894038379, 0.3079250032918607, 0.3352314402385287, 0.3010204342557352, 0.35958007266236525, 0.3488954507667542, 0.35308400308732846, 0.297568554072957, 0.27695074147371035, 0.3246054818973635, 0.1364467018122657, 0.05441162327091298, 0.17286211054735157, 0.2075382614225597, 0.14737256363346662, 0.12106299168522305, 0.09876559401032647, 0.08527265290584163, 0.33244006500528744, 0.5902182459062202, 0.592114518785399, 0.5862739637792642, 0.5983534143146371, 0.5843633070184278, 0.5917849318639847, 0.5858847961868989, 0.5838947879186089, 0.5984671903588978, 0.12351217420133276, 0.12011627566187522, 0.09561142379157173, 0.0832098526822952, 0.08435752278216702, 0.10338743016768515, 0.10506420134477812, 0.13248731072797915, 0.43523556099817073, 0.15708532767785743, 0.15333599200325776, 0.1872890262752699, 0.18004772342523012, 0.2710670456633747, 0.17887287330715584, 0.19107122186309555, 0.2212448232224642, 0.17588583888696485, 0.2290799567234899, 0.24204497228243038, 0.2592839019127613, 0.21647556887838537, 0.2475103670166312, 0.20406249504804452, 0.2467051540871087, 0.2462333132037703, 0.20667186461455, 0.19269334279594463, 0.2050158877313646, 0.15567635329466134, 0.15561177364248613, 0.18711619343621955, 0.17447669338973681, 0.20865119934331944, 0.207467508916377, 0.16767417526000916, 0.20796063529266207, 0.2582094642491779, 0.2078221639848561, 0.1973562539285988, 0.2246440698411747, 0.2063094408607189, 0.2106697034269377, 0.2237524849981346, 0.2348093018143972, 0.5200635669344842, 0.502061767452717, 0.5080526164697962, 0.516826648576649, 0.5045852473696304, 0.20156770489553888, 0.21217639547358313, 0.20403834560244505, 0.5130546839527319, 0.17437742282090696, 0.5114519925685481, 0.5073805300816836, 0.5104382099858993, 0.5213454894813605, 0.5025429461270281, 0.5467213687907604, 0.5230600881777657, 0.5678818667887835, 0.5152271071856389, 0.516661215669894, 0.48161831866028115, 0.17813635334198497, 0.5039292798600894, 0.5402510783071148, 0.48530799211383735, 0.5039395737601742, 0.5025894665876101, 0.24407298784916043, 0.21093845382813448, 0.21562326268876897, 0.20515264285139778, 0.27268386266441946, 0.19212004662012327, 0.24450723899984783, 0.21507639052483318, 0.2233328367439169, 0.08815533456748148, 0.07718166085165046, 0.102428779826372, 0.07834739552620018, 0.08912353467873035, 0.08822950357656356, 0.08046180322975638, 0.089172310278549, 0.07873030284403593]}, "mutation_prompt": null}
{"id": "4b161797-aac4-4156-af12-3ca2ec8f5895", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 16 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.05\n        delta_CR = 0.02\n        epsilon = 0.002\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1] * 4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)\n                    CR = min(1.0, CR + delta_CR * 0.35)\n                else:\n                    F = max(0.1, F - delta_F * 0.8)\n                    CR = max(0.1, CR - delta_CR * 0.7)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A novel hybrid metaheuristic strategy combining adaptive differential evolution with enhanced Nelder-Mead, utilizing multi-parent crossover and adaptive parameter tuning for improved robustness and convergence.", "configspace": "", "generation": 50, "fitness": 0.3877211845360976, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7361329889801691, 0.7237039130235852, 0.7556179440069984, 0.7486237707128873, 0.748287808223042, 0.7283056559705559, 0.7532124730126956, 0.7333744671377842, 0.7473749090541817, 0.5544722866416243, 0.5745333432230991, 0.5844769188996141, 0.5740980879269315, 0.5984924835636694, 0.5902460583094635, 0.5605515789654704, 0.5718422709741494, 0.5708685913943732, 0.5481742969827124, 0.5427861444606339, 0.5369519220319365, 0.552185898373339, 0.5510037280187132, 0.5840345796534148, 0.5569800743787168, 0.551161622269253, 0.5445793414282365, 0.519348621171253, 0.532750476243373, 0.5052924408841677, 0.5204770644986914, 0.5090714250859636, 0.5231961791235118, 0.5290987948448409, 0.5267252444894679, 0.5261616246234952, 0.8594216049222885, 0.8829811920266192, 0.832092883676408, 0.8271170833687599, 0.8804983837795319, 0.8361778071476565, 0.8426625287737122, 0.8903843426059016, 0.8009812963343407, 0.43085196023528405, 0.4099354063742249, 0.45328372121966454, 0.4484394067415416, 0.4259738793771356, 0.451732971874241, 0.3858002441086643, 0.485517985437262, 0.4878290378466227, 0.16476906070487152, 0.17188651255546228, 0.19286580068543258, 0.19986138396146036, 0.24087938341781645, 0.24168875887971164, 0.20351891839882996, 0.2896153153805443, 0.19369998336276573, 0.49596244413147017, 0.467666259187275, 0.48778631712226805, 0.49494029603808753, 0.48809078645865944, 0.47206632621430344, 0.49656077390868436, 0.49817396796306446, 0.4762747906022521, 0.4836431968876864, 0.4627529017212201, 0.47967430593643423, 0.47228748987815994, 0.45601098876853563, 0.48107998069624347, 0.46315990460009204, 0.464466962400104, 0.4785842298801607, 0.40300688969819753, 0.0453213929403552, 0.043008447282953055, 0.40025334647745914, 0.39842560966814256, 0.3962289337409334, 0.4155242659532463, 0.372109196882643, 0.03878963459854279, 0.38956514151797084, 0.39524279253362393, 0.4233049553781105, 0.39828122251006326, 0.38306932195341437, 0.36107766098298455, 0.4101669330137905, 0.41464670354354105, 0.40208536408281836, 0.34425613121947973, 0.34467846865946417, 0.39319815690346804, 0.4044037632675451, 0.41139930072003594, 0.39316745464735836, 0.3319086400140874, 0.33607169342706456, 0.3657093349886612, 0.18012663476454693, 0.08128200118455531, 0.16366279676291018, 0.1484583060591298, 0.09048344266863861, 0.3890302950910305, 0.20288211255149458, 0.27958032243138464, 0.10853594916348885, 0.6034123210307225, 0.5990080732054868, 0.6279475297801462, 0.6142370904601382, 0.6253379209902459, 0.624594577403034, 0.6280760291307508, 0.6138331013199401, 0.6172944205252668, 0.09582565302293766, 0.0927622656815632, 0.12062775941169179, 0.08754007711982426, 0.08905548771484117, 0.13274903701652097, 0.0850524530163802, 0.12129854458497502, 0.08485133582352244, 0.15340213059667018, 0.1878796280461995, 0.19118839203758586, 0.2427961748619718, 0.14433220094147126, 0.17855700363657867, 0.19326134322436772, 0.1903391925380088, 0.15200501502036456, 0.2400400568007509, 0.22841808833930888, 0.21485957495246533, 0.22528498226268323, 0.21405094005627068, 0.23348745387600012, 0.2812546774535629, 0.24381238838196007, 0.25739247664757203, 0.2027478456823386, 0.18208517310118277, 0.14093008223275683, 0.18270070168223718, 0.16661705677646355, 0.1810701191778714, 0.16530279808413728, 0.19591430287742606, 0.21752843583225023, 0.23402179139555435, 0.2226915163918397, 0.2407389650702514, 0.21764634889343926, 0.20341191506757628, 0.22948984143434115, 0.20391903840160064, 0.20619870227873394, 0.21365050069110803, 0.22136228550686976, 0.20623033866459173, 0.21896544597928447, 0.5554178788290363, 0.5439049956015356, 0.22829647117329888, 0.5380492481773138, 0.2054378115059763, 0.5416212121737604, 0.5680639818911305, 0.5586145558042823, 0.5564545438513401, 0.1847902240995214, 0.665057235404086, 0.6030325523253726, 0.5508207073739488, 0.5394891047362236, 0.5496050972793585, 0.5343519424171259, 0.5438973022428584, 0.5763917123249624, 0.18477727526561571, 0.5385937839257143, 0.20355573985242592, 0.5387290098072743, 0.5346123615484148, 0.5615444576705564, 0.2246250454795743, 0.21149456650061094, 0.214677040491845, 0.4587364334375805, 0.19907178110466395, 0.2064912223556491, 0.22751434829381212, 0.21875919836265656, 0.19845555291835004, 0.08085136903148626, 0.09336983666541854, 0.10211065224988802, 0.0804621948583566, 0.07519848168620935, 0.08941049954286862, 0.08307840874820616, 0.09264799231274956, 0.07383700688580597]}, "mutation_prompt": null}
{"id": "131220f9-7135-4041-8b1b-0a01c5f5b0a3", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizedAdaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 16 * self.dim\n        F = 0.7\n        CR = 0.95\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.002\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)\n                    CR = min(1.0, CR + delta_CR * 0.35)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizedAdaptive", "description": "A refined hybrid optimizer blending adaptive differential evolution and enhanced Nelder-Mead with stochastic parameter adjustments and selective local search intensification.", "configspace": "", "generation": 51, "fitness": 0.36726746088058965, "feedback": "The algorithm HybridOptimizedAdaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7408753132059545, 0.7436939108579002, 0.7525431441938869, 0.7616205426851238, 0.7451435439875131, 0.7569048330841708, 0.7587832521403263, 0.7594715450812966, 0.7485273040077156, 0.5523968987073671, 0.5646985888998703, 0.5884611635690435, 0.5699497554498534, 0.5822666906044733, 0.5824288385655758, 0.5667073598957854, 0.5576353560308756, 0.577599961217245, 0.5618633915166776, 0.5019900548629171, 0.5195986225187303, 0.5210919778893934, 0.5567401365659533, 0.5294514390775522, 0.48845753582935736, 0.5246919774954746, 0.5147237396352661, 0.48213736475105384, 0.1663369183311283, 0.5053994914503825, 0.1654448458797746, 0.5193737985269481, 0.36949668735359886, 0.5030407979641915, 0.48462380526919546, 0.4842860651406343, 0.8617603019486427, 0.8244852182139569, 0.8591781523420877, 0.8654778771710295, 0.873463466251291, 0.8523196412210903, 0.8249425953450789, 0.869370958770694, 0.8480093118352013, 0.42749630348808754, 0.41400316629092193, 0.42893705504141266, 0.3279305948626985, 0.3705864070735484, 0.36606891888643245, 0.4318315921252246, 0.4484506539840476, 0.43345911034749784, 0.19622390104888887, 0.1749123931368184, 0.15497075251775638, 0.2594305128651502, 0.25180340695974246, 0.20358920735428931, 0.21392073655924637, 0.2583369647646767, 0.16842901618678074, 0.44519628568864034, 0.4321068771627272, 0.4525022242904524, 0.42461142338444946, 0.45958657458535024, 0.425974889948861, 0.44445350186834753, 0.449136221658089, 0.4322970151242995, 0.41861995919723227, 0.4117025973028978, 0.43057459295530554, 0.4419286688863888, 0.4113531177560136, 0.439143712001986, 0.42285435915013136, 0.436550502928134, 0.43723123312144363, 0.27877837044561604, 0.34198255685678747, 0.04020696900782117, 0.019276604733912794, 0.34624166536799106, 0.3559273316601914, 0.34414328207209754, 0.32364173703159893, 0.3256526817370099, 0.32867040686026217, 0.3763026240954057, 0.3813077897969831, 0.3769613466820608, 0.3535851148925171, 0.3152549041810927, 0.36191927957267334, 0.3908538425311149, 0.3950218942883459, 0.23892471147537175, 0.12253311830748603, 0.333698354694991, 0.33028766650821306, 0.34685196844360955, 0.3456164825324569, 0.2729336492260883, 0.3014641124849151, 0.2944547909734726, 0.13561416346493171, 0.1345420093306251, 0.11551233577243347, 0.1205156616980636, 0.11324631961279918, 0.2147579332198869, 0.10669178070038998, 0.13252376318380799, 0.09127464572376265, 0.5871200681371906, 0.588720512596316, 0.5878972100054796, 0.598641393869281, 0.6048937347667416, 0.5839085942983049, 0.598349161119252, 0.5896839904381455, 0.5882404750332562, 0.11133846627512745, 0.13164081920150073, 0.09965424598629491, 0.11041489668743087, 0.08538487143917661, 0.10283044556045606, 0.0911590504609261, 0.10409172837786795, 0.09542948870017443, 0.1458452814805572, 0.1996163299798267, 0.18092363776375486, 0.1624958531115217, 0.19756415472307742, 0.1495931161649492, 0.21617581938969088, 0.1675430991218404, 0.18478633028310631, 0.22107094307148956, 0.2383572994894364, 0.21808003638953788, 0.22954166368619755, 0.2245716995380055, 0.23033147796813724, 0.2515358930621503, 0.24393705636714813, 0.2635303339432138, 0.1698213850003394, 0.170961757959615, 0.17240395520369478, 0.1826556057813079, 0.16365383358313923, 0.17515961769333221, 0.16753467348230966, 0.21209808080123094, 0.18673794428720292, 0.20233937808015634, 0.23601019008241508, 0.21756562590671713, 0.2245272169485184, 0.19088995173061318, 0.23534270289075132, 0.2290157068917208, 0.22179929802423937, 0.24481219493131257, 0.5236061424674072, 0.5146975083173523, 0.5115210194546442, 0.509156604929846, 0.5224779169913387, 0.5108385017352093, 0.20900973196162176, 0.5074364666442904, 0.5148795091087849, 0.17393055765422794, 0.5549702496586981, 0.5376926184530957, 0.509272065607523, 0.5525347357017389, 0.5318099254733508, 0.5125722744372092, 0.5229495875221775, 0.501149008303438, 0.5248068430852004, 0.47167068748010654, 0.5024418250724128, 0.18044424862815145, 0.18707413133058548, 0.180688820126523, 0.5007099848331488, 0.4979683477029233, 0.573328612383181, 0.26304323880238967, 0.19833822894001663, 0.19798134279022517, 0.21320504201918689, 0.20289316760389442, 0.203192526006446, 0.19426343268871027, 0.2286709357483303, 0.20418372571356902, 0.08181076316925573, 0.08064078505704109, 0.08877990043452155, 0.08297775143635222, 0.08410206957661048, 0.07702021313523733, 0.08863700109850925, 0.08362537428174421, 0.08769933386391493]}, "mutation_prompt": null}
{"id": "a5470071-6550-4e11-aad9-0572c5182168", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.6)  # Slightly adjusted split to enhance DE\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.7  # Adjusted scaling factor for more exploration\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.03\n        epsilon = 0.002  # Slightly increased probability for weighted recombination\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([0.8]*5)  # More emphasis on certain vectors\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy blending adaptive differential evolution with enhanced Nelder-Mead, employing a refined adaptive mechanism for parameter control and strategic mutation selection to enhance local and global exploration.", "configspace": "", "generation": 52, "fitness": 0.3848597066575071, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7751612760224522, 0.7886966728784635, 0.7761278837209924, 0.772373660725439, 0.750575237209022, 0.776280517358161, 0.779548975154556, 0.7951518382898468, 0.7772511998866346, 0.5936877268998115, 0.6202484481061723, 0.5756717687150867, 0.591470321108056, 0.595728466029577, 0.6170381046500037, 0.5922299283352543, 0.6053760610131416, 0.6192906816127026, 0.5588105868153276, 0.5321279790633603, 0.5600820672918578, 0.583897616257388, 0.5246946035038543, 0.5443767648070528, 0.5120586179884823, 0.5603701920562515, 0.5345380361295453, 0.5178305157201211, 0.5304756891244659, 0.5358932186918519, 0.5224668363363822, 0.48752541343732225, 0.5298299537007888, 0.5030487732976595, 0.52872771350702, 0.5020156375632545, 0.8594433596777357, 0.8476777813329454, 0.875979349849454, 0.8754084210774629, 0.8910500281923508, 0.8620584847560323, 0.9192893076620074, 0.8614618350068161, 0.8860724757061361, 0.42381944191389, 0.4211440100144562, 0.40321431793207874, 0.40070162087226624, 0.3324863493758782, 0.3628759575277216, 0.42774486699783665, 0.4383222315505202, 0.4628547404356934, 0.18643187283393658, 0.17734712154893129, 0.1730468001407538, 0.2916415510112905, 0.6106108221575923, 0.2273018038160981, 0.17781291702138546, 0.2587214561001552, 0.19574156871887827, 0.43270292374056596, 0.4415350524147359, 0.44790234923847294, 0.42790841457211126, 0.45831889988019947, 0.4765689995785688, 0.47064499002772986, 0.4474820982144597, 0.44665663742527173, 0.42979309155666334, 0.4304742359419925, 0.4300601924120172, 0.4210231370238908, 0.4214184073796249, 0.4368279858914438, 0.4236714323643941, 0.4125316951141329, 0.41621691327951804, 0.33564365920802597, 0.2993773018437347, 0.03082564794965925, 0.32622386319086083, 0.32552136503076556, 0.33672818481437994, 0.32769562422721665, 0.34382726069899794, 0.3490997613393887, 0.38173573238021685, 0.3335559964719842, 0.3732829307582153, 0.3663609353457188, 0.32814505826390084, 0.30017972880603416, 0.35353897131693734, 0.07679510614721552, 0.0492219668815822, 0.33843714996365837, 0.15416242537592406, 0.337080854005518, 0.3362881977807045, 0.34983839660075355, 0.24691354413800903, 0.3068467966480034, 0.31940894656283947, 0.28308774783086943, 0.1697253510907225, 0.19529311991275666, 0.14276468034042633, 0.25961804604348804, 0.13643154800635982, 0.28717219405937544, 0.16887401757890363, 0.1600435577353102, 0.10179201277122907, 0.5932726930828219, 0.5914954145441438, 0.5970776796592918, 0.6046952960922843, 0.5940507697492924, 0.6127783931215002, 0.5959982391369962, 0.5908513798031719, 0.5991246372218242, 0.10993502638178465, 0.1113084909325357, 0.11271731395823792, 0.10709069435650032, 0.08447459543047608, 0.08259792955087308, 0.148047776896144, 0.111939802325969, 0.08687438617422938, 0.15086259079209485, 0.17363613669225797, 0.14820673342534096, 0.22085098645480306, 0.17689628560767434, 0.19292668133202784, 0.1843752329396532, 0.18831161735376978, 0.19311393079854655, 0.1987315644985599, 0.2350458404558532, 0.21806627175427407, 0.23243890001644196, 0.2325512880606938, 0.24762983612398093, 0.28162235228426746, 0.24554389843171598, 0.2402248767287175, 0.14313261666138244, 0.16788178792497188, 0.1821136836492, 0.18972990459531425, 0.19124559504652683, 0.18526825484495535, 0.22666086675824726, 0.19492611829508577, 0.19328372350816914, 0.21564380561720609, 0.22058945199555724, 0.19954453667917504, 0.22615525723535435, 0.23727004858221867, 0.22926936760706973, 0.2231795419745738, 0.21697724384851114, 0.21079091653844484, 0.5429463143889318, 0.5096201773113725, 0.5126643990627642, 0.5294732280180385, 0.5466712256505647, 0.50904766757052, 0.5222735019571443, 0.19839906186467382, 0.5077261792112466, 0.48391207920331236, 0.579697214444648, 0.5627032033666102, 0.5014135298663203, 0.5241134441616999, 0.5301522249956567, 0.4858001059234496, 0.5400514604138553, 0.5124478450295951, 0.49788373832202637, 0.4879533170423095, 0.5761344509111307, 0.5177337688690168, 0.19439759494313114, 0.5698293567990631, 0.4944474893919719, 0.5267622328883561, 0.5025693024330058, 0.22016540894804537, 0.19504651780916815, 0.2040249930112935, 0.23191090248659707, 0.21948764384167285, 0.2124667491379073, 0.23074915791678685, 0.2030367514311786, 0.19036943686019503, 0.07452848389146294, 0.08444661183274293, 0.09552995856102242, 0.09161927579972196, 0.07743384908730144, 0.10644278454968603, 0.081776610056567, 0.08481731223890143, 0.08577719957700425]}, "mutation_prompt": null}
{"id": "66c524fb-b7ff-498d-9bde-a457392212a4", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefinedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.01\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([0.8] * 5)  # Adjusted weight distribution\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c) * np.random.normal(1, 0.1), self.lower_bound, self.upper_bound)  # Added stochastic scaling\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F * np.random.uniform(0.9, 1.1))  # Added stochastic adaptation\n                    CR = max(0.15, CR - delta_CR * np.random.uniform(0.9, 1.1))  # Added stochastic adaptation\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefinedV2", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, employing a dynamic mutation strategy with adaptive parameter control and intensified local optimization, enhanced by stochastic scaling and crossover adaptation.", "configspace": "", "generation": 53, "fitness": 0.39117025869890143, "feedback": "The algorithm HybridOptimizationEnhancedRefinedV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.22.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7785255259203953, 0.7816031965486069, 0.7973740535301381, 0.7657691803792642, 0.7852108715501542, 0.7650523552952619, 0.7758416370388583, 0.7755047082127361, 0.7814720838348495, 0.6037996512751451, 0.6167516775065035, 0.6047327878098715, 0.6196555848378419, 0.6041758070337372, 0.6044029099358934, 0.6209129787650753, 0.6089618083347894, 0.6241162397880138, 0.5483402807297362, 0.1708619638471126, 0.5572782729257402, 0.5382829863290237, 0.613583458460023, 0.5814045664514405, 0.5748755515126377, 0.5638872896723183, 0.5421304241814631, 0.5293731748628308, 0.5461837719987517, 0.5258031593073357, 0.17003355271104614, 0.5482324361007427, 0.5376997279564654, 0.5370422087554689, 0.5642492109885818, 0.1674079526331489, 0.8761491094114585, 0.8816813213349903, 0.8851576552117512, 0.893047688419746, 0.9029113280578632, 0.8642667781294153, 0.8958870840020354, 0.8569931690042983, 0.8835789792836806, 0.3683967050192024, 0.4841610955698874, 0.47304065510810844, 0.4347230798503845, 0.3854849424069282, 0.35437431029759137, 0.4848212943143818, 0.47725097595946253, 0.45123091358660816, 0.2086980800699667, 0.19752727899358613, 0.14363469716987498, 0.23096722151162807, 0.3162415509152754, 0.29691656529228805, 0.18429373771166213, 0.21414276650200692, 0.22122312292618185, 0.4915160497564801, 0.4736724024153748, 0.47156710409608016, 0.5013454935693584, 0.45969261209599876, 0.5127296907801495, 0.5041428815033493, 0.5103093038410538, 0.513413285994926, 0.4767620068714238, 0.47779219799680883, 0.4840371117095055, 0.4655836918987417, 0.4787045606633704, 0.4723504215265799, 0.4653504246024126, 0.46988616169346453, 0.476400057309622, 0.38168045354445335, 0.26414025391532825, 0.04639813947081961, 0.39643756565837895, 0.0, 0.0, 0.39298888577010993, 0.38435868573961185, 0.39488564067861676, 0.40514454488019713, 0.4194207968706041, 0.3798906698831501, 0.18214093558652422, 0.3772735012583993, 0.420415027471967, 0.389076535158869, 0.11043750910092398, 0.40383728866909563, 0.3468201206591185, 0.1735219412374337, 0.36861598811758445, 0.4002498775310249, 0.38495436250695614, 0.3778018389706508, 0.34306855204547104, 0.3629072939480301, 0.3322437824236226, 0.14495149828997633, 0.07799500143400895, 0.15871132077274774, 0.1765796125433342, 0.16907448881143505, 0.15321624911937248, 0.14730950323846193, 0.10661109094213495, 0.17361148033812202, 0.6209388345490382, 0.6100516979607453, 0.6395676009033051, 0.6233367781311707, 0.6397779454593661, 0.6185963893673534, 0.6249335646281582, 0.6362261946685769, 0.6440804953422299, 0.1290169517682741, 0.5001931447537604, 0.0950575658453372, 0.12232988001805534, 0.09518149771771534, 0.1127758857522504, 0.14687637633219364, 0.11064642342386666, 0.10805311535924844, 0.17444769156879225, 0.15555242089081767, 0.17706319784026803, 0.17181049535161907, 0.16487642949532533, 0.14750523805516547, 0.1530671308420979, 0.17225740617488516, 0.18524347478418346, 0.18688661718503174, 0.3240387320956585, 0.23587368856655178, 0.21917926893376694, 0.26500938225538273, 0.22516060997689202, 0.2528397842884489, 0.24068420355567144, 0.24417686667935012, 0.16941927735246387, 0.2259149740276034, 0.14563751043057704, 0.16063393823309613, 0.15925111457871166, 0.17928107210084454, 0.19772764665706077, 0.2192495891484746, 0.1813493216049945, 0.202855262195356, 0.21125493266636608, 0.21205675060809936, 0.20361568930327612, 0.22067405146085617, 0.2526972562394523, 0.19100360918678538, 0.19201547098508098, 0.21641628483217756, 0.5614313529940259, 0.5553875833980411, 0.5485189827163035, 0.5552707652983109, 0.5498258982161282, 0.5547105810747355, 0.20900700116204884, 0.5509349673549315, 0.2252419266805984, 0.5941027777718746, 0.5514980138885285, 0.6013707068245018, 0.6398674553422963, 0.542945543338809, 0.5522372946359647, 0.5454309503923096, 0.5824691460735678, 0.5426922277002992, 0.5274398691699531, 0.5783209200646978, 0.5843100783294011, 0.597852387653738, 0.18183947726934435, 0.1845703045692748, 0.5153443175114236, 0.5726204882259811, 0.5515948794124816, 0.21783631097413092, 0.18274207261995146, 0.21987308616226553, 0.22138666895058268, 0.22654420870861847, 0.2826764833576939, 0.18111720866901537, 0.21537069103462259, 0.2517860032791437, 0.08118668547714258, 0.0946077910137888, 0.08764214557410122, 0.08948312048449303, 0.08051271915696434, 0.0956973528268994, 0.0850897295545161, 0.08023046077144869, 0.07842946315341193]}, "mutation_prompt": null}
{"id": "49618403-a02c-4a14-b9f9-e16010291de3", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim  # Slightly reduced population size for faster convergence\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.04  # A slightly adjusted rate for F adaptation\n        delta_CR = 0.02  # A slightly adjusted rate for CR adaptation\n        epsilon = 0.002  # A slightly smaller probability for alternative mutation strategy\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)\n                    CR = min(1.0, CR + delta_CR * 0.35)  # Adjust to intensify exploration\n                else:\n                    F = max(0.05, F - delta_F)  # Adjusted minimum bound for F\n                    CR = max(0.1, CR - delta_CR)  # Adjusted minimum bound for CR\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A refined hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, incorporating stochastic global exploration and individualized parameter adjustment for intensified local optimization.", "configspace": "", "generation": 54, "fitness": 0.3946958561199139, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.22.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.8046933175509265, 0.7646873056898021, 0.819780922407406, 0.8146336477661933, 0.8250698590442453, 0.8085090748197128, 0.7981980267137017, 0.8122553405502639, 0.824463793411879, 0.6440219052409131, 0.6798864064575784, 0.6159414758303183, 0.6270793762244877, 0.6386505675245462, 0.6594613969446257, 0.6219966542206976, 0.685674005496133, 0.6977130190069689, 0.15212297035475875, 0.643130583460715, 0.1755007876042941, 0.661241738245404, 0.6721261792672821, 0.6816064618544495, 0.6712100909267984, 0.6629306667693208, 0.600916515994103, 0.1512656463655454, 0.6472236401071039, 0.6310680234701055, 0.17523065060706722, 0.6054870128423685, 0.6227748414830481, 0.5508551930430842, 0.6268252204978748, 0.6355234254489355, 0.8781077655622623, 0.8722940236849256, 0.8873008339900856, 0.8756505743645462, 0.8398628191658282, 0.869776123768311, 0.8710140097873864, 0.8614143891216803, 0.8575828557073443, 0.45337628406156005, 0.47828718229776057, 0.48299527746676396, 0.41027098909457305, 0.4016650453398972, 0.42969297153777186, 0.4996132492177364, 0.4879521746488916, 0.5071618532900911, 0.20053691377523541, 0.20197343068060158, 0.17332060333435706, 0.33084970722444473, 0.2600262481018928, 0.24319886288236403, 0.15787384032615903, 0.23221093132032022, 0.21547052929178967, 0.4652812913902402, 0.5164816900344356, 0.5162182011127183, 0.46015306516284704, 0.49989297840719404, 0.4985717079154697, 0.531586651202628, 0.512181033161208, 0.522239137047156, 0.48060837353973507, 0.46793799047020557, 0.47769113755367987, 0.47973404598781266, 0.4848637771542271, 0.4742202878744892, 0.4760599060326842, 0.4751886504995714, 0.4787891820722593, 0.3770741894668066, 0.3944040684129728, 0.3859907523423127, 0.40908577074045704, 0.3432888123302219, 0.39170852015914503, 0.4058380501056047, 0.004999029536884025, 0.383954811306338, 0.35133393545127145, 0.3408579938662518, 0.41956457820881665, 0.3791443830065986, 0.4089188711383649, 0.3756816785437319, 0.4177155667034109, 0.3876206341718744, 0.38978710928686455, 0.37587502768882664, 0.3555282852249435, 0.39444892190889946, 0.3962004423376355, 0.3988605267944739, 0.412476093431139, 0.34066203745195167, 0.35105706229695366, 0.3194185656042058, 0.10412400612514994, 0.12040703138794528, 0.18865813898406303, 0.12282544308831422, 0.14824260307560977, 0.2809329980677434, 0.21215501926125935, 0.36501618269990665, 0.09480241430516112, 0.6281030103730103, 0.6321009514868583, 0.6521972593420811, 0.6343650348319252, 0.6381848481575593, 0.6236769007305654, 0.6399244259196241, 0.6375921342095929, 0.6529851183425163, 0.11220173330201721, 0.13107002015450941, 0.10017659189009542, 0.1150359017644067, 0.0990347633940537, 0.136780161650206, 0.12292845066811209, 0.07998731959034555, 0.11366130812693986, 0.17179120118826008, 0.1596190508616342, 0.17539899252699942, 0.16684446130043507, 0.1625752723813122, 0.17479032423730534, 0.16947805903155932, 0.1746184578624056, 0.3058494531812712, 0.21473957258640475, 0.2465650400741879, 0.27667438473640826, 0.2197824645545805, 0.21199271661795716, 0.2445782935466264, 0.26717972918692556, 0.2888380582912323, 0.2515897750038779, 0.15344611072356507, 0.171636991532645, 0.17068181976267915, 0.1836618586561526, 0.17250689290146004, 0.20377004335754256, 0.21725082926939532, 0.2566500668568531, 0.1788225797966193, 0.2175841345495585, 0.21607247835900012, 0.2178741290613987, 0.22925812822685088, 0.20777592232340425, 0.22967128723381647, 0.21171588526954055, 0.25154685206336413, 0.22065109340196487, 0.23800766270031415, 0.2255785692258545, 0.2253873864318674, 0.5767853717164884, 0.5745429322549398, 0.22749674384997742, 0.20408106851665841, 0.20767801400630947, 0.2389232512431647, 0.19360019767527015, 0.5346732126941327, 0.5474107438507871, 0.5783619915513921, 0.5586115023879032, 0.6161069360987934, 0.5471934775828421, 0.5367086080280568, 0.6038897890613422, 0.5326840375095571, 0.18860555086443198, 0.5388087423371472, 0.5399821894492661, 0.5402803478311163, 0.202165694471531, 0.15122094680472653, 0.5811250943599815, 0.5544043519491941, 0.1884557781948386, 0.19863503167660268, 0.19148051740703342, 0.19632470236987332, 0.1918015007817565, 0.22373756426349922, 0.2108991541834826, 0.19494854966552788, 0.22524159189694515, 0.08725208753200464, 0.1072573550451702, 0.08834129469171259, 0.08950599328437714, 0.08162753634421793, 0.07693785116040086, 0.09195038600939465, 0.07772826518049258, 0.06878310989350955]}, "mutation_prompt": null}
{"id": "630b96c5-9200-4678-a68e-0b5203a9905d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "8b33e9bd-d2a8-4c72-848d-b87839613614", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 16 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.005\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.2)\n                    CR = min(1.0, CR + delta_CR * 0.3)\n                else:\n                    F = max(0.1, F - delta_F * 0.5)\n                    CR = max(0.2, CR - delta_CR * 0.5)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A refined dynamic hybrid strategy blending adaptive differential evolution and Nelder-Mead with multi-faceted mutation mechanisms and adaptive local search intensification.", "configspace": "", "generation": 56, "fitness": 0.3836394511924941, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.20.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7585646723525181, 0.7549073439570517, 0.7497260534274242, 0.7521972468803355, 0.7502822183449556, 0.7343166462834471, 0.7391287146390654, 0.7339010233190246, 0.7514103880888248, 0.5594775758459025, 0.5773221750344115, 0.5725722780994493, 0.568901786661119, 0.5624597601218251, 0.5679318280173857, 0.5853280603712934, 0.5884572802284699, 0.56765971163104, 0.5412176845715777, 0.5429347727992809, 0.533185709282063, 0.5083470514011303, 0.5232401997139504, 0.5209896051320626, 0.5392743685877975, 0.5396835295167235, 0.510168064057225, 0.48098040276256226, 0.4930244070127259, 0.50291687973364, 0.49051506922407995, 0.5127323784415305, 0.5115626500817783, 0.5091106338562134, 0.4727216744393512, 0.49762119552745243, 0.8534111938975488, 0.8576336910432145, 0.8520295807632896, 0.8573770647353389, 0.8849188655131489, 0.8612021643312644, 0.8581268034192362, 0.8948637907148432, 0.865130539514933, 0.43667577811291414, 0.4228100248277713, 0.4436331967085867, 0.38068619694490036, 0.39257743796923006, 0.3803310937983817, 0.44095158725649086, 0.4361493506847648, 0.4653510894157412, 0.278034534163085, 0.19084666379436643, 0.18078918760395446, 0.2671893192019217, 0.29614751842360565, 0.3187254617954087, 0.21442465492579432, 0.20675557762997498, 0.1772723880289081, 0.474136684220962, 0.44921737796578276, 0.441350173844797, 0.4601039959108705, 0.437058198734518, 0.4376270028114352, 0.46932112606413545, 0.4773940733390978, 0.4510558441539886, 0.441542920661777, 0.4317552181987325, 0.4249864665525698, 0.4332167385724712, 0.4418394283547833, 0.43489071816472413, 0.40752676085623507, 0.41172263258166475, 0.43384468379184726, 0.31194030778934034, 0.30188104532447146, 0.3523617723311092, 0.3328088319379302, 0.0, 0.28688059896702456, 0.3524023646662249, 0.34980880761913413, 0.34395286226872623, 0.059798237007700705, 0.36973486682668644, 0.3453581188921415, 0.34983996097067316, 0.34967927856841907, 0.34090043899389655, 0.38312940506821147, 0.08293821176953786, 0.3919100746497721, 0.3310865754342124, 0.3309429891416821, 0.3268503968427777, 0.3310033433564683, 0.3422838638815744, 0.3603682492532072, 0.31379247652852416, 0.2777985108596105, 0.3136855116801758, 0.1311228340955437, 0.14741474571770508, 0.15723805030916105, 0.2642059627595482, 0.12118053537361961, 0.3870516331730157, 0.31189254496440566, 0.10182380862155627, 0.1164290066020327, 0.5912292693639751, 0.6004259401991329, 0.6055678710754921, 0.5992622055981764, 0.5870182407370234, 0.5936050007828695, 0.6204227122058941, 0.5945441958042152, 0.6031759224098115, 0.13729996778208842, 0.105620512515754, 0.11588465230769218, 0.11464279859290549, 0.12022189315769027, 0.09333359235485472, 0.1135706170545272, 0.10117921399450092, 0.13776216089487792, 0.14420068605109249, 0.17917041489145846, 0.1873795523622095, 0.17310918106424755, 0.2020470790260852, 0.16729092317396776, 0.16402916002649526, 0.1925201377847906, 0.17152845940247285, 0.25014566590448417, 0.26003684679739925, 0.263315926429752, 0.2517263133157167, 0.257930669410421, 0.2521183922625956, 0.28868186578468147, 0.29900124093519886, 0.2730625844457977, 0.21274479155114, 0.2065668709149474, 0.18065192971466582, 0.17234300960328508, 0.1657415733341926, 0.19784554122401898, 0.25048909172196365, 0.23563836261547388, 0.21631034428806362, 0.20636460171297644, 0.24173308309302088, 0.19865819733197754, 0.20642234082081568, 0.20028603126624145, 0.20654033751400347, 0.2570025576573606, 0.25147922101409126, 0.22757673033952452, 0.5274777294800872, 0.5078006107105988, 0.5145921345275875, 0.5246639021216098, 0.5087238539574366, 0.5361916387624448, 0.5142613788020373, 0.20036269903665438, 0.5206345428020704, 0.5022514342541289, 0.5168613259833617, 0.5291501915548531, 0.5664546072813188, 0.5186619829414107, 0.5322552539555305, 0.5083941546619855, 0.4869429557183599, 0.4914633780716987, 0.48942205070812217, 0.49356645287085466, 0.5343196186592609, 0.5370863425276146, 0.5002731074892003, 0.18972051308862958, 0.5013521392819038, 0.500419471412584, 0.4973650159672842, 0.19922289371256852, 0.1939557975929781, 0.18903841074450956, 0.19879201756331555, 0.20263792834276861, 0.23860320763953413, 0.24591856917996446, 0.20742205896815635, 0.20220691732615537, 0.0891163778373284, 0.08311685660149293, 0.0816437668914346, 0.07815200958025648, 0.08272925121360908, 0.1016490167258366, 0.07620266022914002, 0.07121777780076222, 0.07846890969265041]}, "mutation_prompt": null}
{"id": "ad446b3f-283a-4dbf-b27f-547b0951337c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.6)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.002\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.35)\n                    CR = min(1.0, CR + delta_CR * 0.45)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy integrating improved differential evolution with dynamic mutation selection and adaptive local search for efficient optimization.", "configspace": "", "generation": 57, "fitness": 0.39245348552569437, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.22.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.8006673374986458, 0.8272846558191177, 0.8060802332889688, 0.8232796264680844, 0.8163818268887567, 0.8116860550782654, 0.7939315260206044, 0.8067575170508771, 0.8070546467643029, 0.6746092134836676, 0.6472529155544251, 0.6456859513407027, 0.6424097659435908, 0.6859147957864749, 0.6591705123291369, 0.6352437475173003, 0.6638685653982188, 0.6719143490579165, 0.575116488986831, 0.62438983858103, 0.6120260327364297, 0.5983191573915273, 0.6187355047875156, 0.5888689676115462, 0.6202783044417661, 0.17639348813798172, 0.6020172539772257, 0.5697450806674125, 0.49445047311751555, 0.5830920354893653, 0.1684233953617964, 0.5551579160289822, 0.5546989994299061, 0.5293826459488618, 0.5867082347231637, 0.6013658863356106, 0.9163500940948162, 0.8927639474944646, 0.8592037809459727, 0.9142781688196459, 0.862446991174801, 0.8851131367582057, 0.8882384163625596, 0.8685657991709114, 0.9264202180935848, 0.45451768913802304, 0.44390439475282817, 0.4538593646157617, 0.372819700210143, 0.36338664974750545, 0.34638392387791517, 0.4709643784053116, 0.45051695934232183, 0.463446917521523, 0.17642619023739337, 0.23468071341041474, 0.17529376639304117, 0.3113708500797998, 0.28843875387161155, 0.3007436266922988, 0.1753433678117221, 0.2680834833027398, 0.24332916290366335, 0.45396067135846263, 0.47398338807404694, 0.5057473419762273, 0.4432409750029298, 0.441738813030245, 0.463727051173234, 0.4875654583221686, 0.4629461486529787, 0.47629962395674663, 0.44128346727851664, 0.43681487137762454, 0.46662839908806675, 0.43408115236765965, 0.4284875427613003, 0.43562771349104856, 0.44354804043999785, 0.4154326273964203, 0.43645860341436593, 0.32982455503036234, 0.35385091226550225, 0.039305029119521384, 0.025413447611598583, 0.33977400605522023, 0.34116296457362905, 0.34800458603534656, 0.32076284164552715, 0.36282169182104707, 0.3388990815083044, 0.33549796221929395, 0.3590994165811776, 0.3450609512832373, 0.34399618113266694, 0.3310067340377163, 0.08336962015433014, 0.31556039069574304, 0.38797288723886336, 0.2988533940007926, 0.2859458781658696, 0.13109955489714342, 0.35137808788778346, 0.32663539470832836, 0.35234152151473386, 0.3276824676312152, 0.32562737165903777, 0.26567852605257036, 0.12455770267836419, 0.10749383972611626, 0.11067363711120048, 0.3244231184762403, 0.1705786472181655, 0.28414713336929565, 0.1760076532382041, 0.14998082204755114, 0.3003675409116845, 0.6452204207916509, 0.6149416216954073, 0.6018293995403898, 0.6052211389752059, 0.615626238460648, 0.6257824422838822, 0.6081267350867465, 0.6084811582327335, 0.6190321264831167, 0.44464647036392924, 0.12355885065276784, 0.08619452587737653, 0.0935234816750653, 0.09315932076391997, 0.11293215379886112, 0.11916320732211594, 0.11825986835204982, 0.09822593870889795, 0.17667842307678205, 0.14799257582726644, 0.19915253030440072, 0.18025950101636046, 0.16138384641507308, 0.16050670814355783, 0.17236107813081836, 0.19201492168710066, 0.23695941678737575, 0.20975244845869967, 0.21689949442815037, 0.2558661004079822, 0.2052590621945921, 0.25833128822121476, 0.2713292590085026, 0.2718294592143251, 0.2712011839635011, 0.2510848565424777, 0.18136533522198872, 0.21723627186136074, 0.1936957867510224, 0.20823410653805885, 0.16791317733048705, 0.2063968108711497, 0.22126311042936964, 0.21359492695576032, 0.16983562346239034, 0.2433602985974831, 0.2276210981067387, 0.22549306513477818, 0.2265340455332514, 0.21302715903171832, 0.22298984128631338, 0.21468841099300184, 0.2279617212771946, 0.22643870469638516, 0.514754523135655, 0.5173560414271823, 0.23230225783801617, 0.5183286099127362, 0.5227903412863004, 0.5122330570810544, 0.5081366167066204, 0.19869227282634272, 0.5308187523605873, 0.5355192003149418, 0.5086198587820556, 0.5414952819820192, 0.5414198031156604, 0.589551757500621, 0.5352363287158698, 0.5354199494852006, 0.4870618712086162, 0.5454629774665187, 0.5106809093799611, 0.5134012302578632, 0.5233065764254287, 0.519993740579624, 0.19952153967555508, 0.19551463528219593, 0.5003108383590862, 0.5167061591747366, 0.5373914836576076, 0.2134378329347928, 0.22862181766741274, 0.2171543101010922, 0.18697123711035957, 0.2000858936334946, 0.19321393904286888, 0.22268088608620018, 0.21068655445973805, 0.2314506330181939, 0.07949312471314007, 0.08335355915281739, 0.0895584934384468, 0.086400925680724, 0.08214097307221369, 0.08022020429621846, 0.08174025113407801, 0.08020937472076783, 0.08238867264004335]}, "mutation_prompt": null}
{"id": "adb2e814-4e07-401b-95f1-a2ec77b0632d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedDiversified:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)  # Slightly more focus on differential evolution\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 15 * self.dim  # Slightly larger population for diversity\n        F = 0.70  # Increased mutation factor for wider exploration\n        CR = 0.85  # Slightly reduced crossover rate to increase diversity\n        delta_F = 0.04  # Adjusted delta\n        delta_CR = 0.02  # Adjusted delta\n        epsilon = 0.002  # Lower probability for alternative mutation strategy\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 6, replace=False)  # More points for diverse strategy\n                    weights = np.random.dirichlet([0.8]*6)  # Adjusted weights for more balance\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)  # More base vectors for stronger exploration\n                    a, b, c, d = population[idxs]\n                    mutant = np.clip(a + F * (b - c) + 0.5 * (d - a), self.lower_bound, self.upper_bound)  # Combined mutation strategy\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)  # Slightly reduced adaptation\n                    CR = min(1.0, CR + delta_CR * 0.35)\n                else:\n                    F = max(0.12, F - delta_F)  # Adjusted lower bound\n                    CR = max(0.17, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})  # Tightened tolerance\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedDiversified", "description": "Combines adaptive differential evolution with enhanced Nelder-Mead, using a strategic mutation and crossover mechanism adapted by fitness trends and diverse exploration strategy for wide optimization coverage.", "configspace": "", "generation": 58, "fitness": 0.34713783736414844, "feedback": "The algorithm HybridOptimizationEnhancedDiversified got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.18.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.8200147933844966, 0.7368604936169967, 0.7991768945733395, 0.7556100990816073, 0.7418110500398516, 0.7477983407077747, 0.7756854878279, 0.7853938471343429, 0.7532676311905538, 0.5987453189225889, 0.5909197552333363, 0.6130917643940811, 0.6305019962770202, 0.6023045153703276, 0.6156441816384918, 0.6094956261597471, 0.5983135530408573, 0.5913747858642722, 0.5137601112513667, 0.5458899778761804, 0.5075088099939631, 0.16301939917747388, 0.511844293020316, 0.49338431125649795, 0.49652442359992044, 0.5318911045962343, 0.49911708134175603, 0.1379017910268231, 0.13160493201597345, 0.13769346133346883, 0.134994958040082, 0.12367296902683789, 0.13380765898849734, 0.1165686651113107, 0.1237379471424076, 0.1286602723624608, 0.26757305374586415, 0.39531013979664253, 0.3370319503075049, 0.30235914411836595, 0.38984292810506127, 0.36227524556098545, 0.3771702029109826, 0.25904478158077593, 0.361793297613237, 0.3868676581186812, 0.4315545893918886, 0.41854653842442535, 0.365329442089276, 0.35699478157362907, 0.38140906368634986, 0.4486476452440782, 0.4339943673317116, 0.422798615982906, 0.20636361936543912, 0.20134823895163756, 0.21749770971418736, 0.30861362711900076, 0.2883341414345546, 0.29000188658530346, 0.14753113357907965, 0.20353826618171478, 0.18470707198615022, 0.46876174793833225, 0.45377778549881354, 0.439081174162423, 0.4563421848686482, 0.4677612477306248, 0.44330005266737227, 0.45402245994436463, 0.47820052099219024, 0.4672397731553751, 0.4409714900276436, 0.43813425173444653, 0.44469880995676125, 0.44595606578068014, 0.4466350152608738, 0.4489672330627238, 0.45529209090254363, 0.45150938864140966, 0.4198061767472827, 0.3524239429636614, 0.3507234278047908, 0.3470844759665844, 0.31461195635846073, 0.3538603560559649, 0.3240105454439015, 0.3418996606513244, 0.3229391679080663, 0.3451463941413341, 0.4106762900463484, 0.4105830276685446, 0.36199159272420134, 0.37749074416709505, 0.3562243782817226, 0.3525326887500413, 0.4022185246967721, 0.3801166396994472, 0.39822408952117483, 0.33332696756853586, 0.33294735877412396, 0.34372331736755657, 0.34978332642723164, 0.35023059929706946, 0.3655316602422186, 0.30020387009031746, 0.2900720086133671, 0.2858763272173006, 0.10115389159227872, 0.11817829054016615, 0.11875004161319924, 0.17824376867497616, 0.1439943100750426, 0.11026049256502923, 0.35291064811432926, 0.12822596624240645, 0.2568114753810773, 0.6189488124617719, 0.6479934720682106, 0.6391400062139823, 0.623552304486159, 0.5887398829509212, 0.6055828666067953, 0.6304590575079202, 0.6124145516534676, 0.6315514837173803, 0.09985612311108383, 0.11222193779248324, 0.10976030401091941, 0.10346702819021125, 0.11116713338013884, 0.4340437335900448, 0.09288468560905272, 0.11384941090040579, 0.11494160477295168, 0.19664809822142137, 0.16019188036140164, 0.20060349138380706, 0.18830949928506047, 0.21324347382621467, 0.15034329544940916, 0.19129639226664497, 0.17878371768546963, 0.21072348168701938, 0.22088485455108908, 0.2626026464658009, 0.23278954745745017, 0.28435170641526075, 0.26880540332172886, 0.2488915219443767, 0.25722974248739183, 0.27308026387645845, 0.2663480139147676, 0.19080781943729053, 0.18266320530321878, 0.23646668157741602, 0.23327066652356077, 0.22935203175166208, 0.21975493032204774, 0.17779637335153764, 0.20602872947443862, 0.20240119848838523, 0.24838193428017752, 0.2113368179546956, 0.22467947063081173, 0.272245524256875, 0.22882447803628403, 0.22486149044647308, 0.22503763592264803, 0.2674153708873165, 0.23722234623575877, 0.20808903125556188, 0.5011484526662764, 0.21716222878133995, 0.23431231032612265, 0.5129956647347443, 0.19982369805401756, 0.20480457214342174, 0.2013414346648178, 0.18842745613297163, 0.17985130212919376, 0.49722044887419226, 0.17199567039461128, 0.5789632424819439, 0.526067935804033, 0.5674448193173971, 0.5814351279447182, 0.5910383891401196, 0.586360756957991, 0.5590183017136692, 0.5138581905474323, 0.5649470569986786, 0.5268758402531759, 0.5312523844127275, 0.5665796180702878, 0.5004760773442605, 0.5338259441822106, 0.542915919166634, 0.21552271380471388, 0.3180598487044981, 0.2088812419934507, 0.19566781292776037, 0.2287534283960565, 0.23131413375164578, 0.17905847115653484, 0.25924950508682787, 0.22989895521779635, 0.06926276643598317, 0.08474762058689189, 0.0884332153553039, 0.08708286580344704, 0.10082558530619645, 0.09290638267402496, 0.08916993965953768, 0.08566478992210846, 0.0872824504387012]}, "mutation_prompt": null}
{"id": "9f133d28-9f9c-4f71-ab11-0fc20c219ac8", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.005  # Slightly reduced for less frequent mutation vector\n        contraction_rate = 0.95\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n            # Contract search space towards the best solution periodically\n            if evaluations % (population_size // 2) == 0:\n                best_idx = np.argmin(fitness)\n                best_solution = population[best_idx]\n                population = best_solution + contraction_rate * (population - best_solution)\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "An enhanced hybrid strategy integrating differential evolution with Nelder-Mead, featuring adaptive mutation and crossover, dynamic search space contraction, and local optimization intensification.", "configspace": "", "generation": 59, "fitness": 0.36530213591528415, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.20.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7658992061329001, 0.7854825455047061, 0.8008065596884759, 0.783228477804276, 0.796518498457561, 0.7919804938841999, 0.7771835051869875, 0.7869914919802411, 0.7942953195683506, 0.49563943172821223, 0.4600515680873919, 0.48605935194058725, 0.5034710632358401, 0.5457468113781265, 0.648344410274663, 0.6027955971547911, 0.6184669496939597, 0.45181397328033657, 0.17114901919839853, 0.13903806329368185, 0.1547099973290733, 0.1482477558456825, 0.1371071317704594, 0.14881276825307466, 0.14480702017775804, 0.138884438666648, 0.1706779383292556, 0.10327803385439693, 0.10436740455168236, 0.10958975043502794, 0.13382546199497303, 0.10730590168798482, 0.14471494462414214, 0.1384051974049305, 0.10028184428909026, 0.10094633613696857, 0.3675241182590594, 0.35977777891250706, 0.5330444699786658, 0.5912921882469966, 0.7769638696330841, 0.5658178800468086, 0.4284972816088185, 0.3604450761722827, 0.5463848762893517, 0.5022768757597512, 0.4876065918588177, 0.4413592891510554, 0.4117889117146861, 0.42688789870986943, 0.4470287173529748, 0.4913963263234713, 0.4740831126301821, 0.4953408205485361, 0.22009659468147524, 0.34093026483170474, 0.2770659163540753, 0.7599159825684856, 0.35182192374926724, 0.7372847350708027, 0.6960161692266114, 0.7024089363508785, 0.6942159966914994, 0.12217700311269819, 0.10604518714006406, 0.5257081550814247, 0.5167203154632665, 0.5701607317271873, 0.5723066365598701, 0.48958421419050824, 0.5207657826227683, 0.5269575681871878, 0.48268420528537304, 0.48206771457755926, 0.4829770262856308, 0.48252813059946653, 0.4825494234729797, 0.4850295504546306, 0.4775168099510222, 0.12276050143388495, 0.461176409755618, 0.43019520522831867, 0.39554201276577927, 0.39238473378480343, 0.42210323890705026, 0.4100947349331908, 0.4062160632183547, 0.38465723119910444, 0.3579336191110296, 0.41236091508115846, 0.45831175964178006, 0.4548676408449891, 0.46940777920520316, 0.4072231499517134, 0.4323978580872687, 0.4023022846069574, 0.44475239150961565, 0.41305436230652837, 0.44294669850834456, 0.4405151821636767, 0.4467073017993469, 0.4248856443878981, 0.4345148032514631, 0.43191391292151204, 0.45249162218193983, 0.41434231936813126, 0.4384794199432849, 0.3925009936464424, 0.46022314859232305, 0.3213023729785608, 0.3675850159050459, 0.28666300844950354, 0.42099738108840956, 0.3964148005635618, 0.3327616488441164, 0.44565252478253037, 0.3204414408387052, 0.7001005356400936, 0.6765154351803068, 0.6331169815551567, 0.6672402636035232, 0.6799263521301868, 0.6670438744917955, 0.6598636152595445, 0.6706874771483415, 0.668744530988543, 0.1233331511615604, 0.13176837211353454, 0.14245180267463597, 0.10301928007627326, 0.11732241231273333, 0.5141318590839985, 0.142233961511248, 0.1364944900170878, 0.1594537536733065, 0.360488829671745, 0.17408247909977603, 0.15111437918559334, 0.18108506517375067, 0.18074734631421707, 0.19775207481812962, 0.33264875683311634, 0.21851787380427756, 0.21917071713522052, 0.38721048329841923, 0.30581744350262563, 0.2597818791250769, 0.309046343649216, 0.3102519239842346, 0.3083267353951833, 0.416400182067698, 0.47301098779931317, 0.25382644436693647, 0.2526281353187043, 0.21917913896424002, 0.2622079293956675, 0.25646148043312256, 0.25018871489075867, 0.24923818259187192, 0.2132743328616098, 0.224144450788885, 0.24248451928880377, 0.2520372365801553, 0.22518829040292454, 0.24932717435052665, 0.2300183829531094, 0.23097680159686462, 0.2338550626855408, 0.24798902471927764, 0.24151897219288132, 0.2535435342957779, 0.21758367874167983, 0.17017400149684858, 0.18389972585206793, 0.17951472686840897, 0.17359737216913107, 0.20725816963414456, 0.19088655266317034, 0.19192644135553738, 0.17527233923020835, 0.1835724857895038, 0.18040350044437858, 0.5938780669084578, 0.7118336263156995, 0.2023722258002052, 0.6856931493126248, 0.14576494008548146, 0.12034421818902252, 0.20505438014803823, 0.6946206420124907, 0.6248693828577305, 0.642643488776071, 0.6178553077622833, 0.2033015039762497, 0.15204027695136335, 0.1647797403067932, 0.15385420276748085, 0.5258778003470048, 0.22622519140267983, 0.21553551031264573, 0.2310718142811682, 0.21318696568454432, 0.2123543358962403, 0.23253921607010075, 0.2840281441686886, 0.27613103429490815, 0.2178242329976119, 0.09722664504239964, 0.08993862183605339, 0.10171209432550732, 0.10129858544783077, 0.09623537502659552, 0.09513298480797949, 0.11008990190047063, 0.08341543763881087, 0.1023974096026079]}, "mutation_prompt": null}
{"id": "a7304512-5660-4ea3-91c1-137306bf908c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n        inertia_weight = 0.9\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c) + inertia_weight * (a - population[i]), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "An improved hybrid strategy combining adaptive differential evolution with Nelder-Mead, introducing stochastic population partitioning and adaptive inertia to enhance exploration and convergence.", "configspace": "", "generation": 60, "fitness": 0.291846053044072, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.22.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.6029281222774897, 0.5915558605651308, 0.6045036664443524, 0.6052537371809112, 0.6063276438255298, 0.622148341741763, 0.6265515952087867, 0.5962497529772683, 0.5901729489104739, 0.41856049570911835, 0.4142059882961746, 0.3940712084998971, 0.4307349300274014, 0.44077300597256, 0.4095511985246396, 0.43401411945589485, 0.4307173555508421, 0.4144177662254066, 0.14468184186684196, 0.11785406539294963, 0.12161039550581354, 0.11957335638719613, 0.10567878729520253, 0.10912941221806827, 0.11194363747886904, 0.1102507088858441, 0.11835229260677915, 0.11464829655820052, 0.13387338979805607, 0.08178786563530027, 0.11197476891858493, 0.11766195703511517, 0.10516871800241456, 0.11100949367530744, 0.09733563015930247, 0.1207283772552884, 0.9495808314228341, 0.9508595658334232, 0.9772956222053109, 0.9675937997807448, 0.96707061685096, 0.9685291252368262, 0.9601546262584607, 0.9655837208333353, 0.9782174991158764, 0.4526207659312784, 0.4067525468757093, 0.4535310226134839, 0.4524591258160261, 0.3804244395421571, 0.12581561818317166, 0.46168685974639756, 0.43038639492557773, 0.4652184767537374, 0.12310977408034995, 0.16118538480458589, 0.10406851708940523, 0.21959016417054467, 0.16254820772879142, 0.1879955311780659, 0.1408637923309256, 0.157231817796476, 0.14916486900016313, 0.08516526221523346, 0.43910337006768474, 0.44113437667824873, 0.43588738983233066, 0.43420050725946835, 0.4475050692778648, 0.452763308056341, 0.08580060893776098, 0.4291733281679212, 0.42358415582823306, 0.41737119230645425, 0.42788988205227196, 0.44794541293846146, 0.42137635122108563, 0.4349891425112079, 0.4059333760387549, 0.4377129233835273, 0.42982283339526517, 0.3669913510048376, 0.35235282403663104, 0.034682044252568045, 0.400655993172342, 0.0, 0.0, 0.39835961306920076, 0.37281283999699033, 0.3842959394962955, 0.3778295523273204, 0.05085076941312161, 0.05149691614324858, 0.09943691605212313, 0.39213846962842, 0.3877308639965036, 0.04408127301410225, 0.057728084549524605, 0.053042688588523346, 0.0, 0.3203453017399517, 0.3012451814783096, 0.38510943744299697, 0.3911455936048269, 0.3661333849361911, 0.3107975490715239, 0.31842429001320105, 0.05043829008132483, 0.24259568966645817, 0.09529125582233133, 0.22132806979037356, 0.3303275761471949, 0.05112843721250282, 0.04048003551213131, 0.07426844184876302, 0.02763549724045422, 0.07079427337552624, 0.5489787171366619, 0.5538133653779305, 0.5591157307890512, 0.561811772677032, 0.543288100283456, 0.545555262595476, 0.5660009198369542, 0.5526643655099618, 0.5871894883778248, 0.062228471747655, 0.06269869624859026, 0.08819708918824853, 0.09617609447971076, 0.07826549247483783, 0.09645919989192775, 0.07899383173151542, 0.10005286280235215, 0.08410258078980914, 0.14342039320505862, 0.148510359353352, 0.16308987570871047, 0.14301809465720183, 0.13470756764200686, 0.2799430424904523, 0.22005814700954085, 0.1611642939119411, 0.1385570418610178, 0.19252317537672448, 0.1839654614236813, 0.18645514757523396, 0.17448824108094085, 0.18399353896239679, 0.20511598383238416, 0.20339191399961132, 0.19977172356562167, 0.1673963683232741, 0.16437404540128886, 0.1439548816336257, 0.11534697151346829, 0.1376425670888397, 0.1310382484774767, 0.12120650427802471, 0.13941316953331007, 0.16015855345053642, 0.12636799669256105, 0.19643120325095198, 0.20013776057062604, 0.1597783899791484, 0.2150206126146722, 0.2324774629548988, 0.19211237273601778, 0.20436323392995304, 0.18615281355253388, 0.18659178415249678, 0.18741870534445337, 0.18396647590031623, 0.17199112588315835, 0.5326515681348407, 0.18940346638866412, 0.19506596957843936, 0.192975964440102, 0.1733235243415414, 0.1809786023887554, 0.1619856923974783, 0.5302187561593985, 0.5872815672160463, 0.536934832409043, 0.5417603533996673, 0.5173384785719616, 0.1620760023167961, 0.16866871441980746, 0.549455249886315, 0.15768661307254406, 0.5522356884904978, 0.1482904503100494, 0.5284945239170673, 0.168461898659633, 0.5771458574106858, 0.520220690306148, 0.5245879409111869, 0.19431214015254517, 0.1866132414945687, 0.1844729027800558, 0.19102161332416723, 0.21733991667695973, 0.18320468870560935, 0.20436043631122525, 0.17991824229825393, 0.1949409506905858, 0.21427440108823015, 0.082472280010772, 0.06401300694548606, 0.06892069636909615, 0.0705507058587247, 0.06522770025518299, 0.07441760313845192, 0.05192642282412785, 0.0684288581171395, 0.0691095724278783]}, "mutation_prompt": null}
{"id": "30373ae6-44ed-4b2b-b402-8d83b4cff485", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "c8cbd309-372e-4f21-aaf2-bd0cbe7f6f34", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefinedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)  # increased DE allocation\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim  # reduced population size for faster convergence\n        F = 0.7  # slightly increased mutation factor\n        CR = 0.85  # decreased crossover probability for more exploration\n        delta_F = 0.04  # adjusted step size for F adaptation\n        delta_CR = 0.02  # adjusted step size for CR adaptation\n        epsilon = 0.01  # increased probability to trigger dirichlet mutation\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    weights = np.random.dirichlet([1]*3)  # fewer weights for dirichlet mutation\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    a, b, c, d = population[idxs]\n                    mutant = np.clip(a + F * (b - c + d - a), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.5)\n                    CR = min(1.0, CR + delta_CR * 0.5)  # more aggressive adaptation\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.1, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-5, 'fatol': 1e-5})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefinedV2", "description": "A hybrid strategy combining adaptive differential evolution with strategic local search via enhanced Nelder-Mead, including probabilistic mutation and crossover tuning for effective exploration and exploitation.", "configspace": "", "generation": 62, "fitness": 0.381064871820614, "feedback": "The algorithm HybridOptimizationEnhancedRefinedV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.8400699577352747, 0.8332197400750229, 0.8240226051742015, 0.7987197131159329, 0.8046499075626745, 0.7869333472315938, 0.8266737402089717, 0.8179406752562672, 0.7958528732440578, 0.6642097190679355, 0.6777076094101602, 0.6482085340009403, 0.6470583490158592, 0.6605630221956522, 0.6775825102528461, 0.6701750253386956, 0.644970981030856, 0.678917545850755, 0.6246892914171742, 0.610835862817205, 0.5417641199589129, 0.49420097197205703, 0.6240358075448587, 0.5475009509183764, 0.5692085509378629, 0.6282820847587949, 0.5668554689575964, 0.1675950898719013, 0.14443730935065469, 0.14877401006178714, 0.16648893767585338, 0.1625027677933738, 0.4256202226726483, 0.4665901490489104, 0.4300967664263038, 0.42910665062558995, 0.8446599074233276, 0.8144911813266877, 0.7599563969149681, 0.7804098858854557, 0.5153291361889349, 0.8052996264527932, 0.5261196322682004, 0.844573884985028, 0.530660275308327, 0.4020325740544799, 0.42963446403717576, 0.44167297625732893, 0.36118909408741084, 0.3858838287101828, 0.3345115944036272, 0.46056225845000387, 0.4404222998591415, 0.44651544423060974, 0.1460698193671809, 0.21225669999822272, 0.20340345823177886, 0.30623440018218884, 0.3228949206400198, 0.2843074703382137, 0.16098257588100784, 0.20213099742441776, 0.2012091251116831, 0.49159461094206747, 0.46443546417188364, 0.4413508384223652, 0.45485126510427876, 0.46656999471257454, 0.47878004394317153, 0.4753996006387975, 0.4741003844805075, 0.49979765901718454, 0.4413489113289256, 0.43902976218731615, 0.4505918625609937, 0.4515374934327404, 0.4490573160507878, 0.45146384865537503, 0.4440222667360746, 0.4406558042719656, 0.4339623846026551, 0.2790608004477777, 0.2407589039816328, 0.35518013486200783, 0.3419009096821818, 0.3291503040457905, 0.31825887699346667, 0.34456225601755386, 0.33446020854149283, 0.3475273211003398, 0.3503633993995988, 0.32036801582481766, 0.3973011257547724, 0.3408941215188256, 0.3872924493587043, 0.3472919956924253, 0.38772077083498147, 0.3579592214212468, 0.38667573059357496, 0.08539868391412164, 0.31565257940569047, 0.34354876296853776, 0.3445915930101652, 0.35185523950703823, 0.35269398201697066, 0.3400355426329995, 0.3193836589616058, 0.2888217354288497, 0.0896830990429377, 0.08842929395632948, 0.08823236119054512, 0.14814973990937919, 0.11162962166669255, 0.4056075562792365, 0.18260539729610392, 0.2065983948321567, 0.06948884130209732, 0.6528483729915818, 0.631400330650052, 0.621406081206977, 0.613524195316444, 0.6148365915143348, 0.60244186492796, 0.6141504743106712, 0.6278989234698013, 0.616077400953374, 0.09845771790077307, 0.10656261678136325, 0.09414330085466882, 0.09955903520733811, 0.11504376722725995, 0.12463758132701752, 0.12572056298106182, 0.14082173558275846, 0.12248444569927597, 0.15086077067064652, 0.20254559984604747, 0.14779641924099673, 0.18581619574592823, 0.17372201839700485, 0.20493021300125547, 0.21292268216872257, 0.18002201645193638, 0.1606921182843729, 0.22311194495647402, 0.2277615772912378, 0.26259412162021745, 0.2439543126123921, 0.22687192918202848, 0.25722909126120885, 0.2802015352590843, 0.2658956855031942, 0.2526045991845365, 0.19675343187196426, 0.21879476389804986, 0.2115360034042687, 0.18456646050874992, 0.18972553031109252, 0.19981267711829187, 0.1748872601970941, 0.1997911799612504, 0.2131172216364794, 0.22157735352955443, 0.2909801373218768, 0.2214040401602304, 0.23144140055536888, 0.2242519092765226, 0.2500557989103348, 0.25868567154270083, 0.22907054134967464, 0.2719038955909133, 0.5076070674536655, 0.5331270962226182, 0.2181068540296326, 0.5143521601704723, 0.5433302172492065, 0.2179974230946422, 0.5269640167994258, 0.5377396899438229, 0.5301993407926905, 0.5092886583911557, 0.5186281990919502, 0.5170202227913439, 0.5634764813599782, 0.5478913461982561, 0.5319660592044546, 0.5620081263011637, 0.5082385614330984, 0.5518479708801454, 0.511860377698486, 0.5408597007199311, 0.5253303011477494, 0.5281730660922016, 0.5036619370578811, 0.18208965161376434, 0.4862631660985327, 0.5368521650453686, 0.5333393844262242, 0.19188937585580956, 0.22064016237513273, 0.19152931323079014, 0.22163253538823324, 0.20438946148900228, 0.2601217422577512, 0.21883547386599933, 0.20809607532104513, 0.3077549809389848, 0.0881601553634358, 0.08510080966390665, 0.07501237977554343, 0.07946045902171694, 0.08605058561876522, 0.0909367803635367, 0.09183749236602112, 0.09292248882068144, 0.08036275625572675]}, "mutation_prompt": null}
{"id": "8efd855b-2704-47d7-bb68-1861ea5db752", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.02\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.5)\n                    CR = min(1.0, CR + delta_CR * 0.5)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A refined hybrid optimization combining adaptive differential evolution with dynamic local search, incorporating a probability-based multi-directional mutation technique and adaptive parameter adjustments.", "configspace": "", "generation": 63, "fitness": 0.39632931022197204, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.22.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7825992719583069, 0.7564068778197719, 0.7890876864451626, 0.7581732919712163, 0.7591149949293421, 0.774984640458344, 0.7704296307215966, 0.792732149975073, 0.7810597784060718, 0.6175425130996748, 0.6005340705598967, 0.6079715037666308, 0.582339820866218, 0.5973396354326075, 0.6100998398749075, 0.6173458877418603, 0.6074267701629639, 0.6123688381229948, 0.5951841302288515, 0.5684788799861529, 0.5859056769465076, 0.5786810565785867, 0.5695603287160413, 0.5727730550763873, 0.5943114920827596, 0.582347779538835, 0.5735574422179794, 0.5531339389128611, 0.5171563550072249, 0.5264227449128839, 0.5603967377607304, 0.5195565960918954, 0.5381602973035471, 0.5528880870749895, 0.543423411249579, 0.5401639464804456, 0.8669034247340472, 0.867773362417569, 0.8513315264683661, 0.8806579327126283, 0.8627842290447514, 0.8994533381672626, 0.8951057742002094, 0.9158756643972338, 0.8925692859537189, 0.46350843004017095, 0.43288813510715896, 0.4770225428819409, 0.3786866636799153, 0.4179524199927127, 0.44168165577172314, 0.4871587023781594, 0.48521657509801264, 0.48202638586814617, 0.18604155504216846, 0.19102908037204558, 0.16027750572309618, 0.2720412922545211, 0.2398474502286223, 0.23163857401997212, 0.19387659041493188, 0.20249207707743755, 0.20125010748491057, 0.4872537495147018, 0.4860982281521685, 0.47088063065621877, 0.11841999088663635, 0.4904909419210314, 0.5038908915092308, 0.5073884856437163, 0.4865690039888897, 0.4974764360204764, 0.4658290478403896, 0.47108136864934536, 0.46450230782838486, 0.4780404026438244, 0.48132765376862807, 0.47590368308489683, 0.4694810439049676, 0.46485025375246225, 0.4793029237677129, 0.0334253045923566, 0.39125545945020146, 0.3817443551521985, 0.37232650534931666, 0.3930285143368929, 0.39137460103348753, 0.39340417174972364, 0.3929617561756674, 0.3874129736455313, 0.4103227908515612, 0.3878164442047958, 0.405187034064562, 0.35948981754251286, 0.40855719209061914, 0.39928096079820374, 0.4108713587154581, 0.09905451777332364, 0.405228177633721, 0.3789043605464798, 0.36200445067410014, 0.37557521398851845, 0.40332409140274517, 0.39179198337072463, 0.10511090826087888, 0.35150579686761774, 0.3460912741144495, 0.3849877141519863, 0.14557797456087573, 0.07616378781200184, 0.1852089195061557, 0.2896582925382982, 0.08599680617424743, 0.1528599792395875, 0.14735197434425995, 0.07310167433326642, 0.11470224095306147, 0.6285647346271004, 0.6301874603811026, 0.6259386880246873, 0.6194138953746187, 0.6140807667017243, 0.6195996351303308, 0.624300673925926, 0.6284410481032865, 0.6383810111803043, 0.11599733244046306, 0.11954073121175535, 0.11893346171212849, 0.1166241860800521, 0.09695625494532001, 0.11755107784098906, 0.1155540848207709, 0.11170864499460842, 0.11313362166326735, 0.1826552242330537, 0.16897464915554627, 0.14290603122126044, 0.19751678191036937, 0.16125919075371364, 0.1904582940505295, 0.19988873849616184, 0.18152578615462067, 0.20130004194218432, 0.24729416442475527, 0.24247348934866764, 0.2962656742149534, 0.26457554793033056, 0.24877823179669034, 0.22733676960108629, 0.24416451303326026, 0.25292820647421843, 0.3006278575209197, 0.1533968298119731, 0.16593591153234788, 0.18456462592361156, 0.1549800110592887, 0.180705313419097, 0.17390964108094886, 0.20408470207804552, 0.18567486715335824, 0.1965455848952763, 0.22220207530017544, 0.21545159964039973, 0.20103158497507378, 0.23472132081216546, 0.22924469792032964, 0.22467684720631165, 0.1994336336453083, 0.21227249800588488, 0.20616537336897633, 0.21133730727878441, 0.5660505166066676, 0.5501730339561299, 0.5604957483053319, 0.5507257448519595, 0.5456448585775278, 0.5712271935767677, 0.5522824739356951, 0.2129666584519878, 0.5350702037003026, 0.5488130822675161, 0.5574398624536598, 0.5686916195407987, 0.6553786743486525, 0.5586623684768707, 0.5443771777228319, 0.5677577401111807, 0.5562815809922452, 0.5807661577250335, 0.5646324195818866, 0.5956720573846455, 0.1869231893042922, 0.18542784280909042, 0.18285720420007578, 0.5584237295050914, 0.5393392229884283, 0.5427395878309428, 0.21697778249250577, 0.19002657814786872, 0.21627160563483971, 0.19841555108713071, 0.21806777059915727, 0.2203779128803086, 0.23254219131306741, 0.1802500750032754, 0.1939330255418792, 0.07740800837908046, 0.0909651804513345, 0.07973344856132392, 0.09387510614553407, 0.0815533009214301, 0.10714357831596644, 0.08664693536366341, 0.08223925184427494, 0.08151696798619901]}, "mutation_prompt": null}
{"id": "0354f966-1af7-4311-9e9b-a618613d7779", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefinedStochastic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.35)\n                    CR = min(1.0, CR + delta_CR * 0.45)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefinedStochastic", "description": "An improved hybrid algorithm blending adaptive differential evolution, enhanced Nelder-Mead, and stochastic local search, with a dynamic parameter adjustment strategy for diverse exploration and robust convergence.", "configspace": "", "generation": 64, "fitness": 0.39755286342997065, "feedback": "The algorithm HybridOptimizationEnhancedRefinedStochastic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.22.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7654732836919061, 0.7536491403711417, 0.774796545313666, 0.7848746229192183, 0.7675359422974478, 0.7806085763451136, 0.7809500625213363, 0.7836585198458064, 0.769821470206645, 0.6034383585038319, 0.6215715334764161, 0.6182078529314048, 0.5952714313731362, 0.5941274177634213, 0.615993616912378, 0.594766280049501, 0.6132659916169381, 0.6388174662739405, 0.5749097725742387, 0.5595769040879688, 0.5818091437629118, 0.585626652720695, 0.5920530831740322, 0.5943875760642156, 0.5796287301817682, 0.5671361745822243, 0.5445748801590587, 0.5585486422869411, 0.17288828024909364, 0.5390178003039799, 0.5373593600949118, 0.16714861430687966, 0.555620669019505, 0.5290148437761182, 0.5746342667304276, 0.5416617449180641, 0.873108613977994, 0.8947372714283276, 0.890058455894544, 0.9138908345104592, 0.8891772233013074, 0.9186298280919336, 0.9103917395284058, 0.8932591868672438, 0.9142112319807199, 0.444808799128935, 0.47993878570693616, 0.49394465593380366, 0.4066215827729177, 0.4360127017970171, 0.4469398541976307, 0.4926479854822782, 0.4811840752057843, 0.48604466884254627, 0.1746957059774148, 0.19002443726329632, 0.16759156038478396, 0.2711286401572299, 0.25138705960862706, 0.5433496568832255, 0.1646118618290402, 0.21052158401403043, 0.19724538983896112, 0.47963908377805164, 0.46784812151578137, 0.46434164831862723, 0.4747483038992141, 0.4943900945872155, 0.5104757825901549, 0.49321611495877193, 0.5120609911944813, 0.4995644754912105, 0.47248150087391894, 0.46892363522310754, 0.11613189012375136, 0.4709681508780793, 0.4490019990002616, 0.4707863045576073, 0.47924788940895247, 0.4609914321974704, 0.46683974047950993, 0.3904302433678891, 0.34022366545012184, 0.3075693349661779, 0.0, 0.37248698211564657, 0.37051888109823894, 0.32670551698325156, 0.039256112278907684, 0.39843929169373427, 0.39672334503176787, 0.4040140281038376, 0.3999400365592575, 0.38606866501739234, 0.39219435695908156, 0.36754158133762005, 0.38300495830790016, 0.4160366316073294, 0.42566559822342276, 0.3746658736727584, 0.3648074725644105, 0.38279028944511884, 0.39941770149295774, 0.40058312310483934, 0.4020569345661136, 0.3525375784220136, 0.40050820079309524, 0.3627750874436244, 0.1658559665280338, 0.051795975535298244, 0.13385878062942935, 0.1361844835855769, 0.17199472050928055, 0.15664574754945804, 0.1375572327154989, 0.19038005405876213, 0.1753231365850335, 0.6397228066331753, 0.6249511188411352, 0.6298585017662328, 0.6316365845595329, 0.6128733193134364, 0.6200867786929998, 0.6533150193114077, 0.637260555497736, 0.6331377039277157, 0.10752311453877961, 0.10044701888252638, 0.13837652227030428, 0.13645837634237978, 0.09620233410698986, 0.09364188267812623, 0.10264792866174466, 0.12221053110868052, 0.10463115862854633, 0.20599676281106338, 0.14746929817692545, 0.18517838487074345, 0.20774261006576233, 0.1529395000308641, 0.16695969520229426, 0.16973141120262758, 0.19836043761251498, 0.17289502883787222, 0.20522063035180682, 0.22731041414779596, 0.1918229847163706, 0.19869790856451308, 0.23843702793525412, 0.22202945437425714, 0.2610129662940771, 0.28483526772824075, 0.22595641333236693, 0.17700588104847703, 0.17517730635384565, 0.1504648263284709, 0.20476825575028001, 0.17905374430819043, 0.1654083680983447, 0.20788826936040639, 0.21456909755793707, 0.2149380562924934, 0.21350674880665632, 0.23045646928366748, 0.1955663637971501, 0.20978883436485674, 0.23860865022404465, 0.20038536226288672, 0.19595835945250528, 0.19856186339392212, 0.23693012329131913, 0.5494260472305522, 0.2198880095335748, 0.5565888213925461, 0.5605668729312066, 0.5490463484195556, 0.21679545419976887, 0.5591220294048307, 0.22259228488420435, 0.5422483835661062, 0.5709275252114832, 0.5640862115663416, 0.5791711304556557, 0.6344826792053682, 0.5609107614598368, 0.5421517856688862, 0.5409882088293325, 0.5724701547556938, 0.6087274815296981, 0.5547854877070331, 0.5410090655009733, 0.5519922320817774, 0.5580578613462516, 0.6013667400066388, 0.5385577674345293, 0.17739543917897305, 0.5575181357207517, 0.5702444433097417, 0.18916506462606208, 0.20681399081795981, 0.21219160171462403, 0.2038036311797119, 0.24837600901747137, 0.21779870027179205, 0.21618463977391644, 0.2548826383341195, 0.22055295073695358, 0.0782758154556139, 0.08570997066707164, 0.08326617396401126, 0.08704270948731352, 0.08485483962524454, 0.10899025573815546, 0.07638060074097497, 0.08466093235650718, 0.07793319245187702]}, "mutation_prompt": null}
{"id": "3d72e257-d198-4826-a171-cf402d5a621c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "075ac80e-4b22-4391-ba84-265645d144df", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "e8dc24a1-dc9d-48e1-8785-162038d4b54d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass AdaptiveQuantumInspiredHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim\n        F = 0.7\n        CR = 0.8\n        delta_F = 0.03\n        delta_CR = 0.02\n        epsilon = 0.005\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    quantum_factor = np.random.uniform(-0.5, 0.5, self.dim)\n                    mutant = np.clip(a + F * (b - c) + quantum_factor, self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.5)\n                    CR = min(1.0, CR + delta_CR * 0.5)\n                else:\n                    F = max(0.1, F - delta_F * 0.7)\n                    CR = max(0.15, CR - delta_CR * 0.7)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "AdaptiveQuantumInspiredHybrid", "description": "Adaptive Quantum-Inspired Hybrid Optimization: Integrates quantum-inspired techniques into adaptive differential evolution and refined Nelder-Mead for enhanced exploration and exploitation.", "configspace": "", "generation": 67, "fitness": 0.35432814585752687, "feedback": "The algorithm AdaptiveQuantumInspiredHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.6678983908581368, 0.6571463321669513, 0.6461695320508362, 0.6627749464018697, 0.6555777038606126, 0.6591046217771186, 0.6661743932690907, 0.6539388316440864, 0.6583157507207198, 0.46065341527304704, 0.4362387308683662, 0.4447306150119268, 0.4740195642471937, 0.4696265878747613, 0.44239128160816243, 0.4624246880999, 0.45585873076712746, 0.48704705866213693, 0.5169718797733367, 0.16814534257644098, 0.5149399581170322, 0.5165309666966338, 0.5086069091623251, 0.16318150172272927, 0.17083200080563987, 0.5092157709690933, 0.1544202448998585, 0.13920582717521335, 0.14371346487392334, 0.14860630686811505, 0.5078189157102505, 0.4996994234111014, 0.15414104823826513, 0.15083479809547318, 0.1488097326890251, 0.15856152569999105, 0.8918153440729081, 0.9103229547629197, 0.9124215933003874, 0.8929025476448599, 0.9447220133649336, 0.9149749801875469, 0.9179099710541252, 0.9620209308927217, 0.9360781854094654, 0.48085639430140625, 0.46248754449966734, 0.4309453308158162, 0.36927873992021343, 0.4545810776938003, 0.4799586481402297, 0.5046382006782976, 0.4933166387894763, 0.341215968367263, 0.18156220014355695, 0.19444238619949672, 0.1569065089800984, 0.24861252342296924, 0.29752026407358334, 0.27406056470260987, 0.25125320430806464, 0.21672797474601657, 0.2142447882601185, 0.47553142223251343, 0.4964626480968757, 0.48163195688601046, 0.49727558849618547, 0.514692204035001, 0.47200688153956627, 0.4936697595829357, 0.4869854046318338, 0.5192843468107399, 0.4670138534946202, 0.47119418736384766, 0.47041853004915857, 0.46693475931131856, 0.4618766388329997, 0.4820540354290691, 0.4762572015480184, 0.46500664652419077, 0.47418004731433916, 0.35462882209217406, 0.39461204746064626, 0.41631256720953236, 0.027156527510859063, 0.40089221162075217, 0.0, 0.39578473448253904, 0.004891434794114691, 0.40140542647578903, 0.43421612305085455, 0.4110373624038155, 0.39023400511422046, 0.06547956835061908, 0.38255622702001546, 0.40607017348487084, 0.3697501685762947, 0.4116800631076737, 0.41818317654583803, 0.38994958190170825, 0.2319113330352871, 0.3879247363554794, 0.39358049064290423, 0.39996254958482214, 0.18281322766195518, 0.3753496857804798, 0.3227425770761816, 0.37918456358023445, 0.14210557614283226, 0.0902567598801306, 0.13345297425204883, 0.1536051173741806, 0.11331435294051007, 0.09755738944226233, 0.11137756120716491, 0.1282129669217391, 0.15587569179040017, 0.6267978901377053, 0.6212234360435438, 0.627069315241609, 0.6222281415646291, 0.621771439988681, 0.6085380034847023, 0.6285809139283338, 0.626358514732485, 0.6098345284160236, 0.12360286646754526, 0.0975258298741788, 0.11921432320281566, 0.1181314463320634, 0.12274904458319835, 0.08616256475169426, 0.110885042852639, 0.09566993747339148, 0.11438589884389261, 0.14883463838073385, 0.14135327906577366, 0.2450456146105835, 0.17126614703390808, 0.15658191162106705, 0.16359520330447108, 0.14925068608754266, 0.15293551657595017, 0.1939081608561899, 0.23787016819832407, 0.2896688691311162, 0.2460389146558154, 0.24087169265687403, 0.25931890857369166, 0.2211550899323329, 0.22827874814724403, 0.2864961120819939, 0.28431100655986596, 0.17595448549657955, 0.17172953544663883, 0.1689311342846378, 0.16658577509869388, 0.16849739225693516, 0.18604309166969835, 0.19385519431538878, 0.17721427262945144, 0.2330593853225279, 0.2257560916830249, 0.21443082351619813, 0.20910993645810316, 0.22077673869911218, 0.19228907149993424, 0.19326399882902057, 0.2188563673284878, 0.19893752072879878, 0.2326306742245533, 0.5457663596343367, 0.19625518787407437, 0.22596556573922844, 0.5387086836846274, 0.5548968706558686, 0.2108534974722659, 0.2121517666126297, 0.21303257505223316, 0.5575314391487644, 0.5489190127744135, 0.17974451293286098, 0.5319851306954446, 0.5609086859872958, 0.5845569226092069, 0.5324512211672028, 0.5537642759069679, 0.5524631445676909, 0.5752990187578376, 0.5284443673169246, 0.5521124373719666, 0.5385595325531144, 0.1922463134616451, 0.160253850630092, 0.187763117953328, 0.5192869219881476, 0.5519429161391272, 0.5599966547460038, 0.21563453615201256, 0.20085516553176497, 0.20749407539865516, 0.22072022362881327, 0.22388259274667888, 0.22729188078394214, 0.21950605215702135, 0.2159257862403392, 0.20497306787343506, 0.09397013776978402, 0.09257790028352442, 0.0798134859663191, 0.09820243886500479, 0.08497499680588283, 0.07806882548133598, 0.08170746965460074, 0.08105655812025236, 0.08028487502354587]}, "mutation_prompt": null}
{"id": "c00a3b92-bb91-4a40-bd83-0a6b2e112409", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n        restart_probability = 0.01\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if np.random.rand() < restart_probability:\n                    population[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    fitness[i] = func(population[i])\n                    evaluations += 1\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy integrating adaptive differential evolution with enhanced Nelder-Mead, employing dynamic mutation vectors, adaptive parameters, and local intensification using a probabilistic restart mechanism.", "configspace": "", "generation": 68, "fitness": 0.38434320561891133, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7416732732714546, 0.7486884327188839, 0.7486686189996536, 0.7358551037804659, 0.7488567934936742, 0.7416357322488664, 0.7389536976817914, 0.7331486305575343, 0.7325366402825784, 0.5851832585663467, 0.5602386752503627, 0.5398016596323424, 0.5807908284701251, 0.5774012648694918, 0.5847906459467052, 0.5779914972464799, 0.5923220595765688, 0.563385376320962, 0.543355767983069, 0.5594233224401658, 0.5575390938983867, 0.5593448833090735, 0.5604747029373873, 0.5454444927103886, 0.5537858526350203, 0.5353869813716667, 0.5330827951408501, 0.5301433085362015, 0.5161164916510266, 0.5250614595721181, 0.5549655741715667, 0.5296053805881311, 0.5173901258954884, 0.5054165589124027, 0.521586183965679, 0.5124862532845493, 0.8398715249276075, 0.8686409781366249, 0.8563431868601108, 0.8697417942688865, 0.9105041114978385, 0.897865024423118, 0.8118892338803971, 0.8852375596476736, 0.8836767207133166, 0.49343741457602697, 0.4854669369303599, 0.3847820103202114, 0.4534593634924, 0.37983731425523115, 0.4376431324342951, 0.4862791403182496, 0.49620693541933447, 0.46790155432319114, 0.20691443356233763, 0.19213403471349422, 0.16328148103723872, 0.2475777214365451, 0.2641194681391841, 0.22162295256559306, 0.19583714764650473, 0.17582385594893568, 0.18520685961961558, 0.4595893755424907, 0.4757057860281694, 0.4800973982100101, 0.49115161100554483, 0.46477956565065437, 0.49253010050166124, 0.5135418880400917, 0.5236708791064348, 0.4913079522744417, 0.47015189524472345, 0.4697522654307864, 0.4437485606963546, 0.474626666097299, 0.4646675382262161, 0.49183638865914414, 0.46996725494070457, 0.11616092400543543, 0.47457941609148757, 0.3575833391798343, 0.0, 0.034790067357395316, 0.37671190710433944, 0.38933850746612364, 0.3615542083490565, 0.40073691949667456, 0.40107291098748177, 0.40796247977449807, 0.36179962516996, 0.39120868452721, 0.4361614684161115, 0.4080700173413758, 0.3971343093593589, 0.3854030628480537, 0.4240295157113859, 0.43243151541555525, 0.424999545119361, 0.3727494698276961, 0.33499089462224707, 0.37100699896755296, 0.3960776329801271, 0.3981062230683363, 0.39672822967708776, 0.33648732515463875, 0.3467796725206437, 0.33546771928604613, 0.1352242361546978, 0.12039103300764842, 0.10423937929816751, 0.32843629754820036, 0.15426926518621853, 0.1555913313941163, 0.1603278858908096, 0.13660414935508847, 0.1401084401976892, 0.6291959648648331, 0.6167780850134581, 0.6209191485192531, 0.6247624546454709, 0.6239309492012366, 0.6224007270680944, 0.6150508873187858, 0.620879972596649, 0.6296689471155243, 0.12268013764644092, 0.12376342967597542, 0.12233086492107481, 0.09803440136896258, 0.08924423514442859, 0.12133893030987652, 0.0940941015237331, 0.11477092193865213, 0.08870187429721521, 0.18992473004818589, 0.16567392856494279, 0.14209948438430453, 0.19590540813821178, 0.17021835446508193, 0.1799399588032704, 0.18290956839259742, 0.16552124575019078, 0.17002724516285506, 0.24317838454421958, 0.21776852635445243, 0.22612367453310445, 0.21405176514664415, 0.23717150639550866, 0.2136872614645512, 0.280942534330213, 0.25957317693376336, 0.25709650428783926, 0.18215261077428235, 0.18049978841424796, 0.24543583305961547, 0.18666100509957484, 0.19509406295198006, 0.1676681277496651, 0.13447190475827153, 0.1648943936954469, 0.16113114561943698, 0.2041370555602161, 0.22849095001958286, 0.20100617309038893, 0.22687254316769967, 0.22198989930427449, 0.2511373757481392, 0.20635944998115252, 0.22562131977489774, 0.21526864545662205, 0.555623552459259, 0.5616345399435125, 0.22569384643591917, 0.20179323875017163, 0.5579485547999914, 0.5447210136575189, 0.22475351563655377, 0.5573463292507655, 0.21648594299183255, 0.17582408522533588, 0.1510796579989525, 0.21704095318257344, 0.5619907264703965, 0.6067696234585183, 0.5375633849841148, 0.5483351330688124, 0.19585066848471344, 0.5425562395514638, 0.6150000012189014, 0.5321239582364075, 0.5233705994448086, 0.5515552325586166, 0.551118610767191, 0.17514559103834126, 0.5508195883088405, 0.5786380800139708, 0.5447317019717464, 0.23375051978089034, 0.17634343717943046, 0.19574917764074395, 0.2603984096493902, 0.21707521438005062, 0.20174229822998568, 0.2260897241911538, 0.20741022135269194, 0.22194064971174177, 0.08530153074766567, 0.0782543510073167, 0.08660259535278181, 0.07906580970346344, 0.08221429665992586, 0.09461364865231081, 0.07265677327233133, 0.08509182855485231, 0.08279294008958693]}, "mutation_prompt": null}
{"id": "8eb28d55-2381-4f3b-b069-fd494fe3f277", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefinedStochastic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefinedStochastic", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization, now with stochastic focus to diversify exploration.", "configspace": "", "generation": 69, "fitness": 0.397839755528747, "feedback": "The algorithm HybridOptimizationEnhancedRefinedStochastic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "0d80c329-669d-4c31-b21a-67198bd38111", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.65)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.01\n        opposition_prob = 0.2\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < opposition_prob:\n                    mutant_opposite = self.lower_bound + self.upper_bound - mutant\n                    if func(mutant_opposite) < func(mutant):\n                        mutant = mutant_opposite\n                        evaluations += 1\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.5)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A refined hybrid optimization strategy enhancing adaptive differential evolution with an augmented Nelder-Mead, integrating stochastic opposition-based learning and adaptive local exploration.", "configspace": "", "generation": 70, "fitness": 0.26575734619708813, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7507457835643058, 0.6987565068761441, 0.733456610505732, 0.7098264489531321, 0.7558616014676398, 0.7470289630760654, 0.744473073093535, 0.7258803188743318, 0.7507767511770882, 0.5500293394483768, 0.5441427742878413, 0.534840690030427, 0.5307174525562565, 0.5326193032380805, 0.5631823936747913, 0.5362169234380517, 0.5232977580282192, 0.5612239992406216, 0.4647627775429404, 0.44467219346454034, 0.502508273266138, 0.45612404313981547, 0.4761630561292014, 0.4579389005473701, 0.4711492925077111, 0.37461351176422175, 0.16494849648867826, 0.39527275986828325, 0.3456964806013276, 0.4602786274305336, 0.43124529076928586, 0.4559507999732093, 0.15977335610909849, 0.38293399613444, 0.4227577316982992, 0.37607163831652113, 0.84651266570427, 0.9133820667473701, 0.8101592112454714, 0.8437178529319278, 0.867568591925407, 0.8566832973482408, 0.7871465092577675, 0.8238473477633158, 0.860728609647274, 0.14437358032066927, 0.18003821461866332, 0.1693113198410331, 0.1713902403976998, 0.11918314609550362, 0.08625157193177091, 0.1642373477214336, 0.18033679818620874, 0.20361069880321314, 0.21246262282275497, 0.17770598184422126, 0.19536353629183723, 0.26018182756259844, 0.20781194116958102, 0.196105242896351, 0.20402093236603747, 0.2648544600096314, 0.21391110878041442, 0.20939417294544282, 0.19241428006683625, 0.2232389915323686, 0.18535836189935084, 0.23567403199471448, 0.10025544799597463, 0.2371175483496234, 0.19180976285311702, 0.25348919193406216, 0.1851053714004095, 0.18569740804617385, 0.23681829346286953, 0.21125926981339782, 0.1965351289912034, 0.23842137447514244, 0.14333897787136973, 0.21390603623110005, 0.206165358465061, 0.03093898781676674, 0.003403128948451184, 0.005148632659648489, 0.030645700711340207, 9.999999999998899e-05, 0.045007880841580805, 0.0651246853612667, 0.0011806070977662397, 0.049449349397734266, 0.10443263527166291, 0.07650606297824669, 0.10802778505279498, 0.0862985332663655, 0.12994849194203817, 0.1004315038585799, 0.10699929530240149, 0.06027486622159284, 0.07514318995411673, 0.020604194531664843, 0.022201525206402728, 0.03644172893821285, 0.04296552244422347, 0.044961385846765345, 0.05051233277480205, 0.03711300781229965, 0.03951891353919634, 0.019194479840922707, 0.07780646701146632, 0.052707979346544365, 0.03311820828708567, 0.11100455354724914, 0.07765053769645602, 0.10976365038701186, 0.09799755049355918, 0.09741224475072618, 0.08495920160086767, 0.42855743402217494, 0.5384051724828705, 0.41049360527864287, 0.4309744113377635, 0.43830144292630047, 0.43603507571767497, 0.44906247913362773, 0.4359979699737745, 0.45525105491873585, 0.09473592266383202, 0.09791608387917095, 0.09271815026890162, 0.09937995709423253, 0.0805716748347306, 0.08780359124252846, 0.09475365324923679, 0.08730346354645613, 0.07904554943193398, 0.1806998706785602, 0.18278882454883127, 0.17959233600388014, 0.19524077406003926, 0.15778303290142304, 0.15102455492283207, 0.17205655327298341, 0.20595333733759202, 0.16364964339971722, 0.2116266364746644, 0.2352187351763142, 0.23719368328082535, 0.21889961173327244, 0.23251229779098959, 0.2298107719868413, 0.2537149201761042, 0.2476681293695805, 0.2035310915132238, 0.15892079385817792, 0.17971712959541497, 0.15256682809752986, 0.1680833680523034, 0.17830622909725846, 0.17651107613162154, 0.16105918299780264, 0.18067087408125004, 0.16140128251571784, 0.2073274027974915, 0.18804954019301512, 0.19240898146353425, 0.21148011683703627, 0.20140356510268964, 0.22673285805964816, 0.2151354039929032, 0.18174681971178497, 0.19649223447466124, 0.30041109656574905, 0.31614542390081046, 0.35873186271181245, 0.2746650278318784, 0.3546422330099218, 0.30509527912592105, 0.19964782691612826, 0.2891543335773191, 0.22519998456837131, 0.1763033039710975, 0.29776673114281793, 0.3045951784251145, 0.5255049377152503, 0.32721382692993795, 0.33840157342217136, 0.3067762484731855, 0.3134437546195348, 0.3308011818650026, 0.17294622501918333, 0.2557609192861904, 0.3318382515345152, 0.1792535622409661, 0.18576086072740094, 0.1780462364964147, 0.26705043428405784, 0.2944741147649571, 0.27920835181085357, 0.19208499011750502, 0.1817232444116632, 0.18792158003128756, 0.18924869607524464, 0.2092338725367514, 0.1971031086209798, 0.18514059738335698, 0.18690340173676923, 0.18746511954410605, 0.07788694963845466, 0.07678578287368343, 0.07153560176074858, 0.0769216112744403, 0.0803888134069306, 0.07427550833978491, 0.07113157148178328, 0.07963169451803587, 0.0772522196138885]}, "mutation_prompt": null}
{"id": "11500953-e5b0-4bb8-92f1-1dedb8537ddd", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "6474c275-5ee5-4d1c-af6d-298f315a1a3c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass AdvancedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.6)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 16 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.002\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1] * 4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.2)\n                    CR = min(1.0, CR + delta_CR * 0.3)\n                else:\n                    F = max(0.2, F - delta_F)\n                    CR = max(0.2, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "AdvancedHybridOptimization", "description": "Advanced Hybrid Optimization integrating adaptive differential evolution with dynamic Nelder-Mead and stochastic local search to enhance convergence speed and accuracy.", "configspace": "", "generation": 72, "fitness": 0.3680213433935151, "feedback": "The algorithm AdvancedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.20.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7243369533898767, 0.7174573138440321, 0.7457251363826506, 0.7270409772166166, 0.7260492767294143, 0.7294425244578928, 0.7357276417986143, 0.7227448362085571, 0.7257818297017458, 0.5372798177344584, 0.5410857382610684, 0.5209785675488837, 0.5401775840596014, 0.5355878649756659, 0.5597528185674061, 0.5473370295956795, 0.5575965450779115, 0.5342382096795246, 0.492214425458814, 0.4916847085818674, 0.4975270593234712, 0.498890441324786, 0.4890650384918477, 0.4719530473401352, 0.4920951710719986, 0.5010219329720715, 0.48820255859318207, 0.47852730608703986, 0.46848232317892013, 0.47014591942040285, 0.4662188757437218, 0.45931516183486953, 0.4472206890649756, 0.4752496006257225, 0.4710620239946255, 0.15331040729644152, 0.8615597670930862, 0.8750635027898126, 0.8667481114894487, 0.8630667268900112, 0.8681533813009827, 0.8559504626780623, 0.9322091358799763, 0.8719902209999166, 0.8532103879295266, 0.40215016966126427, 0.42273038936336027, 0.41699149443543615, 0.4096865398278212, 0.4009966639013385, 0.3535004838155119, 0.4184691219368928, 0.43542853979571705, 0.4500506867884563, 0.17733981912508356, 0.19138082753250074, 0.1596520216266435, 0.26225359552702, 0.26110345832131043, 0.2936847528780554, 0.24811300257810998, 0.24499981735927, 0.1959563408008247, 0.42279092332836654, 0.4376080241126711, 0.4239901548818631, 0.44325537811828375, 0.44463729492214954, 0.433022447952471, 0.43872423116195836, 0.4522600238084661, 0.43957512436057733, 0.4216424063477606, 0.43852390962034193, 0.43159931544448227, 0.44075880792429767, 0.43353434615380515, 0.43113837409681277, 0.4381380623179849, 0.4316342876996744, 0.42897170044507904, 0.3406320972553951, 0.0, 0.040078997284760054, 0.3447145746006185, 0.33708698056040054, 0.33604603024745106, 0.036239742567175215, 0.3408191571438207, 0.3676291261276906, 0.36411497153809247, 0.37307618030938006, 0.344849037008192, 0.36375124966643446, 0.093705703724548, 0.3568273835000989, 0.3790198162400713, 0.4090727079804497, 0.41629330128669406, 0.32831871267531565, 0.3396554687191228, 0.3200210609834824, 0.3466620147542121, 0.34561421207982534, 0.3323959481377218, 0.2991806450697143, 0.31208134326200365, 0.27322060525472747, 0.08942430016850833, 0.09456146040750824, 0.07247500315401156, 0.28017203223888365, 0.1781205892017973, 0.15048790650907196, 0.14826673784403588, 0.17418548743655116, 0.0868864343393907, 0.5912185133864394, 0.6034921290572356, 0.6136029387983986, 0.5929213619241568, 0.5881932999927466, 0.5873351614476463, 0.5926075857768618, 0.5929408813673975, 0.5954993783813594, 0.11380764247734043, 0.10165237339584987, 0.12455547385472332, 0.10719224073715372, 0.12004741847073708, 0.09901858663758978, 0.10116605182137206, 0.0915942085454321, 0.1138406529612288, 0.16749151383528282, 0.20566544592362923, 0.22896176313529448, 0.22358855778154485, 0.15989983137960062, 0.20768006283263296, 0.17182140716567884, 0.20264513781816973, 0.15533728334170682, 0.2290499832471049, 0.24306004425697902, 0.19975463203524535, 0.2577194296825158, 0.2211744405524967, 0.261235140972786, 0.29128186608864504, 0.281371781854155, 0.2609448081876259, 0.18226326399039283, 0.16618040731457218, 0.17107304814803648, 0.1706965164410743, 0.17110289554813884, 0.1539319714858084, 0.1575255562640392, 0.1997321767162784, 0.18743067274509362, 0.22567155688284235, 0.22614884667015334, 0.21490438705852688, 0.22397952776216012, 0.2150939851877255, 0.22709893432785333, 0.20528598053374858, 0.2052514017022954, 0.2296423386085915, 0.5110064742157393, 0.502830663939854, 0.5020808351590516, 0.4985864959623546, 0.5036712566661086, 0.20722275459734618, 0.5058946651953873, 0.5063479454401885, 0.20323751028435366, 0.22758801295481124, 0.5012576840238123, 0.5075580206877953, 0.5504449978675583, 0.5409548849190007, 0.5238849943165355, 0.5082529752913999, 0.5172082540125579, 0.49332607659970085, 0.5354026115492239, 0.5256099185815739, 0.534409414161297, 0.5015912040772836, 0.16071964808217165, 0.18986364705632575, 0.4964876991047883, 0.5584539533211372, 0.5272126808123504, 0.2518442536972002, 0.19706063628976167, 0.21296498816567, 0.23590858669676706, 0.21062330418307795, 0.24679379822490777, 0.20985886601496218, 0.2097183189250723, 0.21715031453090072, 0.07878137239293248, 0.07809983731489534, 0.08319604338987463, 0.0974771702024384, 0.07838708686179396, 0.08440141370241905, 0.08566088995306076, 0.0866192724854925, 0.07411763464209775]}, "mutation_prompt": null}
{"id": "c30659d1-8f78-40d8-9e0d-1726495edad7", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.6)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 15 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.002\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.2, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n            # Restart strategy to improve diversity\n            if evaluations < self.num_de and np.random.rand() < 0.1:\n                population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n                fitness = np.array([func(ind) for ind in population])\n                evaluations += population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A refined hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism and diversity preservation through mutation vector adaptation and restart strategy.", "configspace": "", "generation": 73, "fitness": 0.2677988949987892, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.17.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.617310225515094, 0.5611164817479182, 0.6050258747922093, 0.5709258902564672, 0.5493861777948563, 0.5461806161720835, 0.6288240816162172, 0.5834945323841753, 0.5911365132201876, 0.3367375427181871, 0.3133927650543442, 0.3956763228530781, 0.3111971040662691, 0.32709121328141477, 0.3664740983039453, 0.3686402764092317, 0.36136652896926025, 0.3907587403238708, 0.10971378473527893, 0.07747007571304387, 0.13252287693375397, 0.13630694683612, 0.08571660278303483, 0.1246333827433671, 0.11749623033571621, 0.08273691405788852, 0.12311919716691277, 0.1061313805443751, 0.08294464785475031, 0.10203462933237284, 0.13016667328458842, 0.08756847998903505, 0.09396670063281454, 0.1586551619577261, 0.07666309615756439, 0.10424316730419725, 0.7813404667625108, 0.49614436625489766, 0.36438918778397744, 0.8855050607175853, 0.3518311406272132, 0.6863935717863677, 0.5196816791877837, 0.5029520696281677, 0.5768617815990317, 0.39891562686251325, 0.3869388190377745, 0.3917743958145147, 0.3207442345397199, 0.3911695743940974, 0.378062566211231, 0.43290529975846637, 0.3536203529477048, 0.3826547888893336, 0.15659402742676953, 0.1610411551179426, 0.11694022891467648, 0.14225569008196892, 0.15336425820448896, 0.1749256960172213, 0.16224742621339205, 0.170282343965391, 0.1443409326885663, 0.39204285172666475, 0.36218801761913466, 0.3973823619133847, 0.35268822850443704, 0.07893645857866305, 0.36188739923662083, 0.39550164272528465, 0.36864779362798694, 0.3847639432807439, 0.10904832151287758, 0.37783710847501584, 0.3522191455376764, 0.4084496492784161, 0.3482962186105957, 0.37835695082508347, 0.40279400842405944, 0.09114193470223564, 0.3835325438177877, 0.2977371144985371, 0.27851843138043475, 0.3107664730415327, 0.3231743882576904, 0.33947955021959, 0.32875063592189546, 0.33399224578755005, 0.3517523117000533, 0.32298393428744954, 0.3705572790004218, 0.3246136134760982, 0.3119396708644746, 0.32403598083486584, 0.34777927336586767, 0.39868994653443424, 0.3650953664564969, 0.37667228692506904, 0.3117117915899027, 0.021370067875501664, 0.3230149122707636, 0.2676343140972689, 0.24190003397099957, 0.21820396696221944, 0.33846596563204856, 0.22919757477700953, 0.3087903741464275, 0.147999992866663, 0.04507573946581911, 0.10695462641989073, 0.043931434246197165, 0.07753419523483462, 0.04675660207476762, 0.04845512834126364, 0.1341494220337076, 0.03717684246045505, 0.08370968268644774, 0.5244226823931579, 0.5090477858245923, 0.5497076540024779, 0.5573427344880377, 0.5130598096260788, 0.5309461030090554, 0.538303672579074, 0.5063924720811575, 0.5426706734049218, 0.07908575174218513, 0.057103632929442205, 0.06991497428420612, 0.08853666123425241, 0.07923590456337437, 0.07190939641978888, 0.09711779525489272, 0.10666804430611065, 0.08511233112655903, 0.17654071172404906, 0.13833980063746854, 0.2527292300200744, 0.16856967909373088, 0.18337490354764763, 0.18680670707740576, 0.1420476581093406, 0.17965143504497194, 0.14021329551999118, 0.19490114274557857, 0.17942000893077437, 0.19924819379932324, 0.19021766920150207, 0.19382567580834897, 0.20013509998692736, 0.22139795436152288, 0.19873239700728773, 0.1800507607381916, 0.13671884529073397, 0.13373198329338642, 0.14113671907796177, 0.14871552756752449, 0.1531891805097244, 0.1268362686281882, 0.15727485463900193, 0.13675582513094453, 0.13933936224434418, 0.190425183372961, 0.19212692541617948, 0.2225821631883369, 0.219708022509444, 0.22684956236436393, 0.1744632450187572, 0.17732240494939322, 0.1884404630194757, 0.187225130085927, 0.2345033566256609, 0.18292298811854002, 0.1829368524970092, 0.17698824422051107, 0.17988342126242807, 0.16615892843514812, 0.18475255009853175, 0.16988854493587058, 0.17316439978665243, 0.4956875952062406, 0.4864332129252258, 0.48458129879904044, 0.5029515039536538, 0.49345640293898607, 0.4898471823203342, 0.24978904042291927, 0.4811554610405576, 0.18950592789072673, 0.18518979164748595, 0.4834697488976277, 0.20037559660637327, 0.18363247450136533, 0.4899914249347007, 0.4996867111678074, 0.1977692068782244, 0.48138724772288255, 0.2665090002199688, 0.19384964548897388, 0.21437185553213456, 0.1961976081536535, 0.1887994442280777, 0.19248310179159422, 0.1985035731057304, 0.2320287740540956, 0.19352938743119452, 0.1890511759730782, 0.06893405354476256, 0.07932762264685078, 0.07166241478646096, 0.07393741965860023, 0.0690989355911974, 0.07812007101354701, 0.05885323992306801, 0.06583432093219366, 0.05675106952264908]}, "mutation_prompt": null}
{"id": "30683c20-b9d7-49de-8f2c-5c960e3eeb35", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 16 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.002\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1] * 4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.2)\n                    CR = min(1.0, CR + delta_CR * 0.3)\n                else:\n                    F = max(0.1, F - delta_F * 0.9)\n                    CR = max(0.15, CR - delta_CR * 0.8)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, incorporating an improved dynamic selection mechanism for mutation vectors, adaptive parameter control, intensified local optimization, and occasional random exploration for diversity.", "configspace": "", "generation": 74, "fitness": 0.3859214876110314, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7468799906529703, 0.7429992594587721, 0.7583348207526905, 0.7559634798624064, 0.7472704295600916, 0.7411657309290874, 0.7528276294554207, 0.7512812264749045, 0.7304610700522691, 0.5686065151750094, 0.585528170153641, 0.5863487196010044, 0.5894116769592392, 0.5749631854855652, 0.5723894311586697, 0.5651827608197431, 0.5615617455922999, 0.5957343933596335, 0.5524952733941635, 0.5540333377364501, 0.5499578268570565, 0.5443939320646487, 0.5458963486257064, 0.5438734916607361, 0.5462250535175855, 0.5536236646918287, 0.5866216582978745, 0.518633214101913, 0.5304611993185562, 0.1569153665634847, 0.5296990368506689, 0.1579412448972245, 0.5113526010454111, 0.5322209867282583, 0.5386027247247721, 0.5136589070846223, 0.848231856977066, 0.831029311957024, 0.8345217312279961, 0.8523599058822044, 0.8695134713810494, 0.8679973404787411, 0.8874893299372851, 0.8720871766978632, 0.8179608361280463, 0.4801115360261574, 0.45906595575554043, 0.4296022120088564, 0.4232663674609486, 0.3832021064840643, 0.4437436132052781, 0.4899438460108487, 0.4798872063783498, 0.49781938177217955, 0.1798928677145999, 0.19287403576373863, 0.2082353206832669, 0.2939822083454625, 0.2941356920794611, 0.23804208561871443, 0.21336674072753303, 0.222016351158268, 0.19037903175284843, 0.47597223172534764, 0.49156573142618065, 0.48932163657124084, 0.4764163528587727, 0.49334258123221786, 0.5002826425669706, 0.4850197116550007, 0.500807141822341, 0.4756045463643369, 0.4661150824186575, 0.46450713716486314, 0.47996539260828686, 0.49700207151756914, 0.4703487434712198, 0.47110114684170445, 0.448932708161233, 0.4614139206571003, 0.4715913798034368, 0.39715631874040114, 0.3938671103004596, 0.04442640903079842, 0.00919893367717961, 0.4004114501524272, 0.387853813632705, 0.4066562684466054, 0.39623332842201653, 0.3763186128713958, 0.41802382631379265, 0.4177269394142551, 0.41080648772724326, 0.37600467623391354, 0.4102040561036103, 0.07496828783156162, 0.39775440003401863, 0.36616564771486615, 0.4153099260531593, 0.3781333612208576, 0.39596902350026675, 0.13600153673883675, 0.39667026547614426, 0.28618258755366865, 0.40824391212196975, 0.32907404179121125, 0.3306905958940638, 0.3268709878612984, 0.10968840060063323, 0.22668670122291845, 0.12832362856673574, 0.09725161245411418, 0.10804647295885283, 0.0961754114658443, 0.08005456257437149, 0.3358944266504449, 0.07880211285974015, 0.6056530552892576, 0.6101505792844766, 0.621553705479065, 0.6104299051484003, 0.6435919380243638, 0.6151542288780866, 0.6297945670012972, 0.6234245991929994, 0.6248153906458309, 0.10564777319448693, 0.11147207018610139, 0.09937207705054751, 0.10141755344059766, 0.09475821081462599, 0.1277071308793003, 0.09703300087989664, 0.07825612799826942, 0.08933847281566709, 0.17781110624045082, 0.14503091134810997, 0.16239240111769104, 0.18187714993824877, 0.1554221112587567, 0.1669897482207756, 0.17761108881832222, 0.165683053104821, 0.16115226269501748, 0.25519242163271383, 0.2306932378455151, 0.2044841880605579, 0.22607540028453366, 0.21321429363710065, 0.22190207318083333, 0.23949030555313033, 0.25167888647580006, 0.3532907025907184, 0.20879548178322582, 0.1983751708208683, 0.15752423598067655, 0.15688281196074672, 0.17645336886848018, 0.16356220939685517, 0.15209722948127857, 0.14008348655729608, 0.20597089799552304, 0.22590484138119937, 0.22357157963904806, 0.17834084080039703, 0.21215616158547201, 0.19873796303226532, 0.20328825128014394, 0.20675767352461794, 0.2171646741969251, 0.1880008313893502, 0.5522864890615703, 0.5652215505200957, 0.20984615784987304, 0.5706823867904298, 0.21392817336958636, 0.22169928152443208, 0.5497454586743251, 0.5574084776349768, 0.5437497096462005, 0.17502667917132497, 0.546747010699485, 0.5392185376128797, 0.5860045775024718, 0.6000615402635726, 0.5459355995994335, 0.5684961434267333, 0.5498857553726084, 0.5447571046918127, 0.5479371465872356, 0.5342312433652905, 0.6218216885490875, 0.5181496159163592, 0.18080925637746825, 0.5379049697719267, 0.566766481218735, 0.5512946718653483, 0.5693700810355649, 0.186978662611907, 0.2054192512698999, 0.40681414546407757, 0.23961897156761913, 0.2241268986374073, 0.1886862709553898, 0.2380870856569658, 0.1998985112370223, 0.2060193478942547, 0.08413734078972412, 0.08057830460224646, 0.07198720206606557, 0.07677717000544149, 0.07526725844476301, 0.0893084651747369, 0.08365129185523978, 0.09643301747490407, 0.08160698593890736]}, "mutation_prompt": null}
{"id": "33afdf09-46ab-4436-954d-3cf1ef619367", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass AdaptiveHybridOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.6)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.01\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)\n                    CR = min(1.0, CR + delta_CR * 0.35)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.2, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "AdaptiveHybridOptimizationRefined", "description": "An adaptive hybrid strategy blending improved differential evolution with dynamic Nelder-Mead, focusing on probabilistic mutation, adaptive parameter tuning, and enhanced local search.", "configspace": "", "generation": 75, "fitness": 0.39255905202022856, "feedback": "The algorithm AdaptiveHybridOptimizationRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.22.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.8104441450341655, 0.8107464155091013, 0.7989540836471565, 0.8009455851382357, 0.8131669168579954, 0.8007573114517218, 0.8072382965833482, 0.8120385385478399, 0.8114699703729336, 0.6647574647761505, 0.6642621155297119, 0.6431758148406852, 0.6659441748716333, 0.6646186132937556, 0.6683883522186262, 0.6738912952042915, 0.6631875584490395, 0.6793832748431878, 0.5483056003546426, 0.6182555537158039, 0.6030368979314243, 0.6337791727151809, 0.58207760045875, 0.6229227377409169, 0.6134985528068595, 0.6600661148526801, 0.5877848294234793, 0.5485528921712931, 0.1725335221346591, 0.5341007643669926, 0.5720387460673846, 0.12635618508324353, 0.5640010531422459, 0.5856914352489537, 0.1721874957318954, 0.5500427194461062, 0.8984654158533614, 0.8782794174751537, 0.8884166528678924, 0.9136472082334682, 0.9044745446401352, 0.8678140595732902, 0.8706147798842074, 0.887456619034267, 0.9040101596675203, 0.46702423857614117, 0.42118436587355357, 0.4535383985000101, 0.35002234347864924, 0.4391512844362958, 0.3792144551418555, 0.4707239501900883, 0.46308048248037526, 0.46121549533420125, 0.18863308994861894, 0.18683108831256112, 0.16050573400794022, 0.25968022390993284, 0.28031382142989114, 0.2824009090394638, 0.21810937601460367, 0.26105996520942243, 0.22136936615298453, 0.4511075806655467, 0.4703822078798404, 0.436291204240598, 0.4595894902569787, 0.4515623708128408, 0.45182246888909483, 0.45581656717940167, 0.45883312797698905, 0.4733873818004024, 0.43607832741076225, 0.44574660109190933, 0.4447652688996081, 0.4407622534394986, 0.43537165532024324, 0.42756209812267354, 0.4462337220951983, 0.42783465954688094, 0.4348482148887325, 0.3248769047871226, 0.0300328542149062, 0.349630868003324, 0.34266028725650155, 0.3485534949684186, 0.34690060942613987, 0.3501265392226084, 0.34414261479873776, 0.33694234568283943, 0.35657722868959796, 0.3484294767404953, 0.4041047889856013, 0.35577888599511687, 0.09868577635914522, 0.3461290392133667, 0.34737055169374553, 0.3428295148636187, 0.37824116626265536, 0.3180309757494827, 0.33656303719162983, 0.3429772234858325, 0.353980018482694, 0.339545091252499, 0.3521368434734311, 0.26732613002703953, 0.3115307868157168, 0.30200878060871306, 0.11323078933824549, 0.20978278094511837, 0.12489571089635232, 0.13033965355489185, 0.12734401456733013, 0.29425274289499703, 0.14738124825012033, 0.30059327318276685, 0.19397767717054792, 0.6269726829408159, 0.6114714217064461, 0.600523560021476, 0.6148676242173448, 0.6176121547263412, 0.6171381450270685, 0.6133239273051366, 0.6128702557965424, 0.6292634166646329, 0.12360224776404338, 0.1294984661185059, 0.12153917898265187, 0.11959643445334989, 0.11310569690287142, 0.12143131967558651, 0.1181028547184122, 0.09622967337652699, 0.12730231377701073, 0.1989680446095663, 0.17811522932720947, 0.20244346728953155, 0.181177096167628, 0.1827688837278162, 0.22910356075023341, 0.17803821835443234, 0.17884359575096243, 0.20825154596210027, 0.21898456591143045, 0.25802402821522796, 0.27002668763612214, 0.2319895729809801, 0.28070211171799553, 0.25645294008134956, 0.30115019937166776, 0.3110814602766746, 0.25638456425073275, 0.19280434408807146, 0.1789238779466661, 0.23681827097777997, 0.17889835211956673, 0.209743041521244, 0.22521971986167277, 0.1984665371126565, 0.22559510550320006, 0.20811303479620202, 0.22938450512060593, 0.2452013478506202, 0.20852874310481362, 0.2259590095962406, 0.23871940368464184, 0.2531983352070818, 0.19393166086474922, 0.21814162167276363, 0.1945682668922588, 0.5248392253206928, 0.5467603809694244, 0.518688389245344, 0.23444214901621385, 0.5207931956579648, 0.22196079465929763, 0.19837706918556264, 0.5112772235196545, 0.20988954770886714, 0.5495572438940672, 0.5230822607448837, 0.5573759513145019, 0.5472286134950584, 0.5205978427150193, 0.5296407088973766, 0.5054672078723274, 0.5206170782289875, 0.5182207977896479, 0.5227708786358611, 0.518305234481775, 0.551945913469209, 0.5345053086570662, 0.502468341251151, 0.18713426690912238, 0.49734815426130685, 0.549608552377121, 0.507999949696494, 0.18300591179571135, 0.19124558441498196, 0.20591936409125444, 0.2021512468846438, 0.2445681130606634, 0.19813020659152691, 0.21444381945911517, 0.2046126128105933, 0.2128768736734713, 0.07909405058712127, 0.09352777411911362, 0.07705940940859579, 0.09417706320601316, 0.07953505097070102, 0.07849814217273232, 0.09477716035101658, 0.10481645996024547, 0.11249761696408456]}, "mutation_prompt": null}
{"id": "4e62af54-7a7c-4576-9279-fc25aa47990e", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "322bf04a-9389-405d-a827-27cf4e3adafc", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass RefinedStochasticHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 15 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.002\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)\n                    CR = min(1.0, CR + delta_CR * 0.35)\n                else:\n                    F = max(0.2, F - delta_F)\n                    CR = max(0.1, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "RefinedStochasticHybridOptimization", "description": "A refined hybrid strategy incorporating stochastic ranking with adaptive differential evolution and Nelder-Mead for enhanced exploration and exploitation.", "configspace": "", "generation": 77, "fitness": 0.3717075580125787, "feedback": "The algorithm RefinedStochasticHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.20.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7670168210258197, 0.7452220836645616, 0.7480952530099838, 0.7497298132447578, 0.728322070686208, 0.7380664312756605, 0.7437815287851759, 0.7463866277506337, 0.7306403205775747, 0.5524016811105297, 0.5534801742503639, 0.5345216236953356, 0.5336194574728257, 0.5328513099265071, 0.5512638383269908, 0.528642932657788, 0.5549438973970162, 0.5508590923612263, 0.49747579897224603, 0.5143144407638991, 0.5063546909252007, 0.49952889692349367, 0.5166954589557968, 0.5024809948196086, 0.4862227521869006, 0.5109422668144894, 0.4911060906223508, 0.47854852575909324, 0.48288173731030515, 0.4809212399284234, 0.47411312034038167, 0.47957049997953427, 0.47727854653106083, 0.4730344457591895, 0.45365378281893376, 0.4693272032250124, 0.8903741974273949, 0.8709265219034571, 0.8709288687369453, 0.8844039709993193, 0.8757855595086563, 0.8752136804734032, 0.879893167451667, 0.8710548668178592, 0.9007400448565821, 0.40316122000582577, 0.43794024681597776, 0.447986973112824, 0.40356489812407836, 0.39569338881118754, 0.4208046325185981, 0.4341111800118631, 0.44499840968323456, 0.4596618634009343, 0.16010697984112698, 0.1926410496397215, 0.1414299691043298, 0.2258813506398195, 0.2646109598652696, 0.24969055869326562, 0.1834340837510514, 0.1944874262427897, 0.18893258691344617, 0.4306283367217565, 0.4561679804910408, 0.4170166485635254, 0.4513498092692736, 0.4326560757699305, 0.4479560825997999, 0.42871924267519157, 0.4341238921556032, 0.4517753012300302, 0.4393958447813088, 0.44085740570495313, 0.41721328234030575, 0.4074436020563672, 0.42578610850653764, 0.450840586144755, 0.40844788803887055, 0.42696432821872754, 0.41577616554324437, 0.2986299544054848, 0.3189706080910736, 0.3296949872928664, 0.3528384073998494, 0.33292963879379234, 0.3507887374528945, 0.321694160483023, 0.004349195197973166, 0.33858488937640174, 0.3631772451057321, 0.34658389902626985, 0.35208806782855206, 0.3381924946082868, 0.37159629681932915, 0.36339004570237854, 0.3654506837049907, 0.38171664697812135, 0.3723676129242198, 0.3421015197892837, 0.3082226679125645, 0.3256360102423528, 0.35435249307078887, 0.33311733410187394, 0.3301706870365694, 0.2877879521805857, 0.2788253945200727, 0.27441465512250385, 0.11810481430995479, 0.05684921430410228, 0.07931983261234343, 0.1176731491252373, 0.2639479174629179, 0.13705802918850818, 0.13201986072287997, 0.10408225878256383, 0.1521800699509378, 0.5975848834542627, 0.5808477536236201, 0.6031714098781139, 0.5858494839695112, 0.5949878430751965, 0.5799530159149445, 0.5873619428257734, 0.5788838066430269, 0.5904795465798358, 0.11333910828404936, 0.09703404208912758, 0.09744356642726015, 0.1014822922119829, 0.11545499351042021, 0.14242004281999576, 0.10224250919203182, 0.09744087537369595, 0.08807172195076385, 0.17703388834566725, 0.16928143198089196, 0.17065399979050422, 0.18890201320231803, 0.1739786379792818, 0.21061474063537866, 0.1949969042873243, 0.22334021315109398, 0.27312984861562306, 0.22233710289456132, 0.25455591116108556, 0.2312890152256295, 0.22416118912712446, 0.2274927345801505, 0.24075815636813946, 0.25675047296275766, 0.26014012580670054, 0.2234844130182655, 0.1711950963439013, 0.16534942137165454, 0.16950240501653802, 0.1512319793681407, 0.18321614691281574, 0.15817306250360574, 0.17226338475302416, 0.20331326844929265, 0.1504827978583968, 0.23431379104168926, 0.23192669757399043, 0.19428823258815597, 0.23297295772001858, 0.2038524473886636, 0.18888165744277374, 0.23232665605225866, 0.23305583744550995, 0.25384127519596567, 0.5087526125348547, 0.21994358098141054, 0.5108457367147208, 0.5132549398217718, 0.20924164403824486, 0.501899545100013, 0.5069839195852872, 0.20476729641322122, 0.21388380198598866, 0.17131820772120954, 0.5195560468590557, 0.5438824281400589, 0.5464563907530212, 0.5357859777350085, 0.5496041133937437, 0.5146800744194515, 0.5021418149666869, 0.5037735590069139, 0.5459591637062977, 0.5167505111774295, 0.47867201193169584, 0.5075599337742099, 0.4873588670603398, 0.4926604023927126, 0.4648896078790493, 0.5093649783241703, 0.5348482745320957, 0.21636077391370423, 0.1908091706857742, 0.19181644106220397, 0.21700565642709557, 0.21537574530922243, 0.21123548580280438, 0.20626643547974488, 0.226604630199295, 0.1977613351057853, 0.09358101436403155, 0.0940470541590337, 0.08122931523230492, 0.08484050905056562, 0.09798000908233584, 0.07952097431861038, 0.08351356855066117, 0.06898319860157553, 0.07514890279707431]}, "mutation_prompt": null}
{"id": "81128381-f008-4f69-9c31-854773b16121", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass AdvancedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.002\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 6, replace=False)\n                    weights = np.random.dirichlet([1]*6)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)\n                    CR = min(1.0, CR + delta_CR * 0.3)\n                else:\n                    F = max(0.05, F - delta_F)\n                    CR = max(0.1, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "AdvancedHybridOptimization", "description": "An advanced hybrid method that integrates a probabilistic crossover strategy in Differential Evolution with dynamic local searches using adaptive Nelder-Mead, optimizing parameter adaptation and exploration-exploitation balance.", "configspace": "", "generation": 78, "fitness": 0.3938584551800972, "feedback": "The algorithm AdvancedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.23.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.8141589410425704, 0.7858283066286833, 0.8147000658484322, 0.7870656921172189, 0.8246335285189232, 0.7853384577969651, 0.797140299957976, 0.8238779471697198, 0.8300769436816852, 0.682018258962807, 0.6714365004960594, 0.6652430469956992, 0.5943578895911683, 0.6486142191413192, 0.646913919101402, 0.6728756452769327, 0.6836575979998961, 0.7097239259504231, 0.6466894314355895, 0.5943231083617619, 0.17900053037463326, 0.1770357599041752, 0.6682327420895193, 0.6875584115610769, 0.6906511406674238, 0.6719884242747955, 0.614812411141691, 0.17528850809084473, 0.6016966681688558, 0.62677118127618, 0.5467869039926652, 0.6176351064951662, 0.6251347171717845, 0.607381715888965, 0.6274610170175475, 0.17729343382559548, 0.8926327046421062, 0.8824358524152358, 0.8579441108023074, 0.914912853705917, 0.8947652727278145, 0.8278369098380396, 0.8736607071945052, 0.8882197758955607, 0.8512857680563927, 0.4883291619407919, 0.48022744019402264, 0.4721346525413356, 0.4153962644179523, 0.4099511375863848, 0.37620619502739405, 0.49174257256148346, 0.46278550156917175, 0.5033623025330254, 0.17523510487861949, 0.19471677775530571, 0.17983373882901144, 0.2568455040048597, 0.2346517657725088, 0.21573351686491027, 0.1742595667523087, 0.2730294021921361, 0.21636027713887895, 0.479981640592386, 0.4838705940686271, 0.47442872360237576, 0.46220143441035166, 0.4783847111280446, 0.4912290346842708, 0.5117784528289919, 0.5119753990931741, 0.5300368333734073, 0.48202063658688177, 0.4673887684575819, 0.4770806508587757, 0.47299929635160853, 0.4827144457845537, 0.49009000209336473, 0.48224147098377357, 0.464916126268471, 0.4888788654078935, 0.3840355813356532, 0.03452467992280506, 0.04370952642385184, 0.3865113168693084, 0.3856953140157716, 0.0, 0.3764201176171177, 0.40045678423779585, 0.3544759608713344, 0.4138401736594083, 0.40757031222069096, 0.47405524348785943, 0.3960433615024064, 0.40892864195422507, 0.40014410413733936, 0.41767884667939525, 0.4208106905771394, 0.07341644971031858, 0.3546433684396798, 0.38862370398472224, 0.38719100648078797, 0.4004597814756298, 0.10822310096075838, 0.4049042177891188, 0.3209145732611811, 0.36550759595159454, 0.3097879499559908, 0.09670618796099117, 0.052840860090136665, 0.07890830387675196, 0.10433296341179632, 0.12575916457305392, 0.11595751079670302, 0.15997728220236207, 0.3567908118079063, 0.3775283390397989, 0.6277495349854161, 0.6050176157101625, 0.6354464660175017, 0.6171891571915629, 0.6181563185025237, 0.6282803857622266, 0.6430416085054104, 0.6226096294016417, 0.6393106163446671, 0.09633516591435964, 0.12093962124615687, 0.10566819162674601, 0.1144384598029814, 0.10716055749685716, 0.09275795062850811, 0.1211083685078107, 0.09914181838837444, 0.1054186773611433, 0.19118562576187093, 0.15732735568692346, 0.1447013970576363, 0.1865842270851117, 0.17482526546286004, 0.1819710797266384, 0.19170271055377086, 0.17629585034757478, 0.1978541449530674, 0.20288716046284672, 0.2548359689246439, 0.28531723558271005, 0.1923900937168711, 0.20631595572806471, 0.2279044147788506, 0.25296455804072626, 0.28046217032947174, 0.24194800410277417, 0.14786055983569624, 0.17879949655963578, 0.17982575295661352, 0.17609620267358372, 0.17293962931614404, 0.21027894916648837, 0.17838869709276628, 0.19327601630954927, 0.1695454895266113, 0.20292739036166074, 0.216632629298797, 0.22556065484995658, 0.22044634329596446, 0.23703514919631985, 0.23016192957544923, 0.20817201277406916, 0.21831191042800002, 0.22673640862452826, 0.2294133207704725, 0.5737584519277352, 0.562241895235301, 0.2353706856491432, 0.5728897745173367, 0.2320498470328446, 0.2094458694499003, 0.553644318634658, 0.22770632124567147, 0.559603272724835, 0.5357703938705217, 0.5616966117439305, 0.5834388124217561, 0.5309181641306611, 0.5956912482088197, 0.5188205892246304, 0.5279077777038532, 0.5394107888436774, 0.5683526928628785, 0.525253656902573, 0.5473903303301135, 0.19778748505278765, 0.18559197475593825, 0.5288182888019368, 0.534347758285201, 0.594784000833066, 0.5413733371284557, 0.2064398390913731, 0.4153653824021357, 0.2245560905313585, 0.21534890626832315, 0.1991651493986989, 0.22272211600868486, 0.19624493335977167, 0.21496708214314408, 0.24116550418541138, 0.08141058923825917, 0.08619711274836139, 0.07340862201733, 0.08663212667574849, 0.08274208186283882, 0.08009303468185647, 0.08753924953365311, 0.0708490816564139, 0.07737501556059401]}, "mutation_prompt": null}
{"id": "1e98cc3f-1d51-481e-9146-e21133823bf8", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "92706178-73b5-41c1-96c2-8ed1e2b1ffb2", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_sgd = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim\n        F = 0.70\n        CR = 0.85\n        delta_F = 0.035\n        delta_CR = 0.025\n        epsilon = 0.01\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * np.random.rand())\n                    CR = min(1.0, CR + delta_CR * np.random.rand())\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='L-BFGS-B',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_sgd, 'ftol': 1e-7})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A dual-phase optimization combining adaptive differential evolution with stochastic gradient descent, utilizing adaptive parameter scaling and stochastic adjustments for enhanced search efficiency.", "configspace": "", "generation": 80, "fitness": 0.34412456657101304, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.22.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.8015466308386529, 0.8056436055020362, 0.8062579480660641, 0.794117863644737, 0.7995455033147452, 0.820891384628982, 0.8230400710837378, 0.8020209536212197, 0.8152282219846037, 0.625395293252593, 0.6634694064497099, 0.6699860243201239, 0.6332048192715083, 0.6152384644647609, 0.611769514285766, 0.638767752293816, 0.6060926529013713, 0.6829136352138159, 0.4854824500925007, 0.5625467608597413, 0.5459712726898256, 0.492156554260587, 0.483280748221961, 0.4108855255130618, 0.17706191835752894, 0.5789224758677436, 0.5464825005837307, 0.3661253908541381, 0.3883078855939541, 0.41273440122609173, 0.4396453012442295, 0.17425872940393672, 0.47402989306607857, 0.46409645950460965, 0.37177623485024613, 0.48757412453011506, 0.9476711564194447, 0.9339918773646811, 0.8964596442157161, 0.904522161777934, 0.9384358537095929, 0.8950314812442489, 0.9403557361254489, 0.9356369226996879, 0.9269642836307888, 0.3058204596918499, 0.2589648599540235, 0.2728361473826818, 0.3201366033175491, 0.2918584809479673, 0.22464178361903642, 0.24534010285669428, 0.25309334473024947, 0.2860599291753022, 0.18119711638558533, 0.18536934272206884, 0.16030721053355157, 0.23122081424836938, 0.20481933739312752, 0.20629097959274767, 0.21002103971162556, 0.2117094872628622, 0.21107438215515995, 0.4673671649117612, 0.45920219867638234, 0.42030425565242036, 0.4191496879789376, 0.28608284048639676, 0.3678103331376429, 0.413455681976331, 0.271641162346808, 0.45606347091883404, 0.4835579478830342, 0.4398412091973025, 0.45798254821837736, 0.4772072250714203, 0.5090080020919832, 0.4826309151727468, 0.4371627295250663, 0.42798326418754207, 0.4746101188424754, 0.2868774513514266, 0.3192956124304914, 0.3022052437402255, 0.3123354956195541, 0.030007562756060757, 0.28822568334555054, 0.05397387334547077, 0.04710282402404542, 0.29190890176136164, 0.26918152389901784, 0.3226035934242434, 0.19990039562990747, 0.17777682378687276, 0.11789166493083392, 0.2736638117279524, 0.19289499197998583, 0.18104200498895862, 0.193852769652188, 0.08110691663414404, 0.05848042051825819, 0.09055460428720452, 0.12740353555678796, 0.3345108648865963, 0.3307742540256766, 0.275966407113887, 0.2822979567556606, 0.2653814317194275, 0.18574092937322773, 0.07429740418588249, 0.08015934579181616, 0.2430368953272466, 0.10030429294068566, 0.16313851232524101, 0.13251026412883826, 0.10317976814167906, 0.0965722838382933, 0.4182109999260729, 0.46677072335861736, 0.5007961404738666, 0.43069454864302725, 0.4424607091242253, 0.5027287868208845, 0.44112023629564734, 0.5154628284424752, 0.5129348692104033, 0.11708532972188535, 0.13076090797598916, 0.10664254918824623, 0.09846030674480066, 0.09403582689886392, 0.11773857525555764, 0.0806983435604518, 0.11063107770016323, 0.11095519004468046, 0.13879356756599026, 0.24421521864438656, 0.1477249097649037, 0.15713154664650142, 0.1613259558333593, 0.15147941767537154, 0.15172932907164105, 0.17854786042390713, 0.1528853366786792, 0.22955454450990598, 0.23600040421044888, 0.2805433247960174, 0.2303279824675677, 0.2615317782826775, 0.22625508867551636, 0.2260764605311708, 0.2699840519942681, 0.234501949998437, 0.14896224907149846, 0.18125790468955372, 0.1920226525400064, 0.16343916627411526, 0.1898597204413489, 0.20636860956845626, 0.1910500181656527, 0.19500514411119407, 0.1597649497400756, 0.20021519857447656, 0.23201035977559414, 0.240617597331246, 0.21849790646937384, 0.26279665768824756, 0.23181664842195182, 0.23770390170775368, 0.21877977538273607, 0.22997953798958692, 0.48146049896500676, 0.45221724768644367, 0.46497619378721466, 0.42624393638156666, 0.21006855660821, 0.2104162125382325, 0.5670185866283954, 0.5524044066441209, 0.22712126963050783, 0.450292262687664, 0.4533509586781631, 0.44698210514650427, 0.564059052445566, 0.5117657543757297, 0.5381554554700344, 0.5472883403757864, 0.45890759983036455, 0.4423297865770224, 0.3556102123543281, 0.33344288830902136, 0.3124170821617609, 0.19153793006440367, 0.3751552068137146, 0.18564333889017492, 0.4186611995339098, 0.5051191776202277, 0.45798449269920705, 0.1937998321360357, 0.20773278543839246, 0.1831899314673352, 0.2116147815213344, 0.17938042261798148, 0.18312530157148865, 0.19287440109481846, 0.19077165958653863, 0.21231879263350129, 0.08837031872468037, 0.08354338397334105, 0.0871261342597609, 0.07291297764645166, 0.09125591087037188, 0.10282370040115052, 0.08156931176765825, 0.08116506425943848, 0.07624125841929996]}, "mutation_prompt": null}
{"id": "085a6b55-6a40-4994-b344-05ece69068df", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = max(14 * self.dim, 20)\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.04\n        delta_CR = 0.02\n        epsilon = 0.01\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)\n                    CR = min(1.0, CR + delta_CR * 0.35)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.1, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization, with stochastic population adjustments and adaptive mutation enhancement.", "configspace": "", "generation": 81, "fitness": 0.3888639005571911, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.22.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7600467945219817, 0.7761604292435706, 0.7788841735105974, 0.794921458550649, 0.7694297579397117, 0.7920233134653782, 0.7945363774975747, 0.7783870805642475, 0.7907784712721507, 0.6108329615892115, 0.6231544715403922, 0.60871430559853, 0.5813627460394146, 0.5871232750531161, 0.6262542075750839, 0.6041670647849569, 0.6112953230712438, 0.6110845002468133, 0.5661658727019019, 0.5455781719991272, 0.5709096791701656, 0.5672595191028262, 0.570199003379746, 0.5867655539637474, 0.5806501234985297, 0.5765868213495884, 0.5743200752472593, 0.1646774514556537, 0.569372087200079, 0.5276654267025246, 0.5417674243884202, 0.5548655811108737, 0.5197096400729703, 0.5369549139188253, 0.5444935749165718, 0.5263535352092032, 0.849041156756239, 0.7738133750196763, 0.8441014329988339, 0.8361648174867703, 0.873811032242785, 0.8789671889668068, 0.8546646228696633, 0.8995033785888931, 0.8995672755927617, 0.4782636659337173, 0.4782388982716914, 0.49167713584543804, 0.4625674365273136, 0.3874606875052886, 0.3862805204598819, 0.4759662657558684, 0.4891266667874292, 0.4958924084947789, 0.16794294177349034, 0.15248061286992964, 0.1541790037165991, 0.24382732737351798, 0.22674427020564492, 0.2628552704885382, 0.23071470366004998, 0.2047175656399931, 0.1895376203085265, 0.48671284166552464, 0.49431561456104944, 0.4632564087426042, 0.49897919078202435, 0.48588350845666084, 0.49231325625194644, 0.49021180735807424, 0.4779952448378576, 0.5047717001506953, 0.47199719806324303, 0.48060251296588463, 0.4727277147627441, 0.4665130152642276, 0.45972841416439525, 0.4656043243807879, 0.4509240031779791, 0.4738941887750927, 0.4595548556817173, 0.3850199895358951, 0.38844168255478184, 0.03379157895665552, 0.40447070040248057, 0.3558597810800941, 0.38304457161314076, 0.3758560966952206, 0.3901776379797186, 0.03995418344437618, 0.3855414217779598, 0.41061794329381296, 0.42144426867255314, 0.3614211962096535, 0.41693470766964347, 0.3929244353236444, 0.08287648912306644, 0.41969193570000185, 0.40511779730993025, 0.2356553327274198, 0.34262849895024894, 0.3448641144710004, 0.3993277870141314, 0.39535999530925037, 0.4021059465733209, 0.35743154991748993, 0.26845965055363674, 0.36568665625724084, 0.1499312217796993, 0.10237743330149973, 0.07372349971406489, 0.09988937419656396, 0.16954483655628938, 0.1725494662176279, 0.09729941257122388, 0.12086796191212379, 0.06938143684276965, 0.6149309736837196, 0.618727828660158, 0.622893611844478, 0.6198890158206789, 0.6198773398210689, 0.6265439482556757, 0.6293541967149034, 0.6166402679982469, 0.6240717205707459, 0.12261829663701429, 0.11575324043054191, 0.12567187054637363, 0.10890307567329494, 0.10032197368516715, 0.09645003041130262, 0.09822735020270079, 0.10206157622954748, 0.09002500692438331, 0.16639558789244513, 0.2848938131765185, 0.17287144064448134, 0.17485786818933247, 0.15797904451692646, 0.16277004619343205, 0.19887126751151396, 0.1814263652833168, 0.17992736083666583, 0.20786741062988623, 0.21721279121829806, 0.24010792091699518, 0.19689885834279408, 0.2651609693446356, 0.21862220809307809, 0.22694137343368748, 0.3127959333654289, 0.2885126028316972, 0.17272640728033517, 0.17518113841833205, 0.19832717885701334, 0.18237493435654595, 0.18784174906719453, 0.16483257072923263, 0.20115575317519319, 0.19470985592082035, 0.18767126030022352, 0.22685729131161947, 0.20915218333076935, 0.20981869083849103, 0.1997086713398094, 0.19485551751809815, 0.21664954173533868, 0.21272932722359694, 0.23355478440668298, 0.23133993021291555, 0.2276938908565619, 0.2187648773369829, 0.5518498212329779, 0.5523868272066883, 0.2101804911073697, 0.548149353965207, 0.5607894939657988, 0.5588915483126146, 0.5473083282734776, 0.16986033241365128, 0.5568171186910315, 0.618954206707137, 0.583075283732208, 0.5525569044557581, 0.56934376479184, 0.5437547211765115, 0.5372331545771747, 0.5348130294534557, 0.5788924727415721, 0.566864700819476, 0.578589159786469, 0.19670606105628707, 0.1905766766012239, 0.1900668776457748, 0.5251108569939333, 0.5992512506949206, 0.5256116329334817, 0.20349807595699299, 0.21815357463848017, 0.2030356972500995, 0.20526393749747462, 0.22541261408192736, 0.26044272266687807, 0.2094720661627374, 0.23899319767263127, 0.24691834576866523, 0.09983862121603593, 0.0693889867449381, 0.08930442523820459, 0.09381725713343003, 0.0807243047244035, 0.08194683511152012, 0.08796094776426144, 0.07817189484904596, 0.07379036394912564]}, "mutation_prompt": null}
{"id": "383da7aa-26c6-4176-8f25-6f05d88dba69", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridLevyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        def levy_flight(Lambda=1.5):\n            sigma = (np.gamma(1 + Lambda) * np.sin(np.pi * Lambda / 2) /\n                     (np.gamma((1 + Lambda) / 2) * Lambda * 2 ** ((Lambda - 1) / 2))) ** (1 / Lambda)\n            u = np.random.normal(0, 1, self.dim) * sigma\n            v = np.random.normal(0, 1, self.dim)\n            step = u / abs(v) ** (1 / Lambda)\n            return 0.01 * step\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]) + levy_flight(), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c) + levy_flight(), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridLevyOptimization", "description": "A hybrid optimization algorithm combining adaptive differential evolution with an enhanced Nelder-Mead method and Lévy flights for improved global exploration.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"module 'numpy' has no attribute 'gamma'\").", "error": "AttributeError(\"module 'numpy' has no attribute 'gamma'\")", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {}, "mutation_prompt": null}
{"id": "2fd21a83-25ff-4651-b772-a8025cb84311", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)  # Increased DE budget percentage\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim  # Reduced population size for faster convergence\n        F = 0.55  # Adjusted mutation factor\n        CR = 0.85  # Adjusted crossover probability\n        delta_F = 0.07  # Adjusted modification step for F\n        delta_CR = 0.04  # Adjusted modification step for CR\n        epsilon = 0.002  # Adjusted probability for alternative mutation\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.10, CR - delta_CR)  # Lowered minimum CR to allow more flexibility\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})  # Tightened tolerance for precision\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A refined hybrid algorithm combining adaptive differential evolution with an enhanced Nelder-Mead method, leveraging dynamic selection and mutation strategies, adaptive parameter tuning, and intensified local searches for superior convergence.", "configspace": "", "generation": 83, "fitness": 0.3896999187223165, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.22.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.8175914235661728, 0.7973185964904884, 0.7866621074125468, 0.8160657684021677, 0.7959952395639165, 0.8019098653350603, 0.8065246298583122, 0.8136924278654794, 0.7999136940145728, 0.6561541719906165, 0.6279866075320724, 0.6304015231262273, 0.6502347611041923, 0.6623401296681645, 0.6554462364981601, 0.6591317378485472, 0.6163273679674284, 0.6100214924472536, 0.5057071571223164, 0.5642874105995435, 0.6205038655789381, 0.6102547372295459, 0.6269482877250436, 0.6457603492857518, 0.5943564129627318, 0.5933691510191688, 0.5390207085927115, 0.5601703188236351, 0.5864097031055303, 0.5043200783430678, 0.511318994124064, 0.559438802144169, 0.48339521093303883, 0.5684717489864879, 0.5615496919228793, 0.1660468256675447, 0.9365740637385331, 0.8734271196362919, 0.896473514887749, 0.8931784220712025, 0.8718763982566263, 0.8683826397136514, 0.8847396033447349, 0.8632372755368272, 0.8846747167877188, 0.4177972564414174, 0.44373876276517754, 0.45017280887392386, 0.4099393119367706, 0.3885705404081544, 0.3793187165786215, 0.4376478674510995, 0.457372232118303, 0.47354692497889805, 0.20590745561885038, 0.19175552183837385, 0.19493087891044747, 0.27305031991514406, 0.24388929639430457, 0.20294910066340832, 0.18846076428997982, 0.2066746264599174, 0.23451227358684523, 0.4547298406529763, 0.44766177363533166, 0.447354903514368, 0.47645562336027514, 0.45020190782407976, 0.4591791488811242, 0.47548449843230933, 0.49080047653879577, 0.5148846655424543, 0.43778087578151836, 0.42337034239081694, 0.4353851590035951, 0.4330821101763497, 0.4475518330911046, 0.4248232695102564, 0.4377697295235645, 0.4571910702877131, 0.44194056897199774, 0.32564628964853637, 0.22236867401866733, 0.3373377586570676, 0.3420192766248169, 0.34243870317880454, 0.3486001878191458, 0.3451752287785824, 0.3391045131302042, 0.3273995736904841, 0.3690797571369393, 0.35412749231399676, 0.39866767756283983, 0.3730598822023218, 0.3778737964836878, 0.35459129659883415, 0.368794609643992, 0.3712317970901571, 0.3733058601524495, 0.33205129788849086, 0.2573728119306603, 0.3212430896163698, 0.3538561327858001, 0.3508840660656629, 0.35619445170466224, 0.30290603784089565, 0.2911853743804679, 0.2763166178174894, 0.1850172016222048, 0.029988545766166497, 0.10849094093503842, 0.11310552040116251, 0.0881320141902252, 0.12923078417478295, 0.11241768080382075, 0.18308995211278734, 0.28169381627408296, 0.6218111182820087, 0.6115813478825595, 0.6493024998243513, 0.6265383544424392, 0.6118611270366434, 0.6219768729367162, 0.6070608514249132, 0.5910503533801013, 0.6012990508874645, 0.1155506071181549, 0.12624876783471517, 0.10628332154151665, 0.09958516429113129, 0.10148327119661993, 0.11005818399765632, 0.10519482484498344, 0.09508217522174889, 0.13038894720657224, 0.17665646918297284, 0.22283105843805717, 0.15732036584570142, 0.19749995890873673, 0.15487945739097864, 0.20247373389253265, 0.1941182730874672, 0.15033982871085283, 0.1708448617633116, 0.24203782416784625, 0.2515792116441665, 0.2300122046031361, 0.249775278913567, 0.23202212582590365, 0.237761422051894, 0.2658343697689667, 0.2724051876735818, 0.23178514711537412, 0.1466137359947014, 0.2037300069358816, 0.16097826719312358, 0.14637766382169448, 0.16957575994905583, 0.17805624701518385, 0.17545568306744008, 0.22981890599730992, 0.16166103316700153, 0.2195233920313101, 0.2185516667223747, 0.21915264693704983, 0.20397249253856775, 0.2101749942437784, 0.21273642000239812, 0.2210139839540367, 0.20006794095928926, 0.21964406425046357, 0.22364643650039906, 0.22607611380774306, 0.512159466213524, 0.5242643503662401, 0.5441847749289226, 0.5226278472121357, 0.5219500477962661, 0.5042061737112731, 0.2039118375529041, 0.5190614785147667, 0.22705503332456267, 0.5171840778450763, 0.5102888447662293, 0.5616366210109272, 0.5464656351883243, 0.5840562815522439, 0.5028559737886495, 0.5457051217243236, 0.53791175473258, 0.5032208221175402, 0.5504005171604622, 0.18344287552184313, 0.48209066100597464, 0.5300919777494058, 0.48245666446033175, 0.5135664178019967, 0.47614306715225696, 0.23418262853265437, 0.2003977732484149, 0.2223590874345791, 0.20846579213525407, 0.20735129739333114, 0.22278598851680653, 0.2119734544483074, 0.21867276380973877, 0.21606475663688507, 0.08902110956978049, 0.08000481675888382, 0.08709426555420507, 0.0776795533322947, 0.07854025175959212, 0.07395414881657203, 0.08493304961508641, 0.08216541307476033, 0.07574474053887348]}, "mutation_prompt": null}
{"id": "4d99c6ec-2723-415e-82f8-e4e5df2d7c44", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationStochasticRank:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.6)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.06\n        delta_CR = 0.04\n        epsilon = 0.005\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        def stochastic_ranking(pop, fit):\n            sort_idx = np.argsort(fit)\n            return pop[sort_idx], fit[sort_idx]\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.4)\n                    CR = min(1.0, CR + delta_CR * 0.5)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n            population, fitness = stochastic_ranking(population, fitness)\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationStochasticRank", "description": "An advanced hybrid approach with adaptive differential evolution and refined Nelder-Mead, augmented by stochastic ranking for balanced exploration and exploitation.", "configspace": "", "generation": 84, "fitness": 0.37333002643963265, "feedback": "The algorithm HybridOptimizationStochasticRank got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.769424518615817, 0.7698368948953025, 0.773465850474805, 0.7676013986467537, 0.7786329819231766, 0.7865629504488785, 0.7886178901139081, 0.7790305686822467, 0.7580512455435993, 0.5956050409588045, 0.6019414847312108, 0.5835640516925996, 0.5992419292758515, 0.5828816038811491, 0.5917278317923311, 0.6070625697243295, 0.6402119708121852, 0.5774438890206889, 0.5734484126816226, 0.5808687306708057, 0.5627520929772016, 0.5090895441702133, 0.5582095249317327, 0.5475688883737566, 0.5499680507432086, 0.5575436308737618, 0.5962410788934818, 0.51725202014114, 0.5027321402040908, 0.16839364747352137, 0.5186169929695797, 0.5305232196255717, 0.5398664970682228, 0.1672688438748028, 0.17099645955373233, 0.5262138228895528, 0.8451061829409385, 0.8939058199464767, 0.8987058326251067, 0.9179243709644289, 0.9099724390551045, 0.8917470738386409, 0.8902765999693522, 0.8994240979763501, 0.9187820781259558, 0.34898989217900767, 0.433949705242167, 0.42758804931905436, 0.39872311161129526, 0.31818000620443143, 0.3756846680192302, 0.4605387506318951, 0.4418673236319317, 0.4447799284438949, 0.15931761980308878, 0.20475761408352577, 0.1661128751098786, 0.2847213616249832, 0.26445816755484475, 0.2614541755024852, 0.1935352701670161, 0.2060413326266748, 0.18486850600257654, 0.41608138336166844, 0.4465437072978411, 0.43928669684135324, 0.4444217548878785, 0.45566304598991214, 0.45358557121878995, 0.4698314845023285, 0.434318409746573, 0.4680645030593702, 0.4307846679565017, 0.4011622996298104, 0.4068643302313263, 0.41217362282929904, 0.4384620224669943, 0.4176222561574062, 0.42791820471354525, 0.4349442343181724, 0.4186243162797426, 0.3439234749562149, 0.2803055054625454, 0.040785669151467974, 0.29391338042162296, 0.3303693452615435, 0.3250548680763137, 0.35147998288991666, 0.33713054655500596, 0.32827271177785533, 0.3574267446544179, 0.07328832153967646, 0.3666323250419783, 0.34010791526206485, 0.33405717858931816, 0.3483494330491329, 0.3700303072541311, 0.3647268887920996, 0.3473736052949973, 0.3256238333460021, 0.3108846835629139, 0.12561623286220114, 0.35887428408057553, 0.34534529650472856, 0.3630598917260248, 0.3279729828848661, 0.34304745730674224, 0.28497306124285227, 0.09234750820998128, 0.1098238745556217, 0.0940691707917376, 0.2482142066603542, 0.12193778075862938, 0.14712268161408315, 0.12303708207217479, 0.08804371630355745, 0.14611059551559846, 0.6035751174821422, 0.5958475290653125, 0.6184938414209404, 0.6005658227864481, 0.5948402181881246, 0.5889895825148524, 0.5930954143002709, 0.5796615677940973, 0.6093951318834578, 0.09836025311525776, 0.10562707847830066, 0.1018866818145554, 0.09147556706097659, 0.1106138856911244, 0.42107650637143423, 0.11628945829253967, 0.10312392282518545, 0.11203543932843762, 0.16649394519215133, 0.14262120524299293, 0.19698149119718478, 0.24317122548420422, 0.25200098608147015, 0.18519722816046524, 0.16574150290128364, 0.22974295965363312, 0.1825085873195399, 0.21669947785998456, 0.23998757371458612, 0.26038350800873344, 0.22124173840448746, 0.2274973135050472, 0.22590483492324742, 0.23120399399864222, 0.3265880402339737, 0.24370457281340474, 0.17729233746651207, 0.15680149489370976, 0.17204986598154448, 0.15459070460602253, 0.24448068287817204, 0.19111984270301363, 0.2015791981380206, 0.23652154656808289, 0.1682894887513996, 0.2065765916058795, 0.21385973436613726, 0.20284334734710452, 0.2096615778916182, 0.2093803442471972, 0.2017879968834526, 0.22607043696785678, 0.2295835407675939, 0.2354103229148239, 0.5212962749849568, 0.5237999188385424, 0.5203156331366536, 0.5282249077931696, 0.22016165350061512, 0.5365033841348814, 0.22502298444897695, 0.5133997484733697, 0.5209529118093954, 0.16503935201431308, 0.49409637304386034, 0.5149823185725031, 0.5678333851560591, 0.5325517812398881, 0.5429505858042262, 0.47330596386322954, 0.4865599613550976, 0.5388311862593758, 0.5848124162561215, 0.49549947697184993, 0.4994646697196563, 0.5340881872202718, 0.1833738593745564, 0.18396907826978603, 0.18710838919851924, 0.5118662917320959, 0.18975417630284408, 0.19462815178672022, 0.20886309127941727, 0.1961232978634685, 0.18797528110282324, 0.2437111085257112, 0.22841657193024034, 0.21288551685970347, 0.19170325462319204, 0.2083350730332051, 0.09509792540612139, 0.0825496777942335, 0.0781862203677276, 0.08840871743322753, 0.09188955490975537, 0.07150475255492561, 0.08467848328770511, 0.08620226307753476, 0.07628346349606485]}, "mutation_prompt": null}
{"id": "6fa4e345-8929-4a08-a0d9-cd82c7b0246c", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "1addde5d-9230-4f50-8390-07d01604dcca", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "adf4a33d-9f86-44e7-a288-411e87c42995", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n        T_init = 1.0  # Initial temperature for simulated annealing\n        cooling_rate = 0.99  # Cooling rate for temperature\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n        temperature = T_init\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                accept = trial_fitness < fitness[i] or \\\n                         np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature)\n                if accept:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n            temperature *= cooling_rate\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedSimulatedAnnealing", "description": "An enhanced hybrid approach leveraging adaptive differential evolution with integrated simulated annealing and Nelder-Mead for balanced global and local search optimization.", "configspace": "", "generation": 87, "fitness": 0.38742447724040274, "feedback": "The algorithm HybridOptimizationEnhancedSimulatedAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.20.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.6349137549562565, 0.6274167824211012, 0.6195078232670705, 0.6259335848857083, 0.6329056793943177, 0.6351172610969746, 0.615324812389634, 0.6191098719027985, 0.6176815697923911, 0.5563534719789364, 0.553091240143943, 0.5680739722953279, 0.5411558364322231, 0.5299678516560171, 0.5535836529666519, 0.5422732116876647, 0.5483856880914943, 0.557081488215709, 0.5488145593768479, 0.5465159354492549, 0.5455198012919189, 0.5318600888031068, 0.5502286309394468, 0.5531537519223072, 0.5565128953370788, 0.5550844709256681, 0.5382196099571311, 0.5212205880728549, 0.5380592572613347, 0.5283426675040621, 0.5312175416879357, 0.530790476852035, 0.5339006106266606, 0.5070237423681936, 0.523514759839477, 0.17307513544981645, 0.8382736069701217, 0.9087878691366855, 0.9038707436776132, 0.8519855529092997, 0.8518348203982299, 0.8716686719531379, 0.7966669433764441, 0.8663034546606184, 0.8440454569296125, 0.48168750239159597, 0.42196735034393595, 0.4498297806484697, 0.3415055523852214, 0.41582603115760997, 0.4529769045226917, 0.5043890844146648, 0.49672138055859627, 0.4830986450449146, 0.1923688939570446, 0.18414004635734604, 0.17964654706746985, 0.21431965202783954, 0.2849917496024611, 0.2229236539967685, 0.15969237070385867, 0.21899274270009816, 0.22885825698821305, 0.502938303750148, 0.50246486155137, 0.48711991351419714, 0.48569538914471333, 0.519908211266124, 0.5028806184449863, 0.5111754130931105, 0.49299287951723103, 0.48818444038304476, 0.47478641934751264, 0.4749090074698713, 0.4606661082418664, 0.48933873624301527, 0.4819188102090034, 0.44620965833505233, 0.46207234774713424, 0.4629964258786089, 0.46652670967995014, 0.38686165881412915, 0.3035731965410987, 0.38970851243085514, 0.395615784489467, 0.38699121412998005, 0.39200613923576844, 0.38360722712278517, 0.3772805707241884, 0.36852447994821746, 0.41489010842848606, 0.41789240133142613, 0.4224687762821159, 0.38497313703944724, 0.4218011580940958, 0.4357449889367947, 0.41488605174471793, 0.3921361467840553, 0.09889566389234317, 0.3645888095403903, 0.38573344490525097, 0.3618551869648343, 0.40107343161951114, 0.40569021816554973, 0.39702809625671587, 0.3275101956651948, 0.36039814890007693, 0.3410333676974262, 0.27537145052902356, 0.34157593012624987, 0.07820787784050587, 0.24733136818825496, 0.13688059294398758, 0.3609917896238616, 0.19043935232611642, 0.3246786192680572, 0.13977217958055532, 0.5929428655573777, 0.6097196586848386, 0.6018335961915864, 0.600773185465276, 0.5786552519747958, 0.6023863695892218, 0.5997803995225328, 0.5882434021175704, 0.615850267674284, 0.11103928862930301, 0.11204747805556492, 0.09996621214713997, 0.13617709533510902, 0.08301174834220659, 0.11138476502859906, 0.11289356146963114, 0.12116688768023465, 0.10735223373492042, 0.18839008503632249, 0.164309305647512, 0.29682248372158304, 0.1554804302131535, 0.14283436180881215, 0.1565336065777907, 0.28097036585643886, 0.15076831201564433, 0.17447589332059055, 0.22681379840238913, 0.27269097301794976, 0.2533160919325049, 0.18783834643243758, 0.2458056772703342, 0.23274688648088326, 0.2563254476570822, 0.268340128484982, 0.2355170602840313, 0.15226876314374826, 0.2023318275469892, 0.1710961979081107, 0.17506661788300115, 0.19630828314198256, 0.1742089570628883, 0.22802960602931543, 0.18722448278218728, 0.15514907977890613, 0.2674476634082653, 0.216108994399565, 0.24759225400883633, 0.21855800127948888, 0.20573131681219914, 0.21830444527398685, 0.18528157279055402, 0.2156275802627411, 0.21775311373901707, 0.2035791334678575, 0.5409306582116786, 0.20585792426906557, 0.54790764716736, 0.20457502524899152, 0.20077319203931476, 0.5679732201062654, 0.5527518053998035, 0.21743512536183185, 0.5490522395187782, 0.5699103305378772, 0.5752258866227848, 0.5440418094055677, 0.5474327839603014, 0.5960589913816282, 0.5495690198158998, 0.16926231589813212, 0.5421547378646756, 0.6769191724954386, 0.5401603595940883, 0.5488409206521092, 0.5331686999464209, 0.5271440376159033, 0.5499148048836044, 0.1529614061922826, 0.5448656635642528, 0.5585703944197574, 0.22265770025700693, 0.24619590069928077, 0.19934272642580986, 0.23194309049179662, 0.1875694644166952, 0.21438153850416686, 0.21203577364188764, 0.22776972892597713, 0.24263148862131723, 0.09099163940199217, 0.08122941337408573, 0.08304141744661353, 0.08052097892206544, 0.08501140763705695, 0.10966727241157992, 0.08890352684484892, 0.0771084555385898, 0.07724910406374763]}, "mutation_prompt": null}
{"id": "5a6e2755-d9b0-45de-96a5-95f3e2722742", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass AdaptiveDEwithDiversityENM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 15 * self.dim\n        F = 0.7\n        CR = 0.85\n        inertia_weight = 0.4\n        diversity_threshold = 0.05\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + inertia_weight * 0.3)\n                    CR = min(1.0, CR + inertia_weight * 0.4)\n                else:\n                    F = max(0.1, F - inertia_weight)\n                    CR = max(0.2, CR - inertia_weight)\n\n                if evaluations >= self.num_de:\n                    break\n\n            # Adaptive diversity check and refresh\n            if np.std(fitness) < diversity_threshold:\n                refresh_idx = np.random.randint(0, population_size)\n                population[refresh_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness[refresh_idx] = func(population[refresh_idx])\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "AdaptiveDEwithDiversityENM", "description": "Adaptive Differential Evolution with Diversity-Enhanced Nelder-Mead, incorporating inertia weight adaptation and diversity-driven selection.", "configspace": "", "generation": 88, "fitness": 0.39703816997519364, "feedback": "The algorithm AdaptiveDEwithDiversityENM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7515282201941098, 0.7267437561999142, 0.7453330437004599, 0.7432882791513431, 0.7376769000827874, 0.7269739881672683, 0.7313973817466668, 0.7381926679298669, 0.7194634399392645, 0.5669626107108918, 0.5700620784712336, 0.5744668815384312, 0.5743208271957256, 0.5546496183091998, 0.5698097751960862, 0.5726941351947208, 0.5698128589388235, 0.5749896551177697, 0.5503811943157635, 0.5349481863869081, 0.5548356302929254, 0.5480654076179754, 0.5349008514195848, 0.5391291814931389, 0.5470873419709582, 0.5348891120866839, 0.5425141956392588, 0.5227595551608711, 0.5167585217579029, 0.5374659598362741, 0.5170322504926366, 0.540697468245499, 0.527876497588676, 0.5230453112709821, 0.5318744581568463, 0.5141255805677731, 0.8956035388555302, 0.8752083231941409, 0.8774528847804377, 0.9255314643476963, 0.9517944931436468, 0.8857960311905306, 0.8934760962061252, 0.8949689936764087, 0.8832702388304172, 0.4979094387555014, 0.4692959364446526, 0.4709159912932781, 0.467622401809177, 0.4501736150895942, 0.44388747266610407, 0.48607147220140534, 0.4972637013247003, 0.5537184215893458, 0.16010295711645572, 0.1748757243844482, 0.18958848358412483, 0.2989750627123673, 0.24628643773263925, 0.2277342941398356, 0.21039995137709666, 0.2027029898760535, 0.22031391162926195, 0.49781404110027205, 0.492481606466206, 0.4791959890994324, 0.4985172839383929, 0.4895055181801917, 0.49184754195672686, 0.49725419581195396, 0.4889982792599217, 0.48766800992124604, 0.4704666099854832, 0.48922765247907773, 0.4758323115583607, 0.4816384752731604, 0.48437970864784385, 0.48066249775723646, 0.46142960796918564, 0.48068926165522585, 0.46369418662652173, 0.38382022912258706, 0.3880434548359848, 0.034512935150801005, 0.3782557473233247, 0.38552710007193147, 0.37894346975084103, 0.4012487072059512, 0.40044631415492227, 0.0018142180101560212, 0.4065773352380896, 0.40021006416798166, 0.404986093017199, 0.38711601134345974, 0.3568364999114291, 0.3827459229215373, 0.39628681789781606, 0.08695720752426117, 0.4263611536197188, 0.34334840959756174, 0.3582468418627285, 0.4003438559944905, 0.3904832193488398, 0.04027988489902434, 0.4025184526518396, 0.34540967375615816, 0.33529597171755643, 0.35018649924683876, 0.25466635810768157, 0.2662046286809988, 0.15418611098979496, 0.10482993352415071, 0.14457574800770256, 0.13013065763094633, 0.2906315709216567, 0.1334161645105043, 0.08878411329858116, 0.6287661622469268, 0.6282555194343304, 0.6333354181024576, 0.6338527478758411, 0.62701878586732, 0.6344073354038375, 0.6449699270094285, 0.6324463810979244, 0.6420777983578834, 0.12101007588430346, 0.11330449672752563, 0.1389247564051046, 0.11100052825853568, 0.13291527575466677, 0.11265002281472714, 0.09681337356676101, 0.08551415056379064, 0.10070642611470704, 0.16423126754591832, 0.2381547160057511, 0.2186110490437677, 0.1752556416705342, 0.16518797563120513, 0.22328548291601336, 0.18178138637769636, 0.15192080638919792, 0.16304798771950668, 0.24151162970096796, 0.24173184223100197, 0.2290521071444076, 0.2550138678923991, 0.2632336676118985, 0.2108725845952495, 0.3001265710675959, 0.2575226725538948, 0.23711218749892982, 0.1734503003432707, 0.20124521165902243, 0.18597199804869147, 0.1778007711838262, 0.17808421611646585, 0.18639052112408339, 0.22060921194224814, 0.17403472502354012, 0.20432072117057876, 0.21250782644583088, 0.23323788961569836, 0.24160408351455986, 0.1855979776315544, 0.22064121029411032, 0.22916956064241278, 0.23294351144608594, 0.22810670665719168, 0.22837626970211045, 0.5545791453587037, 0.5693048305650226, 0.5479764814182072, 0.5501664211820478, 0.5492527404848798, 0.5406871155886733, 0.5451260430930687, 0.5438053262969078, 0.5479871067443443, 0.1726695507328061, 0.17805959394861626, 0.6182390880815904, 0.5707418421471133, 0.5643896606008709, 0.5678867512912475, 0.6004565340372385, 0.5351133086170858, 0.5320306555015868, 0.5494555719127238, 0.20390210094206318, 0.19109115640785224, 0.5617702934953331, 0.5369900536672048, 0.548372999976119, 0.555614658810359, 0.5534526711719103, 0.5680580055990521, 0.23117950674193655, 0.4266163284128781, 0.2169444694903665, 0.19161695364691023, 0.18607478094838859, 0.20964882013570074, 0.20390872187906295, 0.22730101396090896, 0.21824652494955443, 0.0759604209611956, 0.0833787119523206, 0.08744539440846255, 0.0855314972886192, 0.08874752768517702, 0.10336530832781476, 0.08698283128169482, 0.08449445436596759, 0.08268309915126393]}, "mutation_prompt": null}
{"id": "22063b37-822b-498d-983d-24ad8794f957", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = np.clip(F + np.random.uniform(-delta_F, delta_F), 0.1, 1.0)\n                    CR = np.clip(CR + np.random.uniform(-delta_CR, delta_CR), 0.15, 1.0)\n                else:\n                    F = np.clip(F - delta_F, 0.1, 1.0)\n                    CR = np.clip(CR - delta_CR, 0.15, 1.0)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization, now with self-adaptive mutation factor and crossover probability.", "configspace": "", "generation": 89, "fitness": 0.39166215269934374, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.22.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7797841948524439, 0.7824512487861052, 0.7843577298153612, 0.7780586881491962, 0.7832274584309287, 0.7931659410680016, 0.7813421567994092, 0.7664071026059326, 0.7724473994118661, 0.6173198944581633, 0.6350530343811069, 0.5826501137939375, 0.6080367596496705, 0.5937938141926308, 0.6156643936360677, 0.6118095148675051, 0.6240233235406739, 0.6232584254632141, 0.586523730242022, 0.5843270202130058, 0.5733971602459451, 0.5853307349963854, 0.5918845249692933, 0.5812174387206295, 0.5707930934401848, 0.5400241926064637, 0.559994291874893, 0.5622928220530842, 0.5485336062791877, 0.5164707608291448, 0.3837079727003283, 0.5387758308960644, 0.5495306780816787, 0.5461120023990144, 0.5622201631290871, 0.5716654329027391, 0.8731241768345254, 0.8465161981807283, 0.8572081865468232, 0.8664797428198346, 0.8721921533585262, 0.8745850877575766, 0.8601652168294336, 0.8672450868118957, 0.8621212496739927, 0.46422315881003573, 0.49436710324735567, 0.506861430676832, 0.4224958535075992, 0.4327660277667694, 0.4578582987230764, 0.4753570587220848, 0.36568420935304935, 0.505368193400479, 0.16871380693583593, 0.16449217375698466, 0.15094998184147734, 0.2574035324599634, 0.27226192446594155, 0.2743888357294052, 0.15833691604362266, 0.24515380440188594, 0.210932384114496, 0.4842682165693545, 0.4891132515976069, 0.45563204216100817, 0.5000870976542529, 0.4797485301250808, 0.5053031244295333, 0.5053972883300296, 0.4922812330383667, 0.5209756778741643, 0.4787799068788803, 0.46512037107876003, 0.4770027535183369, 0.47669187879656916, 0.4849759516053035, 0.4670855829532846, 0.4289888425931525, 0.479591336510963, 0.4655230532034653, 0.39526373918654456, 0.394738155112035, 0.39877665083517455, 0.39132920531345405, 0.3970206726857889, 0.23360350792245832, 0.38342597510996845, 0.03879265151528122, 0.38865231624432184, 0.41975013363286207, 0.4328680131157321, 0.4086612673072887, 0.3838483440509435, 0.3910349007723847, 0.37736223995620544, 0.38822511412227145, 0.40921024163170827, 0.42730568301490446, 0.3790670429848265, 0.10949042147477595, 0.38313298796101214, 0.3939140773955513, 0.1600977927630589, 0.41097431778830573, 0.3477776805954119, 0.36051855973275415, 0.3173066524163406, 0.20517639596194737, 0.05452903000893561, 0.1677766971218816, 0.13944794720642695, 0.21471543484376432, 0.12854001387173686, 0.07842969101227903, 0.29850245288576016, 0.1138690310861461, 0.623594876599397, 0.6229044605953291, 0.6411645322452978, 0.6309284037876595, 0.6333707554793088, 0.6113426627464245, 0.6207512444273896, 0.6251486853889708, 0.6249931569736573, 0.09008369800881555, 0.09602453501878738, 0.1110266851330236, 0.09333410152966914, 0.11412534701726695, 0.1267992963627803, 0.09578479235589188, 0.11736892403602306, 0.12553517414009385, 0.2015786025397549, 0.1559771755791216, 0.18916196324849588, 0.17236140036773873, 0.15523926245338648, 0.14710344868174707, 0.17185914484370057, 0.21572836375438187, 0.1657255344023908, 0.2506454562499223, 0.23194647017425907, 0.22117982039971218, 0.21569779774369802, 0.2157283834520911, 0.24232719532805336, 0.31515092712724024, 0.2756506025993707, 0.20810330737557525, 0.14372020556936715, 0.17778259301354993, 0.16608535135043145, 0.16004611848254613, 0.1735079998300233, 0.20441083356674572, 0.2131250064795377, 0.18348756881859896, 0.1580400610721514, 0.20866684867282315, 0.21297784597123126, 0.2452286882507746, 0.20904832545403207, 0.20942971787962505, 0.19884457913364306, 0.21037019137216428, 0.2183731879541192, 0.20835216084012786, 0.5523889897650804, 0.22368101083051528, 0.22760870084582496, 0.5595185796198454, 0.2056956522257003, 0.5417798037694509, 0.548882484739941, 0.22439370767135514, 0.5496227946242893, 0.5829691662655929, 0.6591609999965446, 0.5629951020715063, 0.6449529027561334, 0.5655213334637061, 0.5832440328305154, 0.5446355148453134, 0.5723572232466313, 0.5585284897962972, 0.5747709872437896, 0.5515628615942924, 0.18800486446350262, 0.18653539841162092, 0.18397706595623387, 0.18725227788446086, 0.18964383384463568, 0.5683452565773288, 0.5309054630806018, 0.20569848454982165, 0.22293948896005422, 0.2089812766418142, 0.20379401606358805, 0.21534763982598348, 0.22556431613218197, 0.24202183833777924, 0.21577432672498942, 0.22905400009624077, 0.08358007657859656, 0.09365386226757377, 0.08212299821772107, 0.09344816942127077, 0.10692134567103895, 0.08723439847688863, 0.089142110606097, 0.10781712470395866, 0.08744591867406182]}, "mutation_prompt": null}
{"id": "cd592e11-4cd8-4164-a223-7acca6abafdd", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60) # Increased DE budget for better exploration\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 16 * self.dim # Slightly larger population for diversity\n        F = 0.7 # Adjusted for more aggressive mutations\n        CR = 0.85 # Slightly reduced CR for exploration\n        delta_F = 0.08 # Increased delta_F for dynamic adaptation\n        delta_CR = 0.04 # Slightly increased delta_CR\n        epsilon = 0.002 # Adjusted for infrequent innovative jumps\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1.2]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.35)\n                    CR = min(1.0, CR + delta_CR * 0.45)\n                else:\n                    F = max(0.1, F - delta_F * 0.5)\n                    CR = max(0.15, CR - delta_CR * 0.6)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, incorporating probabilistic mutation adjustments, dynamic crossover rates, and parallelized local searches to enhance global exploration and local refinement.", "configspace": "", "generation": 90, "fitness": 0.37325987166603486, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7337718610533919, 0.7448941653334611, 0.7194212894742684, 0.7463804258760047, 0.7361460253358098, 0.7423968592169417, 0.7357248068139792, 0.7293733904800508, 0.737520671121892, 0.5406429010420696, 0.5523750734645253, 0.5605295190998952, 0.5553020375315434, 0.5884255453452132, 0.565013323527082, 0.5520639705844403, 0.5768066041891944, 0.5630421657088738, 0.5412131263875546, 0.5312102067956594, 0.5265242101107623, 0.5195134391955181, 0.5185883580626618, 0.5262410238818467, 0.5197791592101132, 0.5026750302945778, 0.5091755053519631, 0.46487613157358865, 0.4987849753832315, 0.5108908168088644, 0.4748495550980105, 0.49319710683582174, 0.4830543469823424, 0.5012083934824, 0.49660175335705437, 0.4959780075937418, 0.8614150279359836, 0.8865519550395468, 0.8293944104299844, 0.8753430177215027, 0.8873652930081728, 0.9267506754222387, 0.8738585181279475, 0.9157010899202219, 0.9570414529806306, 0.44288530817015603, 0.3909511054305729, 0.4079426532704443, 0.3735769720936677, 0.43764990138734716, 0.3473425304289165, 0.45062921709019, 0.44478694365102567, 0.4558790823704242, 0.1784673485312629, 0.19713318077572728, 0.19082781885561928, 0.22607472440856602, 0.28595849585383937, 0.22434923425340747, 0.259025678034978, 0.19542927212576455, 0.199924964517314, 0.4544792367661554, 0.4401858433264384, 0.44692109704316807, 0.4566352148547389, 0.4501166622502899, 0.412431482657467, 0.45524696826399014, 0.4253586398433902, 0.43772863127249617, 0.4293648514078119, 0.4449618865441459, 0.4244299219932476, 0.44551186052371206, 0.4209133583170972, 0.4232015290727388, 0.41380614297142526, 0.4367599586811368, 0.4092478135593587, 0.3383382341640869, 0.04137985435340996, 0.03946710407618681, 0.25460333712025796, 0.33854386150548554, 0.3368365935925077, 0.35496190149965023, 0.3476290009574009, 0.380973997851351, 0.3454053427021405, 0.3527939047826115, 0.36355566945549067, 0.34425023460392157, 0.37103666465449636, 0.3413910861646047, 0.3785544860670035, 0.3804745422874598, 0.07704956463743051, 0.08784640805708877, 0.12138591465278403, 0.3473446582596549, 0.3110025225741545, 0.3513255175407105, 0.34778846918051187, 0.28081574139834875, 0.3319182826639757, 0.27160161017600803, 0.12919850849069003, 0.12749999431507952, 0.10989983382402457, 0.21597129375524438, 0.2921372642146868, 0.1379312247710961, 0.1781250998762176, 0.2931071709421609, 0.16704083423681493, 0.5840126135928588, 0.5904905550733262, 0.5926495745628881, 0.5918988500633987, 0.5952915606060329, 0.5848983247548711, 0.5836067747446619, 0.5965326626996931, 0.6015399338431922, 0.09728942565075482, 0.11099407871135158, 0.10944060504621334, 0.11632166572304647, 0.10441449586956264, 0.11190586503050182, 0.09415427513809804, 0.08870387551855241, 0.11283937688791978, 0.18064966186083076, 0.1655914628523849, 0.16864992603698925, 0.15965652530308705, 0.1890930529464735, 0.19412022531825202, 0.19130616222919006, 0.19366181653333858, 0.17059341992228094, 0.25575075561420724, 0.21417917351615212, 0.2299801690023736, 0.23589920941782516, 0.2217626563336389, 0.22624025290119099, 0.24017295943445982, 0.23802750606080336, 0.2551927320836428, 0.19482561450903468, 0.19511516329829615, 0.14635566447217208, 0.18766830747857144, 0.19951415193318012, 0.17781383407953522, 0.20655264341510926, 0.18054041534872523, 0.16209272288399934, 0.24470177845921948, 0.21579261455175125, 0.20855776999023212, 0.2111937171540864, 0.21835040021072782, 0.20717939290106657, 0.20346806969431463, 0.21323844109198276, 0.22685751016964772, 0.5086354981951866, 0.5038591769747947, 0.5132585811381507, 0.22067600548421096, 0.20800795083415413, 0.5070805598631112, 0.20700322732839038, 0.5171340530453139, 0.5123524864689974, 0.16719389769295867, 0.4888864342691418, 0.5021593878014752, 0.5473290590793357, 0.5911908690270353, 0.5507761978811714, 0.49230840118397523, 0.5123187401143816, 0.5156014858068814, 0.5019573943493816, 0.5040162358327127, 0.5102471683771598, 0.5140415874106699, 0.15290234137358982, 0.5022569844735916, 0.500398409262779, 0.5079027362300572, 0.5732202251000112, 0.22248888553143076, 0.1919117361083983, 0.19094020964301306, 0.3899539410693572, 0.2378064722984804, 0.2261862996254953, 0.22461418429670954, 0.2159414899856238, 0.2174424800632201, 0.08225643342430411, 0.0824968460527351, 0.0755689644852866, 0.08646061093344903, 0.08502183783916628, 0.08578606080230022, 0.07970090938790164, 0.08620536348874974, 0.0803695855102291]}, "mutation_prompt": null}
{"id": "d17fae9a-fde8-4a72-8bb2-13e8471230db", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationAdaptiveDiversified:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.6)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 16 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.07\n        delta_CR = 0.04\n        epsilon = 0.002\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([0.5]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.2)\n                    CR = min(1.0, CR + delta_CR * 0.5)\n                else:\n                    F = max(0.2, F - delta_F)\n                    CR = max(0.1, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationAdaptiveDiversified", "description": "An adaptive hybrid algorithm blending differential evolution with Nelder-Mead and incorporating stochastic global optimizer diversification.", "configspace": "", "generation": 91, "fitness": 0.36372168333462834, "feedback": "The algorithm HybridOptimizationAdaptiveDiversified got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.20.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7279469314017374, 0.7442651286426867, 0.7408398232600748, 0.7382203951674899, 0.7161117768477158, 0.7387444006453796, 0.7257308893219687, 0.7147831996165734, 0.7303981359464568, 0.5212020949521037, 0.5182914666724003, 0.5234882408839231, 0.5339007189102719, 0.5239105995227509, 0.5236972501723692, 0.534606808374642, 0.5329346363625007, 0.5257303237552255, 0.488292637237404, 0.5152082713542894, 0.49235273018111425, 0.5065356756642868, 0.4769595724101169, 0.5077793430158161, 0.4933977407518594, 0.49994227923571977, 0.48994034309402734, 0.47048898199456923, 0.48361568447018866, 0.46142337976819814, 0.4679060248439909, 0.4750129647032081, 0.4652415044505116, 0.45311299896132595, 0.4747306672155457, 0.45399900847485586, 0.8539561137803602, 0.9136876801833047, 0.8309477010907879, 0.8589291351960906, 0.8995337781462585, 0.8447760552246312, 0.8167123770900492, 0.8627942214054977, 0.8710658362022897, 0.42025188530934554, 0.43340341611013267, 0.4296415835416545, 0.2586973613666893, 0.362176041136006, 0.40358987857697326, 0.4360506544486331, 0.430777410294096, 0.44642613204865356, 0.17785164792364905, 0.2081948419466062, 0.17444786043527916, 0.23509534547231703, 0.255434733446403, 0.26511762416355433, 0.19139437909384105, 0.19678496590326044, 0.19313712470849453, 0.44154516805166855, 0.4188301475141446, 0.4273193239638823, 0.42344034918297535, 0.458297720239333, 0.45365751933125165, 0.43328415493973993, 0.44298133208450585, 0.4333252753794554, 0.4238743614200938, 0.4223636335284068, 0.44782322177207, 0.41287130164599684, 0.4291974196841216, 0.4275011464243764, 0.4135409891422449, 0.4026155299940679, 0.42033535293994806, 0.26159270554862446, 0.3262045243426489, 0.3366365403714995, 0.33710655891438623, 0.31809170198319103, 0.3343174734379225, 0.034591963414551175, 0.3598181873599251, 0.35237975244411435, 0.31991459936834266, 0.344441249747366, 0.3740696359105905, 0.08135242391586939, 0.29014345050595247, 0.06255819228790382, 0.36388582947466486, 0.38741919183002804, 0.0854781100217904, 0.32709894045898946, 0.33599936861376367, 0.3205702928754034, 0.10220184124966458, 0.33415420870497337, 0.3472969333831104, 0.3089939951420314, 0.2644629182388847, 0.2875142445866925, 0.21041387737588835, 0.09281182591275361, 0.0880126006823101, 0.239758694199789, 0.09802359135097527, 0.14533860709432733, 0.10362851753329305, 0.1530564098672509, 0.11603463481641885, 0.5884192806900637, 0.5854156802617931, 0.6080793917984191, 0.597579235997341, 0.5854252853231522, 0.6012439087104838, 0.6099576936172845, 0.5953779880232651, 0.5885167696060289, 0.11249132952876828, 0.09622149193865803, 0.10309501779574459, 0.09637816934723453, 0.11412064884099749, 0.12197472255453756, 0.09093407524139252, 0.09635934955843006, 0.11520667169184018, 0.20567921308842996, 0.17221951358569454, 0.15319110027095995, 0.1576125064764743, 0.17416552618022252, 0.15599601135812557, 0.19874448260615818, 0.17777815203702796, 0.19014970554450306, 0.211901192419354, 0.21984723175940002, 0.20701986808955075, 0.2128593273670475, 0.22162640349647778, 0.2364411103209303, 0.24517453311557158, 0.2232867148853025, 0.2513147752325624, 0.16606203631362038, 0.16798560855410283, 0.1875110308668062, 0.15931370478697515, 0.17705341266477592, 0.16477652099800766, 0.16924250361244808, 0.17085590454981536, 0.17405551280872678, 0.22424269596554358, 0.17888852798791555, 0.2357181559163991, 0.2125910404699678, 0.23391172374583524, 0.21892432727167566, 0.22728655010297405, 0.20396925739460026, 0.22947194807035853, 0.5018744637579191, 0.2191891898140842, 0.508113956400847, 0.508545372218473, 0.511768461094023, 0.5096144129798301, 0.5140686109567277, 0.19563184960153435, 0.5099058519573059, 0.49397029195565745, 0.5053877339703312, 0.49760577331611044, 0.5589922643694989, 0.5396973103293938, 0.5147470715960458, 0.5201745855018152, 0.500830859849406, 0.5170909793906606, 0.5179743694361865, 0.5373578000752885, 0.5705443057079673, 0.510275110117649, 0.18181863368444506, 0.19171249706712246, 0.48024521997066083, 0.49889995986589053, 0.5201628986140938, 0.21343094122234052, 0.19639762880323364, 0.22547946650089123, 0.20435071472276278, 0.18928931983378372, 0.2075350792418743, 0.21140169785527663, 0.21085160765411903, 0.24992056531249596, 0.09328246617170877, 0.07561274617335145, 0.08951662204534883, 0.08645540298222987, 0.07704830946418262, 0.07746780193009073, 0.08466584594153137, 0.08426340414438893, 0.08725365350904246]}, "mutation_prompt": null}
{"id": "3461f591-2d28-4da2-a1cc-0f45432c1d41", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)  # Adjusted ratio to give more weight to DE\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.005  # Slightly reduced probability for the alternative mutation strategy\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 4, replace=False)\n                    weights = np.random.dirichlet([1]*4)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)  # Adjusted dynamic adaptation\n                    CR = min(1.0, CR + delta_CR * 0.35)  # Adjusted dynamic adaptation\n                else:\n                    F = max(0.1, F - delta_F * 0.8)  # Adjusted dynamic adaptation\n                    CR = max(0.15, CR - delta_CR * 0.7)  # Adjusted dynamic adaptation\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with an enhanced Nelder-Mead algorithm, incorporating a probabilistic crossover selection mechanism, dynamic parameter adaptation, and an intensified local optimization phase.", "configspace": "", "generation": 92, "fitness": 0.38136125401407006, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7662027005874363, 0.7737316421952709, 0.7875807970069644, 0.7913056432792877, 0.7709790552286411, 0.776008552352476, 0.7686834695588944, 0.7963597265486194, 0.7779726200810678, 0.6180214626061427, 0.583152780984354, 0.6081888519302132, 0.6038537920043677, 0.6097049187805144, 0.6273949850413718, 0.5862130281163911, 0.6133400533200557, 0.6195825261290042, 0.5797394871569954, 0.5767720887696279, 0.5622516443185037, 0.5610967100087139, 0.590139005815971, 0.5917742822306941, 0.5548156726456692, 0.5525538953955698, 0.5560892306043661, 0.5055904112968514, 0.16996029759713105, 0.5195813601617546, 0.47264038692564003, 0.5346624920241889, 0.16792007528499486, 0.5032998579783536, 0.5473787536104522, 0.546525837011441, 0.8565234057220487, 0.8572961090963948, 0.8504960249683058, 0.8799659840254244, 0.8945854571174954, 0.8715328126239706, 0.8782514389470508, 0.8544710003114303, 0.8811950014345634, 0.42750874177245, 0.445452017761246, 0.39435515697496415, 0.40962823291231976, 0.41820417408595, 0.33706431627006284, 0.459488235486907, 0.39200034979802345, 0.43452868471866213, 0.18631256823980036, 0.19637160510061624, 0.16705991091113415, 0.2303489684528015, 0.2685850707224223, 0.272995635164873, 0.19708438110026372, 0.22619923956443688, 0.2033729398140689, 0.46446435941104147, 0.42690787626427695, 0.4223128588846574, 0.43696406420965794, 0.48380786334532755, 0.4734362300803817, 0.4552388841397652, 0.458608641025686, 0.47997944853444874, 0.4271135252596461, 0.4182724380753646, 0.4245507306551035, 0.4362524357366482, 0.4502523728831147, 0.4464929965751059, 0.42571608753629575, 0.4233175361960133, 0.42272332834533644, 0.332744583071544, 0.29996329920542275, 0.32036362675200836, 0.3490672777291688, 0.3418026226072651, 0.3169915096943665, 0.3403745117799315, 0.35344695408370386, 0.3509935292428047, 0.3989418444951278, 0.3583607966924093, 0.35006814711422285, 0.3566977273644507, 0.315442703927692, 0.3727494895952066, 0.37361737182240673, 0.332936909334024, 0.33648891746352916, 0.13765398238149795, 0.31609159503921613, 0.3191080479938849, 0.3436022003788608, 0.33438029511774625, 0.036260348959461064, 0.28215197841779105, 0.3075836651135204, 0.27973281748004075, 0.11243395355034824, 0.11967930813538719, 0.16719712512898477, 0.2830530462087384, 0.1364413975325005, 0.2197632589750974, 0.0975136329123405, 0.11393983063089741, 0.1425480723790875, 0.6060736063899745, 0.6040252175974237, 0.601321046725072, 0.6003510028445138, 0.59508550164999, 0.609101952625083, 0.6158002869552981, 0.6036951047750807, 0.610839859325827, 0.10917819790339023, 0.13180483133374732, 0.12388432036599428, 0.1127417931729684, 0.10130656750304423, 0.11088537836928158, 0.11026294775698409, 0.09983979076481542, 0.11488919720297852, 0.16498639692962136, 0.1580199776025344, 0.1629881590170691, 0.1921260348056546, 0.1371375985227472, 0.17832827244713934, 0.15507062345091727, 0.1684428947404032, 0.1804127624240991, 0.23972416330757973, 0.2183756111367351, 0.22081453224751746, 0.2109392342501325, 0.2141751626985383, 0.20115187019041758, 0.2687858292209018, 0.2304085380186356, 0.24011836851496793, 0.16197331035253626, 0.1504421187761743, 0.20572962572993314, 0.18563801624316023, 0.1821176126228382, 0.1371514747525644, 0.15762376807956902, 0.21324041045093156, 0.19180329863667656, 0.19573760380118743, 0.18008077669411027, 0.22682241839950368, 0.23713477009932782, 0.229584154642147, 0.20573260902252333, 0.2317152374375333, 0.23161986841048876, 0.2123445532801327, 0.5112961139664347, 0.5354517739016785, 0.5225191033237627, 0.5218159805307265, 0.5204513833613118, 0.5186088289843886, 0.22799026450598803, 0.5269565592388611, 0.5099300637188429, 0.4895486344198008, 0.5534419090910865, 0.5893677182964475, 0.5528003082940218, 0.5101923454854853, 0.5121858581637093, 0.6349435941983832, 0.16834110484330123, 0.5057573096941461, 0.5006839894699749, 0.4926330194391715, 0.5216782836692776, 0.19202859789461812, 0.4905302635368193, 0.5606994318456999, 0.4943460819923864, 0.5531612390677997, 0.48687258283255674, 0.2080269191801143, 0.21262067210299052, 0.19588045410870014, 0.19422622335630824, 0.21991138818487144, 0.23321734848919284, 0.18133516308026132, 0.19515805341713244, 0.23571683038868718, 0.08396478558234355, 0.0840475449202509, 0.09359554916485502, 0.08051680673342254, 0.0919847137508143, 0.08808846648531143, 0.08491649589767436, 0.08447225897346744, 0.07399097608340066]}, "mutation_prompt": null}
{"id": "5eea967a-9ccd-4eff-b3de-6c7c1d0168dd", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.6)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 15 * self.dim\n        F = 0.75\n        CR = 0.85\n        lambda_f = 0.01\n        lambda_cr = 0.02\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < 0.1:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + lambda_f * 0.3)\n                    CR = min(1.0, CR + lambda_cr * 0.4)\n                else:\n                    F = max(0.2, F - lambda_f)\n                    CR = max(0.1, CR - lambda_cr)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A refined hybrid strategy combining adaptive differential evolution with adaptive parameter tuning and data-driven local search enhancement.", "configspace": "", "generation": 93, "fitness": 0.36938543401327495, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.773566347796302, 0.7635555225420989, 0.7487591660635281, 0.751547480272617, 0.7470112398299736, 0.7336253219781772, 0.7576356424496492, 0.7530959967827988, 0.7481562983311578, 0.5596978118484156, 0.5531237327503058, 0.559068643107038, 0.5723440362235568, 0.5668955873675507, 0.5727666819435064, 0.5408198153365653, 0.5489549952406516, 0.563792332799086, 0.5200334409646161, 0.5218427415407708, 0.5252302033715472, 0.49941886801920543, 0.5026802602239365, 0.52120242903772, 0.5129909881627422, 0.5130260875377384, 0.5049816866534393, 0.4902988279811965, 0.47303235594415616, 0.4776799663799597, 0.48381198394342095, 0.4648681016517777, 0.5078264967110409, 0.4642852707587012, 0.46672161092353204, 0.47030238271025226, 0.859376668357285, 0.8985270723501952, 0.8644951871220566, 0.8671272260507894, 0.9039585390240004, 0.8770145359683462, 0.8650962163751439, 0.9248734508382968, 0.8968416577987077, 0.39949751932367095, 0.2782769255125067, 0.4328723121036542, 0.42901439485850923, 0.39672993813230983, 0.385973464377515, 0.4375164152520813, 0.4436606009106099, 0.44288983242278623, 0.1784209139449917, 0.17989114155930364, 0.17713461324103896, 0.30076569497897376, 0.234837260563436, 0.24283423539813598, 0.15594736741011206, 0.18921967894023672, 0.20355998990386814, 0.4321622787112297, 0.4445677497171038, 0.4306329519155987, 0.4537132313388115, 0.4335371508937619, 0.4483987853233077, 0.4434918372114478, 0.45075394971758764, 0.46196911601532253, 0.4352227883598845, 0.42492284568293304, 0.4281268740206938, 0.4467567476071427, 0.42567039416920993, 0.427604521729423, 0.41276945329858794, 0.411885384110088, 0.42314854564426796, 0.33884953628948067, 0.339603864124681, 0.2973705131938873, 0.3431726771630864, 0.343733078128151, 0.3449686024572949, 0.28359571840857456, 0.3343097226967694, 0.3468716041442089, 0.35689047981699074, 0.35952226893800154, 0.35707484696860625, 0.08177881031342171, 0.0853230818155638, 0.32694582593449795, 0.3448859571901993, 0.41546067144522436, 0.07793588807422458, 0.3294627645783461, 0.2932382889553452, 0.3517588087237502, 0.34869224729184234, 0.05031593877555929, 0.352464218380348, 0.28293892866399006, 0.28284632243306995, 0.32520853311701226, 0.08367518509975702, 0.23528475452490427, 0.09001943755197295, 0.14691346672051808, 0.12494994420414074, 0.12435657685670287, 0.1520964686559937, 0.09391819966073567, 0.16209377285745796, 0.585236781359088, 0.5973200305400842, 0.6078831997384104, 0.6048609355622562, 0.5916348917596654, 0.5990404841693677, 0.6024700671658554, 0.5871081011006698, 0.5997962271362345, 0.10683073945310884, 0.10488095832927413, 0.10347499495648449, 0.11936404075745377, 0.07892153180909334, 0.08984067273792629, 0.0839515406371889, 0.11078272282008805, 0.09115036562338774, 0.23710715240655378, 0.1584718993019203, 0.1539309184192461, 0.23017828764233073, 0.17220935059940456, 0.14391592045388824, 0.2774024522315631, 0.23252948902674597, 0.1473764743812055, 0.2125550308538895, 0.21454990442869915, 0.2164800124036792, 0.25358935376811675, 0.22612989597368482, 0.20410824220543278, 0.2434614285058817, 0.2557049766024344, 0.21040295434752498, 0.18608135691292904, 0.17875942151854873, 0.18168334372979933, 0.17310932634949827, 0.17905534916466603, 0.17317919111196167, 0.2085011586767952, 0.2004283226458189, 0.1612873465824396, 0.21499096252087557, 0.20687937093318387, 0.26769767268167244, 0.2170306991574229, 0.20106623321026096, 0.2347636692957793, 0.20097707351906025, 0.22632523150545114, 0.23131213103996917, 0.5195154377214442, 0.208499889416495, 0.5189174731797876, 0.5095271089772009, 0.21743669294203705, 0.5060406013670143, 0.5105684809368252, 0.5041174781297102, 0.5033667780014393, 0.1788125510538926, 0.5094527409311764, 0.5162786808990153, 0.5571538785763437, 0.5410848682348415, 0.5088198606673183, 0.547140804778417, 0.4888889364430169, 0.5282602450111259, 0.5160313676537469, 0.5259824566645455, 0.47841179080668905, 0.1772633859310614, 0.18429725145752185, 0.5001523827436554, 0.5006032964338001, 0.5481577841675542, 0.49558137407988667, 0.21042756045446898, 0.19111999255665535, 0.20489901432422453, 0.18249752359349414, 0.21109520708172547, 0.19770314372333642, 0.22674438442804734, 0.18675798601344673, 0.1959569197437364, 0.09007376630368802, 0.07868985014257468, 0.07206527280297281, 0.08573557384400066, 0.09925299518272712, 0.0709396104185156, 0.07724596846762977, 0.08721379356395442, 0.0758268797346554]}, "mutation_prompt": null}
{"id": "b7813b0e-8c94-478b-81c2-9056bb2cb9b3", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedStochastic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.5)\n        self.num_sgd = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim\n        F = 0.7\n        CR = 0.8\n        delta_F = 0.02\n        delta_CR = 0.02\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        def chaotic_map(x, iterations=1):\n            for _ in range(iterations):\n                x = 4 * x * (1 - x)\n            return x\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = chaotic_map(F + delta_F * 0.3)\n                    CR = chaotic_map(CR + delta_CR * 0.4)\n                else:\n                    F = chaotic_map(F - delta_F)\n                    CR = chaotic_map(CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            learning_rate = 0.01\n            for _ in range(self.num_sgd):\n                grad = np.gradient(np.array([func(best_solution + np.random.normal(0, 0.1, self.dim)) for _ in range(3)]))\n                best_solution -= learning_rate * grad\n                np.clip(best_solution, self.lower_bound, self.upper_bound, out=best_solution)\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_sgd, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedStochastic", "description": "A novel hybrid algorithm integrating adaptive differential evolution with a stochastic gradient descent phase, promoting diversity with chaotic maps and enhancing convergence speed through adaptive learning rates.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (5,) (3,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (5,) (3,) (5,) ')", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {}, "mutation_prompt": null}
{"id": "80002d67-c7b7-4608-993f-9b0113c2a4e6", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.6)  # Adjusted proportion for DE\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.7  # Slightly increased F for potentially better exploration\n        CR = 0.85  # Adjusted CR for a balance between exploration and exploitation\n        delta_F = 0.04  # Adjusted delta_F\n        delta_CR = 0.02  # Adjusted delta_CR\n        epsilon = 0.002  # Slightly increased epsilon\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 6, replace=False)  # Increased to 6\n                    weights = np.random.dirichlet([1]*6)  # Adjust weights for 6 selected\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)  # Adjusted learning rate\n                    CR = min(1.0, CR + delta_CR * 0.35)  # Adjusted CR learning rate\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.1, CR - delta_CR)  # Slightly reduced CR lower bound\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})  # Increased precision\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "An enhanced hybrid optimization algorithm combining adaptive differential evolution and Nelder-Mead with strategic adjustments to mutation and crossover based on success/failure probabilities for improved exploration and exploitation.", "configspace": "", "generation": 95, "fitness": 0.37854870769789517, "feedback": "The algorithm HybridOptimizationEnhancedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7660081282646715, 0.793912134312522, 0.7843039324875616, 0.7862706063481832, 0.7850160095043518, 0.7864154626369544, 0.7781191441231914, 0.7749951951646306, 0.7871074441759365, 0.6087829518079299, 0.582647930070928, 0.6026083155782718, 0.584395887765432, 0.6039556585745027, 0.6143102252356729, 0.6114051779338414, 0.6209308797368939, 0.6215815674682458, 0.5687793098537628, 0.5713356302596895, 0.5676675775053733, 0.5661148338459935, 0.5509829889296862, 0.5503930414032899, 0.5583230341395101, 0.5660175162801833, 0.547827102423497, 0.5050456769709475, 0.5403591372387785, 0.5442593627079753, 0.5222103841656542, 0.5359789153228149, 0.5135662749986759, 0.5277996401281395, 0.5592995736630497, 0.4950569227638728, 0.8635484143554606, 0.8377450587587585, 0.8699714649257665, 0.8639173812286064, 0.8883527901096469, 0.8894581371446727, 0.8437609854137333, 0.8919305277188632, 0.8941039516422247, 0.4293600660137328, 0.333682648703302, 0.4309094765194006, 0.3922977138919249, 0.3705077202949939, 0.39690457870648466, 0.4274934329821256, 0.46970023792517146, 0.4835491643280859, 0.20356427750259587, 0.20751714534591703, 0.12960818396747886, 0.23932370576622075, 0.21132932007578942, 0.2456435338475278, 0.19161137369867776, 0.20681505245334753, 0.20007900559399805, 0.4315267032114535, 0.4606858578123805, 0.42979856379234327, 0.4456123502896331, 0.43481072728398307, 0.4313279509493029, 0.4635657883852279, 0.4449619558802972, 0.4802290858255084, 0.4230087664414499, 0.42485817322688535, 0.4229992607517825, 0.4275862025552549, 0.4436441598850962, 0.4241154316598805, 0.43178183499436107, 0.4221797678536451, 0.4449531386679939, 0.33676827304382495, 0.3409826998422929, 0.3163053900330953, 0.28726011758227765, 0.28603330721267517, 0.35137404959148233, 0.32845052758589965, 0.036034814147738126, 0.32223953646083914, 0.07233189306770238, 0.38400813650237575, 0.3425634785974432, 0.3563997498529924, 0.36028071093040526, 0.33465881883545523, 0.37016471787256133, 0.3666679906422605, 0.3583630475860162, 0.29327348418122956, 0.33235146825649986, 0.3016292965473958, 0.34069694494657776, 0.3540240624937899, 0.34653777520815776, 0.2855227162165478, 0.3370224650487025, 0.2912597040965066, 0.10779863521941424, 0.09421492075594029, 0.22846568998388717, 0.14002490274901125, 0.12934342977967495, 0.16430336023698433, 0.19097337147339222, 0.154215012015396, 0.22036652765161913, 0.5875812741873645, 0.6080153438374645, 0.5967015403408658, 0.5847831468525473, 0.594774614389567, 0.5847635151037146, 0.6088965884525108, 0.5907384855356224, 0.5926578253100303, 0.10458012420269625, 0.0998619515331296, 0.1193663419865969, 0.0850767489082076, 0.09289693531258558, 0.10998427016055279, 0.09969038537895536, 0.10189875048815411, 0.11642479996898347, 0.1584241289909638, 0.20099605132419807, 0.20251749911755323, 0.22543754329524213, 0.24535585192839138, 0.16013627473459913, 0.20381582643852347, 0.13323765854695468, 0.2071580994256017, 0.23424051043379313, 0.2199572727049368, 0.213070561080398, 0.20839234415448815, 0.22331760340846063, 0.20979864629623324, 0.25119324433385404, 0.2734930014205318, 0.2536727439691736, 0.15038803462647377, 0.16477525450772845, 0.15060004033469254, 0.2055376970115571, 0.19167486155833957, 0.16981896956203169, 0.15431262212159613, 0.170525326946669, 0.18250596948773146, 0.21818658272746738, 0.20764528928680515, 0.2190871958201943, 0.2256264737881133, 0.22944317422866112, 0.2098773775869398, 0.2348193566227853, 0.21092450194673096, 0.21287304081446423, 0.5172131124365505, 0.5088459758591669, 0.5143835091438174, 0.5385600318497779, 0.5388631734528492, 0.20318004897560582, 0.5265490519618694, 0.509771065801393, 0.21853346696831555, 0.4843665468556603, 0.18134570645476467, 0.5533419350870558, 0.5047368006285577, 0.50219853397304, 0.5155978056036358, 0.5064238773464944, 0.52266518590285, 0.48679933910751094, 0.5346730641842614, 0.5143656490263906, 0.5322085734224703, 0.180096781826527, 0.569480972520385, 0.18440948019379488, 0.18643918419677286, 0.5387686507791584, 0.4869482892503738, 0.17793915917847003, 0.2062387209297356, 0.2108414072505349, 0.24353152029385594, 0.21223991997406266, 0.19799760088372453, 0.23384481667126034, 0.18611219715113636, 0.21647234594262077, 0.07948249580944611, 0.08168125207828636, 0.08553725838152115, 0.08945217343419898, 0.09192736784734878, 0.08205053496646308, 0.08540930085039766, 0.08768453995023662, 0.07875749739090787]}, "mutation_prompt": null}
{"id": "f43b19ff-559d-499d-b63e-e48b0f7c3b74", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.001\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefined", "description": "A hybrid strategy combining adaptive differential evolution with enhanced Nelder-Mead, featuring a dynamic selection mechanism for mutation vectors, adaptive parameter control, and intensified local optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7834390418277354, 0.7804618029949975, 0.7745852887294014, 0.77464395186458, 0.7807112242679612, 0.7971063628662408, 0.7819995995268428, 0.7787494428801949, 0.7656824964456668, 0.6196198107675936, 0.6036958777615945, 0.5965270806514248, 0.631881515974091, 0.5949703840478073, 0.5947812301501377, 0.5851588807967554, 0.6010947145390492, 0.6099094700205672, 0.5722690307003345, 0.5788254999252853, 0.5738687037908081, 0.5671866756271814, 0.5675286583260961, 0.5952556704033698, 0.5784073251853765, 0.574477176334107, 0.5799103534964447, 0.5623956811295727, 0.5784426020633572, 0.5185066360253794, 0.5185167356074677, 0.5090018302234804, 0.539710884875165, 0.5172697880578754, 0.5530056765732465, 0.5338212113222209, 0.8651090235023391, 0.8457416814464916, 0.8443420444397, 0.8820266742673186, 0.8777362192145146, 0.8961859913790908, 0.8606041246265498, 0.8506809077634592, 0.8796231346736391, 0.5077117855920197, 0.4340986880049629, 0.49632422544078203, 0.40625476457541476, 0.4144189404776055, 0.42253265528226913, 0.485466446883297, 0.47764112983018037, 0.5009619027002212, 0.16448718214119362, 0.1844866816947841, 0.19630420189059716, 0.20434154153463602, 0.273615822692322, 0.24373269741763193, 0.16098438916115088, 0.2083695089418045, 0.19909829351556796, 0.4843035446889583, 0.4824201795333517, 0.49319981605503527, 0.4991521197914208, 0.4908068377456649, 0.5080893575680694, 0.4922801358599094, 0.4845542635457192, 0.5005238101431703, 0.4646251914897118, 0.4684739084024976, 0.4998725693917623, 0.471429924369013, 0.46620270263535035, 0.4727745078853829, 0.47639352426915116, 0.46351468388361683, 0.4665346089563308, 0.32897535233635067, 0.34390286614338217, 0.3355396087135223, 0.39841989975815406, 0.34650754265242534, 0.38834581367116394, 0.40447276337253557, 0.004983456239620154, 0.3853096467248893, 0.40808644263521987, 0.3665702905959919, 0.4025392140778613, 0.4001465069265536, 0.07852665530464986, 0.42823109151985095, 0.4119673942961687, 0.4077420924038253, 0.406884216998061, 0.383889363394017, 0.1750394854234506, 0.12428219236733873, 0.3961100263260037, 0.39309257738113834, 0.40521700283964857, 0.3551039790484748, 0.37408774046755233, 0.38009354603064993, 0.4039433038121796, 0.11911759648545572, 0.1632289608117179, 0.08653105183347909, 0.14872273626527677, 0.17890231465825435, 0.16694919542412134, 0.10802235437274899, 0.39729248942468154, 0.6128808775384069, 0.6162780576670162, 0.6235168568955536, 0.6280769703615867, 0.6066537099306795, 0.6233162488061427, 0.6433366772365848, 0.6133711221640482, 0.6357589469349831, 0.11343299809391005, 0.11732606526203815, 0.11123006525148571, 0.10847234705634634, 0.09067253852001922, 0.13097290203852685, 0.1315003505115132, 0.09939368942989035, 0.0880589320019457, 0.16894441495509527, 0.1817204609266131, 0.1844688660868984, 0.17017843482636308, 0.14948492646503997, 0.2563440553929487, 0.14739181667156986, 0.19228387995493446, 0.18195950524143334, 0.244946339431799, 0.2206547443919069, 0.2156847663181155, 0.23093166378497254, 0.2524442479126795, 0.2361557422589019, 0.32161507563177416, 0.26277272173021193, 0.21199253670426965, 0.15162547973677465, 0.24412055316886683, 0.23545774846645073, 0.1665073685502786, 0.16428541251954099, 0.19565104846210546, 0.20866025281961154, 0.20411532726513637, 0.20424438169790282, 0.20680113302805658, 0.19443631073040923, 0.21230019466539918, 0.2281790739857913, 0.19761513632309458, 0.19100609215044173, 0.25657202009773694, 0.20997699728514174, 0.21837416633311346, 0.5552990866729647, 0.5529716183929583, 0.20882400707197646, 0.5548332535112712, 0.556984233098784, 0.5552204581975455, 0.5633195564181676, 0.2089638590547711, 0.2205604205915822, 0.5536543284760876, 0.5540199343230364, 0.598605216476483, 0.5669023749791722, 0.5485382037143632, 0.5512710730144068, 0.5145176067105075, 0.559159366160461, 0.5522025591116717, 0.5319327052926119, 0.5200850258039997, 0.5506736424096996, 0.2564113735735156, 0.1894541768186918, 0.559858732136066, 0.5175232549252329, 0.5428909528471286, 0.5391903706120034, 0.19870726235767855, 0.24544600225055213, 0.18999769887686946, 0.21934688052871465, 0.19355598939104945, 0.22765016321915477, 0.21523964646854277, 0.20670887823681228, 0.21642585371823175, 0.07693607908132183, 0.0930717974717854, 0.07974456292782528, 0.08808873475408929, 0.07388108664660831, 0.10310845867948193, 0.08238781141250096, 0.09222351201240087, 0.08461970228904536]}, "mutation_prompt": null}
{"id": "b1b042ee-0580-4373-86d1-240aa84d3be0", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationEnhancedRefinedDynamic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 12 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.05\n        delta_CR = 0.03\n        epsilon = 0.002\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            perm_indices = np.random.permutation(population_size)\n            for i in range(population_size):\n                if np.random.rand() + epsilon > 0.5:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = perm_indices[i:i+3]\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.3)\n                    CR = min(1.0, CR + delta_CR * 0.4)\n                    epsilon = max(0.001, epsilon - 0.0001)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationEnhancedRefinedDynamic", "description": "A refined hybrid strategy integrating adaptive differential evolution with dynamic mutation control and enhanced Nelder-Mead for robust global and local search capabilities.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('not enough values to unpack (expected 3, got 2)').", "error": "ValueError('not enough values to unpack (expected 3, got 2)')", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {}, "mutation_prompt": null}
{"id": "21849465-3216-4398-8fc1-9f1bada52e4e", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass HybridOptimizationAdvanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.60)  # Adjusted DE budget allocation\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 14 * self.dim\n        F = 0.65\n        CR = 0.9\n        delta_F = 0.07  # Slightly increased step for F adjustment\n        delta_CR = 0.04  # Slightly increased step for CR adjustment\n        epsilon = 0.001\n\n        # Quasi-random initialization using Sobol sequence\n        from scipy.stats.qmc import Sobol\n        sampler = Sobol(d=self.dim, scramble=True)\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * sampler.random(population_size)\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                a, b, c = population[idxs]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.25)  # Adjusted F adaptation\n                    CR = min(1.0, CR + delta_CR * 0.3)  # Adjusted CR adaptation\n                else:\n                    F = max(0.1, F - delta_F * 0.5)  # More conservative decrease\n                    CR = max(0.1, CR - delta_CR * 0.5)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Powell',  # Switched to Powell for potential robustness\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'xatol': 1e-6, 'fatol': 1e-6})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "HybridOptimizationAdvanced", "description": "An advanced hybrid approach combining adaptive differential evolution with Nelder-Mead, featuring stochastic quasi-random initialization, adaptive mutation, crossover strategies, and robust local exploitation.", "configspace": "", "generation": 98, "fitness": 0.26555635733539806, "feedback": "The algorithm HybridOptimizationAdvanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7837105722557576, 0.7677375440955168, 0.7806280927612141, 0.7852574337403307, 0.7905813220718224, 0.7721574809624723, 0.7634936254537852, 0.7624087687581022, 0.7734892322440857, 0.5786600322906925, 0.566113161967001, 0.5977030021537157, 0.5226899838278312, 0.5548227991307134, 0.46895539398094155, 0.5414688691652696, 0.5425053804801087, 0.5508623353680487, 0.41534991289079815, 0.4378918907172783, 0.4673913227298234, 0.42273279703649935, 0.2498791179056581, 0.4981296902494031, 0.45761030834999217, 0.5179839349983573, 0.40806378176829494, 0.39394053798699324, 0.20755993758557967, 0.37601130039429853, 0.364042143949055, 0.2237506256622006, 0.37878125357279224, 0.16929053065359734, 0.4047711383430669, 0.1639399368602502, 0.9622368406390607, 0.8884094925822078, 0.9086723858856474, 0.9351041698059386, 0.8765540958885137, 0.9331338546843829, 0.8939200366405708, 0.855761558223619, 0.8955589745676292, 0.1888733792220353, 0.2171417560406237, 0.2356008719093584, 0.16958834507401066, 0.13308722284450125, 0.18321929834378936, 0.18995253134667456, 0.22273140016322124, 0.166686421737268, 0.18731361572640404, 0.15702503021270953, 0.1679237501398213, 0.2065470053529469, 0.18994469062743702, 0.21010359233743348, 0.1931290411681197, 0.20318253817895715, 0.20303834539378462, 0.13444520049056885, 0.1460356442756332, 0.16769885473209611, 0.16994806589328615, 0.17989297381947145, 0.17128092620324786, 0.1833677120580196, 0.20638637865313736, 0.1928353079064392, 0.1785899771108601, 0.2158477222919971, 0.17300350370553375, 0.19014499880793412, 0.21161424237979254, 0.22535742481585852, 0.21574344125600797, 0.2219112949417419, 0.20914934668191543, 0.0531300540379227, 0.04787475499823901, 0.0, 0.04985414966878832, 0.015362661643797071, 0.04628217717115113, 0.004621561966543952, 0.048533368688860046, 0.0046137369076517665, 0.09256714439494429, 0.13492500013253061, 0.11653243973463157, 0.06213028646119345, 0.06678641599179425, 0.08580018389084221, 0.09462854297105883, 0.16292158330995588, 0.09503867600178384, 0.05323345756912712, 0.12409259912188575, 0.056442720602309815, 0.054387390468028984, 0.0456960754143938, 0.0452495571521937, 0.0928241674916459, 0.047756379941426674, 0.16706853267364552, 0.14117690897695412, 0.0620773019793025, 0.11789630330930845, 0.12334572817117262, 0.07943389836026216, 0.17995590724248356, 0.1496049919471909, 0.11216326378607844, 0.09850983299447102, 0.40768956863840444, 0.4522339102471403, 0.4215999399619793, 0.40829189776412056, 0.4033879214683901, 0.41256619886972035, 0.4137812174895671, 0.4338053594240915, 0.4195956780327771, 0.10903441759145971, 0.09664207472474629, 0.11106884907803927, 0.11221907639240669, 0.10065315908417638, 0.10255205988702254, 0.09713160124027331, 0.10279714271182416, 0.09559906020465025, 0.13927234072950956, 0.14998357470821522, 0.1504318297261492, 0.12669521559622732, 0.16520828003673926, 0.1701407602827807, 0.14676105221971325, 0.14711303322443725, 0.1690472863251361, 0.21789095746732912, 0.22891045770846163, 0.26355403974991054, 0.23118410996241578, 0.2072302618256665, 0.23005937208283844, 0.22748058466306809, 0.2410570409118321, 0.2434551933418122, 0.16043859097583013, 0.17780675230302456, 0.16468342114056778, 0.15208836137834647, 0.1693114635549391, 0.17082913621463358, 0.18282221404004362, 0.15737098387213666, 0.1954880416152177, 0.19737520662932417, 0.196264975565711, 0.21791685374587033, 0.18740731624537277, 0.2331576460950191, 0.2073383271647098, 0.22350771580855855, 0.23013171508131292, 0.19320523139534762, 0.2145223519053272, 0.2696488630844589, 0.23898959745484794, 0.2438972169708441, 0.2712044238182081, 0.22196733669291369, 0.22194750375159822, 0.27647911447700924, 0.2490263049814927, 0.2608376483979129, 0.19486314885780032, 0.2306121379657744, 0.30467036181324736, 0.4202736805978623, 0.26977024509255776, 0.3425305694555938, 0.3370968090689961, 0.3452903540037423, 0.26737115212794227, 0.2898051041205474, 0.19021882364661546, 0.18110007531846928, 0.21838649511516384, 0.2528433724894308, 0.2648616394183675, 0.2587885956297641, 0.2133333144721924, 0.17782723205723827, 0.18617683022725773, 0.18883712262148222, 0.18000107094130013, 0.19462048136672105, 0.17701935927833934, 0.18518139918682497, 0.20086304860624427, 0.19868624861804596, 0.08600018283480582, 0.0752108101947142, 0.07376309829799288, 0.0785506437291037, 0.06974439604872174, 0.0646823112648135, 0.07435821529588316, 0.08396862133558824, 0.0805011873180903]}, "mutation_prompt": null}
{"id": "56f8c1ff-67b1-4f2b-958a-8e0ac6c0ac7d", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass RefinedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_de = int(budget * 0.55)\n        self.num_nm = budget - self.num_de\n\n    def __call__(self, func):\n        population_size = 16 * self.dim\n        F = 0.7\n        CR = 0.85\n        delta_F = 0.05\n        delta_CR = 0.02\n        epsilon = 0.005\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = population_size\n\n        while evaluations < self.num_de:\n            for i in range(population_size):\n                if np.random.rand() < epsilon:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 5, replace=False)\n                    weights = np.random.dirichlet([1]*5)\n                    mutant = np.clip(np.dot(weights, population[idxs]), self.lower_bound, self.upper_bound)\n                else:\n                    idxs = np.random.choice(list(set(range(population_size)) - {i}), 3, replace=False)\n                    a, b, c = population[idxs]\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    F = min(1.0, F + delta_F * 0.35)\n                    CR = min(1.0, CR + delta_CR * 0.45)\n                else:\n                    F = max(0.1, F - delta_F)\n                    CR = max(0.15, CR - delta_CR)\n\n                if evaluations >= self.num_de:\n                    break\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        if evaluations < self.budget:\n            result = minimize(func, best_solution, method='Nelder-Mead',\n                              bounds=[(self.lower_bound, self.upper_bound)] * self.dim,\n                              options={'maxiter': self.num_nm, 'adaptive': True, 'xatol': 1e-7, 'fatol': 1e-7})\n            evaluations += result.nfev\n            if result.fun < fitness[best_idx]:\n                best_solution = result.x\n\n        return best_solution", "name": "RefinedHybridOptimization", "description": "A refined hybrid optimization algorithm combining adaptive differential evolution with an enhanced Nelder-Mead method, incorporating dynamic parameters and competitive selection for robust exploration and exploitation.", "configspace": "", "generation": 99, "fitness": 0.3886041801196643, "feedback": "The algorithm RefinedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.21.", "error": "", "parent_id": "79036571-2824-43e6-9adf-36f257152323", "metadata": {"aucs": [0.7472346821916773, 0.7322282329811924, 0.7411225358198004, 0.7600669905741094, 0.7428951367413321, 0.7505474619854233, 0.7520540371179032, 0.748393945424576, 0.7439356865125186, 0.5782165743771127, 0.5629995531043864, 0.561395522578558, 0.5779650935990943, 0.5835635366574241, 0.5892157174960801, 0.5665786290088958, 0.6044705273274222, 0.5831359890148945, 0.5344056308250558, 0.5602674217765947, 0.565749652130092, 0.5545973086213363, 0.5466045929231456, 0.5377058332371134, 0.5435850039469406, 0.5413293664596148, 0.5287023866159561, 0.5363421397552055, 0.5585891217773025, 0.5095257777730602, 0.5223901034470635, 0.5464801929375129, 0.5298652030482408, 0.54280802510788, 0.535241675609228, 0.5178353438125567, 0.8315389014446746, 0.8692653600160285, 0.8587006257572799, 0.8502131217078894, 0.8445929469468878, 0.8243538439546967, 0.8535475702643986, 0.8704570711842426, 0.8193113079814605, 0.48046721779276835, 0.445242292779066, 0.4668064545844831, 0.4396007568147575, 0.4214997162382057, 0.43429456422228596, 0.48628551461421854, 0.4637817128500554, 0.4907719169496956, 0.19277366155623432, 0.17786250370595613, 0.19067672656395207, 0.20490067082973984, 0.27327935653885693, 0.2441515971695849, 0.22628720130671032, 0.20921851659580004, 0.194827427421997, 0.4665658029186711, 0.4744498904987351, 0.4712408554092259, 0.48232500198180694, 0.48288608089944474, 0.4987900524262584, 0.4694786964366535, 0.489241612842661, 0.4757195855499131, 0.4744739635568429, 0.4667604472142143, 0.4676787725771402, 0.47121391001080726, 0.480990928586735, 0.47247199762227265, 0.4636556929830027, 0.444341023942571, 0.47360718959478654, 0.4020675737500917, 0.3587909104927729, 0.38825959305760605, 0.3697874437091735, 0.3702817027252504, 0.402479930041057, 0.38659427336993923, 0.39662080551181456, 0.3933854379920535, 0.39995723368558, 0.4277902915928352, 0.38945865846624117, 0.3679311330603413, 0.3805295738681399, 0.41746852955398905, 0.4180410535501382, 0.42382100851930005, 0.0821137814410211, 0.38307467134071727, 0.3783199871511924, 0.3802830300514629, 0.3890479275556685, 0.35268763764784594, 0.39673724206426564, 0.3243480626808214, 0.365801170767034, 0.3138257067195498, 0.12429606548115912, 0.06538547742941136, 0.19446428877416677, 0.30764815978248794, 0.10406497282237892, 0.39517302285534617, 0.23336367624100884, 0.3573479308344396, 0.12132562342957243, 0.6293437788346925, 0.6118438737206532, 0.6169293571269805, 0.6169166181781198, 0.6201302722209974, 0.6202529665399663, 0.6252660693058958, 0.6397603448536506, 0.6096529775518716, 0.11291206819774491, 0.09584617496926806, 0.10904748305130829, 0.12028649517036993, 0.08980887166237661, 0.09728541991458428, 0.11159936952338834, 0.10436587242220374, 0.10911894219179807, 0.1984980405711564, 0.1283755731699614, 0.16130563606367776, 0.1672932274798915, 0.17205352867459955, 0.17393922526347338, 0.16547489408076055, 0.19361932053879338, 0.16161653594956427, 0.22826040221282784, 0.22900443970076534, 0.20688467212459116, 0.2142205747738205, 0.23444156448146847, 0.22209053293146752, 0.3228463335339371, 0.28581462974681837, 0.2620799536217552, 0.21637584323335124, 0.17918756886274534, 0.13801973360688058, 0.18773521293250028, 0.17949993459719227, 0.1539191374794242, 0.19544594169170315, 0.16605525024894052, 0.1914051947682417, 0.23849005748691565, 0.2068673610765982, 0.1923600632289374, 0.23305819144411855, 0.21964923490238708, 0.2175540836733163, 0.21500405320960003, 0.22801267434084083, 0.21342972642164548, 0.548532757787135, 0.539288777534507, 0.5391136479736376, 0.20736035218487214, 0.5621540363843841, 0.5562550038324727, 0.5489296207328797, 0.22103023925043785, 0.19245750086196156, 0.17712173401408438, 0.5330593215620132, 0.18023057312378765, 0.5788317253715549, 0.5543108713861935, 0.5802454451694826, 0.556414922111766, 0.5546794394648873, 0.16239454402308018, 0.5377856599357964, 0.19122836306858315, 0.5311081623885145, 0.18736269859615606, 0.1777278207279258, 0.1874604171511257, 0.549626618464637, 0.5851474444570453, 0.5619131811271175, 0.1944775351107222, 0.20217819841139495, 0.25050710728158443, 0.20182427625173605, 0.21857721905014005, 0.2196281030098075, 0.22800231960536532, 0.4590466757056685, 0.23519840593668317, 0.08807147690732486, 0.10739074682386163, 0.08325413799856018, 0.09054568344077474, 0.08185590707356227, 0.09588550612402391, 0.085594994422452, 0.09106169841672185, 0.0721584488546978]}, "mutation_prompt": null}
