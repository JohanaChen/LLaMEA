{"id": "38971991-c047-44de-9789-2e28955e1cb2", "solution": "import numpy as np\n\nclass HybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 40\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        \n    def pso_update(self):\n        inertia = 0.7\n        cognitive = 1.5\n        social = 1.5\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n    \n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return self.personal_best_positions[a] + 0.8 * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_points = np.random.rand(self.dim) < 0.9\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridPSO_ADE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) for dynamic exploration and exploitation in search space.", "configspace": "", "generation": 0, "fitness": 0.2975987383951646, "feedback": "The algorithm HybridPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": null, "metadata": {"aucs": [0.5623042137839156, 0.5665584718821706, 0.6529437642968855, 0.5899872741028571, 0.611216521908587, 0.5715136973949335, 0.5874113396892502, 0.5911107778973661, 0.607714156129562, 0.22756643602285254, 0.2546613783598798, 0.22668877786577446, 0.1879827225585653, 0.22310769477256265, 0.2282883670149527, 0.28890684066388905, 0.26817273316446844, 0.289149045162555, 0.18551288421829326, 0.12726164617280322, 0.1445068181379009, 0.16445400268526222, 0.13185483081543337, 0.11387157981111973, 0.11091420430493959, 0.12390651320839374, 0.1615305841765814, 0.11413704228292099, 0.09884732354030945, 0.11256699567312678, 0.11053637054251209, 0.09953965987286029, 0.11175659852189712, 0.11388929167838635, 0.10825844550869335, 0.1121883425730128, 0.988841529443811, 0.9780102816691209, 0.9628984599866056, 0.9776619619371147, 0.9844948586342133, 0.9579831918464005, 0.9743513507130503, 0.9801340866301972, 0.9843546929258676, 0.41405798928355175, 0.35294875336020426, 0.3239628214328011, 0.32061914172524497, 0.32610236807707016, 0.3535765114673165, 0.3274960911067937, 0.16199159777237693, 0.36676541087330106, 0.6799803011082126, 0.6121028009470808, 0.7523312068159209, 0.614882694818111, 0.6669789022853292, 0.703744604621488, 0.6587855449271096, 0.7550500192104761, 0.22281923724368413, 0.25009387963859064, 0.27119655137780696, 0.2566855903417077, 0.20567432895642046, 0.2328647596368516, 0.2818186844568227, 0.2529566307918365, 0.2542593863625485, 0.27900533196705646, 0.27671785450314335, 0.1829334346980217, 0.2888826430265351, 0.24950805879374838, 0.25147008359180534, 0.2866360818573158, 0.25463597134484683, 0.22138875386106927, 0.34457311149139846, 0.120582203613262, 0.18106356328111017, 0.15094891425398838, 0.23785585322515557, 0.14732910830751056, 0.2022128374705907, 0.12916435746044885, 0.09951336118433574, 0.1981317091920023, 0.3081433105631133, 0.24832847373038758, 0.27306357967167516, 0.21218521883673402, 0.24995323022121096, 0.26021379832258573, 0.37250694976964527, 0.24624398434451, 0.283091587989565, 0.026156720161991, 0.06822860806291997, 0.09109354882913956, 0.12410119770889272, 0.05335244733379185, 0.07570865414967354, 0.09760917266767688, 0.05013992396446432, 0.06261703616455838, 0.19891172102265864, 0.15288835026918568, 0.15558884958032504, 0.23843335202125737, 0.1824578697785354, 0.1820915974828088, 0.2075708279048537, 0.20544765353406924, 0.20385575865883032, 0.49059502359511753, 0.4638061718652091, 0.5046625025223077, 0.5470851619248613, 0.5287214913504179, 0.5574506798843273, 0.5034294984692151, 0.4702132116551504, 0.5251441360045712, 0.12020655197035723, 0.11362702386860257, 0.09592375345907189, 0.12052906290105603, 0.1403477983882263, 0.12782675767911933, 0.12240273470679386, 0.10257975196184466, 0.12243895001270755, 0.21824504818987678, 0.20856508639980698, 0.16738034598700813, 0.35278801213554056, 0.30411472949797613, 0.3014310405573123, 0.16620397311094015, 0.23146302741032254, 0.22124434480150046, 0.35458235211365485, 0.318586139782737, 0.34465275598476175, 0.32015719352599703, 0.2459947792182311, 0.33498419279956515, 0.33340575613330625, 0.3295186690715083, 0.3215583523019995, 0.26498728841269903, 0.2593819749049068, 0.2726504243059751, 0.28260491096467066, 0.28979610124838096, 0.2828394284031438, 0.2633631198623534, 0.23203654305871824, 0.2681847296115668, 0.21061999311309132, 0.20942630217673452, 0.2389189180387482, 0.1952014803495511, 0.1830906433581525, 0.23094447589863754, 0.1910412821508637, 0.1979101906573969, 0.21905303519742392, 0.1929122286430739, 0.19814922355201348, 0.17579636738495574, 0.20632563036514717, 0.19500138441893888, 0.19957427064606492, 0.19680034153926584, 0.25813014174069704, 0.2195903314666512, 0.15253248800876296, 0.17182553740020123, 0.7447542837298354, 0.19494675729043498, 0.18670860524135802, 0.5999044865445453, 0.6290345043866568, 0.7724318512399466, 0.6665576067900304, 0.6846434945625838, 0.1110275760046956, 0.20846854082541288, 0.16947753360996032, 0.16815988625770295, 0.7505042566332425, 0.2092060691540224, 0.20736715334536882, 0.20474867846868106, 0.16702414424711076, 0.19338923318025059, 0.20827609359933852, 0.17190205565586292, 0.1846113840519059, 0.18876637596448786, 0.18929709325277289, 0.1747748663854014, 0.18917941976235764, 0.08495478945511092, 0.11192841333978032, 0.07788652642153315, 0.08914987031596333, 0.08362297213174774, 0.09407859666628227, 0.09349660967420792, 0.07450175603340414, 0.08416093632483646]}, "mutation_prompt": null}
{"id": "e461ada4-e704-4cf7-8357-d616f684b893", "solution": "import numpy as np\n\nclass ChaosEnhancedHybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 40\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.chaos_factor = np.random.rand()\n\n    def chaotic_map(self):\n        # Logistic map for chaos generation\n        self.chaos_factor = 4 * self.chaos_factor * (1 - self.chaos_factor)\n        return self.chaos_factor\n\n    def pso_update(self):\n        inertia = 0.7\n        cognitive = 1.5\n        social = 1.5\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        f = 0.8 + 0.2 * self.chaotic_map()  # Dynamic mutation factor influenced by chaos\n        return self.personal_best_positions[a] + f * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_points = np.random.rand(self.dim) < 0.9\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "ChaosEnhancedHybridPSO_ADE", "description": "A hybrid metaheuristic integrating chaos-enhanced PSO with dynamic adaptive DE for improved diversity and convergence.", "configspace": "", "generation": 1, "fitness": 0.2821847203528141, "feedback": "The algorithm ChaosEnhancedHybridPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "38971991-c047-44de-9789-2e28955e1cb2", "metadata": {"aucs": [0.5498665460086609, 0.5849268536548062, 0.6140469943094478, 0.5420203601506348, 0.6358662044628105, 0.565456773996373, 0.5262169470481819, 0.5766643112702485, 0.6126371002314401, 0.20458862129552535, 0.2214070509079047, 0.19667561633475494, 0.21395479467718848, 0.2174707206354477, 0.1734991379595231, 0.21198021316162352, 0.18049500503017335, 0.2368535249046556, 0.1204048305078681, 0.11919926966546956, 0.12463042363431409, 0.12777777550532587, 0.13922399469195657, 0.13355979206477864, 0.13003781679213566, 0.12492849735359324, 0.14625884455167848, 0.1170397590667489, 0.1188214114444951, 0.09277617811024397, 0.10391837534914761, 0.08208660406837831, 0.1354827444838973, 0.11520034135336121, 0.12101470228160849, 0.10395634189128089, 0.98684369792147, 0.9700093278574612, 0.9589683555449215, 0.9704926123002445, 0.9845551420524301, 0.9707625761328302, 0.9554864208948661, 0.9705259662462458, 0.9837962832426201, 0.3156698743765709, 0.2986313244955794, 0.3156320868043454, 0.33864256929812364, 0.3613058593582932, 0.3325976657382471, 0.08684464631722189, 0.08390477634393412, 0.08287775686303955, 0.48974832425012993, 0.5546297545486074, 0.5196993140110686, 0.1879177059431879, 0.7085125635561778, 0.5009768307525508, 0.6114164614981803, 0.6401285616267951, 0.6831984848663113, 0.25035177950672616, 0.22964635970403302, 0.23824468672568166, 0.22375238053619495, 0.11925799984944929, 0.19836149484045495, 0.2111994821332157, 0.2269799972598484, 0.16812921693928617, 0.016141009999310896, 0.260795109105483, 0.18335686304833487, 0.245349460173364, 0.2184122571677941, 0.22074628910051597, 0.15786229414393693, 0.19913212193557828, 0.221996292574825, 0.12600069817111048, 0.1415058711182795, 0.11680351200043482, 0.2056123956339425, 0.1160679592597067, 0.123023752560526, 0.12442811957202626, 0.14260104991321332, 0.11224134219836412, 0.24649253360496415, 0.21265517180566784, 0.28069466329783654, 0.19135435082877073, 0.24729690225382017, 0.19499492680877206, 0.271678088937525, 0.25342158710762863, 0.23723673159878644, 0.03765261430195477, 0.03030136812192885, 0.032859835955919126, 0.10018303808141149, 0.09691604698234701, 0.0775386431408237, 0.07924001584820284, 0.0631281548316045, 0.05489577373953047, 0.18806823286256624, 0.1964524955510839, 0.1717360814255633, 0.1722230077739798, 0.15158691140792946, 0.17209616422413399, 0.17693833600236408, 0.19448356488345386, 0.15462435566110855, 0.49768985271683197, 0.4448919410120422, 0.49480987346934846, 0.45531483827260666, 0.47719687025028534, 0.48894570229497036, 0.4992483727406849, 0.42830105159953713, 0.4339018408509244, 0.10375875583969829, 0.11639941904384854, 0.11047858225131002, 0.13184690897389484, 0.10685623506766662, 0.12553613084313797, 0.12176590285280164, 0.12686346717840513, 0.11121426795039568, 0.37258944225142243, 0.2735731557346218, 0.24233679378267947, 0.2748038173000795, 0.22998964067573235, 0.30003148655607426, 0.2147395541342081, 0.2511790762104753, 0.2790102263290283, 0.3397534809826048, 0.32107282714376684, 0.27394382137335105, 0.3101530681198196, 0.2995057558005313, 0.32398713593447626, 0.3235147721201723, 0.3254554172823718, 0.3277306441717748, 0.2858958634882689, 0.2358624043810883, 0.2929894326966759, 0.26213415345475477, 0.2634502486847349, 0.2560458986776649, 0.24231877115048572, 0.22818757587575467, 0.2869940827593146, 0.2006820106182089, 0.19661636667345295, 0.19393635629495543, 0.18421774027150595, 0.2026384099866575, 0.23783672087622088, 0.22841405869265474, 0.21704766154415933, 0.19659029142396744, 0.18744168725366073, 0.20202794741236374, 0.20958502635354148, 0.284665466289164, 0.21235952523437684, 0.2160294007681618, 0.3072272947753729, 0.21255002529197076, 0.26108241966680323, 0.15240152992332512, 0.16439247859591144, 0.18457113875299547, 0.7852501319958343, 0.18659000849827578, 0.7177151878194756, 0.2043566429534679, 0.7572540086045728, 0.7191517822542343, 0.16700630434817254, 0.19825872530314315, 0.7390897848013807, 0.7392374501846064, 0.506676008044875, 0.20743409046192696, 0.16618459598183088, 0.20338561478998318, 0.6204932933625853, 0.18760961536368326, 0.19310882308208832, 0.2017527366874461, 0.18567344298918043, 0.1826756011127877, 0.19185433926114304, 0.19396651554830802, 0.17745100978944284, 0.19951326557400428, 0.07848847643226187, 0.09098259794003993, 0.09344441859879571, 0.08342690020441845, 0.0998552825564184, 0.09043153379953583, 0.09162897628295852, 0.07573439744635857, 0.08216710324641097]}, "mutation_prompt": null}
{"id": "f65c6666-a43b-42a8-8080-da2f04022282", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50  # Slightly increased population size\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9  # Adaptive inertia for PSO\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.5\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Decay inertia over time\n        self.inertia = max(0.4, self.inertia * 0.99)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return self.personal_best_positions[a] + 0.8 * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_points = np.random.rand(self.dim) < 0.85  # Adjusted crossover rate\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE", "description": "An enhanced hybrid metaheuristic that combines Particle Swarm Optimization (PSO) and Adaptive Differential Evolution (ADE) with adaptive learning rates and diversity enhancement for robust optimization.", "configspace": "", "generation": 2, "fitness": 0.3007305040182906, "feedback": "The algorithm EnhancedHybridPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "38971991-c047-44de-9789-2e28955e1cb2", "metadata": {"aucs": [0.5863645917850848, 0.5429570999348758, 0.5956715690983316, 0.5773844107651896, 0.5941987802055706, 0.6267811757884217, 0.583941056586242, 0.6143927740127005, 0.5704136181671998, 0.24949264525707826, 0.30349805421276077, 0.2883315607737168, 0.2845941051459637, 0.30547524180746255, 0.27624128783680235, 0.2901244645505663, 0.3047803650200115, 0.31052089529318516, 0.11129688589490283, 0.1275322233520706, 0.12411201721463017, 0.11076124318354341, 0.10265265853740735, 0.10285863767975756, 0.12268835703873626, 0.13711894222877985, 0.11496871978977774, 0.08409687316293946, 0.10902873104435706, 0.08552884680795836, 0.09659202995199612, 0.11333691761942333, 0.11049011803470388, 0.11110042620932359, 0.08426201983806259, 0.10540650805821628, 0.9890229401229205, 0.9619462269550427, 0.9899453072121657, 0.9775788922463517, 0.9548444550690173, 0.9709565143735207, 0.9812408762429784, 0.9809762808928425, 0.9724490478078575, 0.3360312511691862, 0.2996019554355335, 0.34885892539094887, 0.3707038600611924, 0.32570119841850975, 0.3824667207552096, 0.37481053028968436, 0.08677401210974767, 0.35132127535102353, 0.5871344051215679, 0.5676267585919932, 0.5915177824014151, 0.5523953114525024, 0.5904918985781028, 0.5750846522018971, 0.5740088660103391, 0.569961410494859, 0.5477013326285425, 0.3184795581766593, 0.27362759601055464, 0.18754686704542556, 0.27300340473589624, 0.11672121756272447, 0.1030699630111982, 0.1796815437265724, 0.3216395132348553, 0.193181258155124, 0.2152418901086527, 0.2279437561047365, 0.34028715062555326, 0.20021380957165102, 0.29226862824440536, 0.21780101518008055, 0.28228604991565176, 0.1890613533315978, 0.23757096813033662, 0.21362428775244668, 0.2692929697824048, 0.22308540275402766, 0.20455062468312712, 0.16514638190327147, 0.16403988209537934, 0.1697835670214317, 0.18049134637020037, 0.16384998105739212, 0.30108971690098185, 0.29869655048478594, 0.3214328863377205, 0.2030125770345006, 0.2703961143721574, 0.21072706326934565, 0.2875467559279361, 0.27961692973034025, 0.25793821246874227, 0.0270331989885495, 0.09048871580622164, 0.16063537717819965, 0.14535525411235883, 0.07651881249881332, 0.14182227244363, 0.054513837772948825, 0.11750443644516362, 0.07288333753735932, 0.1899809048965324, 0.1678830746002482, 0.16812062491569035, 0.1922696160828764, 0.20960470033086176, 0.1779590059869357, 0.19991088924604905, 0.23455211797410336, 0.2015238566331813, 0.48322069378262855, 0.48644542743402985, 0.4828842374323197, 0.5017409812760886, 0.5080079557606154, 0.5587047934912195, 0.490685422773975, 0.45671168439891907, 0.47169221007368145, 0.10890914732864987, 0.10604989427590372, 0.10570911332121669, 0.10612846420632527, 0.12083022251556375, 0.11117054706926865, 0.10542168374324845, 0.11370041683855414, 0.1026643347836882, 0.16848250977949597, 0.2261966039865757, 0.1510137462777975, 0.2585486123261894, 0.16808527341469381, 0.2778293371060664, 0.365814622845158, 0.15896967721978672, 0.1569525865171939, 0.3348215763160014, 0.31539304976883153, 0.3504022057601366, 0.3301322071485907, 0.346725283936243, 0.3554501772832567, 0.3375997737515183, 0.3472447279141124, 0.3310510005855837, 0.30269277196693967, 0.2694320863836035, 0.26313056517146993, 0.2855184591007478, 0.23058375884383442, 0.2864416576975054, 0.27214367006818807, 0.29386554920113095, 0.2306140996876045, 0.2004180613668719, 0.1879459047651847, 0.18749188122456806, 0.1855143467054372, 0.1959382597931666, 0.19033206150469217, 0.1897745653250993, 0.19845879292410473, 0.21124660352266866, 0.20225169825336942, 0.18380101933984205, 0.37026836177746736, 0.19340359362184822, 0.22088581720371825, 0.20522801459477102, 0.1972225747713665, 0.1764933360247416, 0.1947960749994977, 0.651706564680155, 0.19848969758594892, 0.15285145711545156, 0.7120242900764158, 0.1692861203158441, 0.6010739849618614, 0.6644872039140457, 0.6625489113629228, 0.7698319976178271, 0.19720884046950848, 0.2037653772570457, 0.5652925975754519, 0.696016653397879, 0.19817657162024183, 0.5829556662524922, 0.6566590825725885, 0.14198622297088337, 0.4786159162526551, 0.19845591573924026, 0.18834710603420157, 0.19163459608053535, 0.1880535180705184, 0.1770230494418138, 0.2123825793207702, 0.1822997399861147, 0.17996640756201754, 0.1995873142174558, 0.08157161254488643, 0.08925695643280906, 0.0780480796940185, 0.08560020746263075, 0.0859511084947513, 0.09247985351877264, 0.08030782024804428, 0.08155752822181295, 0.08234916505829692]}, "mutation_prompt": null}
{"id": "9eb70096-8c15-4226-982a-eb19d5cb983e", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADEv2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 60  # Increased population size for better diversity\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9  # Adaptive inertia for PSO\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.5\n        r1_array, r2_array = np.random.rand(2, self.pop_size, self.dim)\n        \n        self.velocities = self.inertia * self.velocities + \\\n                          cognitive * r1_array * (self.personal_best_positions - self.particles) + \\\n                          social * r2_array * (self.global_best_position - self.particles)\n        self.particles = np.clip(self.particles + self.velocities, self.lower_bound, self.upper_bound)\n\n        # Adaptive inertia decay\n        self.inertia = max(0.4, self.inertia * 0.98)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 1.0)  # Dynamic scaling factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_points = np.random.rand(self.dim) < 0.9  # Increased crossover rate\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADEv2", "description": "An adaptive hybrid metaheuristic combining Particle Swarm Optimization with Differential Evolution and diversity preservation mechanisms for enhanced global search.", "configspace": "", "generation": 3, "fitness": 0.29271283077714366, "feedback": "The algorithm EnhancedHybridPSO_ADEv2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "f65c6666-a43b-42a8-8080-da2f04022282", "metadata": {"aucs": [0.6503911280018244, 0.6582293974021268, 0.6483359966476945, 0.6865153313595498, 0.6514345254459966, 0.6788641376823135, 0.6715957393690467, 0.6688624421231545, 0.6821529175857618, 0.3621606062512045, 0.35355047260683337, 0.3887820032716309, 0.37865273744222294, 0.36621164963558617, 0.3711379476116349, 0.37520031343862237, 0.3768912406291012, 0.37693799907574044, 0.1315072167235095, 0.11787586885506884, 0.13522013401824784, 0.13558429265590655, 0.17930737418221976, 0.1188637196448411, 0.1528706998237812, 0.13742778141002032, 0.11664112553135453, 0.12253285730244823, 0.1286101106924743, 0.10475936109774209, 0.33836877166740364, 0.11985672190511942, 0.10265330907618098, 0.10200969675373295, 0.10813945379168421, 0.12588979865217076, 0.9758540012245368, 0.9752721728433259, 0.9776463001384745, 0.9700020278675713, 0.966373841152626, 0.9715295042599386, 0.9553727241709065, 0.9682940846584042, 0.9766040829721363, 0.43653704488107814, 0.414798024740344, 0.4012636975371502, 0.4218121881964122, 0.4161976145032166, 0.41172819727898236, 0.4294673734565464, 0.08579392958365772, 0.0867086924683308, 0.6259329351824225, 0.5487108742420131, 0.5674145883624703, 0.18374873912726197, 0.5505819406647117, 0.6296776776099801, 0.5841037680589419, 0.588742696137757, 0.6030380141636631, 0.1951485655825973, 0.1757054501043842, 0.1865160122916778, 0.1860915007136026, 0.10093666076087615, 0.16858949156598824, 0.19917530092360225, 0.18704068155566977, 0.18799398489724284, 0.04844291227334874, 0.20269437297252213, 0.20096202607351155, 0.18583733940752356, 0.18471731001471225, 0.198647542862477, 0.21170778769163812, 0.1513650184283306, 0.20444752619879558, 0.03442434243284298, 0.04960444824228838, 0.038006802770276016, 0.07395747066344083, 0.043590884333452595, 0.0334291790502903, 0.03803355810658793, 0.034066941061172695, 0.02224285249827951, 0.17102105996048833, 0.16388276940269386, 0.16211973362959742, 0.18588808865421225, 0.15776250552919313, 0.15341903938984847, 0.1900832183661888, 0.1969817931371045, 0.17821529185989415, 0.029956137743630817, 0.021863101276533015, 0.08761274247290929, 0.06252456982071797, 0.08516651350164373, 0.060734889923426794, 0.20126334948653324, 0.024176122445198733, 0.04820711178262771, 0.10790107602915722, 0.17121440526519982, 0.1379758969777506, 0.17610505422312994, 0.13199423694182244, 0.14533524018673016, 0.19394861887654313, 0.12284308500948649, 0.1147719841249093, 0.4774180111625096, 0.4629960718222277, 0.4834472566126913, 0.49395872044573463, 0.47333587008636346, 0.4705263797873711, 0.4833258650194523, 0.4695270014114059, 0.4868502952900905, 0.11333253662295772, 0.11611713917115307, 0.10776994119556893, 0.1357506455952855, 0.11695091732832041, 0.12776796668729717, 0.09555047913459147, 0.11411757522825516, 0.10913970263696338, 0.22850484401127424, 0.17758659590360004, 0.2053005111698697, 0.21179867804356922, 0.1831687287311714, 0.20012164162160195, 0.23647741162141178, 0.2508175790769581, 0.21421708440465814, 0.3046418653910361, 0.36668084177018667, 0.3965054375177437, 0.328987108349476, 0.2794644320348625, 0.38007883037305157, 0.40146791849857266, 0.37296659564417667, 0.3863842055835284, 0.2910323795945642, 0.25130578529412106, 0.283830218222051, 0.22427244613124986, 0.23015635433957482, 0.24345337760053232, 0.24550631758773056, 0.25260242359825524, 0.2972416404865913, 0.20272829909883627, 0.19893995228033878, 0.18900134575137495, 0.20767724331496185, 0.19604996779972428, 0.25568728554310083, 0.1844273012706541, 0.1815272575432767, 0.19990254595021362, 0.21332835874650724, 0.38681753973984856, 0.45734469180771997, 0.21119257340883768, 0.2198868770831014, 0.4408431159875592, 0.49507816875565536, 0.33545896665809927, 0.23396648015549004, 0.16521979315917956, 0.697703301473088, 0.7444381020395869, 0.16656030007656208, 0.19533614065747418, 0.6968039005053484, 0.6691398283999437, 0.16238232599110036, 0.7327951637064664, 0.5730016833900117, 0.20338064192075744, 0.5668471485050768, 0.2021340584172352, 0.20433080340532284, 0.6193203310571838, 0.20155107303210196, 0.2051139619795479, 0.5965656932430743, 0.19812774542942202, 0.1998330042981965, 0.17837026485576968, 0.22967723488131242, 0.19526787028783243, 0.19183885289004754, 0.18547036542277406, 0.19244184319924207, 0.1869614044625878, 0.08264046233635403, 0.08362048752416118, 0.08057922551038732, 0.0701428806015254, 0.06737794152286647, 0.07154557379528526, 0.08160082208908648, 0.0863336848185059, 0.07563071990254067]}, "mutation_prompt": null}
{"id": "e675fd91-c893-44dc-9362-34ea4906b881", "solution": "import numpy as np\n\nclass RefinedHybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50  # Population size\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9  # Initial inertia for PSO\n        self.diversity_threshold = 0.1  # Diversity threshold\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.5\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adaptive inertia based on diversity\n        diversity = np.mean(np.std(self.particles, axis=0))\n        if diversity < self.diversity_threshold:\n            self.inertia = min(0.9, self.inertia * 1.02)\n        else:\n            self.inertia = max(0.4, self.inertia * 0.99)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 0.9)  # Dynamic scaling factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_points = np.random.rand(self.dim) < np.random.uniform(0.7, 0.9)  # Dynamic crossover rate\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "RefinedHybridPSO_ADE", "description": "A refined hybrid algorithm blending PSO and ADE with adaptive parameters and intelligent diversity mechanisms for improved convergence.", "configspace": "", "generation": 4, "fitness": 0.27119213808553194, "feedback": "The algorithm RefinedHybridPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "f65c6666-a43b-42a8-8080-da2f04022282", "metadata": {"aucs": [0.5350014222623134, 0.5180430709309786, 0.5195218312032444, 0.5803190600172519, 0.5165486712140972, 0.5501683698089936, 0.5530428376010799, 0.5598650592845003, 0.5364030520251446, 0.26349843115094496, 0.28259636475326977, 0.23186827736868432, 0.2610778131551248, 0.26331943438409067, 0.2228431909594788, 0.25954366008843865, 0.2844279190161412, 0.2542011126243545, 0.10195673828318208, 0.12114550465209373, 0.13685203830407644, 0.1186219108360228, 0.11470123471037097, 0.1282577503893021, 0.13922681476961096, 0.1012491929911441, 0.16646364365437238, 0.08120732159646415, 0.07706004420275125, 0.10353675906293536, 0.1151234364325614, 0.0958918785054289, 0.1142621310307026, 0.10708262242676703, 0.09420497368174696, 0.10341138899007385, 0.9727068246396157, 0.9799368716891954, 0.9783394883269237, 0.9810500833667262, 0.9404029245718217, 0.9763624406164627, 0.9802301530973582, 0.9788699628282365, 0.9801719458750379, 0.05830088389832688, 9.999999999998899e-05, 0.057949121492950506, 0.3055534436935743, 0.3035979178222108, 0.30950190132087674, 0.331514920657466, 0.08434266580202454, 0.04951607611753228, 0.5147555385949902, 0.6404548167823614, 0.5458789705708313, 0.5926685537483001, 0.19732382953868988, 0.6355742595091285, 0.5698342874085986, 0.6086511441033555, 0.5846699017994164, 0.2524462671665467, 0.19352182233690407, 0.22177992164027616, 0.10532185345317813, 0.21180836853596852, 0.2287833491491733, 0.22386640131896074, 0.17276307202053287, 0.2752606170568128, 0.23997210857624973, 0.1571535751403913, 0.050607414519879046, 0.19993266094175877, 0.18172854453245268, 0.20280316241790053, 0.2563607642096304, 0.22735471924105077, 0.22135946088471592, 0.10440176010749425, 0.20189966648925384, 0.17699104877247496, 0.16541728456370042, 0.20869037741748608, 0.20119216211319035, 0.14206414870701178, 0.1374611682611787, 0.20074888702852145, 0.30006656703821544, 0.2521335849938622, 0.26933937206669456, 0.16792204557048207, 0.2697624931260282, 0.26288000593512395, 0.26011191594271743, 0.320256720597737, 0.3066988102441831, 0.14633995064140237, 0.032949691873298215, 0.05435074543035112, 0.09376659536606258, 0.0499985192718061, 0.08821206335104037, 0.03701690325122531, 0.07653145516809634, 0.06823596655839448, 0.17183826860473872, 0.18022686854629832, 0.1770981923102588, 0.17862661956795833, 0.17234187321281502, 0.1726647363938255, 0.17247117010992785, 0.19915978392337197, 0.19085045015632573, 0.4526785710372845, 0.47154668371097297, 0.44540540253894345, 0.4693676620438306, 0.46136085427148954, 0.5065851629304872, 0.45994970661528545, 0.4486383561652697, 0.4354294904713897, 0.13189695237004762, 0.10966759590848962, 0.12859961657924557, 0.0975566488721219, 0.2545440274824379, 0.11637040930784259, 0.10447937309463418, 0.1245822586690769, 0.1036726799915032, 0.23756020905867825, 0.2315837285683532, 0.1905386095256656, 0.18829230955091503, 0.23816583704166272, 0.18400121973145878, 0.26301691464764265, 0.23817123320629185, 0.20465478475743182, 0.32075584683185754, 0.3361033940016057, 0.3172828363345599, 0.29718957171145244, 0.30729172078820777, 0.317095811867501, 0.32147842763344114, 0.34941428440119215, 0.30762314785190015, 0.201942827129032, 0.27662272872391613, 0.2555026231556675, 0.2706744649547479, 0.24308002090240455, 0.26274734418927914, 0.27173190881227316, 0.27213084596632375, 0.2696222556455594, 0.24925123203794508, 0.21052545601104322, 0.19977181140584577, 0.19384460649761937, 0.19113358990043994, 0.23709953769006442, 0.2104196026600389, 0.19091159324247742, 0.23415569695199612, 0.2013186278358874, 0.29171869758630986, 0.18632553251034023, 0.21697487171941, 0.19245345356783283, 0.21160946124698854, 0.20174363205977597, 0.19440239504776768, 0.2186566371764599, 0.16402983976526553, 0.18538568464226246, 0.15352582770035428, 0.693399208228202, 0.20509092089067127, 0.18913310044139653, 0.16187899311823783, 0.18453408166743723, 0.6645262070658975, 0.15925758199853846, 0.6222523074826509, 0.19912080456227488, 0.6053923125813647, 0.20111941843434378, 0.16210704371648355, 0.563830208232202, 0.20707505246880475, 0.2062751648617288, 0.18695602507774478, 0.20472907720310152, 0.19589375647842455, 0.1908558725890407, 0.18235959388965206, 0.19542410357055706, 0.19809947744624012, 0.191789432429608, 0.18901670557933092, 0.08315015370878442, 0.08976974815006311, 0.094130018202358, 0.07891161043066786, 0.08180781872254628, 0.0826057400207384, 0.09072168157276317, 0.07911837375860109, 0.10096023949425015]}, "mutation_prompt": null}
{"id": "b9f9b7f1-9216-42e3-8f42-fd47f7d9a3ae", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 45  # Slightly reduced population size for efficiency\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.8  # Adjusted adaptive inertia for PSO\n\n    def pso_update(self):\n        cognitive = 1.4  # Adjusted cognitive component\n        social = 1.6  # Slightly increased social component\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Decay inertia over time\n        self.inertia = max(0.5, self.inertia * 0.98)  # Adjusted inertia decay rate\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return self.personal_best_positions[a] + 0.85 * (self.personal_best_positions[b] - self.personal_best_positions[c])  # Adjusted mutation factor\n    \n    def ade_crossover(self, parent, mutant):\n        cross_points = np.random.rand(self.dim) < 0.9  # Adjusted crossover rate for better exploration\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE", "description": "An adaptive hybrid algorithm combining Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) utilizing adaptive learning rates and dynamic inertia reduction for enhanced convergence on complex landscapes.", "configspace": "", "generation": 5, "fitness": 0.3597491056805226, "feedback": "The algorithm EnhancedHybridPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.24.", "error": "", "parent_id": "f65c6666-a43b-42a8-8080-da2f04022282", "metadata": {"aucs": [0.6908071603359465, 0.7085121756527675, 0.7099039822427651, 0.7330646824700624, 0.732872366008568, 0.7136950590905135, 0.7557053974498937, 0.6982260268859819, 0.7154519078529127, 0.47374204837969647, 0.4696237919883983, 0.44936974168064703, 0.48646359370995285, 0.4579311283467967, 0.40823423587236074, 0.4635978610874788, 0.45136926681202105, 0.431313265776769, 0.13929704596362424, 0.12587973296729593, 0.12884345630147587, 0.12294837326945673, 0.11318145771550192, 0.0696604577321348, 0.13952131245083188, 0.1552754197467091, 0.13226196971827975, 0.08830650000132811, 0.117910088401599, 0.09769149579982783, 0.11930922956505441, 0.1359241010745178, 0.10600608827147884, 0.12366372391739333, 0.10701608971980603, 0.15615494115291118, 0.9664492677707212, 0.9794716554750643, 0.9735195143766748, 0.9894393805940946, 0.9746117422044229, 0.9739820082086691, 0.978673415995577, 0.9834431106036492, 0.9826032498941134, 0.481796934241963, 0.4771946086547305, 0.4973589819011067, 0.5410295538878673, 0.2641830415381031, 0.5082446254448687, 0.08543897560664082, 0.38960244143856115, 0.5139355613797382, 0.7519928130229436, 0.21822013836986132, 0.7810010698615308, 0.7616712179213755, 0.6196714896635978, 0.7164850371512399, 0.6737441100561051, 0.7753185750886571, 0.7851961204650744, 0.4309713160771387, 0.5534415039767233, 0.4349515099246659, 0.5120047798194447, 0.12395433134968936, 0.48992972773837185, 0.48806491985978795, 0.4585716738649023, 0.39074857267475704, 0.48202961993755533, 0.462953293836156, 0.27258489760964155, 0.3967705079235304, 0.48852885153288117, 0.398293664716437, 0.42595345389476547, 0.5026053848297769, 0.12090150844986458, 0.05321830329374666, 0.2540378129760563, 0.37077439321303574, 0.415073468041806, 0.3832359441116443, 0.32320533885367353, 0.3739671911436474, 0.38294576121262636, 0.30638096637229384, 0.3431601396088291, 0.49621463082334616, 0.45171640350648534, 0.4581514943902105, 0.3892544451228418, 0.27496210566897705, 0.4209682362966197, 0.4994552237073755, 0.47485999679280066, 0.08917222286518844, 0.05983928191648136, 0.09870648691659734, 0.2394252092656367, 0.13055294754403113, 0.22936011275394252, 0.10158777701268196, 0.10211173758147418, 0.1662287657821493, 0.2805622394830247, 0.34886476973603, 0.3008833378485847, 0.3166309301906499, 0.3393903313653779, 0.3179993267466217, 0.32257962145743324, 0.3302856140070628, 0.32632673692303893, 0.6214500059973254, 0.6322956466371352, 0.5764583683614452, 0.6674073456281622, 0.6363625506009539, 0.6000743549280554, 0.6497185032830135, 0.5855892349105206, 0.6011924448927335, 0.10938614327019736, 0.12381100094222763, 0.0900253684370328, 0.13810547937282414, 0.1241158743980092, 0.10927088814850527, 0.12573768193896717, 0.13409058887693304, 0.10663403639100011, 0.16188668311006515, 0.29459126020924664, 0.28114568001442986, 0.23747917524542328, 0.14353260756969122, 0.2002420689384108, 0.15178378176791718, 0.40653417732048935, 0.3358229644829065, 0.4186402161902254, 0.4627686254137695, 0.43595085059910765, 0.4471498633914651, 0.4051297362840498, 0.38786215319736783, 0.4343714143340375, 0.43844856478760497, 0.40590206488951275, 0.366183974425745, 0.3598294112357969, 0.2941056015439142, 0.41226127203306495, 0.31643753113782724, 0.27652257572453265, 0.3354794917872602, 0.372199495960746, 0.4020521505232183, 0.20801864372238732, 0.21564500603398495, 0.2089957105353104, 0.22960620587120095, 0.21651779200644894, 0.2217441601857082, 0.2388457791686629, 0.203398220385693, 0.21960606481360556, 0.17781095973699446, 0.21447575095058213, 0.228078343687928, 0.22041026222888926, 0.19575608757723917, 0.2014505399588563, 0.19087220690981654, 0.20379949458366464, 0.2029234481509914, 0.8023929743260534, 0.1807030878570418, 0.1564589347605435, 0.20666176170741635, 0.2022589704147424, 0.15018934714924959, 0.6992670268242545, 0.1309263322649027, 0.1281532629793477, 0.1637502222170084, 0.7833639968260542, 0.7485779422747904, 0.15036834734896842, 0.7327857199389138, 0.124746648197687, 0.20435093651970782, 0.15434581850272167, 0.20509959659334487, 0.1855054742610337, 0.19461108155483575, 0.18534658694262152, 0.19766307452597698, 0.1899163914729045, 0.20248222200547317, 0.1768672294563587, 0.18777761706007745, 0.2143181329512981, 0.11608515751677428, 0.08156315394173197, 0.09765532657248954, 0.09627421846455397, 0.10112773294608579, 0.08650676521640022, 0.08524266371888156, 0.09705537177804358, 0.09305147548593817]}, "mutation_prompt": null}
{"id": "4b0eef5c-c76d-4fa6-bdce-eff435308875", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50  # Slightly increased population size for improved diversity\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))  # Reduced initial velocity range for finer control\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9  # Increased initial inertia for wider exploration\n\n    def pso_update(self):\n        cognitive = 1.5  # Balanced cognitive component for exploration and exploitation\n        social = 1.7  # Increased social component for stronger convergence to global best\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Decay inertia over time\n        self.inertia = max(0.4, self.inertia * 0.99)  # More gentle inertia decay\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return self.personal_best_positions[a] + 0.9 * (self.personal_best_positions[b] - self.personal_best_positions[c])  # Enhanced mutation factor for broader search space\n    \n    def ade_crossover(self, parent, mutant):\n        cross_points = np.random.rand(self.dim) < 0.85  # Reduced crossover rate to maintain structural integrity\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE", "description": "A hybrid algorithm blending Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) using stochastic adaptation and progressive reduction of inertia for robust convergence across diverse landscapes.", "configspace": "", "generation": 6, "fitness": 0.27777847798865174, "feedback": "The algorithm EnhancedHybridPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "b9f9b7f1-9216-42e3-8f42-fd47f7d9a3ae", "metadata": {"aucs": [0.580393612543068, 0.49744243059856696, 0.5214193806847744, 0.580241905061311, 0.5331376264827863, 0.5742726553447198, 0.6131599200909735, 0.5698203695779862, 0.6292812386553055, 0.25184480824536504, 0.19213994318823302, 0.2842593204595161, 0.21703059210850673, 0.2188329358951525, 0.23345389302398167, 0.19185793535952023, 0.21883834457425022, 0.2564257792559883, 0.172363844292875, 0.13595057243784758, 0.23183694908880448, 0.13856302818778854, 0.11573470634007421, 0.1318245635711237, 0.1149440902835811, 0.16493687082303354, 0.24900478534205273, 0.1196538956536688, 0.09512327487035765, 0.10815591823837822, 0.10775198529815844, 0.10202395990710611, 0.10558458838614004, 0.1083264468948435, 0.09627529722599848, 0.09034042979984769, 0.9877787448070392, 0.9685676096224229, 0.9902695377484906, 0.9819601056394276, 0.9654279557114461, 0.9643415200267731, 0.9813260024147772, 0.9818579384978694, 0.9756425557960958, 0.3393401226615945, 0.2913418658628558, 0.34295292250407383, 0.3320067567494239, 0.3614684663964858, 0.33863531381108425, 0.32447595904112736, 0.385605275457117, 0.3614138253633522, 0.5727882658337806, 0.59885806613394, 0.548942474917855, 0.1553483799426143, 0.587377207579884, 0.5812163091896055, 0.5571374142905887, 0.6330833498674165, 0.574521498973523, 0.24955531482678284, 0.2380738474586307, 0.18995412076966667, 0.25376251675221106, 0.34838593997437106, 0.19505953651634367, 0.23879417759809163, 0.3411584858720452, 0.08660352689829998, 0.24107811754330932, 0.02052007679611001, 0.22771172220744607, 0.20905299350155304, 0.2125470221289273, 0.24335847749224238, 0.32936092626781155, 0.1986125387332972, 0.1907148196827776, 0.2054223049414069, 0.04902513352224436, 0.19533164792204427, 9.999999999998899e-05, 0.1597910660767098, 0.18006027539579494, 0.14105775599823378, 0.18659930820570947, 0.15107876885024452, 0.24349287363656824, 0.25447587058278487, 0.22478075813457876, 0.1890992847125179, 0.1998906056201578, 0.21968310372297384, 0.3071858591963934, 0.2471182596895849, 0.21577521747339812, 0.03617204181167233, 0.019663461256962167, 0.05173845067708138, 0.09039167560310457, 0.0457077547497281, 0.03205153580709086, 0.048642491204092586, 0.04703494275978992, 0.08095751264709883, 0.18897242756414834, 0.18365288754386366, 0.16142991041777643, 0.17033194446885302, 0.18459676694561777, 0.17630950030201054, 0.18387949264619274, 0.04874859078126503, 0.19024644259739176, 0.4601298605468035, 0.4454498274271458, 0.4762236348371327, 0.48089552263403446, 0.48759786536279004, 0.49173202360422696, 0.4739579696627233, 0.45858608324299965, 0.49384131564323974, 0.11668610598073592, 0.11136472202978165, 0.1312111407588742, 0.09185648204811314, 0.10035568156662922, 0.11939210947866319, 0.11960634065217601, 0.08228301105881841, 0.09175651485168179, 0.3505141430738298, 0.21963364193767498, 0.14400575128199322, 0.2564757337330573, 0.18157120706601904, 0.20409698971764256, 0.17173853678153317, 0.19707491378729347, 0.18276244836930533, 0.34545577151454676, 0.28848980346960473, 0.3137828852204434, 0.3155703145601816, 0.26644206473445164, 0.3216431690170296, 0.35191458313535784, 0.31478555336574887, 0.3211580500271253, 0.22895777316763055, 0.2034208514566619, 0.21333371087915243, 0.22593555206573024, 0.2665238609384071, 0.22686349779071002, 0.28022862618502065, 0.26890498119017325, 0.26328352670716104, 0.20043242197442535, 0.18040276968404956, 0.23933648456417467, 0.19514947247933734, 0.21994185524848942, 0.20063669119589744, 0.20021927399616368, 0.18781125832677148, 0.21668912496597337, 0.196002302779961, 0.2030552435394567, 0.19333207647630224, 0.1946543876599165, 0.23032306609752484, 0.17813812271248686, 0.20171984230470086, 0.18088718108155255, 0.1971192391385339, 0.18385081976069673, 0.1804488760204449, 0.1525399402620936, 0.6488603681955531, 0.16562014652994006, 0.19599943807974995, 0.6260177240482279, 0.17809156054397013, 0.635959414647722, 0.6072623532915088, 0.1991049659514651, 0.5417098001433438, 0.19304425471914788, 0.19544625217046685, 0.516481122770663, 0.6220377002928164, 0.20672078441085184, 0.18702204050904714, 0.19340992428276726, 0.18946039984140084, 0.18902205794355587, 0.19368443409098268, 0.19605595389726815, 0.19143106172244928, 0.18821338165090762, 0.19006083219122583, 0.1754516592862777, 0.08529621789604713, 0.08462991342270876, 0.08751694075832184, 0.07790497867950474, 0.07293711385410084, 0.07691292589534082, 0.08106471389459935, 0.07706729730171524, 0.07973548268876929]}, "mutation_prompt": null}
{"id": "5148c83e-0dab-4a03-b9d8-3acfc6c705dc", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50  # Slightly increased population size for better diversity\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9  # Increased initial inertia for broader search\n\n    def pso_update(self):\n        cognitive = 1.5  # Slightly increased cognitive component\n        social = 1.7  # Slightly increased social component\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Decay inertia over time\n        self.inertia = max(0.4, self.inertia * 0.97)  # Adjusted inertia decay rate\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return self.personal_best_positions[a] + 0.8 * (self.personal_best_positions[b] - self.personal_best_positions[c])  # Adjusted mutation factor\n    \n    def ade_crossover(self, parent, mutant):\n        cross_points = np.random.rand(self.dim) < 0.85  # Adjusted crossover rate for better exploration\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE", "description": "An enhanced hybrid algorithm combining Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) employing diversity control and adaptive components to boost exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.3656176745898564, "feedback": "The algorithm EnhancedHybridPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.24.", "error": "", "parent_id": "b9f9b7f1-9216-42e3-8f42-fd47f7d9a3ae", "metadata": {"aucs": [0.7237787886292986, 0.690339847093145, 0.7214257042998095, 0.7561304129468371, 0.729568035043191, 0.7317053895132125, 0.728670679254686, 0.7254195761119431, 0.7353240394130385, 0.494727778405211, 0.4723593832619519, 0.4534039332772031, 0.4850598430628762, 0.4720237357862954, 0.49994848569395456, 0.5198660054800184, 0.44270065631386, 0.48532385347294227, 0.13188576704615984, 0.13354592628318673, 0.1478580348914882, 0.13826105402312172, 0.13967581501647874, 0.11993849245486543, 0.11225431722009271, 0.12832928576998892, 0.10734339062275089, 0.10303996369020352, 0.11834634707156022, 0.11586102976307533, 0.1143109030208056, 0.3402084754655875, 0.10397879419216749, 0.10250382554043025, 0.12636683754503342, 0.10811781617616834, 0.9823349773470216, 0.9529213444580523, 0.9899600486880568, 0.9727515207081209, 0.965713545844087, 0.9729753904203358, 0.9813056353907323, 0.9816870077598568, 0.9723298431411548, 0.4986418396959861, 0.4417196636192575, 0.5231197499304876, 0.5255060666363691, 0.5462855773679576, 0.5569038094009361, 0.5493243384143847, 0.08542463530195132, 0.5165946922299336, 0.7016001130818854, 0.7246563839276174, 0.7558508337840377, 0.15532330061583544, 0.7430700646929864, 0.7322861779291743, 0.7300958716961948, 0.7365837833336324, 0.7375540181344017, 0.5024729548487343, 0.37722158755450086, 0.4890476221699942, 0.35765682498410356, 0.5099860329221129, 0.3437284524530567, 0.36779302965427707, 0.4441624085631034, 0.3800980986010086, 0.4416355899883183, 0.048916397869825046, 0.49563882916216906, 0.4685215343679652, 0.5330190776767321, 0.4601132535227368, 0.5348215570858024, 0.32883242025133164, 0.4428425357084179, 0.08791266136523956, 0.39354125302761145, 0.3832325596572169, 0.4290303667364934, 0.3605557525166112, 0.04068277817545751, 0.39328406385166126, 0.25624958623026495, 0.3412522298574402, 0.4889671837499968, 0.4825127617246421, 0.5276788967930903, 0.44911281020870997, 0.4003399440660482, 0.4585071388298737, 0.4800184203552813, 0.49641435564847025, 0.44567009485652975, 0.0428250844573167, 9.999999999998899e-05, 0.024289082470096535, 0.20316535036980754, 0.058531059191007095, 0.3130319458549139, 0.09520896941850165, 0.09912105746380095, 0.1382279746904964, 0.24719453095166544, 0.3098857941775074, 0.2944402928332831, 0.3099493633290621, 0.35162975311747946, 0.3276062700138349, 0.2967361588179417, 0.3041299707155828, 0.2776144092442502, 0.6427223159084481, 0.6539026556643772, 0.6315697345012472, 0.6466439363327228, 0.6702204680171482, 0.6746768794314686, 0.6328740060505926, 0.6401986678729198, 0.6505522448308305, 0.1423183596321076, 0.10392050190028479, 0.13685222271910824, 0.10382736388314373, 0.0979414342326842, 0.12698069089754116, 0.10830266697519897, 0.1283943908056845, 0.09031520484778266, 0.17682929111519585, 0.16877729646592654, 0.16839706732143278, 0.16631441565518257, 0.18798763059818502, 0.21467269424147573, 0.2516134704524883, 0.2068340281072708, 0.2622256682919507, 0.43739981015680973, 0.35021022882413133, 0.4032697673048852, 0.3523417407927225, 0.4131149771621777, 0.3986811433409161, 0.45512210777483264, 0.4206033574105641, 0.43801963082838113, 0.23762565784721978, 0.2919307752378747, 0.3733876647234424, 0.32222879288055306, 0.28734939359471157, 0.2779398309661103, 0.35241134065664603, 0.3517795986353641, 0.2487022934124038, 0.23517114137398454, 0.21022104383532447, 0.1975054627881082, 0.1909436610696642, 0.2224350816756684, 0.20087144217892217, 0.22852215796870268, 0.2716115895783979, 0.20348744861806645, 0.22522952964698706, 0.2105727174295, 0.18848883537872818, 0.195852127375011, 0.2016677731965404, 0.18492907070033893, 0.22048448972140433, 0.17006892627634407, 0.22091110004441217, 0.17259831415094307, 0.20219554304747223, 0.15416140883657203, 0.7869795633654302, 0.16682573512714038, 0.6732659672314552, 0.15568938573456725, 0.1431974355640253, 0.8019703139964851, 0.6302835567777799, 0.7606771899562841, 0.7397170727869189, 0.20515664269843414, 0.20124844131991515, 0.16509781873045226, 0.6841220298417561, 0.20826021980815557, 0.1989014952676038, 0.19176925553658997, 0.18323593179278086, 0.22397995626497025, 0.18110500838439614, 0.18693406992234418, 0.19115722496326537, 0.20063127010765225, 0.21935597759350578, 0.18839350211422667, 0.10853704940005315, 0.09011704255545505, 0.09643116683652864, 0.09627002827755804, 0.09483056374438825, 0.08669297183338476, 0.09690914637997516, 0.08818990635850277, 0.09429189938930982]}, "mutation_prompt": null}
{"id": "6545bf86-11d2-46fe-9499-7eea47e98b85", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50  # Slightly increased population size for better diversity\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9  # Increased initial inertia for broader search\n\n    def pso_update(self):\n        cognitive = 1.5  # Slightly increased cognitive component\n        social = 1.7  # Slightly increased social component\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Decay inertia over time\n        self.inertia = max(0.4, self.inertia * 0.97)  # Adjusted inertia decay rate\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        return self.personal_best_positions[a] + 0.8 * (self.personal_best_positions[b] - self.personal_best_positions[c])  # Adjusted mutation factor\n    \n    def ade_crossover(self, parent, mutant):\n        cross_points = np.random.rand(self.dim) < 0.85  # Adjusted crossover rate for better exploration\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE", "description": "An enhanced hybrid algorithm combining Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) employing diversity control and adaptive components to boost exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5148c83e-0dab-4a03-b9d8-3acfc6c705dc", "metadata": {"aucs": [0.7237787886292986, 0.690339847093145, 0.7214257042998095, 0.7561304129468371, 0.729568035043191, 0.7317053895132125, 0.728670679254686, 0.7254195761119431, 0.7353240394130385, 0.494727778405211, 0.4723593832619519, 0.4534039332772031, 0.4850598430628762, 0.4720237357862954, 0.49994848569395456, 0.5198660054800184, 0.44270065631386, 0.48532385347294227, 0.13188576704615984, 0.13354592628318673, 0.1478580348914882, 0.13826105402312172, 0.13967581501647874, 0.11993849245486543, 0.11225431722009271, 0.12832928576998892, 0.10734339062275089, 0.10303996369020352, 0.11834634707156022, 0.11586102976307533, 0.1143109030208056, 0.3402084754655875, 0.10397879419216749, 0.10250382554043025, 0.12636683754503342, 0.10811781617616834, 0.9823349773470216, 0.9529213444580523, 0.9899600486880568, 0.9727515207081209, 0.965713545844087, 0.9729753904203358, 0.9813056353907323, 0.9816870077598568, 0.9723298431411548, 0.4986418396959861, 0.4417196636192575, 0.5231197499304876, 0.5255060666363691, 0.5462855773679576, 0.5569038094009361, 0.5493243384143847, 0.08542463530195132, 0.5165946922299336, 0.7016001130818854, 0.7246563839276174, 0.7558508337840377, 0.15532330061583544, 0.7430700646929864, 0.7322861779291743, 0.7300958716961948, 0.7365837833336324, 0.7375540181344017, 0.5024729548487343, 0.37722158755450086, 0.4890476221699942, 0.35765682498410356, 0.5099860329221129, 0.3437284524530567, 0.36779302965427707, 0.4441624085631034, 0.3800980986010086, 0.4416355899883183, 0.048916397869825046, 0.49563882916216906, 0.4685215343679652, 0.5330190776767321, 0.4601132535227368, 0.5348215570858024, 0.32883242025133164, 0.4428425357084179, 0.08791266136523956, 0.39354125302761145, 0.3832325596572169, 0.4290303667364934, 0.3605557525166112, 0.04068277817545751, 0.39328406385166126, 0.25624958623026495, 0.3412522298574402, 0.4889671837499968, 0.4825127617246421, 0.5276788967930903, 0.44911281020870997, 0.4003399440660482, 0.4585071388298737, 0.4800184203552813, 0.49641435564847025, 0.44567009485652975, 0.0428250844573167, 9.999999999998899e-05, 0.024289082470096535, 0.20316535036980754, 0.058531059191007095, 0.3130319458549139, 0.09520896941850165, 0.09912105746380095, 0.1382279746904964, 0.24719453095166544, 0.3098857941775074, 0.2944402928332831, 0.3099493633290621, 0.35162975311747946, 0.3276062700138349, 0.2967361588179417, 0.3041299707155828, 0.2776144092442502, 0.6427223159084481, 0.6539026556643772, 0.6315697345012472, 0.6466439363327228, 0.6702204680171482, 0.6746768794314686, 0.6328740060505926, 0.6401986678729198, 0.6505522448308305, 0.1423183596321076, 0.10392050190028479, 0.13685222271910824, 0.10382736388314373, 0.0979414342326842, 0.12698069089754116, 0.10830266697519897, 0.1283943908056845, 0.09031520484778266, 0.17682929111519585, 0.16877729646592654, 0.16839706732143278, 0.16631441565518257, 0.18798763059818502, 0.21467269424147573, 0.2516134704524883, 0.2068340281072708, 0.2622256682919507, 0.43739981015680973, 0.35021022882413133, 0.4032697673048852, 0.3523417407927225, 0.4131149771621777, 0.3986811433409161, 0.45512210777483264, 0.4206033574105641, 0.43801963082838113, 0.23762565784721978, 0.2919307752378747, 0.3733876647234424, 0.32222879288055306, 0.28734939359471157, 0.2779398309661103, 0.35241134065664603, 0.3517795986353641, 0.2487022934124038, 0.23517114137398454, 0.21022104383532447, 0.1975054627881082, 0.1909436610696642, 0.2224350816756684, 0.20087144217892217, 0.22852215796870268, 0.2716115895783979, 0.20348744861806645, 0.22522952964698706, 0.2105727174295, 0.18848883537872818, 0.195852127375011, 0.2016677731965404, 0.18492907070033893, 0.22048448972140433, 0.17006892627634407, 0.22091110004441217, 0.17259831415094307, 0.20219554304747223, 0.15416140883657203, 0.7869795633654302, 0.16682573512714038, 0.6732659672314552, 0.15568938573456725, 0.1431974355640253, 0.8019703139964851, 0.6302835567777799, 0.7606771899562841, 0.7397170727869189, 0.20515664269843414, 0.20124844131991515, 0.16509781873045226, 0.6841220298417561, 0.20826021980815557, 0.1989014952676038, 0.19176925553658997, 0.18323593179278086, 0.22397995626497025, 0.18110500838439614, 0.18693406992234418, 0.19115722496326537, 0.20063127010765225, 0.21935597759350578, 0.18839350211422667, 0.10853704940005315, 0.09011704255545505, 0.09643116683652864, 0.09627002827755804, 0.09483056374438825, 0.08669297183338476, 0.09690914637997516, 0.08818990635850277, 0.09429189938930982]}, "mutation_prompt": null}
{"id": "8000e19a-4665-4153-ad8b-201e3048a02b", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for adaptive exploration-exploitation balance\n        self.inertia = max(0.4, self.inertia * (1 - self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 1.0)  # Adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_points = np.random.rand(self.dim) < 0.85\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_Refined", "description": "A refined hybrid PSO with ADE that incorporates nonlinear inertia reduction and adaptive mutation for improved convergence in diverse optimization tasks.", "configspace": "", "generation": 9, "fitness": 0.39526080359078036, "feedback": "The algorithm EnhancedHybridPSO_ADE_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.26.", "error": "", "parent_id": "5148c83e-0dab-4a03-b9d8-3acfc6c705dc", "metadata": {"aucs": [0.8010547507641119, 0.7380135938929281, 0.7418335315450428, 0.7496070031746024, 0.7371536466438444, 0.7907263186127754, 0.7345948482193241, 0.7826344244345277, 0.778432031134262, 0.519186762986934, 0.526218739456231, 0.5654968964648173, 0.520061546765859, 0.5819624913389048, 0.5302056775061228, 0.5422571456527628, 0.5630377486415246, 0.5256102247982606, 0.16670322374512747, 0.13269348610642173, 0.14802114795269772, 0.11912564566248818, 0.12176248788729138, 0.10536289811162547, 0.15293272857885643, 0.06582916396230154, 0.12582182317652824, 0.09376151148763634, 0.0913800196877137, 0.13492788110876663, 0.10784356023831276, 0.10194008720902803, 0.09335984666032304, 0.10569795771080714, 0.11671901847121002, 0.1467032770333737, 0.962799185622544, 0.9792378376557456, 0.9814513901272457, 0.9472531879612027, 0.9792563553242187, 0.9724754030275482, 0.9784831044186852, 0.9743106888949745, 0.9816124038493098, 0.5906803889891656, 0.5763816357246812, 0.574036246628897, 0.6068286567257914, 0.5814709493470057, 0.5763728964294427, 0.5462755452468055, 0.46516630380893753, 0.5709292423946377, 0.8046073037129523, 0.7825882708495839, 0.7544110703116033, 0.7916105516027998, 0.11293042896055172, 0.804978766781645, 0.7891878261291894, 0.7912148993297884, 0.802471619030499, 0.47538366950143085, 0.5153278679591194, 0.4989828364932011, 0.38904089132185193, 0.5132857339448076, 0.11807069763368105, 0.506486486914656, 0.49308509280451607, 0.5427961998436226, 0.5571318405976842, 0.3805133940738259, 0.4076075092979796, 0.5940599893583125, 0.4950529568164035, 0.4804351848287488, 0.43319441991956387, 0.4161627692664901, 0.5426939329448542, 0.06563807231017948, 0.4323899803088973, 0.5423472200979846, 0.5548866291772061, 0.4032641879456509, 0.01908611592781395, 0.007643266343126398, 0.37476551341056674, 0.4500011083262009, 0.5326974381045275, 0.5368145564744768, 0.5048193696677405, 0.45568404878033975, 0.4905889178901278, 0.4645120757806912, 0.5039966339616445, 0.48833554434170134, 0.6009614269191865, 0.04505476762232974, 0.0700758907233876, 0.2691223667240129, 0.141115742961887, 0.3558470043710594, 0.18331087064782647, 0.18562506062191952, 0.2770988846723219, 0.08085805387512723, 0.35461708766663813, 0.3299025016500302, 0.3435777693229086, 0.3991595252470487, 0.39193816465952636, 0.345987185962351, 0.361470072752326, 0.2775020551094459, 0.32699557897487164, 0.7023170503478136, 0.6873904655600471, 0.727746694235899, 0.6771152360517263, 0.6990542666700355, 0.6928905799644811, 0.7000429263746715, 0.6847864560188136, 0.6720174132569892, 0.1340446976431574, 0.12615845283958116, 0.120014206001958, 0.10393210582084267, 0.15257740773520323, 0.13142791778791885, 0.1533559051472676, 0.16720772143010365, 0.12303778096087103, 0.6441763210730074, 0.24182339967648192, 0.17349103460433946, 0.18653507896059063, 0.2988184676500708, 0.33635628694948916, 0.5604497663292083, 0.2245940786408892, 0.19467059882279658, 0.4236358400225434, 0.30160355726082577, 0.4960064548290638, 0.32625949338826266, 0.4092783844285879, 0.4790826296684776, 0.44387748638294766, 0.5515170460095631, 0.4575577242795936, 0.3015946874434222, 0.27160990646450833, 0.33426260992296164, 0.4110837019524203, 0.24233967191469596, 0.2674989128630434, 0.30853143176185605, 0.4116867244652884, 0.28089963337048907, 0.19717918869262996, 0.20193288856964497, 0.19372805495451562, 0.28546065130381093, 0.22995525708765296, 0.2111763833743986, 0.19906176917355856, 0.21881430568012716, 0.21398182575688918, 0.23440394901180872, 0.2257299099670277, 0.20963587832821517, 0.5544119694107472, 0.21589668668357054, 0.2124602847745588, 0.2274394999422552, 0.23122464717234814, 0.18667748016969976, 0.18367986362216915, 0.18238744231710458, 0.1541846285651589, 0.8559216789629085, 0.16783683537282268, 0.15934600214958594, 0.7466452092557949, 0.19789222935118256, 0.8555162544172061, 0.12379673780937661, 0.16641680454653218, 0.16528837341994818, 0.7937028388449261, 0.2013662896731543, 0.1261803641312017, 0.7875407189836967, 0.16097848690111716, 0.7897954811637908, 0.19935575402477868, 0.1928707501629523, 0.23284386775266053, 0.18607280858614794, 0.18090774382374253, 0.18753519793348938, 0.20578303985215152, 0.1946647228870767, 0.1918242111936489, 0.08739782117572026, 0.08795080457850923, 0.09996320662386082, 0.1009192517883385, 0.09896624852656621, 0.08574878731732294, 0.103170778914083, 0.08329414279546965, 0.09036188658548017]}, "mutation_prompt": null}
{"id": "0f0b3e2a-2aeb-405b-8706-605a192fc59f", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_SOM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n        self.som_map = np.random.uniform(self.lower_bound, self.upper_bound, (10, self.dim))\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for adaptive exploration-exploitation balance\n        self.inertia = max(0.4, self.inertia * (1 - self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 1.0)  # Adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_points = np.random.rand(self.dim) < 0.85\n        return np.where(cross_points, mutant, parent)\n\n    def som_update(self):\n        # Self-Organizing Map Update for Diversity Preservation\n        for particle in self.particles:\n            bmu_index = np.argmin(np.linalg.norm(self.som_map - particle, axis=1))\n            self.som_map[bmu_index] += 0.1 * (particle - self.som_map[bmu_index])\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n            # SOM-based diversity management\n            self.som_update()\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_SOM", "description": "A hybrid PSO-ADE algorithm refined with adaptive inertia decay and self-organizing map-based diversity management for enhanced convergence across variable landscapes.", "configspace": "", "generation": 10, "fitness": 0.3933392738753069, "feedback": "The algorithm EnhancedHybridPSO_ADE_SOM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "8000e19a-4665-4153-ad8b-201e3048a02b", "metadata": {"aucs": [0.7718415682449622, 0.7512251636484388, 0.7521846998242956, 0.8014815597275351, 0.7875489001596512, 0.7884446987238546, 0.7796505164726213, 0.7739436706540317, 0.7514054718877409, 0.5661863434930808, 0.5533514351567241, 0.5308984770754843, 0.5264192838455861, 0.5350562202206515, 0.5150670243396308, 0.5331965355506728, 0.5393972506224997, 0.5822803684576956, 0.1488214169397919, 0.1499525838462048, 0.12189906805921713, 0.13770937264223726, 0.11783609742525025, 0.141903171456635, 0.10908970852068345, 0.13799034744329297, 0.10902755951910259, 0.1045045988860478, 0.10194291588403226, 0.13638724081022524, 0.11841253522160478, 0.11404730253823459, 0.14432150504714902, 0.12829589733539193, 0.0883769731712215, 0.1197686039550494, 0.980909077535149, 0.981475534531193, 0.971776498150657, 0.9768903748120924, 0.9817232358035705, 0.9859219426858391, 0.9812263872036738, 0.9815348472941674, 0.9741005060502295, 0.5528084005571107, 0.6178301771708979, 0.5183356491367599, 0.5744852006476995, 0.5922531852533819, 0.521976748391275, 0.48302402471813943, 0.5818540844178497, 0.57973431582514, 0.7440209669339228, 0.8148377753195222, 0.7773992825753783, 0.7759557102747706, 0.800404269502982, 0.6554657075440935, 0.775821900020691, 0.7866858295662802, 0.7819056671456109, 0.4905831032032649, 0.4620299430315443, 0.6007413076640159, 0.5845717423784955, 0.12326675887775929, 0.43406943451422675, 0.445520628788165, 0.4961004932871441, 0.35167754993657974, 0.5242319698810973, 0.49960501674728386, 0.050962034696778735, 0.4616475211238865, 0.4982777806439911, 0.5112522370455603, 0.45712044611532576, 0.35712100771914523, 0.5067867846534033, 0.3817952396347256, 0.3493039361106095, 0.46807821843529884, 0.05377525269655903, 0.40738037395969284, 0.4520013990887095, 0.4845860562860762, 0.4287764675577326, 0.47220345174623046, 0.5370973170081332, 0.5448701970165698, 0.5382668839208371, 0.455354661890521, 0.5359579166750419, 0.5185455604130429, 0.5717045019375465, 0.601612397011078, 0.5354393639893151, 0.16825950932136635, 0.18126703515399434, 0.2432084927779522, 0.06294260547222619, 0.0662864938330664, 0.10611613144194876, 0.2896542821767478, 0.12021359287174949, 0.15044385986848596, 0.38448037510557564, 0.38155558266647926, 0.33378510103553793, 0.38783204629546963, 0.38042329785965345, 0.3535388346821936, 0.3150874160264885, 0.24292921604363993, 0.30403141173018544, 0.703807117108982, 0.6705640648422357, 0.691710387023216, 0.20642004537738012, 0.6767220510237995, 0.6903446111772897, 0.6771267576406499, 0.7014816931450101, 0.6785015327374768, 0.1432315139515331, 0.14735314987411552, 0.13803833244238228, 0.12042566358138829, 0.10350314906983227, 0.09314793179095593, 0.12117920332305254, 0.10406146999935495, 0.1129724077045996, 0.15839240836661794, 0.21114346191272215, 0.2661191503197472, 0.25420314251234877, 0.18747611685694976, 0.1968833243653677, 0.23534587766555037, 0.23800858790266322, 0.2647820586119942, 0.47754172848035403, 0.42284652873550277, 0.3693428197583445, 0.32300755499251066, 0.4439668365427788, 0.3310658264707843, 0.4404008049225022, 0.4838460411667226, 0.4773078842620334, 0.3566390528796123, 0.34828667498186383, 0.3004230837637205, 0.2896582384579047, 0.4199254763138992, 0.38587625046714713, 0.25942853377469777, 0.3189060417408388, 0.37408247420019247, 0.22542426177515607, 0.20600479738521982, 0.2026238110579357, 0.2743694714348768, 0.2004452076531561, 0.2678614019016794, 0.2861907173720276, 0.21024596556072062, 0.22798970681960196, 0.5851014689987507, 0.20071202300392366, 0.18766264699912782, 0.19603364835962778, 0.19557683443576168, 0.2062965801406227, 0.22716713433416502, 0.20641088074290026, 0.19144282208564722, 0.841584282566595, 0.1648015031763984, 0.1540975021625005, 0.8363433969311327, 0.16808538275515073, 0.7571561459670719, 0.18386708364123183, 0.18114560689025994, 0.8045156298417697, 0.7849375468912902, 0.16602735991626982, 0.8244792121880808, 0.2082247262589203, 0.20790307674216746, 0.1684925393782476, 0.20722552043191012, 0.14872988462472636, 0.15993140722797328, 0.23193540681813607, 0.19453028369387837, 0.17998850029114566, 0.1855495170785022, 0.1854051443952821, 0.20025806636655652, 0.19387121368142302, 0.18516607369226445, 0.19141301142908218, 0.1008392581371228, 0.08074630909066605, 0.08812479347382907, 0.09455111918914572, 0.08308660370681575, 0.10485891062763208, 0.09811426684673263, 0.0953079669695922, 0.10233883576450065]}, "mutation_prompt": null}
{"id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_Refined_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for adaptive exploration-exploitation balance\n        self.inertia = max(0.4, self.inertia * (1 - self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.3 else 0.7  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_Refined_V2", "description": "An enhanced hybrid PSO and ADE approach with nonlinear inertia decay, adaptive mutation, and dynamic crossover rates for robust optimization performance across varied dimensions and landscapes.", "configspace": "", "generation": 11, "fitness": 0.40939479687898106, "feedback": "The algorithm EnhancedHybridPSO_ADE_Refined_V2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "8000e19a-4665-4153-ad8b-201e3048a02b", "metadata": {"aucs": [0.782158812369685, 0.7533082261150521, 0.7384119819166668, 0.7934216988113687, 0.789205114946439, 0.7763012885643048, 0.7662106667825233, 0.7674220909837, 0.7628363004853345, 0.5273419755693138, 0.5741829293255215, 0.5778471502106977, 0.544669982618842, 0.5410844546270063, 0.5140197037308727, 0.5696438104299872, 0.5638848060006586, 0.5654717880904201, 0.15090435093449128, 0.15739281793677273, 0.1680766296538433, 0.12878215067197596, 0.1213740669174902, 0.1322820801214355, 0.14715914666769203, 0.13205593411648042, 0.11679060533659047, 0.1240315216696174, 0.11457109393617171, 0.12809944960765474, 0.11379615191389836, 0.12442629287505114, 0.09518139960820304, 0.14250879318896004, 0.10379805681598153, 0.11957845947442236, 0.9705414083606295, 0.9815994245079414, 0.9779338056640141, 0.9820144963871777, 0.9713950242323618, 0.982023323481706, 0.9880844169675587, 0.971913773340313, 0.9812505124224168, 0.5543329173320866, 0.6056334699513299, 0.34691494036102855, 0.5752937538490503, 0.5755324313326117, 0.5549464132109034, 0.12368324998621405, 0.6075043537535649, 0.5735972776104117, 0.7751777109724401, 0.7742687937435973, 0.796558047610135, 0.19557433184274053, 0.7741910420175631, 0.793672360909434, 0.8066062135707031, 0.7728935089526011, 0.7207370193060343, 0.49245065139331723, 0.49516446790672897, 0.42370634264247453, 0.49961266059229503, 0.11414724666418441, 0.10926731503676768, 0.5766296662914958, 0.5332998116197083, 0.4816479226569178, 0.6207840656206967, 0.11933892616102149, 0.5803644714533842, 0.463613300812193, 0.5735226224906336, 0.47040300568265836, 0.3792630248580615, 0.5111459918977261, 0.49923876212934815, 0.3966306319868589, 0.4950262602442995, 0.48696586094851013, 0.26359377317388055, 0.37083896392387417, 0.43678741413953404, 0.37674572397485184, 0.5217753620848025, 0.4545197777337554, 0.5577991043267945, 0.4974787474897777, 0.48352511867527315, 0.5643268904562351, 0.6029726123484733, 0.47441776412729164, 0.5681797012967914, 0.5836864892614391, 0.5133233377690506, 0.2435338172730548, 0.05939528706547281, 0.3032559483940297, 0.19517287088202184, 0.1304904858915501, 0.2255254260590629, 0.17414579545022757, 0.12969462993543712, 0.0579419436456694, 0.3594147237484654, 0.393949615999898, 0.3847919418738125, 0.36294276963527605, 0.4056708000578485, 0.3437616865618084, 0.40191064944065946, 0.42240726894962255, 0.37813346508887913, 0.6776721753401416, 0.6731159552362476, 0.6885856737661296, 0.6565713386417068, 0.7056175141073824, 0.7057688465962513, 0.6494016155304487, 0.7142054049634787, 0.6713935753794591, 0.08549727808118679, 0.1625060343137389, 0.08567520525808758, 0.10217090093170733, 0.1316264486905413, 0.16591362987290936, 0.10381718410372487, 0.12232228363164921, 0.12638604483976268, 0.2452776197528651, 0.1647816509226614, 0.18452204426674568, 0.19420183861204865, 0.18412075985364784, 0.20718115345000765, 0.2543117852886525, 0.2228233046986856, 0.24847690845552162, 0.4920978521151176, 0.44940331285271795, 0.45447607730604855, 0.4892215232410403, 0.4596667629273514, 0.40440541018375953, 0.4545994250367529, 0.5002571780001615, 0.44580223859582846, 0.24854821499924895, 0.22815824127629802, 0.2981889110506195, 0.24857528214875824, 0.3295678855408647, 0.41725472386022155, 0.241723800518731, 0.25071409749410345, 0.40538673795717584, 0.23868024570794644, 0.2096082314598844, 0.24950422535088024, 0.22694224956559916, 0.22409706312073108, 0.19170437480536606, 0.2136770562088255, 0.2236440497897556, 0.27356816255125604, 0.23074185422295845, 0.18624658483315237, 0.1989006029899999, 0.22686525552119197, 0.18743293932260785, 0.5876866703919472, 0.20110854644867826, 0.21883846818487096, 0.21110937816190312, 0.8472137082079159, 0.1831969006837154, 0.1545391729566109, 0.8446749069810262, 0.16596408073634172, 0.8238168853419783, 0.8103538908584977, 0.7874494634452229, 0.8525489310409952, 0.7583560877840789, 0.8120344644274337, 0.16252118371669222, 0.8031622913853074, 0.16031878909928166, 0.7440563039046408, 0.8121267090341573, 0.15125025001533232, 0.15316710617822482, 0.1934841142288627, 0.2038259380283136, 0.19622301923445273, 0.1908113089603496, 0.2070632159143534, 0.18589153574676398, 0.1888553713852429, 0.22217495654391728, 0.21823304707218694, 0.08373246206463447, 0.08986509305654566, 0.0945828591590111, 0.09650424752710063, 0.09298778178198286, 0.08563276294426037, 0.09760853208354525, 0.09275204892656697, 0.08351017655103676]}, "mutation_prompt": null}
{"id": "37e81c89-0953-403e-a1dd-8076f22fe624", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_Refined_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for adaptive exploration-exploitation balance\n        self.inertia = max(0.4, self.inertia * (1 - self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.3 else 0.7  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_Refined_V2", "description": "An enhanced hybrid PSO and ADE approach with nonlinear inertia decay, adaptive mutation, and dynamic crossover rates for robust optimization performance across varied dimensions and landscapes.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.782158812369685, 0.7533082261150521, 0.7384119819166668, 0.7934216988113687, 0.789205114946439, 0.7763012885643048, 0.7662106667825233, 0.7674220909837, 0.7628363004853345, 0.5273419755693138, 0.5741829293255215, 0.5778471502106977, 0.544669982618842, 0.5410844546270063, 0.5140197037308727, 0.5696438104299872, 0.5638848060006586, 0.5654717880904201, 0.15090435093449128, 0.15739281793677273, 0.1680766296538433, 0.12878215067197596, 0.1213740669174902, 0.1322820801214355, 0.14715914666769203, 0.13205593411648042, 0.11679060533659047, 0.1240315216696174, 0.11457109393617171, 0.12809944960765474, 0.11379615191389836, 0.12442629287505114, 0.09518139960820304, 0.14250879318896004, 0.10379805681598153, 0.11957845947442236, 0.9705414083606295, 0.9815994245079414, 0.9779338056640141, 0.9820144963871777, 0.9713950242323618, 0.982023323481706, 0.9880844169675587, 0.971913773340313, 0.9812505124224168, 0.5543329173320866, 0.6056334699513299, 0.34691494036102855, 0.5752937538490503, 0.5755324313326117, 0.5549464132109034, 0.12368324998621405, 0.6075043537535649, 0.5735972776104117, 0.7751777109724401, 0.7742687937435973, 0.796558047610135, 0.19557433184274053, 0.7741910420175631, 0.793672360909434, 0.8066062135707031, 0.7728935089526011, 0.7207370193060343, 0.49245065139331723, 0.49516446790672897, 0.42370634264247453, 0.49961266059229503, 0.11414724666418441, 0.10926731503676768, 0.5766296662914958, 0.5332998116197083, 0.4816479226569178, 0.6207840656206967, 0.11933892616102149, 0.5803644714533842, 0.463613300812193, 0.5735226224906336, 0.47040300568265836, 0.3792630248580615, 0.5111459918977261, 0.49923876212934815, 0.3966306319868589, 0.4950262602442995, 0.48696586094851013, 0.26359377317388055, 0.37083896392387417, 0.43678741413953404, 0.37674572397485184, 0.5217753620848025, 0.4545197777337554, 0.5577991043267945, 0.4974787474897777, 0.48352511867527315, 0.5643268904562351, 0.6029726123484733, 0.47441776412729164, 0.5681797012967914, 0.5836864892614391, 0.5133233377690506, 0.2435338172730548, 0.05939528706547281, 0.3032559483940297, 0.19517287088202184, 0.1304904858915501, 0.2255254260590629, 0.17414579545022757, 0.12969462993543712, 0.0579419436456694, 0.3594147237484654, 0.393949615999898, 0.3847919418738125, 0.36294276963527605, 0.4056708000578485, 0.3437616865618084, 0.40191064944065946, 0.42240726894962255, 0.37813346508887913, 0.6776721753401416, 0.6731159552362476, 0.6885856737661296, 0.6565713386417068, 0.7056175141073824, 0.7057688465962513, 0.6494016155304487, 0.7142054049634787, 0.6713935753794591, 0.08549727808118679, 0.1625060343137389, 0.08567520525808758, 0.10217090093170733, 0.1316264486905413, 0.16591362987290936, 0.10381718410372487, 0.12232228363164921, 0.12638604483976268, 0.2452776197528651, 0.1647816509226614, 0.18452204426674568, 0.19420183861204865, 0.18412075985364784, 0.20718115345000765, 0.2543117852886525, 0.2228233046986856, 0.24847690845552162, 0.4920978521151176, 0.44940331285271795, 0.45447607730604855, 0.4892215232410403, 0.4596667629273514, 0.40440541018375953, 0.4545994250367529, 0.5002571780001615, 0.44580223859582846, 0.24854821499924895, 0.22815824127629802, 0.2981889110506195, 0.24857528214875824, 0.3295678855408647, 0.41725472386022155, 0.241723800518731, 0.25071409749410345, 0.40538673795717584, 0.23868024570794644, 0.2096082314598844, 0.24950422535088024, 0.22694224956559916, 0.22409706312073108, 0.19170437480536606, 0.2136770562088255, 0.2236440497897556, 0.27356816255125604, 0.23074185422295845, 0.18624658483315237, 0.1989006029899999, 0.22686525552119197, 0.18743293932260785, 0.5876866703919472, 0.20110854644867826, 0.21883846818487096, 0.21110937816190312, 0.8472137082079159, 0.1831969006837154, 0.1545391729566109, 0.8446749069810262, 0.16596408073634172, 0.8238168853419783, 0.8103538908584977, 0.7874494634452229, 0.8525489310409952, 0.7583560877840789, 0.8120344644274337, 0.16252118371669222, 0.8031622913853074, 0.16031878909928166, 0.7440563039046408, 0.8121267090341573, 0.15125025001533232, 0.15316710617822482, 0.1934841142288627, 0.2038259380283136, 0.19622301923445273, 0.1908113089603496, 0.2070632159143534, 0.18589153574676398, 0.1888553713852429, 0.22217495654391728, 0.21823304707218694, 0.08373246206463447, 0.08986509305654566, 0.0945828591590111, 0.09650424752710063, 0.09298778178198286, 0.08563276294426037, 0.09760853208354525, 0.09275204892656697, 0.08351017655103676]}, "mutation_prompt": null}
{"id": "a5f24049-e660-411e-a389-edbf8e1ca859", "solution": "import numpy as np\n\nclass RefinedHybridPSO_ADE_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Progressive inertia adjustment for better convergence\n        self.inertia = max(0.4, self.inertia - (0.5 / self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 1.0)  # Adaptive differential mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = np.random.uniform(0.6, 0.9)  # Stochastic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "RefinedHybridPSO_ADE_V3", "description": "A refined hybrid PSO and ADE approach with progressive inertia adjustment, adaptive differential mutation, and stochastic crossover for enhanced convergence and adaptability across diverse problem landscapes.", "configspace": "", "generation": 13, "fitness": 0.17990627489957023, "feedback": "The algorithm RefinedHybridPSO_ADE_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.353898814400177, 0.32790766990855236, 0.3264787040532988, 0.36942035483111835, 0.3548535486660286, 0.36755619394845707, 0.352419532725352, 0.3303938821556266, 0.3514584567422907, 0.07060164416934422, 0.08194131591721776, 0.07792000356852569, 0.04658168132933349, 0.048324884771862475, 0.04368047265276764, 0.05373949366656794, 0.05209478602907258, 0.06242623419344984, 0.07665493610336072, 0.09163519737777936, 0.07377990326233341, 0.08861951767568466, 0.0843579935559563, 0.07363020509949514, 0.09295907858842256, 0.08491569321840053, 0.07975144937790268, 0.07437413134270576, 0.07777722479726967, 0.0711637758972562, 0.06112864350808067, 0.07197689902154802, 0.062043546397687166, 0.07187606091375398, 0.07570668648713652, 0.077945279280899, 0.9755471607118296, 0.9808025726175111, 0.9763495232605436, 0.980713517511389, 0.9815388579175139, 0.9859794936022958, 0.9874331143936386, 0.9791637669389004, 0.9811208104932998, 0.1633793966481386, 0.16417846210752562, 0.16779034108716695, 0.13714206902277815, 0.14308439146296914, 0.1649994880951695, 0.172064778413059, 0.15862093047069614, 0.048470571839253185, 0.2249125998226229, 0.22436484281071667, 0.22870923487490447, 0.24163578409038433, 0.1914515711635315, 0.25916319766064233, 0.23195588264273526, 0.24560413329443886, 0.2209392090892729, 0.1063026698985663, 0.08353289643643835, 0.07131395701203724, 0.10574847068730064, 0.10207011673282995, 0.08169650254051175, 0.08608253596371473, 0.08683378111632956, 0.09396819392299038, 0.07845363082180323, 0.020399839798589725, 0.09897184772476264, 0.10834227118719941, 0.10564436959287982, 0.062070593355753045, 0.11181611950655501, 0.07939101613862198, 0.10474054352354456, 0.0036873448643783835, 0.014264785846977657, 0.015349682523206898, 0.00775749212511978, 9.999999999998899e-05, 0.013937664848624798, 9.999999999998899e-05, 0.0062776437849856315, 0.003424444307583707, 0.0945045243081768, 0.1233316561171347, 0.062119586824008755, 0.07213161230555165, 0.09543580250302353, 0.09673017862560396, 0.161366452055703, 0.12128827357064875, 0.11375870983389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055582128034373124, 0.06929548582709955, 0.04962973421292738, 0.05421601002486298, 0.07838801995048905, 0.0518070370675745, 0.08936305285964541, 0.07860252715141847, 0.053931975989650716, 0.3002627523535639, 0.30876813496430555, 0.3134628313825438, 0.32950738394945944, 0.31194632083985796, 0.32305091339480674, 0.2843179124004228, 0.3209629347367776, 0.31420089810382656, 0.08586749613323841, 0.08033060825004956, 0.0823145652368803, 0.08255503284105559, 0.0856979700198508, 0.08269986162291676, 0.07347053388799762, 0.08119400473658245, 0.08768287410935749, 0.15429296554493033, 0.15124024479992115, 0.14746751508763623, 0.1954374011664839, 0.16068474559011847, 0.16513108316536795, 0.15807607877966623, 0.15783192962055614, 0.1959430272988587, 0.22345414379431883, 0.22083178257458236, 0.22555628771508618, 0.2156797716692549, 0.22000681018757007, 0.2037507061342877, 0.23329561466313775, 0.2393457677448355, 0.216135148168763, 0.1915224489106505, 0.15343811368339544, 0.16547237970218776, 0.1555313972315867, 0.16220147702319154, 0.18491368177288903, 0.17535014931307846, 0.16180929403591782, 0.15038913592870373, 0.17899553960156955, 0.1807515253419376, 0.19429931342704587, 0.21365621625171738, 0.17012619288465614, 0.175147651845462, 0.1829758566040809, 0.17523226809750736, 0.16080832550908253, 0.1717117254818562, 0.2071609600945602, 0.1685999884257371, 0.1632561405217937, 0.17132922799166572, 0.17019074911494225, 0.17158455448342158, 0.16642181450895244, 0.16712980301939173, 0.16792858357646545, 0.15083595666921812, 0.1525880151481015, 0.4548189524340842, 0.1655849526467298, 0.26881731075275206, 0.18013935723023478, 0.28581117316111804, 0.35904557924686564, 0.1856100628876186, 0.3346869845413565, 0.2159465366947898, 0.30843181804774655, 0.16320495887089181, 0.19065533816140445, 0.28063479111602707, 0.1479262738966136, 0.3561416141537257, 0.19930640005488443, 0.2039529289132369, 0.17692427017768586, 0.18527025450821077, 0.17937543704984005, 0.19854625656649805, 0.18414046344936452, 0.18142551075340285, 0.1804527264748409, 0.06787799563080277, 0.07298333953297809, 0.06109014192062312, 0.07060035304441026, 0.07591465257227625, 0.07704538919037862, 0.0685364828307462, 0.06345479029741652, 0.06781896342724592]}, "mutation_prompt": null}
{"id": "00fcde70-069c-4f76-9321-239bc4ebea42", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_Refined_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6  # Slightly increased to enhance cognitive component\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.5, self.inertia * (1 - self.evaluations/self.budget)**2)  # Adjusted inertia floor\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 0.8)  # Narrower range for adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.4 else 0.75  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_Refined_V3", "description": "Enhanced hybrid strategy that dynamically adjusts exploration-exploitation balance with adaptive differential mutation and crossover in PSO and ADE synergy.", "configspace": "", "generation": 14, "fitness": 0.35638119481096814, "feedback": "The algorithm EnhancedHybridPSO_ADE_Refined_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.24.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.7598108857631491, 0.6982843506614564, 0.6890607142086262, 0.737621229149387, 0.7384199249312727, 0.7349864123503973, 0.7188569861156704, 0.7294548592872463, 0.6956760754009762, 0.3696291829564985, 0.3353996202443583, 0.4080329930178904, 0.3751968899549122, 0.42964304373739837, 0.4278234840643781, 0.4508941608322007, 0.4162109054182037, 0.41279019334690603, 0.10673350360651057, 0.3905408060762561, 0.13567828918004288, 0.13525290940649104, 0.11291373262914728, 0.14615809205295005, 0.1446757691205015, 0.13342165780195903, 0.12367037833421723, 0.122180533198046, 0.099213254964449, 0.1292209538249388, 0.12406872565178584, 0.12509897899638145, 0.12101605734226906, 0.10116447584557298, 0.1267669923142326, 0.11257620047209971, 0.9755671279011072, 0.9874537634085606, 0.9763870887632166, 0.981895867562762, 0.9805339962387364, 0.9820786701466664, 0.9880856643032578, 0.9805369065603602, 0.9812191020011329, 0.47980227637112816, 0.43713850771097207, 0.4562664431206582, 0.4860185902704155, 0.4475533954159757, 0.5443871026580069, 0.4318673641494656, 0.4694393463389567, 0.39218076891512366, 0.7641074920491994, 0.7745748990028043, 0.7126955797709718, 0.7991625368901385, 0.1959097048213997, 0.7610040392068503, 0.7301544902880585, 0.7842339212349709, 0.7482613915539174, 0.29234691823514825, 0.2999906829368222, 0.37698315761939916, 0.12248256933282975, 0.12108540203361406, 0.1142836114349044, 0.3983417006272615, 0.4579148597222067, 0.31736087797809764, 0.3191412209434811, 0.29865381161791216, 0.3899733192013607, 0.2766108366295371, 0.30126777609032307, 0.3583992121127265, 0.338386877577435, 0.3245402561362085, 0.4205810475938164, 0.3239741615180032, 0.24771879291855847, 0.40011991442698114, 0.092037924084722, 9.999999999998899e-05, 0.2935539442104991, 0.23628512675970403, 0.274723438143591, 0.37556860230628575, 0.372618358220835, 0.38546755848543, 0.2868441377446438, 0.33673943117511385, 0.4626431255867086, 0.3911587062257631, 0.47628781797543296, 0.40971935497396117, 0.5046505142503399, 0.19892260134237694, 0.05265363209586171, 0.06553120845802785, 0.05970552660814332, 0.20375749438794377, 0.15590018207830725, 0.14141115374119873, 0.15439246131287854, 0.11144656243782447, 0.2820327042346319, 0.30209515805737186, 0.2794465704578498, 0.287743328686795, 0.3376729156590125, 0.28510536470116354, 0.28768397840070414, 0.26402751932621615, 0.28093152311048797, 0.5851531031033739, 0.6182301912159529, 0.6088790134368438, 0.6334017354194954, 0.6354441123241378, 0.6462556526927082, 0.610688681756949, 0.5950891692401533, 0.5795296770934275, 0.1290226441344312, 0.08617454158954319, 0.10980647723630133, 0.14858604217913762, 0.12906888809395844, 0.2767228406750655, 0.11407530023293111, 0.1538711477787218, 0.12645288155089185, 0.22002618359351722, 0.4329658605311528, 0.19826606650892686, 0.4602551667723852, 0.235312917357554, 0.1691124413772368, 0.234981660385995, 0.1988290695527669, 0.16844864006800075, 0.3825752328239822, 0.45124141547898733, 0.3973206218445854, 0.382176457542867, 0.3838529462000583, 0.3925415012147734, 0.4009309343006857, 0.4267657632027886, 0.42608805762670143, 0.25118661935198316, 0.21218740085524646, 0.30987969559377115, 0.33208936812290424, 0.3515760922870853, 0.3272944921772235, 0.3190876033645391, 0.3431326727745889, 0.2952003148584901, 0.20830994019396298, 0.23517143164432852, 0.20717969410407977, 0.28309128406296513, 0.20132251171593507, 0.2222401458093265, 0.2237784581727552, 0.1890569412059666, 0.20822575193851367, 0.44206176398181884, 0.1995191091834697, 0.19728785001680194, 0.184466340380671, 0.19057734602357024, 0.23469178402346746, 0.2201753219355399, 0.196606677393945, 0.19471186972883392, 0.18027799687880974, 0.8116453220483634, 0.15396889350186627, 0.8447446987799614, 0.16650636872027103, 0.6684761487290434, 0.15922198468347848, 0.15712454570703194, 0.8151631896433131, 0.7297266095444852, 0.20426224913567836, 0.1633519231248889, 0.20846691672340212, 0.19856028858855024, 0.7323188529369516, 0.8272238555308999, 0.15131045413321476, 0.6615058359842791, 0.20736984433974637, 0.20508046558932413, 0.19067691241284535, 0.1989419804227407, 0.1897004447709436, 0.19140919822390579, 0.1878668057149353, 0.21742022386524906, 0.19309983097385874, 0.08343507523446991, 0.08168558089813505, 0.09150065972349475, 0.084527273927691, 0.08677070594806302, 0.08668239960035284, 0.10239332717609706, 0.09352670669887087, 0.1084688013750883]}, "mutation_prompt": null}
{"id": "8d3d8bc9-36b7-4a03-bcc8-0df5eed6d416", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_Refined_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for adaptive exploration-exploitation balance\n        self.inertia = max(0.4, self.inertia * (1 - self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.9)  # Probabilistic mutation factor scaling\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = np.random.uniform(0.6, 0.9)  # Improved crossover diversity\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_Refined_V3", "description": "An adaptive hybrid PSO and ADE with nonlinear inertia decay, probabilistic mutation scaling, and improved crossover diversity for robust optimization.", "configspace": "", "generation": 15, "fitness": 0.38806453629775145, "feedback": "The algorithm EnhancedHybridPSO_ADE_Refined_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.7824065756640888, 0.7658406096016998, 0.7660719762114381, 0.7594037213137561, 0.7919746571143363, 0.7893214191269338, 0.7810217097233123, 0.7867119157960667, 0.7862840213215974, 0.5642907634067795, 0.5543410138603699, 0.5499002256242882, 0.5675252879507089, 0.5704058886208501, 0.5108186765588899, 0.5539173587006285, 0.5262368928655528, 0.5397601814373258, 0.1359555831920879, 0.14025967708125264, 0.1438616409261303, 0.11640814896674345, 0.14669447133886881, 0.13731957586293742, 0.1135357224007083, 0.14053365128312, 0.13651799607102644, 0.10156720797782637, 0.13865802805914007, 0.1144600604898175, 0.09590704888565615, 0.09880709301347101, 0.14141709130025393, 0.13803871278401347, 0.09396110794845558, 0.1311733209442857, 0.9727940740222255, 0.9807777755671533, 0.9722724906919856, 0.9818645949511782, 0.9815220427493316, 0.9860806471174514, 0.9864797920105297, 0.9792199280912732, 0.9811939350766465, 0.6335596034219749, 0.5251503731096351, 0.058479226242605375, 0.6128386441975364, 0.5541775623210683, 0.5897082602693038, 0.6027640878016004, 0.44971212061374344, 0.049378105475451406, 0.7607634718311844, 0.7568247063997184, 0.7688879081236333, 0.8417665714326399, 0.19631885016011852, 0.7502426584934861, 0.8069860951736483, 0.813926097919012, 0.788251445110912, 0.45162114573304657, 0.3600464785592631, 0.5134426371361968, 0.4096342613141566, 0.12732262399526062, 0.09510431388444052, 0.600652710639711, 0.12191688834771708, 0.4876788293784059, 0.45387552008458265, 0.31481205241758015, 0.3515775600151716, 0.5094711216299441, 0.5919700251133426, 0.4192246222111883, 0.5207976920447296, 0.5385350212954307, 0.5140999897490055, 0.06510032260846621, 0.39678898016159236, 0.5123676131606654, 9.999999999998899e-05, 0.08398705211681501, 0.32710822053913935, 0.26893131131785797, 0.4285541376550065, 0.35898289506340164, 0.444682060441278, 0.4793340628163486, 0.348058038395596, 0.3514876965106086, 0.5120474775955679, 0.49720408771352675, 0.550956525919821, 0.22090560380793212, 0.5693081667726619, 0.04274306176532716, 0.06294068466352232, 0.05977179371266916, 0.10870951615115831, 0.43958609477705135, 0.32058310588178396, 0.09933211877183568, 0.09564293755314268, 0.20724863719622277, 0.25420710049331385, 0.32225567774598074, 0.2678806941776999, 0.28520410011758446, 0.2911320355571019, 0.3058872382397423, 0.29266050526298926, 0.3359288765971531, 0.07625861594254635, 0.6989745926106399, 0.639052979276739, 0.6588038014560899, 0.6954813819372023, 0.6809025546209124, 0.6713365117200245, 0.6597889679691196, 0.6778540470704413, 0.6710409090071421, 0.09787106922642108, 0.10803981949163333, 0.11144447334477314, 0.13198148876114535, 0.5355548989700578, 0.12376559477384907, 0.09596830588279193, 0.13536060026630092, 0.1436635672676304, 0.14875040971595066, 0.3568276582290584, 0.22137577237230566, 0.21280545567319054, 0.19218140677180207, 0.1721783509113275, 0.2449911572116703, 0.5432901091337774, 0.20956491754445206, 0.44308085629994, 0.2684072892392988, 0.3531713263184152, 0.5178547447427778, 0.38762019240368095, 0.4647381679675665, 0.4517433560638421, 0.5483139893367355, 0.47712480894836773, 0.4012234023854805, 0.2633087457925105, 0.31260438003865687, 0.18760255354976263, 0.39154451208852736, 0.4157363388338974, 0.30177394091079923, 0.3300963348771676, 0.25414697356068405, 0.2106445025841568, 0.4071876565044671, 0.19149739824050416, 0.25402583865636885, 0.2034692881256681, 0.20874603290621008, 0.21215129092702179, 0.2591585974055086, 0.2252042763243166, 0.2399679169684248, 0.21095145897618106, 0.19291786601054228, 0.2093895657569751, 0.21312295624522537, 0.22861122239045184, 0.2129542396863504, 0.2368046922389495, 0.5909159510592091, 0.8546494092946454, 0.15821171829300507, 0.1536819242992571, 0.8665329242768336, 0.16821688653568723, 0.8359055062145069, 0.1296715789797256, 0.12991358229588534, 0.8416107562365369, 0.6644010378283185, 0.16557874450908783, 0.7549203396426543, 0.8112223699546456, 0.20135831666024573, 0.7891198941181583, 0.7684380339677569, 0.20195538804315039, 0.1503701795785637, 0.19109255918489476, 0.21107495969426526, 0.19287614279238097, 0.18867260181893886, 0.23509743164115748, 0.20955999366309241, 0.20311257566507457, 0.17989027418442438, 0.2839855279856953, 0.10002021777912795, 0.09476919887022339, 0.10122872773414915, 0.12695581840177472, 0.10430785697974332, 0.09358483810933726, 0.09868189939068983, 0.08439556381427304, 0.10130095374355497]}, "mutation_prompt": null}
{"id": "18e607d4-c7f8-4a6a-997c-7fde3f8ac2a1", "solution": "import numpy as np\n\nclass RefinedStochasticHybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        stochastic_factor = np.random.uniform(0.9, 1.1)\n\n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = stochastic_factor * (self.inertia * self.velocities[i] + \n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \n                                 social * r2 * (self.global_best_position - self.particles[i]))\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.4, self.inertia * (1 - self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  \n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.7  \n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def inject_diversity(self):\n        for i in range(self.pop_size):\n            if np.random.rand() < 0.05:\n                self.particles[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n            \n            self.inject_diversity()\n\n        return self.global_best_position", "name": "RefinedStochasticHybridPSO_ADE", "description": "A refined hybrid PSO and ADE algorithm incorporating stochastic velocity adjustments, adaptive local search, and diversity maintenance for enhanced convergence and robustness.", "configspace": "", "generation": 16, "fitness": 0.32590852442530494, "feedback": "The algorithm RefinedStochasticHybridPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.6702152869193101, 0.6837489835723787, 0.6281004849562437, 0.7507343017274202, 0.6788133488104735, 0.6748324969364807, 0.5990815816211807, 0.7155842870561406, 0.6055840278489464, 0.3970732226969812, 0.2564655152785874, 0.3087408309806967, 0.2797746003552858, 0.24404846136654734, 0.23057346892704877, 0.3605638411074429, 0.38759573707183714, 0.32000295772777876, 0.15580971960439605, 0.1289311286127368, 0.12940891384924524, 0.11754738391002717, 0.1917679934334129, 0.12703102930242693, 0.12712890249895048, 0.1415223251528328, 0.15099221126527085, 0.11885937150922055, 0.13136425611513314, 0.12365461239526687, 0.11991368678192083, 0.14329519992493567, 0.10656089088637855, 0.1233676094520193, 0.1331827040828133, 0.12522386081273273, 0.9813658936305675, 0.9882413122765398, 0.9723288419530365, 0.9768042840277916, 0.962236402713718, 0.9732339658516531, 0.9764234475062233, 0.9503357731500056, 0.9804064423105456, 0.4739058239317937, 0.36446972995053895, 0.46117106784096873, 0.4262393184304164, 0.4075043142991276, 0.4568184490079267, 0.4089082909882237, 0.40160014702168234, 0.36694571103687057, 0.6378858347047751, 0.7484913664759569, 0.7367738755717032, 0.28085224585624624, 0.2609816380737737, 0.6607124292280304, 0.7765624207403803, 0.7641387368013488, 0.770353908383832, 0.30767526953391, 0.32331366379368887, 0.2984114334145982, 0.12465474203935534, 0.12186085651841116, 0.2174855267479241, 0.26767303545436305, 0.38892566972773046, 0.34278601479298965, 0.29643990990071334, 0.23472687367610556, 0.26277247543759596, 0.12798271508707582, 0.3406784887507275, 0.3129232401772669, 0.11770231254646601, 0.2458480453458578, 0.33174872799322497, 0.24642842440046797, 0.2117298315638253, 0.17263669819247174, 0.1716619212773478, 0.21833838614852596, 0.26005317458599797, 0.23628625602768372, 0.24552227010315475, 0.191068214513882, 0.33429088284211994, 0.36090733966742916, 0.4390112105082282, 0.293486334180593, 0.2630195972276609, 0.22595763027032567, 0.36497444229514286, 0.4665720288879053, 0.3823988198028908, 0.04881144710156948, 0.12362994045420417, 0.22052595930965746, 0.07598129635858464, 0.09448974825583123, 0.020989366497676243, 0.08022030415048098, 0.149744940068956, 0.0650509357471859, 0.21909066316220505, 0.20921974363035445, 0.29001624420452665, 0.23634610204618978, 0.28288988705076923, 0.2452684571878907, 0.21473419443901898, 0.22743933420259554, 0.23812755604352365, 0.5220247631386947, 0.5641961140641323, 0.6005521878782266, 0.529776968577079, 0.5640127298239133, 0.5238953250309226, 0.5521684128764104, 0.544243348633185, 0.5291850971628553, 0.1365573033589328, 0.08510442556505982, 0.13660234999701992, 0.11418496540453549, 0.11766686125447845, 0.12875376843203845, 0.09857138708339097, 0.10782546363089374, 0.0946971943148488, 0.22318240992533045, 0.314857394374642, 0.2106313074161752, 0.18488983102388734, 0.1751606051686253, 0.3601207895325971, 0.21174659079201863, 0.195937310913746, 0.22230277435101242, 0.3798275700734767, 0.38091512890431234, 0.35003326470498486, 0.38286727366886075, 0.33907161715842127, 0.3453480148345123, 0.39279182421356873, 0.3861579905747814, 0.36430109446483805, 0.28847786033913003, 0.21741607950485953, 0.2556212178562711, 0.2839825444530154, 0.2674253097873863, 0.3365020719877302, 0.25260486660945125, 0.2926333113481878, 0.2768698367707467, 0.19547972894637444, 0.20777356612903441, 0.18819289280547147, 0.2602265200620373, 0.2124108666846667, 0.19859903645027177, 0.19768203719873934, 0.20175287383714713, 0.19961796323060776, 0.22757766161184667, 0.1885248749505769, 0.20204894553079666, 0.18903235426003617, 0.19505532187733965, 0.201123116742858, 0.17939803516302544, 0.20171191381219655, 0.4510550310434943, 0.18517403092135787, 0.8362460892220939, 0.15379155337630745, 0.777170014108648, 0.16448401643237665, 0.19362839250795993, 0.12140643213529878, 0.15819484103212855, 0.8528660269856078, 0.6703797302105624, 0.206935284601235, 0.8109012722173506, 0.8122863933979985, 0.6670085832805406, 0.14931493441956778, 0.7451120298816494, 0.2073373125344654, 0.19690795410938133, 0.2008181014646735, 0.1988282526374997, 0.21660716679402037, 0.18407459274172955, 0.20197961017788457, 0.19640675464550061, 0.19872844522056943, 0.19801030066373837, 0.18997980795888858, 0.08556824609244973, 0.08682965704964285, 0.08470343467367436, 0.09582088518808884, 0.0827990565911676, 0.09040042653431679, 0.10447250034239763, 0.09062460950786533, 0.09817174923244698]}, "mutation_prompt": null}
{"id": "96f8c88b-3aea-49da-a07c-558668da8aa2", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_Refined_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = np.random.randint(40, 60)  # Variable population size\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n            # Random velocity reset for enhanced exploration\n            if np.random.rand() < 0.05:\n                self.velocities[i] = np.random.uniform(-0.5, 0.5, self.dim)\n\n        self.inertia = max(0.4, self.inertia * (1 - self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.3 else 0.7\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_Refined_V3", "description": "A refined hybrid PSO-ADE with nonlinear inertia decay, adaptive mutation, variable population size, and random velocity reset for enhanced global exploration and convergence.", "configspace": "", "generation": 17, "fitness": 0.37235100430036344, "feedback": "The algorithm EnhancedHybridPSO_ADE_Refined_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.24.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.7382323308489256, 0.7911607459363311, 0.6714741527597848, 0.7221221513200153, 0.7780223927605845, 0.7755771968580903, 0.7831241024510772, 0.7914108077494171, 0.7738614004511587, 0.3647687821479624, 0.510104173565348, 0.4388307667381769, 0.4180795796021525, 0.5269568254820982, 0.4317877294146085, 0.4149291134649754, 0.5338334681635958, 0.39262035348685, 0.13514062745026134, 0.14313426629922066, 0.16319513231466876, 0.1334190523761798, 0.14419765893658254, 0.15438907554175707, 0.12270753903817055, 0.17384701408173475, 0.14905821631895944, 0.08897186251585554, 0.13034915379421508, 0.13264516025481077, 0.11124347140380797, 0.15909024533897098, 0.10036964313682217, 0.11383749892313921, 0.11171138630786115, 0.10818097596955589, 0.9797829482960528, 0.9826130906411301, 0.9889239824852791, 0.9705388392320677, 0.9726220160579997, 0.9593580324288307, 0.9702472926813291, 0.9263104868165947, 0.9890097905232881, 0.524160238518208, 0.5248569805913359, 0.516785840435511, 0.5246516979451596, 0.491376009997611, 0.5040480706389145, 0.46713295272552136, 0.5585798420709698, 0.4727176835820448, 0.8213681226364631, 0.78096257381265, 0.7564932103896667, 0.7747787674579998, 0.8242654407396086, 0.785768782413479, 0.7793136873734818, 0.8334344221828254, 0.8333065227486138, 0.32788900028171875, 0.4622818141325844, 0.3915475084226281, 0.44278722689212924, 0.3734150333592795, 0.47214272474501817, 0.4295385445058416, 0.4653253725816576, 0.4301002324488713, 0.1180236922169976, 0.4049179856359857, 0.3955901742835636, 0.4591426196750025, 0.4807860963112296, 0.34383580864696184, 0.5825914933197245, 0.41678994542455816, 0.40024991544669597, 0.4085144661309339, 0.2785308907603943, 0.32956283043822254, 0.3923603483564384, 0.38284099265855975, 0.3974981846802865, 0.36870514612349614, 0.3446407092726872, 0.4012509946382885, 0.4360391068706848, 0.44477957006950264, 0.4473645746130084, 0.4295879518449677, 0.3868847385224201, 0.31110423448423474, 0.5081504615041064, 0.4117499290012191, 0.437316756470276, 0.15980530662429082, 0.12547082425164557, 0.05044877679753612, 0.07975839919375427, 0.22797732096889245, 0.16143215393293575, 0.22641279042937135, 0.07215788041046578, 0.2167818208313964, 0.34917347269049526, 0.2959809434103824, 0.29086301327928654, 0.318129041765002, 0.2527394301762894, 0.2867053218102813, 0.2972828039587142, 0.23100735666219485, 0.29897285609977153, 0.6114880162628629, 0.635798495727955, 0.6293198139156073, 0.5820710320398901, 0.6841111543292462, 0.5927514677873386, 0.5751095579310233, 0.629842649217596, 0.6353915297507042, 0.11001169169261427, 0.11263327763814723, 0.10141851729227125, 0.11757928017941999, 0.12697175200414512, 0.3626599830142929, 0.14903923826479293, 0.11263773886160267, 0.10908923482708155, 0.2497920516677271, 0.15819295330521166, 0.32905840065233816, 0.21914465871982036, 0.4562869026599419, 0.26614014607257674, 0.46626625439250935, 0.2889858377495379, 0.13415719054448205, 0.4243064537620954, 0.4300088442955269, 0.3891222577838266, 0.44129196338312715, 0.4011228612301181, 0.3724175978194152, 0.4142399171991893, 0.4129016523845642, 0.4021671549750727, 0.34441717926864335, 0.3979742082739116, 0.3534146756278356, 0.29743974872618806, 0.3266826879789484, 0.221217018603714, 0.1888033648661901, 0.2027305650199952, 0.3717610353750228, 0.22436329718591108, 0.21592313838732835, 0.24020092213737176, 0.22885548730394023, 0.20461872599222874, 0.24522656853944158, 0.21459979137170426, 0.24951463462930246, 0.21747313629549525, 0.22659943898166635, 0.21401136737924786, 0.193043525477803, 0.19030036571644482, 0.19979144343795974, 0.20840384317986038, 0.19827957545061037, 0.2055966466177327, 0.2027734226418345, 0.18638263147326883, 0.2025323828389699, 0.8464454679052873, 0.16221118911552368, 0.1861412698720214, 0.8256202832879771, 0.16341089216771798, 0.8617387386861939, 0.15805772461801348, 0.2097950422052327, 0.8138986257691951, 0.15543060143515164, 0.20652496595953707, 0.16483896463990955, 0.20461087502738018, 0.1539013063627972, 0.20114687036285095, 0.1267364240614246, 0.18694029829614, 0.1939814418723187, 0.2007046154420009, 0.1896583539335276, 0.19674851202333687, 0.19650055976717884, 0.1919039598625446, 0.22627353056205246, 0.21827396798831922, 0.09052676453689068, 0.08560957117970247, 0.09463221088115692, 0.08879896224536643, 0.0883166867030597, 0.11434229230123727, 0.09999249838533997, 0.09420966311311763, 0.1227074735075101]}, "mutation_prompt": null}
{"id": "2f8bb963-d171-4d81-9abd-b40eeee874bc", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_Refined_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = max(20, int(10 + np.sqrt(dim)))  # Adaptive population size\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for adaptive exploration-exploitation balance\n        self.inertia = max(0.3, self.inertia * (1 - np.sqrt(self.evaluations/self.budget)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 0.8)  # Adjusted adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.4 else 0.6  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_Refined_V3", "description": "An enhanced hybrid PSO and ADE approach with adaptive population size, nonlinear inertia decay, and dynamic crossover rates for efficient optimization performance across varied dimensions and landscapes.", "configspace": "", "generation": 18, "fitness": 0.33374623664774417, "feedback": "The algorithm EnhancedHybridPSO_ADE_Refined_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.29.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.906123117930287, 0.9173964621200442, 0.9213448842698784, 0.9098038332040836, 0.18942652316984088, 0.9129503578558021, 0.9147822987895995, 0.9066914141940294, 0.1750761196495716, 0.040214436011128285, 0.8155653225670058, 0.8099326345787509, 0.8327455046896305, 9.999999999998899e-05, 0.8096364642359801, 0.8470356410011907, 0.8151283418714863, 0.06088050697772285, 0.14413959915497654, 0.13435719147591918, 0.143381157104972, 0.15729521672667268, 0.12465241931590632, 0.11015084012616538, 0.10562257948696441, 0.08869869337073177, 0.12344271264065443, 0.10869095465491174, 0.11879519781581693, 0.13045020713722955, 0.12907173825209906, 0.1432314817501329, 0.1210502552443593, 0.11966264788249814, 0.10800949518256442, 0.1275848607263631, 0.9915541632756617, 0.9956580177949623, 0.988728856826171, 0.9887989093517878, 0.992097520815885, 0.9841188711590725, 0.9764214115409665, 0.9857799729657679, 0.9842201974753249, 0.1439203982010142, 0.8163158409338234, 0.8169547131571513, 0.15294306745054287, 0.8138157744710763, 0.8314262897226251, 9.999999999998899e-05, 0.7464844049481112, 9.999999999998899e-05, 0.4232214269149809, 0.22796853827268426, 0.3920710969320418, 0.19203520213876224, 0.21455652704439176, 0.21260922406937866, 0.17349679229058312, 0.9265013275439259, 0.11680620296849464, 0.6270892040732658, 0.7950894261564634, 0.6831231700845032, 0.13438462681649432, 0.10492840486652089, 9.999999999998899e-05, 0.5557528093634889, 0.5973844580129276, 0.7122467347671795, 0.6022857469498447, 0.621205737448772, 0.6864283950675063, 0.6124046135990009, 0.6255174875911615, 0.7219840382245626, 0.656810439041023, 0.6442940631327361, 0.5627820679802946, 9.999999999998899e-05, 0.13183021029669506, 9.999999999998899e-05, 0.2693832850934268, 0.010294390265449316, 0.019942463410882905, 0.07300818106229123, 0.38954548524823107, 0.06506569937968454, 0.5331570169545248, 0.06790659091681339, 0.15477620115125823, 0.02131955963921295, 0.23992848518004828, 0.08718549941316633, 0.2675333242575333, 0.2943412161475385, 0.11211253743148752, 0.05291743876388644, 0.08110685500183923, 0.27631212205126077, 0.10219180004998385, 0.08181339361089646, 0.18116408158310005, 0.10634856659638903, 0.16842905830414145, 0.11962216066919884, 0.4161842961814356, 9.999999999998899e-05, 0.37166852009847007, 0.356986045696457, 0.44268855523160433, 9.999999999998899e-05, 0.04771301739338374, 0.083359008137879, 0.0833416646659052, 0.6763791707570997, 0.7312711107129303, 0.6348484455903411, 0.20655167866427382, 0.6355401653566785, 0.6398730183678303, 0.8798535917959532, 0.6494015675543066, 0.7390687378859953, 0.06604458377159794, 0.10050550376294998, 0.11721028492183505, 0.09249038150847388, 0.13165921174851647, 0.14526722186253482, 0.11547106280214392, 0.14117036500339364, 0.13180712237036585, 0.17272333082707447, 0.20415296636366786, 0.26470115605304734, 0.5077204561088967, 0.6372030980778239, 0.15922314229959234, 0.2899268754738372, 0.208671800952291, 0.1543653704846003, 0.18285407074808668, 0.5301625887814807, 0.24305632037353975, 0.35745025658785623, 0.4225102234564748, 0.3734601012527894, 0.4653389483508811, 0.6263400574389704, 0.25516974390730707, 0.29941279425440637, 0.3706876057173969, 0.19303306994511105, 0.2635477058261194, 0.18903358632030376, 0.3496473280372817, 0.20396539261228208, 0.25141895699724015, 0.25086638925356297, 0.2234693998057533, 0.23124410261569694, 0.23062095002978888, 0.21737084698762277, 0.2148692273525269, 0.2017199282313381, 0.2032181196401286, 0.24775321006789874, 0.1887065396523102, 0.22807727740758688, 0.19682941981246171, 0.16891284329909084, 0.18405800959694119, 0.2063042073132545, 0.19832621640173087, 0.2077652226011244, 0.19023696456669126, 0.21213436003146646, 0.9395052304832872, 0.20043706815934292, 0.18699704846497056, 0.15325203976377544, 0.16932375961856505, 0.20085298624588854, 0.15875003790448294, 0.18729423601045236, 0.14893768371219285, 0.16841356583744205, 0.12834095863149209, 0.100549132985988, 0.21241052081661937, 0.12704379899370177, 0.8071913140305214, 0.16636579276980645, 0.19460561672313292, 0.1682328803013433, 0.22896550565323004, 0.21276394233574725, 0.2072658273780118, 0.22299730773139648, 0.22010475143270225, 0.2001066805454761, 0.20719318403072595, 0.2701839594395493, 0.22976715111435442, 0.08645019509192009, 0.10643785900373692, 0.0931772700928537, 0.1012538406975031, 0.10462152029251959, 0.09835877750156963, 0.10054586071499438, 0.11146221945343837, 0.09114017310747258]}, "mutation_prompt": null}
{"id": "5c0c6853-c543-4f1c-8c63-9d3f19b5dff2", "solution": "import numpy as np\n\nclass QuantumHybridPSO_ADE_Refined_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            # Quantum-inspired update\n            self.particles[i] = np.clip(self.particles[i] + np.sign(self.velocities[i]) * np.sqrt(abs(self.velocities[i])), self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for adaptive exploration-exploitation balance\n        self.inertia = max(0.4, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 1.0)  # Enhanced adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.3 else 0.7  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                # Stochastic boundary reflection\n                trial = np.where((trial < self.lower_bound) | (trial > self.upper_bound),\n                                 self.lower_bound + np.random.rand(self.dim) * (self.upper_bound - self.lower_bound), trial)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "QuantumHybridPSO_ADE_Refined_V3", "description": "A novel blend of PSO and ADE with quantum-inspired particle updates, adaptive mutation scaling, and stochastic boundary reflection for enhanced convergence robustness.", "configspace": "", "generation": 19, "fitness": 0.2589219146866011, "feedback": "The algorithm QuantumHybridPSO_ADE_Refined_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.48035828710040573, 0.41671220530580744, 0.45845013389863853, 0.43925682000985367, 0.470165923843631, 0.455302433262341, 0.4543570704267643, 0.4544391337878406, 0.46532121428339757, 0.15542192707100344, 0.13812218413264254, 0.15666308524422035, 0.1446471030750618, 0.13541324059776416, 0.13511846770214475, 0.12287415156617076, 0.11759028986764242, 0.12802441904166684, 0.11373290311793316, 0.12965884573034603, 0.09515814744797757, 0.11222322065890078, 0.11382165488012086, 0.11064746574066453, 0.11717547796909988, 0.12141939249840306, 0.09460237013706096, 0.09091449273850594, 0.10815789471622739, 0.09432115083482806, 0.09210843737673036, 0.08745776003849881, 0.09682685191090701, 0.09171457004187944, 0.09642045056066906, 0.0848550077308442, 0.9605708744188757, 0.9623208277015465, 0.9425600021761826, 0.9519633368906973, 0.9715385949584104, 0.9606846083096823, 0.9698626660734212, 0.9624769030590218, 0.9705624955157905, 0.26223455897847636, 0.2982068740147761, 0.28369488813805355, 0.27692702804788927, 0.26275788705996717, 0.2542341490219947, 0.26670792551425926, 0.2669920484972568, 0.2729827125959232, 0.4511145557127967, 0.5989997432540313, 0.468958951530248, 0.3235344427051199, 0.42589180335697585, 0.4544309966867812, 0.5705153637294743, 0.42115257392667926, 0.5762003578406336, 0.1843314285436758, 0.2146081833080533, 0.18920288976197375, 0.17639421078111062, 0.14817694886755794, 0.15022707067517183, 0.18083262016277601, 0.168686878508434, 0.21801729718946194, 0.1591413069310441, 0.13182001197268933, 0.19230046733119932, 0.1533730669632989, 0.18067077951965438, 0.15479015984249223, 0.16535057897394012, 0.16237893320856178, 0.17725422960533233, 0.07728163160227064, 0.0743471521953436, 0.06243664958576722, 0.11724290335883603, 0.08689240934928344, 0.06627418117298, 0.08317576126271287, 0.06694480421940174, 0.05600926493163094, 0.2017179041611874, 0.1656032346926246, 0.2198228925975113, 0.20221753606045456, 0.16520163819007172, 0.187501348202887, 0.21622744769661817, 0.2066534982684589, 0.18805651807767454, 9.999999999998899e-05, 0.004206953307171357, 0.018592726373428903, 9.999999999998899e-05, 0.018097575699512203, 0.002368415952685443, 0.012803851421859691, 0.024815509884441367, 0.022560216991338033, 0.10068537388834209, 0.10437511818454714, 0.11263779968206056, 0.11915389337617088, 0.14075583506017886, 0.1341097513057553, 0.12878219752268538, 0.14090098422233244, 0.13020305303798962, 0.42797673133023395, 0.40941739294098767, 0.4190195878454286, 0.4286520171445585, 0.428573207936255, 0.43169618139135124, 0.41036099506895807, 0.4192885454587504, 0.42364852466732805, 0.09767483233054297, 0.10574168898074421, 0.12226848405107371, 0.09442004993345143, 0.08800975440650616, 0.11626313701050606, 0.10063046212855375, 0.10075063926092609, 0.10171642512597756, 0.1989980711304694, 0.18022037338633268, 0.15247252863192684, 0.15721751450749888, 0.2313837574458254, 0.18287827437649562, 0.16525983017929724, 0.22272532175459214, 0.24784914180174933, 0.2910640397153017, 0.28791784222004957, 0.28575156740527585, 0.2740463407133584, 0.2771026895076357, 0.28334929888448734, 0.2776167915319776, 0.2849539971201326, 0.2842377677436021, 0.21796516782233843, 0.23393362194639844, 0.22003499486455114, 0.2307427402192831, 0.21723070742323325, 0.21867898098941174, 0.21287920348164469, 0.20814464844083913, 0.22688632254235586, 0.21431631899924042, 0.23911230193081134, 0.2206382008781267, 0.21088914231830647, 0.21112027573912862, 0.20201464731261198, 0.2028334455779245, 0.2229537372994821, 0.2189414109409613, 0.20985682093361957, 0.19350167852256073, 0.19143052145039863, 0.18531850141166617, 0.18494260088040992, 0.18027336379250314, 0.20592506394614307, 0.19190302695051342, 0.1999664310917928, 0.6375968668747793, 0.7037799216566494, 0.15341653585996318, 0.6782122609502538, 0.19566129288286815, 0.6722427529790398, 0.7085275560856965, 0.15946000343367472, 0.680205996844987, 0.5550002940992407, 0.2026963006490501, 0.628450787386724, 0.6166090472249454, 0.5853231328886749, 0.6135669028906163, 0.5766947553857757, 0.5215941682918198, 0.5277807152425524, 0.2065241082233814, 0.19880497143798492, 0.1821860995808049, 0.18517007504915117, 0.18506300357465588, 0.18836147477198517, 0.18085891848512003, 0.1795874414006905, 0.1815911573677521, 0.09075901475195425, 0.08213640114938137, 0.08656179628020055, 0.11161925140900508, 0.07628159371469978, 0.08760580534452178, 0.0980268455258656, 0.0898744583222808, 0.08176973377048857]}, "mutation_prompt": null}
{"id": "8deceb4b-233e-454f-873c-f3ca00ac92eb", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_Refined_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n        self.velocity_clip_min = -0.3\n        self.velocity_clip_max = 0.3\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.velocities[i] = np.clip(self.velocities[i], self.velocity_clip_min, self.velocity_clip_max)\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for adaptive exploration-exploitation balance\n        self.inertia = max(0.4, self.inertia * (1 - self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9) * (1 - self.evaluations/self.budget)  # Adaptive mutation decay\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.3 else 0.7\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_Refined_V3", "description": "An enhanced hybrid PSO and ADE with stochastic velocity clipping, adaptive mutation decay, and self-adjusting particle dimensions for versatile optimization across complex landscapes.", "configspace": "", "generation": 20, "fitness": 0.38468214870207434, "feedback": "The algorithm EnhancedHybridPSO_ADE_Refined_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.8029666871398353, 0.8005064603596892, 0.8008375341366816, 0.7534568953611547, 0.7784743506739806, 0.7504570905543717, 0.7820409841235111, 0.7814990864251742, 0.7794196469525703, 0.6132671905735259, 0.5599327330822528, 0.5584330581076452, 0.5863721773644381, 0.5478371805123585, 0.5987609781586727, 0.5842205300143417, 0.5897415559918193, 0.5681943796890037, 0.15156928231914735, 0.16808622773252113, 0.10553319811879447, 0.13393479739621184, 0.1072683184992762, 0.1499379515863919, 0.12436088755576002, 0.13648000586585318, 0.14428579734590186, 0.11242321188800852, 0.10898575552565437, 0.11772683575479004, 0.13112857591708327, 0.12714732212599134, 0.10075404713241509, 0.12049505549637729, 0.1258546637671163, 0.0983536162380062, 0.898258140553884, 0.7973561788165636, 0.7545769668851087, 0.7946768374477069, 0.7504318909742305, 0.8030720245372456, 0.8218505760068382, 0.787100597044007, 0.8035579364519915, 0.6416871750086387, 0.6064520871454097, 0.5446956446726064, 0.6140260354216455, 0.5841711291672614, 0.6161428931502482, 0.6134445631783894, 0.5827716192456047, 0.5998931051825247, 0.8193516014487994, 0.8009033579211821, 0.7820632832764041, 0.2688264164168995, 0.7183228679598205, 0.8011251357833324, 0.22120115483997638, 0.22758970987353144, 0.7719862280572661, 0.5938965590926093, 0.12140748953162961, 0.47170658423047407, 0.45798124127614004, 0.5351514035081928, 0.5764538712772435, 0.58900700399851, 0.4480232480893487, 0.5009431257814764, 0.49523571072241224, 0.4523777262915263, 0.47136175089111565, 0.12689686632820973, 0.4856747908945638, 0.12556259760428456, 0.6312082629844313, 0.6217256338413137, 0.5911489901334845, 0.19416269207208448, 0.336114820620976, 0.06083042716699405, 0.3870021168262441, 0.15056712566912211, 0.08544886487381664, 0.3898311566769407, 0.09145575539061102, 0.18669000387454737, 0.35315538671634394, 0.43673340731638577, 0.39644853310883177, 0.2035059282950188, 0.15806858661985712, 0.34470242036530563, 0.36482833884202015, 0.42973010236658904, 0.2555659622154641, 0.09507103666955297, 0.08772578274261977, 0.11937030644160807, 0.26968480185447485, 0.2858131548759626, 0.16568767381081784, 0.13118720511217563, 0.08123600749398652, 0.2504491028782737, 0.29209687562086584, 0.28387686184611527, 0.27394671537495674, 0.29830728729669787, 0.30039209590248095, 0.19186488720037564, 0.29328114581397136, 0.2963761018608616, 0.3532621388329631, 0.7522482846261072, 0.7206092848573942, 0.7276573320335036, 0.729146249846844, 0.649938407021483, 0.6818200172930804, 0.7391774343061246, 0.7093225338679914, 0.7172838885471777, 0.12276577004235134, 0.10936405021761075, 0.14391941679772335, 0.14598327122872212, 0.13221417708305017, 0.14744745406588045, 0.17507271622787324, 0.13098167915330017, 0.10245741126143659, 0.2567680955157575, 0.23847759100368682, 0.17501297379881198, 0.2812947531630794, 0.20729265031530653, 0.151370755214696, 0.3031798961150436, 0.20064838916042294, 0.33758269613989955, 0.2696361200763763, 0.4407276690128914, 0.340178928162566, 0.5428010258401864, 0.26733384569310714, 0.533991225824885, 0.45163651906135427, 0.4508238784680171, 0.45654172011099103, 0.20687329834759904, 0.2566996153304085, 0.3765852036503342, 0.21866265632795745, 0.2667998930740546, 0.2640208447238057, 0.24123337402508227, 0.3042332213653077, 0.20490973533514134, 0.23480132904576168, 0.21878682687608464, 0.21898950927331384, 0.25580042276605197, 0.2140179199806177, 0.23852916141980396, 0.2606522953401079, 0.20467622380849104, 0.2442006887673227, 0.19959456164786538, 0.1834369792282109, 0.20792025538683856, 0.18980902610749373, 0.20065814491838863, 0.17339433286368566, 0.22709213707218712, 0.18739808920997392, 0.17133158416773409, 0.1651712697375327, 0.18175495119698504, 0.17722009388177828, 0.8109052392589516, 0.1937482522648245, 0.8255336719389381, 0.6106670535601202, 0.8380090484931227, 0.8544644349535295, 0.7702834934307176, 0.7041248569917755, 0.7740989925511035, 0.8131245315340351, 0.7158676698231414, 0.706946281925535, 0.4561791312816562, 0.6042057297946531, 0.7386493288862614, 0.20275436683587866, 0.20745532475503914, 0.17748503849939223, 0.20901990283974503, 0.2287078713034656, 0.18827467106810514, 0.1795705050124614, 0.1805903118074197, 0.1988658557902192, 0.1032361465319438, 0.10110297252125988, 0.10156796732047113, 0.12472519636368218, 0.13152536878842747, 0.09984931116131412, 0.09351298462438917, 0.09038832368605765, 0.10142963494343626]}, "mutation_prompt": null}
{"id": "b8223fe4-78f1-4922-beed-df257362379f", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_Refined_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n            if np.random.rand() < 0.01:  # Random reset to maintain diversity\n                self.particles[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        self.inertia = max(0.4, self.inertia * (1 - self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.3 else 0.7\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_Refined_V3", "description": "An enhanced hybrid PSO and ADE approach with nonlinear inertia decay, adaptive mutation, random reset strategy, and dynamic crossover rates for robust optimization performance across varied dimensions and landscapes.", "configspace": "", "generation": 21, "fitness": 0.3914270198086315, "feedback": "The algorithm EnhancedHybridPSO_ADE_Refined_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.719319073505469, 0.7752728811974959, 0.7389479405807694, 0.753609620175245, 0.7403394453346475, 0.7874909607613934, 0.7780591330857193, 0.7355120692113033, 0.7413782890140046, 0.5464422524519057, 0.43339926668586637, 0.5202152143016545, 0.5428427342231961, 0.5137205885523549, 0.5228395564737609, 0.5310010301688808, 0.483472978728931, 0.43835743338658517, 0.14715539917683074, 0.1250521979674839, 0.12243582883915638, 0.1341727938281163, 0.14451272902432333, 0.220871366884976, 0.1381382237886808, 0.11698859780574256, 0.13616687154954965, 0.13085535199252385, 0.10837603755967717, 0.10643578905711037, 0.12921105964224566, 0.10961625012654208, 0.1073597729134812, 0.1138662795433174, 0.1255683610931141, 0.11219984306376773, 0.9815256103205333, 0.9787940975343753, 0.9720473140187875, 0.9733856697693887, 0.9551816806928924, 0.9806306521915269, 0.9820074792449299, 0.9815139533863609, 0.9638359353597035, 0.5068154250239987, 0.5106649945134669, 0.5816983843672553, 0.47054576354039623, 0.5295071941131875, 0.6080417844323581, 0.5604365552007112, 0.49763838770394564, 0.5507668159151389, 0.72380586690505, 0.7935532107713308, 0.788178054620771, 0.8171759196886363, 0.7848360730003854, 0.8107290999383909, 0.7612127766904551, 0.7641789169442607, 0.800135324355123, 0.45067065493997827, 0.4782083888331601, 0.30141073319819445, 0.4070109976317825, 0.3938192715674559, 0.4630286127695763, 0.350622324657363, 0.49051421990762545, 0.4185223777908865, 0.12253790646650708, 0.5265029717481462, 0.34829864686751266, 0.4439725834379191, 0.574623938098171, 0.5651956539084045, 0.3166843817370777, 0.36912708576904074, 0.45710680960312844, 0.06382906688728329, 0.06261038027782884, 0.40782575723008707, 0.21626598624417237, 0.34406312861029487, 0.5239070868861873, 0.29627384998774153, 0.4576674858291022, 0.5068193127734171, 0.43392390788893864, 0.5544128445916511, 0.4950868107770079, 0.4470076098663752, 0.47129757404118067, 0.43409623490331917, 0.42953897202294833, 0.47718423723678416, 0.3614849145275164, 0.055532129938967945, 0.04066494744846294, 0.004294410928406656, 0.17705561240390066, 0.3004804757191527, 0.06914497495057803, 0.2154767944676893, 0.23201004945888637, 0.08173470089116108, 0.3111604566045695, 0.3596694180065525, 0.34755989998188386, 0.37764014703245896, 0.38489713983907337, 0.377170480241364, 0.26943278480093735, 0.3011882842416903, 0.3308004392358822, 0.6108576727332188, 0.671305963120843, 0.6932398720454498, 0.6601257372777628, 0.7025937117823631, 0.6831199492689268, 0.6490670919945669, 0.6957344086787891, 0.6282046082629509, 0.10325534432994643, 0.13835875194291225, 0.13937255915019509, 0.1235491850312419, 0.12398789552394651, 0.11785736783055578, 0.1416723480065175, 0.13314999554973417, 0.12633502756355286, 0.2301964197937234, 0.15669700918671114, 0.6193377081951916, 0.24131834631741833, 0.18643833948104538, 0.2845809884104207, 0.2789125891046581, 0.19439909432056734, 0.3094185402523909, 0.4252375940091583, 0.3071013647574625, 0.3816908588616301, 0.3717204768056721, 0.3909905848240731, 0.47354944758664486, 0.41457091852125394, 0.4534120275367044, 0.5057542474762985, 0.31009339222363685, 0.3315958483109941, 0.3435081114319033, 0.3744734552599027, 0.3554697488709284, 0.32055144789519185, 0.2875374041019535, 0.3549935360628247, 0.3582301775864143, 0.22353311635039697, 0.2139875364991437, 0.2328647674222699, 0.20203416953986042, 0.19794122412138482, 0.2223352881673999, 0.19224644000929725, 0.2016999212300742, 0.23066452133810522, 0.39358950717503594, 0.23111264521501373, 0.21475362129027187, 0.5207813778870158, 0.23248003409179896, 0.2292134481600645, 0.4676298250228542, 0.20247172150331605, 0.19948427573505978, 0.8323663107898014, 0.20642030796219202, 0.15367033920518203, 0.8843926869448568, 0.21053713135329766, 0.1602377878370277, 0.1723313058780439, 0.19162550313843196, 0.8516585392829301, 0.1263324677515888, 0.20948365934202007, 0.7623947898102248, 0.7988799266315816, 0.2064044187755275, 0.8135497543805089, 0.19822228844134981, 0.20877214324082582, 0.8191349797209595, 0.17892183197938305, 0.20152552270038027, 0.2129280707455551, 0.21828530423939274, 0.1846628994344588, 0.18293123866393712, 0.2080587013142463, 0.2039251717822178, 0.23450843859922643, 0.08201824400703006, 0.09701725544813966, 0.09505754808607214, 0.14176652812570323, 0.16593374519075987, 0.0971044583713585, 0.09602842887899243, 0.09588749583436929, 0.07575841909564152]}, "mutation_prompt": null}
{"id": "97e89279-9a65-404b-8cb8-730165c3d3e7", "solution": "import numpy as np\n\nclass RefinedHybridPSO_ADE_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Stochastic inertia decay for adaptive exploration-exploitation balance\n        self.inertia *= (0.9 * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.5 * (1 + np.random.uniform(0, 1))  # Improved mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8  # Fixed crossover rate for stability\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "RefinedHybridPSO_ADE_V3", "description": "A refined hybrid PSO and ADE algorithm with adaptive inertia decay, stochastic ranking, and improved mutation strategy for robust optimization across diverse black-box functions.", "configspace": "", "generation": 22, "fitness": 0.3372022108896586, "feedback": "The algorithm RefinedHybridPSO_ADE_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.8609032289163099, 0.8267450889819588, 0.8339032531379439, 0.8649374089774613, 0.8700618071988221, 0.8457539169564463, 0.8711704104452604, 0.8645569536789626, 0.8357842043424449, 0.6783266118428615, 0.7433752186153257, 0.6955399271824567, 0.6879247740545937, 0.7313144179618998, 0.6857941572463, 0.6893090534506638, 0.7460713743312206, 0.6891389184220573, 0.14891087378647594, 0.12244546427072234, 0.150739395391552, 0.12619618328034377, 0.13232089156575333, 0.11087679380317461, 0.17461924538756135, 0.1215153047121974, 0.13681044611884574, 0.09912912568232646, 0.13241541855270111, 0.13294030170234672, 0.09684949719412783, 0.14838507235343623, 0.13193192449803937, 0.12123097486307266, 0.10869457705310503, 0.09095644601896602, 0.9613684774845384, 0.977488715720292, 0.9814520856786975, 0.9576074091208852, 0.9745126827933873, 0.9720765877769127, 0.9721547241840729, 0.9709991649453791, 0.9814598263059969, 0.649057310212577, 0.05561549112921671, 0.058639269144240114, 0.6382627459974268, 0.5773802108933768, 0.3872395760034102, 0.6264070767880431, 0.5565410484999382, 0.0857609357610134, 0.7822545901608647, 0.8249106402447823, 0.8357573793038241, 0.8655544389011072, 0.20639988766637263, 0.26426215061270286, 0.1648909507243338, 0.8203128322617597, 0.8435637380645945, 0.5005132968389135, 0.5089680040305475, 0.45407661896692564, 0.12995441235235217, 0.23114285595479422, 0.11988575862264184, 0.43895302220519417, 0.3892487253368878, 0.39392166674420237, 0.48996984847852876, 0.12609238826593971, 0.12139849260538338, 0.5268529776897253, 0.12207495364301635, 0.31212322458783814, 0.2828060682106567, 0.2178376717476227, 0.1107433279767398, 0.08493932514456459, 0.06615514168264258, 0.1586790288811888, 0.03598214755564988, 0.013729316733736008, 0.09667050687969858, 0.09820844569568854, 0.20022489944907984, 0.07161052192237127, 0.25152477690944264, 0.3704677063302695, 0.30951660155576866, 0.07649507806840006, 0.28189453091999306, 0.07090436308235804, 0.22984834813110666, 0.06432134702658254, 0.3036543948261532, 0.0499054740868764, 0.0402368718895012, 0.11938611604115246, 0.14142616666126284, 0.10074324757434583, 0.0924337066173514, 0.11974281065091874, 0.09775557608638852, 0.07248783234302425, 0.16004061038200057, 0.2077605996827424, 0.24944119526337027, 0.2525762189137918, 0.15472546183883185, 0.3306763564066829, 0.24591061603412145, 0.05580854176463779, 0.19935678323766615, 0.5787509258690782, 0.6129752752719915, 0.7534100388827393, 0.6120072913193411, 0.5896129602050981, 0.5851362722225976, 0.6197398752299099, 0.625211607350088, 0.5608276316253684, 0.153607119650361, 0.065561497666349, 0.11148357348357352, 0.12165031656911873, 0.08485672271834077, 0.11176014644694332, 0.10707960107581715, 0.1365508359311418, 0.09645314568948637, 0.16639813963984018, 0.3278225195812452, 0.16717629760566666, 0.19760639360717192, 0.16688604200173973, 0.14222745561520422, 0.25222034122215287, 0.20248764582206102, 0.2148152926416247, 0.40031137308763254, 0.24817817136214915, 0.40859751521989507, 0.4107946798954748, 0.30995076432798574, 0.3954524241265832, 0.4342199094032052, 0.3531205308625237, 0.3603062757100671, 0.18598876108270646, 0.2317205549780651, 0.1802234457782138, 0.2421685150632631, 0.32830779531507004, 0.2222395514374751, 0.25490823758552716, 0.2866940335126187, 0.2894735972177028, 0.21926801842934518, 0.21504441221445936, 0.22740905537364065, 0.2933873512186138, 0.2719983036901551, 0.2381411244636743, 0.2173362339470526, 0.23519903879279602, 0.20464950367612478, 0.17746636388883963, 0.18224634876164347, 0.220283603235769, 0.1808381502555192, 0.201924266523698, 0.20230176842422432, 0.1971356693126466, 0.19685701790450938, 0.18155692191185802, 0.17630470607798432, 0.8696518647787833, 0.154458744364109, 0.8865081095377123, 0.16861357325092108, 0.1894570680538612, 0.14564772723553632, 0.1982659358259684, 0.8845525424113998, 0.1254356817918768, 0.6545320637695654, 0.16686981235400966, 0.8294582592144226, 0.2065383387852876, 0.16554302289337852, 0.8460193844612837, 0.12418367373009065, 0.2044349692442532, 0.22280298456797298, 0.2096173735940502, 0.1905431461971725, 0.224330831319148, 0.2608875666849071, 0.21006720956217118, 0.2317231064281029, 0.2035503941715474, 0.24724734055777575, 0.08966403948573065, 0.08891936680606616, 0.0905250766747755, 0.09338943502242181, 0.08199365186680585, 0.08685990002692634, 0.09641006090983406, 0.10575108638175135, 0.08359266230912454]}, "mutation_prompt": null}
{"id": "7cd6f5a3-d4b6-4000-a705-e338874ce9b5", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_Refined_V3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Stochastic inertia decay for better exploration-exploitation balance\n        self.inertia = max(0.4, self.inertia * np.random.uniform(0.8, 1.2))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 1.0)  # More adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.25 else 0.65  # Slightly adjusted crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_Refined_V3", "description": "A refined hybrid PSO-ADE algorithm employing adaptive mutation scaling, stochastic inertia, and competitive selection for enhanced convergence.", "configspace": "", "generation": 23, "fitness": 0.24164553579589382, "feedback": "The algorithm EnhancedHybridPSO_ADE_Refined_V3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.35049111947247125, 0.28377494031202743, 0.7212596283241279, 0.39058954737710583, 0.3384382300883001, 0.7046119591008948, 0.35980113439124817, 0.29656347030186003, 0.711304931024827, 0.08696782315427676, 0.044976672871880674, 0.419616076045343, 0.0662932265397338, 0.061482548849510765, 0.44672811710524996, 0.05923363569746576, 0.061788153627224895, 0.47565516804960783, 0.07981927555486745, 0.07693028716353545, 0.1463716700570007, 0.08267618114333253, 0.07840261326741038, 0.1331422322484952, 0.0741212875535795, 0.06484878729494126, 0.12385298600483363, 0.06468879374840342, 0.062478418595474206, 0.11433560745644422, 0.06997268939254264, 0.06607484783440609, 0.09034929680877901, 0.07238382468409366, 0.051377269598783415, 0.1255555842529149, 0.9727679890144463, 0.9731241330130989, 0.9820232939235641, 0.9810446308274898, 0.96057410941518, 0.9820344976635802, 0.9818784526717032, 0.9800028793073975, 0.9811912742984595, 0.19192149737151554, 0.10806339361200168, 0.4876415733817081, 0.13287556900388287, 0.12118822910752047, 0.4743546051495009, 0.16094923305425424, 0.08421623145858614, 0.31473834056933525, 0.23901401486522988, 0.23307061699019405, 0.804733085739534, 0.2552710766012303, 0.2079389218661719, 0.1560871808669435, 0.23493034027708304, 0.239318242673621, 0.7544038975614338, 0.09810412895171938, 0.07928216811013755, 0.3674093385566938, 0.11763867358520275, 0.08271393634765922, 0.1184680267738979, 0.10962143805138347, 0.07149267890119593, 0.3819349911735409, 0.15144049962315698, 0.009253464158343161, 0.3454657456765573, 0.13545266208159756, 0.09877240876808879, 0.3796489223311783, 0.10859955580953029, 0.06298053900767031, 0.41075584213971283, 0.031196903910508667, 0.02143593683904277, 0.4551510500033499, 0.026850522675509803, 0.038630486901528815, 0.3052010785377358, 0.010961432196434862, 0.01490800038750728, 0.1819507776568533, 0.12644529272159488, 0.11385667582002845, 0.4898905886741932, 0.13922565537347031, 0.0683964726699523, 0.45623376299105944, 0.2184680501864409, 0.10815526648521623, 0.5226993295470169, 9.999999999998899e-05, 9.999999999998899e-05, 0.038974522456663, 9.999999999998899e-05, 9.999999999998899e-05, 0.19117604304407565, 9.999999999998899e-05, 9.999999999998899e-05, 0.05946275254407052, 0.06400349416873996, 0.04383130274449254, 0.2486993579496357, 0.0678529189433611, 0.036749268316130124, 0.35516871640449477, 0.08170304388129224, 0.07980071292268098, 0.301927613806657, 0.3467600318172356, 0.29056670644879323, 0.6214383535118839, 0.33323587942247546, 0.32364127129738207, 0.6522811055889267, 0.35800685397132537, 0.24655196854949069, 0.63112229738024, 0.07819763676204583, 0.06699737823434371, 0.11598798751842876, 0.08026718448171488, 0.059140325148161144, 0.4329970205083533, 0.09843600432666266, 0.057722924084939176, 0.1326237880124458, 0.15181608498329147, 0.14034282240137075, 0.37130168499008154, 0.19859318471566745, 0.13388690620774146, 0.2859296953249776, 0.1568670077107226, 0.16915565573735147, 0.2501567734211664, 0.21002904379484788, 0.1838688700554696, 0.3994863651418358, 0.23142028605701437, 0.19890186010363498, 0.3422849196540453, 0.2616235345037702, 0.21070394181565366, 0.47660251472220905, 0.1553164539212768, 0.14300942242071213, 0.29156096812682386, 0.17524525351026587, 0.1499158758781397, 0.25492747756615197, 0.17171559547062876, 0.15992098541579813, 0.3101725690696645, 0.1698735168221468, 0.1613913437785277, 0.20547720970622674, 0.18625557770521572, 0.17794668822086968, 0.21109190485777085, 0.15926181569018028, 0.18222733849452255, 0.21001035605904939, 0.1617976123678041, 0.16112952678649128, 0.20290862106333185, 0.17308509033416308, 0.16407786142649583, 0.20513782492594534, 0.1757658073986511, 0.16541438415415866, 0.19357062206772013, 0.36824679307720976, 0.22215028793140612, 0.15411328472399133, 0.37052191258165945, 0.16544838418487906, 0.8508600485239575, 0.12698313379070392, 0.17176344072146255, 0.8409891131456603, 0.43140800026502135, 0.3437200651843043, 0.20193570608711342, 0.19558276960374466, 0.1780284804039497, 0.16086971322895294, 0.25112567227291915, 0.18712732931867182, 0.7072073256887697, 0.19805044181597664, 0.19596082852842922, 0.21253927176971077, 0.19786291690191293, 0.17794278910243866, 0.19439849603327286, 0.18374007363824818, 0.17297224822060875, 0.20587750106741232, 0.06284595083969668, 0.07174106345947717, 0.0944403492786372, 0.06651215128113364, 0.05562371583290804, 0.08744609999242858, 0.06759709787487278, 0.06118035561256019, 0.10251195219987108]}, "mutation_prompt": null}
{"id": "2bad49a0-d94d-4e6d-ab53-a4f2c23f984e", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            quantum_wave = np.random.rand(self.dim) * 0.1  # Added quantum wave influence\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i]) + \\\n                                 quantum_wave\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * (1 - self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 1.0)  # Adapted mutation factor range\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = np.random.uniform(0.6, 0.95)  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveQuantumPSO_ADE", "description": "Adaptive Quantum-Inspired PSO with Dynamic Differential Mutation and Probabilistic Crossover for Enhanced Exploration-Exploitation Balance.", "configspace": "", "generation": 24, "fitness": 0.27480120795363666, "feedback": "The algorithm AdaptiveQuantumPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.5174402639126077, 0.49975109810299356, 0.5178478995250388, 0.5355208333112849, 0.5579820662390769, 0.5187840203404748, 0.5559416644004223, 0.5168700998693481, 0.5053705947982325, 0.17456068108753575, 0.18044780031636876, 0.17973850684992954, 0.1625230400535338, 0.18445040166369964, 0.1693678572569699, 0.18970989719817066, 0.18618898682525464, 0.1291211451600699, 0.1256393025233652, 0.117521159001578, 0.11878248430887683, 0.1201154634904722, 0.1323242777743795, 0.1298781267040382, 0.1455777587389977, 0.14156666886183444, 0.17124423760331942, 0.12427438555181614, 0.11721265512816192, 0.11311559048741515, 0.11333016626316839, 0.11495191598696997, 0.14533907626242726, 0.10877781765280559, 0.12218977490416605, 0.10559893743477766, 0.98152025985702, 0.9844164329264572, 0.9797049668727942, 0.9903585110476105, 0.9585703045873946, 0.9785947212516602, 0.9806438400221914, 0.9785836679978405, 0.9737985923661846, 0.31727526029189157, 0.32451050102682855, 0.29887578477563526, 0.32347274222187006, 0.31852995407101636, 0.32440861302647217, 0.3322132453625999, 0.08239825221180397, 0.08587840317471296, 0.7172890672525174, 0.734244990161123, 0.6068761724828293, 0.7700007716376751, 0.720919167060877, 0.6260067737445835, 0.12094285763303214, 0.7479253190090773, 0.5978360598782344, 0.1219604986381353, 0.27432139419054924, 0.18869821675865883, 0.2756671116449394, 0.2905441089243236, 0.2927094228614582, 0.19614255315771423, 0.12266813441969149, 0.2579755808117251, 0.21156101668030225, 0.11753847412374707, 0.2123063311657154, 0.22043925398207542, 0.19356146352967396, 0.16150077717644395, 0.20157106407904868, 0.19758318034400368, 0.19652617735023115, 0.05358364777040514, 0.058294388366099015, 0.0650487975970736, 0.09645049720784715, 0.08094694637510458, 0.08675986444142658, 0.1145466551034322, 0.11519751929194477, 0.0023756199269424627, 0.15853763139949228, 0.15943397368606405, 0.2126234011035304, 0.18821855168866652, 0.1493815474412784, 0.10668969369835468, 0.2400660225716108, 0.17649624230681638, 0.17720070697001578, 0.018997468408798346, 0.02669639486077524, 0.018808111317078824, 0.04190745254410033, 0.02663129183876367, 0.041897481252407665, 0.01816184596391124, 0.03603452987912692, 0.03411910544155128, 0.1537184766331442, 0.15320339822865503, 0.12647227339086398, 0.15213678736061698, 0.1501668092272721, 0.14472224678313328, 0.14473589311225665, 0.14353283608094658, 0.14588360898382835, 0.46900795171504195, 0.46499517171401283, 0.4380907937825439, 0.48741750258982286, 0.4419528898224169, 0.4506593984893946, 0.4608837891670703, 0.4623300804515139, 0.4537994909219617, 0.10398571833202563, 0.11095890212254511, 0.1351195943185558, 0.1381338147239678, 0.12833261947752073, 0.11673781320092602, 0.1453330802469076, 0.11776085505049383, 0.13524567030358225, 0.254332566308864, 0.2560105947673549, 0.23576095255877916, 0.21081802228936064, 0.31832625467549747, 0.2587016783228391, 0.20592672950543844, 0.16918603860645165, 0.24167378425819874, 0.31622103233084997, 0.3154775828415143, 0.3089176084726061, 0.3168731113730374, 0.29910659149759045, 0.31382041262871807, 0.3191090538102087, 0.3089019596815791, 0.3082046164015435, 0.2797748460894296, 0.2391368311169354, 0.25255242809116785, 0.25485565544597866, 0.2612839979529754, 0.2644639829899402, 0.24726167544395972, 0.2509501825697896, 0.21808135423729458, 0.18759744458633854, 0.20510193559561707, 0.22148947181097578, 0.23555257539095875, 0.1870863535216971, 0.20469174193224393, 0.19689571417560137, 0.23160421925104446, 0.19726765371571864, 0.1975211308026833, 0.1979507103005841, 0.213670982259339, 0.2896003566626837, 0.2256159632023662, 0.28457585976714095, 0.20229172456285227, 0.2281984666736835, 0.19232190656582993, 0.801097104318593, 0.18388106307377938, 0.15313715080506884, 0.7707077368374782, 0.1969489335066702, 0.7520137895000796, 0.786177127183552, 0.17315842651680746, 0.7545811201609472, 0.659280654501753, 0.2013440709023434, 0.12305902921603118, 0.7132434879430918, 0.20523634354873155, 0.16579568862560645, 0.6298301160028777, 0.12472469986560553, 0.15373593027220644, 0.1907561183599662, 0.18665991502456647, 0.18859961746412823, 0.18358239362454443, 0.17805738083897849, 0.2112208794138768, 0.1910294625400838, 0.17900658756642718, 0.187043848488601, 0.09259666990330939, 0.09118214235547417, 0.0811172795174131, 0.07837451712626176, 0.08191728806059795, 0.08626029685587944, 0.08425002115957103, 0.08722010796018986, 0.08692066183556835]}, "mutation_prompt": null}
{"id": "1c7a01bf-c75f-4809-9f19-a03a77874566", "solution": "import numpy as np\n\nclass RefinedHybridPSO_ADE_CompetitiveLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 60\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.95\n        self.competitive_factor = 0.1\n\n    def pso_update(self):\n        cognitive = 1.4\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adaptive inertia scaling for dynamic exploration-exploitation balance\n        self.inertia = max(0.4, self.inertia * (1 - self.evaluations/self.budget)**1.5)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 0.8)  # Adaptive mutation factor with slight variation\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.4 else 0.8  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with competitive learning\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n            # Competitive learning step to enhance global exploration\n            if self.evaluations % 10 == 0:\n                worst_idx = np.argmax(self.personal_best_scores)\n                self.personal_best_positions[worst_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                self.personal_best_scores[worst_idx] = np.inf\n\n        return self.global_best_position", "name": "RefinedHybridPSO_ADE_CompetitiveLearning", "description": "A refined hybrid PSO-ADE algorithm with adaptive inertia scaling, dynamic mutation and crossover, and integrated competitive learning for improved optimization across diverse functions.", "configspace": "", "generation": 25, "fitness": 0.3543251042946405, "feedback": "The algorithm RefinedHybridPSO_ADE_CompetitiveLearning got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.23.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.7038920278320282, 0.7108803599450443, 0.70518172240674, 0.7169852410110601, 0.7303375041030287, 0.7603251149025281, 0.7392917807930183, 0.7175001952367033, 0.7130277811396473, 0.37362026059956865, 0.38293512441235233, 0.4306014463151052, 0.38786848597315915, 0.4603485101947219, 0.4781511204287443, 0.4421231170812914, 0.4731311912718813, 0.4308968375684933, 0.15642058643506718, 0.12184644060510308, 0.42578526022858354, 0.13827772927255033, 0.1618110662240908, 0.13782705277796725, 0.1327511405892814, 0.1470493858180134, 0.11856646545702765, 0.10886435831569419, 0.11880966279755034, 0.11696417841647455, 0.13733058352558491, 0.11876391801641362, 0.13134406262863418, 0.10181366819651616, 0.09179062800420323, 0.1057208576681895, 0.9741177579611303, 0.9857964282166801, 0.9743543278877798, 0.9549398659631039, 0.9775810386654272, 0.9630860704592166, 0.9767736008833001, 0.9783784099300897, 0.9645876780938989, 0.49116958049883763, 0.4044919847889753, 0.4954781705914727, 0.41853865506236554, 0.4749664402236412, 0.41987318255166306, 0.4582035905044921, 0.4879988806154826, 0.32318741931405215, 0.6665985465956984, 0.7596057125539286, 0.7124770215857629, 0.7017573339701955, 0.197625602321427, 0.7705115606692232, 0.7528027609490738, 0.7361861816515283, 0.7622823838090895, 0.44648672506054043, 0.3199528201001042, 0.46834558168719675, 0.3170340659509804, 0.2791432999958603, 0.34201215299469245, 0.3223459519419254, 0.2980434527291659, 0.47508522696194133, 0.4105324976184733, 0.23953221869338281, 0.4512546400992299, 0.3466182489657512, 0.4173696501463944, 0.42066914353336593, 0.11760389360133217, 0.35228059954838997, 0.42542248047562203, 0.2676972073747982, 0.26306240495677846, 0.2783893749043863, 0.04923479506477546, 0.41115591205891633, 0.19200268972573764, 0.21422175506407726, 0.3285547324244448, 0.09388192375196536, 0.41467797492332104, 0.4641077826424056, 0.5232933571942621, 0.4099600900347268, 0.4329734811148699, 0.5219021918369624, 0.5110990221338638, 0.42999996411749697, 0.510272860839085, 0.17911823484477063, 0.16018206127743684, 0.043803374483178614, 0.3002837932962047, 0.17269993972246334, 0.08251944595179284, 0.2613279792464568, 0.09300180202312369, 0.23691193775712494, 0.32204715999648004, 0.2662858888087797, 0.3081756100944856, 0.30443823675162396, 0.3089873125175877, 0.2985177426238619, 0.32302734100163044, 0.29017668827450094, 0.28955614337993985, 0.6174136015673105, 0.6330256766588893, 0.6089355069973635, 0.6413422939207247, 0.6288020069376441, 0.6501066453153652, 0.6316002243179545, 0.6153719652655743, 0.6280283370072759, 0.11893923925641536, 0.10946956636850869, 0.11321298252179823, 0.0992847969129278, 0.12532179562161672, 0.12433644140881372, 0.11603820503651618, 0.12485337393249807, 0.14460042216053337, 0.16504714975836488, 0.21666086243391003, 0.26554204435502893, 0.24312794065988086, 0.19376989699467573, 0.5719441643265246, 0.21916524773068835, 0.4008252411093507, 0.1866011925492097, 0.40252470702547916, 0.39657732374812926, 0.3658598409794934, 0.38591991660422764, 0.43494548898055696, 0.40665907973420135, 0.27742110208994997, 0.35583085549410876, 0.4291545801688721, 0.32234289983288866, 0.3311138338442172, 0.3331389523813142, 0.29531285266564644, 0.3745057806579043, 0.329287068132989, 0.38533589560739967, 0.20195580422581405, 0.21324338381994135, 0.21061509301977643, 0.19911153282622296, 0.20978929828227466, 0.20987948905576437, 0.21447800678255735, 0.2389200654576562, 0.2098774898508362, 0.19657924935002313, 0.20971185449207974, 0.23279225264900805, 0.217975007435958, 0.4380006180852207, 0.2087380455834189, 0.19268496241965216, 0.2101271421499673, 0.19385851350197125, 0.18232879661958667, 0.22247536313766325, 0.18261733721415518, 0.19417890834368623, 0.8162744935980447, 0.11988064380459107, 0.18228898038062302, 0.15959715704815192, 0.1946498526854782, 0.7520313054893578, 0.7725785033383892, 0.16595004039475203, 0.20238972785529852, 0.16475701719455715, 0.20440628575890185, 0.799592680387988, 0.20152266600482682, 0.19752347657269087, 0.20609528166164148, 0.20761901218436574, 0.216346049291556, 0.19692930990741342, 0.1930334482574293, 0.1957231953157631, 0.18249074417695843, 0.19380211613717024, 0.18899678695522193, 0.22584626156999255, 0.19030753987129423, 0.0941257307783302, 0.12884150228526903, 0.10035465196413518, 0.07783143121316916, 0.10438978200525795, 0.11165527608300585, 0.09121947123227636, 0.08152120099263249, 0.08492977704156146]}, "mutation_prompt": null}
{"id": "582e1f88-05f0-4c11-ad33-9b82a195e46b", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE_Refined_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for adaptive exploration-exploitation balance\n        self.inertia = max(0.4, self.inertia * (1 - self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.3 else 0.7  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE_Refined_V2", "description": "An enhanced hybrid PSO and ADE approach with nonlinear inertia decay, adaptive mutation, and dynamic crossover rates for robust optimization performance across varied dimensions and landscapes.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.782158812369685, 0.7533082261150521, 0.7384119819166668, 0.7934216988113687, 0.789205114946439, 0.7763012885643048, 0.7662106667825233, 0.7674220909837, 0.7628363004853345, 0.5273419755693138, 0.5741829293255215, 0.5778471502106977, 0.544669982618842, 0.5410844546270063, 0.5140197037308727, 0.5696438104299872, 0.5638848060006586, 0.5654717880904201, 0.15090435093449128, 0.15739281793677273, 0.1680766296538433, 0.12878215067197596, 0.1213740669174902, 0.1322820801214355, 0.14715914666769203, 0.13205593411648042, 0.11679060533659047, 0.1240315216696174, 0.11457109393617171, 0.12809944960765474, 0.11379615191389836, 0.12442629287505114, 0.09518139960820304, 0.14250879318896004, 0.10379805681598153, 0.11957845947442236, 0.9705414083606295, 0.9815994245079414, 0.9779338056640141, 0.9820144963871777, 0.9713950242323618, 0.982023323481706, 0.9880844169675587, 0.971913773340313, 0.9812505124224168, 0.5543329173320866, 0.6056334699513299, 0.34691494036102855, 0.5752937538490503, 0.5755324313326117, 0.5549464132109034, 0.12368324998621405, 0.6075043537535649, 0.5735972776104117, 0.7751777109724401, 0.7742687937435973, 0.796558047610135, 0.19557433184274053, 0.7741910420175631, 0.793672360909434, 0.8066062135707031, 0.7728935089526011, 0.7207370193060343, 0.49245065139331723, 0.49516446790672897, 0.42370634264247453, 0.49961266059229503, 0.11414724666418441, 0.10926731503676768, 0.5766296662914958, 0.5332998116197083, 0.4816479226569178, 0.6207840656206967, 0.11933892616102149, 0.5803644714533842, 0.463613300812193, 0.5735226224906336, 0.47040300568265836, 0.3792630248580615, 0.5111459918977261, 0.49923876212934815, 0.3966306319868589, 0.4950262602442995, 0.48696586094851013, 0.26359377317388055, 0.37083896392387417, 0.43678741413953404, 0.37674572397485184, 0.5217753620848025, 0.4545197777337554, 0.5577991043267945, 0.4974787474897777, 0.48352511867527315, 0.5643268904562351, 0.6029726123484733, 0.47441776412729164, 0.5681797012967914, 0.5836864892614391, 0.5133233377690506, 0.2435338172730548, 0.05939528706547281, 0.3032559483940297, 0.19517287088202184, 0.1304904858915501, 0.2255254260590629, 0.17414579545022757, 0.12969462993543712, 0.0579419436456694, 0.3594147237484654, 0.393949615999898, 0.3847919418738125, 0.36294276963527605, 0.4056708000578485, 0.3437616865618084, 0.40191064944065946, 0.42240726894962255, 0.37813346508887913, 0.6776721753401416, 0.6731159552362476, 0.6885856737661296, 0.6565713386417068, 0.7056175141073824, 0.7057688465962513, 0.6494016155304487, 0.7142054049634787, 0.6713935753794591, 0.08549727808118679, 0.1625060343137389, 0.08567520525808758, 0.10217090093170733, 0.1316264486905413, 0.16591362987290936, 0.10381718410372487, 0.12232228363164921, 0.12638604483976268, 0.2452776197528651, 0.1647816509226614, 0.18452204426674568, 0.19420183861204865, 0.18412075985364784, 0.20718115345000765, 0.2543117852886525, 0.2228233046986856, 0.24847690845552162, 0.4920978521151176, 0.44940331285271795, 0.45447607730604855, 0.4892215232410403, 0.4596667629273514, 0.40440541018375953, 0.4545994250367529, 0.5002571780001615, 0.44580223859582846, 0.24854821499924895, 0.22815824127629802, 0.2981889110506195, 0.24857528214875824, 0.3295678855408647, 0.41725472386022155, 0.241723800518731, 0.25071409749410345, 0.40538673795717584, 0.23868024570794644, 0.2096082314598844, 0.24950422535088024, 0.22694224956559916, 0.22409706312073108, 0.19170437480536606, 0.2136770562088255, 0.2236440497897556, 0.27356816255125604, 0.23074185422295845, 0.18624658483315237, 0.1989006029899999, 0.22686525552119197, 0.18743293932260785, 0.5876866703919472, 0.20110854644867826, 0.21883846818487096, 0.21110937816190312, 0.8472137082079159, 0.1831969006837154, 0.1545391729566109, 0.8446749069810262, 0.16596408073634172, 0.8238168853419783, 0.8103538908584977, 0.7874494634452229, 0.8525489310409952, 0.7583560877840789, 0.8120344644274337, 0.16252118371669222, 0.8031622913853074, 0.16031878909928166, 0.7440563039046408, 0.8121267090341573, 0.15125025001533232, 0.15316710617822482, 0.1934841142288627, 0.2038259380283136, 0.19622301923445273, 0.1908113089603496, 0.2070632159143534, 0.18589153574676398, 0.1888553713852429, 0.22217495654391728, 0.21823304707218694, 0.08373246206463447, 0.08986509305654566, 0.0945828591590111, 0.09650424752710063, 0.09298778178198286, 0.08563276294426037, 0.09760853208354525, 0.09275204892656697, 0.08351017655103676]}, "mutation_prompt": null}
{"id": "841a22b4-20af-495a-a14e-cb1f71375dac", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6  # Slight adjustment for better balance\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.8)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Enhanced Self-Adaptive Mechanics and Robust Local Search.", "configspace": "", "generation": 27, "fitness": 0.41735682879421543, "feedback": "The algorithm StochasticDualStrategyOpt_SAM_RLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.26.", "error": "", "parent_id": "891fc8a8-bc51-45e5-919c-39ddd41aea8e", "metadata": {"aucs": [0.7870987350386937, 0.772518642027322, 0.787728678541876, 0.8010768155416359, 0.7858126277044558, 0.7981966111874281, 0.7662631058241139, 0.8087458627542605, 0.7690837498367729, 0.5896795087852476, 0.5735828463662223, 0.5565392737708605, 0.5894808973567274, 0.6017160046820762, 0.5639929848560422, 0.6312073057755399, 0.5848169343420315, 0.5868629083356047, 0.12061128999816606, 0.5494421317282103, 0.14190306480767445, 0.15382114983953887, 0.12259768362876533, 0.13144750102407776, 0.12365857783104839, 0.13151555098113643, 0.15351739436204825, 0.10301885915320586, 0.11447178468660424, 0.10561358261394438, 0.12129722162780476, 0.11000471569198766, 0.13611168566855814, 0.10043188316143792, 0.090043166015214, 0.12918190052949596, 0.9732621583689356, 0.9815608289967621, 0.9818510617897828, 0.9785027520351097, 0.9792564143828625, 0.9822065439283073, 0.9823095614839283, 0.9790506626627897, 0.9795413886462214, 0.6150983459887418, 0.5640108269027803, 0.6244951432421865, 0.6200267030611315, 0.6119185791232105, 0.5969960056467587, 0.6185226102900205, 0.628923972494331, 0.5949339759948769, 0.7736840356835168, 0.8046487424038944, 0.8013336804898411, 0.7933406383001566, 0.2609792155194338, 0.7613405818748401, 0.752482495741054, 0.8071122782778353, 0.7814998894663063, 0.5535532934233942, 0.1249929576570672, 0.48532480991894444, 0.3911384587307051, 0.3762792506817956, 0.1234822546160278, 0.4215854205785353, 0.5406292687387089, 0.4859706009434315, 0.123855055362601, 0.5143795616659781, 0.6237899346108242, 0.5185170478308194, 0.5752111884529714, 0.566800902011283, 0.4972075508505991, 0.4677454108165018, 0.5195901436728843, 0.1633924876113091, 0.5520351202485271, 0.49944070284297637, 0.4788820797054245, 0.28498921698036017, 0.22969785541125298, 0.16671335625782635, 0.5701972939703067, 0.45482112697308064, 0.6129089428234611, 0.5907074902564944, 0.6073925560819393, 0.6409840927704913, 0.5507468518094081, 0.5515036160881457, 0.5738718840343257, 0.6134334186133665, 0.48497291684096033, 0.06124641794126107, 0.16720493553082083, 0.10664120415307876, 0.3609224600080322, 0.3500717402695108, 0.3374551425988106, 0.15795686538134923, 0.312489430229574, 0.27776098960287465, 0.48682412743852366, 0.39643427067218806, 0.40635826776662887, 0.3309448225366828, 0.432681611970551, 0.4275533769512815, 0.4194937787969636, 0.40573408098205943, 0.384182725699451, 0.7127015145255844, 0.6942192942167968, 0.6823039128582049, 0.7255047010191809, 0.7209093524394025, 0.7416583847973427, 0.6573925306454509, 0.729329908825407, 0.7272781835635522, 0.10983758034885216, 0.0815814639913347, 0.14760364609163557, 0.09949933544094858, 0.12520233526896096, 0.10382086923047829, 0.11949443539224636, 0.13550067992282433, 0.14551652419676597, 0.2104166356200391, 0.24761253808470196, 0.16736004209546773, 0.21069957148426566, 0.3178747451948474, 0.20405493302824973, 0.2016023287136537, 0.1569435079983752, 0.32233515098417287, 0.4668648776898553, 0.42923520535418547, 0.49466073637936636, 0.5330050602939242, 0.48410328718593076, 0.5084100137276557, 0.5073371715241586, 0.5173061281215685, 0.4780557830217459, 0.3169162837845394, 0.3468065173831366, 0.29849109561110176, 0.20372234445480686, 0.3129465001155106, 0.418253610420402, 0.34608326596776173, 0.35200057405278784, 0.22062289763841458, 0.21610700492297152, 0.20980598541198692, 0.19895890469831579, 0.20282820136653212, 0.21265301681019122, 0.19955491410658677, 0.2485951948230275, 0.219186851133931, 0.21177511905542656, 0.21417891275971446, 0.2290515321020663, 0.19951361848862204, 0.2192480859003212, 0.20325848224644782, 0.1985522526013549, 0.19134310349214134, 0.19128419477329295, 0.20835075318747232, 0.2011130207583356, 0.18136518698602955, 0.15480346923505584, 0.8568033281825458, 0.1659355150040135, 0.8099436876802873, 0.15918779105992675, 0.1384718004653287, 0.8377792932980035, 0.7976384823121043, 0.7490010600090697, 0.3283129367391415, 0.20777238880548665, 0.7952854859082754, 0.6776086942188557, 0.802925508818296, 0.20273872256748282, 0.7480380828768712, 0.1979086250905704, 0.21813056777725037, 0.20362282800165876, 0.17768017110198275, 0.19108221134425207, 0.2050148328403255, 0.20468033155912202, 0.1988493882729343, 0.21505535447641733, 0.08928553143436235, 0.09693808402808768, 0.08848415275924182, 0.08921400340364438, 0.09332038547768096, 0.10457266009268973, 0.09776342520115244, 0.09885487006882432, 0.07588945782540701]}, "mutation_prompt": null}
{"id": "00337774-a506-44da-be16-ff362def9d9a", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyOpt_SRM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.4  # Modified for a slightly different balance\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Tweaked mutation factor for increased exploration\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.25 else 0.65  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveMultiStrategyOpt_SRM", "description": "Adaptive Multi-Strategy Optimization with Self-Regulating Mechanisms for Enhanced Convergence.", "configspace": "", "generation": 28, "fitness": 0.3786775302983906, "feedback": "The algorithm AdaptiveMultiStrategyOpt_SRM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7867971968812704, 0.7740959309508881, 0.7733665803877379, 0.7817909944506559, 0.7897693588516917, 0.8002424064459535, 0.7805605162394131, 0.7766577626371368, 0.7658800850923886, 0.5612111403418265, 0.5985918471433314, 0.6275024398908966, 0.5952381362275654, 0.5923145008901085, 0.5739072927112285, 0.6028026024716007, 0.5662510310433309, 0.5724773030302506, 0.12491893696338285, 0.16931640249447155, 0.09537901264924897, 0.14609952380628077, 0.13122471371266076, 0.1326438182281574, 0.12511806440897255, 0.13829790616926607, 0.13218514300227835, 0.15748810165943583, 0.10813503205089259, 0.11605254098265227, 0.13458877416044324, 0.10463580023428876, 0.12101027988488755, 0.13175892033813474, 0.14783557225693023, 0.14001166780683705, 0.9639797175971508, 0.987510786530511, 0.9714306669334483, 0.9818980135753625, 0.9807364060007612, 0.9864797624286639, 0.9819587293275885, 0.9807159757610148, 0.981224586235755, 0.5881795798334326, 0.05707359309572824, 0.5858999749990099, 0.1453959087716552, 0.5635052212461265, 0.5745316018077238, 0.6369349562957105, 0.5039062079850665, 0.5698058237209352, 0.7645934619308109, 0.7706657436346159, 0.8120898065851494, 0.7999653716457433, 0.20427818947399123, 0.7580639514563963, 0.7558657861028651, 0.8040834953152223, 0.7626178021016369, 0.11827348084828104, 0.4098290280898971, 0.47563075463908233, 0.5570780397721351, 0.12114928294194272, 0.12019125890834226, 0.44468415220689816, 0.12203165423394458, 0.44208119301316284, 0.49117392108361435, 0.35499553654675853, 0.11813138124039901, 0.5566140549718204, 0.385027998997422, 0.5077831403844917, 0.5729750799425721, 0.543218096354289, 0.4576091848894386, 0.3904588328777505, 0.06290778780642481, 0.4191689925027595, 0.4438577546778343, 0.49241784236691943, 0.16810445762237536, 0.4639576137742153, 0.49486472352810984, 0.3792456141740138, 0.5150085349382573, 0.4636496579155308, 0.5966217114233171, 0.4824685000358734, 0.5448045267417949, 0.5529294265993006, 0.6273499741011012, 0.5956866565202794, 0.559410015301279, 0.04110138448704059, 0.08344558831384707, 0.0524093313925339, 0.19836039710390307, 0.14850456287755187, 0.19373415072814848, 0.08848584707392182, 0.15446231913289488, 0.08479073168723916, 0.22638437178449355, 0.3431293213834111, 0.3993577978642041, 9.999999999998899e-05, 0.403932787894408, 0.2392122923841633, 0.29437923240855846, 0.37653733862943184, 0.262325697867239, 0.639376759294821, 0.7189574144641875, 0.6728899621133104, 0.6480656438081391, 0.6740100375520461, 0.6874989438197594, 0.6517730924914802, 0.6804545692641809, 0.6817400435172771, 0.10050957747248845, 0.12259061589098341, 0.10410434520072909, 0.12810674107320352, 0.12379557981682743, 0.08366181964515562, 0.1257217195087147, 0.1299225619027169, 0.11207413699615976, 0.14562996295838837, 0.19584357464043423, 0.1544992858396137, 0.3126026811073209, 0.19007925332141418, 0.28009110324611697, 0.21044903177660412, 0.1585551280157732, 0.34782085964216625, 0.37916754135880915, 0.266332963064164, 0.35242965045978325, 0.21332050418633286, 0.5322200809467663, 0.4728637667901404, 0.5333241199467269, 0.5310136916736801, 0.19226085522926073, 0.231765900471252, 0.23915939729768154, 0.22185561077760407, 0.1854879994201052, 0.32378624073920115, 0.2139121382995156, 0.35230114493296427, 0.334210347339607, 0.23017198995430055, 0.18821606405481017, 0.21742924276710962, 0.19920280956732417, 0.23444543030408016, 0.21281659292332455, 0.22036873282220026, 0.23844800866269789, 0.1912264390298266, 0.229643695904151, 0.1747523168333166, 0.20212554846506814, 0.19510391113559922, 0.19883721946408273, 0.18623652962951875, 0.1974893291570684, 0.5177545715100789, 0.17344102907865455, 0.2095512381024517, 0.8265183786448855, 0.18464677095466941, 0.15396203044244083, 0.818837326646169, 0.16518470926536988, 0.19229115529919727, 0.16151339070138815, 0.18236503017853944, 0.8162303422682644, 0.1646689898509871, 0.15827980819566656, 0.7011753830255503, 0.2016618929902807, 0.2008121116746131, 0.784947860514194, 0.6994107590019722, 0.7817662327062493, 0.20359759949077771, 0.1954163334686736, 0.18110149857659352, 0.2566218110736045, 0.22057538839130564, 0.22569115292708497, 0.19677515564264558, 0.212524524176119, 0.21156937004479937, 0.21490408883543144, 0.08692936165658716, 0.08620046844748008, 0.09376407159497979, 0.10440104421760865, 0.09059904156708765, 0.09113151602257663, 0.09036881009615172, 0.09659530870608557, 0.07621925860386691]}, "mutation_prompt": null}
{"id": "b61ba3a8-eb04-4092-a3e5-3c9906165b31", "solution": "import numpy as np\n\nclass HybridAdaptiveMultiPhaseOpt:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * np.exp(-0.5 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n        \n        return self.global_best_position", "name": "HybridAdaptiveMultiPhaseOpt", "description": "Hybrid Adaptive Multi-Phase Optimization with Dynamic Strategy Adjustments.", "configspace": "", "generation": 29, "fitness": 0.3952848895870729, "feedback": "The algorithm HybridAdaptiveMultiPhaseOpt got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.744498673645799, 0.7480067913141792, 0.7616196935617552, 0.7367451247128161, 0.7554167651767327, 0.7674176504965771, 0.7512434103738485, 0.7614228257351806, 0.7434966986504652, 0.5037885921724488, 0.5747885054612103, 0.5608045533288861, 0.5433682541717977, 0.5473275913610545, 0.531327024680154, 0.5334222492423852, 0.5067770749385642, 0.560132231477315, 0.1262413452630914, 0.15828512478250756, 0.14065201142987238, 0.10946951043991227, 0.1251016682284951, 0.1174100932961124, 0.13186315770249435, 0.41833136976153606, 0.1622339873759272, 0.11286429203875847, 0.11248151618379065, 0.10153516741489133, 0.09690102556077296, 0.14962605932989137, 0.09544109480153096, 0.09388164573661906, 0.12781180931479108, 0.10387253123023088, 0.9636190625867619, 0.9797830409311229, 0.9815090201569412, 0.9456942035861556, 0.9731128638488133, 0.9707566438373968, 0.9812264824408092, 0.9763454646798617, 0.9780898841978314, 0.5936494665354974, 0.05684331984242075, 0.5821008377048336, 0.5971257307198078, 0.5431426654879815, 0.5596574108504331, 0.5423178901997194, 0.08609968146814795, 0.5751405825716972, 0.7724380214554808, 0.7257241552508374, 0.7466061275852378, 0.745461887523689, 0.7599418921522294, 0.7490730120052759, 0.7018812102576188, 0.7578303938667683, 0.7600091109169567, 0.11943988264617877, 0.4873787945530482, 0.44865476145314687, 0.4109483000394045, 0.4890326154492517, 0.5356441339324143, 0.47139770322803753, 0.4407310393906563, 0.44658082898826046, 0.12663435092021702, 0.43047406437600466, 0.42537459518907594, 0.5694564222680317, 0.5149819014923924, 0.3509742086875143, 0.46216586789432546, 0.500681286412888, 0.3509147861409726, 0.28649626878397993, 0.405288080782343, 0.4779780780628927, 0.024728305089282143, 0.4185361280396068, 0.14404774339006077, 0.4421085541547315, 0.29892331188085564, 0.5039525975662074, 0.510995810711246, 0.526257074121169, 0.6105068277571324, 0.5383018510444117, 0.5278594340278735, 0.5085379964414016, 0.5668999138604265, 0.5464494067715668, 0.5846980407907392, 0.29694660081676416, 0.23494754202989843, 0.04105008968188251, 0.13595409328450747, 0.08684248246012116, 0.12066602828725081, 0.0795960594440055, 0.19645952365544628, 0.11401283904335902, 0.24378622691270124, 0.38120222467057663, 0.38875798888377844, 0.4039405460470109, 0.39443823627299457, 0.3821734642215029, 0.3008019202584047, 0.2741418216337458, 0.32504980316802035, 0.6609057500773372, 0.6931605601194613, 0.6708399453210956, 0.6855510835278789, 0.6946418682854334, 0.7041711869470366, 0.7059760810257332, 0.6727227264633286, 0.6874040207560808, 0.16413002568173907, 0.12887304745516392, 0.09310718160227593, 0.11294039596786465, 0.13861637397319615, 0.10998045563432535, 0.11506005872079805, 0.1372221004417945, 0.12439466862611337, 0.5540345920986589, 0.331994210118, 0.2078373505113138, 0.2183618357357331, 0.2299517416654664, 0.5896469531778661, 0.17864684255030516, 0.3367325085052937, 0.1881349217552375, 0.36611215891905313, 0.23645732730643154, 0.435047552245325, 0.40005470757433026, 0.4368081491054031, 0.4971236691070079, 0.45713122344651536, 0.5512248541126139, 0.4107863141075061, 0.21031116628470692, 0.22465868016927648, 0.26001319082565966, 0.3080276384212245, 0.1970778573463562, 0.29113131831739514, 0.3959832310875122, 0.3500732948960924, 0.2809912234881672, 0.19106601393530487, 0.22717428583860388, 0.2194510743872784, 0.24459235384550215, 0.2374739878681531, 0.21309774830714845, 0.23968118592382448, 0.19721535942764845, 0.23555963165315774, 0.19755971602496591, 0.2371582892489108, 0.20559471745734736, 0.19926850254050965, 0.21722628838344105, 0.20028788559721966, 0.4235592514404599, 0.1870743432062173, 0.18114271463092768, 0.8193289793927965, 0.7651380631009835, 0.15469846147622723, 0.8089381390905502, 0.16694540829420035, 0.7120243009723376, 0.80698803636677, 0.1944983994462175, 0.817922881918455, 0.19623051254120927, 0.16753658880325806, 0.15150414292938297, 0.8022345565307899, 0.20497674770829577, 0.7477429023450379, 0.7720089321228838, 0.14642720719767932, 0.15731035934342108, 0.19878932455788378, 0.21033038319603048, 0.18757340996706784, 0.17516644940152182, 0.19498006595827067, 0.2084018739448561, 0.21986998827542958, 0.17910163194698436, 0.2142543630659296, 0.09606241170620977, 0.13393988251912559, 0.08956834712230921, 0.08440161060697371, 0.09269398649425276, 0.09168330373448275, 0.09853507762119285, 0.09354487448930049, 0.09636351323526848]}, "mutation_prompt": null}
{"id": "b0acae0e-7739-4448-b403-7fb28d6f4f21", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6  # Slight adjustment for better balance\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.8)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Enhanced Self-Adaptive Mechanics and Robust Local Search.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7870987350386937, 0.772518642027322, 0.787728678541876, 0.8010768155416359, 0.7858126277044558, 0.7981966111874281, 0.7662631058241139, 0.8087458627542605, 0.7690837498367729, 0.5896795087852476, 0.5735828463662223, 0.5565392737708605, 0.5894808973567274, 0.6017160046820762, 0.5639929848560422, 0.6312073057755399, 0.5848169343420315, 0.5868629083356047, 0.12061128999816606, 0.5494421317282103, 0.14190306480767445, 0.15382114983953887, 0.12259768362876533, 0.13144750102407776, 0.12365857783104839, 0.13151555098113643, 0.15351739436204825, 0.10301885915320586, 0.11447178468660424, 0.10561358261394438, 0.12129722162780476, 0.11000471569198766, 0.13611168566855814, 0.10043188316143792, 0.090043166015214, 0.12918190052949596, 0.9732621583689356, 0.9815608289967621, 0.9818510617897828, 0.9785027520351097, 0.9792564143828625, 0.9822065439283073, 0.9823095614839283, 0.9790506626627897, 0.9795413886462214, 0.6150983459887418, 0.5640108269027803, 0.6244951432421865, 0.6200267030611315, 0.6119185791232105, 0.5969960056467587, 0.6185226102900205, 0.628923972494331, 0.5949339759948769, 0.7736840356835168, 0.8046487424038944, 0.8013336804898411, 0.7933406383001566, 0.2609792155194338, 0.7613405818748401, 0.752482495741054, 0.8071122782778353, 0.7814998894663063, 0.5535532934233942, 0.1249929576570672, 0.48532480991894444, 0.3911384587307051, 0.3762792506817956, 0.1234822546160278, 0.4215854205785353, 0.5406292687387089, 0.4859706009434315, 0.123855055362601, 0.5143795616659781, 0.6237899346108242, 0.5185170478308194, 0.5752111884529714, 0.566800902011283, 0.4972075508505991, 0.4677454108165018, 0.5195901436728843, 0.1633924876113091, 0.5520351202485271, 0.49944070284297637, 0.4788820797054245, 0.28498921698036017, 0.22969785541125298, 0.16671335625782635, 0.5701972939703067, 0.45482112697308064, 0.6129089428234611, 0.5907074902564944, 0.6073925560819393, 0.6409840927704913, 0.5507468518094081, 0.5515036160881457, 0.5738718840343257, 0.6134334186133665, 0.48497291684096033, 0.06124641794126107, 0.16720493553082083, 0.10664120415307876, 0.3609224600080322, 0.3500717402695108, 0.3374551425988106, 0.15795686538134923, 0.312489430229574, 0.27776098960287465, 0.48682412743852366, 0.39643427067218806, 0.40635826776662887, 0.3309448225366828, 0.432681611970551, 0.4275533769512815, 0.4194937787969636, 0.40573408098205943, 0.384182725699451, 0.7127015145255844, 0.6942192942167968, 0.6823039128582049, 0.7255047010191809, 0.7209093524394025, 0.7416583847973427, 0.6573925306454509, 0.729329908825407, 0.7272781835635522, 0.10983758034885216, 0.0815814639913347, 0.14760364609163557, 0.09949933544094858, 0.12520233526896096, 0.10382086923047829, 0.11949443539224636, 0.13550067992282433, 0.14551652419676597, 0.2104166356200391, 0.24761253808470196, 0.16736004209546773, 0.21069957148426566, 0.3178747451948474, 0.20405493302824973, 0.2016023287136537, 0.1569435079983752, 0.32233515098417287, 0.4668648776898553, 0.42923520535418547, 0.49466073637936636, 0.5330050602939242, 0.48410328718593076, 0.5084100137276557, 0.5073371715241586, 0.5173061281215685, 0.4780557830217459, 0.3169162837845394, 0.3468065173831366, 0.29849109561110176, 0.20372234445480686, 0.3129465001155106, 0.418253610420402, 0.34608326596776173, 0.35200057405278784, 0.22062289763841458, 0.21610700492297152, 0.20980598541198692, 0.19895890469831579, 0.20282820136653212, 0.21265301681019122, 0.19955491410658677, 0.2485951948230275, 0.219186851133931, 0.21177511905542656, 0.21417891275971446, 0.2290515321020663, 0.19951361848862204, 0.2192480859003212, 0.20325848224644782, 0.1985522526013549, 0.19134310349214134, 0.19128419477329295, 0.20835075318747232, 0.2011130207583356, 0.18136518698602955, 0.15480346923505584, 0.8568033281825458, 0.1659355150040135, 0.8099436876802873, 0.15918779105992675, 0.1384718004653287, 0.8377792932980035, 0.7976384823121043, 0.7490010600090697, 0.3283129367391415, 0.20777238880548665, 0.7952854859082754, 0.6776086942188557, 0.802925508818296, 0.20273872256748282, 0.7480380828768712, 0.1979086250905704, 0.21813056777725037, 0.20362282800165876, 0.17768017110198275, 0.19108221134425207, 0.2050148328403255, 0.20468033155912202, 0.1988493882729343, 0.21505535447641733, 0.08928553143436235, 0.09693808402808768, 0.08848415275924182, 0.08921400340364438, 0.09332038547768096, 0.10457266009268973, 0.09776342520115244, 0.09885487006882432, 0.07588945782540701]}, "mutation_prompt": null}
{"id": "18b7b281-4780-42a0-9e90-a9af4eed810f", "solution": "import numpy as np\n\nclass EnhancedHybridOpt_ACM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Fine-tuning cognitive component\n        social = 1.9  # Adjusted for improved global exploration\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay adjusted for better control\n        self.inertia = max(0.2, self.inertia * np.exp(-0.7 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Refined mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.15 else 0.65  # Dynamic crossover rate adjustment\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridOpt_ACM", "description": "Enhanced Hybrid Optimization with Adaptive Crossover and Mutation Tactics.", "configspace": "", "generation": 31, "fitness": 0.356898546355605, "feedback": "The algorithm EnhancedHybridOpt_ACM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7823927435801483, 0.7787837625739685, 0.7862693087834128, 0.7898854219133702, 0.7754689210036785, 0.7841345510187099, 0.7906800487942927, 0.7866610396033916, 0.7758547993211325, 0.6282921790329405, 0.6079053601770558, 0.6290609010499076, 0.6006871042512654, 0.5845191349417755, 0.5925144954359753, 0.5685331208288604, 0.6013134320335695, 0.6004375839935441, 0.1444354305445098, 0.1621111533008872, 0.11146545472550295, 0.16003802504858888, 0.12880995020155495, 0.09967358500972368, 0.16089150723538992, 0.10599317970930511, 0.1368646235968365, 0.08568507535683312, 0.10452581413109907, 0.15591218696631737, 0.12465761769536043, 0.10833213514045525, 0.08308968017290186, 0.1266149283914132, 0.10990578254708927, 0.12425928471424086, 0.9617435237349242, 0.9875126547564671, 0.9788373935939603, 0.9819049030672496, 0.9809248295703585, 0.9718254753555174, 0.9804956024007169, 0.9807491286155963, 0.9802035227010308, 0.6181109615041513, 0.05753808410826533, 0.0578773954213051, 0.6451605605964796, 0.6258287980031183, 0.5755834671511906, 0.5939039551557801, 0.49540820521011253, 0.5413313524767618, 0.7385636774266924, 0.3587516227584261, 0.7863614249924535, 0.1969697283052526, 0.19278468540605187, 0.7985171851266026, 0.7569453254942015, 0.7921791978120087, 0.7531349792639689, 0.1158813599171572, 0.386916156140679, 0.5120490466062992, 0.12099556317065485, 0.12084831082622771, 0.11430154218307165, 0.386998768446865, 0.5459189439336285, 0.5113187155714414, 0.22728514718795656, 0.5420886325098605, 0.4913128666888771, 0.30273879970212103, 0.12645891021348743, 0.11802122620064515, 0.11735743165139667, 0.38778222524052386, 0.5085817922885211, 0.060607914351638814, 0.48473123079759983, 0.2108230627265797, 0.025487069464854906, 0.025907807074285083, 0.016718689958212574, 0.20005734211429804, 0.329724352077606, 0.5928389529849085, 0.612835370260949, 0.5643752796142341, 0.47121733889024464, 0.32839767948004783, 0.20601976886913032, 0.38350336782019634, 0.3183068131151149, 0.5973526867893356, 0.4093944365060451, 0.26597283136707506, 0.06672268158851768, 0.11115172693926922, 0.08278105326201823, 0.1539196575750169, 0.0925332484996132, 0.13235637557765656, 0.11686518346111607, 0.08335733045689397, 0.3695514214262836, 0.22682163846735692, 0.32350900500666935, 0.4297817534582675, 0.3296372555760402, 0.33989193875060486, 0.3355555454787045, 0.2917464664490038, 0.2846300268218047, 0.7103103039227998, 0.6554704562872351, 0.6980182696693118, 0.7138315166431779, 0.5550011284515621, 0.6790860130797624, 0.615141917691292, 0.7176283402727712, 0.6996755547383893, 0.10549497236932515, 0.1594343665036635, 0.09480465014725292, 0.10767562635898487, 0.1381492111217254, 0.14292889636936978, 0.11856307138431565, 0.13702422176228102, 0.1312716469387638, 0.2738273512622571, 0.19161862893914694, 0.14699188824876852, 0.2847741156526705, 0.18932651838119496, 0.1494396403492232, 0.15388650807522386, 0.20323666857768263, 0.19110370934933563, 0.37322926341245966, 0.24447531079536133, 0.46050653474936143, 0.4615876946427505, 0.5575316599300857, 0.345645395401717, 0.5304175426326863, 0.48187881198076765, 0.5051177768587429, 0.2951922428457435, 0.3048485648517273, 0.22127254681093467, 0.21670075345526785, 0.3729139291215755, 0.2974624597163805, 0.3722954398292081, 0.27591078657227674, 0.3770846150612843, 0.2173714844344038, 0.2075085633874154, 0.23551613892779177, 0.20294778175504313, 0.23872464248806968, 0.21588222508263477, 0.22366917612163706, 0.22206643708535545, 0.20492960869828747, 0.19247357420304056, 0.21523289687313063, 0.2026047480703903, 0.2160775724517362, 0.17395603986706987, 0.21003549695309975, 0.1907760547278743, 0.18950047052352148, 0.21312478776552046, 0.16334497886704646, 0.16084228896144248, 0.18257454096412873, 0.8513578652554735, 0.16620142768701862, 0.19099891885849074, 0.16130658914395024, 0.18192037569771446, 0.8241492685524721, 0.786339246005302, 0.20264399878997308, 0.7510801302706464, 0.20297083711377228, 0.19671104083709334, 0.16414884983676226, 0.20991725947520967, 0.7680675840300542, 0.20002630393809318, 0.22283403942778257, 0.19987214285517052, 0.2116622113715636, 0.19769878739706193, 0.20715454315269943, 0.1853136307723694, 0.18937977418073892, 0.2023053423901341, 0.17736699625207475, 0.09022177766352557, 0.09409912483780392, 0.10772776093750724, 0.10141817066779601, 0.10051902852033234, 0.09358779917142179, 0.12970224919653062, 0.09488128272225038, 0.09180892200716095]}, "mutation_prompt": null}
{"id": "95a50240-6d17-499f-af5a-9b6a80b02047", "solution": "import numpy as np\n\nclass HybridPSO_ADE_DDL:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.8  # Adjusted inertia for adaptive exploration and exploitation\n\n    def pso_update(self):\n        cognitive = 1.5  # Fine-tuned cognitive component\n        social = 1.7  # Balanced social component\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Enhanced dynamic inertia decay for adaptive exploration\n        self.inertia = max(0.4, self.inertia * np.exp(-3 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Enhanced mutation factor range for diversity\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.25 else 0.65  # Dynamic crossover probability\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with dynamic learning and diversity strategy\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics and diversity\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridPSO_ADE_DDL", "description": "Hybrid Particle Swarm and Adaptive Differential Evolution with Dynamic Learning and Diversity Strategy.", "configspace": "", "generation": 32, "fitness": 0.3919455599853065, "feedback": "The algorithm HybridPSO_ADE_DDL got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7983435080747032, 0.7754779231070345, 0.7830120636939015, 0.807557301132372, 0.7740090749312608, 0.7783544350033964, 0.8094852003874752, 0.7887767730752835, 0.7923841746213174, 0.5783600954373098, 0.5585619774635375, 0.5593988994839156, 0.572071176897777, 0.5550760847458309, 0.5523882561522011, 0.5816320038139278, 0.554220003815727, 0.5614023447193852, 0.1465822517287585, 0.13974155832639135, 0.13900448633593165, 0.11494808649128752, 0.13713490217850144, 0.16005734500660673, 0.16191039220040315, 0.10551251965108444, 0.14093383929364423, 0.1375026494048368, 0.12424798379060464, 0.12942596472828138, 0.10703371219685343, 0.13182237172944, 0.1002272897514378, 0.12378465689309703, 0.11990399442069866, 0.12031269350525542, 0.9586569567379926, 0.987484847408621, 0.9763209686492984, 0.9823174334318516, 0.9806461120015271, 0.9822807819173914, 0.9881179469346344, 0.980639320857664, 0.9812265500698196, 0.6292775975536263, 0.056790878558306224, 0.5913506211859567, 0.5690135815239699, 0.5826003898540627, 0.573646760930519, 0.5987742799442635, 0.5327298665285202, 0.5625835527721795, 0.791063348645652, 0.8104334244588127, 0.7118658593753626, 0.20622549096625076, 0.20212244388803813, 0.2030633632444404, 0.801232508971269, 0.8099069301817603, 0.230081241243148, 0.12699865065515736, 0.4273956026265737, 0.5954413170169669, 0.47608514422438986, 0.12539998446436962, 0.4056369942420964, 0.49257018283542897, 0.5318607880635083, 0.5912122348909334, 0.603766462645178, 0.39366727605481444, 0.3910872886976121, 0.4850918560159979, 0.4906512849850244, 0.5502926221909574, 0.4265418044310696, 0.4643296943565388, 0.5503410753997426, 0.42880505588043316, 0.4774640852851749, 0.5030292738894004, 0.31855935327894913, 9.999999999998899e-05, 0.50715005407553, 0.4767128150910802, 0.4475686946952724, 0.45628045441510423, 0.6205463457099054, 0.486069707585142, 0.5720016006488855, 0.4938373345997623, 0.45822017654827274, 0.5321409014448246, 0.45602671182876586, 0.6010188260476934, 0.5622614940549273, 0.04480760922392457, 0.29153502833225864, 0.09633250883572708, 0.2868974276570325, 0.19884115628117494, 0.2767210293940796, 0.11591538416186764, 0.15082793433845343, 0.07950543433350865, 0.3223060312778393, 0.3423765810974476, 0.36396004482228594, 0.3732782796287111, 0.4072976043494436, 0.3140635318363675, 0.3087822180274242, 0.30578572673613813, 0.07777221495782538, 0.6797741857935605, 0.670854323196098, 0.7019998222579027, 0.7349949764798138, 0.7003349108577506, 0.7212274196264739, 0.7115544950644455, 0.6791466144620202, 0.6822204196480717, 0.09485746929844141, 0.17163785818157307, 0.07138983560385426, 0.08025584101382888, 0.12026686701587641, 0.1289227119767582, 0.1113943445432436, 0.12512695222167913, 0.13434105295423182, 0.1941913793134893, 0.2042522702892524, 0.22623809011103524, 0.1903051059971974, 0.24694285607008482, 0.22737295702759674, 0.4825713391929989, 0.3592663359849335, 0.20279759684830956, 0.5080731287126381, 0.3438273284658414, 0.4458343095500089, 0.418377033320657, 0.3216494711143648, 0.490807385820609, 0.280607834898446, 0.4748873487234748, 0.42671376093934354, 0.3221849013864314, 0.21198817889792387, 0.2816203681599403, 0.25617570172349957, 0.289566927749885, 0.37052309860557175, 0.3260045886340487, 0.34697119563547885, 0.4077692958949253, 0.212734105757164, 0.21597540125342718, 0.2280024273299186, 0.22374116184338055, 0.20829364037217923, 0.23841381025765418, 0.20492521065947877, 0.2135393716791466, 0.26765013723374864, 0.1922912350644148, 0.22176650540408693, 0.2113827756018214, 0.19624964962915536, 0.20090243257650686, 0.20066315560922343, 0.20338650032042982, 0.1737916690043385, 0.21638534729244785, 0.18544044578687324, 0.8294368098044215, 0.15416584226654162, 0.8781136190435918, 0.16686057033345203, 0.8485769723954497, 0.15165935111712991, 0.19417551182837867, 0.8463476976245372, 0.7803847991313062, 0.20237481885726427, 0.1636133192038547, 0.2071035636633063, 0.1270012153702026, 0.7588648954300027, 0.8182264412453142, 0.15019510913885425, 0.7979506716898179, 0.1999126608254277, 0.202548797276902, 0.19329801398751045, 0.23702754123542802, 0.21964674424808006, 0.18269574784966403, 0.18601995219825918, 0.22705412158059157, 0.19466261853738953, 0.08924321396879675, 0.08003743264205077, 0.08817329113770278, 0.09904420126376667, 0.09540075660156977, 0.10394806770203335, 0.09831085770613157, 0.10034920526306501, 0.11024170652799947]}, "mutation_prompt": null}
{"id": "9b91428d-432d-4dd5-9465-7d98c272acbc", "solution": "import numpy as np\n\nclass EnhancedDualStrategyOpt_Adaptive_Exploration:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.85\n\n    def pso_update(self):\n        cognitive = 1.4\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * np.exp(-0.8 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.3 else 0.65\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedDualStrategyOpt_Adaptive_Exploration", "description": "Enhanced Dual-Strategy Optimization with Adaptive Mechanics and Diverse Exploration.", "configspace": "", "generation": 33, "fitness": 0.36908136977894984, "feedback": "The algorithm EnhancedDualStrategyOpt_Adaptive_Exploration got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7822437659126242, 0.745593728928526, 0.7598324664917699, 0.7894669729034908, 0.7855595246908014, 0.7690424672479891, 0.7827653870420532, 0.777585212317987, 0.7483288172049694, 0.5858729055070796, 0.591634038660249, 0.5721933155768364, 0.5673491572658589, 0.5713428301990546, 0.5703596677385485, 0.5729163987226567, 0.53187058568415, 0.5695602591621698, 0.11854510064235058, 0.16550808038668352, 0.5118018470347566, 0.13814794124859986, 0.13248701906101346, 0.11444122376294596, 0.1438233054425282, 0.16395399066771532, 0.1042466281622535, 0.09627424749989111, 0.13866258195914105, 0.11387628211033862, 0.13392577886082213, 0.12836980333798398, 0.1002946244607501, 0.10992126532645108, 0.11792676622855836, 0.13862932512255466, 0.9619068686492084, 0.9875152637510604, 0.9805273419361782, 0.9818993560784244, 0.9807324041644696, 0.9866103170056567, 0.98192769229772, 0.9807075913792699, 0.9812178237530491, 0.5623781913665817, 0.057281326117390896, 0.622110646330586, 0.5692572489156134, 0.5916597441025058, 0.6059114785824216, 0.5980940143656753, 0.08664135141018736, 0.6262441789821018, 0.6868537681897946, 0.7997667382135185, 0.2189513294573412, 0.7785528284044972, 0.7385570129413381, 0.2492010650799119, 0.7690526168143518, 0.7936578852145112, 0.2325153954037903, 0.11805764035377964, 0.38674511550106816, 0.6037585158057164, 0.5242356284278344, 0.12059571883223075, 0.11650301828478327, 0.12570896114997598, 0.4563417548323143, 0.401279491038514, 0.12047616904909098, 0.537875677283087, 0.53116095392934, 0.47283158279679993, 0.5179286540870662, 0.35106283547686357, 0.4310327619064166, 0.11502986133554383, 0.12607239305638396, 0.0586459245739106, 0.06298610143348271, 0.16876007025036777, 0.017517439051149664, 0.4570416425459619, 0.21655941573143245, 0.45963571041948903, 0.40011838581484616, 0.2241607199288893, 0.5559171953244391, 0.5184615961699244, 0.5263474562958441, 0.35448850696872425, 0.2992433688955324, 0.3065502147179835, 0.5592458135495373, 0.5357562039374664, 0.5977662304224015, 0.16623386881801872, 0.1506265341655142, 0.1895670601586824, 0.06803346692748202, 0.06687294866722693, 0.2185283559211264, 0.21017357454976893, 0.07140720070652429, 0.0745543749377866, 0.23524525520142392, 0.4090540172595899, 0.3567419246742969, 0.37225748453147667, 0.40603424612647665, 0.3727895287460993, 0.29045368856460396, 0.2689822602052987, 0.07208358132722148, 0.7083861761584422, 0.6602018454773729, 0.6789434538795271, 0.6935055118810689, 0.7067835632491165, 0.6510525191387722, 0.724516709814267, 0.6871452396834778, 0.6291139408459944, 0.12431182510606964, 0.07152149158714294, 0.12504645727046992, 0.10542193173958636, 0.12171139784119478, 0.11512861030176846, 0.10987201663143309, 0.12486031733704073, 0.14828287410487506, 0.1482571869434205, 0.22189928100382716, 0.1615642115273901, 0.24614527141815445, 0.19119015680204332, 0.17039082722093846, 0.2891453967640456, 0.15085585228567888, 0.20914721832328986, 0.24377972236130718, 0.4211309084443292, 0.4387249259315821, 0.38130975943506484, 0.5746809657418368, 0.46423874078075567, 0.507729105595208, 0.4066986734251844, 0.5447498817138869, 0.21892533686704652, 0.30650862714819194, 0.31896940828292, 0.1838994733845728, 0.24230991158387238, 0.28291131018915594, 0.3303604742698767, 0.3619980529915542, 0.27966023555513453, 0.20501264757767135, 0.21376978472764652, 0.23014137673181745, 0.19801883153163147, 0.242251429441127, 0.20750779514933715, 0.20904220565395137, 0.2527057513833806, 0.20606385746962308, 0.22819145933904694, 0.20247575427592268, 0.18166478827440324, 0.1990042849267617, 0.17949901048538086, 0.5159472129875962, 0.2388070236685932, 0.1898386117471843, 0.1975013164018703, 0.8483482127520575, 0.183606719673575, 0.15382545093405986, 0.8299238267949856, 0.16546627349058995, 0.19181461028971336, 0.16176428350564998, 0.18339543745606202, 0.8224167902841997, 0.7926983207233886, 0.16601846046176016, 0.19104084216260353, 0.20240268389781335, 0.6500770888409193, 0.7199411451200128, 0.7841429086880639, 0.7574274414252088, 0.19773778909787865, 0.23793723438603998, 0.18109631429941486, 0.1940391468770688, 0.1961446609454638, 0.19376153461502277, 0.1885028277366365, 0.21034677099615928, 0.17732705779538172, 0.22170283270715463, 0.08836643488551255, 0.09130584204214298, 0.08976717610312501, 0.08705211281996761, 0.08362806745492946, 0.097431192248436, 0.10060535362102219, 0.0883340331158452, 0.08212616204834833]}, "mutation_prompt": null}
{"id": "ddc045b7-82d8-40fa-9ac3-09311eae4810", "solution": "import numpy as np\n\nclass AdaptivePSO_EvoHybrid_DLR_SGS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for balance\n        social = 1.7\n        learning_rate = 0.1 + 0.5 * np.exp(-self.evaluations/self.budget)  # Dynamic learning rate\n\n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = (self.inertia * self.velocities[i] + \n                                  cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \n                                  social * r2 * (self.global_best_position - self.particles[i]))\n            self.particles[i] = np.clip(self.particles[i] + learning_rate * self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.2, self.inertia * np.exp(-self.evaluations / self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        np.random.shuffle(indices)\n        a, b, c = indices[:3]\n        F = np.random.uniform(0.4, 0.9)  # Adjusted mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n\n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.3 else 0.5  # Adjusted crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptivePSO_EvoHybrid_DLR_SGS", "description": "Adaptive Particle Swarm and Evolutionary Hybrid with Dynamic Learning Rate and Stochastic Greedy Selection.", "configspace": "", "generation": 34, "fitness": 0.29543815264637335, "feedback": "The algorithm AdaptivePSO_EvoHybrid_DLR_SGS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.8448452407399517, 0.8228478998660022, 0.8296164755050135, 0.8373297717360566, 0.8413887077637328, 0.8376840760337301, 0.8310328051749912, 0.8338882210227243, 0.8272227548795377, 0.1548213481466464, 0.29861353961485415, 0.7053244478752787, 0.6525948019215244, 0.22834494762163282, 0.17849684129209586, 0.049096859819350525, 0.24822024732309678, 0.14505062883463837, 0.1304418566657658, 0.12556116640288784, 0.14156074887361225, 0.14006956620801536, 0.12983980985347876, 0.6034803138289057, 0.12933032823139734, 0.10288629560594109, 0.16746034567486245, 0.16774241640936194, 0.09708187822701364, 0.12251822899852682, 0.10677444573009309, 0.11099656525563273, 0.09301437243792554, 0.12276961430758859, 0.11373936651968275, 0.127876400370334, 0.9777915061445924, 0.9712469201874055, 0.9433905302440361, 0.9731174616835503, 0.9541661414103828, 0.9551709180628738, 0.9805059804740467, 0.9798235226512824, 0.9776619143370325, 0.2928965648800066, 0.29810837114211963, 0.38154078895216104, 0.33592521868159075, 0.28677625087468706, 0.2505925976431902, 0.4716060603087334, 0.37577209537533085, 0.30894449447965144, 0.32087875410211886, 0.37322077929799624, 0.22091901047319396, 0.2677716479968383, 0.22825288951191525, 0.1130299999628529, 0.8400715580157585, 0.834256089067925, 0.36939183131108744, 0.12339234815229738, 0.11429154118338991, 0.11377473011416239, 0.12233415763267297, 0.1355504011467188, 0.09328541491004194, 0.15027962866771727, 0.1791452214225292, 0.14273811966503835, 0.123463119052732, 0.12287254815007687, 0.1253940322183531, 0.16963691436599404, 0.1380802584443228, 0.11985241461483642, 0.13751881785319875, 0.13829565686393486, 0.1563827543789914, 9.999999999998899e-05, 0.10772101784747978, 0.06750884031342463, 0.042046924269902974, 9.999999999998899e-05, 9.999999999998899e-05, 0.045874092360782215, 0.056977192078361605, 0.08129538347242327, 0.3795301491702122, 0.1608888015019746, 0.11581824440780386, 0.07350670656710079, 0.12179681271994125, 0.06572976556758481, 0.22611812706821177, 0.07555978000510677, 0.024842523722660603, 0.048873294867098016, 0.07222836678444677, 0.03282082907548667, 0.0719499203110705, 0.08413747306735464, 0.09393225516907022, 0.07640458579932419, 0.09022534385892955, 0.07460011824175894, 0.04983747185762044, 0.29800069284465913, 0.15375952889074274, 0.46253697933017923, 0.18301644397978267, 0.05386218525411801, 0.05895730512804964, 0.05304363292659442, 0.09519771748959005, 0.5213738402299974, 0.4724042823199316, 0.5156552123699059, 0.47280615441410156, 0.493928004823576, 0.5716275484421494, 0.4988388660912001, 0.5343968665966751, 0.5089133163504014, 0.12925180150519777, 0.13256684225523674, 0.12313080462129933, 0.14920668664574965, 0.11072413408848092, 0.11221931580219102, 0.14384992657882634, 0.17417935937197782, 0.08970286523986959, 0.23194457275365832, 0.21885416794138368, 0.1964136520329577, 0.2594276637094477, 0.17938821633888424, 0.20499815463801152, 0.32413238699816893, 0.28410471916898183, 0.1796582946873697, 0.30291399443700984, 0.3889164336573172, 0.24411418626600134, 0.3628462055504653, 0.46451862359950413, 0.5466233712567393, 0.41407404822723115, 0.3741554105654262, 0.3459313094526846, 0.21967949940921172, 0.2690035466860864, 0.24120688038975513, 0.33493747833463294, 0.18468076808748068, 0.2714646349993055, 0.2695970672215854, 0.45162409180443086, 0.2918196927425796, 0.25964189027905027, 0.21883696050468782, 0.21510125714003747, 0.22364521698040574, 0.23690600899271608, 0.20069500078146119, 0.23841546914554268, 0.22796811309848208, 0.2949632781715439, 0.19736029549144396, 0.18750356464192763, 0.2181529975913551, 0.20444154550907245, 0.2238643204414238, 0.1956163982852388, 0.19990162444097304, 0.20673133419779555, 0.2019444591682389, 0.8671809844320404, 0.1860330030659918, 0.15422542659145733, 0.8685686657893725, 0.16787754074387595, 0.8512777713246888, 0.15175822432046393, 0.1771260082436229, 0.874381636318777, 0.7337300341766959, 0.8130348438428945, 0.8475551200647846, 0.8496982957482835, 0.15157134690485596, 0.6497444373837695, 0.333966802798655, 0.10228120419283626, 0.39436448760000953, 0.17612132643346667, 0.19978911418734624, 0.1890326395421409, 0.20878247389974036, 0.20400355847509344, 0.1763148767252376, 0.18084279925099622, 0.18012500294156886, 0.20349791845028709, 0.09961150560963528, 0.08983930668165052, 0.09465388972790112, 0.09024035919017093, 0.10394345444128117, 0.10133346049876657, 0.10219819585998924, 0.09618227069695717, 0.09267853506675894]}, "mutation_prompt": null}
{"id": "09269c34-e437-409c-92f5-fcd71db6ec6a", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slight adjustment for better exploration\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adaptive inertia based on performance for balancing exploration/exploitation\n        self.inertia = max(0.4, self.inertia * (1 - (self.evaluations / self.budget)**0.5))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted mutation factor for dynamic adaptation\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.15 else 0.65  # Fine-tuned crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with reinforced rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mutation mechanism\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Adaptive Particle Swarm Optimization Enhanced with Stochastic DE/PSO Hybridization and Adaptive Inertia Strategy.", "configspace": "", "generation": 35, "fitness": 0.39369795312137473, "feedback": "The algorithm StochasticDualStrategyOpt_SAM_RLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7723778938133794, 0.7618586957644357, 0.774245443245237, 0.8084707988358738, 0.7745607047849447, 0.76495637374831, 0.7842083923364881, 0.7584417978675495, 0.7557771261806733, 0.5259253613260688, 0.5655111698654197, 0.5133970564812176, 0.444973351256439, 0.5245400046194107, 0.5242322536433164, 0.5204098270966513, 0.5667777228347946, 0.5221290928091082, 0.13616885444939075, 0.1335953944097975, 0.13460805486152572, 0.4648535944054897, 0.11320256702363807, 0.17410149906267358, 0.14982544280536658, 0.111922586711379, 0.14076737029546604, 0.11627334341287698, 0.13719186440159314, 0.1409741418705609, 0.22949918439783534, 0.10417026543385854, 0.11825256095893144, 0.12163515639219225, 0.1329398393270077, 0.11865768979013902, 0.961312568413572, 0.9875126547564671, 0.9804735566593399, 0.9819049030672496, 0.9809248295703585, 0.9717787039674229, 0.9804986848836523, 0.9807491286155963, 0.9746732813825725, 0.5753975306180732, 0.0585526614302857, 0.5246087992906967, 0.5759908870762521, 0.556458914865215, 0.5246257114448281, 0.532295361173586, 0.5005702777720069, 0.45982072530741247, 0.7888525694754188, 0.8299076944440331, 0.7388611456871792, 0.7448495327751707, 0.18751869360285067, 0.7225433963563919, 0.7189609837386588, 0.8001104100776801, 0.7854372932809521, 0.4826358760529511, 0.5780308890462057, 0.4261969784492554, 0.41836633716823113, 0.5174640679764425, 0.11642917944839959, 0.5909859610796733, 0.4852982869150142, 0.4965424094648576, 0.4728366269632839, 0.5038757725580894, 0.12602932651106624, 0.4641687747104095, 0.4536625099260658, 0.6125501012546092, 0.1273592696938065, 0.12943064099189383, 0.44272988015066506, 0.061223305072502066, 0.3681592014190368, 0.3856910025919952, 0.39574646701330485, 0.5070313113585934, 0.45565636156000144, 0.45680666742780407, 0.40461136664200226, 0.3192895520853489, 0.4625868715740922, 0.6029584748880581, 0.520333955042405, 0.4495969303765639, 0.5148051159743261, 0.5069939325629957, 0.5280159998556149, 0.5331522478727806, 0.5194375433528817, 0.3271590220042131, 0.19469102561688145, 0.061520337560650895, 0.0661309847309367, 0.06620409171344421, 0.07041330350448938, 0.11913480030222257, 0.26605820000754477, 0.10191252655745953, 0.3292283568602463, 0.346567830998584, 0.3488084030878289, 0.3654759443626612, 0.37648958504681973, 0.3988720493113871, 0.35263890009034327, 0.31797697034804906, 0.2125188479131751, 0.6798824648075452, 0.6903744130640339, 0.6673235921360223, 0.7450657322676781, 0.659559907821659, 0.705381716674216, 0.712657131007395, 0.6688146595516475, 0.6599486080588528, 0.12527291187773648, 0.12045010740983109, 0.11941372517366122, 0.13153276464919506, 0.16928759475097122, 0.14464778508030396, 0.11840975091671957, 0.13225996250668837, 0.14517700664276512, 0.14031179169663843, 0.1742561014789359, 0.1628489820748329, 0.20454294313507115, 0.19359361341199366, 0.21532706257357015, 0.5191391739953792, 0.17681224738422974, 0.49786539206132396, 0.4331591707276139, 0.22719263997067152, 0.48759081430286555, 0.39718681370265774, 0.4827899170194727, 0.4491320635185956, 0.4752146212143089, 0.46421847496600444, 0.27833764971045616, 0.22224736926219257, 0.3241155196400598, 0.2826322894877511, 0.27468571006077036, 0.2971875970725608, 0.300538678800639, 0.43952412451679124, 0.3514950374655549, 0.4010224532861747, 0.220488202813392, 0.2458176309821578, 0.20776812533349076, 0.22019854068671652, 0.19610785006849396, 0.2081015701001483, 0.2039280405012771, 0.2064844369240404, 0.21009855737184424, 0.18446081089030253, 0.23043468472883688, 0.22510148877088354, 0.22331313167164357, 0.19226972484004623, 0.23035614374700097, 0.21722250248459318, 0.2016102589631894, 0.6039258825031513, 0.8391404188528548, 0.14392476666484066, 0.1541843171710391, 0.851802742116889, 0.16632501848048142, 0.8394145364700019, 0.162266298717346, 0.1806218462609238, 0.8593110243933585, 0.862383672879381, 0.16587969095985822, 0.12311938504236875, 0.2077820532786515, 0.20222372470253613, 0.16447841952586384, 0.8258916958009058, 0.7964890376233122, 0.6963658952708798, 0.18053595465586225, 0.2075394417839892, 0.21461139716804245, 0.18619514258958725, 0.18504558306470875, 0.20300616579176434, 0.21986420172896082, 0.18324199740379643, 0.1888081182082667, 0.0928690262325299, 0.07913418143072304, 0.09179684141756861, 0.12973592877882423, 0.08888388007965242, 0.09376395588077135, 0.13555384459793118, 0.10051239824477087, 0.09482584933233451]}, "mutation_prompt": null}
{"id": "5f48ddb0-5d23-42cd-9c4a-5365b2fecf4a", "solution": "import numpy as np\n\nclass EnhancedStochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slight adjustment for better balance\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.7)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.88 if np.random.rand() > 0.15 else 0.65  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedStochasticDualStrategyOpt_SAM_RLS", "description": "Enhanced Stochastic Dual-Strategy Optimization with Self-Adaptive Mechanics and Strategic Local Search.", "configspace": "", "generation": 36, "fitness": 0.41340817260175, "feedback": "The algorithm EnhancedStochasticDualStrategyOpt_SAM_RLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7879598306591515, 0.7608130346411868, 0.7783616212790647, 0.795730739391636, 0.7858650885402709, 0.7756012730671091, 0.7939404243851211, 0.7805154646314211, 0.7895724382348928, 0.5757943121102774, 0.5787490934104984, 0.5893522322010558, 0.5761460906851186, 0.6031947966231342, 0.5689656599337576, 0.6221890465221243, 0.6035512581419057, 0.5725205677292274, 0.14171609620153325, 0.1393651608068499, 0.10156188785250253, 0.1410695527415461, 0.15918055464357517, 0.1081058809548554, 0.11388779653513614, 0.13350156688546266, 0.16805203321114148, 0.0978028041519079, 0.12300901938060893, 0.1506979825239778, 0.10881856939432288, 0.12517724117317486, 0.10499433620453169, 0.09130501583036443, 0.11996175794769659, 0.10899330760912018, 0.9611253741000972, 0.9878496466455366, 0.9721815404376992, 0.9795557842689974, 0.9791587336384272, 0.9786946957825163, 0.988668594082452, 0.9732188924547824, 0.9716333605910903, 0.6241126821262052, 0.37938744229351873, 0.6315077370416926, 0.6143657780639697, 0.5719465908200922, 0.6205289157941585, 0.6069792231120387, 0.08562939020705818, 0.6247652026373751, 0.7495105943968482, 0.35613911404315624, 0.7841957826613929, 0.7755622611449804, 0.2008523311030651, 0.196957946112164, 0.25744722281834, 0.8029532202473356, 0.7753793297460692, 0.12315216943058205, 0.5536937214950917, 0.5292136824581533, 0.5152581260794884, 0.5011703608743392, 0.11298498793363887, 0.5176070400958541, 0.5500697820511433, 0.4857119553098802, 0.46389929726662515, 0.4200838341886657, 0.5714442115559253, 0.5751064646442696, 0.4965609184189368, 0.46692845957649576, 0.5013762990993875, 0.48415661032086565, 0.4988088720286209, 0.4779171574724491, 0.44586551323205603, 0.5326239652222406, 0.5228514446195627, 0.4971630378689549, 0.0977917269448042, 0.5170595001578278, 0.5634388899714724, 0.498356245775629, 0.5843969652941374, 0.6002968171718852, 0.5998086552563915, 0.5738250718754812, 0.6354888505338299, 0.5402498924926515, 0.6110728944273285, 0.6199614946505294, 0.5981645168207135, 0.1857813042283033, 0.2893528217862419, 0.04892779035493677, 0.16329186086000502, 0.08132402356419721, 0.09486707926881555, 0.28748124930901353, 0.09791382557993678, 0.09881157787229444, 0.3348228255203367, 0.4206625919954162, 0.3511469223395063, 0.33374730241804695, 0.4217955836116979, 0.35826210871318676, 0.3906287508843408, 0.42600446558254756, 0.42395140083394367, 0.7405663544629739, 0.7468922498348566, 0.7053828989275406, 0.7118836394210676, 0.7144117194846767, 0.7068184044045781, 0.6951623187217435, 0.7388905371885461, 0.715839847488146, 0.10412200001276672, 0.14639722916305908, 0.09912626644213574, 0.09319314273127854, 0.10522217851305027, 0.6051268508178603, 0.1430212396399374, 0.10869092592325413, 0.13151246780774162, 0.2124350922450462, 0.18037531212631297, 0.29890143529743785, 0.14276632662647992, 0.45529139097666094, 0.2271088386059006, 0.1751028060523977, 0.30021508039476186, 0.6612394702891892, 0.42347690245125347, 0.37335521071829203, 0.5064479075883764, 0.43524550978888443, 0.48990282529977436, 0.550184411542089, 0.5088534975069139, 0.522643232306043, 0.49697893995644926, 0.27992877345115363, 0.3195564574303301, 0.23142009472818814, 0.3111737158052068, 0.25337167565829055, 0.27545197463240034, 0.3869906233152356, 0.28031844154710095, 0.22701657478116433, 0.24401956086767262, 0.20493900965138512, 0.208825786926218, 0.22222767000729227, 0.2432679672210355, 0.22698073372592475, 0.25655858212725235, 0.2450119135479355, 0.2018089462065229, 0.22891108428199813, 0.19006944838372708, 0.18738288277102944, 0.23760854661096564, 0.19659452620400253, 0.19280210194211733, 0.20100858390908283, 0.20250906370871669, 0.1851171906282677, 0.8599357319674612, 0.15685774514827588, 0.154939683951965, 0.8484589564505048, 0.16603022663956357, 0.7991485428947644, 0.7937232361376689, 0.16175506423666575, 0.8445649508815929, 0.807696998181326, 0.16403912832681056, 0.7755127772091972, 0.8497954937004669, 0.2053449956398502, 0.16232961023593673, 0.8093072122703671, 0.742691456259162, 0.20756658612885726, 0.18069320849322013, 0.20706549580986577, 0.18193985030782456, 0.20410924453972001, 0.1935564397228957, 0.20797807662165646, 0.22121368177117784, 0.192826337066079, 0.21855315168487122, 0.07797480093595399, 0.09464980920640231, 0.10037645378422588, 0.0994332964320731, 0.09315754977558699, 0.09391478367322348, 0.09496871379845273, 0.09158399320738442, 0.10015176811426152]}, "mutation_prompt": null}
{"id": "3a29182e-0d18-4c77-95f2-3a15b9298d1f", "solution": "import numpy as np\n\nclass AdaptiveDualStrategyOpt_DynamicInertia_ED:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for improved convergence\n        social = 2.0\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Dynamic inertia decay for better adaptation\n        self.inertia = max(0.2, self.inertia * (1 - (self.evaluations/self.budget)**2))\n\n    def de_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Wider range for mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def de_crossover(self, parent, mutant):\n        cross_prob = 0.8 + 0.1 * (np.random.rand() < 0.5)  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with adaptive update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # DE phase with enhanced strategy\n            for i in range(self.pop_size):\n                mutant = self.de_mutation(i)\n                trial = self.de_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveDualStrategyOpt_DynamicInertia_ED", "description": "Adaptive Dual-Strategy Optimization with Dynamic Inertia and Enhanced Differential Evolution.", "configspace": "", "generation": 37, "fitness": 0.3418505214573704, "feedback": "The algorithm AdaptiveDualStrategyOpt_DynamicInertia_ED got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7259016665344864, 0.6704643774186376, 0.6800598706382669, 0.7278598094902898, 0.7145617252486145, 0.6996078336995998, 0.6863751132304842, 0.7141206230532426, 0.700604045175485, 0.494148152667528, 0.49701515133145646, 0.47893160695269976, 0.4705004083142471, 0.4683491275325685, 0.4803989148139629, 0.48593909298710414, 0.4846864493143619, 0.4934538774289067, 0.12527297206916577, 0.12306751056816934, 0.14033930302125208, 0.1330234932202411, 0.10952584064809745, 0.12140092091279875, 0.1289206923986851, 0.14429507527293317, 0.1156787065438466, 0.09098605259841586, 0.10384717638120056, 0.10208765731213332, 0.09164034824200185, 0.119610435073493, 0.10207708752256806, 0.10068240763275083, 0.11864280181243991, 0.09651366204303413, 0.964148493023889, 0.9809251104227135, 0.9785293845415659, 0.9743329981419886, 0.9808900577148014, 0.9807971287114725, 0.9819626178205721, 0.9805004526893132, 0.9806363543417345, 0.5097431614294434, 0.057219882306703274, 0.05678670590414292, 0.5293572489004452, 0.5035351165243842, 0.4254886695425183, 0.4857500358453013, 0.5092008068747189, 0.48193464592955393, 0.6879344171215865, 0.6849409904582915, 0.33044691150270233, 0.20323281442564012, 0.6435919650137853, 0.7032687789664704, 0.6877807583477611, 0.6885005049648873, 0.6702132141819961, 0.35242314347907666, 0.2941248032990188, 0.21868106737818227, 0.34348435700320645, 0.11137061562956418, 0.2020457029963273, 0.45630558198218774, 0.4358775878980179, 0.34860203613100804, 0.3514111453896308, 0.28986469973476836, 0.3195588446139267, 0.4466465541802841, 0.4360843412868435, 0.10977520350504999, 0.11254893563408663, 0.3640582471450452, 0.37617511495800626, 0.41482389972037537, 0.3610178706657303, 0.30556340429529805, 0.457360498849137, 0.42499758701035506, 0.24217122576356465, 0.40153392673186694, 0.26319321873617973, 0.0970932814815183, 0.4207804094732426, 0.4302871841121755, 0.4479141511280701, 0.4823874562628122, 0.48018559839463837, 0.4350853270497237, 0.47926617481732137, 0.5060635108949285, 0.4662247045722504, 0.21235515153218765, 0.20452494669344423, 0.07549380522934479, 0.10420418720854818, 0.23398003106452947, 0.12551001676991158, 0.09327745625902828, 0.07670938825291074, 0.11177023052909663, 0.2974702072182187, 0.2589886384243323, 0.32103845910442874, 0.27266651890087246, 0.21013573256768414, 0.26136351256711543, 0.2834485837424149, 0.31084946006648984, 0.06905343829025345, 0.6330642207667814, 0.6135075078463751, 0.5907747780913508, 0.5894583323985969, 0.6389343918851746, 0.6382285710398917, 0.6247652048725686, 0.5965007570245566, 0.6346354076397954, 0.1251375307496041, 0.13841484167786744, 0.1313962355610223, 0.09080986863861384, 0.11566381536669668, 0.13769579887766814, 0.11217801810810091, 0.10315464023536292, 0.08355313810344756, 0.1850633288469209, 0.16533329868264413, 0.1990256994998444, 0.2736953170271681, 0.2051087414475644, 0.21282593405492012, 0.23228661295215935, 0.19243826412170306, 0.18796195305581798, 0.35643892079933626, 0.42194648801182344, 0.4118769224861558, 0.3835859223491217, 0.2818903922757253, 0.3681618797649596, 0.3476038401021546, 0.38391917100472883, 0.4081715116034066, 0.3016563767512336, 0.24741236021716317, 0.2985127392827134, 0.3280929634505615, 0.2526740061833681, 0.28444693600063553, 0.30438501141729135, 0.38109549279429245, 0.2725532399337285, 0.22323920797582508, 0.18996511891799883, 0.22357110605607455, 0.22187435782140297, 0.18460211696073237, 0.1956912349819998, 0.21676655928347988, 0.19837747104479564, 0.2113056429882505, 0.22637209472451636, 0.20510414999696303, 0.1953460234913289, 0.19210111778307792, 0.2016948188021136, 0.17169158231562998, 0.20787534704533273, 0.22025353827982763, 0.19287767318411475, 0.6811914638702118, 0.2023372705941865, 0.1542339585199487, 0.781887435391379, 0.16584481970980747, 0.171779048706301, 0.7448655648136275, 0.16253704667318047, 0.7071833079480176, 0.1823173087031842, 0.16606996545982455, 0.16202711811137382, 0.6053032214457186, 0.16358892835879846, 0.1905995972707265, 0.20793386715465945, 0.7353907514569689, 0.20109731460265934, 0.18472776134733082, 0.21551662801174476, 0.20549008528716128, 0.1936080179373998, 0.20963816305067828, 0.1936844537577822, 0.200399511409448, 0.21998468577142294, 0.18814240971071616, 0.09729582521057567, 0.08053195542930558, 0.1311269531467606, 0.10061594954624054, 0.09037369160472097, 0.09421170215181895, 0.0891497464868991, 0.08903251189971106, 0.09518265820986016]}, "mutation_prompt": null}
{"id": "dbfc51a5-3fa9-40de-9f5a-c0546dbef0be", "solution": "import numpy as np\n\nclass RefinedHybridOpt_APD_ADC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.7\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * (0.9 ** (self.evaluations / self.budget)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.1 else 0.65\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "RefinedHybridOpt_APD_ADC", "description": "Refined Hybrid Strategy Optimization with Adaptive Population Dynamics and Advanced Diversity Control.", "configspace": "", "generation": 38, "fitness": 0.3266042144723966, "feedback": "The algorithm RefinedHybridOpt_APD_ADC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.22.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.6214187557373587, 0.6089069857074083, 0.5726535884718594, 0.6675644034027399, 0.681801464510732, 0.6354748472753018, 0.6276886430368509, 0.6403767620613956, 0.6450009960949389, 0.40432794497250313, 0.39302948407110894, 0.3818309784164696, 0.3815430943696101, 0.3944458437766465, 0.41167752081356235, 0.4077944724521413, 0.4219129517927469, 0.4088575040908049, 0.13315440855459326, 0.1336339650056927, 0.13442807666630452, 0.12778354685305726, 0.11122654282490763, 0.10199416648007953, 0.14252824633803007, 0.12174403254655808, 0.11399119360723575, 0.08829158784998692, 0.1134185985162387, 0.09463900735735875, 0.09461940892162002, 0.11487968195663811, 0.11133174933970169, 0.10601408110056798, 0.1031256178731883, 0.0891122020810522, 0.9611426725770174, 0.9874986294623358, 0.9803976581442048, 0.9872434808932324, 0.9807309112409033, 0.9718426384403079, 0.9862811708553164, 0.9807068619790822, 0.9801673337783341, 0.4113469907778241, 0.3447905491482044, 0.399658392735721, 0.45156614209002255, 0.40247581134929955, 0.463045379968432, 0.4563376845503855, 0.4073309962881182, 0.33964621060555555, 0.6677646295279163, 0.3246563112566876, 0.6431743546769917, 0.1905115697167593, 0.18988459904889776, 0.5937692170823032, 0.6559794474399332, 0.6756717140633554, 0.6752794821831396, 0.31539615537900967, 0.3686783857558278, 0.2997490309482942, 0.39901304142862115, 0.36840035504406454, 0.2933952622670797, 0.31874596160230106, 0.29710910860660933, 0.277411641514796, 0.37104792072368864, 0.32548550508735163, 0.27075940473635396, 0.27113023621286225, 0.3792338961545182, 0.2936507484244635, 0.31371231538729316, 0.10773704272141071, 0.3012034235591565, 0.19628043111376448, 0.29422475204752563, 0.33599210206455643, 0.3131740180144975, 0.02561583250457411, 0.28315236854450865, 0.37118907811860347, 0.33594346865992364, 0.26152963969844223, 0.41052510946529586, 0.41865221167511923, 0.3554258173204031, 0.41583229369757446, 0.4385035411336605, 0.3913199075245314, 0.4131442002792296, 0.4054806588630343, 0.39095472787439534, 0.11408996824978057, 0.09598248047471503, 0.06689925769767846, 0.04893158726592717, 0.11381128852629552, 0.10409101074646787, 0.16400154085876473, 0.10090708273927085, 0.12092040520968217, 0.2837018730499645, 0.1897338747571481, 0.25671632495653207, 0.2689722437046085, 0.2787470540902882, 0.240575228480426, 0.2724236003675594, 0.2437712847124831, 0.19200574324428343, 0.561448572624516, 0.5610266053102625, 0.5520172582640646, 0.5788772664803915, 0.5711006299458556, 0.5856681055891485, 0.5657026422511934, 0.5342194934807298, 0.5638025346198652, 0.11149109029880033, 0.11708466650964167, 0.10380914854623702, 0.11933116449310677, 0.12075702118232878, 0.11550287635093504, 0.12225920769066412, 0.10708409432655153, 0.11636397260446396, 0.1464662185096386, 0.40298905477746827, 0.24027478755383347, 0.15780061172633086, 0.2888651579812074, 0.24786735784836866, 0.2651125921991859, 0.19458329511851402, 0.18236053876221225, 0.3901676899771662, 0.29591754020114835, 0.35630812939388357, 0.383715307416964, 0.40656106369277145, 0.3676237422117693, 0.3916693708221496, 0.4109697582565781, 0.3861833021984499, 0.2726329515871587, 0.2960520067764585, 0.26267549682468894, 0.28134500619771385, 0.270201395251795, 0.28377328880844754, 0.32797644832509587, 0.2881174694329254, 0.2786614258625085, 0.19007118141108248, 0.19822782645604664, 0.21779306989637415, 0.22244655225732035, 0.18781623433274408, 0.18272130167980738, 0.21039805438470494, 0.1991513903368448, 0.19238787402178625, 0.19079306118178263, 0.1890267930222217, 0.1856981853080638, 0.19725646214992443, 0.17984691767800176, 0.19889514849641088, 0.19183367364807813, 0.19008980906632145, 0.1947572722728712, 0.16326800450606294, 0.1765527672490773, 0.1542664243751678, 0.7455580398384899, 0.16543159254948026, 0.18973688325469718, 0.467110970226595, 0.17074737859656708, 0.7181806804187774, 0.695112651349892, 0.16619993935354704, 0.1607020208253458, 0.6530675822992726, 0.5998694544952858, 0.6055624958191126, 0.5287463870369364, 0.6215595425270684, 0.15173166409097716, 0.18477605715772338, 0.1949288523738486, 0.19086927524965236, 0.21016135293384375, 0.17843764185111577, 0.18657949171669486, 0.1825714070012625, 0.18724853731309454, 0.19374760774505517, 0.091551712262402, 0.08041074401162518, 0.07986205640754196, 0.08133125814279973, 0.09334938636178325, 0.0902525809354463, 0.09139268936564582, 0.07692289116393747, 0.07887950125579024]}, "mutation_prompt": null}
{"id": "3935cc22-bdc1-4d1f-9d77-0b39bc493103", "solution": "import numpy as np\n\nclass HybridDynamicStrategyOpt_SAM_AI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.8\n\n    def pso_update(self):\n        cognitive = 1.5  # Balancing cognitive and social components\n        social = 2.0\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adaptive inertia reduction for dynamic responsiveness\n        self.inertia = max(0.2, self.inertia * (1 - 0.001))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.2, 0.9)  # Wider mutation factor range for exploration\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85  # Fixed crossover rate for stability\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridDynamicStrategyOpt_SAM_AI", "description": "Hybrid Dynamic Strategy Optimization with Self-Adaptive Mutation and Adaptive Inertia.", "configspace": "", "generation": 39, "fitness": 0.24963119141174422, "feedback": "The algorithm HybridDynamicStrategyOpt_SAM_AI got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.46706299763465775, 0.4873239062719993, 0.5266917971235081, 0.5357796176949956, 0.5129735461366691, 0.5664587828119376, 0.5097577575289536, 0.5283037325497193, 0.5279567879729659, 0.1778269178602715, 0.19331329680504283, 0.20396477393487222, 0.15113580728753295, 0.19814572768260785, 0.1623664363018712, 0.14707635710409417, 0.16799515657273845, 0.16484464966110846, 0.09123221908423507, 0.09236720269416343, 0.0962487811740671, 0.0984905139251896, 0.0886345092339279, 0.10363927584214705, 0.11440487547900391, 0.05881525662186449, 0.11869494853483087, 0.10670225980600812, 0.08726920286786444, 0.08522704121661862, 0.085717646953126, 0.08408433844564189, 0.0891488832762023, 0.09082997549814176, 0.09042159264831662, 0.0937390684529893, 0.9637007403633505, 0.9642369327200173, 0.981698330339343, 0.9282914449244933, 0.9801541900078544, 0.9716854614974785, 0.9816873262215413, 0.9631964521902076, 0.9781782882736385, 0.2718482709526103, 0.056914067721373085, 0.05665894439126462, 0.2789099127103003, 0.24889391898193913, 0.2600693641977402, 0.2250247922937748, 0.27694766899003675, 0.08554506628446912, 0.6017563104440428, 0.5461417954323131, 0.5600490956057567, 0.2131525555548197, 0.11515160354950293, 0.6658936546914489, 0.5328544388966008, 0.5316452888944314, 0.5757167077950415, 0.16045382370172434, 0.13771935452933615, 0.10520335829946093, 0.12801086044401422, 0.1416730245038017, 0.138382894653993, 0.15846455060615205, 0.14542358714577464, 0.15862498158455196, 0.17229236423279382, 0.13123674380705974, 0.16618965766952898, 0.15139327319617857, 0.1744378552370086, 0.25654108095958494, 0.15594099463102373, 0.21916727887764886, 0.16396950074910632, 0.08454945159012406, 0.11343140564466014, 0.091008096698874, 0.10438759803270592, 0.10004441572449874, 0.04372861653851012, 0.06735701792154303, 0.08915460362517624, 0.1421711463266685, 0.23677120460292767, 0.20088390903064324, 0.25215446617613757, 0.1958614485776049, 0.19486965485942187, 0.22189774971849385, 0.165706949569429, 0.23622839521828465, 0.24457890854355524, 0.025928292942518416, 0.030244631400525912, 0.037150834695924506, 0.027755673448977225, 0.04335720497233886, 0.03949552522017896, 0.01763939519776958, 0.05758009349748683, 0.07716955701646733, 0.13401636324347221, 0.1540995282632266, 0.1306347959578683, 0.1393034823238719, 0.16973281102161442, 0.15352276454633507, 0.11973666030843311, 0.044116331179343216, 0.14743347046524558, 0.4303040669780759, 0.4319614922061036, 0.4143231475101522, 0.42821432001031945, 0.4415245222354257, 0.445167046054478, 0.40965847125929744, 0.43772489283123495, 0.42102703523986074, 0.09712972736536463, 0.092540088546474, 0.10287122859158626, 0.09248145650664852, 0.1110418290587184, 0.09423327910361945, 0.10705036674372947, 0.09740728121467634, 0.08832290075216875, 0.34631384336083026, 0.22554839570987262, 0.20894616302443259, 0.23216158315100666, 0.18631706423640348, 0.256858631615019, 0.29026227566634544, 0.15759473204903773, 0.18523640836709077, 0.27453507751087625, 0.2872962275691041, 0.26198471701202064, 0.30056786309693384, 0.2905198042825612, 0.28531326856319983, 0.30316897906320894, 0.3110620605580221, 0.2962168429266401, 0.22548277860222088, 0.22077155757442724, 0.21783240217016753, 0.20413567448225045, 0.2178439674371846, 0.22904217903328794, 0.22845707112184133, 0.23024252513413246, 0.24478006460483448, 0.18725549450035217, 0.21291801626380902, 0.2029232406149435, 0.18477267961060628, 0.19111475726805494, 0.215067435950149, 0.1811818659011909, 0.2063053542502128, 0.19760070377172845, 0.2248020375382468, 0.1797258841435021, 0.22933052991558633, 0.18616001524625947, 0.1919292020029708, 0.19601478851889886, 0.20142206657884365, 0.2021960371437005, 0.20579825804206575, 0.6898842041602621, 0.18282381110257506, 0.15392171320571635, 0.6293139044073484, 0.16331103881676678, 0.15608488259686115, 0.48066763306861127, 0.15938408548682237, 0.6766196749656861, 0.551701131073956, 0.1665253736196528, 0.15945336064591642, 0.5671573903212018, 0.20240309392175881, 0.6619064498018763, 0.5917768845743034, 0.14955482293115585, 0.15722332413967266, 0.19199123357693704, 0.19020652943480487, 0.17628651424387332, 0.20148411022045054, 0.19893833310871656, 0.20523296016286663, 0.19463010024192484, 0.1959932638022438, 0.19216581261191346, 0.08834674114412333, 0.07821075362289398, 0.07494608856281015, 0.0759410505696615, 0.07323628253911396, 0.07135032766091232, 0.08109366086401038, 0.07905973269051936, 0.07404149010194871]}, "mutation_prompt": null}
{"id": "f7bbccf1-a59e-4193-87dd-b6d2a8f6781f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveStrategyOpt_DS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for refined cognitive-social balance\n        social = 2.0\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adaptive inertia with modified decay strategy\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/(2*self.budget)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Slightly increased mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.1 else 0.7  # Diverse dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedAdaptiveStrategyOpt_DS", "description": "Enhanced Adaptive Strategy Optimization with Dynamic Cognitive-Social Balance and Improved Exploration-Exploitation Mechanism.", "configspace": "", "generation": 40, "fitness": 0.36159019757954053, "feedback": "The algorithm EnhancedAdaptiveStrategyOpt_DS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7300142644400489, 0.7195399653390305, 0.7371512075171467, 0.7581991074814929, 0.7583193839124945, 0.7733269284960816, 0.7428765102647741, 0.718991623677163, 0.7501081468456816, 0.5219090542768607, 0.5347858660933891, 0.4943317815385361, 0.5328981427990562, 0.5109543697981669, 0.48951343797543545, 0.56103098493079, 0.5173638875116987, 0.5533986143662382, 0.11033169495389339, 0.12489864798167238, 0.11016883729032889, 0.12791036787089527, 0.1356245515431871, 0.1373487147356982, 0.12002382773670384, 0.11053017956459066, 0.15456238536146394, 0.22370943376879726, 0.11796420395761564, 0.10215886133447039, 0.11244028452833976, 0.09740851400507566, 0.09605608360306472, 0.09041291351959024, 0.13912917132311065, 0.11575664118421614, 0.9639149157103004, 0.9809349196600862, 0.9804680686123876, 0.9782143615163016, 0.9804408274256388, 0.9896043861385347, 0.9876656527709132, 0.9726240981086831, 0.9812334903185216, 0.5728238216813197, 0.504480998873384, 0.5312509639459422, 0.5189541985523141, 0.493831662922405, 0.5126754540911398, 0.08701503419802359, 0.08620703271898478, 0.46680925223417813, 0.20987747779253574, 0.7242601451895747, 0.7485489315346713, 0.20539295735305396, 0.754587084931719, 0.748518504241843, 0.7326819650021302, 0.7603111037136052, 0.7517772172127244, 0.4410409310107256, 0.40884630016792745, 0.4582739151053975, 0.3938612923813335, 0.12223152973879747, 0.35563709205558036, 0.4538277421627056, 0.46029354945845014, 0.44473065003465895, 0.41592412191873884, 0.35033976205749184, 0.2814038936960457, 0.4466641438441459, 0.38698476153556705, 0.4555479975717457, 0.4612687566813273, 0.3560966627994202, 0.47400878391825185, 0.12853633095774242, 0.14378541868898886, 0.44126164116165556, 0.28331075488910307, 0.007685357271469906, 0.055403197093617074, 0.3344539890725625, 0.2731553822219762, 0.17384868997446778, 0.5047014752421874, 0.5052498372540221, 0.42607085469095207, 0.3949044527058234, 0.5261919638451813, 0.35407088186873714, 0.48275199686870196, 0.47135661051968436, 0.45539142663615373, 0.08877120116133086, 0.06205441544342938, 0.09815941808910666, 0.07407620627799238, 0.24365835832554028, 0.10956370310512453, 0.10961910324700619, 0.12634416842860008, 0.09521045040577247, 0.31524180359253606, 0.2558056590732599, 0.2123928630463755, 0.2084744525972595, 0.33364984670449316, 0.3165903811716435, 0.1836185981797105, 0.23375529781891313, 0.11910409838169056, 0.649108273397434, 0.6768009644433914, 0.5786679345255151, 0.6391078902674667, 0.6419875202652503, 0.65036824472196, 0.6118096789993913, 0.6585824695481071, 0.635928076759098, 0.10666460586343474, 0.09208807447521772, 0.09310502274817845, 0.138647790694584, 0.1566363415775528, 0.1201006952628606, 0.16314940186416005, 0.12894117667410987, 0.09344483865857178, 0.2215738098154736, 0.1749497044014301, 0.206892840858797, 0.15223494135503768, 0.1743451543273049, 0.3020830148217849, 0.2222022925845808, 0.19415891646323324, 0.33578186527113285, 0.425073941549162, 0.32749158540343537, 0.45621714398520496, 0.4893751023138998, 0.35705541369244675, 0.3840479805289754, 0.46874276632568446, 0.5045160347268222, 0.4554996763705029, 0.22830787957913812, 0.2427076635387716, 0.27227900430976104, 0.19344030325680162, 0.3768329907797887, 0.415530020297891, 0.2501901538101887, 0.4144685661668397, 0.3631399304381131, 0.22736703346076126, 0.2871227094560188, 0.21718581554467087, 0.25155182798801345, 0.21578323018057521, 0.18923246190551668, 0.20718102522277082, 0.19377470055610135, 0.20538871403503456, 0.19679975490419532, 0.19609496333702614, 0.20273967116684566, 0.2014088746391982, 0.205018395846031, 0.16833405514828648, 0.5078120990194659, 0.19285008724741726, 0.191249113318964, 0.7701463161153245, 0.7815895993463668, 0.15377076011174262, 0.8265087976139176, 0.16430025658642555, 0.1811249327494211, 0.1557315469992373, 0.15295573143218877, 0.7996456745069429, 0.150487998597853, 0.2013564747636858, 0.767414962425396, 0.20322822770083315, 0.16156376808151562, 0.7069448292529832, 0.6928776720540417, 0.8089358175970471, 0.1585995439654989, 0.1784626453522955, 0.2175116329400666, 0.2137374019849082, 0.17232489066912893, 0.19282447595539975, 0.20421994914205643, 0.21569643348169187, 0.18375023666008183, 0.1898244097213454, 0.09360926498187294, 0.0927439133421798, 0.08486438922046291, 0.0937529911545183, 0.08300616880278033, 0.09208100765917038, 0.09406812482509253, 0.09165975094746448, 0.09953455961559832]}, "mutation_prompt": null}
{"id": "611543e5-3c4d-408e-b6d9-e5d99d5a1468", "solution": "import numpy as np\n\nclass AdaptiveDualStrategyOpt_DynamicInertia_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slight adjustment for better balance\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Dynamic nonlinear inertia decay for adaptive behavior\n        self.inertia = max(0.2, self.inertia * np.exp(-self.evaluations/(2*self.budget)))\n\n    def de_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.7)  # Tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def de_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.3 else 0.7  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with refined update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # DE phase with improved mechanics\n            for i in range(self.pop_size):\n                mutant = self.de_mutation(i)\n                trial = self.de_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveDualStrategyOpt_DynamicInertia_DE", "description": "Adaptive Dual-Strategy Optimization blending dynamic inertia PSO with refined differential evolution mutation for robustness.", "configspace": "", "generation": 41, "fitness": 0.40741409758806324, "feedback": "The algorithm AdaptiveDualStrategyOpt_DynamicInertia_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7815250701031649, 0.7907838276173175, 0.784015574485848, 0.7644854615646461, 0.7911107135233705, 0.7826584610819172, 0.7910973181668856, 0.7879220330695276, 0.7835140285726928, 0.5960232763234391, 0.6076455126442448, 0.5920257388758133, 0.6185951854502671, 0.6439200929286509, 0.622492128217483, 0.6170961879346817, 0.6129948727696297, 0.6118114108041824, 0.14319437027762993, 0.13831525850099957, 0.11849332423893122, 0.12933519502745583, 0.12357168273037566, 0.09810394426071267, 0.1069526373788533, 0.1388695658176382, 0.15246385731804635, 0.16124378858301547, 0.09394386771228624, 0.11435108135522931, 0.11500860464417673, 0.1109507972634689, 0.1354954495327233, 0.11928521608928988, 0.11376054579489536, 0.12421478169577127, 0.9705133184125265, 0.9812755637944035, 0.9805153435468655, 0.9789473917572975, 0.9648260804130545, 0.9821909513857281, 0.981593944623213, 0.9767793804410018, 0.9812503457887957, 0.6135319336945535, 0.057054378689904484, 0.6209150085216002, 0.6309722440464621, 0.5879729882094855, 0.6335321284717526, 0.5839062882214591, 0.08534541952904051, 0.6375493762132289, 0.7707992667324193, 0.7981320254678024, 0.7781427418048722, 0.7952393166540218, 0.7688259650221615, 0.7902995291457213, 0.7715182816166278, 0.7922933270633721, 0.787259403211805, 0.586077095178864, 0.4310502681133135, 0.5092378463940488, 0.48100051741206185, 0.4593172197073597, 0.44776765953725084, 0.43216706659986615, 0.6076933271768117, 0.35363084214529017, 0.3401616942179472, 0.5027163657133007, 0.4996730626329673, 0.5885666304884085, 0.49867735354467846, 0.612181976759508, 0.48600022171463075, 0.12225035677266516, 0.4178445161560347, 0.5664354746256072, 0.22053244951482598, 0.33017953224924734, 0.332870816525088, 0.3997757510043345, 0.15795665529433522, 0.5573616449055516, 0.17285339463094662, 0.3546958458650391, 0.649654401830816, 0.6256938682616617, 0.6420780570196076, 0.5421625057178261, 0.604827642266824, 0.329965683794175, 0.6070625347726724, 0.6337029196911432, 0.5875999277408497, 0.07055621883566798, 0.08851775770503678, 0.051228780213753655, 0.10376431627373472, 0.08355239429121142, 0.08024632212221983, 0.2905541654649063, 0.2974692063162433, 0.30500154222113407, 0.4257004841303851, 0.19924969052655028, 0.3534864004560544, 0.3467522764438562, 0.4239220964623037, 0.2877752930932286, 0.2687135001561999, 0.421844212618134, 0.17341009527366946, 0.6911695799465434, 0.6455134385633227, 0.6648433149148365, 0.6565876646554376, 0.7328107475702943, 0.6825481478297953, 0.7340786618273947, 0.6788616046895521, 0.622174480085506, 0.0963315190407138, 0.14163350609938918, 0.06609182333955055, 0.11859376010872025, 0.14850918419081605, 0.14291766117958782, 0.13910763565782325, 0.13529282113451668, 0.11697586363566592, 0.14577931171826353, 0.2554503231011621, 0.15603610681876523, 0.23807605434166434, 0.18888272808129136, 0.16573703282134233, 0.3110549610883815, 0.21007007219436657, 0.24587387891530843, 0.4299826739707511, 0.34082265619879804, 0.29473049357261105, 0.4011814992099343, 0.5130003816704265, 0.5028105713304666, 0.47499007681130767, 0.3721585455518658, 0.5180383000345974, 0.2501065596716956, 0.35559289097815794, 0.43484731677235744, 0.2292967672408912, 0.40778517636602196, 0.2420569070216536, 0.2750399014645232, 0.28310677830827613, 0.3454355027930597, 0.21072192842135506, 0.22681277092591146, 0.2027201478709605, 0.23030089831803202, 0.19809853013625456, 0.19652142370966974, 0.2048432281106095, 0.22862313148794366, 0.2170804987853835, 0.18541048284350625, 0.23017931526157376, 0.18313887195061684, 0.17993173066994061, 0.20064623039665264, 0.20502935217982443, 0.23888156387458315, 0.21121188328935825, 0.19189847404218396, 0.8026287546050052, 0.7896140153381755, 0.1540328564635256, 0.8153940254004082, 0.1680970974606818, 0.754828150896077, 0.7985767579952272, 0.1629176259359565, 0.8273328864509322, 0.7830732473501139, 0.644031159465422, 0.16288397426209755, 0.2071623700748486, 0.7515497875410488, 0.16224045466201642, 0.7871010701118091, 0.19955910250170794, 0.7245645650811217, 0.20836494691197993, 0.182208472543809, 0.21331208898529053, 0.21446807778664123, 0.2011472034450673, 0.21455389835027305, 0.18351143079623788, 0.21031328095558455, 0.21502209299413033, 0.10975452173241196, 0.09649507837845228, 0.08668734985692006, 0.0975275310000534, 0.0954326730096976, 0.09210382605684098, 0.08259353621514964, 0.09595290367343423, 0.08075223652745245]}, "mutation_prompt": null}
{"id": "f82b86f0-d28d-4b26-bd19-809fa4bc07f4", "solution": "import numpy as np\n\nclass HybridAdaptivePSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def de_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n\n    def de_crossover(self, parent, mutant):\n        cross_prob = 0.9\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.de_mutation(i)\n                trial = self.de_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridAdaptivePSO_DE", "description": "Hybrid Adaptive Particle Swarm and Differential Evolution with Strategy Enhancement for Robust Optimization.", "configspace": "", "generation": 42, "fitness": 0.40713471508453797, "feedback": "The algorithm HybridAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7785146246988998, 0.79194778115489, 0.7740714288500667, 0.7891829416693148, 0.7960461013506872, 0.7963583759032318, 0.7852421816113045, 0.7920691856942335, 0.7823669225935609, 0.5600101255415333, 0.5850184765459008, 0.5938877330434293, 0.5838868662054977, 0.5851564060930525, 0.603731997634745, 0.6149146488510122, 0.592050054545751, 0.578875528103435, 0.13653868073175945, 0.12799960463637416, 0.12172475815743078, 0.12918294012595122, 0.1633381309374261, 0.1275483379974004, 0.13238098732374726, 0.15758179976620446, 0.15701643071263915, 0.10337339445033578, 0.13181347630911078, 0.10570737120275175, 0.10065163798336474, 0.11022822779580022, 0.11571594934170937, 0.12816315958640645, 0.10297888389782583, 0.14186645692754662, 0.9733425784937004, 0.9802708759865648, 0.9833213905842073, 0.9542986866682043, 0.9760344002236007, 0.9707944231918917, 0.9810294176342178, 0.9721113163601822, 0.9695590566867816, 0.6074384546799763, 0.056608938273402964, 0.5974009024319009, 0.6191754133110321, 0.5833859871154048, 0.5879655745592653, 0.6122212893411343, 0.6386378840485768, 0.6609523721551562, 0.7621092986433966, 0.762553678695306, 0.8068849175980363, 0.7615908246363825, 0.7248735567564438, 0.8064286503075926, 0.8308504100773131, 0.8104314217904571, 0.22099007744073906, 0.5483652994686452, 0.6147619946005225, 0.4352662430815254, 0.47608084372067316, 0.43662037839649215, 0.5778909197045405, 0.5299341432041891, 0.5721961026545274, 0.12279854264017487, 0.4238710138257217, 0.12134319687604678, 0.4553700069699632, 0.5748395608057453, 0.554641153489059, 0.468593641113887, 0.12336268694317787, 0.5535559294393348, 0.11884227618488441, 0.4575737924162683, 0.4552691757355871, 0.5990462493563695, 0.5050440900117288, 0.5501311303852865, 0.3567391319083332, 0.4957128314400958, 0.5375751860822376, 0.5623648288153194, 0.6204594837951547, 0.6131688936701125, 0.5976465971432026, 0.5284218748430898, 0.5920264456763207, 0.5577252049416596, 0.5944529117326876, 0.6062287904023835, 0.6115434184886541, 0.21772876493910542, 0.23533906202760368, 0.06140978692461596, 0.15909371360979763, 0.20090921018134045, 0.1628231860148549, 0.09955241333019671, 0.10675301198041776, 0.09740528690817063, 0.43796099555907764, 0.36852169620572106, 0.426334856063017, 0.4344308132990685, 0.395213020715503, 0.462741500433148, 0.39807367709509034, 0.45647571481610316, 0.3902877886055278, 0.7297115354318806, 0.7065081740146151, 0.6833598873235669, 0.7103396907394577, 0.751384084385379, 0.7294244463455029, 0.7088194852801053, 0.7111905835021956, 0.7242613847362813, 0.08644637203994332, 0.10626413551209002, 0.09509603650228304, 0.13781736062056515, 0.13264875500148643, 0.14252510928840112, 0.13621013084318034, 0.11847141404405281, 0.11448547800934195, 0.20879823912338402, 0.1913849137183874, 0.260642183482541, 0.21349428570747842, 0.2201273209161182, 0.30468064423976515, 0.2586172212273966, 0.19521473506944786, 0.16522051731321064, 0.4936411177921237, 0.4858942647075787, 0.49802290135127747, 0.41623990752146955, 0.495130683395439, 0.4030247516026866, 0.5277785769107886, 0.37040880109490204, 0.4292968618919797, 0.3912201909802463, 0.21491961935679738, 0.27664368365241, 0.1999712255770949, 0.3929864605244794, 0.321498242489871, 0.3105124935898649, 0.3018371252700224, 0.3293371392021207, 0.19028969482963753, 0.19997808523046523, 0.19677070989858225, 0.24221844780964352, 0.2367006495553291, 0.22004680434386636, 0.21918192658699853, 0.21014137731614457, 0.26094313074938036, 0.20851412473472397, 0.1903206443401766, 0.23226151499298953, 0.2264892943209511, 0.20700789386110952, 0.21670566569116134, 0.18696025333857558, 0.21237911286133127, 0.22893987020899098, 0.1619457607486856, 0.18215684605333204, 0.1545170115747171, 0.8156934760351617, 0.1673767299112624, 0.157045996872616, 0.12852499397736905, 0.19476276065817744, 0.8336913036628615, 0.7916851311457407, 0.20219610906792018, 0.15962236412861908, 0.8440467298728324, 0.20367546456097296, 0.7612954616746692, 0.7756107949051306, 0.765649087416588, 0.1969436364881938, 0.19274186326287523, 0.2004326308566554, 0.19517094809648738, 0.20661455045443855, 0.19319270121256404, 0.2051219063131523, 0.18090687941184203, 0.1882396529593392, 0.22308098555259193, 0.08871842030882238, 0.10384317354447248, 0.08846056210375641, 0.08741489252348222, 0.09717622334270659, 0.08482205273725885, 0.08308422713367147, 0.08040707901044841, 0.10895080434435844]}, "mutation_prompt": null}
{"id": "578b7129-abe4-4cc6-86a2-5477e28be68a", "solution": "import numpy as np\n\nclass HybridPSO_ADE_Dynamic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, 0.95 * self.inertia)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.7)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.3 else 0.6\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridPSO_ADE_Dynamic", "description": "Hybrid Particle Swarm and Adaptive Differential Evolution with Dynamic Inertia and Crossover Adjustments for Diverse Search.", "configspace": "", "generation": 43, "fitness": 0.39029875729690283, "feedback": "The algorithm HybridPSO_ADE_Dynamic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7604253458298482, 0.7694616548476827, 0.7616898356285985, 0.7957056568468904, 0.7833061601526707, 0.7904003195155986, 0.787605779751646, 0.7895805527708093, 0.7816568670340444, 0.575555126803416, 0.5581258936938632, 0.5903496619089703, 0.5885844247039136, 0.5486443764460452, 0.5770774973032992, 0.611538930390938, 0.5541072199660684, 0.5682944931119664, 0.13459939093666784, 0.11702840129389736, 0.12108107825851966, 0.14582241131054996, 0.1357253472099792, 0.1122677460621464, 0.4065236534897527, 0.13574931438156457, 0.14000112164705059, 0.10222713331261579, 0.1372352217651267, 0.13457745049563108, 0.11902933898085344, 0.10425823989168237, 0.09854949907069332, 0.12948974990798323, 0.11164041562958993, 0.10234216252166717, 0.9639073796068909, 0.9818239032244586, 0.9796577249770314, 0.9815263693207645, 0.9805092907543544, 0.9876240436401686, 0.9821200136961715, 0.979128829911442, 0.9813838042209344, 0.5933811521729252, 0.057972717451554856, 0.49385636788693876, 0.5936349779768628, 0.6084932679868422, 0.5950885589534511, 0.6227124624617042, 0.5234671774183816, 0.5938951347547448, 0.7926540050107976, 0.7768963724615923, 0.7680538049620644, 0.7982398844660147, 0.20569239748243784, 0.7409321091047982, 0.14386476496562484, 0.7535972203555312, 0.7673793360646721, 0.3818403431234627, 0.47810704651475366, 0.5095479737326578, 0.3862987697308402, 0.12419805822094387, 0.41668896200935346, 0.11886483070792297, 0.592579777308182, 0.48312356691907266, 0.5342948099228131, 0.5208044137084814, 0.37259160900336696, 0.472996738891897, 0.5044402377243768, 0.3562762529898057, 0.5167606716057067, 0.12136003919242266, 0.48699786042564364, 0.11270943932337685, 0.14183506325848816, 0.5133159272408769, 0.18368474759739295, 0.3463246259303141, 0.163811084815233, 0.5218916325545737, 0.2244647133210289, 0.1784639822027344, 0.5445412632222211, 0.5306484513347558, 0.6103201229258763, 0.5142504157228143, 0.5960242987114289, 0.5666840009758297, 0.5571575128305579, 0.6049840424519302, 0.4773203582484571, 0.26809000277850037, 0.17318823481647105, 0.04670594998072153, 0.1879807589727247, 0.10639696973311419, 0.1696389478499445, 0.17158228573963274, 0.16907373667267656, 0.061921079416259794, 0.3258528390019676, 0.3858039833955468, 0.30534238560580873, 0.301504350707701, 0.3763573234715061, 0.29774491235656286, 0.2623433847051563, 0.2727706929332021, 0.07316265814412326, 0.7009831624501931, 0.6721357835873595, 0.6789303245953187, 0.6839777339796057, 0.6897428529768963, 0.7180681292304265, 0.6400147171477775, 0.6454579164873797, 0.6582969779638008, 0.10739321895373599, 0.08118815603157181, 0.09929810129768046, 0.14288718768915354, 0.1708249094246692, 0.0861799767599658, 0.12940077792767302, 0.1060467194476119, 0.11779433763168379, 0.18156470843620098, 0.24723805177092795, 0.2592009431764174, 0.3779949469937619, 0.22865797346576477, 0.21233895748817, 0.4739202249738055, 0.19629129808306822, 0.31070277901238674, 0.47886641315891254, 0.41297874743504015, 0.45963769447731306, 0.46273895581792435, 0.4851799131965042, 0.49928598500400334, 0.5038698858800926, 0.4882360715649412, 0.4661573028739088, 0.37171665315288005, 0.2927687999262455, 0.3140598842249084, 0.35274793240330293, 0.30992163692566843, 0.3000591512279569, 0.2985997404738596, 0.30702721465120475, 0.4540623436893728, 0.20376418962724485, 0.21756210344406612, 0.22347891644381024, 0.25901910616375257, 0.24266204572051697, 0.2178910736130103, 0.21793265424930086, 0.2926725758628528, 0.2167629031708258, 0.21918670994820078, 0.1914891064196912, 0.19912254678728747, 0.2056741419871816, 0.2280165441970735, 0.18705390865030924, 0.23646970026470893, 0.1978503227875602, 0.21311448336331396, 0.8189043713273212, 0.1845716230695511, 0.15397024180508356, 0.8150979944993815, 0.16635341812730398, 0.19456970269952667, 0.793996271271967, 0.19040267626008467, 0.8497000512589087, 0.819470918616658, 0.16659751299582515, 0.7438626506387045, 0.2055631356713279, 0.2019035380888593, 0.8256443016794284, 0.7295283602914773, 0.15239399862567848, 0.16454439243912733, 0.1896723884636069, 0.1870397678061022, 0.19114522901808217, 0.2197705215356438, 0.20804172596008508, 0.22780965572950562, 0.20382171372206226, 0.20542710642212292, 0.19042590170874052, 0.08486849117523265, 0.0983279508381929, 0.09012682661047433, 0.08598966483143722, 0.09278448081709212, 0.09069581186933717, 0.09418486982125573, 0.08483089027537172, 0.08891050955008972]}, "mutation_prompt": null}
{"id": "485afce5-92bd-425e-a7c9-f2e5b738f0a7", "solution": "import numpy as np\n\nclass AdaptiveStochasticDualStrategyOpt_DIAM_BEE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget)**0.5)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 0.9)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveStochasticDualStrategyOpt_DIAM_BEE", "description": "Adaptive Stochastic Dual-Strategy Optimization with Dynamic Inertia and Mutation for Balanced Exploration and Exploitation.", "configspace": "", "generation": 44, "fitness": 0.3996846243288635, "feedback": "The algorithm AdaptiveStochasticDualStrategyOpt_DIAM_BEE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7481692448759869, 0.725701587148617, 0.7438002544727356, 0.7802706593363044, 0.7697668130985738, 0.7808447228257824, 0.7611060507705931, 0.7565593897013649, 0.7321155827101782, 0.5448569523204112, 0.5450996336551088, 0.5500397802446063, 0.5104632210456926, 0.5428343739824927, 0.5096890155258583, 0.5332292129158085, 0.5304863166463443, 0.5271485842676424, 0.13224106352114395, 0.10836539341876272, 0.14031265179938401, 0.14966442504245492, 0.1219006355220621, 0.13513204586167138, 0.1260748955356601, 0.12762958423721626, 0.11693411512887797, 0.14055575713104207, 0.12271345739448736, 0.1387771198277873, 0.11307175382169621, 0.10300553180390348, 0.13100815980426728, 0.13392645578208107, 0.10202798883099984, 0.11375364900436691, 0.9875719556982621, 0.9812837268940613, 0.9822062697745833, 0.9816821038516118, 0.972869384620293, 0.9868702907927683, 0.9848750923199873, 0.9718079713006503, 0.9781496580031892, 0.5588151228796516, 0.5379837418955429, 0.5372565060726924, 0.5253288356721736, 0.5381962044278028, 0.5243671531091831, 0.6151529269858917, 0.5867468012646582, 0.5707450810212726, 0.7359948159360519, 0.7965787932396347, 0.734204825590799, 0.3464563207011757, 0.7630140093172725, 0.7697889164379541, 0.7106869447084265, 0.7663944825146137, 0.7669801578295647, 0.5647922034147841, 0.4388324580985551, 0.47805380380004403, 0.43746405920854037, 0.5739837859989332, 0.443431690928056, 0.4714908315211054, 0.458043471533663, 0.40230528035519075, 0.5042690499251019, 0.4820384733334093, 0.5804811294098734, 0.45428603610948726, 0.4979335654703442, 0.41827956800894595, 0.3488962101845917, 0.41988618291401103, 0.48692333111368014, 0.3431141482892215, 0.4322889987928744, 0.3600935525836173, 0.12521359055348735, 0.4900266578373913, 0.4785494735457585, 0.5089799592516611, 0.5101714041370076, 0.44968559090839866, 0.5439932881668923, 0.4868804592927528, 0.5277999828365585, 0.5146707107322259, 0.5055558900151977, 0.5444165546121181, 0.5928584462500427, 0.5884327993124445, 0.5333542775002886, 0.1520727409075795, 0.06723342536302823, 0.08942762838614582, 0.08275865090719725, 0.07757046397653922, 0.187748196418134, 0.12193843431244245, 0.17370539458881662, 0.24523969821170688, 0.3926736212311831, 0.3918744982324768, 0.3381713060129544, 0.32840934119243326, 0.3724279245772044, 0.39447495436108515, 0.3262836623407943, 0.3112566826585128, 0.37480381237950755, 0.6658318605022835, 0.6857732543512223, 0.6766220576110007, 0.6857805453602277, 0.6749744339947732, 0.6760950493779809, 0.6678634362767775, 0.6854314481924577, 0.631177579640027, 0.08748012755851864, 0.11666683683275025, 0.11894795359470756, 0.1371139896975141, 0.10008989612687014, 0.11797375158696799, 0.10170273344449232, 0.09975085268640738, 0.14432997414287696, 0.1489306193224298, 0.19839872443179363, 0.37341135482944, 0.16712497392514325, 0.17914118117760458, 0.1761720130860307, 0.3290442619096642, 0.30169645452748595, 0.25993813028334223, 0.4783473586930016, 0.44725857347465936, 0.30205279997499535, 0.4609269676372104, 0.44327589171365067, 0.5017512690408484, 0.3834376617275427, 0.4747637148240166, 0.4479058300015337, 0.28947609657005047, 0.22185640937797801, 0.3075985810320505, 0.18056907774341235, 0.3401967248294242, 0.3372341470920037, 0.46077141613481, 0.38469399283931294, 0.380048615727528, 0.2535440098430566, 0.2212787526306632, 0.21056758510108797, 0.22639302329545885, 0.2431927141425655, 0.22895012995324815, 0.20559887278527633, 0.21172952001191703, 0.1992287373615642, 0.19054790353119588, 0.195511869268152, 0.1996984172451436, 0.1886279964514045, 0.19168814291912806, 0.20677247321768333, 0.19873738697143672, 0.23260264720114077, 0.2093629235227732, 0.7930065699512999, 0.7784594290259312, 0.15401467715218475, 0.8035856430175802, 0.16713928487742524, 0.7718526304312826, 0.15903157649494515, 0.1911041638794, 0.8076039964054069, 0.08140251720312641, 0.20389943391931542, 0.7216727610268423, 0.20284431587239515, 0.19727432101873377, 0.7119958573632442, 0.715325564161739, 0.7590677288377106, 0.15129418587849175, 0.19177966847999428, 0.19507168254957352, 0.20794330674582484, 0.19448836800572655, 0.18811967113092487, 0.20925443677173106, 0.19144011205719158, 0.20686485131067023, 0.20037528556140816, 0.08963151153292348, 0.0900903710939307, 0.0878917973486012, 0.09932394721427695, 0.09105323432602386, 0.09435295733474836, 0.09019217482562492, 0.09058979381887788, 0.09234777617595957]}, "mutation_prompt": null}
{"id": "59ed4019-ca30-4384-a191-69ff56e49418", "solution": "import numpy as np\n\nclass EnhancedCooperativeDualStrategyOpt:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Fine-tuned for balance\n        social = 2.0\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adaptive inertia with sinusoidal modulation\n        self.inertia = max(0.4, 0.9 - 0.5 * np.sin(np.pi * self.evaluations / self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Dynamic mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85  # Static crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with cooperative adaptive rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with dynamic cooperation\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedCooperativeDualStrategyOpt", "description": "Enhanced Cooperative Dual-Strategy Optimization with Dynamic Adaptive Parameters.", "configspace": "", "generation": 45, "fitness": 0.3262346358475991, "feedback": "The algorithm EnhancedCooperativeDualStrategyOpt got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.676213594698317, 0.6439623863880986, 0.6756934536453181, 0.6683559982152603, 0.6892761174948021, 0.6922221159258897, 0.6595583599085206, 0.6639161011935553, 0.6298088429341595, 0.42603566595512044, 0.3789917931483444, 0.37887397318401517, 0.34099173493566726, 0.36834737059943934, 0.30838244959699734, 0.31798712890935765, 0.3585868284995216, 0.308926560805159, 0.11934377992624357, 0.15086261098951304, 0.11976186682609746, 0.14243878481121552, 0.13721027773785466, 0.25932199128527866, 0.12454016715136096, 0.1428108194767045, 0.1651367127071608, 0.10823687967512763, 0.09819715197573187, 0.11261170573338897, 0.12386320967291198, 0.11364597585090064, 0.09224432659204518, 0.09401637562331411, 0.0950751274779641, 0.10962630673835816, 0.9724549939426399, 0.9675341101223106, 0.9817473506760499, 0.9342781672559051, 0.9808216691571544, 0.9714087156989709, 0.9826489343088708, 0.9729283708322307, 0.9781593543527741, 0.40902430348474517, 9.999999999998899e-05, 0.3856781277341804, 0.418421774755544, 0.3383039423629771, 0.1409764731907338, 0.40379178041963737, 0.08399156456290291, 0.3678646811649664, 0.6319885076711695, 0.7155173678253032, 0.700597683298294, 0.6751353767417398, 0.7110611121513113, 0.6685659827960531, 0.6298521000450032, 0.6906805821165358, 0.680440252007325, 0.3059039242607293, 0.3544720656527308, 0.2559603965297699, 0.2661840568485232, 0.3288308660547187, 0.09988484474106551, 0.30633905602741984, 0.3598759725686187, 0.3438214457670624, 0.30727586971676135, 0.3143365153125238, 0.40503215110424273, 0.2624602019238039, 0.28729306168545665, 0.3001734424311223, 0.272763310654891, 0.21699232092640552, 0.3096327325561925, 0.21893571928140132, 0.28895329287053384, 0.26061347017788605, 9.999999999998899e-05, 0.2368220487368461, 0.21448515594907214, 0.17875421069342012, 0.2579533197201719, 0.2608268635595067, 0.36336472155415844, 0.3137217064683374, 0.37324407609007404, 0.4171990682926273, 0.3455412972814538, 0.27948351369965907, 0.4108690256769948, 0.30139788981018834, 0.33510746644520994, 0.031512275538527534, 0.12652931447584093, 0.06753257614935537, 0.10860068218195973, 0.08024763140144242, 0.19669292430942142, 0.15624946320181154, 0.22785418550785164, 0.05891098852051058, 0.25334969649898154, 0.22112401457627984, 0.2401176097853036, 0.21803401979785264, 0.22293458744038852, 0.28516580676941716, 0.24075661848029772, 9.999999999998899e-05, 0.2539518987707503, 0.5618850456019733, 0.5911792659674604, 0.5713731966532252, 0.5925772318089721, 0.5853832330923983, 0.5342020201781994, 0.561336816572609, 0.5468341538351609, 0.5598037668167415, 0.11249542092415066, 0.09167594193010442, 0.0813016516486792, 0.11490841230193183, 0.1374602441453564, 0.13291402862607304, 0.12230558564274796, 0.13625984734535346, 0.120520062382104, 0.2726449073474383, 0.26773534145824884, 0.20996585007466628, 0.1399291469688485, 0.16158493826294795, 0.34665224687982354, 0.20312012376024946, 0.2037924387006408, 0.24909656216759946, 0.35455531652886174, 0.38107559964405713, 0.3654275580943547, 0.3348490963139328, 0.39402699293542465, 0.3580022371861875, 0.3771208563644094, 0.36898058658649824, 0.3562431336062929, 0.2911527625718522, 0.34278052927087266, 0.2583833569207762, 0.2951283669469713, 0.18541847741226802, 0.24074162742653815, 0.23678928134713328, 0.3446801068837, 0.3349590263560188, 0.19853469380407873, 0.20033823712087573, 0.21441197403907875, 0.24769659073883754, 0.24038494902344743, 0.19153051170634294, 0.22003020741001056, 0.20423624924967865, 0.19003944048324217, 0.3987388179936905, 0.18856099950179295, 0.19409807058270567, 0.21247049495585246, 0.1737242834303897, 0.21503992095766278, 0.2224664961270424, 0.44618910890743324, 0.4322224196433243, 0.1671231878511995, 0.18245630036857796, 0.15361682015859823, 0.7564085540330779, 0.1223247932600463, 0.7054279105081294, 0.16095152694391313, 0.18711822395853972, 0.7571086821032874, 0.612913550903998, 0.16609678466278532, 0.6924904314185069, 0.7339810810096679, 0.2013339357908731, 0.6597529846213374, 0.7052748395720347, 0.14771609515982365, 0.19468107247053412, 0.1884213271781252, 0.1894431533188352, 0.18578522450351254, 0.20263212025494226, 0.2137228474441094, 0.17597207100485213, 0.18787576619536062, 0.1965470936514072, 0.20108419867098115, 0.08673693838744145, 0.07818838684720975, 0.08323120792457284, 0.08400910886457036, 0.08502256621459614, 0.08454632120524852, 0.09090374994141859, 0.08720835489002488, 0.08529107318431939]}, "mutation_prompt": null}
{"id": "276e14ef-8b80-4f16-8cfb-3a8ca7163781", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, self.dim))  # Slightly adjusted initial velocity range\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Fine-tuned for cognitive component\n        social = 2.0  # Increased influence of social component\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for dynamic adaptation\n        self.inertia = max(0.2, self.inertia * np.exp(-0.1*self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.3 else 0.5  # Further refined crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Hybrid Particle Swarm with Adaptive Differential Evolution and Nonlinear Inertia Control for Dynamic Search.", "configspace": "", "generation": 46, "fitness": 0.3100123476663519, "feedback": "The algorithm StochasticDualStrategyOpt_SAM_RLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.6483454369363664, 0.5994845659210604, 0.6197464093475589, 0.6497669217243689, 0.6374070241695902, 0.6624788501336013, 0.6634566181846538, 0.618083000596046, 0.6436496121716707, 0.35972722289920567, 0.43118105844324717, 0.3607206437117627, 0.39734312092408686, 0.40031879741840026, 0.3902854292718513, 0.36901633071745654, 0.3935033754761549, 0.39617264157368337, 0.11024076506180591, 0.13399534304400496, 0.11642842674351328, 0.13914911223910853, 0.11792657586048338, 0.1432304729983851, 0.11865502685530682, 0.11737667142246078, 0.11789692001414365, 0.10011529890821036, 0.10158786604706727, 0.1224286377478706, 0.11554519792651008, 0.12536905073648819, 0.18631415268278195, 0.10796072404644785, 0.09591087945374932, 0.12779108917132398, 0.9530023783726472, 0.980842634507865, 0.9816762170629104, 0.9757711110552959, 0.9805332957418521, 0.9802831597961182, 0.9884015057279102, 0.9793063956550802, 0.9809327572372477, 0.41719491261342834, 0.05598036976458165, 0.055936626835018655, 0.38253652038869235, 0.40280226775839634, 0.4028390679654581, 0.4316794197871151, 0.3708678825751289, 0.41122689369797205, 0.5577779931566336, 0.652205785389136, 0.21326708202027078, 0.6652585441501884, 0.17314049914658625, 0.6004884255778519, 0.6131889571494071, 0.6736651037856477, 0.5902710957278147, 0.44265997896935727, 0.24379248491816363, 0.2878659240376106, 0.39584004444125775, 0.29159066984777104, 0.31131226068244444, 0.36213852334634544, 0.19971206489952087, 0.32617316511323236, 0.1097437448343146, 0.092583942902986, 0.12950030789431843, 0.21208191037183866, 0.21231332982894757, 0.21091543641778177, 0.29792288654064136, 0.3845106397943664, 0.34665390126424067, 0.051537451795838796, 0.1639656405162334, 0.10597401385069083, 9.999999999998899e-05, 0.0591953554227681, 0.169438002876387, 0.1850369403606127, 0.18335137271206803, 0.127367509961547, 0.3224258438189542, 0.3892664059756682, 0.3816023668853009, 0.2356897845900422, 0.41382918146412695, 0.29499355533822835, 0.3655730893651111, 0.2885821907365995, 0.3351730771730418, 0.08931438382822376, 0.10590607186968626, 0.06601360245082966, 0.06944377090064935, 0.07988066185249243, 0.11637641794016451, 0.17348579780013262, 0.05646434876921125, 0.15408651351089575, 0.2148576435003895, 0.23902959051307116, 0.18952679068422718, 0.02243408021864579, 0.2107199819309833, 0.19262960610725688, 0.048940471799598706, 0.18646261771468653, 0.0654862113579473, 0.48422182938533176, 0.5312135610654944, 0.5270541702056382, 0.5320313804608684, 0.529540591418973, 0.5491586147199794, 0.5485132196951821, 0.5009728750253819, 0.4725560497250981, 0.10807131717390672, 0.14678688224992675, 0.10818157189865418, 0.10043804019114544, 0.10346962125615222, 0.10789099841741134, 0.11482342785465549, 0.12444894707234178, 0.09813154232763732, 0.14885216864519712, 0.17963308671917444, 0.19976341588718738, 0.19593472963848968, 0.18768668623880536, 0.1685490237863636, 0.1953977786633564, 0.33910257050575476, 0.298506829117571, 0.3052227024804788, 0.4176375775370311, 0.29210417698216673, 0.42401321541371895, 0.30592266853837913, 0.3034170240135762, 0.44866854461956784, 0.37341985836728264, 0.3920896998191905, 0.22361253828731364, 0.2831071007096674, 0.22203728056586247, 0.23979466241721104, 0.17292090162143214, 0.16746453175941645, 0.24137208181746483, 0.24451883691687337, 0.2837210787684393, 0.1959744147530832, 0.19774088949518476, 0.18670904762548857, 0.2395095655352918, 0.1874146120716893, 0.2313701661944947, 0.19615477554437433, 0.19265795855186785, 0.19550263279630875, 0.18245972797532273, 0.19994313525117835, 0.18809606434241632, 0.19298328845112822, 0.19101824482001284, 0.18469752020582975, 0.20188800674815444, 0.1818162495326926, 0.19881182623170157, 0.7632350361750038, 0.15089918419150472, 0.1526843743647125, 0.6814560438963655, 0.16434762491661636, 0.5954222464020096, 0.16489627260027795, 0.6575380885120732, 0.6777018379330019, 0.6494010599650814, 0.6534619893853845, 0.6552774484902497, 0.6451111699489326, 0.1869703281943933, 0.6101034453285765, 0.6068052321494888, 0.14713383051704, 0.6309560192813941, 0.21130398308982723, 0.18786727796565306, 0.20358037430542786, 0.1995054337502652, 0.1932315005997084, 0.2052370798809422, 0.19912497760409653, 0.1917671550161184, 0.2113789577720876, 0.08236040727931793, 0.08724095286795963, 0.0788024728238883, 0.0803929501458619, 0.08044815415164919, 0.095475790474299, 0.08586168227694657, 0.0819311218995381, 0.08587432074520407]}, "mutation_prompt": null}
{"id": "c5c54f0f-b52e-449c-809b-6c3ad1a20484", "solution": "import numpy as np\n\nclass EnhancedDualStrategyOpt_NCA_SED:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.4  # Adjusted for improved convergence\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for self-adaptation\n        self.inertia = max(0.1, self.inertia * (1.0 - (self.evaluations / self.budget)**2))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.2, 0.9)  # Adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.6 + 0.4 * np.random.rand()  # Stochastic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with adaptive strategy\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with stochastic ensemble dynamics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedDualStrategyOpt_NCA_SED", "description": "Enhanced Dual-Strategy Algorithm with Nonlinear Component-wise Adaptation and Stochastic Ensemble Dynamics.", "configspace": "", "generation": 47, "fitness": 0.3535071108675487, "feedback": "The algorithm EnhancedDualStrategyOpt_NCA_SED got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7165564701655625, 0.6855010460414998, 0.7186828640524933, 0.7123351761126482, 0.721025479841853, 0.7262945572373402, 0.7098764826462034, 0.7246794157419387, 0.7060151276382789, 0.5423394598156532, 0.5224941727021868, 0.513903414203172, 0.5380401477019163, 0.516794386332153, 0.5080355933784428, 0.5223175569793074, 0.530858264761034, 0.5443392364369818, 0.12079499021717588, 0.12009594641940369, 0.14471538903701364, 0.5265970782124021, 0.4118717652839581, 0.1473680212120425, 0.12785790020536603, 0.12388981839556545, 0.13478653720291256, 0.10654215371941789, 0.09766237594598004, 0.11656790414063467, 0.12945770624494146, 0.08010548656069572, 0.09732754078789618, 0.10957281956245046, 0.10642438436452029, 0.11703642462833308, 0.9732732201833819, 0.9820470082217042, 0.9708137219188513, 0.9736169525796332, 0.972070978128668, 0.9881405071159125, 0.9886138853288357, 0.9712745713328245, 0.9813600924015251, 0.5251350525272416, 0.056554603460651, 0.4842586880901687, 0.5183187972147147, 0.4865121726416748, 0.5282112284880205, 0.5220143044445886, 0.2563985661342719, 0.08513916721194659, 0.7230460954024398, 0.7000418792591232, 0.21358201592313397, 0.6862575597861182, 0.7223432884717219, 0.722756480355782, 0.20951939143203502, 0.677792222516107, 0.6508122498605264, 0.31042624708157573, 0.32488491969288635, 0.34204090724667247, 0.288163208191737, 0.2830398521731301, 0.3892245074013344, 0.31092473188337644, 0.4489676551345896, 0.24159160244158606, 0.3692464289149465, 0.3601103396773423, 0.2919752780246272, 0.45819643377766217, 0.3697953579077311, 0.33453984137027726, 0.3280281708760633, 0.24260455783430157, 0.31150461041308997, 0.05691715800050079, 0.0703153628499249, 0.24952187247722335, 0.008644847310733672, 0.08074810506774899, 0.1240563499871552, 0.39482305208059354, 0.2456463583896944, 0.22155515561122974, 0.4098127817815098, 0.5264271364592092, 0.4407435459349134, 0.3303472510939185, 0.4173730580304921, 0.26049742643696694, 0.3810267308224464, 0.4996832965011808, 0.17411570954787936, 0.039388801487209246, 0.07772410668277518, 0.03828006748125934, 0.07025285245093149, 0.07153112278390872, 0.07511917648693633, 0.19025559560645777, 0.21710446356404345, 0.16516384467537004, 0.19277383046083418, 0.22245259651687177, 0.21746459991409073, 9.999999999998899e-05, 0.3154861759264814, 0.2474851691533022, 0.2601412405565515, 0.25347308547583247, 0.14794591349564057, 0.5464528679077625, 0.55503979611204, 0.5395134779722635, 0.5766102076118621, 0.5409550119364679, 0.5553618255509294, 0.5839306048876968, 0.556424511196866, 0.5389409340666986, 0.11060170983639128, 0.12536138673259756, 0.12025986231441566, 0.10357121088348809, 0.13303088864344337, 0.11005673785464609, 0.4609557809178233, 0.10668063889632817, 0.12382661642526982, 0.2522307087363731, 0.14726088747056343, 0.16137891192706033, 0.17234395976168393, 0.19083813369823566, 0.1797194027823149, 0.21271284961497217, 0.1806905873173975, 0.18961338245181314, 0.3567916611358658, 0.3147661700143657, 0.4283613774752568, 0.35189787724149435, 0.3177540111656959, 0.37824257021642393, 0.3537529876169899, 0.35152829483851167, 0.3182280724145594, 0.32091873213670463, 0.21521154508283402, 0.2316676764446013, 0.30743280428688735, 0.32857204489525915, 0.29811213404896053, 0.35539454458949526, 0.24521907661791875, 0.27785544648781, 0.19806887572248055, 0.20495207783596436, 0.23480518694445907, 0.20644751169334963, 0.2122021965136336, 0.2027567395331723, 0.20241745010200252, 0.22152527392045962, 0.2312881369650449, 0.1755670579800893, 0.6350960513105127, 0.19163570906208638, 0.19554480706356858, 0.1870241859774695, 0.16675729620069157, 0.5072321245303113, 0.1965942441567997, 0.5938749033903231, 0.7552764243199019, 0.6625017146556499, 0.7559979134050789, 0.7816065130563291, 0.16465318976333887, 0.67728486024464, 0.6966682901147401, 0.1684452078066968, 0.7614051301827032, 0.7393670480512373, 0.5506023922849725, 0.7686073427392844, 0.7111565488540195, 0.12541501886255924, 0.6675588184645601, 0.6392059086679924, 0.15145290364771413, 0.15978250177267095, 0.20399742932002007, 0.1881985704487693, 0.19467659037046536, 0.1893791064276148, 0.20154763574219858, 0.20567389933689306, 0.19877738428580982, 0.18841478154653168, 0.1931367493647964, 0.098887638899808, 0.10072751848975514, 0.08412541885417746, 0.08844648089537333, 0.08832083863400353, 0.0847397178526329, 0.09922617681613177, 0.08348186280376502, 0.09060038578248553]}, "mutation_prompt": null}
{"id": "e1e56cd6-9072-4e1f-8965-82ccc1b3004c", "solution": "import numpy as np\n\nclass HybridAdaptiveES_DLP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.85\n\n    def pso_update(self):\n        cognitive = 1.7\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.4, self.inertia * np.exp(-self.evaluations/(self.budget/2)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.25 else 0.55\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridAdaptiveES_DLP", "description": "Hybrid Adaptive Evolutionary Strategy with Dynamic Learning and Positioning for Enhanced Global Search.", "configspace": "", "generation": 48, "fitness": 0.3690748599180976, "feedback": "The algorithm HybridAdaptiveES_DLP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.24.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7502671915258139, 0.751806300315965, 0.7313371283189332, 0.7738498400538323, 0.7514447247560138, 0.7220490286130417, 0.7647556260535622, 0.7332979057771344, 0.7368730102692536, 0.518027361025919, 0.5200431106390577, 0.42965248866813344, 0.5201074859755659, 0.5262936059319944, 0.45101782366358767, 0.545963301260022, 0.47148851816870696, 0.4366409784319383, 0.13406138693641312, 0.13573195595272136, 0.14923934833184882, 0.1394779529449124, 0.13450456292388535, 0.10494578904364349, 0.142373337538222, 0.15420207385908902, 0.15646182169351264, 0.09661603305636346, 0.1279473033945746, 0.09723171603457992, 0.11725425188528993, 0.12746096641003768, 0.09857288795065611, 0.1036120277871807, 0.11714027811745997, 0.1381980936093079, 0.9639852669666336, 0.9875265029827803, 0.9824570421139249, 0.9819127765371933, 0.980684696774322, 0.9798759158018572, 0.9820983883250148, 0.9770799767773115, 0.9809944332319912, 0.4995017326592537, 0.4661199402579487, 0.45780166457626514, 0.504030197035097, 0.5134652679405971, 0.4647270588932165, 0.5402318207395731, 0.08687063099084358, 0.5330580949641367, 0.21426003028986973, 0.8089418853075303, 0.7181363680890527, 0.18725755514212683, 0.19976541989437857, 0.653915941307758, 0.7701435034046021, 0.8045941195665531, 0.7782557958050209, 0.3258516281937228, 0.3344306375883882, 0.36510114160693397, 0.46846763758862286, 0.12428716837283604, 0.1157199239806117, 0.3975567757235994, 0.45169848230341336, 0.5320039815823525, 0.1287931238525687, 0.5066623293978192, 0.38312178741164093, 0.5479237082386352, 0.3701489005595574, 0.45571042200257716, 0.446893654040029, 0.45421697349873613, 0.5140545483931849, 0.4510923087493144, 0.45363870610584267, 0.3796658511143758, 0.09651651140147077, 0.3289975537516123, 0.287901667257651, 0.36749206594616624, 0.2639104341341352, 0.3147601523910809, 0.47672794832530385, 0.3571429133298577, 0.39550800428907606, 0.40965399124933033, 0.45509382063678117, 0.5194644773077954, 0.4550938220757269, 0.5068726511773898, 0.5013512002676352, 0.21299083195750468, 0.2484031084751941, 0.08667312572551478, 0.27057673966635754, 0.2847988465209913, 0.13428633610045615, 0.2099128154668244, 0.1908864909570922, 0.08673778380514796, 0.2564537867243839, 0.2897477537442271, 0.29088092644632757, 0.332694898622764, 0.2778033199308392, 0.34859706538877877, 0.3545426924896994, 0.31201406790905795, 0.1381873126537605, 0.6356006242179708, 0.6531173920098771, 0.6260727840018794, 0.6857830216618694, 0.6466077767973579, 0.5981074607996895, 0.608488222331133, 0.6725318655792711, 0.6408240868061903, 0.10931795740652983, 0.10669729413846707, 0.085216912561066, 0.1264233363132924, 0.13147148159148014, 0.1270575945193898, 0.1285962035864342, 0.15740040941852784, 0.12474634628213277, 0.25484483578920014, 0.27365983836504015, 0.20244154385759094, 0.17315618048592774, 0.1894626402426044, 0.2967758475935576, 0.2544857541466906, 0.2968023714851077, 0.18669302260358278, 0.272071736104893, 0.2726393159324869, 0.2381465435663851, 0.40895084982752583, 0.3903040461803655, 0.39279507935576996, 0.4468860813503869, 0.4612900586669173, 0.3964939489476291, 0.16263578703169046, 0.21609848055016945, 0.2921713587794422, 0.19815577349354419, 0.30690320515765734, 0.39885320806910896, 0.34714983183050996, 0.4102148228211765, 0.3525820077219174, 0.2308588872372005, 0.19669103671056587, 0.23166505811946714, 0.23754782728459145, 0.21227141377442216, 0.19702436843564197, 0.2418847787207523, 0.20722625053568722, 0.20373215791691923, 0.19070758901217355, 0.21402655133278248, 0.2199878861079515, 0.19796452625337102, 0.1814523373714032, 0.4822008088047859, 0.21115742382647762, 0.1958675601258303, 0.5240040787312464, 0.8464117149479772, 0.7669757987689619, 0.15386399406114326, 0.8431230681475257, 0.1660224784272285, 0.19454420860794452, 0.16085534050311268, 0.18818867540887585, 0.8296550875581565, 0.795421056846321, 0.1657696595418061, 0.7518158661405159, 0.20349514466739904, 0.20151093959438737, 0.6724917454863251, 0.7307673880929562, 0.1521058688742718, 0.2061747188516181, 0.18603103137063137, 0.20727397885481136, 0.19739177300301658, 0.1879434478081924, 0.21212452964247785, 0.24253664149392506, 0.19940720920275556, 0.21603134445062855, 0.20827876059602346, 0.07589618656630315, 0.08827980945066571, 0.09766587113242764, 0.08292109738786857, 0.09666952991936362, 0.09989866581863449, 0.08084861520062692, 0.08717707587570034, 0.09425189000406409]}, "mutation_prompt": null}
{"id": "303b5edb-b03c-4e15-9bdf-1f2f1e1ea485", "solution": "import numpy as np\n\nclass AdaptiveHybridSwarmOpt_DSA_GIR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.7  # Adjusted slightly for convergence improvement\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n        \n        self.inertia = max(0.2, self.inertia * np.exp(-self.evaluations/self.budget))  # Altered for dynamic adaptation\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.3 else 0.5  # Modified dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n\n    def grad_refinement(self, pos):\n        epsilon = 1e-8\n        gradient = np.zeros_like(pos)\n        for i in range(self.dim):\n            perturb = np.zeros_like(pos)\n            perturb[i] = epsilon\n            grad_estimate = (func(pos + perturb) - func(pos - perturb)) / (2 * epsilon)\n            gradient[i] = grad_estimate\n        return np.clip(pos - 0.01 * gradient, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n            # Apply gradient-inspired local refinement\n            if self.evaluations + self.pop_size <= self.budget:\n                for i in range(self.pop_size):\n                    refined_particle = self.grad_refinement(self.particles[i])\n                    score = func(refined_particle)\n                    self.evaluations += 1\n\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = refined_particle\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = refined_particle\n\n        return self.global_best_position", "name": "AdaptiveHybridSwarmOpt_DSA_GIR", "description": "Adaptive Hybrid Swarm Optimization with Dynamic Strategy Adjustment and Gradient-Inspired Refinement.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {}, "mutation_prompt": null}
{"id": "0fad4ea0-ff42-4562-98fa-f9b96a97f373", "solution": "import numpy as np\n\nclass AdaptiveHybridOpt_DynComp:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for better exploration-exploitation balance\n        social = 2.0\n\n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * np.exp(-0.5 * self.evaluations/self.budget))  # Tweaked decay for adaptive behavior\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.5, 0.9)  # Higher mutation factor for increased diversity\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n\n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.1 else 0.7  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveHybridOpt_DynComp", "description": "Dual-Strategy Adaptive Hybrid Optimization with Dynamic Component Interactions for Enhanced Convergence.", "configspace": "", "generation": 50, "fitness": 0.36138338773661144, "feedback": "The algorithm AdaptiveHybridOpt_DynComp got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7503935224346312, 0.726670863637183, 0.7123292868102022, 0.743188458100474, 0.7591488549419487, 0.7282202937618126, 0.7463040719922794, 0.7346579541764597, 0.7351531844302089, 0.541125043006599, 0.5129224352720659, 0.5441037195132101, 0.5038625414324639, 0.5216332531490282, 0.47559446232163705, 0.5467143112583746, 0.5231806225950469, 0.49569007040059354, 0.12537867347669762, 0.1019069452956215, 0.09686464386886695, 0.14443158804272083, 0.14021758916447924, 0.14873822997621156, 0.15145588634149443, 0.046182181506439934, 0.1372117330683743, 0.11300209081310408, 0.13906831048760815, 0.10420176420968497, 0.12650694640270177, 0.11417067483174093, 0.1265716466732174, 0.11749406894222869, 0.11119453182350314, 0.11420637679231571, 0.9639122692409114, 0.9808453986277, 0.9804793652197024, 0.9815601300883122, 0.9813790855590075, 0.9896085826380366, 0.987697766426338, 0.9723049566814935, 0.9812241987273067, 0.5177143538133484, 0.523093849259257, 0.056931318605500936, 0.5056521981756668, 0.508964124912564, 0.5709398754930728, 0.5456524434631131, 0.08326631521748551, 0.5359641089145453, 0.6635723485185246, 0.7618716809972045, 0.7299048518578873, 0.20348054337417465, 0.7388183433117157, 0.7713772311383404, 0.7451649060464514, 0.6959891199286621, 0.7389092837350518, 0.4099700799192556, 0.43408999088038513, 0.45929366779307246, 0.3161311292601561, 0.12340028042695084, 0.09984303794011284, 0.46426082860496587, 0.39720362638437723, 0.35915576092953283, 0.3040553304002577, 0.417475093404044, 0.3666554194887184, 0.11863428118936226, 0.5161419581039046, 0.36813113741880776, 0.3340591103453333, 0.3740277887228741, 0.12200237559032501, 0.061381989912380974, 0.2785354842776899, 0.10195993162767047, 0.3265262378790379, 0.3643060135881424, 0.2957888808298479, 0.2893404590201718, 0.3689772665354969, 0.43551187771649524, 0.5418851504953948, 0.5006707062825189, 0.4845600166976455, 0.5128953512356209, 0.5367677162522504, 0.2912847384553048, 0.4269408830892858, 0.5361897022302455, 0.5148899912017358, 0.18958342697959418, 0.05426940483019793, 0.042858549191062245, 0.06811944192841979, 0.1887881795497327, 0.15118484475280625, 0.13910544466399388, 0.10580257445030838, 0.10305526356741534, 0.2867839216015018, 0.22775805203763544, 0.27987991806218815, 0.32264626958420317, 0.30137869879780166, 0.2778836987541955, 0.29689564875952323, 0.301844118561584, 0.23015044850758082, 0.6657540943475787, 0.6570341921776002, 0.6288810423613098, 0.6715799046654728, 0.6397991977524426, 0.6165701504617846, 0.6800542826714783, 0.6658807927322107, 0.5635268034341989, 0.0795199999932662, 0.1462392773707053, 0.10982497571436711, 0.13031887107765927, 0.10581407423366085, 0.11061777482363089, 0.1449557437265404, 0.11209547810473197, 0.11581918496111065, 0.5551842735845735, 0.174160551750279, 0.2170578164959711, 0.2286807145197557, 0.19130101582754333, 0.2922833370906486, 0.2835076075704638, 0.2750614493527719, 0.3310364248755311, 0.4815386042167159, 0.25607567389998975, 0.3868970054770996, 0.4173351983042014, 0.3480566586221897, 0.4657900102704492, 0.4260279107038628, 0.3902268217219931, 0.44981852885885687, 0.2500225000379718, 0.2598807466784152, 0.32821525159898834, 0.25653675090092287, 0.2897275571778898, 0.27901993446870754, 0.3466970714074078, 0.29676328031688437, 0.2458442668663955, 0.20497567617900503, 0.20827411060273326, 0.2508041677096676, 0.24371581584555901, 0.21221497773705855, 0.21630426220866994, 0.19648038738079454, 0.2112756873660211, 0.254014051215413, 0.18109043381284462, 0.1844100865513123, 0.1976165728538536, 0.2091202832882062, 0.21526630534935343, 0.20790387745647054, 0.5661421214121869, 0.19308781554979204, 0.22102215611026432, 0.8006686185118542, 0.7910652740766928, 0.1538436816879568, 0.8182946460365941, 0.16426920955768476, 0.1307316159850448, 0.15862682416133322, 0.18833234258639264, 0.7943582972122856, 0.1638212768756746, 0.15848488587956022, 0.12307184911361946, 0.20501887592938572, 0.20115175875926683, 0.1230454239116614, 0.7576385761415473, 0.7456330895435725, 0.6445922468371896, 0.1973427378211572, 0.18895397000288672, 0.19759692616069102, 0.19244475668667615, 0.1998909937644091, 0.21262077981854577, 0.20778345806795573, 0.2172319760562379, 0.1997936131331075, 0.08732489147409395, 0.10170590400724777, 0.08409514683792474, 0.08257340456167772, 0.08075079829740006, 0.08747072255367205, 0.08014987679182506, 0.08557062834361662, 0.09520440245447104]}, "mutation_prompt": null}
{"id": "a3798d26-620c-43bd-938b-ac9272fcc7ad", "solution": "import numpy as np\n\nclass AdaptiveDualStrategyOpt_ESE_DLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n        self.adaptive_factor = 0.5\n\n    def pso_update(self):\n        cognitive = 1.6\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9) * self.adaptive_factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.3 else 0.7\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveDualStrategyOpt_ESE_DLS", "description": "Adaptive Dual-Strategy Optimization with Enhanced Self-Evolving Mechanics and Dynamic Local Search.", "configspace": "", "generation": 51, "fitness": 0.4137372258742022, "feedback": "The algorithm AdaptiveDualStrategyOpt_ESE_DLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7886683795709379, 0.7796562451046417, 0.7886039686787139, 0.8059983409707134, 0.7959704965490613, 0.7888965515906784, 0.8003757432190711, 0.7929247031857544, 0.7782440545569957, 0.5893438961045268, 0.6252306577932962, 0.5963219684364893, 0.6091032525340669, 0.6302696240675238, 0.6059319731084143, 0.6124737245680366, 0.6269336166707943, 0.5490152769712603, 0.14347595760057463, 0.146236577902096, 0.13007735078014282, 0.12093211130964499, 0.11462236439512674, 0.1598069437015014, 0.11781769672529008, 0.12077143221925313, 0.10414062513221889, 0.12614106542264913, 0.10684796338891012, 0.1317598706021681, 0.09975643988025862, 0.11859138511614253, 0.09816382503764742, 0.0974531422704793, 0.10043812809498287, 0.10047401404213763, 0.9720434007890295, 0.9807967577012399, 0.9698767061337149, 0.9814959194015128, 0.9712225337316633, 0.9873943586811758, 0.9884892584256518, 0.9800305118269736, 0.9813213776372745, 0.5784423484463098, 0.5808359826468017, 0.6142626819580823, 0.6158274165523749, 0.5183349006687327, 0.6393829761160704, 0.6476204613411931, 0.0871082029622714, 0.6271953622930551, 0.7981854201910402, 0.7919166678607914, 0.801274441314924, 0.800303457204009, 0.7945577898192192, 0.18539791566970576, 0.8214462108710074, 0.8189824708464734, 0.1132748703488955, 0.6767365701315557, 0.6799061077255892, 0.4851973654938213, 0.5443178040637078, 0.4866560558011054, 0.5017432922837286, 0.45730479757647957, 0.5815971962740234, 0.445260583484679, 0.1240252537573382, 0.5257080529481319, 0.4526374493406422, 0.405834155350402, 0.4447783762408162, 0.541070102977889, 0.4030641178630644, 0.5212672902811029, 0.12613676109491245, 0.10667990431260932, 0.5617847788496911, 0.1182136042319325, 0.5496684841022708, 0.011680723672132132, 0.024034990900362763, 0.3677634702838002, 0.508956836642874, 0.42364512972418555, 0.6132754549927444, 0.5573760904293092, 0.40526519021979024, 0.5979945955238296, 0.518611295936249, 0.6126313668975865, 0.510816357990462, 0.5980695374671894, 0.5687782354868997, 0.07661067834036528, 0.22330017377695, 0.05331428439438246, 0.24214751076232877, 0.09639901309280996, 0.10445086568554784, 0.08834629781232961, 0.10637532002845929, 0.3316344400325487, 0.3213887566573468, 0.3110273636125256, 0.3972143415316275, 0.3746100729748004, 0.37129903444506174, 0.39460672409858677, 0.2609145188923411, 0.4198510078409393, 0.3780380746370452, 0.711748260349413, 0.665683544478398, 0.71129612828344, 0.6990258604336569, 0.7014487359465196, 0.6250167947752736, 0.6889093986854403, 0.7322768650256818, 0.7214145647514076, 0.10143971805486673, 0.10681269373752544, 0.11277643096961487, 0.6065480756106131, 0.13436323675047956, 0.10731949663481122, 0.12133028149746039, 0.13619199516176816, 0.12278966513086365, 0.1470808921023814, 0.1621285150116042, 0.294839716411329, 0.18214203115867167, 0.6791850536305784, 0.17367561741339665, 0.3116991412924609, 0.20944433437989352, 0.19248274299771406, 0.5196084871330793, 0.5350859764106486, 0.3741735036118473, 0.38358255523004336, 0.5217778821228426, 0.5103899974761457, 0.5939604891632833, 0.4727252655671558, 0.4902206849530215, 0.3827969671908623, 0.3635235743300048, 0.26415784252315966, 0.2587859186657725, 0.2808365037308238, 0.3582001752905827, 0.26122124593503226, 0.4462064942406595, 0.4715761876572755, 0.20110341281929, 0.24340017939276426, 0.21997657056428677, 0.2570870525827488, 0.2452834821414961, 0.18888556005600687, 0.221356197203479, 0.24599287691470884, 0.2515896145919575, 0.18515527921727648, 0.6991719329611283, 0.1768272906618742, 0.2337058863531848, 0.19573292875276116, 0.19961902632723694, 0.2387177532901128, 0.20621511639495305, 0.19654247361612998, 0.8352046895449698, 0.20624164478344098, 0.15493591647066662, 0.8629066290210867, 0.1672508553241332, 0.8509214306592672, 0.15627432290151033, 0.19259406375938593, 0.8440251205951106, 0.1518590723750618, 0.20446863811414073, 0.7882451639470296, 0.8356569801469416, 0.1993520442247726, 0.7778631902705978, 0.8200515447752584, 0.8256866395798613, 0.7842555626828861, 0.18366510186616714, 0.20312294729361424, 0.18445918993617538, 0.20031856317759045, 0.2326592939327452, 0.27984465274734993, 0.17864165874487548, 0.17978966859170997, 0.18725022037754868, 0.09811075154615923, 0.10494323712369424, 0.09713776492269166, 0.09467034590996393, 0.09984664899201812, 0.10281225803448091, 0.08115651697117443, 0.09614787946040071, 0.09210277656400467]}, "mutation_prompt": null}
{"id": "3ac23c64-b640-41fe-b68c-ab63adf3d74d", "solution": "import numpy as np\n\nclass EnhancedDualStrategyOpt_AM_HE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slight adjustment for balance\n        social = 1.9  # Slight increase for social influence\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adaptive inertia decay for improved convergence\n        self.inertia = max(0.2, self.inertia * np.exp(-self.evaluations/(2*self.budget)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Higher mutation factor for better exploration\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.3 else 0.5  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedDualStrategyOpt_AM_HE", "description": "Enhanced Dual-Strategy Optimization with Adaptive Mechanics and Hybrid Exploration.", "configspace": "", "generation": 52, "fitness": 0.35085055363512946, "feedback": "The algorithm EnhancedDualStrategyOpt_AM_HE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7585571665418149, 0.7548373834800111, 0.7636626332864987, 0.783235987930186, 0.7698903178407265, 0.7631735781901247, 0.7623965366365919, 0.759144245373727, 0.7583644600880843, 0.5700810340225568, 0.607576415081447, 0.5663706981092103, 0.566801575338169, 0.5855459458848089, 0.5700945352303328, 0.5781787818798174, 0.4877209521068675, 0.5776279439804808, 0.12682315089082552, 0.13891322076946833, 0.12622997267188496, 0.16061152816773483, 0.06963898774460198, 0.10441479663817388, 0.16409676565502906, 0.11859005778566534, 0.15693361436508735, 0.11508523082444044, 0.12419613098097815, 0.10374594859436259, 0.11085631337156954, 0.10524881910305317, 0.13612701312900044, 0.1303844977087496, 0.11754908839390632, 0.12086172195433498, 0.9641198559885413, 0.9808837263190688, 0.9843169855384135, 0.9793850188740802, 0.9813630121319106, 0.9789292915769393, 0.9827861848238162, 0.9792547432901356, 0.9809355326915943, 0.5333661442468602, 0.05448534427078633, 0.057076762571991124, 0.5695201279830999, 0.5635006465811425, 0.5309512373393677, 0.6026533904568225, 0.08346396027212, 0.45553420173850956, 0.7665124733389044, 0.7297871233249478, 0.7415271134779395, 0.7759831949974461, 0.19595598338298148, 0.7654916541678616, 0.758962980436683, 0.7669620877501991, 0.22537999878822113, 0.3739940138735792, 0.4251967730050451, 0.4934330425528418, 0.38545101571351736, 0.12094856187327352, 0.11674596377254587, 0.38720566659998334, 0.4639378407952829, 0.33886449952081044, 0.30281416960936625, 0.10305199964066925, 0.2730735967795713, 0.3061213232532778, 0.32913660704380376, 0.4213416861938406, 0.41369740845218506, 0.4760186608700533, 0.4896734985519262, 0.05858457236298564, 0.1721418860803493, 0.07630432319816793, 0.10582810739811088, 0.25381797618605795, 0.1729193225669422, 0.09455919325576034, 0.2888964282264762, 0.04143509027386649, 0.3015207059649254, 0.16855997327459804, 0.5268120804166571, 0.11799459915748867, 0.404823158107555, 0.1761322225719255, 0.376728620706399, 0.46161343918443, 0.45897709962383626, 0.05228313274076157, 0.08417505011550197, 0.04095827260792828, 0.12128708954663248, 0.0899978633457611, 0.11252393484890966, 0.13290731795990707, 0.060204199646350376, 0.13362683892128047, 0.153137106535443, 0.16262937229024632, 0.18430209467913383, 0.2327197765561254, 0.23325669306142738, 0.3463599267543709, 0.21098709753670586, 0.27124615590029744, 0.2902080041717461, 0.5956340219432581, 0.6905101448543949, 0.6357249964284282, 0.6121564924450436, 0.5198520372004385, 0.6364602220646882, 0.6349942843786931, 0.6438727134004805, 0.6366363595379012, 0.08068548256968411, 0.5915252240859399, 0.10541498286597684, 0.10182238208486738, 0.1323153651119423, 0.09993345130278597, 0.13922022163765724, 0.14318870860824862, 0.11890910703650037, 0.28608791637449116, 0.18691383485104818, 0.515670338168563, 0.29468144749183756, 0.30574978996974467, 0.22178403947160297, 0.23836448137655775, 0.19068715911961776, 0.2547871510088593, 0.3255181990382141, 0.3490735764833679, 0.4547780569557204, 0.5366314827671552, 0.3673593164678285, 0.3700155894357826, 0.3761179006429338, 0.41226856862913064, 0.39087347161353614, 0.3318957995767511, 0.2342411667003117, 0.3073198850196962, 0.2535575508804577, 0.17296886610677864, 0.3364142058741256, 0.2770909228026861, 0.3744195486912515, 0.3472012458008923, 0.21043113059232688, 0.2288189071181116, 0.22434443010779004, 0.20066710018412037, 0.211550598109277, 0.23461520232790956, 0.2009897393074923, 0.20321636147314126, 0.24527271619210178, 0.2241423118242295, 0.21442590670588213, 0.1876057491352502, 0.24245207934987256, 0.1992652160756635, 0.18797400769831285, 0.19219393078758906, 0.19183484861410938, 0.21755597945477578, 0.8007280917224251, 0.7535541912732537, 0.15419221677460426, 0.820622375437001, 0.16409402860679168, 0.7983583956357577, 0.1604132063446837, 0.17919262190483187, 0.8079220878791895, 0.7865569579861864, 0.15892510928611847, 0.7148557294659652, 0.20116912537956866, 0.1931261535412213, 0.12201444328212141, 0.741689057093361, 0.19121431704497227, 0.16071759057548296, 0.22729224960045824, 0.18421641114984733, 0.18975596708858433, 0.191812099286634, 0.18255695623794999, 0.20787866942544875, 0.2233867413922911, 0.1990823029257084, 0.18727182347440507, 0.08770041220041913, 0.09323844318356755, 0.07397819347216994, 0.10801466251593916, 0.09084711571938608, 0.09730226520296381, 0.09702177523247157, 0.10419566733352914, 0.08631732659148506]}, "mutation_prompt": null}
{"id": "842b7253-e816-4db6-bf00-70763efeb77d", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6  # Slight adjustment for better balance\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.8)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Enhanced Self-Adaptive Mechanics and Robust Local Search.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7870987350386937, 0.772518642027322, 0.787728678541876, 0.8010768155416359, 0.7858126277044558, 0.7981966111874281, 0.7662631058241139, 0.8087458627542605, 0.7690837498367729, 0.5896795087852476, 0.5735828463662223, 0.5565392737708605, 0.5894808973567274, 0.6017160046820762, 0.5639929848560422, 0.6312073057755399, 0.5848169343420315, 0.5868629083356047, 0.12061128999816606, 0.5494421317282103, 0.14190306480767445, 0.15382114983953887, 0.12259768362876533, 0.13144750102407776, 0.12365857783104839, 0.13151555098113643, 0.15351739436204825, 0.10301885915320586, 0.11447178468660424, 0.10561358261394438, 0.12129722162780476, 0.11000471569198766, 0.13611168566855814, 0.10043188316143792, 0.090043166015214, 0.12918190052949596, 0.9732621583689356, 0.9815608289967621, 0.9818510617897828, 0.9785027520351097, 0.9792564143828625, 0.9822065439283073, 0.9823095614839283, 0.9790506626627897, 0.9795413886462214, 0.6150983459887418, 0.5640108269027803, 0.6244951432421865, 0.6200267030611315, 0.6119185791232105, 0.5969960056467587, 0.6185226102900205, 0.628923972494331, 0.5949339759948769, 0.7736840356835168, 0.8046487424038944, 0.8013336804898411, 0.7933406383001566, 0.2609792155194338, 0.7613405818748401, 0.752482495741054, 0.8071122782778353, 0.7814998894663063, 0.5535532934233942, 0.1249929576570672, 0.48532480991894444, 0.3911384587307051, 0.3762792506817956, 0.1234822546160278, 0.4215854205785353, 0.5406292687387089, 0.4859706009434315, 0.123855055362601, 0.5143795616659781, 0.6237899346108242, 0.5185170478308194, 0.5752111884529714, 0.566800902011283, 0.4972075508505991, 0.4677454108165018, 0.5195901436728843, 0.1633924876113091, 0.5520351202485271, 0.49944070284297637, 0.4788820797054245, 0.28498921698036017, 0.22969785541125298, 0.16671335625782635, 0.5701972939703067, 0.45482112697308064, 0.6129089428234611, 0.5907074902564944, 0.6073925560819393, 0.6409840927704913, 0.5507468518094081, 0.5515036160881457, 0.5738718840343257, 0.6134334186133665, 0.48497291684096033, 0.06124641794126107, 0.16720493553082083, 0.10664120415307876, 0.3609224600080322, 0.3500717402695108, 0.3374551425988106, 0.15795686538134923, 0.312489430229574, 0.27776098960287465, 0.48682412743852366, 0.39643427067218806, 0.40635826776662887, 0.3309448225366828, 0.432681611970551, 0.4275533769512815, 0.4194937787969636, 0.40573408098205943, 0.384182725699451, 0.7127015145255844, 0.6942192942167968, 0.6823039128582049, 0.7255047010191809, 0.7209093524394025, 0.7416583847973427, 0.6573925306454509, 0.729329908825407, 0.7272781835635522, 0.10983758034885216, 0.0815814639913347, 0.14760364609163557, 0.09949933544094858, 0.12520233526896096, 0.10382086923047829, 0.11949443539224636, 0.13550067992282433, 0.14551652419676597, 0.2104166356200391, 0.24761253808470196, 0.16736004209546773, 0.21069957148426566, 0.3178747451948474, 0.20405493302824973, 0.2016023287136537, 0.1569435079983752, 0.32233515098417287, 0.4668648776898553, 0.42923520535418547, 0.49466073637936636, 0.5330050602939242, 0.48410328718593076, 0.5084100137276557, 0.5073371715241586, 0.5173061281215685, 0.4780557830217459, 0.3169162837845394, 0.3468065173831366, 0.29849109561110176, 0.20372234445480686, 0.3129465001155106, 0.418253610420402, 0.34608326596776173, 0.35200057405278784, 0.22062289763841458, 0.21610700492297152, 0.20980598541198692, 0.19895890469831579, 0.20282820136653212, 0.21265301681019122, 0.19955491410658677, 0.2485951948230275, 0.219186851133931, 0.21177511905542656, 0.21417891275971446, 0.2290515321020663, 0.19951361848862204, 0.2192480859003212, 0.20325848224644782, 0.1985522526013549, 0.19134310349214134, 0.19128419477329295, 0.20835075318747232, 0.2011130207583356, 0.18136518698602955, 0.15480346923505584, 0.8568033281825458, 0.1659355150040135, 0.8099436876802873, 0.15918779105992675, 0.1384718004653287, 0.8377792932980035, 0.7976384823121043, 0.7490010600090697, 0.3283129367391415, 0.20777238880548665, 0.7952854859082754, 0.6776086942188557, 0.802925508818296, 0.20273872256748282, 0.7480380828768712, 0.1979086250905704, 0.21813056777725037, 0.20362282800165876, 0.17768017110198275, 0.19108221134425207, 0.2050148328403255, 0.20468033155912202, 0.1988493882729343, 0.21505535447641733, 0.08928553143436235, 0.09693808402808768, 0.08848415275924182, 0.08921400340364438, 0.09332038547768096, 0.10457266009268973, 0.09776342520115244, 0.09885487006882432, 0.07588945782540701]}, "mutation_prompt": null}
{"id": "e0d28e0d-0241-4be2-8d29-d487288e9949", "solution": "import numpy as np\n\nclass AdaptiveDualStrategyOpt_DYNAMIC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.7  # Slight adjustment for better exploration\n        social = 1.5  # Small change for improved convergence\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.25, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted mutation factor for better exploration\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.3 else 0.7  # Dynamic crossover rate adjustment\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveDualStrategyOpt_DYNAMIC", "description": "Adaptive Dual-Strategy Optimization with Dynamic Interplay of Particle Swarm and Decomposition Techniques.", "configspace": "", "generation": 54, "fitness": 0.3778653815413393, "feedback": "The algorithm AdaptiveDualStrategyOpt_DYNAMIC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7835659498524202, 0.7833911061945944, 0.7870296712987743, 0.8141194495238735, 0.8114995072627761, 0.8072445985578264, 0.8075831866690586, 0.7747522307378555, 0.7952756895870108, 0.6192542635242162, 0.6392650543787777, 0.5913359578095557, 0.6184170751497791, 0.6288458700159077, 0.6087197168304411, 0.6304706365901477, 0.6096365516358271, 0.6248913729821477, 0.147662030630894, 0.13865293632321485, 0.130974419555987, 0.11817393905767681, 0.12151857503680619, 0.11771594593339996, 0.11205452380027059, 0.13061234826575618, 0.12922413494050577, 0.12796941448291055, 0.1624492789614813, 0.12173163367955453, 0.111104061700115, 0.11476768699813233, 0.10507494760896208, 0.0965521434879576, 0.09620866150871221, 0.08859467282980571, 0.9803559465625419, 0.9804626866602868, 0.9724418522641558, 0.9809048331579029, 0.9772888615586927, 0.9814246684872661, 0.9820172982457285, 0.9718206798593264, 0.972724644589451, 0.653240918309572, 0.6210704935291145, 0.6573379109734194, 0.6527302583901187, 0.639362985808946, 0.6177406333788544, 0.6819576650999015, 0.3250059096946769, 0.08438528773611376, 0.707209354217972, 0.7829928298840786, 0.22095621098656115, 0.19746492540538396, 0.8172457766014156, 0.3450995502478499, 0.21885558758473223, 0.7557989701610521, 0.764521704557711, 0.1266155075921539, 0.427375735966561, 0.5058414839869263, 0.12311084914672743, 0.48824118912516157, 0.5409831030207166, 0.6276406379569088, 0.5514157131936942, 0.41509188007689046, 0.3303353406656869, 0.5915820108389176, 0.11888600870967803, 0.34100553442636117, 0.6268267613990759, 0.5667971455721836, 0.3602357580979143, 0.4946480604069867, 0.4387391357435121, 0.4391712722615464, 0.260488002057886, 0.3808663216680189, 0.10410214370675963, 9.999999999998899e-05, 0.3334046663893492, 0.2510035640824858, 0.5287791574345353, 0.24115060381650688, 0.4233331533207847, 0.5513485412504366, 0.2849879340419218, 0.10087684865892588, 0.37522239790747214, 0.5962020504822553, 0.5921277149910178, 0.5525637147268017, 0.6000384867034863, 0.0445263206113794, 0.058747802239423774, 0.15983022851492656, 0.06775775241954196, 0.06577179993216364, 0.13251835152747116, 0.12551751463943894, 0.19224292305722757, 0.06256549530744893, 0.2388793448310358, 0.44639975358948036, 0.2701613580776331, 0.387763427189197, 0.36377860395889583, 0.41883577466013266, 0.19182045180060225, 0.3048069467071097, 0.29771162349918434, 0.6297994183362612, 0.6153275138241954, 0.6053676633707565, 0.5984770146120193, 0.6044872487711569, 0.6747578983096898, 0.6252619624832855, 0.6637151492679407, 0.6153631290213543, 0.09623513429006758, 0.10043325365901312, 0.11168591519568527, 0.10178641751993966, 0.13056005767755796, 0.12245758297659837, 0.10399182662077344, 0.16873425098131045, 0.09292654564686076, 0.35397689251837805, 0.2502021226037957, 0.15948893776864037, 0.16563256009094351, 0.25551235821178364, 0.35658318395546207, 0.14954331032842438, 0.20945622108873174, 0.21139860553608392, 0.30040990456732786, 0.3147818619863614, 0.3386465498709076, 0.4585314591437364, 0.5501450882947916, 0.3366491511248497, 0.46401179043802143, 0.6059077305945096, 0.49982748102729246, 0.16861551169750932, 0.324615609535865, 0.2646730185445454, 0.28840369901956286, 0.3900063948530883, 0.2856822458755771, 0.2527053562032552, 0.32127152314587015, 0.22327085287877058, 0.24002294808324787, 0.22544497594323243, 0.22489673934374155, 0.21753816663812098, 0.3024149080314863, 0.19359610318933806, 0.1987903580399185, 0.25807818489746615, 0.20884778968040396, 0.2375012497838156, 0.21432933726356418, 0.20290967409064053, 0.23723420068842305, 0.18361569734013594, 0.49997399659301645, 0.20843282946266395, 0.19546115807147246, 0.22715723025778156, 0.162124948296116, 0.14813962910759637, 0.15383436026216313, 0.8494607327418475, 0.16733899560289411, 0.7092136372036943, 0.8010706877084387, 0.16711632282746647, 0.8456079470631062, 0.7474666685814884, 0.8037589492321984, 0.16264558628725012, 0.7151037657647883, 0.19890400502894945, 0.16289398041151848, 0.8042415349206788, 0.14935129084340004, 0.19027607150712034, 0.20393211038823433, 0.1897553229585467, 0.20895530836480125, 0.19478102896637484, 0.18703507059750268, 0.19225084136159198, 0.1934207773170845, 0.21240211448837698, 0.20254679721629099, 0.08810401544668345, 0.0978641877986971, 0.08127955165303191, 0.12790036197597854, 0.08981684105428756, 0.11242487380917943, 0.10436257166855867, 0.08206292792496517, 0.1043840563368823]}, "mutation_prompt": null}
{"id": "76020ae8-0711-4754-a3cb-ace1b0013462", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.8)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n            # Adaptive population size adjustment\n            if self.evaluations < 0.5 * self.budget:\n                self.pop_size = int(50 + 50 * (self.evaluations / self.budget))\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Enhanced Self-Adaptive Mechanics, Robust Local Search, and Adaptive Population Size.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 50 is out of bounds for axis 0 with size 50').", "error": "IndexError('index 50 is out of bounds for axis 0 with size 50')", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {}, "mutation_prompt": null}
{"id": "9fef196e-66f0-480b-a0f1-791b1c8f7a60", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.7  # Slight adjustment for better cognitive-social balance\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Enhanced nonlinear inertia decay with adaptive rate\n        self.inertia = max(0.3, self.inertia * np.exp(-0.5 * self.evaluations / self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.25 else 0.65  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Adaptive Dual-Strategy Optimization with Improved Inertia and Mutation Dynamics.", "configspace": "", "generation": 56, "fitness": 0.37102195448327746, "feedback": "The algorithm StochasticDualStrategyOpt_SAM_RLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7471119353365535, 0.7195693399382375, 0.7513735456379841, 0.7499298649743982, 0.7642801104146696, 0.7400665933949665, 0.756270147450314, 0.7700072466903463, 0.7491797393722599, 0.5323156412682806, 0.5287645867467468, 0.5078334869782676, 0.5692234512557253, 0.5420778620316036, 0.5312552497597268, 0.5135118735150257, 0.5087844796748722, 0.5042616009445963, 0.3789937143785467, 0.12138294106448178, 0.1497743879899246, 0.12699378536010097, 0.1335258195942668, 0.4362301476852183, 0.15903547207781155, 0.1524432953017033, 0.15336776687136644, 0.11609830089209061, 0.12328865040457782, 0.1245781676433273, 0.10922208555190849, 0.12782718267488147, 0.13288367695506675, 0.11000446321187463, 0.11782739283387822, 0.10178220278152317, 0.964515482732323, 0.9874986294623358, 0.9760343118243487, 0.9819215998566425, 0.9806895376299919, 0.9874201896633534, 0.9862797172884129, 0.9806734033569905, 0.9812432312043231, 0.5311719007240725, 0.058205744259341, 0.5194408279822912, 0.5703401326837638, 0.49116909357032634, 0.5194836477917124, 0.529953897672486, 0.08527135336965841, 0.5209046791784604, 0.775421225344632, 0.7269943926195448, 0.7423637211850257, 0.7745454328195142, 0.7544144251765107, 0.7410211889822265, 0.7259715414766832, 0.7851788421959152, 0.7534578786176303, 0.11723668046317093, 0.11150111370401683, 0.45674435090516496, 0.4267491908261358, 0.47560838095160907, 0.08537424001063132, 0.44447398453525044, 0.11487947141469701, 0.4842460551091514, 0.34316766913560104, 0.5009254336435347, 0.02102192798169633, 0.5251517434638908, 0.3631442385100029, 0.11856072591736977, 0.4704035290720301, 0.5138682549116339, 0.37787644343784577, 0.2432090307284802, 0.2827959025240274, 0.2099361244347231, 0.19292191429005245, 0.5235064113200176, 0.41060300995388166, 0.2935440258951181, 0.4084861200232981, 0.47208090934005176, 0.5194707107241654, 0.5261078091706686, 0.5233357048203797, 0.4507034112052538, 0.5559538160755745, 0.4595363525481919, 0.5491367742527349, 0.5070578503016314, 0.5368202075716296, 0.04102162556307942, 0.23584744686066705, 0.07527471282270903, 0.07749894532024004, 0.15383515918322066, 0.07413888395789436, 0.14480161927415935, 0.11262695359629249, 0.11773473205707885, 0.31678604960944556, 0.3033631986640778, 0.3875207312502359, 0.3238152477476095, 0.3455889476739249, 0.2818801513170782, 0.3754023445273722, 0.3540266412193731, 0.3066299466149638, 0.6264236480174562, 0.5886684815769347, 0.6892216237881033, 0.6646998763672223, 0.6561118780115809, 0.6529067956886636, 0.6586793244697227, 0.6576151243105453, 0.6200902906661827, 0.11040063970116387, 0.08468726684531214, 0.11092241627374189, 0.163989504696615, 0.12937839477956936, 0.1237352055486084, 0.12469946884861238, 0.08834590425834576, 0.10919815732369897, 0.14578044823855307, 0.5436945759035624, 0.1477216697967504, 0.2629164900345592, 0.21346423505875833, 0.30424995757413653, 0.4606381011091084, 0.1683092500051212, 0.1989048809940961, 0.4391089335353373, 0.4595929595366539, 0.48801652205473456, 0.4325072241479979, 0.34305923371210323, 0.33483959986974465, 0.45306290897025514, 0.40123147672658566, 0.45692654398357746, 0.2299499089250464, 0.25103559983172796, 0.37535422582271105, 0.35711483147765544, 0.29992828953410033, 0.35029246600687436, 0.23750150456106967, 0.31383314065606316, 0.2787292069906012, 0.1883525747985978, 0.19110080200145696, 0.20388548705952525, 0.2159179504078219, 0.19817363669953525, 0.21827206911740527, 0.19790116321986506, 0.20868219096101626, 0.19926572695370437, 0.21536202244587943, 0.23068937971152004, 0.1964738609480483, 0.2034898297835933, 0.205744255453726, 0.20099358157389036, 0.21324617538617419, 0.17716075005716647, 0.2353547058826274, 0.17864901844462566, 0.17635774590719355, 0.15450084718921697, 0.8553963830453826, 0.16629852512826726, 0.19068044401439688, 0.763267387655553, 0.16161980138579024, 0.8186711444658857, 0.16444874552515243, 0.166500036688786, 0.6334557527111724, 0.7503055767796192, 0.1969402426818061, 0.16492209071992425, 0.7140595357363793, 0.1953408591614375, 0.1527554778733855, 0.20355760641972975, 0.20614118603223952, 0.17916231408370498, 0.20724978229220248, 0.18053728028440086, 0.18912997710378443, 0.1955935122872936, 0.1982268470808043, 0.22946923769662808, 0.08751283705237256, 0.08866908714258004, 0.08834984591240225, 0.09388103245244817, 0.08928377424883949, 0.0869866916739549, 0.08929779259895354, 0.085376790302092, 0.09394751616002961]}, "mutation_prompt": null}
{"id": "2813a6e5-7c3c-4c4c-9d11-aeba372d3e76", "solution": "import numpy as np\n\nclass DynamicDualStratOpt_AIR_Crossover:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Minor adjustment for cognitive factor\n        social = 2.0  # Slight increase for better convergence\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adaptive inertia decay considering evaluations and diversity\n        self.inertia = max(0.3, self.inertia * np.exp(-0.5 * (self.evaluations/self.budget)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.7)  # Adjusted mutation factor for flexibility\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.7 if np.random.rand() > 0.3 else 0.5  # Dynamic crossover probability\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with adaptive inertia updates\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mutation and crossover\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "DynamicDualStratOpt_AIR_Crossover", "description": "Dynamic Dual Strategy Optimization with Adaptive Inertia and Refined Crossover for Balanced Exploration and Exploitation.", "configspace": "", "generation": 57, "fitness": 0.33374486653132274, "feedback": "The algorithm DynamicDualStratOpt_AIR_Crossover got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.750825917817265, 0.6899066208818629, 0.7348792839094269, 0.7373984700646516, 0.7489297693653927, 0.7383682611310219, 0.7599279769811094, 0.7236077382482593, 0.7482751940375401, 0.5049092759377788, 0.5146067410628107, 0.5018127499984124, 0.562867757057726, 0.5055768625077204, 0.504174316656694, 0.22140999754219948, 0.3925505695416943, 0.5040962938847315, 0.14564501834446342, 0.13800458147206884, 0.14074428122771787, 0.12247466688087061, 0.12743127508965846, 0.1343913733296095, 0.12352082357820149, 0.15807957303696007, 0.058087842648472776, 0.11925581870779933, 0.10001789196191224, 0.11444187296092023, 0.1223490089248016, 0.11918849884237226, 0.12665836900396987, 0.12218195493113582, 0.11335696468469592, 0.10684818486838155, 0.9724375536928013, 0.9791782949687978, 0.9843808564342128, 0.989513260798141, 0.9788078497528812, 0.9801795209977756, 0.9881305161093575, 0.9805118595571561, 0.9808537312326367, 0.5669696356552528, 0.47311916840945656, 0.05702376579169288, 0.5356343716881252, 0.5197077637618, 0.5259215996361137, 0.4650128739942462, 0.43634243969281106, 0.4738925411885192, 0.7515695904762117, 0.7608599896510042, 0.7291450133799288, 0.7476491931635196, 0.17908602929171646, 0.19609171725752472, 0.7295325221323792, 0.7463256696899496, 0.638393150685392, 0.39862886865908664, 0.388761249937558, 0.34081678876175736, 0.3745413882923003, 0.11511579160841523, 0.44873832064393326, 0.387067386165156, 0.3399837657447997, 0.4618185792159404, 0.3435433470069128, 0.4201065701985792, 0.21635277096704109, 0.4460221665967885, 0.49990619626160304, 0.33998795573920315, 0.4121651637432504, 0.3668122307653381, 0.46171563488615064, 0.09347661529039197, 0.05671670434824716, 0.1676941256704062, 0.04009592556268049, 0.013655270554647214, 0.016796334039156147, 0.11561156430662378, 0.19096184425459295, 0.002418470921052518, 0.16973827771220762, 0.32876884157251485, 0.45406619418189886, 0.13337818853139816, 0.30828285395760413, 0.30031060182132774, 0.4716838071943975, 0.02012314691007633, 0.32384214600849826, 0.04431210384654227, 0.06130434572961874, 0.03647115041742832, 0.17776780026876038, 0.18904295115310854, 0.19446493251362895, 0.08314726303642306, 0.0966472247550404, 0.1031092123115035, 0.27553354957513243, 0.24294442780279046, 0.1777819291023598, 0.16620598472705028, 0.19610589975413195, 0.3404955652597256, 0.12996862896627903, 0.14172169259796896, 0.2586959902228536, 0.6148877089453593, 0.6130553643625991, 0.5590767860821046, 0.6738188339127165, 0.6281451495122925, 0.559967101313925, 0.6492232900846853, 0.6303834819409333, 0.5602138184448471, 0.08769743880553593, 0.10208330146886824, 0.08467536210476667, 0.13599105320830496, 0.10289877811257486, 0.1319869348538778, 0.10285204023277361, 0.09990063899622692, 0.12271512479045743, 0.14848379185232152, 0.16326702527287962, 0.21258626985539608, 0.22761275189580243, 0.2840804028705962, 0.1620863598344613, 0.18687442293255707, 0.19657846880016727, 0.20250663014759185, 0.307495213359705, 0.4045370840862488, 0.4614937325782108, 0.31728972372683206, 0.42760078101072285, 0.3168804305463455, 0.3931472711526999, 0.4828704797373624, 0.39934675807300846, 0.24827592572289403, 0.2387763476484096, 0.25705118085664236, 0.25413590043979606, 0.3197089497204091, 0.1757879532549923, 0.4329857996948733, 0.2774888223824883, 0.2925052041251439, 0.20761314448431856, 0.2096227062497572, 0.20656610496527494, 0.1939325514525856, 0.2362893396617748, 0.21752920714249435, 0.21266635681841128, 0.1865043665905426, 0.20920274159673058, 0.19169001582277545, 0.19266655590403414, 0.19850494774793503, 0.20807299577138982, 0.20159966473824809, 0.21290863635782042, 0.19126542379628686, 0.2106995177674128, 0.1814749536615191, 0.1717190324241883, 0.19831576113401683, 0.15354922484005584, 0.7892822442322183, 0.1618291537177705, 0.16202302758883402, 0.12076623380429341, 0.18508666092270765, 0.7761994582498143, 0.7388500400567583, 0.20266993085508056, 0.7181381196164415, 0.7713742562647048, 0.19330613923119022, 0.7584756589555314, 0.7619203740929418, 0.2043297784214112, 0.15973547721153614, 0.19435241611371434, 0.19102587083078648, 0.2102795741739808, 0.22211675765564498, 0.22528921341441055, 0.19633130742806038, 0.18809749061582626, 0.2323691576808049, 0.19044483018763314, 0.08746691719752908, 0.09448418469134412, 0.09211147326288627, 0.08914725069647245, 0.07828710978001818, 0.08869953973585543, 0.09297626738195541, 0.08851657252129264, 0.09099153021568018]}, "mutation_prompt": null}
{"id": "ddf81039-5b8a-4ecd-b2eb-e8aa1f7df78a", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6  # Slight adjustment for better balance\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.8)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Enhanced Self-Adaptive Mechanics and Robust Local Search.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7870987350386937, 0.772518642027322, 0.787728678541876, 0.8010768155416359, 0.7858126277044558, 0.7981966111874281, 0.7662631058241139, 0.8087458627542605, 0.7690837498367729, 0.5896795087852476, 0.5735828463662223, 0.5565392737708605, 0.5894808973567274, 0.6017160046820762, 0.5639929848560422, 0.6312073057755399, 0.5848169343420315, 0.5868629083356047, 0.12061128999816606, 0.5494421317282103, 0.14190306480767445, 0.15382114983953887, 0.12259768362876533, 0.13144750102407776, 0.12365857783104839, 0.13151555098113643, 0.15351739436204825, 0.10301885915320586, 0.11447178468660424, 0.10561358261394438, 0.12129722162780476, 0.11000471569198766, 0.13611168566855814, 0.10043188316143792, 0.090043166015214, 0.12918190052949596, 0.9732621583689356, 0.9815608289967621, 0.9818510617897828, 0.9785027520351097, 0.9792564143828625, 0.9822065439283073, 0.9823095614839283, 0.9790506626627897, 0.9795413886462214, 0.6150983459887418, 0.5640108269027803, 0.6244951432421865, 0.6200267030611315, 0.6119185791232105, 0.5969960056467587, 0.6185226102900205, 0.628923972494331, 0.5949339759948769, 0.7736840356835168, 0.8046487424038944, 0.8013336804898411, 0.7933406383001566, 0.2609792155194338, 0.7613405818748401, 0.752482495741054, 0.8071122782778353, 0.7814998894663063, 0.5535532934233942, 0.1249929576570672, 0.48532480991894444, 0.3911384587307051, 0.3762792506817956, 0.1234822546160278, 0.4215854205785353, 0.5406292687387089, 0.4859706009434315, 0.123855055362601, 0.5143795616659781, 0.6237899346108242, 0.5185170478308194, 0.5752111884529714, 0.566800902011283, 0.4972075508505991, 0.4677454108165018, 0.5195901436728843, 0.1633924876113091, 0.5520351202485271, 0.49944070284297637, 0.4788820797054245, 0.28498921698036017, 0.22969785541125298, 0.16671335625782635, 0.5701972939703067, 0.45482112697308064, 0.6129089428234611, 0.5907074902564944, 0.6073925560819393, 0.6409840927704913, 0.5507468518094081, 0.5515036160881457, 0.5738718840343257, 0.6134334186133665, 0.48497291684096033, 0.06124641794126107, 0.16720493553082083, 0.10664120415307876, 0.3609224600080322, 0.3500717402695108, 0.3374551425988106, 0.15795686538134923, 0.312489430229574, 0.27776098960287465, 0.48682412743852366, 0.39643427067218806, 0.40635826776662887, 0.3309448225366828, 0.432681611970551, 0.4275533769512815, 0.4194937787969636, 0.40573408098205943, 0.384182725699451, 0.7127015145255844, 0.6942192942167968, 0.6823039128582049, 0.7255047010191809, 0.7209093524394025, 0.7416583847973427, 0.6573925306454509, 0.729329908825407, 0.7272781835635522, 0.10983758034885216, 0.0815814639913347, 0.14760364609163557, 0.09949933544094858, 0.12520233526896096, 0.10382086923047829, 0.11949443539224636, 0.13550067992282433, 0.14551652419676597, 0.2104166356200391, 0.24761253808470196, 0.16736004209546773, 0.21069957148426566, 0.3178747451948474, 0.20405493302824973, 0.2016023287136537, 0.1569435079983752, 0.32233515098417287, 0.4668648776898553, 0.42923520535418547, 0.49466073637936636, 0.5330050602939242, 0.48410328718593076, 0.5084100137276557, 0.5073371715241586, 0.5173061281215685, 0.4780557830217459, 0.3169162837845394, 0.3468065173831366, 0.29849109561110176, 0.20372234445480686, 0.3129465001155106, 0.418253610420402, 0.34608326596776173, 0.35200057405278784, 0.22062289763841458, 0.21610700492297152, 0.20980598541198692, 0.19895890469831579, 0.20282820136653212, 0.21265301681019122, 0.19955491410658677, 0.2485951948230275, 0.219186851133931, 0.21177511905542656, 0.21417891275971446, 0.2290515321020663, 0.19951361848862204, 0.2192480859003212, 0.20325848224644782, 0.1985522526013549, 0.19134310349214134, 0.19128419477329295, 0.20835075318747232, 0.2011130207583356, 0.18136518698602955, 0.15480346923505584, 0.8568033281825458, 0.1659355150040135, 0.8099436876802873, 0.15918779105992675, 0.1384718004653287, 0.8377792932980035, 0.7976384823121043, 0.7490010600090697, 0.3283129367391415, 0.20777238880548665, 0.7952854859082754, 0.6776086942188557, 0.802925508818296, 0.20273872256748282, 0.7480380828768712, 0.1979086250905704, 0.21813056777725037, 0.20362282800165876, 0.17768017110198275, 0.19108221134425207, 0.2050148328403255, 0.20468033155912202, 0.1988493882729343, 0.21505535447641733, 0.08928553143436235, 0.09693808402808768, 0.08848415275924182, 0.08921400340364438, 0.09332038547768096, 0.10457266009268973, 0.09776342520115244, 0.09885487006882432, 0.07588945782540701]}, "mutation_prompt": null}
{"id": "940bc208-dde6-4124-9cf2-6b8cb94eca3e", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6  # Slight adjustment for better balance\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.8)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Enhanced Self-Adaptive Mechanics and Robust Local Search.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7870987350386937, 0.772518642027322, 0.787728678541876, 0.8010768155416359, 0.7858126277044558, 0.7981966111874281, 0.7662631058241139, 0.8087458627542605, 0.7690837498367729, 0.5896795087852476, 0.5735828463662223, 0.5565392737708605, 0.5894808973567274, 0.6017160046820762, 0.5639929848560422, 0.6312073057755399, 0.5848169343420315, 0.5868629083356047, 0.12061128999816606, 0.5494421317282103, 0.14190306480767445, 0.15382114983953887, 0.12259768362876533, 0.13144750102407776, 0.12365857783104839, 0.13151555098113643, 0.15351739436204825, 0.10301885915320586, 0.11447178468660424, 0.10561358261394438, 0.12129722162780476, 0.11000471569198766, 0.13611168566855814, 0.10043188316143792, 0.090043166015214, 0.12918190052949596, 0.9732621583689356, 0.9815608289967621, 0.9818510617897828, 0.9785027520351097, 0.9792564143828625, 0.9822065439283073, 0.9823095614839283, 0.9790506626627897, 0.9795413886462214, 0.6150983459887418, 0.5640108269027803, 0.6244951432421865, 0.6200267030611315, 0.6119185791232105, 0.5969960056467587, 0.6185226102900205, 0.628923972494331, 0.5949339759948769, 0.7736840356835168, 0.8046487424038944, 0.8013336804898411, 0.7933406383001566, 0.2609792155194338, 0.7613405818748401, 0.752482495741054, 0.8071122782778353, 0.7814998894663063, 0.5535532934233942, 0.1249929576570672, 0.48532480991894444, 0.3911384587307051, 0.3762792506817956, 0.1234822546160278, 0.4215854205785353, 0.5406292687387089, 0.4859706009434315, 0.123855055362601, 0.5143795616659781, 0.6237899346108242, 0.5185170478308194, 0.5752111884529714, 0.566800902011283, 0.4972075508505991, 0.4677454108165018, 0.5195901436728843, 0.1633924876113091, 0.5520351202485271, 0.49944070284297637, 0.4788820797054245, 0.28498921698036017, 0.22969785541125298, 0.16671335625782635, 0.5701972939703067, 0.45482112697308064, 0.6129089428234611, 0.5907074902564944, 0.6073925560819393, 0.6409840927704913, 0.5507468518094081, 0.5515036160881457, 0.5738718840343257, 0.6134334186133665, 0.48497291684096033, 0.06124641794126107, 0.16720493553082083, 0.10664120415307876, 0.3609224600080322, 0.3500717402695108, 0.3374551425988106, 0.15795686538134923, 0.312489430229574, 0.27776098960287465, 0.48682412743852366, 0.39643427067218806, 0.40635826776662887, 0.3309448225366828, 0.432681611970551, 0.4275533769512815, 0.4194937787969636, 0.40573408098205943, 0.384182725699451, 0.7127015145255844, 0.6942192942167968, 0.6823039128582049, 0.7255047010191809, 0.7209093524394025, 0.7416583847973427, 0.6573925306454509, 0.729329908825407, 0.7272781835635522, 0.10983758034885216, 0.0815814639913347, 0.14760364609163557, 0.09949933544094858, 0.12520233526896096, 0.10382086923047829, 0.11949443539224636, 0.13550067992282433, 0.14551652419676597, 0.2104166356200391, 0.24761253808470196, 0.16736004209546773, 0.21069957148426566, 0.3178747451948474, 0.20405493302824973, 0.2016023287136537, 0.1569435079983752, 0.32233515098417287, 0.4668648776898553, 0.42923520535418547, 0.49466073637936636, 0.5330050602939242, 0.48410328718593076, 0.5084100137276557, 0.5073371715241586, 0.5173061281215685, 0.4780557830217459, 0.3169162837845394, 0.3468065173831366, 0.29849109561110176, 0.20372234445480686, 0.3129465001155106, 0.418253610420402, 0.34608326596776173, 0.35200057405278784, 0.22062289763841458, 0.21610700492297152, 0.20980598541198692, 0.19895890469831579, 0.20282820136653212, 0.21265301681019122, 0.19955491410658677, 0.2485951948230275, 0.219186851133931, 0.21177511905542656, 0.21417891275971446, 0.2290515321020663, 0.19951361848862204, 0.2192480859003212, 0.20325848224644782, 0.1985522526013549, 0.19134310349214134, 0.19128419477329295, 0.20835075318747232, 0.2011130207583356, 0.18136518698602955, 0.15480346923505584, 0.8568033281825458, 0.1659355150040135, 0.8099436876802873, 0.15918779105992675, 0.1384718004653287, 0.8377792932980035, 0.7976384823121043, 0.7490010600090697, 0.3283129367391415, 0.20777238880548665, 0.7952854859082754, 0.6776086942188557, 0.802925508818296, 0.20273872256748282, 0.7480380828768712, 0.1979086250905704, 0.21813056777725037, 0.20362282800165876, 0.17768017110198275, 0.19108221134425207, 0.2050148328403255, 0.20468033155912202, 0.1988493882729343, 0.21505535447641733, 0.08928553143436235, 0.09693808402808768, 0.08848415275924182, 0.08921400340364438, 0.09332038547768096, 0.10457266009268973, 0.09776342520115244, 0.09885487006882432, 0.07588945782540701]}, "mutation_prompt": null}
{"id": "22032cb9-248e-47b4-b2da-c49052ec3b40", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6  # Slight adjustment for better balance\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.8)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Enhanced Self-Adaptive Mechanics and Robust Local Search.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7870987350386937, 0.772518642027322, 0.787728678541876, 0.8010768155416359, 0.7858126277044558, 0.7981966111874281, 0.7662631058241139, 0.8087458627542605, 0.7690837498367729, 0.5896795087852476, 0.5735828463662223, 0.5565392737708605, 0.5894808973567274, 0.6017160046820762, 0.5639929848560422, 0.6312073057755399, 0.5848169343420315, 0.5868629083356047, 0.12061128999816606, 0.5494421317282103, 0.14190306480767445, 0.15382114983953887, 0.12259768362876533, 0.13144750102407776, 0.12365857783104839, 0.13151555098113643, 0.15351739436204825, 0.10301885915320586, 0.11447178468660424, 0.10561358261394438, 0.12129722162780476, 0.11000471569198766, 0.13611168566855814, 0.10043188316143792, 0.090043166015214, 0.12918190052949596, 0.9732621583689356, 0.9815608289967621, 0.9818510617897828, 0.9785027520351097, 0.9792564143828625, 0.9822065439283073, 0.9823095614839283, 0.9790506626627897, 0.9795413886462214, 0.6150983459887418, 0.5640108269027803, 0.6244951432421865, 0.6200267030611315, 0.6119185791232105, 0.5969960056467587, 0.6185226102900205, 0.628923972494331, 0.5949339759948769, 0.7736840356835168, 0.8046487424038944, 0.8013336804898411, 0.7933406383001566, 0.2609792155194338, 0.7613405818748401, 0.752482495741054, 0.8071122782778353, 0.7814998894663063, 0.5535532934233942, 0.1249929576570672, 0.48532480991894444, 0.3911384587307051, 0.3762792506817956, 0.1234822546160278, 0.4215854205785353, 0.5406292687387089, 0.4859706009434315, 0.123855055362601, 0.5143795616659781, 0.6237899346108242, 0.5185170478308194, 0.5752111884529714, 0.566800902011283, 0.4972075508505991, 0.4677454108165018, 0.5195901436728843, 0.1633924876113091, 0.5520351202485271, 0.49944070284297637, 0.4788820797054245, 0.28498921698036017, 0.22969785541125298, 0.16671335625782635, 0.5701972939703067, 0.45482112697308064, 0.6129089428234611, 0.5907074902564944, 0.6073925560819393, 0.6409840927704913, 0.5507468518094081, 0.5515036160881457, 0.5738718840343257, 0.6134334186133665, 0.48497291684096033, 0.06124641794126107, 0.16720493553082083, 0.10664120415307876, 0.3609224600080322, 0.3500717402695108, 0.3374551425988106, 0.15795686538134923, 0.312489430229574, 0.27776098960287465, 0.48682412743852366, 0.39643427067218806, 0.40635826776662887, 0.3309448225366828, 0.432681611970551, 0.4275533769512815, 0.4194937787969636, 0.40573408098205943, 0.384182725699451, 0.7127015145255844, 0.6942192942167968, 0.6823039128582049, 0.7255047010191809, 0.7209093524394025, 0.7416583847973427, 0.6573925306454509, 0.729329908825407, 0.7272781835635522, 0.10983758034885216, 0.0815814639913347, 0.14760364609163557, 0.09949933544094858, 0.12520233526896096, 0.10382086923047829, 0.11949443539224636, 0.13550067992282433, 0.14551652419676597, 0.2104166356200391, 0.24761253808470196, 0.16736004209546773, 0.21069957148426566, 0.3178747451948474, 0.20405493302824973, 0.2016023287136537, 0.1569435079983752, 0.32233515098417287, 0.4668648776898553, 0.42923520535418547, 0.49466073637936636, 0.5330050602939242, 0.48410328718593076, 0.5084100137276557, 0.5073371715241586, 0.5173061281215685, 0.4780557830217459, 0.3169162837845394, 0.3468065173831366, 0.29849109561110176, 0.20372234445480686, 0.3129465001155106, 0.418253610420402, 0.34608326596776173, 0.35200057405278784, 0.22062289763841458, 0.21610700492297152, 0.20980598541198692, 0.19895890469831579, 0.20282820136653212, 0.21265301681019122, 0.19955491410658677, 0.2485951948230275, 0.219186851133931, 0.21177511905542656, 0.21417891275971446, 0.2290515321020663, 0.19951361848862204, 0.2192480859003212, 0.20325848224644782, 0.1985522526013549, 0.19134310349214134, 0.19128419477329295, 0.20835075318747232, 0.2011130207583356, 0.18136518698602955, 0.15480346923505584, 0.8568033281825458, 0.1659355150040135, 0.8099436876802873, 0.15918779105992675, 0.1384718004653287, 0.8377792932980035, 0.7976384823121043, 0.7490010600090697, 0.3283129367391415, 0.20777238880548665, 0.7952854859082754, 0.6776086942188557, 0.802925508818296, 0.20273872256748282, 0.7480380828768712, 0.1979086250905704, 0.21813056777725037, 0.20362282800165876, 0.17768017110198275, 0.19108221134425207, 0.2050148328403255, 0.20468033155912202, 0.1988493882729343, 0.21505535447641733, 0.08928553143436235, 0.09693808402808768, 0.08848415275924182, 0.08921400340364438, 0.09332038547768096, 0.10457266009268973, 0.09776342520115244, 0.09885487006882432, 0.07588945782540701]}, "mutation_prompt": null}
{"id": "a946c470-20ec-4953-846a-1af098017618", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredOpt:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.85\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n        \n        # Nonlinear inertia with quantum-inspired decay\n        self.inertia = max(0.2, 0.9 - 0.7 * np.exp(-3 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = 0.5 + 0.3 * (self.evaluations/self.budget)  # Dynamic scaling factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n\n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 + 0.1 * np.random.uniform()  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveQuantumInspiredOpt", "description": "Adaptive Quantum-Inspired Particle Optimization with Dynamic Mutation and Crossover Strategies.", "configspace": "", "generation": 61, "fitness": 0.33939039708106583, "feedback": "The algorithm AdaptiveQuantumInspiredOpt got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7979788948213784, 0.7323514611781912, 0.7354632222111568, 0.7786807964964328, 0.7813511149477443, 0.7904865667837977, 0.7808269306246436, 0.7207649889936658, 0.7560667039859291, 0.40387559748335367, 0.38956389238810285, 0.3860138089119408, 0.30836426378998893, 0.30695869726112146, 0.2985377771059652, 0.3492756981768804, 0.3234035863042276, 0.3689606682903126, 0.12794722040872986, 0.09378153944101708, 0.13386214230159055, 0.12557999896079164, 0.13418305207778192, 0.121092562578618, 0.12299328502547235, 0.11786952657460992, 0.11532189545730631, 0.14111328194113681, 0.10189759023004241, 0.11850331702818873, 0.13768776919796855, 0.1276370597463088, 0.1360826792825246, 0.09209490641159646, 0.13786128431179911, 0.1123118060078776, 0.9731289914001887, 0.9804347379962945, 0.9816750670903869, 0.9596483440258197, 0.971619011121038, 0.9716666924328576, 0.9703933852861609, 0.9638852620220203, 0.9640558015336814, 0.42163796469112247, 0.32619090845089793, 0.4276130530996517, 0.4251730536815618, 0.374251784223536, 0.43474654378328703, 0.3926958864806738, 0.40005441292356314, 0.3657288959198369, 0.8444858556656596, 0.8514644348606752, 0.22538686787027562, 0.19014021848320117, 0.8183993666963127, 0.20507847272290847, 0.8156614146248198, 0.852144309919652, 0.7646643047224035, 0.1332779395198953, 0.38713483382650804, 0.19823080504012636, 0.3911202005789117, 0.13219034597218038, 0.5041149076307614, 0.46753163326819813, 0.3071931061134977, 0.3194336236466192, 0.32421655735615484, 0.509049098020554, 0.13327808171579691, 0.31097790257147084, 0.2767230607601896, 0.1307429324948698, 0.32277583883965566, 0.2573474281340068, 0.12871598258214867, 0.148642099100457, 0.14196433678603992, 0.16720171288034258, 0.27185199979271224, 0.14665860805718334, 0.11443752310030264, 0.31306021789549654, 0.1813891247618431, 0.21771704739436615, 0.40964628209448206, 0.32537088998447194, 0.37087699690631004, 0.34862272461691424, 0.3379167309564859, 0.18825179527745772, 0.3894547083420583, 0.3505932256415454, 0.3438220411317239, 0.06627773503738221, 0.03401654793992259, 0.09858531501602774, 0.12984216683702032, 0.13129449249831593, 0.06985370562180138, 0.105795711305541, 0.18708814532087825, 0.1079826865836796, 0.22696388964844716, 0.22413398657853434, 0.29506620826463115, 0.25854447851220985, 0.2157844609633286, 0.30256424555753925, 0.27489979233415585, 0.26057993887242503, 0.24389301275178277, 0.6248404176103832, 0.6307639721311031, 0.5672247622274795, 0.6361031625810804, 0.6330503336648772, 0.6429199232466223, 0.6482359885528917, 0.5581841569419862, 0.6403967766360859, 0.10394616966431425, 0.08787623200347827, 0.3647738328090916, 0.10593356930631836, 0.09490816202289132, 0.14217305495621801, 0.14354863417127273, 0.12507976550995503, 0.10772940886422022, 0.46803519661596926, 0.2558241253272405, 0.45031045101253975, 0.2976373614500478, 0.2675375268796335, 0.5115051571368503, 0.35601115185796994, 0.25770462342923395, 0.5871297156054447, 0.39786406582197664, 0.35760855864192154, 0.40360826384748516, 0.24762311664819314, 0.374280677540496, 0.4258739512102865, 0.4142155688067435, 0.40067439255046533, 0.3522964087112379, 0.2593373545559461, 0.24175548351870324, 0.24749233196940645, 0.24255598761201635, 0.3317715113544688, 0.2923987730163339, 0.3188306178026753, 0.37736650068525535, 0.24345607526214208, 0.19848196682661146, 0.20375476271859494, 0.21230391748857858, 0.2118232674515964, 0.21233096281917452, 0.21948400700679305, 0.19541976918800397, 0.22113694268208584, 0.21307793148079535, 0.2212018425263338, 0.23967865306092762, 0.2342181773458748, 0.18906158619812707, 0.24449989800072314, 0.182092346815672, 0.18965363812156755, 0.2201636669940078, 0.20158145209414924, 0.17540505975480047, 0.8936159457182734, 0.15501102529876976, 0.915397469200582, 0.12309304068104066, 0.895246710519931, 0.12266773000231701, 0.16344764742966655, 0.9143999406206381, 0.1123481129992191, 0.2096089033367795, 0.8380152103975933, 0.21022948381730466, 0.20885027569440773, 0.16597365781106965, 0.8825893949631872, 0.15470153839843692, 0.1669917843990557, 0.19324821244303925, 0.19018441729437563, 0.19784308562612918, 0.18352653789352424, 0.1909237059291169, 0.19045654833409453, 0.19952027123673333, 0.20368611271055104, 0.20517783955146363, 0.08017317762114873, 0.13430287358228665, 0.09823330144149023, 0.10764487856099825, 0.08816393186556137, 0.09076877625450375, 0.09336012505627245, 0.09398969818973124, 0.09770179338352769]}, "mutation_prompt": null}
{"id": "756df841-9972-4df0-8783-1768893e4a2b", "solution": "import numpy as np\n\nclass HybridPSO_AdaptiveMC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 2.0  # Tweaked social component to enhance exploration-exploitation balance\n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.2, self.inertia * np.exp(-self.evaluations/(2*self.budget)))  # Adjusted decay for finer control\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted to diversify mutation impact\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.2 else 0.5  # Altered crossover probability for adaptability\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridPSO_AdaptiveMC", "description": "Hybrid Particle Swarm Optimization with Adaptive Mutation and Crossover.", "configspace": "", "generation": 62, "fitness": 0.3536999810988541, "feedback": "The algorithm HybridPSO_AdaptiveMC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7773787781386083, 0.7534128792617312, 0.7575064436646266, 0.7797719982446409, 0.7560867586190603, 0.7742020713168585, 0.7486288242017114, 0.7479768621129275, 0.7657738389476628, 0.5649283696434617, 0.5667819746018576, 0.551724427098572, 0.5784935694807538, 0.6046069010419389, 0.5909372989896801, 0.5710868866382117, 0.5613271781494558, 0.5485789113577271, 0.1276449471956137, 0.15006851127570786, 0.1502482955614277, 0.13873655965331222, 0.11070434634108661, 0.10130074815811785, 0.1456582834946254, 0.13669361190536689, 0.13087299407438513, 0.10077304806628107, 0.10329295652983728, 0.1176861763635032, 0.11177297756752591, 0.12045804011188144, 0.09374188266408923, 0.09349533684066069, 0.12507100349063915, 0.14006232141262176, 0.9639079486973623, 0.9809131743290589, 0.9794757423336118, 0.9751846900028271, 0.9813752435054744, 0.9896492130450529, 0.9883671285385601, 0.9731241621780629, 0.9774668638985904, 0.5577929943199061, 0.5550913673852862, 0.056694673588623345, 0.5490399037933615, 0.5487591200336381, 0.503618012720849, 0.570985786254521, 0.36718982770736297, 0.6149460238914122, 0.752472238314283, 0.6837839334772964, 0.7475945005491615, 0.20385961340066017, 0.25165305075218314, 0.3328542575072889, 0.7535323133242605, 0.7770248378176741, 0.7453362836253289, 0.4388989721344755, 0.11684325096772374, 0.11370756300534612, 0.11856626127969916, 0.39379187319525966, 0.10542713200199194, 0.48862889644004515, 0.41983467222575543, 0.4952371034849826, 0.48154318229724, 0.43797757144615257, 0.35384387705303666, 0.4820236500244741, 0.4424287730076727, 0.34079852649544706, 0.4721556891946995, 0.4506065394638441, 0.41474597876444586, 0.05855764985087386, 0.19742635813055476, 0.10520752826276802, 0.03718095400554122, 0.0005387469620189433, 0.014840652567612578, 0.11731217629346069, 0.07495265208020441, 0.12502171104191917, 0.4810898423970068, 0.2300356316944978, 0.5632989864740972, 0.2933973482443456, 0.5708728503235262, 0.4158148331762712, 0.48540988948795727, 0.45931220872300915, 0.5671868846944336, 0.049247815547182494, 0.04731130689727869, 0.027480227472709284, 0.1356304198425511, 0.07744574882568755, 9.999999999998899e-05, 0.31355657946240734, 0.07595743135986999, 0.07362137157925097, 0.2666259115020251, 0.2669673074646971, 0.18695425057923876, 0.32705893321811175, 0.3218177943820668, 0.3250996463799263, 0.2466754559405383, 0.05027191415323573, 0.07135797354485329, 0.581170030834796, 0.6330923861439683, 0.6141387653627229, 0.6042291432283224, 0.7153648857239944, 0.6460045607693435, 0.6149382251327402, 0.606749937651732, 0.5978835459950526, 0.10984269116093803, 0.1279669877569557, 0.09597773507549467, 0.11785171629023572, 0.1145174300213101, 0.11672861435207127, 0.13839720444125592, 0.08910433595738487, 0.11017313533496986, 0.2856298690036315, 0.3308454404780804, 0.21189605794295552, 0.181389295841492, 0.1981057907793684, 0.2339478767537897, 0.5845520624426183, 0.19710856120149534, 0.27740856946051495, 0.4095054527602311, 0.32233767055145646, 0.2819121281858573, 0.3585419070540906, 0.37856134512481265, 0.3627642768219683, 0.4626385838242548, 0.3295622276294937, 0.513203151176582, 0.24101828618179078, 0.2885451986990002, 0.25095524015544357, 0.2764315860380985, 0.20384734500626933, 0.30538621567337243, 0.25482431142226125, 0.29130309658374476, 0.2522808955326211, 0.18601060989309637, 0.2281900691667561, 0.22590720377569684, 0.2367044050193562, 0.20081865866448056, 0.23318270992152412, 0.19310338493453882, 0.21450132640472153, 0.21752518041210755, 0.2060742024908111, 0.6301212226853504, 0.2066302542019568, 0.18566443869939653, 0.19698169986873448, 0.17312280475099628, 0.22942853986817968, 0.17731715732674946, 0.1825113286880028, 0.1744355543902424, 0.8013325575545034, 0.1538601220553113, 0.836048623564706, 0.16456846579381312, 0.7854200055919558, 0.15656339494126226, 0.16369493007158142, 0.8077817643207212, 0.7336449176489258, 0.19785035509511484, 0.7591870528570126, 0.7743726508282821, 0.6850784021625923, 0.1250315919084498, 0.2103340980467211, 0.2789878848123106, 0.19607416445686499, 0.2001442894188895, 0.18794643156656443, 0.1860646544202017, 0.1855832768675134, 0.19359694402512273, 0.2088605957599753, 0.19483154863821528, 0.18080403435281744, 0.202067552448582, 0.10376885125405155, 0.08584277821596586, 0.07930623237852119, 0.08960348509424043, 0.0818045768640604, 0.08677729661935774, 0.09253698497068386, 0.08827561985681132, 0.09780983591761416]}, "mutation_prompt": null}
{"id": "e719696a-4f45-44e4-8bcb-118793ef7e51", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_AMD_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for enhanced convergence\n        social = 1.9\n\n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified inertia decay pattern for adaptive behavior\n        self.inertia = max(0.2, self.inertia * np.exp(-0.5 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted mutation factor for diversity\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.1 else 0.7  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with adjusted dynamics\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined strategy\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_AMD_RLS", "description": "Stochastic Dual-Strategy Optimization with Adaptive Memory-Based Dynamics and Robust Local Search.", "configspace": "", "generation": 63, "fitness": 0.3811903320583524, "feedback": "The algorithm StochasticDualStrategyOpt_AMD_RLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7603540007344892, 0.7520819057885192, 0.7611983124046583, 0.7798033068057357, 0.775884092052211, 0.7699470581100987, 0.7625964968366213, 0.7514047419808767, 0.7562650351262549, 0.5352733354948894, 0.6119709115909662, 0.6035153935357304, 0.587612064572762, 0.58245620634231, 0.5225190710202662, 0.512184519062717, 0.567912027862626, 0.5892630620296759, 0.3473347406813848, 0.13719469229849057, 0.16377925998851484, 0.1664282435099964, 0.11495440310537275, 0.12782215163065835, 0.14082173197464964, 0.13702937536915638, 0.12561034715216013, 0.10137054780997135, 0.11322418582189042, 0.13580110928204414, 0.10087710297768593, 0.10051549533572812, 0.12447515998786352, 0.13689237363587958, 0.14024300700123182, 0.1051050938568453, 0.9611352052336873, 0.9875126547564671, 0.978831238201311, 0.9872507075803949, 0.9809248295703585, 0.9718270704916045, 0.9820159844540084, 0.9807571291097209, 0.9802034864237424, 0.5936338784408454, 0.05829293987808737, 0.5198814428126384, 0.604935066351675, 0.5678475025628623, 0.609013844705892, 0.6068006384097744, 0.0782604246929055, 0.6097246584476397, 0.7689803146847041, 0.7699586424178021, 0.7685869761337063, 0.7549710884859366, 0.2503866071770432, 0.7586292159140067, 0.769159835732075, 0.751204112364221, 0.7463688312635777, 0.4012995093857725, 0.5599492599287437, 0.5030573192780947, 0.49119748063517943, 0.1174758233060047, 0.6044754624359798, 0.4104871300431663, 0.44641374110904686, 0.49540897503584236, 0.3492412392502311, 0.11896398258175245, 0.5224732037480175, 0.44745786906727847, 0.40757024143677745, 0.3823753406002163, 0.4981177299020081, 0.11852742038253528, 0.4147754246701285, 0.459248545567696, 0.4381662865576196, 0.2319271328522997, 0.33293994539192273, 0.46693749556664055, 0.01743577272083474, 0.06528893354518173, 0.5164327963760844, 0.3190426360295813, 0.45301634945685865, 0.49143710812293184, 0.2368307413756382, 0.4726528663665185, 0.5606286666427924, 0.42869431199137376, 0.5682424049781023, 0.5740468720111003, 0.5037082028692222, 0.029291954712730384, 0.15673527239314666, 0.039288206530467495, 0.06548442119946851, 0.06439696838929754, 0.12774184109756204, 0.19257381923518946, 0.1287805435374999, 0.13439244634508285, 0.30207352564158785, 0.43515455693774396, 0.3335101926079057, 0.2924156272380186, 0.30892297658843326, 0.3646436080996346, 0.1858024448179445, 0.3509119057942015, 0.2658117839263102, 0.6592312827182469, 0.6908626877164601, 0.7082489929340132, 0.6995195691057776, 0.5966488998151576, 0.575281416838199, 0.6220414398728031, 0.6601405937620293, 0.6995323381932312, 0.10566920701975124, 0.12183223591978809, 0.08606078133821482, 0.11522994780048579, 0.12646090019105827, 0.10595798285076163, 0.14133837933942273, 0.14526701528271224, 0.12870632938072812, 0.16618558539273054, 0.534905197764284, 0.18991154724345571, 0.19042863716723746, 0.19042808134443412, 0.19161964634321615, 0.27554680971117895, 0.2356608827447767, 0.19001929046240995, 0.33963473498454855, 0.4574193850882422, 0.30026510608216783, 0.54605069505232, 0.4972753454296137, 0.411421330449252, 0.4598130725404769, 0.33756398772403984, 0.1889100130210476, 0.3128438338891446, 0.3380916776798275, 0.2587536796177853, 0.2704963451206419, 0.3000394263828662, 0.23781359839523308, 0.28118660970467324, 0.49558488508639265, 0.25014034197485, 0.21881725369882665, 0.23768351740583238, 0.21141201714072444, 0.2103162387419023, 0.20604409713318272, 0.23453078639249847, 0.2325746935618651, 0.23207203754340144, 0.22174666105740148, 0.2301808624360654, 0.21234514017436756, 0.2293119864333807, 0.21375713537922314, 0.18417489719609026, 0.19558275573576045, 0.1985098447270659, 0.21759335919236877, 0.188473169086398, 0.8099739293775148, 0.768943763928748, 0.1817922355315703, 0.8529359031871021, 0.16623916428414265, 0.1904566659381739, 0.8063722688694527, 0.18346398916941964, 0.8106037463428326, 0.7678311912779378, 0.20139876538927937, 0.1619149537703377, 0.7776218130000381, 0.199197880283715, 0.16256303541163597, 0.2083771422393388, 0.8033693861413396, 0.1838794371479867, 0.18296236556871925, 0.19310618818116687, 0.20118390109300066, 0.203211862745884, 0.20926571183931897, 0.22325267650239689, 0.20897339475204135, 0.2023164476715439, 0.21008026564127358, 0.09127153364777874, 0.08218061937660004, 0.09060666433931297, 0.10448796371141289, 0.08897065687165084, 0.09424118164328266, 0.10544831709267832, 0.10142409159803534, 0.09333520614638513]}, "mutation_prompt": null}
{"id": "557662bd-8934-4d14-89b8-91ea49e2b408", "solution": "import numpy as np\n\nclass AdaptiveDualStrategyOpt_DIS_MUT:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slight adjustment for improved balance\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adaptively adjusted nonlinear inertia decay for dynamic behavior\n        self.inertia = max(0.2, self.inertia * np.exp(-0.005 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.3 else 0.65  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveDualStrategyOpt_DIS_MUT", "description": "Adaptive Dual-Strategy Optimization with Dynamic Inertia and Strategic Mutation-Crossover Phases.", "configspace": "", "generation": 64, "fitness": 0.1940843157351552, "feedback": "The algorithm AdaptiveDualStrategyOpt_DIS_MUT got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.356017058306236, 0.37814306911606443, 0.3446428358170436, 0.3735787240060191, 0.4322204589595211, 0.38226866048140484, 0.37701976525311853, 0.4008288649758017, 0.36176369136367126, 0.0964081020139882, 0.10705730822006954, 0.10514355541254194, 0.05801875453640026, 0.09807437311453504, 0.09981340018017726, 0.09730368794080801, 0.09693504357662353, 0.09418914936997369, 0.0801132461053714, 0.08593102256605323, 0.07145622507924398, 0.08133703813456161, 0.08014444837889423, 0.09118403244464934, 0.09196981675408733, 0.07707432442454776, 0.0799331385578278, 0.06168940436445114, 0.07850804326366412, 0.06261114685112901, 0.07078620608281383, 0.07512719130364909, 0.0694881954069495, 0.07939996805797489, 0.06939002190494503, 0.07587880491713317, 0.9641106031430255, 0.9808428182343248, 0.9804983444652801, 0.979364421553614, 0.9815559230747225, 0.9823313781917992, 0.9885289713397714, 0.9792200849045883, 0.9770424491703802, 0.1934162281805728, 0.05771324236398945, 0.056637551844754275, 0.15874613684779337, 0.16797370691744495, 0.17012143408303781, 0.20362177620077648, 0.17544108383532908, 0.08245809115014202, 0.22598403370716802, 0.2957406551601929, 0.28432791326302154, 0.2541632128904818, 0.18176373162928827, 0.23430411547180963, 0.2776633050140497, 0.33353385032682537, 0.2590293627661071, 0.11153911527373073, 0.09502548005042666, 0.0906814287854526, 0.11136825256575522, 0.1221323954588428, 0.10165915440017903, 0.12471644812023297, 0.1163684742102572, 0.10387255697918751, 0.11274686551720792, 0.11571659783923338, 0.11082351248940958, 0.1174380391964045, 0.09242823702189795, 0.08383853953880338, 0.10819772276786155, 0.11166074290242722, 0.0850280492259321, 0.04828322871404711, 0.02080804818863602, 0.03544132401462752, 0.02156009251951596, 0.02685892900053366, 0.025091236676711426, 0.026531682145597424, 0.014177588003390862, 0.03221214390507321, 0.12894033590309006, 0.13103694114988684, 0.16496847890455046, 0.08833682959816236, 0.1252470492318526, 0.10770690571315122, 0.14038747411513575, 0.1362404274715876, 0.16132609198869718, 0.0022312291712341947, 0.00020325684033883906, 0.00699797122501622, 9.999999999998899e-05, 9.999999999998899e-05, 0.012340903336770181, 9.999999999998899e-05, 0.018282262690142992, 9.999999999998899e-05, 0.08279970320668195, 0.0639674382802119, 0.07573425248522003, 0.07962716823947324, 0.07482769928859978, 0.07594279770962675, 0.07540741882877577, 0.09430990957193719, 0.05583286271796728, 0.3407526169300883, 0.34456138237207234, 0.3250808085678215, 0.3539289210860438, 0.3333233545043991, 0.3687027889977662, 0.32681523680749525, 0.3540838073827889, 0.3101555414814582, 0.09307879994190627, 0.07507457568147546, 0.09468360763030359, 0.07814129199361541, 0.08336203887331162, 0.08197525050267673, 0.08132968657533635, 0.10625050275096559, 0.08296779872716253, 0.14107120276619622, 0.14475840033387044, 0.174427523360982, 0.14549784563939616, 0.14782221823191632, 0.17985939902153114, 0.18218667555532853, 0.15336200677942047, 0.157798773992198, 0.24752027196853865, 0.2183543220874551, 0.23899371433876426, 0.21570033743023986, 0.23700879143147424, 0.2272024483863806, 0.24718696950435204, 0.26410072593027567, 0.25332857158175104, 0.19593066657574099, 0.18576485957224553, 0.18199603545757548, 0.18221060967707348, 0.1678652412351923, 0.19768416359524832, 0.20459376360444526, 0.19312628247860697, 0.19249333580312045, 0.1771569158667029, 0.20127716274205554, 0.19704409634168374, 0.19493563390968427, 0.16343434713751015, 0.1912220650724682, 0.19132127615804773, 0.1813506194851071, 0.21115055909514846, 0.17018785785464785, 0.17916525472689993, 0.18537921906881627, 0.16692000662283313, 0.16597469305636792, 0.16805740033357996, 0.1687889306859035, 0.17480341901781282, 0.17763253874335627, 0.49325614295384823, 0.18797110357194435, 0.15361562188614442, 0.5111965002758136, 0.16622601955395255, 0.1911937919557044, 0.4052046049563398, 0.15174136819395245, 0.39662828901941716, 0.36373695702791153, 0.26010838656141577, 0.23660668082830016, 0.1980289237975542, 0.19121069013645653, 0.32868354666167254, 0.2582687321325772, 0.430533511828459, 0.1466981845077875, 0.18279732756061295, 0.20609229824256914, 0.19979491165129404, 0.18713908073976748, 0.18736336703222378, 0.19205415677439042, 0.1838364271375288, 0.17825140528913452, 0.1923618033932536, 0.06367247100802631, 0.06215450236106679, 0.06877535329433526, 0.06699111598379692, 0.07481556718091364, 0.06697896794599889, 0.06816824342311978, 0.0732813706244102, 0.08197511408547542]}, "mutation_prompt": null}
{"id": "3879b7a6-9fe9-44ea-a6b3-6c9391bd868d", "solution": "import numpy as np\n\nclass HybridDualAdaptiveOpt_DI_AM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Balance change for improved coordination\n        social = 2.0  # Increased social component for exploration\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Dynamic inertia adjustment for enhanced convergence\n        self.inertia = max(0.4, self.inertia * np.exp(-0.5 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.95 if np.random.rand() > 0.3 else 0.65  # Dynamic crossover rate adjustment\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with improved coordination\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with adaptive parameters\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridDualAdaptiveOpt_DI_AM", "description": "Hybridized Dual Adaptive Strategy Optimization with Dynamic Inertia and Adaptive Mutation.", "configspace": "", "generation": 65, "fitness": 0.3861496106332322, "feedback": "The algorithm HybridDualAdaptiveOpt_DI_AM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.24.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7228934398016699, 0.6999363659394136, 0.7091749704206906, 0.7328479694898864, 0.7384574640197072, 0.7281398144019957, 0.7297405618814161, 0.7202605942804812, 0.6941316282338248, 0.5055108724687264, 0.4311133617986157, 0.47671025594486294, 0.4583431856096687, 0.4749253522704887, 0.4177694392504704, 0.48932392930895385, 0.4360101248407273, 0.47674120187627345, 0.1544420566545468, 0.13257864928284468, 0.12297143308189118, 0.12105638967973442, 0.12214079192807403, 0.10465849645947911, 0.12004920186191737, 0.10577377153538636, 0.10695922978931527, 0.09891363277097931, 0.11472025552056164, 0.11562267668779824, 0.10339682945157491, 0.09994132895475083, 0.13463415157850123, 0.12943199641421665, 0.09214874097917669, 0.12388573288736482, 0.9725323982392637, 0.9875449101220815, 0.9761576565478713, 0.9818081158309331, 0.9805690756182153, 0.9896038020852806, 0.9877060916832561, 0.9705454697839355, 0.9812334903185216, 0.5011246413410322, 0.05579464194212724, 0.45657227170837467, 0.3925504431207629, 0.49837761963679184, 0.4885621882673832, 0.5071206915354805, 0.08076844830432128, 0.46324536444108766, 0.7433170693225342, 0.7524596379989847, 0.683783079853975, 0.7591619892534522, 0.7092401116078595, 0.7571905487294159, 0.7674503857053904, 0.7549811645343069, 0.7509139897533713, 0.4376184273615904, 0.29820143156762535, 0.4334529521831145, 0.3980532439701211, 0.4372511960258779, 0.24846715111514128, 0.48826376151354056, 0.3888273727097864, 0.33975133064128316, 0.5911413985892782, 0.36228697794967124, 0.5383648236489103, 0.44694165478682046, 0.11189719417907296, 0.3891587331820593, 0.43906092422394916, 0.3770310003048378, 0.4138194352136886, 0.4729157097392306, 0.3965481492675069, 0.3865603046703916, 0.40389164138224376, 0.3852169758324765, 0.4191191325732655, 0.38491903953462225, 0.3393558701084901, 0.4383852607573654, 0.5458995490458272, 0.48644454990765074, 0.4690037545714718, 0.2964916380199244, 0.4564361938391055, 0.43038179203812055, 0.5603567784766665, 0.15653943916608537, 0.5199779969907811, 0.16353213672369316, 0.2693768913041579, 0.0811762030840173, 0.1294461464636819, 0.30822078528877617, 0.2681912262097199, 0.1222379507776512, 0.15028346022828887, 0.11533878696928168, 0.315620347931475, 0.3330512441094313, 0.30770598668112104, 0.30096341438458507, 0.3644801990224148, 0.31073284889776664, 0.3526885575134451, 0.34418532047938344, 0.31461120072954796, 0.6440334124806577, 0.6339445238559158, 0.6346996784005887, 0.6604084965850265, 0.6406271556607668, 0.6566854625480403, 0.6266269085278979, 0.6492318216713113, 0.6408543252293281, 0.1313203782850909, 0.10623993271292342, 0.14518681774547892, 0.12703068933055106, 0.12135991785569744, 0.10827109930275602, 0.12207979360391397, 0.15963621687026663, 0.13215948246640563, 0.17019776246294227, 0.26199366957939463, 0.22597661091720678, 0.18737634366858225, 0.1636385193610138, 0.15886998118080242, 0.3588397852180185, 0.1585185368193366, 0.5901169530520114, 0.42779915302306126, 0.4087321191071599, 0.3882121523152281, 0.45894243422436853, 0.4490307258915608, 0.43427138822145084, 0.41935170370395947, 0.4262801165760527, 0.42480707717434163, 0.3280829053720131, 0.2648878184408793, 0.3350099520180442, 0.3079144691736839, 0.23581915081063032, 0.35859722215358036, 0.3540539075329041, 0.4251267598521673, 0.31001669000104626, 0.21053438540172142, 0.19298649675868562, 0.2201374972529655, 0.23097702167237777, 0.19103833493558475, 0.20734412660850765, 0.251622259015552, 0.22317996798027684, 0.21362309039834793, 0.1881322660705429, 0.17827523467708795, 0.47386815815441385, 0.19935598325004555, 0.18176031271833337, 0.5003171879230537, 0.4855285560862824, 0.20392120815037196, 0.22388043961148474, 0.7426868071337385, 0.7253195565729658, 0.15411271118306125, 0.7896651165107065, 0.16335866122124898, 0.721988743899817, 0.733486022173059, 0.18960361029961958, 0.818507036134648, 0.7136444709013523, 0.7030808620030601, 0.1135934374947215, 0.19923243288067882, 0.19952785443005028, 0.7183464641674208, 0.7615178698995506, 0.20712181310994426, 0.6876849832553822, 0.2132931882325032, 0.1903671564499747, 0.19122979270029572, 0.19311791326808458, 0.22742853589007883, 0.19874692729904486, 0.1817813596085872, 0.19881711283035197, 0.17455561758030236, 0.08337567399993273, 0.09632402948747187, 0.09732381334074813, 0.09151962311596384, 0.10067142904314785, 0.08207779610275734, 0.08335135204504118, 0.09843187731460423, 0.07853501102051197]}, "mutation_prompt": null}
{"id": "457786c8-6f84-4027-87bb-a221b80678ed", "solution": "import numpy as np\n\nclass EnhancedDualStrategyOpt_AL_REEB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.4  # Adjusted for better cognitive balance\n        social = 1.9  # Slightly increased social component\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Enhanced non-linear inertia decay for adaptable behavior\n        self.inertia = max(0.2, self.inertia * np.exp(-self.evaluations / (self.budget * 1.2)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # More adaptive mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.25 else 0.65  # Adjusted and slightly more dynamic\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedDualStrategyOpt_AL_REEB", "description": "Enhanced Dual-Strategy Optimization with Adaptive Learning and Refined Exploration-Exploitation Balance.", "configspace": "", "generation": 66, "fitness": 0.37090554713009755, "feedback": "The algorithm EnhancedDualStrategyOpt_AL_REEB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7991962559672415, 0.7804248538850034, 0.7769831794746849, 0.7975707485909663, 0.7888749762466853, 0.7849997956083504, 0.7777876924447596, 0.79682569962897, 0.799533955590719, 0.6107632973864285, 0.5943946471486904, 0.62814672243223, 0.5980450280680925, 0.6327558672414006, 0.5931946840097893, 0.6353741723704693, 0.5919598260162667, 0.6076156596754532, 0.1450317874742474, 0.13289094654783762, 0.14496973885882558, 0.1490139374991346, 0.10935850782656997, 0.1301243136164525, 0.597287183338931, 0.14214910738027287, 0.12706739087976293, 0.12893051659152532, 0.09862912512163369, 0.12515266002739123, 0.12542176216814638, 0.14348957875123447, 0.12174921590520293, 0.10358179418400837, 0.15042347285069246, 0.09745688015695797, 0.9639816050828873, 0.987510786530511, 0.9714301217614123, 0.9818980135753625, 0.9807364060007612, 0.9864797624286639, 0.9819587293275885, 0.9807159757610148, 0.981224586235755, 0.6249943458142739, 0.05706423671019545, 0.6017171036531215, 0.6080898489857649, 0.537940635031017, 0.565153838790002, 0.6325854334886467, 0.6064265291847434, 0.6169333820830023, 0.21762076284449117, 0.23306593731407543, 0.787092698479697, 0.7943512016743264, 0.8153282481611025, 0.7676792170567297, 0.7612783758558248, 0.8079345726344779, 0.8010290989371087, 0.2983546637484882, 0.5463212827660657, 0.5883473275045157, 0.12223077099548396, 0.5194574823681631, 0.39725705209199647, 0.4697803210086505, 0.40614714949311437, 0.39801724449797404, 0.36240557607253865, 0.35480903061853375, 0.12300647073646487, 0.5296676881258229, 0.41740156109839477, 0.3371802270958074, 0.46614982676129746, 0.4318249823853768, 0.5301702069866616, 0.06603263137224313, 0.1433583220701059, 0.2345725404833766, 0.10899970993314512, 0.22191941293966633, 0.10787365266476556, 0.2330847693520094, 0.2050599585922419, 0.4330560465279165, 0.6468825737358495, 0.5913337296740904, 0.5976999177979516, 0.13159121050930167, 0.27052661207840467, 0.3929513122770032, 0.5019110016739614, 0.6628239930681418, 0.6229462412790667, 0.044993250273383634, 0.11188358179339997, 0.042103636175885195, 0.06806179424627701, 0.2081634037306338, 0.06743250656890509, 0.08671435025549068, 0.09144705970435885, 0.061434919301060154, 0.21719472509161264, 0.30534468251788505, 0.2354458691526372, 0.3379466197596579, 0.25120257066052776, 0.32817794615851736, 0.23287215016681617, 0.24985314274892967, 0.43538813650914576, 0.5953946293821348, 0.6273903215442262, 0.6517578519856583, 0.6227534751729613, 0.7176111253661834, 0.7479508519819975, 0.593494848421773, 0.6083219459554847, 0.690539763282882, 0.12814056221933356, 0.08904786268579046, 0.08458906173315917, 0.1037496868325104, 0.13304448602468932, 0.13599084877268575, 0.1499502699851597, 0.08693453940252405, 0.10826649682021583, 0.14232174219907923, 0.2639672214780081, 0.3182183515917355, 0.31152869859462295, 0.19076829877313584, 0.1830338416570022, 0.19550449455005292, 0.15866308805966578, 0.19394412944419903, 0.43008757544068854, 0.5751537225997316, 0.37563477189661376, 0.42487034116290057, 0.29516905379542235, 0.3669911246306359, 0.4290075558313904, 0.4971691607389548, 0.3758626951444819, 0.23349870757737567, 0.2346512231724026, 0.29501785476883147, 0.25723208625228144, 0.22800995474456576, 0.18417113457122358, 0.253211619600496, 0.37985844489700726, 0.2260383145531384, 0.19951123872176724, 0.20327148063430345, 0.20337091731463797, 0.2188052656965126, 0.21700096329315754, 0.2225162285861666, 0.20764610993715815, 0.2283100236104657, 0.18372232252746457, 0.17681572493992703, 0.20402565899460767, 0.19838327816644796, 0.1855715667474661, 0.18547199767304245, 0.19903987137629797, 0.20123411591158502, 0.19573785940974198, 0.18799001398698956, 0.8532496902135024, 0.18420153674490625, 0.15383092923864128, 0.8357065900905454, 0.164398275086043, 0.19097075069604008, 0.16117339430203503, 0.18327996188091578, 0.8382463824950852, 0.16462573975565142, 0.16511941218754767, 0.19997720427288435, 0.20101631015824295, 0.7788455434192874, 0.16239114325246595, 0.7665581955411566, 0.7839088862422245, 0.19764503587871962, 0.2069672665674257, 0.22105087293229364, 0.21664760705627628, 0.2029442201379852, 0.1910930763906017, 0.22069573299005396, 0.18618852409780196, 0.20911871729102993, 0.21264947188027983, 0.08672902131578775, 0.08162677202677138, 0.10200919194326308, 0.1270002602083854, 0.0973252912933874, 0.09364381112464382, 0.0960020830068199, 0.09760921292842217, 0.1020043130639029]}, "mutation_prompt": null}
{"id": "6fc2428d-ca36-4091-a0f0-ff40beede745", "solution": "import numpy as np\n\nclass AdaptiveHybridOpt_ELS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.4, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveHybridOpt_ELS", "description": "Adaptive Hybrid Strategy Optimization with Enhanced Learning Mechanisms for Efficient Convergence.", "configspace": "", "generation": 67, "fitness": 0.3749580927045343, "feedback": "The algorithm AdaptiveHybridOpt_ELS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7518397941837145, 0.7136406153882566, 0.6970564951268694, 0.7713009189474584, 0.7292037191320799, 0.7572429352578305, 0.7768753756144215, 0.7463001366740176, 0.7453942872473857, 0.4615233294385719, 0.5582189150721535, 0.5245122322392387, 0.4475212326209196, 0.4792606758015884, 0.46441732171196304, 0.45192904990286364, 0.5250872941647102, 0.3955348857069849, 0.15259425029455365, 0.12030119044985788, 0.12364124746330163, 0.14241012117158847, 0.32549709365473856, 0.13925644945444238, 0.11307659474643172, 0.08127578513247513, 0.14226165187291606, 0.09684200965680034, 0.11786319280200641, 0.11177578190449422, 0.1320642227819706, 0.12851418898490974, 0.15154772118647564, 0.12811357978767446, 0.12685801590351165, 0.11927191271289339, 0.9636541412723727, 0.9717015250500822, 0.9816144389798119, 0.9565405348422178, 0.9619676238517628, 0.971956833003504, 0.9730886065154, 0.9792142642441825, 0.9728516937543477, 0.49939515501595066, 9.999999999998899e-05, 0.42381515102513423, 0.5881728782337434, 0.5364064511565403, 0.5509040631003412, 0.5622255909257838, 0.4903076496830505, 0.48141610036712135, 0.7381034362724181, 0.7318533975317927, 0.7558551899829706, 0.19490083528981528, 0.7413373840695316, 0.6801801678793387, 0.7296107235750345, 0.21874547332336547, 0.716975166278143, 0.560994860924455, 0.470065804426129, 0.11047159092027081, 0.3606120846035906, 0.4337843149385713, 0.42389941067703507, 0.4769220152756497, 0.34176637498094575, 0.5061404241916274, 0.3253779589699809, 0.3059214620972073, 0.4233400252860683, 0.4039064591479423, 0.4262763371617655, 0.5150477118066212, 0.4365088798412585, 0.45122090707353857, 0.46867514820127076, 0.21074426674245628, 0.17317571346852523, 0.2308898179721509, 0.4887434002800908, 0.2213126711450345, 0.37865772139935183, 0.2962201470906973, 0.10718402915376757, 0.4213564446674438, 0.47060103669152253, 0.4559167600949797, 0.41404732360430907, 0.42990086814735495, 0.473582530529874, 0.29222508920157875, 0.5085982693541719, 0.530257451672673, 0.46522256747401114, 0.047995639544097135, 0.15117920590408596, 0.0957142850821241, 0.09963114610252888, 0.2640044358617408, 0.1835471507420665, 0.23336361665916305, 0.10813967504268163, 0.1728635531954047, 0.3180285464132724, 0.33461356015987653, 0.32035113348482613, 0.2740947951767073, 0.3180648494365895, 0.3241601688740601, 0.2384574644198305, 0.04667269264782792, 0.07406664726770362, 0.6642201037846487, 0.6857921257104056, 0.6679998145178372, 0.6609370370176215, 0.6115162976441927, 0.6891415305860821, 0.625705902754077, 0.6852178350102849, 0.6401085701216647, 0.11624435162548874, 0.08640123564347901, 0.10804713930176146, 0.12949232126882815, 0.1409085490758225, 0.1301573717751635, 0.12447089880765527, 0.14245764896544677, 0.1353933845878913, 0.20215725395337203, 0.293509220395907, 0.23615467443481974, 0.18084491117429136, 0.1899922423849184, 0.4332548625416148, 0.18660162144779036, 0.20586577856177823, 0.19562115779269096, 0.41729683635502346, 0.296151283313109, 0.4455540879348133, 0.3895793660213045, 0.44578136828206083, 0.4533150089684099, 0.4642171294109567, 0.4641975051638413, 0.5153687625224075, 0.2595859466701649, 0.23582152001214884, 0.24102857004113987, 0.3061269277979404, 0.23750935685391228, 0.3464090188546203, 0.2621490707009625, 0.344490350519313, 0.28913751428328904, 0.2523782912209046, 0.22829262122538396, 0.21701275296734945, 0.30431144107923924, 0.20391441650026287, 0.21416482743663123, 0.2204236528339797, 0.1847113938437046, 0.22457437990501516, 0.23041206486472698, 0.18856771081077528, 0.22804088217886986, 0.3982517677516697, 0.18970626483332087, 0.21178607982976894, 0.21697346035353526, 0.20882749756867292, 0.19808674080016697, 0.8115540823574399, 0.803279915066586, 0.15379322778225146, 0.8404391428668634, 0.16731812918596656, 0.1642077111987854, 0.709006143619774, 0.19136431084040373, 0.843920374846611, 0.7628042687572285, 0.1661587708447787, 0.7522424072975481, 0.7840975391498202, 0.20109646528334169, 0.7899228350635311, 0.7758246576707934, 0.14934575445548204, 0.14727191685501717, 0.1975651115741558, 0.1828041258914428, 0.19773483956819793, 0.18589144576476024, 0.21869707908900005, 0.19344061177438, 0.22071985683866369, 0.20340150584325278, 0.2077786125961446, 0.09173376761375351, 0.10310587485499723, 0.07974915812141203, 0.10281851647138207, 0.09069781937889654, 0.07741840006690148, 0.10876170902073112, 0.08120604320966707, 0.09397103812017726]}, "mutation_prompt": null}
{"id": "149b1b62-2d40-41b5-850a-39f8d70a8b2e", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.7  # Slight adjustment for better balance\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.2, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.3 else 0.65  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE", "description": "Enhanced Hybrid Particle Swarm and Adaptive Differential Evolution with Nonlinear Inertia and Dynamic Crossover for Improved Convergence.", "configspace": "", "generation": 68, "fitness": 0.36520187124213943, "feedback": "The algorithm EnhancedHybridPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7765123478016615, 0.765976075128062, 0.7855703251687044, 0.8065352534300002, 0.7953077916894937, 0.7810064103301926, 0.7840649329462379, 0.7760780294165804, 0.7766949937472908, 0.5895643295797167, 0.6223104535991555, 0.6315136458206599, 0.6349977029190969, 0.5819389384723825, 0.6122830415135425, 0.6257410026335218, 0.5313492872602443, 0.6259038348916706, 0.1329512149729115, 0.16666946720791798, 0.16195075385020952, 0.12969666960753745, 0.1599386721538344, 0.15474082935196565, 0.1348201806611531, 0.14021586394911079, 0.1617199518473984, 0.1192178271712595, 0.11097174842433055, 0.11973065818656392, 0.11573252400325851, 0.10613013126551873, 0.1302859922101548, 0.11513933478645377, 0.11559065175760408, 0.13722621531231993, 0.9682957806135855, 0.9809062655314749, 0.9805023421849564, 0.9749010544778922, 0.9815818950082509, 0.9875612556648243, 0.9823970871048253, 0.9792682264951279, 0.9812275838423743, 0.6038413050908054, 0.05557077760528939, 0.5409096367719107, 0.5998474115144863, 0.6365235283720403, 0.56499200978154, 0.5777682401748173, 0.5300255912262073, 0.5416471195661818, 0.20518099156369973, 0.7448903301777675, 0.7636962437264634, 0.33876927427585035, 0.7207465865196117, 0.25100618848565714, 0.7604278384725198, 0.7951166299947117, 0.7299183786084119, 0.44894602631083536, 0.38900069136519355, 0.488703855843861, 0.12553399222765838, 0.5370962237275974, 0.12118233991416161, 0.31406258260116926, 0.4610810751602952, 0.11853446228793507, 0.3636987764552735, 0.4196108087250374, 0.1180569552633266, 0.5159346611195211, 0.32841254910202256, 0.12168465832616915, 0.12670690869418444, 0.27544238832323464, 0.11889119752492794, 0.061425901761048785, 0.16101560427686, 0.1330853814663815, 0.04130911775390922, 0.03583196771176278, 0.019747018246319747, 0.1778237621138603, 0.05973042833747244, 0.20302491473636242, 0.3724109120203474, 0.49049481755836444, 0.3735018585666394, 0.5125521756699782, 0.5037979060562281, 0.13411654728215272, 0.2251782197688471, 0.5194191911390775, 0.06012840885191795, 0.08476630401997587, 0.215023879060937, 0.07548045559581773, 0.06534562422297296, 0.29679210054953364, 0.09099855399720413, 0.15684972633223893, 0.0660570218546791, 0.0665975029738729, 0.3107105733524763, 0.1949712037357565, 0.24502000691086945, 0.2073954545599258, 0.18817064619504675, 0.4295857806691057, 0.22092412103602066, 0.22391886060962396, 0.07486013685082782, 0.6610034143856257, 0.6709444298727754, 0.5851811702605482, 0.5618585876373723, 0.6632741749579518, 0.5835608274743231, 0.6504555876447204, 0.6295282465811561, 0.7070335626915302, 0.09294121795221277, 0.16549362713444649, 0.13032083543176665, 0.13899340330122212, 0.13804190368691815, 0.5255965880981557, 0.12636124036274343, 0.13602357593226766, 0.09593256639034176, 0.226525844464202, 0.1517110427209375, 0.17873013655324177, 0.1293375203138959, 0.1848042136316138, 0.3157764028869334, 0.2720245640418063, 0.20316886928178324, 0.18576145414915368, 0.34478447812454394, 0.47618252791488636, 0.5272159474048548, 0.3716964952868901, 0.27764320759686734, 0.29164259724118735, 0.4938698120990396, 0.44724095726407853, 0.3316905599508575, 0.2625354105375902, 0.26330885561971895, 0.35430098184292125, 0.3653249065553459, 0.2175485690993696, 0.26833150649025317, 0.38896239598434057, 0.27834982064928837, 0.31110681257565675, 0.20780743924086664, 0.19094345248332867, 0.1962138175762942, 0.19930183498097176, 0.2104857433994437, 0.2515433039241439, 0.20812578048190844, 0.20942521210785758, 0.20058670208312424, 0.2097006537966507, 0.21331880435231332, 0.18241023644303456, 0.6522054356029797, 0.17828308447808505, 0.18875688037485616, 0.1810238390945964, 0.17805876204867166, 0.617726780411078, 0.8350949915207843, 0.8159405638715933, 0.15389679896738762, 0.8388524173694729, 0.1656139388926211, 0.14287301293058585, 0.1602720274893451, 0.18289287798174614, 0.8423737826440529, 0.8113949251913805, 0.16552491503386246, 0.7515828733896222, 0.7850082717318975, 0.7742540608381568, 0.7632556353894941, 0.7632212795695161, 0.7811086829565684, 0.20421083397359863, 0.23401307348378853, 0.18375658210980406, 0.1985811676373691, 0.2208081040849882, 0.18769827647260695, 0.18639461640076038, 0.1803896506307725, 0.19833430057928902, 0.19152789665490466, 0.08108800689731577, 0.11029843679609708, 0.09766078356389118, 0.15246652927158466, 0.10065009704103156, 0.09909872238302009, 0.08902600309844255, 0.0992888125892658, 0.0928737311721366]}, "mutation_prompt": null}
{"id": "8be964dd-99d8-412c-8379-14cefa32de0e", "solution": "import numpy as np\n\nclass HybridAdaptivePSO_DE_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def update_pso(self):\n        cognitive = 1.5  # Slight adjustment for adaptability\n        social = 1.9  # Enhanced social influence\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.4, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def de_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.7)  # Fine-tuned mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def de_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.3 else 0.5  # Adjusted crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.update_pso()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.de_mutation(i)\n                trial = self.de_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridAdaptivePSO_DE_RLS", "description": "Hybrid Adaptive Particle Swarm Optimization with Dynamic Differential Evolution for Robust Search.", "configspace": "", "generation": 69, "fitness": 0.3814127225106734, "feedback": "The algorithm HybridAdaptivePSO_DE_RLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7664964442899216, 0.7512928837797503, 0.7379642266518267, 0.7692707695228775, 0.7711718386603905, 0.7939648439366087, 0.7773006416258528, 0.7585892450982927, 0.732461669768971, 0.4900017815781451, 0.512783191776301, 0.5448221846647088, 0.5006981575266685, 0.44136514395664195, 0.49611576644320243, 0.44550644934978, 0.36602488501116015, 0.5278065757822273, 0.12709454513001328, 0.16639596254017908, 0.13318329798927642, 0.14578879704287806, 0.12486381316383577, 0.13395316152289383, 0.11966565993103118, 0.1672357312538637, 0.14763704663436872, 0.12371439361898506, 0.1060751837279773, 0.11046383775875479, 0.13322194151914135, 0.11987943156572733, 0.13954447190269692, 0.09643585714554026, 0.08269794208832537, 0.09886302407987135, 0.9730399159354515, 0.9814541054329221, 0.98431435985547, 0.9792616643233257, 0.9719256235363974, 0.9788792872436571, 0.9876678706142863, 0.9723005403522919, 0.980905903456897, 0.5803118522559778, 0.1743434375976567, 0.5010840175919196, 0.5043103298091504, 0.5517947877876812, 0.5414844594604937, 0.5886855297857816, 0.08245588447772645, 0.5630322862491517, 0.7455923769360024, 0.7568085836705485, 0.8108022013611842, 0.8090159087510508, 0.768478217094515, 0.6762602473534303, 0.7754913057496995, 0.7897306912057237, 0.7144338826347858, 0.4439088826130696, 0.12013880604769456, 0.5494185446776638, 0.12169876112337041, 0.5296707278186658, 0.12059676923456408, 0.46055460950208504, 0.48809613962155085, 0.12179246923471343, 0.48152267301033047, 0.4047908619792502, 0.4415286273320901, 0.4643853620789603, 0.47438104016944016, 0.5077859820579871, 0.4556095637552059, 0.4317177238146933, 0.37402776793961967, 0.06215831788932824, 0.5099616436622778, 0.4479840698508759, 0.42645836271239257, 0.42865681137425116, 0.4530283595188984, 0.5180300869425576, 0.445377354507662, 0.394798621116923, 0.5221271717007459, 0.5557979380054099, 0.5012799076923178, 0.5106657120014833, 0.4822202202678524, 0.25193395143135633, 0.5299609218171223, 0.5295090142546228, 0.5152197222393513, 0.09173279400320444, 0.17405520992825674, 0.1844103196228044, 0.10496681778638794, 0.06144584692622812, 0.10727630819009826, 0.1236541822144902, 0.10620316488284365, 0.13979961510137795, 0.2756391288529465, 0.30609194284318486, 0.28750812787247726, 0.35536488856411275, 0.40758434080258177, 0.35301892462675, 0.3132793373100845, 0.3297566698293988, 0.13796857230464388, 0.6804185363737397, 0.6643536351728019, 0.6407444217722107, 0.6602147001575356, 0.6647803845073769, 0.7099879058502399, 0.6867376200233981, 0.6315811183114092, 0.6546114353371004, 0.1477944607004491, 0.10444370212483389, 0.10565637432422048, 0.16223253962045514, 0.12118528749184065, 0.13095472333409564, 0.10375485182432131, 0.14728442362014282, 0.1104040325837965, 0.24587866966227934, 0.19587222611239186, 0.244159488084167, 0.15016630453093405, 0.19194698532426335, 0.1691272665420267, 0.2140427886986399, 0.1980977689316502, 0.1824056430114801, 0.24636462709832663, 0.43554573817048303, 0.3929200004760971, 0.47045698797273083, 0.43346757002067693, 0.4714252735047486, 0.45454552855400443, 0.5030823827126767, 0.4511741456926004, 0.21282144349209697, 0.21381532097527867, 0.2808301595037912, 0.3025468251519171, 0.2743129063420029, 0.39844087407854645, 0.4269483036647983, 0.32003190803475046, 0.3061128631418427, 0.20922751117484872, 0.19540991560120347, 0.2129250174356404, 0.20769290461393064, 0.2201788010165846, 0.31217974608708, 0.21804472408551334, 0.20835681630467384, 0.22142166553583442, 0.2141040133114337, 0.2171937463302568, 0.5808864712367847, 0.23654962260840195, 0.21530409320703525, 0.19034011980886323, 0.21302981939060006, 0.1843947609853963, 0.1971177669506733, 0.7104641778651741, 0.19971358326641586, 0.15421653657793033, 0.8404597421141594, 0.1650708694776989, 0.7818019951046892, 0.16371624453665645, 0.15707768995298044, 0.8366993698653433, 0.8203533862802472, 0.16383786346690976, 0.773426022024315, 0.20834289904540848, 0.18969271529818665, 0.7388710768850317, 0.5667902121630597, 0.15150273627637767, 0.20314272535809508, 0.19394018062088159, 0.23097570539155832, 0.17561095622084744, 0.22310242605441022, 0.19978417682239935, 0.20127274599773948, 0.19459489762276072, 0.19903690214249747, 0.22222223117432982, 0.08544915109593276, 0.08606830725063375, 0.0901653514968459, 0.0974856125847442, 0.08878888703959487, 0.09695158996775877, 0.097821779936207, 0.08421546418270232, 0.08367842362487754]}, "mutation_prompt": null}
{"id": "a62462a0-e88b-4004-9065-8da12ab14e24", "solution": "import numpy as np\n\nclass AdaptiveHybridOpt_DSB_LSR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 55  # Slightly increased population for diversity\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.85  # Adjusted starting inertia\n\n    def pso_update(self):\n        cognitive = 1.5  # Further balance between cognitive and social components\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear decay with slight randomness for exploration\n        self.inertia = max(0.2, self.inertia * np.exp(-self.evaluations/self.budget) + np.random.uniform(-0.05, 0.05))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Broadened mutation factor range for diversity\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.75 if np.random.rand() > 0.3 else 0.5  # Modified dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with refined update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with improved mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveHybridOpt_DSB_LSR", "description": "Adaptive Hybrid Optimization with Dynamic Strategy Balancing and Localized Search Refinements.", "configspace": "", "generation": 70, "fitness": 0.33164657636840517, "feedback": "The algorithm AdaptiveHybridOpt_DSB_LSR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7732849629287784, 0.7843222918118098, 0.754280267939971, 0.7885714578597542, 0.6730912884790761, 0.7852768932725216, 0.7702869006024858, 0.8105567715912597, 0.7723817604307253, 0.547553425863573, 0.5432686991002724, 0.6039825259388247, 0.5539198455621929, 0.6062433839123638, 0.561081407511153, 0.5799203733103497, 0.6204780558852833, 0.5545554874756151, 0.12748924016070418, 0.17231343949822897, 0.15731419551718429, 0.12226339316419821, 0.16610440352112177, 0.15622631345396532, 0.15284112517485027, 0.13757925672654947, 0.11186785982330694, 0.13157676508809002, 0.11812983581882253, 0.12142037560656316, 0.11367148249826953, 0.1262653472458667, 0.13151480275235938, 0.12173405294822237, 0.08623550974953376, 0.13086747286909817, 0.9590702186669018, 0.9808667759948926, 0.9743710388572159, 0.9687670366418989, 0.9693100745287179, 0.9593335509914733, 0.9785739116696018, 0.9793545431946448, 0.9764453652088578, 0.5674778244013967, 0.601057236382708, 0.05630980873163827, 0.5002749992263785, 0.4907049989820854, 0.4097235059718498, 0.07877703303025374, 0.5513931807502483, 0.08174313548230239, 0.2177079566810487, 0.21972595057861466, 0.8027338036908999, 0.1823650762622795, 0.8193419521061208, 0.17870611248770496, 0.729357384796578, 0.8085006589016297, 0.16799972499158944, 0.34527338670200314, 0.4999030914729903, 0.33939244543528, 0.11983941413830634, 0.49222212988818115, 0.09476280428199857, 0.3294756906469114, 0.36349136587215514, 0.3416884056001427, 0.11032265721410817, 0.6056640141026018, 0.04955556038666764, 0.35683569754021427, 0.5386283025141176, 0.10997119464283844, 0.5424261411874787, 0.4573002628319893, 0.2299214801151671, 0.04209479087059809, 0.06270155255793597, 0.20060060266858515, 0.09540530954932747, 0.009760597429629314, 9.999999999998899e-05, 0.13874528579215328, 0.04658757611444253, 0.177614631759885, 0.2847031541450742, 0.19944761655917742, 0.26870659290969057, 0.17973675279998713, 0.27425485184025566, 0.21683153367073205, 0.15328063767262734, 0.34787524017777793, 0.16233134275020766, 0.04387580909590527, 0.07777479739552551, 0.15584008802039118, 0.08932547964093862, 0.0642001337068292, 0.07842072042514114, 0.09665717493982995, 0.08876332357072048, 0.09826804033711667, 0.07421642037591081, 0.16573923142298497, 0.25560100640281336, 0.14846115734587528, 0.14126656905133983, 0.3506018426517573, 0.187113547245635, 0.053238753702173014, 0.22198239345918858, 0.6037287396423373, 0.6660656589464403, 0.6654749128057111, 0.5392013787291483, 0.5858849012125783, 0.5614622311194768, 0.5894885887159154, 0.6619747091421762, 0.6182899006789678, 0.10978801095361779, 0.11328684321228777, 0.1189499324146931, 0.1408979476482044, 0.09902417323006352, 0.10466927479056032, 0.12089368321926319, 0.12059030851796437, 0.10313999202390167, 0.19417949489837116, 0.40122192488605446, 0.18409004566749332, 0.22072195336762113, 0.19363588072918703, 0.16985543283807092, 0.2595100725942674, 0.2518473630325392, 0.14748523268642222, 0.4418794348379975, 0.5001484154664788, 0.27051126016916016, 0.35988931161138193, 0.412655658384223, 0.3677637923052506, 0.521524377802575, 0.47581155960388655, 0.45968853307267465, 0.23009748737965208, 0.20631660355893777, 0.3481810002692639, 0.22857501390409463, 0.31686686845642587, 0.32268713512311675, 0.27825303095726517, 0.3285365915135501, 0.4332566548367095, 0.24225237903905794, 0.1966286558403404, 0.2222218162758015, 0.21456125490052813, 0.2595345895151121, 0.21397535139205326, 0.21467312223690305, 0.21618423522616426, 0.2411076605855994, 0.5657286211209231, 0.2085980644797205, 0.1965017883185165, 0.17749689739113983, 0.6263058151020153, 0.20135501453021876, 0.19292766686056895, 0.20818081655029752, 0.21447918915582165, 0.19361513071273562, 0.853695639525893, 0.1333256824054725, 0.8306554076994674, 0.8129683373616658, 0.20557902301831799, 0.8057513028311397, 0.18860345291169978, 0.15926983115838245, 0.12419078299997566, 0.8188535981401186, 0.11220210183666768, 0.7675068194672312, 0.2021096870980411, 0.7570717874859755, 0.19401154254593467, 0.12622257298592354, 0.16230526234779574, 0.22531242258998851, 0.18136310962975855, 0.18467426769710238, 0.21550736043452023, 0.19570810215694023, 0.1885140233748509, 0.20518386188090443, 0.19254367302140918, 0.2053215212735362, 0.09684733787319655, 0.09341123098943904, 0.09586048518524948, 0.11271760917707285, 0.08738233503728265, 0.09976571177234017, 0.0969116077847837, 0.09136858251127156, 0.1013529022428925]}, "mutation_prompt": null}
{"id": "6704c5c2-0d58-4c9e-8d66-a7f185473d40", "solution": "import numpy as np\n\nclass AdaptiveCoevolutionaryStrategy_DPT_MS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n        self.phase_switch_prob = 0.1  # New parameter for adaptive phase switching\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for fine-tuning balance\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.4, self.inertia * np.exp(-self.evaluations / self.budget))  # More gradual decay\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Broadened mutation factor range\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8  # Fixed dynamic crossover rate for better consistency\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            if np.random.rand() < self.phase_switch_prob:\n                # Adaptive switch probability for phase adaptation\n                self.pso_update()\n            else:\n                # ADE phase\n                for i in range(self.pop_size):\n                    mutant = self.ade_mutation(i)\n                    trial = self.ade_crossover(self.particles[i], mutant)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                    score = func(trial)\n                    self.evaluations += 1\n\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = trial\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = trial\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n        return self.global_best_position", "name": "AdaptiveCoevolutionaryStrategy_DPT_MS", "description": "Adaptive Coevolutionary Strategy with Dynamic Parameter Tuning and Multi-faceted Search Mechanisms.", "configspace": "", "generation": 71, "fitness": 0.17828469345655223, "feedback": "The algorithm AdaptiveCoevolutionaryStrategy_DPT_MS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.3393291238751883, 0.3187725829868213, 0.3169753939859502, 0.37197122942629157, 0.3459617106926979, 0.3169294826698953, 0.35536415848117786, 0.3494607451280747, 0.3220622016566831, 0.10541938912157933, 0.09513566728882417, 0.08039267395342398, 0.07842607714161454, 0.08045789265169645, 0.09152595217641502, 0.09166308701664183, 0.10724916993439815, 0.08677936673401654, 0.09876068779902869, 0.07091529214310466, 0.07139889029032542, 0.08569724892993813, 0.07155639755895205, 0.0734518302853614, 0.07120110655401968, 0.09459990232474269, 0.08438708652904292, 0.06846685188642421, 0.06899065414718297, 0.06975392597505237, 0.06730413915736988, 0.0685829841637946, 0.059026070823672505, 0.06784001753988633, 0.061854849167744086, 0.07168721615587181, 0.9635156547136486, 0.9354172601100715, 0.7467092272113716, 0.9621575267110467, 0.9329845072783797, 0.7527860803228399, 0.9601315513376404, 0.9331701874575202, 0.7462906012461483, 0.14965521238218993, 0.16116003097307108, 0.15204229938578506, 0.18160613839529838, 0.16625629036779732, 0.18410901360342746, 0.1658024191449149, 0.1703485519587684, 0.17213725467591434, 0.23063807452192564, 0.2530438452864011, 0.21478035844185694, 0.24095715542112472, 0.21464987831750115, 0.2228263852830834, 0.24451767042096695, 0.25913129744149743, 0.24911134276100344, 0.09815813163434739, 0.10774622725062111, 0.09732883193268138, 0.08356212335128388, 0.09851047743545582, 0.08690177296784696, 0.1251317736445159, 0.10097482977436611, 0.10240318317907038, 0.10228938834172807, 0.08785937717350711, 0.0889525218654661, 0.10390056546431459, 0.09171621410232944, 0.10670308778822324, 0.107227643574904, 0.09164328439045188, 0.11706049611589975, 0.016331680015590377, 0.017187402950672226, 0.02477792030867365, 0.02654559931016831, 0.004201446851609059, 0.0009822265499868088, 0.03112883949522638, 0.012524719236123971, 0.01517735206045634, 0.11494966461616574, 0.12329704672834063, 0.1335856955459005, 0.12475529393281415, 0.12802823887044013, 0.11335822131978734, 0.12559444276784104, 0.11065697379402095, 0.1409821933019293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06176611496173279, 0.0581641637574658, 0.04784545694758269, 0.06240943474548255, 0.06670899899946636, 0.05342776216134648, 0.05765571050624407, 0.06585008224337474, 0.06286618182059134, 0.32944863420227144, 0.32919774655217793, 0.31953836914598976, 0.33570055339630267, 0.33951552854288525, 0.32344337190151584, 0.36021622179510027, 0.29492351094866387, 0.32530085989820734, 0.07393935476561841, 0.07265606183478501, 0.08317032636242072, 0.09463878180851171, 0.07686213446783818, 0.07919392290289484, 0.07032573135809894, 0.07182522101978506, 0.07856004988825438, 0.13147453598445757, 0.1307757478505135, 0.13002086677262992, 0.13998244008138883, 0.12253249725274162, 0.13745082389294405, 0.1280034038435104, 0.12508349264669794, 0.1381443600456731, 0.2292345725677134, 0.21052457382989764, 0.21873710444095673, 0.22570519598289895, 0.23115109290118363, 0.2174147299132464, 0.24399627681745484, 0.2357939999402342, 0.22767234912280288, 0.16903746189529634, 0.1611337558301218, 0.16499968786064312, 0.15585996437716165, 0.15315647096884277, 0.15712880095694948, 0.18760698147739796, 0.17286155264774772, 0.16987648071864714, 0.17087763481068796, 0.17875286482618247, 0.18005549520213193, 0.1830801294829265, 0.1884438103590238, 0.17467164487540088, 0.17255530979773426, 0.1627929179616493, 0.17848218835102958, 0.1633298770005691, 0.15967796082096997, 0.16781665905961418, 0.17206445028861794, 0.1683493948183774, 0.16420998218634464, 0.1754355948296521, 0.17091197426334803, 0.16549771499800658, 0.2960438124424697, 0.1690597902783897, 0.28186381644945546, 0.4713114305563978, 0.1889622339016398, 0.30804742247983585, 0.3882320042590425, 0.3026939407238809, 0.15713129988565155, 0.4295008072417271, 0.18325513747811162, 0.29580197432579347, 0.18788476442375746, 0.13867908880028057, 0.15797909210761552, 0.19080676669348562, 0.19046863602341302, 0.18925526119406944, 0.1710047666901261, 0.17525828954686462, 0.1809831214456189, 0.185547989268659, 0.17195318835647722, 0.17056057151730641, 0.17266210432022377, 0.1908450055651838, 0.18940480191098985, 0.06666874694455016, 0.06249736947408491, 0.06830584085450575, 0.05557683804460811, 0.0658149191067674, 0.0560721749499109, 0.06415414338787051, 0.05778358543706186, 0.06158617987596593]}, "mutation_prompt": null}
{"id": "49594404-4df3-4a2c-9ce6-38edb18e4bc7", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Fine-tuning for balanced exploration-exploitation\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Dynamic inertia modification for adaptive convergence\n        self.inertia = max(0.2, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Slightly increased range for mutation diversity\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.3 else 0.65  # Adjusted crossover probability for diversity\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with refined update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with adaptive mutation and crossover\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedHybridPSO_ADE", "description": "Enhanced Hybrid Particle Swarm and Adaptive Differential Evolution with Dynamic Inertia and Mutation for Robust Global Optimization.", "configspace": "", "generation": 72, "fitness": 0.3616890954365105, "feedback": "The algorithm EnhancedHybridPSO_ADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7739466288928558, 0.7772767937462484, 0.7834946383638153, 0.7879066159687653, 0.8093333323688188, 0.7904065988872516, 0.7733486877924823, 0.8024305224151629, 0.7875478298860643, 0.6069752854883494, 0.629222196914135, 0.6026396997061649, 0.6406988190004209, 0.6591766048799881, 0.6248830657635834, 0.6402115929926766, 0.6054057396330003, 0.6308408198605517, 0.1628497074348304, 0.13921019928627698, 0.14114060624118852, 0.14085537067795417, 0.09952116382370191, 0.15341338510189795, 0.1669479307368099, 0.11669315096520605, 0.16077697967085547, 0.12613005950418776, 0.12597501103652797, 0.09546541537906283, 0.11672825032278256, 0.13969805400734625, 0.12602747852355656, 0.11978329597046555, 0.10395446047674795, 0.12927564399586644, 0.9620720683560647, 0.9875126547564671, 0.9805275555677344, 0.9819003733444224, 0.9807398134731999, 0.9875612556648243, 0.9820120634215757, 0.9807137105790925, 0.9812255808459264, 0.6285098027008331, 0.056980256300597776, 0.5523200184522084, 0.2796888134433083, 0.6302266425845733, 0.635668670109933, 0.6452550646266604, 0.08673427403091427, 0.6353575005356302, 0.21016679509969094, 0.3574625665906388, 0.8256669107494833, 0.7419801891763362, 0.262155627987391, 0.7734563479547731, 0.8057284352476547, 0.7990054873524357, 0.7960601009575131, 0.12247052299963856, 0.12123796715809354, 0.6198854028323615, 0.5106098217853301, 0.4495747744256079, 0.10495725127490863, 0.38336251786231146, 0.502150883259084, 0.12719427746318746, 0.26794374045555913, 0.12277833318289211, 0.37750969718647187, 0.12332861504002646, 0.40324987829148096, 0.5257105681214072, 0.39268784699158255, 0.4661857411086382, 0.5029791906011702, 0.07367033100715648, 0.2902985608093275, 0.35547332757939354, 0.049191294677044195, 0.2121230635124539, 0.21027876365973175, 0.06440321626796941, 0.3258928590999509, 0.472498197655852, 0.38441808569224, 0.2233100338716102, 0.4216432802578234, 0.5504508975340686, 0.2700232054954854, 0.21005749461959844, 0.5485213010257992, 0.5757454993255005, 0.5703307266224819, 0.1375303383761568, 0.07052014739875268, 0.056079909719125354, 0.08499314514061951, 0.06846655869336304, 0.19749362740687415, 0.19987385374634437, 0.063947592201547, 0.08836094755708179, 0.22854777874059595, 0.37836534851506176, 0.03765574225653456, 0.3624512754766349, 0.43882949886162237, 0.2536360919912829, 0.1653866222954583, 0.2762338446410255, 0.07639592225805014, 0.75018540517154, 0.6565975512170625, 0.7080484194599603, 0.6886964074998028, 0.703598339268868, 0.7070467774308631, 0.6340622318380627, 0.6793500233428782, 0.6706355085907073, 0.13385454788571838, 0.09976944675773225, 0.10445772044163293, 0.11613971734484962, 0.10751314004091894, 0.12160732520300388, 0.15572218391672488, 0.10729157864913308, 0.14583128148099678, 0.24341361457278987, 0.16168075188201947, 0.2532951588638269, 0.2384411211036409, 0.18670235551889502, 0.19148274644751317, 0.159733971655317, 0.20838548312492478, 0.18422753523263302, 0.35750767346325396, 0.3598273714897817, 0.2584764436974344, 0.3335262007022146, 0.35361595506511645, 0.42894027447212235, 0.5482700605310045, 0.47417454591558406, 0.5003571890148071, 0.14488569890279301, 0.23619269776248764, 0.2711364122283796, 0.280721505972781, 0.31914106204941295, 0.3370600419328491, 0.3135493448748221, 0.27910042951994773, 0.29903575898470525, 0.2900111801315568, 0.22183311281728035, 0.21676234125779648, 0.21381045897756545, 0.25120256536534236, 0.19975248018538283, 0.20805826407877148, 0.21980861122334383, 0.21707490012944952, 0.2028347477987058, 0.20348117447657021, 0.18154591860898894, 0.21082395645822594, 0.2335273279361586, 0.1907195284455534, 0.21872978204966764, 0.21807442086042828, 0.20518259906289538, 0.8359823619446094, 0.1851886045070712, 0.1540679328403578, 0.8434857460472117, 0.16511227932920358, 0.19502601423429655, 0.19006877126795552, 0.18218079411260857, 0.834456841203773, 0.7614471016604614, 0.165537255950978, 0.781028116320479, 0.20179700507258513, 0.20146180840700423, 0.16300704126004162, 0.7473110460422623, 0.7417061529872248, 0.1497981365384332, 0.1882012555503172, 0.19608242408787313, 0.19522401738318151, 0.2145322908419176, 0.22251165370322679, 0.20591471928034843, 0.18927775158535953, 0.2039646353533131, 0.19423352216020362, 0.08969307217756706, 0.08947546533992934, 0.09327816288272772, 0.13082577580446453, 0.09907900883532239, 0.09567842682561944, 0.14513868319197887, 0.10957714953415232, 0.09317557998214965]}, "mutation_prompt": null}
{"id": "d46de4f4-a739-4141-aa13-87d7223db778", "solution": "import numpy as np\n\nclass HybridPSO_ADE_NID:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for improved convergence\n        social = 2.0  # Slightly increased for better social interaction\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay based on budget usage\n        self.inertia = max(0.2, self.inertia * np.exp(-0.5 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Enhanced mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.25 else 0.5  # Modified dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with refined update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with enhanced mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridPSO_ADE_NID", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution and Nonlinear Inertia Decay.", "configspace": "", "generation": 73, "fitness": 0.34445442563861617, "feedback": "The algorithm HybridPSO_ADE_NID got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7570174290029336, 0.7282932426052224, 0.7481205298783267, 0.7712008137168904, 0.7741788469382402, 0.7643097058507221, 0.7594146474608395, 0.7618153381304339, 0.7533277168120501, 0.5699673529173288, 0.57626841265212, 0.515424870628564, 0.5494146981219066, 0.5771955938437884, 0.5906146539089174, 0.5926915491945874, 0.5557961578403461, 0.5767590569832702, 0.13977837772374546, 0.1460748696133516, 0.11047753766432011, 0.11412125803553808, 0.5363080231724159, 0.15032751560111624, 0.14096521519795568, 0.15512147225349704, 0.13858605661070578, 0.10970189959052279, 0.11991334996344016, 0.1134786476430083, 0.1000197795665475, 0.11900968735219908, 0.11938161771148681, 0.099472422450267, 0.11842016882742368, 0.1303487320764476, 0.9639079486973623, 0.9809150776178809, 0.9843774400548571, 0.9751846900028271, 0.9813752435054744, 0.9803209087565055, 0.9883671285385601, 0.9731241621780629, 0.9809444096316726, 0.5795318115051862, 0.057020153619271485, 0.05573928570790254, 0.5847801607927668, 0.5265231063470504, 0.5734397491213123, 0.5350928111234692, 0.08532415369903845, 0.5178222347425034, 0.7154875944240476, 0.3423603549663976, 0.7365917445800284, 0.7629493665056428, 0.2589715442573778, 0.19837777906639187, 0.7326645335518631, 0.21872494442478407, 0.7524662868597742, 0.12188581059427306, 0.11540327032286257, 0.3802649490335316, 0.11907531830292795, 0.1090377884241609, 0.11683061555583807, 0.46147384539466907, 0.11390427194195984, 0.11946252947274938, 0.29566481571480874, 0.4397996354258199, 0.3898810533573077, 0.45752152511121436, 0.11138642478016025, 0.43450950546017586, 0.43506039798533125, 0.299361107845205, 0.3788291361909756, 0.0888348390003203, 9.999999999998899e-05, 0.2291616852691839, 0.03279105302041241, 0.001301447317109905, 0.07956371494247305, 0.10348926315438711, 0.12729543686165035, 0.06456891113606233, 0.3672857211786634, 0.47420385142620713, 0.48690037734498015, 0.2228016424142807, 0.1681020256514799, 0.5254819572735692, 0.5103994976575901, 0.4896619244385786, 0.4771968100171654, 0.03242627265733011, 0.08271841103290012, 9.999999999998899e-05, 0.25652792311350525, 0.09723411292768835, 0.11122602605623377, 0.08578725295046175, 0.1573831554247025, 0.08882775027707523, 0.15037886316671933, 0.33093399235393084, 0.20726670912667355, 0.00561840689219284, 0.34567654229352707, 0.27514000391675564, 0.22749322666349558, 0.05125350289592656, 0.07034452529685509, 0.6866726006580304, 0.6386627973443897, 0.5917276313162132, 0.6033870900513529, 0.6460746564616464, 0.6635372957804477, 0.558450159106014, 0.5806312032835826, 0.6001119209335786, 0.10321446381798327, 0.13044104384162347, 0.09564246498777718, 0.13492214596113772, 0.12849241523669175, 0.0936242298155665, 0.43429568618109404, 0.12360165869075679, 0.12147349363527515, 0.14987954040406326, 0.14899484783284456, 0.21156357290674188, 0.17142182661933092, 0.18893906186038334, 0.18124436855063242, 0.2385581850828593, 0.17524087940231292, 0.1905354017278228, 0.3939911671113595, 0.3741766752328217, 0.43230710785136484, 0.376540167510658, 0.47318014422674537, 0.3792442143817837, 0.37162774785739716, 0.4519909509847534, 0.43629479979593955, 0.29099205297474495, 0.2014506473808283, 0.35242338731674094, 0.3550210627306418, 0.27020940286051987, 0.32025682002142886, 0.40866135440701823, 0.3581701909904179, 0.3091414917566767, 0.245840822302955, 0.18550195543351955, 0.1946577736003572, 0.22471722974950048, 0.20908263807374594, 0.18951887408763834, 0.2781685826767112, 0.21543961716251991, 0.23120492988629937, 0.18003852974027346, 0.6417302701092745, 0.19510507391647314, 0.21593016521035446, 0.17305653108898444, 0.22317108945550546, 0.1872470504517676, 0.21090662569241436, 0.17505864645800195, 0.729070149415826, 0.7468961214379535, 0.15400230618854183, 0.8103407189786158, 0.16468472422431202, 0.7691791835096002, 0.15567424648217443, 0.7357839331936095, 0.8254173348457214, 0.6764091958984406, 0.20127584899016815, 0.15739240419624, 0.8093978769798481, 0.6815993996845844, 0.19347745424172103, 0.766018442401693, 0.147112994355183, 0.20106109138116324, 0.19636345693750556, 0.20160752659000836, 0.21291004954070902, 0.18607293106079092, 0.18443802722085734, 0.19775596828964503, 0.1865102750965042, 0.1797297966516933, 0.2020951910366262, 0.07908517176216867, 0.08612898237513711, 0.10005786964323071, 0.10107291179801536, 0.08172881577596691, 0.090038450831191, 0.09313361736992998, 0.12715850077193913, 0.09754782892293312]}, "mutation_prompt": null}
{"id": "b7fd67fa-4f4c-41d2-b7c7-1b5b02e0d575", "solution": "import numpy as np\n\nclass AdaptiveHybridOpt_SPI_IDI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n        self.diversity_threshold = 0.1\n\n    def pso_update(self):\n        cognitive = 1.7  # Adjusted slightly for balance\n        social = 1.75\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Enhanced mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.mean(np.abs(mutant - parent)) < self.diversity_threshold else 0.7\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveHybridOpt_SPI_IDI", "description": "Adaptive Hybrid Optimization with Strategic Parameter Tuning and Intelligent Diversity Injection.", "configspace": "", "generation": 74, "fitness": 0.36832768947199446, "feedback": "The algorithm AdaptiveHybridOpt_SPI_IDI got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7780088677918715, 0.7693755748861695, 0.7583053997644398, 0.7912746678519923, 0.769602595110198, 0.7859371516880151, 0.7840135252572076, 0.7666533408053232, 0.7673898000998038, 0.5774591586822517, 0.5503733687484813, 0.5351240130505956, 0.5533804745409794, 0.5980476802460175, 0.59365824108801, 0.6093400885765137, 0.5988835041670818, 0.5143900296532143, 0.41680772072561645, 0.14834410494546957, 0.14487222174354286, 0.14192811862212384, 0.036120378750186144, 0.15478198037840907, 0.1427168691173114, 0.14016936299955074, 0.13376813135755639, 0.10457878512834307, 0.12170694448259367, 0.12919015323737182, 0.12995708992610833, 0.10703514913563306, 0.10752930835404673, 0.13555921561750872, 0.10097204736595722, 0.10816573308908461, 0.9640384351420911, 0.9715293341506105, 0.9808971550109913, 0.9494938523335716, 0.9714018365539078, 0.9694120609378879, 0.9813524596597049, 0.9804431107883302, 0.9699408962698864, 0.5607309379248406, 0.043129178700189175, 0.6204558408509642, 0.5371685477862256, 0.5789831376162893, 0.14219066998030738, 0.5724317344010441, 0.08206490673009448, 0.5556195021796637, 0.7398712608606077, 0.24250000754980605, 0.7861476111471792, 0.15611429653047015, 0.20192477382420837, 0.2550914964831684, 0.7327416778598927, 0.7656978568537989, 0.2165672515959829, 0.4488736421150108, 0.4601923026234128, 0.568452254757899, 0.10865624095991244, 0.48386546737408676, 0.3727799400054933, 0.47215320985834763, 0.5180709861566641, 0.46749962287470126, 0.3934605466017824, 0.021675332409249126, 0.12369910429987008, 0.549649841288101, 0.42189029831758784, 0.44279172215714524, 0.5013844800067153, 0.11527441147531203, 0.11935451405078834, 0.44864720611921216, 0.35715147489887067, 0.48791287607923184, 0.31172651846424004, 0.1136015953561742, 0.042873164306716505, 0.39315011753955864, 0.04838671981529841, 0.5263924288505708, 0.5114786713501955, 0.4012924878602042, 0.479081387795145, 0.46699507550449415, 0.16211080290738444, 0.45633132493915274, 0.5667054263539214, 0.13683971915863624, 0.50283481125781, 0.04496571276604577, 0.04578759482668249, 0.12617419906398086, 0.1251123171748968, 0.29724095358302316, 0.20892140539474147, 0.061550050504616816, 0.12241156903863648, 0.19235006227606022, 0.32455538767534686, 0.36534819398140317, 0.3764665938194913, 0.3969638394965811, 0.40270328957619317, 0.4419008171608292, 0.3095746412450804, 0.26912006221833296, 0.47547468912676494, 0.685455635325515, 0.6816212176841683, 0.6996165790022166, 0.6904705413879509, 0.6586988138944239, 0.7157145953006772, 0.7020454828333437, 0.7097729605061096, 0.6904519187835901, 0.11225040461016089, 0.14864396603649566, 0.08159184682972753, 0.12538474944758327, 0.11749981798161757, 0.10871030519079228, 0.15578667400559265, 0.13066317696530583, 0.08048332382871393, 0.14965510338995158, 0.19212526011943099, 0.20811348588571632, 0.18589161393211584, 0.20346020745940263, 0.30771166706531927, 0.21459966713751688, 0.2008217059192834, 0.3056709651006605, 0.4974386055560689, 0.24558818640087487, 0.4698052098494856, 0.34575645173042435, 0.4597338780247262, 0.3945356516912699, 0.5250753192307624, 0.49835327553054154, 0.5747319238035888, 0.3479727364844032, 0.2967297638568911, 0.20915107851009151, 0.19858101435105724, 0.2943206904830885, 0.22579572596282338, 0.36262827798340935, 0.46393378423505893, 0.2571461090544478, 0.2283615513696039, 0.22571901445896636, 0.1953357801296287, 0.20808728573177637, 0.1943216838354157, 0.21949912964698326, 0.333581929236329, 0.20084591717410272, 0.2180896121247683, 0.21524811346350048, 0.20121057433398926, 0.17587296081130077, 0.5987678866930579, 0.17863047579967495, 0.17179277252325065, 0.22330060043266897, 0.22883239945443223, 0.2117213218832259, 0.16364740540056777, 0.1629329556165503, 0.1537809371306441, 0.8143285265850226, 0.18851284043937055, 0.8223011538224192, 0.1530080686161962, 0.1599542350057569, 0.8477468234969167, 0.7772569820671804, 0.16618847145257365, 0.797804507427521, 0.8242647304977406, 0.20102149322927976, 0.7831800558851365, 0.7564346744067398, 0.14598289474865922, 0.2039191645242282, 0.19272139540310596, 0.17926287713163325, 0.21193473993837275, 0.19774720767548348, 0.1796983004960261, 0.19306417646700125, 0.19814796993322836, 0.23851556898106918, 0.1943836776079373, 0.08936050616045776, 0.08878707169729827, 0.08542945454392015, 0.08275383176146456, 0.078775904050152, 0.09366993123187517, 0.07942180715920144, 0.08682695503467053, 0.08338752133643734]}, "mutation_prompt": null}
{"id": "eb6ba585-9344-4ed7-9340-e7a23d390be0", "solution": "import numpy as np\n\nclass HybridCooperativeStrategyOpt_AIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slightly adjusted for improved exploration\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adaptive inertia decay for balanced exploration and exploitation\n        self.inertia = max(0.4, self.inertia * np.exp(-0.05 * self.evaluations/self.budget))\n\n    def de_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.7)  # Robust mutation factor for diversity\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def de_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.1 else 0.5  # Dynamic crossover rate for adaptability\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with improved balance between exploration and exploitation\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # DE phase with refined mutation and crossover strategies\n            for i in range(self.pop_size):\n                mutant = self.de_mutation(i)\n                trial = self.de_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridCooperativeStrategyOpt_AIDE", "description": "Hybrid Cooperative Strategy Optimization with Adaptive Inertia and Differential Evolution Refinement.", "configspace": "", "generation": 75, "fitness": 0.29549322158951635, "feedback": "The algorithm HybridCooperativeStrategyOpt_AIDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.21.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.6285620484402342, 0.5971409318410636, 0.5941868317170431, 0.595967797910653, 0.6350713638995849, 0.5769688108685037, 0.6113321832469729, 0.5845720851343454, 0.6070224247100984, 0.2971197277857308, 0.3216592229324732, 0.27349384501035434, 0.2946916255656894, 0.30417461384669575, 0.2520547313884761, 0.33359167089237085, 0.28950573239065613, 0.30697158637910116, 0.11142746451927998, 0.11394131922773754, 0.12521827322671597, 0.10749661614520867, 0.20722881196413323, 0.1490500152132861, 0.11886508815306729, 0.11924697664114114, 0.10171718634700666, 0.10685475315861481, 0.10077221823608129, 0.10042849683486876, 0.1018892807941254, 0.09911652316785424, 0.09522532734731015, 0.10297316491902964, 0.11353852719709501, 0.08177126441627625, 0.9576470501156861, 0.980930927435155, 0.979442639536829, 0.9813801004005467, 0.9774919997038913, 0.9875828796437293, 0.9820054876412617, 0.9791986752892096, 0.9734293399135435, 0.3418976581449501, 0.3274446782382455, 0.32438971023003915, 0.3475359547335023, 0.31646287673292395, 0.341298808382842, 0.3879344926015418, 0.36613132831043116, 0.08142559860636323, 0.5937630281159398, 0.5854611917864463, 0.572361012015332, 0.5129765232425563, 0.18789009244762767, 0.18039654638993852, 0.5456626335652885, 0.608058483298874, 0.5652540461177593, 0.2854461157663025, 0.25848202693673605, 0.2590606358194325, 0.11383395481059344, 0.2745506997169288, 0.2573987919181905, 0.2740751679240395, 0.269733591332046, 0.19373974166552077, 0.197662042890561, 0.30695135337882506, 0.20597743689039305, 0.27228100156422175, 0.26840893862252924, 0.27957332863515716, 0.24159783492927922, 0.2321728167374537, 0.11502699770072244, 0.12539872138298958, 0.20728065957967667, 0.16992466262852246, 0.22796238867251983, 0.21179400568857942, 0.1277284661916076, 0.22007575619886643, 0.23376507708355487, 0.2041228362326366, 0.3524396229011907, 0.24600490655586815, 0.28417937576684205, 0.15549323364495138, 0.33717393892578973, 0.2167141656904259, 0.29986493809561854, 0.28971007060961107, 0.3363041988269766, 0.10953958398214292, 0.12424626888006096, 0.04203068418076561, 0.03807361515289431, 0.10859229701807416, 0.08719639164151904, 0.08930985721587748, 0.13540011615454606, 0.0751400686714695, 0.163020175340977, 0.19218885874013059, 0.1808917676966093, 0.13831651677871215, 0.18613378593129604, 0.16328646277373315, 0.21077535078244813, 0.1830292967738354, 0.14994000158443654, 0.4821400676112505, 0.5130291182545049, 0.4720167387000811, 0.5537423103752185, 0.46974257044874435, 0.5061588698173325, 0.4936360613735119, 0.5029051610377966, 0.49440302274866077, 0.0954708814404246, 0.07585403394142887, 0.11972427951371423, 0.11296474521127187, 0.11994838412178765, 0.11162253999803051, 0.09721381974408283, 0.09737806354954903, 0.1249169794230458, 0.1480290786658892, 0.27252364000944584, 0.1634861625878189, 0.22213196307011251, 0.2359330520238233, 0.17571179029087836, 0.24628336730686284, 0.1621633805780115, 0.16558049105628292, 0.3439646861375034, 0.30002955868958425, 0.3229074639001567, 0.333060150288223, 0.3224582505735466, 0.3299444366812019, 0.3609127528979258, 0.3561403336417206, 0.3436825606495014, 0.242737281385069, 0.2505009520232403, 0.25876639575904525, 0.24251143647521067, 0.2523466182663897, 0.2603676862599523, 0.31806028199109915, 0.2629839162373412, 0.25707116405671027, 0.18546065842214665, 0.2074545716978008, 0.18818949807124052, 0.2062488293153969, 0.2212517186099623, 0.17748217466722582, 0.21172771513568256, 0.20435055888547948, 0.188223355296662, 0.20190908199921687, 0.3928455215752522, 0.17701251214828007, 0.17726538831731087, 0.4315862937662506, 0.18407009796690432, 0.1952237785625951, 0.3798516030874467, 0.19582402364017182, 0.49335408355702015, 0.1786472953245537, 0.15384378832005297, 0.6917862487925595, 0.16723683581611948, 0.6090311436278726, 0.15184631981869423, 0.18985214710466203, 0.6650008664777536, 0.6379796785215366, 0.16366661344185485, 0.6128602826134493, 0.6210393103586314, 0.6537686855424618, 0.6366476125131608, 0.20654454374540698, 0.1479271091670218, 0.5488631548158243, 0.18963442865991653, 0.19249311377126155, 0.2014385303122953, 0.18242021705626044, 0.1774945031262778, 0.19146294333447944, 0.21236308511909374, 0.18591052418617005, 0.18950686351957213, 0.08255939902633325, 0.08282042192979755, 0.08626471705751027, 0.08349847413310019, 0.07496511946889173, 0.0972558861826105, 0.09396323008734542, 0.09078583184347422, 0.08734606966048009]}, "mutation_prompt": null}
{"id": "e27654e3-b0c0-4bc9-aacf-596623d8f557", "solution": "import numpy as np\n\nclass AdaptiveDualStrategyOpt_DynamicInertia_ProbMC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slight adjustment for improved convergence\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Dynamic inertia with a probabilistic element\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget)) * np.random.uniform(0.9, 1.1)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.35, 0.85)  # Adjusted mutation factor for richer diversity\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.3 else 0.65  # Fine-tuned dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with probabilistic mutation-crossover refinement\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveDualStrategyOpt_DynamicInertia_ProbMC", "description": "Adaptive Dual-Strategy Optimization with Dynamic Inertia and Probabilistic Mutation-Crossover Refinement.", "configspace": "", "generation": 76, "fitness": 0.3929026731892147, "feedback": "The algorithm AdaptiveDualStrategyOpt_DynamicInertia_ProbMC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7740955490470576, 0.7573353588793998, 0.7898029072913871, 0.7779136399369722, 0.7689256837045363, 0.8256663411556925, 0.7758243315167197, 0.7818711821344523, 0.7996329680625396, 0.5518445899450234, 0.0552362642749451, 0.5751577035796207, 0.563786220547775, 0.5502063445203371, 0.5936283559606195, 0.579373756112235, 0.5444476568049349, 0.6041649522493483, 0.13234282681688037, 0.1379738611338065, 0.12283883270343665, 0.10555589597667492, 0.12582290084598757, 0.12937174967778575, 0.14244041765018267, 0.1307471410068729, 0.10760303948347538, 0.109519438949372, 0.10675416385266967, 0.12604836366734418, 0.0987427015109954, 0.09733062803752623, 0.1266478300520255, 0.11256350850708607, 0.12694632710374476, 0.14504995928297482, 0.9723598255893768, 0.9721139575550795, 0.9805713807366604, 0.9807913581623308, 0.9564772452889548, 0.9875465403104834, 0.9820649585364549, 0.9799560742013624, 0.981254246784849, 0.6012824243262842, 0.6141419524416453, 0.6202055261997325, 0.5849844932640076, 0.5862023815162145, 0.5989042270871122, 0.6280265722396552, 0.5256097656106369, 0.5620078664850445, 0.7450994073020134, 0.7204730397814219, 0.7958747165651636, 0.8103168394566211, 0.7260053220218594, 0.1845731266736823, 0.7570932780637181, 0.7548693550342419, 0.8120026567427618, 0.5441905285169094, 0.11642318347791114, 0.6880760846872676, 0.4345834241179062, 0.41100540115588124, 0.1254904916878029, 0.45586956843480353, 0.32380072857729203, 0.5503672422605254, 0.40692036134565757, 0.5546090706171285, 0.4961035638892751, 0.37642153178551563, 0.4509344301827177, 0.5017330848513355, 0.28718705185192606, 0.30509001913897205, 0.5053404778130346, 0.49720816475820084, 0.32947153979706567, 0.49598154825160956, 0.5125085466919217, 0.46849833023532794, 0.031747585646794696, 0.3056342232811252, 0.40258599788106275, 0.23751098929144854, 0.5655812676451312, 0.5526080881040563, 0.5206247260675282, 0.5562131671537922, 0.45676813937807725, 0.5497546050400348, 0.5851669922247451, 0.5399903822630951, 0.5381905910031081, 0.160285517815005, 0.25252545819578986, 0.0428496716093798, 0.09707035968693822, 0.07811774318956144, 0.11136524258518188, 0.0844228128484461, 0.1547227147025102, 0.07671543548168924, 0.3016901557131876, 0.3439222065042944, 0.2773221446459271, 0.35810268140789026, 9.999999999998899e-05, 0.4015698046163946, 0.35774712639347206, 0.40580432906160313, 0.07723108303027004, 0.6766300145258596, 0.6201026747749585, 0.6833399835741065, 0.6592846057830157, 0.6957147172625753, 0.7196655554410318, 0.7010167349010197, 0.6691499389572166, 0.7264203303701771, 0.08683286758792108, 0.10277689696657999, 0.08348105806803774, 0.13524751974161642, 0.10432391652892803, 0.1291636144071152, 0.10705647405070906, 0.08746401516828373, 0.09020475519451499, 0.30548933031103964, 0.20863383602298247, 0.3018993731562132, 0.28566136307257517, 0.2518448411299914, 0.2379506805518301, 0.3147798542047543, 0.15958108592135234, 0.6126562164492594, 0.4692190624326198, 0.42968258243966706, 0.47062322134032253, 0.28597257649525465, 0.44236721588136707, 0.5014000712290224, 0.45507701641747234, 0.4582906852752945, 0.5201785519242955, 0.2259126020791149, 0.2624010221513158, 0.468842737889442, 0.2283150763671261, 0.2362892384071671, 0.19289306744699897, 0.2777196368029592, 0.33925463535641665, 0.26366871932182456, 0.22227411291591048, 0.2382295340012437, 0.2957245626759962, 0.22033749928286428, 0.22455387248051317, 0.22678689986574518, 0.18307185888586353, 0.22787174793657328, 0.2082012388044272, 0.5510947660097951, 0.18568607558938155, 0.17859719792073225, 0.17656206060473068, 0.20566556468925445, 0.23234915871986572, 0.2101947671926715, 0.2201995739124185, 0.2248101113407034, 0.7902596645489426, 0.1810456426675503, 0.1539014182806131, 0.8433032665581288, 0.16201259777170252, 0.7759048746988706, 0.8201836316034952, 0.1951648897657241, 0.8591012500519869, 0.16586966486130517, 0.16578477610590858, 0.7623445357409168, 0.7796818373528096, 0.20554556251197786, 0.12523807917042473, 0.7856965805766171, 0.1802091879418033, 0.20271903592143858, 0.1939085645203299, 0.20043933908998846, 0.20590458818756185, 0.19580443431902816, 0.20756507213733566, 0.2112346709787526, 0.19791183055789618, 0.18195162070812843, 0.21514019392793382, 0.09541916884673085, 0.08341083074826472, 0.10480109731035359, 0.07997596676782992, 0.0949440074345459, 0.09454143936691795, 0.08602183071195524, 0.09908842091001602, 0.1124797134532135]}, "mutation_prompt": null}
{"id": "eabeaa24-1bdc-44be-aea5-8aad8676aa08", "solution": "import numpy as np\n\nclass EnhancedStochasticDualStrategyOpt_AIDC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6  # Slight adjustment for better balance\n        social = 1.9  # Increased to boost convergence speed\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Enhanced nonlinear inertia decay for improved adaptation\n        self.inertia = max(0.3, self.inertia * np.exp(-2 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Fine-tuned mutation factor for enhanced exploration\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.1 else 0.65  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedStochasticDualStrategyOpt_AIDC", "description": "Enhanced Stochastic Dual-Strategy Optimization with Adaptive Inertia and Dynamic Crossover for Robust Exploration and Exploitation in Black Box Optimization.", "configspace": "", "generation": 77, "fitness": 0.4025044659035061, "feedback": "The algorithm EnhancedStochasticDualStrategyOpt_AIDC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7968851003242216, 0.7760032986204874, 0.7673555731994829, 0.7934299725310883, 0.8013022590506764, 0.7790252939555009, 0.7987808039526513, 0.7800970358646636, 0.7967255411821991, 0.6289279254361992, 0.5819207265223603, 0.5791408929868279, 0.5900367021938533, 0.5824012959432522, 0.5689531444925997, 0.5849302702487525, 0.5941071527961848, 0.605612659812655, 0.14664583461024872, 0.13738026649218538, 0.13905938395788486, 0.13482473065989087, 0.36064503802604964, 0.1162166791504744, 0.1335333036142351, 0.10877676286240634, 0.12289952710819108, 0.08985050789226623, 0.09913107165709467, 0.10871192795567186, 0.14531971159801838, 0.12654778805444244, 0.10022199326749293, 0.1304042131492843, 0.10080852771237592, 0.13272500055319758, 0.9612374989946748, 0.9875145585913958, 0.9788895601149401, 0.9872550907863714, 0.9808307530741674, 0.9717639599772955, 0.9820763776730462, 0.9807532203807439, 0.9802260009999753, 0.5695415788530975, 0.4159096429838923, 0.5728324249869263, 0.5771673602778016, 0.6087464014261433, 0.6024109560315292, 0.5857796383941, 0.5945064510278757, 0.5246201719451056, 0.8521803659141118, 0.7680890387216638, 0.7903058032146704, 0.20998731592415987, 0.18017229893801645, 0.7385471181650636, 0.7741909791329238, 0.7275647459627856, 0.785233138903559, 0.5719055774931362, 0.114303921796159, 0.3985348886287192, 0.5274736893366393, 0.12845460413653587, 0.12059275008151749, 0.5031116291246349, 0.12378671546753417, 0.41731263003454555, 0.1291483243451378, 0.522759004738133, 0.42583728103909946, 0.46590488201637315, 0.4720368548513689, 0.5575820898924271, 0.45244650989411317, 0.45003894993035887, 0.44620685608336985, 0.06559524465580635, 0.46329563837094334, 0.3048900864105605, 0.4147229018663434, 0.399634640313414, 0.3372197355495482, 0.4794526036995863, 0.5309625110690036, 0.564478711489031, 0.4770555618331084, 0.5353834383259888, 0.5504898922813293, 0.5897194047560435, 0.5147540570655917, 0.5201320464492998, 0.5904635983923592, 0.5747751278472661, 0.6098246687184947, 0.04522086146226445, 0.0934915909280748, 0.07149908234724867, 0.0666770827771257, 0.19068078253467025, 9.999999999998899e-05, 0.15256574035890158, 0.1479193162103637, 0.0863792460994437, 0.1877529234758627, 0.36767336120503735, 0.24499580008245214, 0.39393691435613987, 0.39446663125628634, 0.41307501544367153, 0.2603683404422502, 0.36444587072947543, 0.4298108762244105, 0.6957715240097738, 0.6861219182902116, 0.7118496151374845, 0.6954944032130483, 0.7019896169056496, 0.6643411922875024, 0.7243497001475735, 0.7456624714150379, 0.6996498153070223, 0.09829268483112752, 0.10649180416487203, 0.14444581363208997, 0.12438276012774474, 0.12868886209476837, 0.10183209889307543, 0.12124110762573403, 0.08764990542543416, 0.14433684704754524, 0.14523891163034264, 0.23014764062127213, 0.2764396202149191, 0.1295517088283985, 0.18992283508137886, 0.4810137069236632, 0.16032845753373637, 0.24451065627191504, 0.6105663680509557, 0.43112242384952193, 0.46483043845165306, 0.46437830288442383, 0.48384158188327353, 0.5637593601715927, 0.3688751516682238, 0.480254892495382, 0.3918491593321143, 0.48508853903656113, 0.23616696826600125, 0.29053860496991335, 0.33674788731697425, 0.16862736855287874, 0.3412023311474407, 0.3540575378416585, 0.24842890441702903, 0.43459993386933515, 0.4075953688731956, 0.24802223981658522, 0.2548640260293896, 0.2215235045722398, 0.24461836354343114, 0.20497662017778362, 0.21635182833912625, 0.23317604770214517, 0.18651833287339847, 0.25165431618481293, 0.21833554449485515, 0.6296172539041354, 0.5812529054183281, 0.1999291700296213, 0.20204847260735181, 0.18927033327382448, 0.16883047773905113, 0.18072361982012775, 0.17703506216640397, 0.1961453453414701, 0.17675979103987305, 0.18399037197885926, 0.8678907821713231, 0.1658348937025076, 0.19390351952647655, 0.8094030263355829, 0.1837647638608093, 0.8448674494148666, 0.8127740379153642, 0.2038428555222841, 0.7806549119008523, 0.8297541135297601, 0.19579587770270568, 0.7623637908648753, 0.7450061337325529, 0.8186046893923907, 0.20795332429438762, 0.19923216997692905, 0.21078025214994356, 0.21785532288696818, 0.24923665169291565, 0.19750271179821743, 0.18250406930299024, 0.20257509562650888, 0.23754687364164406, 0.21232383710175373, 0.09692831174415473, 0.0909300949920151, 0.10179748377749542, 0.10311220688737288, 0.09415309281571083, 0.09979190511970959, 0.08665385175103713, 0.08387926667747592, 0.09481000680717022]}, "mutation_prompt": null}
{"id": "45057797-b6dd-4a36-b6e3-6be572333b46", "solution": "import numpy as np\n\nclass HybridEvoMeta_AdaptiveASF_DS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 60  # Increased for better diversity\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.8  # Adjusted for initial explorative behavior\n\n    def pso_update(self):\n        cognitive = 1.5\n        social = 2.0  # Enhanced social influence for cooperation\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n        \n        self.inertia = max(0.2, self.inertia * np.exp(-0.001 * self.evaluations))  # Dynamic inertia adjusting\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adapted mutation factor for flexibility\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n\n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.95 if np.random.rand() > 0.3 else 0.7  # Slightly increased crossover probability\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridEvoMeta_AdaptiveASF_DS", "description": "Hybrid Evolutionary Metaheuristic with Adaptive Strategy Fusion and Dynamic Selection for Enhanced Exploration-Exploitation Balance.", "configspace": "", "generation": 78, "fitness": 0.38364589690592366, "feedback": "The algorithm HybridEvoMeta_AdaptiveASF_DS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7943158003227251, 0.8137982569229314, 0.8043618083421619, 0.8177918185233037, 0.7991441761507281, 0.8284314099354388, 0.8262202779526655, 0.812588307423313, 0.7704530205736351, 0.617879618357315, 0.6030927043226841, 0.6118155625550448, 0.6140046397702426, 0.593254078606243, 0.5996580767252666, 0.6239941534499052, 0.3919423745318408, 0.6247671681745779, 0.10137817993864517, 0.11780277476410961, 0.14552853732917392, 0.1191471373395181, 0.13526231274761524, 0.10097068958624367, 0.14048493960963604, 0.13738229488393972, 0.15482682573241457, 0.11957944129387577, 0.10211882302546749, 0.11258031684806469, 0.12342262099854195, 0.12630078283091006, 0.13389421866593854, 0.15032805784624614, 0.08955898586201516, 0.12210163737704971, 0.9674037245695108, 0.9761449640323681, 0.9677094720150494, 0.9652137697514719, 0.9770617181305062, 0.9564314368470482, 0.9787723132047806, 0.9771651608901968, 0.976335451419786, 0.5945530805217003, 0.46548099092735307, 9.999999999998899e-05, 0.5999450598081417, 0.5938638775431192, 0.601479793011644, 0.5754162017111633, 0.626916392529199, 0.4301870117124764, 0.8327420666828471, 0.8467383355126984, 0.8196062820358934, 0.7728350058748281, 0.26603228662092704, 0.20667656483005414, 0.7494324304438089, 0.8159536167398633, 0.8406660363552575, 0.11631759028841404, 0.41940273371853887, 0.5700312482158747, 0.5150148218452699, 0.4639183637331902, 0.12504223642128476, 0.3402484136021494, 0.5780647285605827, 0.6049230111554065, 0.3964530913390444, 0.4411509996199776, 0.5364644504268121, 0.25201420026454735, 0.6033585908790751, 0.12773115239529775, 0.6747380224719458, 0.12446139414074164, 0.6081496572290706, 0.06104518061632791, 0.4497282708047591, 0.3184307247586218, 0.5199895022357266, 0.582355308924914, 0.5597655642389865, 0.4362360423317754, 0.04997784897982016, 0.5966031070050505, 0.5887261984831029, 0.6263065526381324, 0.6001586649919127, 0.5702133246354129, 0.595217959200214, 0.5085319137521646, 0.6416010770999601, 0.6792824116289884, 0.6251506882305728, 0.07955889214113743, 0.07629129455498862, 0.11336270520715008, 0.2199264962527382, 0.23834293038224064, 0.1489767596363828, 0.08827093430235633, 0.09066144691838107, 0.08501592047183804, 0.3643413987355031, 0.3033937965940703, 0.3992253848692583, 0.30838903078645485, 0.35322292137530975, 0.43653445136717905, 0.08051875770150163, 0.35380456612657085, 0.39014396841223575, 0.7276129951493711, 0.7083277960509797, 0.7188896641395274, 0.7576142626409231, 0.7513116650775741, 0.7180302184136647, 0.7732089608555727, 0.7069236784920747, 0.7556814006329717, 0.11538089375593896, 0.09153125978916066, 0.09746076343143162, 0.09696045967994738, 0.13742649064214274, 0.1152401445081308, 0.13448004989555196, 0.1298363690024542, 0.10414548930105538, 0.4143187398295015, 0.24773360950409373, 0.6484726746478695, 0.6005363898697231, 0.14554788698229226, 0.20688237924389574, 0.3149952394644582, 0.2026745299030439, 0.17699291645187298, 0.23522953169799155, 0.46979277172459, 0.3215462362501367, 0.3247924098247078, 0.5053838040369311, 0.4670413019695697, 0.5443303840902523, 0.47099905126619035, 0.401789671490293, 0.2692675741474252, 0.20424826789464146, 0.24793714690362445, 0.23309358810252057, 0.20807415186215572, 0.2600667702673167, 0.15262634097920402, 0.20717472584537333, 0.2451370851223711, 0.22762758696726004, 0.20962771550496773, 0.22342353600313858, 0.20107861285810413, 0.26749632169370074, 0.2145436804717069, 0.2384401426031133, 0.22800674768675722, 0.2243566720101624, 0.21837045901814944, 0.2136729199088342, 0.198267799779137, 0.2068953786246358, 0.2418486222837879, 0.2127237017089677, 0.202015932300859, 0.20456626841057612, 0.20315674655151972, 0.18760798187407945, 0.18618077270895117, 0.8400600239852836, 0.16639779619297457, 0.7945693278194422, 0.19450910170547497, 0.16143548606508262, 0.14640393341878788, 0.16756699425970056, 0.1654439065576091, 0.16711065703359584, 0.16575510070802502, 0.2081786359119796, 0.20638119075698436, 0.16370837568908225, 0.08234012257867651, 0.8112644060477154, 0.21005109480942552, 0.19779895697283523, 0.18567531197783305, 0.19536762535862773, 0.22160603220687924, 0.20590742621428748, 0.20853724902896775, 0.19386598405439837, 0.18988790011063816, 0.2040330857110484, 0.10435674397185535, 0.11585671179077073, 0.1005534924693795, 0.09160739146520169, 0.08645533615984913, 0.11245671633941656, 0.0971439435968161, 0.13226079443637428, 0.09847996073548093]}, "mutation_prompt": null}
{"id": "73d350ce-9cdc-492a-862a-f84d002fb3df", "solution": "import numpy as np\n\nclass AdaptiveHybridOpt_PPT:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6\n        social = 1.8\n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.4, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveHybridOpt_PPT", "description": "Adaptive Dual-Strategy Hybrid Optimization with Probabilistic Parameter Tuning.", "configspace": "", "generation": 79, "fitness": 0.393394772544379, "feedback": "The algorithm AdaptiveHybridOpt_PPT got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7650037057148866, 0.7172802237719409, 0.7177170696651394, 0.75729480886151, 0.7480051674336539, 0.7439043661046927, 0.7339369611509099, 0.7782298235445715, 0.7687688350452866, 0.46702452603060185, 0.4953457267731175, 0.5006562616198018, 0.4767059748986662, 0.5487099550012542, 0.483302337935538, 0.5174927339311101, 0.4802437093333324, 0.5209623028781436, 0.1186636993308342, 0.10789910354587151, 0.13466527105018578, 0.12940682218719524, 0.3324908741526259, 0.1257438332672094, 0.21686744912567124, 0.12160039896753383, 0.14007121548403756, 0.09929825218567889, 0.1289877008081527, 0.12527930609597804, 0.12490870931985043, 0.10594539841247208, 0.12928803331000605, 0.11424983959799961, 0.12067324218162778, 0.09276811095256221, 0.9726793842361048, 0.9814490865953245, 0.9820954758571099, 0.9816801407546029, 0.9767718665363753, 0.9868685991461928, 0.9843416177999008, 0.9723982612422818, 0.9796405463509931, 0.5479306970687496, 0.540724331369054, 0.5872910960816017, 0.14166392996974864, 0.5533904563434127, 0.5242675754233463, 0.570520845155982, 0.4689163878183137, 0.5090526949715866, 0.7759939905895319, 0.801924637238396, 0.7481515813975022, 0.7567872714762727, 0.7636830060820292, 0.7457371621670336, 0.7447773200729293, 0.7523699059630578, 0.7137370552989415, 0.515199255767918, 0.5088590942917939, 0.42789881881716885, 0.12090093885688424, 0.11791176082791577, 0.3023934614766879, 0.48756665119553444, 0.5412363138934391, 0.4214266257244659, 0.40247132485122505, 0.3084054364155573, 0.10884179313790154, 0.43832573193613755, 0.5119518145937851, 0.4469129190885903, 0.48422695215579215, 0.46681635469284766, 0.4622603284974198, 0.4550372983298594, 0.4594178332925808, 0.4189617499942535, 0.49070188765510625, 0.3487352238478948, 0.3204293956968858, 0.4751821642628008, 0.44016670599270225, 0.40177068022610496, 0.5244662290969904, 0.524123938525147, 0.4905533593595428, 0.38233912031364203, 0.45683221793603646, 0.5456684127428413, 0.5527689695406439, 0.5722248607217908, 0.5037954498813071, 0.0961110533348718, 0.043538958151457696, 0.1302146333631954, 0.22674043068421168, 0.27206853449237567, 0.07797677379974177, 0.18286210786356283, 0.090817925671275, 0.2447901912427145, 0.35426092884521343, 0.3150048299993329, 0.2989804841342839, 0.2958624323857726, 0.33738482336920084, 0.34930373992764807, 0.3702226647092245, 0.33661187191819986, 0.2517293321124484, 0.6769120078596164, 0.6637707849231078, 0.660180009860392, 0.7193671568869067, 0.6661282329334465, 0.6833808942804582, 0.6403418753144046, 0.6698493126909337, 0.6322261579255672, 0.1504429539228862, 0.12897159356555987, 0.11966709022142163, 0.13020803673187342, 0.12431221248140267, 0.13589739292214886, 0.0974679767035308, 0.11740504467434587, 0.13818646667983503, 0.1464228705972308, 0.24332124345785533, 0.2961582518895096, 0.5163359612222789, 0.177426749561008, 0.5507750478673682, 0.26856954763601193, 0.16435078191300168, 0.3251635012012922, 0.3679419972445782, 0.43750314846705973, 0.46882501685527944, 0.4204453049272815, 0.46464037824753546, 0.45881016750707837, 0.4466568414235256, 0.4911577464633118, 0.4328971528481923, 0.35240219713392384, 0.22772118244759065, 0.23805010819810624, 0.42251800495940917, 0.3660496934453745, 0.3134113216864539, 0.3353008885737987, 0.31624336059028424, 0.3591696827669848, 0.19431946181587978, 0.27296414397378643, 0.19421539671411292, 0.20494590268150858, 0.20034072660191227, 0.2152084894250842, 0.20397775287550146, 0.2022501450041042, 0.22422681609768969, 0.21796931945677023, 0.20446600416027105, 0.19404076401088133, 0.2054702956708926, 0.20805211588508687, 0.19381239256487925, 0.20625779109578402, 0.18100994971447437, 0.20135580675501918, 0.19141568169506984, 0.7723589498526082, 0.154490165885094, 0.8203355319136484, 0.166489048071768, 0.7688126094587814, 0.1221468517112857, 0.16317120870201252, 0.796770369065599, 0.7976031545521973, 0.2054593836609615, 0.7783741720696411, 0.2056270472093047, 0.20082717095775082, 0.6782616535763849, 0.7112945286541719, 0.14976462053761896, 0.6134446287520632, 0.21607848671905983, 0.20193082315298572, 0.20517292074403282, 0.24153233211569658, 0.20556697593053108, 0.20523104673301318, 0.19173397284385074, 0.19993907576896808, 0.1883034304561706, 0.0926966149501739, 0.0870549300942377, 0.09148417533287934, 0.08880018531704936, 0.08852580758593942, 0.10395604733980002, 0.0872904126885009, 0.14092626171727118, 0.08703450723897987]}, "mutation_prompt": null}
{"id": "9ac041dd-37af-4c72-b2d2-c7eefd0faad3", "solution": "import numpy as np\n\nclass EnhancedDualStrategyOpt_DAC_RC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n        self.mutation_rate = 0.1\n\n    def pso_update(self):\n        cognitive = 1.6\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, self.inertia * np.exp(-0.5 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.9)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.1 else 0.7\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                if np.random.rand() < self.mutation_rate:\n                    mutant = self.ade_mutation(i)\n                    trial = self.ade_crossover(self.particles[i], mutant)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                    score = func(trial)\n                    self.evaluations += 1\n\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = trial\n\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedDualStrategyOpt_DAC_RC", "description": "Enhanced Dual-Strategy Optimization with Dynamic Adaptive Control for Robust Convergence.", "configspace": "", "generation": 80, "fitness": 0.2592450121116769, "feedback": "The algorithm EnhancedDualStrategyOpt_DAC_RC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.8287729042498434, 0.8146738970508203, 0.8174844355758069, 0.833508558397038, 0.8249848358707419, 0.8100868933381984, 0.7982863607796982, 0.8236168241145012, 0.1463125220452388, 0.4440249604065428, 0.6162413039311636, 0.4017384900888761, 0.041039001138969744, 0.5042098732319116, 0.5090988413323312, 9.999999999998899e-05, 0.486930408236774, 0.03764903292225008, 0.10554384257759997, 0.13145713110533375, 0.13303995175872807, 0.08608069555639719, 0.10959666107751331, 0.062479580987066075, 0.10831891279966988, 0.10350988655114779, 0.05281456361149972, 0.09631043185826638, 0.06133605102809392, 0.09630731880314403, 0.07884846548387137, 0.05127181562194327, 0.09382135702087324, 0.038040213742492446, 0.0639746976085166, 0.07384019329471281, 0.9637643371548189, 0.9842658031173791, 0.09791417851732565, 0.9830446758966129, 0.09915987553996197, 0.9353720096807666, 0.9894223352529582, 0.98870679778509, 0.9910622023048103, 0.4698153070396014, 0.3576586472773937, 0.2870017424831094, 0.5787734181702093, 0.39541813760463573, 0.4489394245740075, 0.634555276926104, 0.0866897971656243, 0.07615796936399255, 0.301167303359025, 0.21274394803380692, 0.3587904902391319, 0.18815510129292656, 0.18437169984278357, 0.11043333143368328, 0.12180929714427313, 0.17103834499394976, 0.21897852182039468, 0.20559896898158447, 0.12041996295911284, 0.06500434184888237, 0.10015601647540229, 0.1217024491549411, 0.11597045304146758, 0.37473065678392925, 0.14548464020116458, 9.999999999998899e-05, 0.26481649623631487, 0.01643596970985106, 0.13877294856856293, 0.33119267208274683, 0.1660082179386101, 0.11967331896899303, 0.12637505872344357, 0.24525407688139844, 0.17702441754626685, 0.1372692555211057, 0.2414952902259323, 0.1650397626081581, 0.042154445049497724, 0.0325383756545623, 0.04347483503602412, 0.07966950392373606, 0.013251381410659069, 0.0676236828979907, 0.2964738368752635, 0.3718025002819566, 0.10309375995566383, 0.05270021555617155, 0.0721973660479378, 0.12299936794823585, 0.2515074337362567, 0.05166894872913541, 0.17361706488578854, 0.032846560654839596, 0.04556724265790857, 0.045663565467971234, 0.07068375053459586, 0.08650080660381387, 0.08542691294889482, 0.09681371808750372, 0.06315653266330379, 0.10007231473575828, 0.060991505147603875, 0.07974798060340016, 0.19045829400402348, 0.1161908195062824, 0.15064921679357446, 0.005873354539851605, 0.05421133575930526, 0.0454059278982859, 0.04433006308641507, 0.5443716375342427, 0.7257878824059483, 0.6470352513682656, 0.18064935899075807, 0.7664983949802309, 0.505350539505566, 0.6062784369159125, 0.5770153643381395, 0.7697551203847927, 0.08337802910879222, 0.13092989818447587, 0.06782922512268719, 0.13449558376026982, 0.07832688899702711, 0.0688996826171735, 0.10400877436498213, 0.11106136955632662, 0.12367233115059006, 0.1652522515241006, 0.2041956416658176, 0.18168326354449904, 0.17350850104890492, 0.1508623851885964, 0.17009458262256416, 0.24501878520338227, 0.2009942011775242, 0.6264778470596728, 0.20596909924662754, 0.25516691369211497, 0.3007316454789425, 0.20912027008977518, 0.22536229380986084, 0.297678685397611, 0.4089768321512117, 0.277783353045443, 0.31463969674398484, 0.2538156330561099, 0.07593265870008459, 0.21074375203421758, 0.22004865833799148, 0.2126695774927495, 0.2871611826223275, 0.20168663633052497, 0.29854031288158067, 0.09458138312497155, 0.20533941328632876, 0.23755269360001274, 0.21918006572883098, 0.20004248706461036, 0.24677864268197014, 0.23288062015568034, 0.23495776546428893, 0.2156884188843532, 0.21055195911140778, 0.1826072371076478, 0.22122410320950914, 0.16905146473649524, 0.19520827926331108, 0.1720762019629437, 0.17748907768694278, 0.18601069607906495, 0.20224370792778756, 0.21796298444882134, 0.16493215173290643, 0.1521608633532211, 0.15458056187091895, 0.8684275399649635, 0.16695194894164578, 0.19195157400243335, 0.16255253658567403, 0.19540552648192955, 0.8593592710243373, 0.20340256415545976, 0.20192962674595705, 0.8235102860033452, 0.6957829329873362, 0.20319270195749228, 0.8007779581302132, 0.8003526407053889, 0.1248073248648669, 0.1626734373831512, 0.22394291806351196, 0.19191788124429832, 0.2014745927738124, 0.19235103129113307, 0.20071859651377355, 0.1872219722093208, 0.19619827371452792, 0.2113900745556725, 0.19126852952377438, 0.09748798061086195, 0.08100197929509156, 0.08039037709965946, 0.07933521981028624, 0.07503632121885206, 0.10266984500880294, 0.10050785663753681, 0.088866569706056, 0.09305703764458562]}, "mutation_prompt": null}
{"id": "4f82e61a-0f7c-4891-9f26-187454d977e4", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6  # Slight adjustment for better balance\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.8)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Enhanced Self-Adaptive Mechanics and Robust Local Search.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7870987350386937, 0.772518642027322, 0.787728678541876, 0.8010768155416359, 0.7858126277044558, 0.7981966111874281, 0.7662631058241139, 0.8087458627542605, 0.7690837498367729, 0.5896795087852476, 0.5735828463662223, 0.5565392737708605, 0.5894808973567274, 0.6017160046820762, 0.5639929848560422, 0.6312073057755399, 0.5848169343420315, 0.5868629083356047, 0.12061128999816606, 0.5494421317282103, 0.14190306480767445, 0.15382114983953887, 0.12259768362876533, 0.13144750102407776, 0.12365857783104839, 0.13151555098113643, 0.15351739436204825, 0.10301885915320586, 0.11447178468660424, 0.10561358261394438, 0.12129722162780476, 0.11000471569198766, 0.13611168566855814, 0.10043188316143792, 0.090043166015214, 0.12918190052949596, 0.9732621583689356, 0.9815608289967621, 0.9818510617897828, 0.9785027520351097, 0.9792564143828625, 0.9822065439283073, 0.9823095614839283, 0.9790506626627897, 0.9795413886462214, 0.6150983459887418, 0.5640108269027803, 0.6244951432421865, 0.6200267030611315, 0.6119185791232105, 0.5969960056467587, 0.6185226102900205, 0.628923972494331, 0.5949339759948769, 0.7736840356835168, 0.8046487424038944, 0.8013336804898411, 0.7933406383001566, 0.2609792155194338, 0.7613405818748401, 0.752482495741054, 0.8071122782778353, 0.7814998894663063, 0.5535532934233942, 0.1249929576570672, 0.48532480991894444, 0.3911384587307051, 0.3762792506817956, 0.1234822546160278, 0.4215854205785353, 0.5406292687387089, 0.4859706009434315, 0.123855055362601, 0.5143795616659781, 0.6237899346108242, 0.5185170478308194, 0.5752111884529714, 0.566800902011283, 0.4972075508505991, 0.4677454108165018, 0.5195901436728843, 0.1633924876113091, 0.5520351202485271, 0.49944070284297637, 0.4788820797054245, 0.28498921698036017, 0.22969785541125298, 0.16671335625782635, 0.5701972939703067, 0.45482112697308064, 0.6129089428234611, 0.5907074902564944, 0.6073925560819393, 0.6409840927704913, 0.5507468518094081, 0.5515036160881457, 0.5738718840343257, 0.6134334186133665, 0.48497291684096033, 0.06124641794126107, 0.16720493553082083, 0.10664120415307876, 0.3609224600080322, 0.3500717402695108, 0.3374551425988106, 0.15795686538134923, 0.312489430229574, 0.27776098960287465, 0.48682412743852366, 0.39643427067218806, 0.40635826776662887, 0.3309448225366828, 0.432681611970551, 0.4275533769512815, 0.4194937787969636, 0.40573408098205943, 0.384182725699451, 0.7127015145255844, 0.6942192942167968, 0.6823039128582049, 0.7255047010191809, 0.7209093524394025, 0.7416583847973427, 0.6573925306454509, 0.729329908825407, 0.7272781835635522, 0.10983758034885216, 0.0815814639913347, 0.14760364609163557, 0.09949933544094858, 0.12520233526896096, 0.10382086923047829, 0.11949443539224636, 0.13550067992282433, 0.14551652419676597, 0.2104166356200391, 0.24761253808470196, 0.16736004209546773, 0.21069957148426566, 0.3178747451948474, 0.20405493302824973, 0.2016023287136537, 0.1569435079983752, 0.32233515098417287, 0.4668648776898553, 0.42923520535418547, 0.49466073637936636, 0.5330050602939242, 0.48410328718593076, 0.5084100137276557, 0.5073371715241586, 0.5173061281215685, 0.4780557830217459, 0.3169162837845394, 0.3468065173831366, 0.29849109561110176, 0.20372234445480686, 0.3129465001155106, 0.418253610420402, 0.34608326596776173, 0.35200057405278784, 0.22062289763841458, 0.21610700492297152, 0.20980598541198692, 0.19895890469831579, 0.20282820136653212, 0.21265301681019122, 0.19955491410658677, 0.2485951948230275, 0.219186851133931, 0.21177511905542656, 0.21417891275971446, 0.2290515321020663, 0.19951361848862204, 0.2192480859003212, 0.20325848224644782, 0.1985522526013549, 0.19134310349214134, 0.19128419477329295, 0.20835075318747232, 0.2011130207583356, 0.18136518698602955, 0.15480346923505584, 0.8568033281825458, 0.1659355150040135, 0.8099436876802873, 0.15918779105992675, 0.1384718004653287, 0.8377792932980035, 0.7976384823121043, 0.7490010600090697, 0.3283129367391415, 0.20777238880548665, 0.7952854859082754, 0.6776086942188557, 0.802925508818296, 0.20273872256748282, 0.7480380828768712, 0.1979086250905704, 0.21813056777725037, 0.20362282800165876, 0.17768017110198275, 0.19108221134425207, 0.2050148328403255, 0.20468033155912202, 0.1988493882729343, 0.21505535447641733, 0.08928553143436235, 0.09693808402808768, 0.08848415275924182, 0.08921400340364438, 0.09332038547768096, 0.10457266009268973, 0.09776342520115244, 0.09885487006882432, 0.07588945782540701]}, "mutation_prompt": null}
{"id": "427a2186-5b01-43e9-a117-90639f15481f", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6  # Slight adjustment for better balance\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.8)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Enhanced Self-Adaptive Mechanics and Robust Local Search.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7870987350386937, 0.772518642027322, 0.787728678541876, 0.8010768155416359, 0.7858126277044558, 0.7981966111874281, 0.7662631058241139, 0.8087458627542605, 0.7690837498367729, 0.5896795087852476, 0.5735828463662223, 0.5565392737708605, 0.5894808973567274, 0.6017160046820762, 0.5639929848560422, 0.6312073057755399, 0.5848169343420315, 0.5868629083356047, 0.12061128999816606, 0.5494421317282103, 0.14190306480767445, 0.15382114983953887, 0.12259768362876533, 0.13144750102407776, 0.12365857783104839, 0.13151555098113643, 0.15351739436204825, 0.10301885915320586, 0.11447178468660424, 0.10561358261394438, 0.12129722162780476, 0.11000471569198766, 0.13611168566855814, 0.10043188316143792, 0.090043166015214, 0.12918190052949596, 0.9732621583689356, 0.9815608289967621, 0.9818510617897828, 0.9785027520351097, 0.9792564143828625, 0.9822065439283073, 0.9823095614839283, 0.9790506626627897, 0.9795413886462214, 0.6150983459887418, 0.5640108269027803, 0.6244951432421865, 0.6200267030611315, 0.6119185791232105, 0.5969960056467587, 0.6185226102900205, 0.628923972494331, 0.5949339759948769, 0.7736840356835168, 0.8046487424038944, 0.8013336804898411, 0.7933406383001566, 0.2609792155194338, 0.7613405818748401, 0.752482495741054, 0.8071122782778353, 0.7814998894663063, 0.5535532934233942, 0.1249929576570672, 0.48532480991894444, 0.3911384587307051, 0.3762792506817956, 0.1234822546160278, 0.4215854205785353, 0.5406292687387089, 0.4859706009434315, 0.123855055362601, 0.5143795616659781, 0.6237899346108242, 0.5185170478308194, 0.5752111884529714, 0.566800902011283, 0.4972075508505991, 0.4677454108165018, 0.5195901436728843, 0.1633924876113091, 0.5520351202485271, 0.49944070284297637, 0.4788820797054245, 0.28498921698036017, 0.22969785541125298, 0.16671335625782635, 0.5701972939703067, 0.45482112697308064, 0.6129089428234611, 0.5907074902564944, 0.6073925560819393, 0.6409840927704913, 0.5507468518094081, 0.5515036160881457, 0.5738718840343257, 0.6134334186133665, 0.48497291684096033, 0.06124641794126107, 0.16720493553082083, 0.10664120415307876, 0.3609224600080322, 0.3500717402695108, 0.3374551425988106, 0.15795686538134923, 0.312489430229574, 0.27776098960287465, 0.48682412743852366, 0.39643427067218806, 0.40635826776662887, 0.3309448225366828, 0.432681611970551, 0.4275533769512815, 0.4194937787969636, 0.40573408098205943, 0.384182725699451, 0.7127015145255844, 0.6942192942167968, 0.6823039128582049, 0.7255047010191809, 0.7209093524394025, 0.7416583847973427, 0.6573925306454509, 0.729329908825407, 0.7272781835635522, 0.10983758034885216, 0.0815814639913347, 0.14760364609163557, 0.09949933544094858, 0.12520233526896096, 0.10382086923047829, 0.11949443539224636, 0.13550067992282433, 0.14551652419676597, 0.2104166356200391, 0.24761253808470196, 0.16736004209546773, 0.21069957148426566, 0.3178747451948474, 0.20405493302824973, 0.2016023287136537, 0.1569435079983752, 0.32233515098417287, 0.4668648776898553, 0.42923520535418547, 0.49466073637936636, 0.5330050602939242, 0.48410328718593076, 0.5084100137276557, 0.5073371715241586, 0.5173061281215685, 0.4780557830217459, 0.3169162837845394, 0.3468065173831366, 0.29849109561110176, 0.20372234445480686, 0.3129465001155106, 0.418253610420402, 0.34608326596776173, 0.35200057405278784, 0.22062289763841458, 0.21610700492297152, 0.20980598541198692, 0.19895890469831579, 0.20282820136653212, 0.21265301681019122, 0.19955491410658677, 0.2485951948230275, 0.219186851133931, 0.21177511905542656, 0.21417891275971446, 0.2290515321020663, 0.19951361848862204, 0.2192480859003212, 0.20325848224644782, 0.1985522526013549, 0.19134310349214134, 0.19128419477329295, 0.20835075318747232, 0.2011130207583356, 0.18136518698602955, 0.15480346923505584, 0.8568033281825458, 0.1659355150040135, 0.8099436876802873, 0.15918779105992675, 0.1384718004653287, 0.8377792932980035, 0.7976384823121043, 0.7490010600090697, 0.3283129367391415, 0.20777238880548665, 0.7952854859082754, 0.6776086942188557, 0.802925508818296, 0.20273872256748282, 0.7480380828768712, 0.1979086250905704, 0.21813056777725037, 0.20362282800165876, 0.17768017110198275, 0.19108221134425207, 0.2050148328403255, 0.20468033155912202, 0.1988493882729343, 0.21505535447641733, 0.08928553143436235, 0.09693808402808768, 0.08848415275924182, 0.08921400340364438, 0.09332038547768096, 0.10457266009268973, 0.09776342520115244, 0.09885487006882432, 0.07588945782540701]}, "mutation_prompt": null}
{"id": "c82f657a-76d1-4f76-99cc-d049a3f13722", "solution": "import numpy as np\n\nclass HybridAdaptiveOpt_DIA_SLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slight adjustment for better cognitive balance\n        social = 1.7  # Slight adjustment for improved social learning\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Dynamic inertia adjustment based on evaluations\n        self.inertia = max(0.2, self.inertia * (0.97 ** (self.evaluations / self.budget)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted mutation factor for greater exploration\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.3 else 0.5  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with refined update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridAdaptiveOpt_DIA_SLS", "description": "Hybrid Adaptive Optimization with Dynamic Inertia Adjustment and Stochastic Local Search.", "configspace": "", "generation": 83, "fitness": 0.26282225553112276, "feedback": "The algorithm HybridAdaptiveOpt_DIA_SLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.4913303762746626, 0.5114562533666416, 0.5229801699929082, 0.5472412291876765, 0.5817442170812188, 0.5172636778138091, 0.5486672976649356, 0.5210303098566998, 0.5335332166368316, 0.23642965959322915, 0.22909529044358146, 0.24249918313653307, 0.2189747118196569, 0.230898993841138, 0.23465957263375614, 0.22100200543147452, 0.22239062286580802, 0.2602860872716034, 0.1146182735000919, 0.12772253767420316, 0.08813042097114687, 0.23105973467378083, 0.0994129925875904, 0.10020033503149683, 0.1298940036921291, 0.11097898341991708, 0.1285825620403679, 0.08085698365483673, 0.09816754730665611, 0.09173596061554012, 0.0852296883467214, 0.0869259870499991, 0.08106758166112027, 0.07848033980466518, 0.09006117117496759, 0.0979214979568731, 0.955106485931709, 0.9874536457712318, 0.9824043488889327, 0.9820651319541448, 0.9768917981060247, 0.9788053014800411, 0.9801125618091803, 0.9757101057258871, 0.9767216597606316, 0.268289529403675, 0.05575143521847825, 0.27731788467227003, 0.29210082863300424, 0.2616917403166844, 0.2957204933694474, 0.3358011588497205, 0.294073089454552, 0.2036558459282517, 0.49716039551593827, 0.5305776300614644, 0.4972315345937033, 0.18997124551688416, 0.18527683351072888, 0.49309709983488825, 0.5100857634568452, 0.5086130148397283, 0.5257739290601653, 0.15825997999372265, 0.18640810072639502, 0.19658058554944868, 0.18198107700887745, 0.21953256386543563, 0.13478065038712006, 0.19729186162821544, 0.22812289792509732, 0.14611001667134316, 0.16280703539516783, 0.1394447591880209, 0.18906046551051814, 0.23169875758419345, 0.20536977684978197, 0.2004081431103063, 0.24022155593524241, 0.1906872744591166, 0.19219588824411993, 0.1444482016440637, 0.06668187398135761, 0.12058953972024467, 0.033209770028227115, 0.024513527790941625, 0.1152205929511001, 0.06314210469596349, 0.1301411827681812, 0.08877064061749262, 0.20282254159652502, 0.23257176565772852, 0.228336250080026, 0.14464678041327383, 0.2608096969263911, 0.21250581073063746, 0.250316628461386, 0.26968877385875867, 0.2682968489545714, 0.0979010716205041, 0.0621374383804405, 0.0698930909123956, 0.09523578275801714, 0.03406276696687671, 0.052693596725794656, 0.08544217988638647, 0.07722977913889884, 0.0735086718228366, 0.13790472460609837, 0.13814349936561865, 0.1730805487079502, 0.12397530596607631, 0.15871505721304113, 0.1753373904193577, 0.1355602715486932, 0.04849582983965606, 0.13139398822084403, 0.4361008082820026, 0.46646643652354525, 0.44036716219146765, 0.4322421310154385, 0.46276720571525376, 0.461789408625358, 0.3936481612216437, 0.42153381374019483, 0.41365754765694895, 0.09589117212825371, 0.13396466107601246, 0.10151762082435634, 0.09347663534648476, 0.09181602774986275, 0.1055237135629219, 0.10383253008501592, 0.09634870817283281, 0.11165907246506612, 0.14148574607865716, 0.24256056576991825, 0.22009013056404825, 0.1981866053448964, 0.17019101412233306, 0.1811415744598538, 0.1473618000056558, 0.2045102970535474, 0.3099500678061812, 0.3185127381094166, 0.2996366471573597, 0.29548700391363036, 0.2914202851724361, 0.2834793268205702, 0.31969861632210095, 0.321921737319837, 0.31711645214308715, 0.2783058372748636, 0.23699955229738834, 0.2171163939052544, 0.24958713938629562, 0.2238378287045425, 0.23495951805440807, 0.2111274094079184, 0.23167185111623112, 0.2487297048489383, 0.23483129806313086, 0.19900011190467548, 0.2172954313631167, 0.20692227546799946, 0.17273220109322607, 0.18441097255525551, 0.21223040030083729, 0.20726049338558605, 0.20597776210302587, 0.20201968254985347, 0.1888757300699505, 0.1876497666176502, 0.1867152240118427, 0.19727890653015778, 0.18602898995228656, 0.17755514352434676, 0.19194107014842854, 0.19281113047224052, 0.1919969381578972, 0.6482036307849737, 0.6548615797025603, 0.1528991478604277, 0.5730487158059145, 0.16545091874590634, 0.4913939676065413, 0.16920444911404176, 0.16213413363213602, 0.5877488735783656, 0.49742183526827244, 0.19315465065733406, 0.5544581782445533, 0.5854235222303446, 0.5719713044771764, 0.5181019447848945, 0.6012144017635703, 0.14345073931317764, 0.15929030899807317, 0.18781442571426965, 0.18913142181019482, 0.18591009836765138, 0.19067733870633086, 0.18979603321722216, 0.19542241248069114, 0.1761637502389165, 0.1804787688673989, 0.19069175553960527, 0.07994575920203784, 0.07605225432639895, 0.07923420041852425, 0.0742595192604718, 0.0744973795102778, 0.07742341252034379, 0.07864583760589883, 0.08296146786194492, 0.09147198594558215]}, "mutation_prompt": null}
{"id": "534f1ac2-2057-4b9a-a895-9cb3eafe0b6e", "solution": "import numpy as np\n\nclass MultiPhaseAdaptiveStrategy_DynamicHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n        self.learning_rate_decay = 0.99\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for balance between exploration and exploitation\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Updated inertia with nonlinear decay for adaptive dynamic adjustment\n        self.inertia = max(0.2, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.9)  # Adapted mutation factor for flexibility\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.2 else 0.5  # Adjusted crossover rate for diversity\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with the adaptive update strategy\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with enhanced hybrid exploration\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "MultiPhaseAdaptiveStrategy_DynamicHybrid", "description": "Multi-Phase Adaptive Strategy with Dynamic Adjustment and Hybrid Exploration for Robust Optimization.", "configspace": "", "generation": 84, "fitness": 0.3688198770548207, "feedback": "The algorithm MultiPhaseAdaptiveStrategy_DynamicHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7885357160366804, 0.7914243503991507, 0.7936821362579543, 0.7959530613094399, 0.7929358799894951, 0.8036772295793579, 0.802811015215221, 0.7923311212607284, 0.7891811670979049, 0.6156265858263943, 0.6419006781201592, 0.5932498103168653, 0.6244066032287394, 0.6277961708070069, 0.5980761076813559, 0.6405291747264334, 0.6273829255039298, 0.6167871694096573, 0.1317894338017057, 0.15433302567260054, 0.13830367426141, 0.13997563012727843, 0.1287898450330025, 0.12811674257298822, 0.16278954885864427, 0.12914183894492803, 0.14292109976419864, 0.10662988492872505, 0.09855789811910598, 0.14123474269979197, 0.11862038572728928, 0.12679522127016862, 0.11713520048378101, 0.09376719128490896, 0.12426063845634072, 0.14807359917447682, 0.9639730147666621, 0.9809548449828698, 0.9721857691993959, 0.9793264217802802, 0.9804229523436431, 0.9875788629532373, 0.981926070287885, 0.9792648954055313, 0.9769660140598649, 0.6511540003477471, 0.5829111697596087, 0.056339468424432604, 0.6157005635079575, 0.5870989578917049, 0.6034381135749343, 0.6469047171563399, 0.5895364511071028, 0.5810864351565014, 0.7796483751694907, 0.2182027613434696, 0.7597038178964698, 0.7596106553148774, 0.18271502146233665, 0.802993027833091, 0.8035320128202019, 0.7466041386145872, 0.7609369914371353, 0.46196557647446146, 0.6175322432272541, 0.3651970296063892, 0.12294025616052129, 0.415107478455071, 0.333138731095059, 0.42745942441009355, 0.4090795225478989, 0.47799034605706114, 0.39806103910398805, 0.38137013738686876, 0.27665232125178363, 0.41173362600049346, 0.590136226968245, 0.48672452160769764, 0.12374194404083172, 0.4327527572832508, 0.47292081725057433, 0.06296517561899984, 0.06446933998210647, 0.08553395757712456, 0.08549693201518205, 0.09258084937317346, 0.0061862843949674895, 0.09381643944925178, 0.0907119156872459, 0.20415606156881538, 0.2854466458975017, 0.10259207475993537, 0.17758332260956444, 0.19640335905505402, 0.5850835041852858, 0.4129530222217288, 0.6103970402983422, 0.5120012588426128, 0.41349124812279037, 0.04303960394671247, 0.05072944770338039, 0.043972865073694245, 0.2160186995734671, 0.08438909126489602, 0.08887844983770177, 0.11309426419215429, 0.27224343335866175, 0.08761217107909347, 0.22765605389452048, 0.32566133001103725, 0.18480034324892236, 9.999999999998899e-05, 0.2841895685961272, 0.25283363450837915, 0.22324615991740382, 0.11810751372237771, 0.07337477623930244, 0.6251973127570083, 0.5435677340497127, 0.6161998846698369, 0.5866238777401309, 0.710408010787233, 0.5988262422622544, 0.6768014597205338, 0.6630927535182927, 0.6296150568262353, 0.12343098667386954, 0.0781410236816229, 0.10948011331116247, 0.12381866918121764, 0.11119424512625231, 0.10318232009162909, 0.0888058658363503, 0.10618578840675907, 0.10665878386693384, 0.14635876438363649, 0.1822762504173695, 0.23806252856630195, 0.3618025568723233, 0.1917236949601765, 0.21347125071921624, 0.22667928726227315, 0.1964189259587017, 0.18065610724914127, 0.4443929390126926, 0.3811332384639634, 0.37817733903244666, 0.4132153294810855, 0.321226660226655, 0.48720479576885267, 0.4423667492260389, 0.4553699269254061, 0.5487634260946398, 0.21822443224495247, 0.31912630730784886, 0.29964000544726854, 0.3663223740338828, 0.2772903992029878, 0.22383640949359018, 0.28699858930414734, 0.44712465386624667, 0.26196882546257616, 0.2111314676129401, 0.23419296319571592, 0.2634312946785483, 0.20762475263935665, 0.2137891341700311, 0.20949449944655185, 0.24237537486085625, 0.21666876570120308, 0.22719967240955663, 0.2355850016299833, 0.19271937907603243, 0.22037487802378486, 0.2430444186638736, 0.186225976288247, 0.17997531342427775, 0.23153147482184444, 0.17241032581892324, 0.19233994810075017, 0.8575574690837221, 0.8040665172125587, 0.15413872360844616, 0.8334344083274541, 0.16729523132851332, 0.8307747908957158, 0.15042093711443072, 0.17853568989845225, 0.8483652897106282, 0.8148661688027569, 0.16287220931398128, 0.7584302675331343, 0.7986461503306561, 0.20071004973366957, 0.12003476733588925, 0.745440158084083, 0.7247145351575044, 0.1817995301411437, 0.1917257592106304, 0.25151675163984877, 0.20227069934038155, 0.20941738271418708, 0.21676932546446992, 0.23501500802665098, 0.18842428403800693, 0.21511059546079292, 0.20053491733017337, 0.10910524761241358, 0.08500124729685377, 0.10384522603040824, 0.09255222468963709, 0.08454782322757182, 0.10194117616325982, 0.08954499901500568, 0.09875189753885338, 0.09118158407523191]}, "mutation_prompt": null}
{"id": "0d9850d8-94a1-44f6-9fd9-aff8daa2faf6", "solution": "import numpy as np\n\nclass SynergisticAdaptiveOpt_DST_RITLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.7  # Adjusted for enhanced exploration\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Reflexive Inertia Tuning for adaptive control\n        self.inertia = max(0.3, self.inertia * (0.9 + 0.1 * np.cos(self.evaluations * np.pi / self.budget)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Slightly increased mutation range for diversity\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.2 else 0.5  # Adjusted crossover probability for robustness\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "SynergisticAdaptiveOpt_DST_RITLS", "description": "Synergistic Adaptive Optimization using Dual Strategies with Reflexive Inertia Tuning and Local Search", "configspace": "", "generation": 85, "fitness": 0.3056139813318459, "feedback": "The algorithm SynergisticAdaptiveOpt_DST_RITLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.22.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.629381268398737, 0.6182301355582867, 0.5898902461650208, 0.6498067976038129, 0.6135284728365186, 0.6410996246533157, 0.645796559454742, 0.6197486137192286, 0.6384076367283301, 0.3950930921843774, 0.38411765392092856, 0.38835874349247257, 0.3550524490504655, 0.3061178544590001, 0.33800711647260784, 0.36830480294186296, 0.365593789867918, 0.37208848047810583, 0.12518989999981622, 0.22254510900622881, 0.10350272350936607, 0.12610591500666868, 0.10833293344982065, 0.11526197946851335, 0.13569409469887472, 0.1250819976977533, 0.3611132775727557, 0.08633392068764201, 0.12314054284221132, 0.10809735704337942, 0.10548685159142968, 0.10849335613832578, 0.11192876827101172, 0.11581125395296843, 0.08512169546305648, 0.08630107802157982, 0.964115927281026, 0.9808816448850324, 0.9723884941213421, 0.9795399107036478, 0.9814257447972148, 0.9876179431602612, 0.9825329808387336, 0.9792689156418848, 0.9812835245111217, 0.3962440346319056, 0.38776812108416947, 0.3870583238897961, 0.3831460341472964, 0.4317668661649633, 0.40118471235115416, 0.3946452964682946, 0.3915703243635261, 0.4154168328504576, 0.5685002089749529, 0.6197841767845094, 0.6245402001511661, 0.1829544227478157, 0.18338282356535007, 0.6426101872153485, 0.6476368810439704, 0.6156616042599744, 0.6570473069625185, 0.26395467464674194, 0.2633557632294974, 0.2095449926062134, 0.18091228105077117, 0.2832146997320638, 0.09636920123966031, 0.2874807743351242, 0.28952851116956524, 0.10443087475217239, 0.21931509843523844, 0.019709771780705543, 0.2911394471106413, 0.28618774325807017, 0.3620499482378253, 0.2606949140216933, 0.32156622094553244, 0.0967792541417446, 0.30199636961270393, 0.11247226773307395, 0.10437833997419221, 0.3059356430063084, 0.10387469315155395, 9.999999999998899e-05, 0.3024681778508216, 0.16452659370936784, 0.14788834661305228, 0.2693806912621285, 0.36330646174005343, 0.33827375024444517, 0.36768738408487567, 0.3041983191305683, 0.21805054273668434, 0.3173965807503094, 0.34057420137548466, 0.36070866867037243, 0.27484565746194867, 0.04460232876972514, 0.05490587957939219, 0.029430079564284117, 0.046791692456923606, 0.060240624927909825, 0.08263199734098958, 0.18461583971032414, 0.1337237815987713, 0.08986857918463009, 0.21524037614733338, 0.1784787016526863, 0.1542602922257571, 0.19653123121914384, 0.27223175911118147, 0.2244188282397136, 0.21673707997963287, 0.20150891945991778, 0.06435901876321226, 0.5465502388980263, 0.5313827682062149, 0.5355825914885766, 0.5433434123950478, 0.5367572758509136, 0.5400403341467448, 0.5396925156900585, 0.527146734617933, 0.5455548945154394, 0.11417748316364629, 0.10449872765346868, 0.104078376162831, 0.10330041506210108, 0.11375358878121189, 0.1221040212507587, 0.11244756166355252, 0.11364750698455195, 0.11639477974554047, 0.184634101135963, 0.20179888938549384, 0.17590604434929302, 0.17980643071236901, 0.2449390511659142, 0.1831375443390183, 0.22173635850020723, 0.19143688922422997, 0.1568992410070168, 0.3567573113543864, 0.3055932394476002, 0.3702265556089066, 0.35718236583018603, 0.3752265026533006, 0.3525172364402174, 0.3171035710339405, 0.3581272095832717, 0.33686626945810727, 0.24632302837807007, 0.2595371718316096, 0.28879284512743275, 0.2376037318790618, 0.2733779247356317, 0.21387384978642954, 0.31938947894030245, 0.30851781822903745, 0.23574651279269843, 0.21596629491294583, 0.2247034134576379, 0.21020156459146777, 0.21067152960043278, 0.17796500149547068, 0.17503570120694134, 0.1865675043363645, 0.2004752406699285, 0.20238678884846628, 0.1923331395474156, 0.20254220015695923, 0.20628723504951008, 0.20704775258313712, 0.20613314247174352, 0.17227875701531992, 0.189427093153818, 0.190234909255791, 0.18172165016293085, 0.7003922462101194, 0.19569853173112373, 0.15409475082462998, 0.6944906148141112, 0.1652836004563042, 0.6365121554337095, 0.18345700861512015, 0.172953339443504, 0.6646254598209167, 0.6511803664004571, 0.2009561245526399, 0.6342747814347224, 0.19685403580949812, 0.5758034088740754, 0.12218449882646287, 0.700399604366287, 0.6520953025289482, 0.1558866245273084, 0.18047407074987476, 0.17834495151924168, 0.19498697995452252, 0.2015158788321818, 0.1899010970164512, 0.22501281767835912, 0.17044749451993024, 0.19297042533614617, 0.19772990425296766, 0.0876028388092771, 0.07275454838425577, 0.07803874381007225, 0.09683189855912855, 0.08279117325949592, 0.07420872627001684, 0.08946230036888392, 0.09074830631554454, 0.09915263391253393]}, "mutation_prompt": null}
{"id": "b279f900-4ceb-44fc-b2be-ec211fec7798", "solution": "import numpy as np\n\nclass EnhancedStochasticDualStrategyOpt_CI_ACR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slight adjustment for smoother convergence\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Compressing inertia based on evaluations ratio\n        self.inertia = max(0.2, self.inertia * (1 - self.evaluations / self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.7)  # Fine-tuned mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        # Adaptive crossover rate based on diversity\n        diversity = np.std(self.particles, axis=0).mean()\n        cross_prob = 0.7 + 0.2 * (1 - diversity / (self.upper_bound - self.lower_bound))\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedStochasticDualStrategyOpt_CI_ACR", "description": "Enhanced Stochastic Dual-Strategy Optimization with Compressing Inertia and Adaptive Crossover Rates.", "configspace": "", "generation": 86, "fitness": 0.41633893903230623, "feedback": "The algorithm EnhancedStochasticDualStrategyOpt_CI_ACR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.8088209409310824, 0.7817783137214926, 0.782246385381721, 0.8136862249025646, 0.8103482892664723, 0.8226075503480708, 0.7871062634582082, 0.8189361923524476, 0.7866103394218118, 0.6440274859757817, 0.5278865717144992, 0.6553781337074833, 0.6286303270282922, 0.6596576414944709, 0.639434325598989, 0.6263408686212542, 0.645510529871336, 0.5582025417298095, 0.1191210244194656, 0.1046636358413301, 0.10515527246899059, 0.15086591879485844, 0.12787049534360517, 0.14803813489543172, 0.13774957280078393, 0.08898811308692511, 0.1064372230496512, 0.13419311255952837, 0.09768521541015274, 0.11033833426893669, 0.11212032645408876, 0.1267724796657339, 0.10820956965850159, 0.14020253318212395, 0.11944298224476513, 0.12853693233124253, 0.9554956031117224, 0.979290046536974, 0.9814431626625285, 0.9476013297544178, 0.9724856311006752, 0.9718722569507735, 0.9810494646569092, 0.9802783825354909, 0.9781704298988557, 0.6121596040835017, 0.5208025661067299, 0.6477907904838174, 0.6246509211144509, 0.6381447923166383, 0.5732434759078786, 0.6341532012230308, 0.6440205018794989, 0.08737006790858137, 0.7839582010834174, 0.8174344032930472, 0.8102288138350026, 0.779994278927382, 0.770860180081121, 0.7515802067406685, 0.7896642254841149, 0.18938745791812017, 0.8101822352476151, 0.6642279093115273, 0.3415642791640109, 0.11406431055323174, 0.1237836206741012, 0.11939606013836834, 0.5402582034737501, 0.6171633181773741, 0.5775771883145662, 0.45310557239125193, 0.566086734244567, 0.5584967106932531, 0.6787787124738238, 0.6014134521742804, 0.5597346774229983, 0.4537787612111386, 0.45112672948872257, 0.4472639149123474, 0.1274476426300627, 0.20902256259782503, 0.36661658799097807, 0.4743695466083302, 0.617149300955812, 0.3133180538355088, 0.5715189728699674, 0.44402696610641335, 0.44502132302320974, 0.4713012987126366, 0.6512358967540024, 0.6653969434592711, 0.6613852545479272, 0.6007998558476539, 0.5968193756742237, 0.5957405484267152, 0.6422607707265051, 0.6063215080623767, 0.5904053278317678, 0.057619708046790064, 0.1513611739095777, 0.18406921734773773, 0.5320751961330331, 0.3242237515172677, 0.18741507177981498, 0.08880808104595583, 0.1302606977208718, 0.07338737643502646, 0.4864971752972388, 0.36939618500552673, 0.4925388201490214, 0.32940415829136194, 0.26091258582783317, 0.49796287530443095, 0.48303551761187347, 0.5169981807460604, 0.39432299714473307, 0.7117661984529076, 0.7448703582690457, 0.7416455702190268, 0.7765506405248895, 0.7476104637152508, 0.6888914940767982, 0.7359764767218591, 0.6965437631039946, 0.7533983745355941, 0.1103113558148694, 0.11133104878136857, 0.09487569825505904, 0.14615058520912994, 0.17202371195391042, 0.14418811384816677, 0.1079024911666, 0.1472793868183655, 0.1311400427290782, 0.310765471396347, 0.1737442883483007, 0.2821931194526224, 0.39554542790214153, 0.1524405129876032, 0.23819506452622352, 0.22068789403463374, 0.15984765868739792, 0.1747364817623962, 0.4833655353759595, 0.4206356617858914, 0.5066553939874163, 0.5118878267684963, 0.47921353378627685, 0.3520652206222905, 0.6092372156078794, 0.31708216330972916, 0.475089023634627, 0.23403983471693768, 0.23344089767595522, 0.23406429050941602, 0.2538134652877977, 0.20018087557066344, 0.2775610426976357, 0.27130855745199345, 0.5163134052164853, 0.4266093811198314, 0.20097651304745234, 0.27870079470070386, 0.25811176073282827, 0.2078421670443581, 0.20612386595346233, 0.21174438863944178, 0.21905925515858327, 0.20239576218306587, 0.20972346915393858, 0.1787734581952276, 0.1893657611251539, 0.21564898703902313, 0.20988609739343822, 0.1929440967794117, 0.180451722954165, 0.20418022266869296, 0.5744501006396883, 0.18152460998326836, 0.17818146839854254, 0.16292725366751581, 0.15428875003489317, 0.8451124613649811, 0.12260333827533754, 0.8351064120313236, 0.15779808682518293, 0.19322793232031532, 0.8504448608359575, 0.728072750514333, 0.16797254043487841, 0.8279942404785335, 0.7512351039298681, 0.19952654985730278, 0.8346312541213388, 0.7955900306145087, 0.146524745948175, 0.19985059228881896, 0.20716422986023075, 0.2241730629529335, 0.19243533028014892, 0.18108525704725376, 0.24625850347639966, 0.19358180854530294, 0.21344726715732898, 0.20257526452884156, 0.24269563231344482, 0.09299032978538957, 0.08573990250893238, 0.09586504114068162, 0.08467710114465754, 0.09553116211116575, 0.08868819072358436, 0.08512007496921103, 0.09095992712818646, 0.08487762791237163]}, "mutation_prompt": null}
{"id": "24ac48b1-e3bd-42e8-b776-f975768ceaa4", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_ACME_CX:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for better balance\n        social = 2.0\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Refined inertia to improve dynamic behavior\n        self.inertia = max(0.4, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def acme_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adaptive mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def enhanced_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.1 else 0.5  # Enhanced dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with refined update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ACME phase with improved mechanics\n            for i in range(self.pop_size):\n                mutant = self.acme_mutation(i)\n                trial = self.enhanced_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_ACME_CX", "description": "Stochastic Dual-Strategy Optimization with Adaptive Cluster Mutation and Enhanced Crossover for Enhanced Exploration and Exploitation.", "configspace": "", "generation": 87, "fitness": 0.3559679484587566, "feedback": "The algorithm StochasticDualStrategyOpt_ACME_CX got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.24.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7433220893814021, 0.7119063041818461, 0.6916552629826802, 0.7482604427746555, 0.7225376230209071, 0.7324967793732391, 0.7270607856895434, 0.7333096385942639, 0.7605561180081806, 0.46519864131271116, 0.4399820032340743, 0.4387650106047075, 0.46043341490278755, 0.4627502258267895, 0.4740407278671239, 0.4152404760628957, 0.476859957094518, 0.43246121728180786, 0.12093962879959108, 0.13561277046833053, 0.1516435706939152, 0.1281338485288841, 0.15848628097309392, 0.13651368452058465, 0.14771795549491962, 0.1514955773657637, 0.12532375738474844, 0.11714351922038879, 0.12410356469356543, 0.13567728023833914, 0.1149619231018354, 0.09523926086412737, 0.1329667625592691, 0.12320903380333859, 0.13205505787671823, 0.11131296134504376, 0.9639106219616187, 0.9809131743290589, 0.9794711870873705, 0.9775877773744703, 0.9813754804526617, 0.9896492130450529, 0.9876656527709132, 0.9729539984434509, 0.9775015841669339, 0.5005109179041491, 0.47437227372978774, 0.38530512532774697, 0.515270961477438, 0.4946630700598461, 0.5185539533162249, 0.5104656323292287, 0.48943136586115443, 0.5105415001087117, 0.6948734013546127, 0.7393580590708837, 0.2306046801340974, 0.7997607650156364, 0.1935929445231246, 0.6950667341719001, 0.7817481236664019, 0.7707333361631001, 0.7007622547255078, 0.43316320595882174, 0.38046840929869485, 0.38765801442368164, 0.42990310051421077, 0.5249557889488609, 0.46527013564816144, 0.4616070696578559, 0.4743952966427415, 0.43856282465136553, 0.4353939760745753, 0.43853854800763903, 0.10706501298391702, 0.46751109913507427, 0.5032578393831396, 0.5208931130099057, 0.28896777506185056, 0.38801525986217655, 0.12267140962992129, 0.20894656899283104, 0.26989131606204164, 0.2764361052877933, 0.45970879395806163, 0.00038057294762217087, 0.1925566538672937, 0.06410501394187507, 0.27461423736163537, 0.07085086520978368, 0.4360392526387039, 0.3668045612614371, 0.396715197875499, 0.4786797936833195, 0.40350233686238035, 0.38966804731226246, 0.48497372578642983, 0.4377018310991222, 0.28857392646358093, 0.18830976451473358, 0.07196165513296182, 0.028405054078418646, 0.2768290875132632, 0.10029517544231858, 0.07380009842865087, 0.21611413822186487, 0.17770133550087353, 0.16393448703570934, 0.2724396767495063, 0.3250383779112873, 0.2764590949924588, 0.27725120859688424, 0.31107391383308236, 0.3159495311994007, 0.07382258156652843, 0.32854005502577255, 0.07159524767540937, 0.6294147551693059, 0.6044970962516825, 0.6347702268501039, 0.6416915431193624, 0.6519328236490683, 0.6388261393870409, 0.5883102973380316, 0.6122407622338754, 0.6215741069370542, 0.10508835179164466, 0.14160716427697118, 0.35336595217589206, 0.08941239340066243, 0.11898860621748986, 0.1616194391845469, 0.1317064762522303, 0.11177209379235065, 0.09458151036967155, 0.19121060075303875, 0.15603583532491228, 0.21526192332468985, 0.16153284269413548, 0.26229278321353244, 0.2944080227771523, 0.1967802641184181, 0.1923456908036807, 0.2293851519595752, 0.3607136492513241, 0.32436534182756116, 0.48203226235651386, 0.42764275165481735, 0.4324152191535775, 0.41226692332700443, 0.39792919817714467, 0.45047709446979567, 0.3724995651305689, 0.3092029937244629, 0.24691403138781498, 0.32544947241022715, 0.24197895981891937, 0.3338894388407121, 0.2979998554636678, 0.2603663166989889, 0.3764604271013059, 0.24726062256104853, 0.19804336609858497, 0.19870390024126217, 0.21269495781192915, 0.2841220543359576, 0.23975798993985364, 0.19434529743630868, 0.22714535080093623, 0.21631416895855726, 0.2022500784368606, 0.18538400402726196, 0.22680656196782878, 0.21625747161862297, 0.22802775426027078, 0.22154485457375306, 0.19108245567824245, 0.20792529430444817, 0.22818502345257852, 0.22811466753115395, 0.17311092933209526, 0.17884425124796322, 0.1541054007516396, 0.8410010840196078, 0.16622314447702358, 0.7712482574004319, 0.15752075593062254, 0.6977257858358461, 0.8093351907305736, 0.7385912267054959, 0.6401051579579489, 0.15923229775203507, 0.20356573839977488, 0.1640382548629028, 0.12589446681002592, 0.20571925454660067, 0.7809597139876291, 0.15896993272450544, 0.18947120152872454, 0.21621283339645914, 0.1987092147344942, 0.19402157642026563, 0.18278695322468397, 0.20930653853185377, 0.2187801646557389, 0.19973862979046142, 0.209106248197383, 0.0779710366268932, 0.08312335173440388, 0.08164113243127502, 0.08767114599768644, 0.09055525883056148, 0.10288194930204586, 0.09307524269169554, 0.09072910023015412, 0.0858981094768807]}, "mutation_prompt": null}
{"id": "93d7ea14-e08b-4b2e-9505-4654a9a5f057", "solution": "import numpy as np\n\nclass AdaptiveMultiPhaseOpt_DReEx:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.7  # Adjusted for enhanced cognitive exploration\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adjusted inertia decay for controlled exploration\n        self.inertia = max(0.4, self.inertia * np.exp(-self.evaluations/(2*self.budget)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Slightly increased range for mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.1 else 0.5  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with adaptive update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with dynamic mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveMultiPhaseOpt_DReEx", "description": "Adaptive Multi-Phase Optimization with Dynamic Learning and Reinforced Exploration.", "configspace": "", "generation": 88, "fitness": 0.3635355965406089, "feedback": "The algorithm AdaptiveMultiPhaseOpt_DReEx got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.24.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7212413512927568, 0.6925264994917464, 0.6909640147948224, 0.707560549418899, 0.736199917950696, 0.7340536588771219, 0.7369440475162883, 0.7320305629509435, 0.7278782666758468, 0.46582254472970397, 0.46810442427960475, 0.44184974890152184, 0.4837912238784384, 0.49242873039080326, 0.4719446988484388, 0.5067347011096963, 0.45275265812784793, 0.45007133327764504, 0.12467752775322571, 0.13244259901502375, 0.11244180468944365, 0.13822772293967778, 0.38880232698768713, 0.12093050291988006, 0.1342986797500092, 0.08970560175503417, 0.09867855270197601, 0.13033173678139431, 0.11205085846130947, 0.11593943762871672, 0.10962773933830572, 0.1330241424433516, 0.1295970703523346, 0.29166973651521744, 0.1480764022508123, 0.13682402214745693, 0.9608114910178471, 0.9808195499015435, 0.9725562950702085, 0.9824454807249067, 0.9782340243212756, 0.9874305387685789, 0.988534570729571, 0.9792074265553292, 0.9812276656151315, 0.5109203182033673, 0.49851292813567794, 0.48305361914136835, 0.4782576887303982, 0.47863141545851573, 0.49900477364395623, 0.5198385548051345, 0.46723393420399917, 0.4358147492954131, 0.6850309451157756, 0.7049839234203155, 0.21734413711228684, 0.7435172421775893, 0.19493283672840211, 0.19793206942222674, 0.7172664346779003, 0.7852145529950272, 0.7013538377342629, 0.36356801201677, 0.3023915315111064, 0.4227927126756432, 0.12103413522622908, 0.3442638718876466, 0.42602737181561323, 0.349993260963941, 0.36905305797218957, 0.3589766675542323, 0.11768592870387984, 0.39361430043082957, 0.3809267915327673, 0.3660271342811864, 0.3944319025312084, 0.35389811300939644, 0.3524420193359752, 0.2687479898271402, 0.3234433524271335, 0.417269994480981, 0.13674545465016685, 0.3276657222872609, 0.38968108424235515, 0.01525004630198834, 0.2233144856244592, 0.2936124053549408, 0.29854926470767096, 0.30613599848537887, 0.4222841366230683, 0.49271657607526376, 0.44553794202652985, 0.37897229559618195, 0.425591438327516, 0.39443245790957704, 0.48847601427520637, 0.4254431710591824, 0.4411299033705701, 0.0422142601093386, 0.06380693880854893, 0.06303199136346871, 0.18418191257782568, 0.16906993556634553, 0.15267586753442663, 0.17239552803758218, 0.09444340398146778, 0.14848724331154883, 0.3004218609399931, 0.26812537558610006, 0.29850348962241435, 0.28966077229503695, 0.28787878029639447, 0.2855974051874107, 0.32946383164506843, 0.23507561695302515, 0.24521012932510067, 0.6075881312965768, 0.6128599789132851, 0.5844574142518294, 0.6318456875632836, 0.6488817867738439, 0.6447350820352722, 0.6022800704715718, 0.5988814330939789, 0.6042822542057769, 0.10811976315878924, 0.1256094647954885, 0.10619498786871717, 0.11931057020614866, 0.1061875913677377, 0.12117599435290571, 0.11870038969754237, 0.11785981513555965, 0.10904711534726341, 0.14577482615362225, 0.19534083584481965, 0.23857322175814277, 0.23607061238119764, 0.21210696224810976, 0.2961400269703215, 0.20237765296269372, 0.21479223178618168, 0.24140841514559408, 0.4446393429058155, 0.431419022971001, 0.3857326144508395, 0.38526771311183783, 0.45364538582720093, 0.4428932000819451, 0.4401567833824245, 0.4164322339083848, 0.4351063475652337, 0.3369373785647949, 0.22030466429473705, 0.27052825928615554, 0.32028380449336724, 0.2179906575667585, 0.3492346934764201, 0.25389919081983825, 0.3297499290228305, 0.35602470428733013, 0.21068755316148557, 0.20104286526824322, 0.22404607291805345, 0.2605254657176689, 0.19304820290469238, 0.22456342150783737, 0.21469779643720777, 0.2289849491312932, 0.21349018154206123, 0.21944647841865295, 0.20422136167013205, 0.22869455826895013, 0.22621252849200635, 0.18412271842823535, 0.1937182406133956, 0.5292342822105126, 0.18803564709757237, 0.22351764367903537, 0.7218715160094553, 0.19969920056289137, 0.15445220837879403, 0.840079964849188, 0.16621310042238924, 0.7661046710839745, 0.782070430804584, 0.6831626427565214, 0.824102726723495, 0.679727320159641, 0.10987986086114576, 0.7756504873545996, 0.20208859140109825, 0.1590462416294406, 0.7054780213421954, 0.6843852237189836, 0.2021229727303372, 0.6741219354319095, 0.18345119853464076, 0.2004189022689422, 0.19432102436358922, 0.2237855021175842, 0.19630835095151355, 0.18098652282218797, 0.1771074022229292, 0.19763262201075493, 0.19616386376424788, 0.08767985580921123, 0.09637945141330073, 0.09033540949809882, 0.07311166436376515, 0.09249778810954357, 0.09008608148497566, 0.08546203404626429, 0.08732636010173878, 0.07851220450541951]}, "mutation_prompt": null}
{"id": "4338f5ca-a2f8-41b5-9262-190a598036fb", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for better convergence\n        social = 2.0  # Increased for exploration balance\n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Enhanced nonlinear inertia decay for adaptive behavior\n        self.inertia = max(0.3, self.inertia * np.exp(-2 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Dynamic mutation factor for stability\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.7 if np.random.rand() > 0.3 else 0.8  # Adjusted crossover probability\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with dynamic parameter tuning\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with enhanced local exploration\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Dynamic Parameter Tuning and Enhanced Local Exploration.", "configspace": "", "generation": 89, "fitness": 0.3603186955991453, "feedback": "The algorithm StochasticDualStrategyOpt_SAM_RLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.8147389960693254, 0.7875887722327071, 0.769543349103118, 0.8096409189153373, 0.7978972688996244, 0.7948796012617001, 0.7890077081987105, 0.7872809975845703, 0.7777526739603888, 0.5436590232263869, 0.5738570343599064, 0.38145946359441707, 0.5852746836829819, 0.5929057684264605, 0.6008859720271416, 0.5496796849638328, 0.5661772546511576, 0.5531236375890992, 0.12088432725067633, 0.1147534602267184, 0.3622928006265477, 0.10930741772908859, 0.16338822879453108, 0.12270561955584436, 0.1270001912839025, 0.13943296799149685, 0.4327378524664759, 0.12687672763377889, 0.12632668191758534, 0.13671527697205343, 0.5081558595795241, 0.09890940585163077, 0.12376067656055034, 0.12584297740034522, 0.10294263957037397, 0.11826275275031661, 0.9739149990761597, 0.9810117805088764, 0.9899787092634714, 0.9895920705492551, 0.9786804803753091, 0.9896128346226885, 0.9822652921051358, 0.980638023759856, 0.981289727895002, 0.6300160166735771, 0.6103632251521423, 0.524483805995698, 0.630474513316982, 0.5506981528656458, 0.5842702876973268, 0.5676870336893591, 0.08537119745679611, 0.5702924014632208, 0.7948087274654818, 0.6994233238531276, 0.81942842264715, 0.18962275918734217, 0.19154472968102487, 0.7152012347548218, 0.7575369168947665, 0.7704658064991595, 0.1651637855430066, 0.45978491091640605, 0.4048350059997894, 0.11822100367781063, 0.38563525938487375, 0.11944627111189654, 0.6239776317606065, 0.46801680245232113, 0.5603437813438377, 0.5115174027349195, 0.5071907727712861, 0.5411080041121485, 0.41146836053015035, 0.515180521507702, 0.37041772702082065, 0.5032485227455907, 0.5300230581278463, 0.4114236917585776, 0.12420366689070794, 0.0654131559729525, 0.06104548681376143, 0.055373604489258654, 0.020017925618852184, 9.999999999998899e-05, 0.06846054707216465, 0.0862005666239527, 0.01084724149914218, 0.17116467258078427, 0.3727473863038263, 0.46478406812866246, 0.22732432431613603, 0.37400373438289825, 0.14160538304009807, 0.28583781009625886, 0.5334496077630261, 0.4843877574255183, 0.030274157498190513, 0.24118864887014468, 0.2636989349205191, 0.044285981533206176, 0.10956939937979893, 0.08175399892308155, 0.20705653594526152, 0.22708784091154044, 0.07373907434566318, 0.09837728597118223, 0.039855332382433106, 0.34047772501822615, 0.23908323024062972, 0.2207550562415046, 0.3007550605591087, 0.31350830821725806, 0.31623421244392225, 0.12095519613053707, 0.07802956969210917, 0.6595826764140991, 0.6831398239376082, 0.6271237698476815, 0.6276025877272079, 0.7137994352045385, 0.6158203375156268, 0.6656602119769216, 0.6958674903912193, 0.7177100674343998, 0.12364854573571193, 0.1052627770222716, 0.0830461037269713, 0.13563893987787445, 0.12949763282442872, 0.14633673449632367, 0.08806205284826951, 0.10439449065448514, 0.10796229240189947, 0.332138776962944, 0.21520369879400536, 0.21260911544406513, 0.5639976655788235, 0.18636607000230565, 0.2353957031706606, 0.25707649126893994, 0.19470650137645162, 0.25870191313696544, 0.4832925705132246, 0.45069282526416365, 0.3708337815950884, 0.42978550294018525, 0.4411030805488404, 0.29363603892650547, 0.2860563793025669, 0.49557309640371117, 0.2766778350661342, 0.22967175879598412, 0.20283703381294405, 0.27543101157323413, 0.1815965749009425, 0.31133090983876277, 0.3948386792783791, 0.26134137600546636, 0.3354579844636765, 0.26362037075347644, 0.21115209656941392, 0.20283833084519964, 0.21615898928718302, 0.21163113175778991, 0.19241599064316484, 0.18965432375000713, 0.2333921171413823, 0.19642383221917903, 0.23491641716016987, 0.18572299976214146, 0.23536465827714603, 0.1924544959246578, 0.1975302326770556, 0.5920987234466539, 0.19746141459562894, 0.194173184536647, 0.20777850359352246, 0.19539315745519437, 0.8150036503635771, 0.1590364243518657, 0.1542147466078595, 0.8430173828050028, 0.16597338868189493, 0.1514297306193041, 0.15093167084427062, 0.18885003319958182, 0.818878275279175, 0.8598672847351887, 0.20125787467503786, 0.16169028573026845, 0.8301338727265819, 0.6077366638007118, 0.16200868834860516, 0.7665226672570965, 0.1519481832006201, 0.16309691568075035, 0.18898822890520062, 0.18732798425576302, 0.22157052388390486, 0.18513390654888195, 0.20447099671178515, 0.20189277001388461, 0.21327273138855773, 0.23498135342892246, 0.19655207088060211, 0.08341129321205865, 0.09453117199611027, 0.09294527769816319, 0.07725546591969157, 0.10437412923234546, 0.09634942075242947, 0.0872292606162346, 0.08197661296312475, 0.09331184860261288]}, "mutation_prompt": null}
{"id": "c251fd7b-dd4b-49a3-904f-526b01c21905", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategySwarmOpt_DIS_FC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slight adjustment for better exploratory behavior\n        social = 1.7\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Dynamic inertia scaled by function evaluations for improved convergence\n        self.inertia = max(0.3, 0.9 - (0.6 * self.evaluations/self.budget))\n\n    def fuzzy_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted mutation factor for diversity\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def fuzzy_crossover(self, parent, mutant):\n        cross_prob = 0.85  # Static crossover rate for simplicity\n        blend_rate = np.random.rand(self.dim) * (0.5 if np.random.rand() > 0.5 else 0.3)  # Blending for diversity\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, blend_rate * mutant + (1 - blend_rate) * parent, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with adaptive inertia\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # Fuzzy mutation phase for diverse exploration\n            for i in range(self.pop_size):\n                mutant = self.fuzzy_mutation(i)\n                trial = self.fuzzy_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveMultiStrategySwarmOpt_DIS_FC", "description": "Adaptive Multi-Strategy Swarm Optimization with Dynamic Inertia and Fuzzy Crossover.", "configspace": "", "generation": 90, "fitness": 0.22571724403522564, "feedback": "The algorithm AdaptiveMultiStrategySwarmOpt_DIS_FC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.5847329582619103, 0.5055021796371424, 0.5876378269059053, 0.5688969191255878, 0.5929506204116056, 0.5318509425926404, 0.5975887395120718, 0.5604906407046397, 0.6009389554619947, 0.08723270389284665, 0.025204352057198398, 0.15892088852261854, 0.015409227827212768, 0.14432563971329726, 0.14746721745689106, 0.017985580722150507, 0.1300620603780691, 0.11525318947887297, 0.10189252268053628, 0.11438782118750823, 0.11700311237365435, 0.1279159769254169, 0.023749089007866542, 0.08413589048345715, 0.13052041188696095, 0.08516216640630558, 0.23720843811952852, 0.06000675095834218, 0.0866713032186015, 0.10321672202433396, 0.10055051633158052, 0.0856536649882006, 0.10105056676831026, 0.13468094325541247, 0.10654526592249969, 0.0780035099071813, 0.9637726531829511, 0.9708076238224933, 0.9781639277640417, 0.9697679157032362, 0.09840224711805534, 0.962065444542993, 0.9812537946671149, 0.9787201882179245, 0.9811701217621626, 0.3464156078934215, 0.05426423299962857, 0.34183477393709094, 0.35716544887174007, 0.30477945803466, 0.3051701700645747, 0.3199404072830031, 0.04946509276931377, 9.999999999998899e-05, 0.21033155304903906, 0.49105254483352945, 0.5760129742613032, 0.11505884250330345, 0.18536239832254764, 0.18488175344523627, 0.12204319403550346, 0.4065050772112905, 0.17207885736648, 0.10009267693787183, 0.11074890875524723, 0.07238135598419282, 0.11893522946367963, 0.09902566679809532, 0.11317188224634611, 0.1446823033936282, 0.15883809083834144, 0.21718783707699718, 0.22000141209321677, 0.21743947538100805, 0.165803480093776, 0.12176033911128525, 0.2477183095126283, 0.10894503813869216, 0.21903651329974705, 0.15182592635381753, 0.13046594997699779, 0.0392253665029868, 0.048772796596909807, 0.049519746270688114, 0.12045058481673188, 0.020294208640956102, 0.023701022825476148, 0.0029090644759643958, 0.058627229625186406, 0.07074818678168393, 0.11438932766961551, 0.13332074361563895, 0.01728854724422413, 0.009231150595240267, 0.06511837629445838, 0.15670021664807066, 0.13980285800735837, 0.09049574831667573, 0.06704453001618571, 9.999999999998899e-05, 0.014827932874029837, 0.07450898937240358, 0.029582889035830173, 0.040059993915865344, 0.052158580209967664, 0.04609609259108205, 0.03169681605453656, 0.09334677529296664, 0.06411848951375632, 0.03675053554548435, 0.06496982743257518, 9.999999999998899e-05, 0.13768993561676035, 0.0881604729704939, 0.06323873851114203, 0.040468366235760556, 0.0805358206788016, 0.44489688984574904, 0.4896549138020658, 0.4288519128691184, 0.4634996936480934, 0.425175980576443, 0.4321476304648769, 0.4290556250942127, 0.43252806685780243, 0.4889106962193063, 0.06794803108265113, 0.11811419627425801, 0.059662785076680436, 0.1283418573440811, 0.12562109119053, 0.07608752287641751, 0.11394803605588877, 0.10398015091993129, 0.11919119656802435, 0.18658143495182522, 0.1985614504977199, 0.15023616638007298, 0.15984250400914812, 0.18532979729644772, 0.16828574543049601, 0.22888599460032877, 0.2925305118928103, 0.24947177996580405, 0.2663462130751565, 0.22027755527287118, 0.3153803974969389, 0.32765056841900275, 0.222196919933354, 0.2795413382812437, 0.25347864820985644, 0.28097443627193774, 0.24121201240051027, 0.22329394663694302, 0.22607502075647612, 0.19274525044675106, 0.19836457517406392, 0.27367744168388586, 0.21867095944308912, 0.23124007848498263, 0.22021236591408422, 0.20451578065273268, 0.20444745899456762, 0.19837035874738795, 0.22678849655449673, 0.18982011895348627, 0.20212144392074582, 0.20978665266067642, 0.20475160654728375, 0.20186570754185373, 0.21410267530970628, 0.21738274525227963, 0.19966704788804246, 0.17324707346739343, 0.19547730946802244, 0.18229547097132037, 0.1778723214539052, 0.3946561851070103, 0.21249519468328204, 0.19282003480822962, 0.17119728561073355, 0.5329767893652042, 0.15388323094673217, 0.6784819224176564, 0.12209610545313643, 0.14937548648502086, 0.1553472687269879, 0.14732748843816712, 0.6222364122846606, 0.15020272288531256, 0.5457827940404057, 0.5517608989075027, 0.5752077665676651, 0.17618534772101224, 0.5635529041528773, 0.5546662605236682, 0.08062092914596819, 0.14686447669111913, 0.18632636377404999, 0.21987546788543155, 0.21656826920118932, 0.20765221847837312, 0.19993332526691643, 0.18642986093089087, 0.18752055575770699, 0.19438193250611424, 0.18249947875416284, 0.07924262830742168, 0.085891418576576, 0.06933190947757206, 0.07690850477370548, 0.08212525680076666, 0.08208964388660656, 0.07958567829273488, 0.11821435548686099, 0.07991670539140583]}, "mutation_prompt": null}
{"id": "011ba18b-1809-433c-a3c0-ce851f93962e", "solution": "import numpy as np\n\nclass AdaptiveDualStrategyOpt_NIDC_ES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay for balancing exploration and exploitation\n        self.inertia = max(0.3, self.inertia * np.exp(-1.0 * (self.evaluations/self.budget)**1.5))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Adjusted mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.3 else 0.7  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveDualStrategyOpt_NIDC_ES", "description": "Adaptive Dual-Strategy Optimization with Nonlinear Inertia and Dynamic Crossover for Efficient Search.", "configspace": "", "generation": 91, "fitness": 0.37544534778934785, "feedback": "The algorithm AdaptiveDualStrategyOpt_NIDC_ES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7310008060565891, 0.7213878784101371, 0.7243010362572023, 0.7308761924580006, 0.7478811252483225, 0.7363923940749242, 0.7521252827554981, 0.7522672485965253, 0.7189349713376141, 0.5216162027347886, 0.5239188957068605, 0.5387329633918966, 0.5247590802737259, 0.5390790498425169, 0.5065109119941417, 0.5288785665324977, 0.49180947654490625, 0.5215094966397782, 0.10598344681246796, 0.13489674068486024, 0.13888313526730145, 0.11315115525562014, 0.13332238883366498, 0.12683274940415357, 0.12718500153618806, 0.11366821249416947, 0.12485950754900355, 0.09331275586888699, 0.11400872067765178, 0.12231593155458598, 0.12335291090647593, 0.122686145838793, 0.09141227061981538, 0.12539680176510515, 0.15521720070245826, 0.12392402951770787, 0.9706182046370214, 0.9814490865953245, 0.9806063893287685, 0.9819834144815712, 0.9714229379116183, 0.9826907651214332, 0.9822321273811404, 0.9719589816376566, 0.9812419891700171, 0.5710959212864801, 0.5742778015696514, 0.552595770059607, 0.5274288126053136, 0.5258876155326098, 0.468134780383315, 0.5064482958768022, 0.5360713536763064, 0.49595792888905776, 0.7489635908294072, 0.730399018681084, 0.7283872235664477, 0.6703923375303427, 0.7591983461529601, 0.19878554005767624, 0.7095907040979176, 0.7391896120774696, 0.7562763730730084, 0.4624331286593727, 0.4387468092294492, 0.3376923372012458, 0.12067953571415091, 0.38178475028949244, 0.11446654426692893, 0.4203327430787379, 0.4347091709294011, 0.5014779221221259, 0.11678954817627474, 0.4971666219958565, 0.3112725951941304, 0.4868855399930775, 0.11536357655746998, 0.42718851164408056, 0.41938462674550847, 0.4025781405346919, 0.40946890352279597, 0.1848449260311107, 0.4490315963008329, 0.4711235125994572, 9.999999999998899e-05, 0.5228015068609198, 0.3871286794101485, 0.2201192629376122, 0.379056909014565, 0.4698376602806337, 0.5392534788354042, 0.5579180503511981, 0.5278914412950797, 0.4658367518254044, 0.5551524880898573, 0.49202761481395074, 0.5615580306342244, 0.5136890937423857, 0.5163725141462168, 0.037867274108847604, 0.036983983460397885, 0.22038502367770685, 0.08215795532605463, 0.1922611350961192, 0.37643103267849753, 0.08516429334309017, 0.18995683365154037, 0.10950160584564128, 0.256280516971916, 0.30321469197380113, 0.35244959359998074, 0.36186862744560444, 0.3660943053628356, 0.3376112439249018, 0.24632592621366156, 0.32762743926496596, 0.2612090200021464, 0.6610784518978192, 0.6341805200040918, 0.6698490352485823, 0.6275823815215573, 0.6582505263081232, 0.6859874707253405, 0.6343592996659461, 0.6536899852049607, 0.6074535342102678, 0.13416003501939155, 0.07647214838990024, 0.11232970470256098, 0.11773879372133744, 0.12154201191892211, 0.08487635571691476, 0.13478827116051817, 0.09503337502443532, 0.12406625999326859, 0.18761927536524348, 0.46853996698435285, 0.24358253722795153, 0.15113978317010346, 0.18469522878292566, 0.25261471880157327, 0.5046521564579514, 0.21554760125732153, 0.3085451941435797, 0.4339761209303743, 0.28232587104468, 0.4418910532665111, 0.36730429967755585, 0.35053488889520135, 0.31215139526922675, 0.3073057985446678, 0.41009926452306256, 0.46731673910668325, 0.2351170276261797, 0.4054959906600869, 0.37227645401402554, 0.19914625591629254, 0.2671309404993042, 0.27135410417890893, 0.3717653518472791, 0.36108551585025095, 0.3059964611883689, 0.2111775251550626, 0.17634922167396305, 0.23956945064008894, 0.20757598711167502, 0.1886622623798998, 0.22059834190322247, 0.2184240391682688, 0.19488726360712494, 0.21447565191628148, 0.20655342265151222, 0.19471067760755423, 0.1954391042093272, 0.19782858646841728, 0.21174068925433542, 0.1958436789485617, 0.1956411786008142, 0.17955279756330733, 0.17330213706090836, 0.18011523690890463, 0.7709218060767087, 0.15448691930172576, 0.8202398021909165, 0.16464197043871753, 0.19165177116215282, 0.7713674069043639, 0.16335164606170183, 0.8024999959018577, 0.7551347620550277, 0.16600285986588514, 0.15637119437554536, 0.7696653141931337, 0.19232827258648255, 0.7160112757672741, 0.7516011179350693, 0.14985781902794804, 0.1536398263784564, 0.19427347918670335, 0.19175357438948704, 0.20674012034023692, 0.1996864421122676, 0.23896614471006705, 0.22191943565469496, 0.1995303568894018, 0.2032246992468848, 0.20107176090871226, 0.09648365809082593, 0.07877620953173758, 0.07561223262317873, 0.10262120849300738, 0.08794430833848088, 0.08897428800552187, 0.08337860108440731, 0.0983993049071974, 0.10073949794418768]}, "mutation_prompt": null}
{"id": "cdd35446-8e74-447a-8c70-5fbad96c78f1", "solution": "import numpy as np\n\nclass HybridMultiPopulationAdaptiveOpt:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for improved convergence\n        social = 2.0  # Increased for better exploitation\n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Dynamic inertia for adaptive behavior\n        self.inertia = max(0.2, self.inertia - 0.5 * (self.evaluations/self.budget)**2)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Increased mutation factor for stronger diversity\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.3 else 0.5  # Slightly varied crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "HybridMultiPopulationAdaptiveOpt", "description": "Hybrid Multi-Population Adaptive Strategy with Dynamic Learning Rate for Enhanced Exploration-Exploitation Balance.", "configspace": "", "generation": 92, "fitness": 0.31966089252557195, "feedback": "The algorithm HybridMultiPopulationAdaptiveOpt got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.671813064651927, 0.6625815239416589, 0.6750152528735729, 0.6806988280108873, 0.6856367297771249, 0.6736258474270287, 0.6889127643402387, 0.6814147689753232, 0.7006417010505994, 0.49390071540609337, 0.43978474728396033, 0.44277030652302807, 0.44653903496054814, 0.48943102402522765, 0.4508157110441813, 0.45100088888515644, 0.4319782433642869, 0.45798483358847153, 0.13875562491047277, 0.10945903269461743, 0.13404919683313854, 0.13071470210438751, 0.11304443897625605, 0.11123026094835464, 0.14230929367828327, 0.11910845085046406, 0.3159896113652009, 0.09240947735370242, 0.11776099296409703, 0.0919936125792632, 0.12082344489302599, 0.10539955584013527, 0.12172589023749658, 0.11134256375163332, 0.11588503204296519, 0.09400854402306613, 0.9639051503671778, 0.9809150776178809, 0.9843774400548571, 0.9751272395092757, 0.9813752435054744, 0.9803209133949982, 0.9883671285385601, 0.9734126221840195, 0.9809609018075607, 0.49977984528173225, 0.056839355539477165, 0.46010895552837416, 0.48018148063169597, 0.4561196167373406, 0.43523398826908133, 0.5043692891768412, 0.0842821652538931, 0.4327141842413593, 0.6936165118506692, 0.6114708334312206, 0.6352129660970706, 0.6885085574776912, 0.6859354867650139, 0.3195447958999179, 0.6474525609090771, 0.6875476805224174, 0.6733520594672762, 0.31366711417611826, 0.5002935086128891, 0.2948375080772835, 0.1074735704521883, 0.3123281311768983, 0.39543866702363195, 0.33183511881159433, 0.2620707375436325, 0.375693053561305, 0.2358599047198786, 0.10797205469675974, 0.4397968851631918, 0.36032680412224527, 0.3472937646022852, 0.29541858863766, 0.26301489764905017, 0.2768669719500313, 0.25619415728579165, 0.04902931620662676, 0.14018111109314757, 0.14862380204467263, 0.04017049637478143, 0.1259655580708432, 0.0405044426914043, 0.04837687607757801, 0.06358311143431727, 0.25534165420391863, 0.40935697460242393, 0.4107830966302253, 0.22664619589406043, 0.18668492651048463, 0.3454173434732152, 0.39669002305371426, 0.41595357745073924, 0.3243260502766928, 0.16631941299052266, 0.03464707672393652, 0.09667562701866317, 0.056644355031527094, 0.16655255380432354, 0.11837301650952758, 0.15788310801107042, 0.0929041797878093, 0.21421722744559712, 0.15978061554625, 0.1350872829918438, 0.19440619355160116, 0.13531913533657558, 0.2123510341354481, 0.2702323142169284, 0.22559523573665374, 0.18130039095012618, 0.2710068278191521, 0.06388230556373398, 0.6167256621798358, 0.5487873944214825, 0.5849749357321148, 0.5443147511011086, 0.5988046645558427, 0.6031900290893415, 0.546659028232283, 0.5889487069733469, 0.5366139512452948, 0.0929158070798689, 0.0927898750566215, 0.11879600932302092, 0.11659141648868276, 0.09778400962094114, 0.1477114245396568, 0.12437172630863302, 0.10154318264917872, 0.11811597461045387, 0.14772345293559808, 0.1959642712455557, 0.1987007369068431, 0.3004411828739615, 0.18767321965010209, 0.14419234408461779, 0.1522180327911099, 0.1646783271646537, 0.18717859207527388, 0.31201078466813337, 0.4024865585442037, 0.29123356647418575, 0.35957957057649315, 0.33082471209828834, 0.39044052835498144, 0.38438876184755033, 0.41064833823426583, 0.37910749218335826, 0.20838635536504924, 0.24975753090966768, 0.21164309244642132, 0.25775063654828767, 0.24882230076134015, 0.2586552385880907, 0.2489844059055336, 0.2580147470442644, 0.24794605729268193, 0.21415389878322044, 0.2747411753544867, 0.20047542940826735, 0.2116965257773863, 0.1998322151601779, 0.21501935966194108, 0.23408258067135634, 0.18893934939901758, 0.211765451273078, 0.20853105121166238, 0.19196943674790068, 0.21853050151946474, 0.18993835215508292, 0.188723155360781, 0.21305900927486088, 0.1995073992054628, 0.1792122259563217, 0.1857246903603389, 0.7055796218456116, 0.20161338223434633, 0.15334410704851575, 0.7055205987650301, 0.16473955330451284, 0.19642906947704086, 0.6334464722560217, 0.17777372166219918, 0.6873268286927819, 0.6207287066644147, 0.1609930681023074, 0.6921823618896121, 0.6605679330657723, 0.12023262062679896, 0.12361150948521882, 0.678829177489459, 0.14776652972389803, 0.1549157716768863, 0.21406872743100203, 0.19574864727586205, 0.2060934258333288, 0.19444365240329886, 0.1857814053387541, 0.20950566273303517, 0.19756020095811733, 0.19428548977830085, 0.22224950702894564, 0.08053727645922304, 0.09272654853449935, 0.08623401437781286, 0.07954123637141586, 0.08312345248416353, 0.08520098839836787, 0.09238961793508915, 0.08163246620179576, 0.09625658815267157]}, "mutation_prompt": null}
{"id": "cb306cfd-bd2d-4278-a305-a36b3a3fc9fc", "solution": "import numpy as np\n\nclass AdvancedHybridMetaheuristic_ALR_DSS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for broader exploration\n        social = 1.9  # Slightly increased for better convergence\n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear decay with adaptive learning rate\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations / (self.budget * 0.9)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Enhanced flexibility in mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.8 if np.random.rand() > 0.2 else 0.65  # Dynamic crossover refinement\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdvancedHybridMetaheuristic_ALR_DSS", "description": "Advanced Hybrid Metaheuristic with Adaptive Learning Rates and Dynamic Strategy Switching for Black Box Optimization.", "configspace": "", "generation": 93, "fitness": 0.38085298410323876, "feedback": "The algorithm AdvancedHybridMetaheuristic_ALR_DSS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7966175067105944, 0.774545742884905, 0.7583735010458527, 0.7981851628969965, 0.7948743010651609, 0.7772643554498984, 0.7765067738234678, 0.7830484377994051, 0.7621382511706812, 0.6096483027569257, 0.5846250140803244, 0.5568985516900586, 0.5815199794359773, 0.6003465684068121, 0.5448174039213725, 0.5976653568273285, 0.5339070988401586, 0.6115346464708082, 0.10321071550584493, 0.11806829090073612, 0.44400395425806705, 0.12555442138880657, 0.13708495243577568, 0.1280153431427854, 0.13861891621187028, 0.11003112955693017, 0.49505579338123107, 0.09484059541505652, 0.13132342409717856, 0.08480411498141016, 0.10599235737468082, 0.12867048063638065, 0.12843840262628692, 0.08535304724815929, 0.09207025283406822, 0.13541969524304642, 0.9681537134407618, 0.9809031447984073, 0.9804871142078293, 0.9745549859376753, 0.981794880671049, 0.9875612556648243, 0.9829030053485245, 0.9792543229061943, 0.9812255808459264, 0.5669305733536947, 0.5516273234921054, 0.5833974113559651, 0.5863223682991588, 0.5949155903238357, 0.6038934079608037, 0.5500921242290301, 0.08514899645470908, 0.08652908004075854, 0.8164633463552989, 0.7375165219637507, 0.22206743532598872, 0.20223719625913406, 0.1135609378355984, 0.7990628554311242, 0.7859852651655117, 0.7302363756728982, 0.7484546464599924, 0.5991034219567448, 0.3814987934540014, 0.37402010817965525, 0.2672850610555356, 0.11941171857754185, 0.4676335775930689, 0.49526277438206445, 0.5063786022152326, 0.12214869303150044, 0.4460839193228341, 0.4431221310646716, 0.6183813068602857, 0.49396360181952526, 0.12324717831348242, 0.4697893524081018, 0.5584939024620686, 0.5022151998137754, 0.40780237805372543, 0.0838320098301234, 0.45658038989667726, 0.4260886001397959, 0.41180578402331725, 0.414825028024437, 0.20638240983355582, 0.55278369724031, 0.4623987963649929, 0.2288435371460369, 0.38321329155890393, 0.5526183196572375, 0.5314338031072774, 0.31069553282958307, 0.48206635061541636, 0.5157895386418709, 0.6228126521494204, 0.5032867295499888, 0.5763478477685162, 0.052304145417097825, 0.22625448559344297, 0.04658610074869918, 0.06709329874715153, 0.06316848822514565, 0.1027890890694032, 0.143337110229668, 0.17071126602195708, 0.22724312014281978, 0.28304762397774863, 0.23575593595625, 0.2445475313694162, 0.2649451860107258, 0.30825333749706063, 0.3711190544029882, 0.30330007213064214, 0.2941070766422519, 0.2378679471359364, 0.675778592478562, 0.6933043456832664, 0.7078625619296206, 0.717135778647243, 0.6949368889302379, 0.6203915692980699, 0.6673495755048269, 0.6648526055015331, 0.7134356647717899, 0.13128551917576947, 0.12394755520855616, 0.10434317101740687, 0.13064541999609447, 0.08905543699075258, 0.10243221851630846, 0.1015900922592533, 0.07656963180454457, 0.11188498692075755, 0.1618740145324158, 0.1586930454344363, 0.14634188493028744, 0.1554765390994266, 0.1890936076932671, 0.16750890284559905, 0.20407024423107445, 0.19806739794281014, 0.18560181801100917, 0.32941315038389263, 0.30876489860451306, 0.4496302099836311, 0.4038655418680206, 0.24482173056060874, 0.43793898951195265, 0.5186461226672667, 0.38657220104364476, 0.4672024120630548, 0.44735982260076956, 0.2143756494085587, 0.2353902598192238, 0.28754931318670074, 0.3057489096411289, 0.26768135676183447, 0.42616996147734565, 0.44522804119950266, 0.28636093421582287, 0.22007531515098877, 0.21442139077525357, 0.24660071698343922, 0.22369656229776325, 0.23826587481149397, 0.18753632077326998, 0.21291295894745876, 0.21526668750291933, 0.23622042726463477, 0.20920167941448298, 0.20244131330199755, 0.1927690669469303, 0.2077889160200047, 0.18451475566397202, 0.18803432114736196, 0.18063440635355255, 0.22632726614852716, 0.1960323058195732, 0.7673792671064386, 0.20056127597758633, 0.15361089042705556, 0.8438139739473984, 0.1667590576270026, 0.16362680346069625, 0.16011227288120133, 0.18194756842728554, 0.848226917607189, 0.8026941025595309, 0.7788447624979907, 0.19908455609013131, 0.20314233074402988, 0.7100763875940798, 0.814544126964099, 0.6942251082454204, 0.7840987698768351, 0.19637593593156144, 0.2099425440499877, 0.1804891946719448, 0.1924560165509296, 0.21094075241220567, 0.21594938946086295, 0.19725563654451772, 0.2071788661488736, 0.20098189305516634, 0.21639500390139788, 0.08270658348690563, 0.09461119989908817, 0.10431774242223635, 0.11389602013970557, 0.08012930644048588, 0.0968885531312701, 0.08817719334372609, 0.09233038531048043, 0.10105610711294888]}, "mutation_prompt": null}
{"id": "478c312a-f57a-493d-b986-46be4ea5d3e7", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6\n        social = 1.8\n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        self.inertia = max(0.3, 0.5 * (1 - self.evaluations / self.budget))  # Dynamic inertia adjustment\n\n    def de_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def de_crossover(self, parent, mutant):\n        cross_prob = 0.8\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # DE phase\n            for i in range(self.pop_size):\n                mutant = self.de_mutation(i)\n                trial = self.de_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "AdaptiveHybridPSO_DE", "description": "Adaptive Hybrid Particle Swarm Optimization with Dynamic Inertia and Crossover-Enhanced Differential Evolution.", "configspace": "", "generation": 94, "fitness": 0.4037470924608273, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.8100587168937479, 0.7601015303175196, 0.769944004096611, 0.7654662371895341, 0.8018493945714914, 0.7885984983532521, 0.7865369992191281, 0.7958405234175212, 0.1732066098751851, 0.5533639669259818, 0.5715496513369291, 0.5891608089053545, 0.5720400277556164, 0.5950878480340694, 0.534650050822033, 0.5349074613815166, 0.5787714922907026, 0.5321925705207772, 0.11394499845657302, 0.10479184151739263, 0.1264080263714421, 0.16725129423964513, 0.12692814647480077, 0.12370326488693084, 0.11338935549616924, 0.1351179092418352, 0.1378289239492838, 0.0992131162715354, 0.09921042100094346, 0.10018456379444252, 0.13998718636120555, 0.11993570021662892, 0.10609381152178399, 0.14097535642011805, 0.10773634514500663, 0.09680590836779479, 0.968896316726737, 0.978665555228703, 0.9816169324166382, 0.9632001967419872, 0.9793408635507002, 0.9759543249926922, 0.9808648860552854, 0.9582029882325475, 0.9722765692211837, 0.5417636448291615, 0.5546122050103234, 0.6554545341778717, 0.6141468584978693, 0.5527855008495762, 0.5395621858396431, 0.6045769688622575, 0.08668961101626649, 0.5775748811815833, 0.800829377715526, 0.8016797795806412, 0.7923370543415131, 0.8128944501682449, 0.8021137032748457, 0.20090268330455374, 0.7801257179089289, 0.8216854221322214, 0.7891668414890385, 0.6431786851798427, 0.11777964000967078, 0.11580471111434565, 0.46872329569830995, 0.48203300534370463, 0.6389802449873829, 0.5604762086152377, 0.5198960802250411, 0.5785376416901233, 0.4613657055507355, 0.3391940279584501, 0.12838598786544153, 0.4911926756717987, 0.5636909093545324, 0.40388544415755734, 0.12952940595919504, 0.5120921796470606, 0.46069651315593896, 0.24032763257504208, 0.28574928871618543, 0.3923386218357854, 0.4444101990770878, 9.999999999998899e-05, 0.5023053861592526, 0.49097923196069293, 0.5296591768393251, 0.535051978108297, 0.5927679568374403, 0.544355706391628, 0.6037835189779901, 0.5105124227302322, 0.5181135913669986, 0.38236714021395213, 0.5825638516078829, 0.5654559058370323, 0.5666261532804864, 0.14008788451871734, 0.06460167823101748, 0.1437454988986654, 0.06569044872666618, 0.19092839883541368, 0.13262201257748163, 0.11158334021469585, 0.10196259953108511, 0.27361298465615613, 0.2202827836271073, 0.40243967694440963, 0.41683274432373396, 0.41114358021827024, 0.389800126817025, 0.3805846681068722, 0.374524554082478, 0.2756161293279541, 0.07308726091100448, 0.6976961321836925, 0.6969493031527887, 0.6515237200127899, 0.6744083759940284, 0.7029376343569991, 0.7255031690243725, 0.705125117356341, 0.71617431011152, 0.7046805281296755, 0.10754155376845342, 0.10690428883845593, 0.08940884483407974, 0.14164787332246664, 0.4880607298810844, 0.11100463503161917, 0.15841879777317047, 0.1334673639327768, 0.09544049641734786, 0.2739835710836761, 0.5878009896848562, 0.33522499166986575, 0.14341704917763998, 0.2779197593229624, 0.16272937867900494, 0.2096531996554426, 0.19263669282569829, 0.22047409125213324, 0.4582188088179576, 0.2528459387052917, 0.5135813126057291, 0.45277925063476976, 0.5027955446427199, 0.33110888779545156, 0.3527901452613743, 0.4551599474606651, 0.48281308086496866, 0.23011078249285133, 0.23170708047636113, 0.4023421190894817, 0.37783285156784896, 0.513220045352026, 0.3885351958577573, 0.4042874589811386, 0.32118645445132465, 0.34604686919333205, 0.24891555449409064, 0.26749349033289094, 0.21480169030017238, 0.22297854684491325, 0.20470140374000356, 0.2012022303692308, 0.21021441191332113, 0.21439006985164655, 0.2179023241616599, 0.18152240532269437, 0.21851302125476102, 0.19235086491492548, 0.2144262696698922, 0.21778642774652557, 0.19347197572057162, 0.19904400847531645, 0.2086484373480092, 0.1965986629057871, 0.8111187372876463, 0.18328862027280424, 0.15487851393959662, 0.883956615531532, 0.16805153404413142, 0.8515823058325106, 0.12135232561916598, 0.1623093075986155, 0.862561507929704, 0.15338881385440817, 0.8172051744005944, 0.8215848968379207, 0.8301121484607006, 0.20182270206202013, 0.750990807072955, 0.8512373859810658, 0.8321015243850503, 0.20013810878288452, 0.17900888399680737, 0.24855050414584923, 0.2112847084816286, 0.19158097819317055, 0.22121456098129544, 0.20997761215590505, 0.21507165393609862, 0.22183024824716535, 0.18465760769451645, 0.10832780001270892, 0.08529789419944411, 0.09132959657620399, 0.08858419203691481, 0.08086410622050899, 0.09367066213372777, 0.10448519630084807, 0.09081853698186027, 0.13927092202486002]}, "mutation_prompt": null}
{"id": "93f4a24a-bf1f-437e-9a01-21bd63305c65", "solution": "import numpy as np\n\nclass EnhancedDualStrategyOpt_AIDCE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slight adjustment for better cognitive influence\n        social = 1.9  # Enhanced social influence for global search\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Nonlinear inertia decay with adaptive threshold\n        self.inertia = max(0.3, self.inertia * np.exp(-0.5 * self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Increased mutation factor for diversity\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.85 if np.random.rand() > 0.25 else 0.65  # Dynamic crossover rate based on random probability\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedDualStrategyOpt_AIDCE", "description": "Enhanced Dual-Strategy Optimization with Adaptive Inertia and Dynamic Crossover for Robust Exploration and Exploitation.", "configspace": "", "generation": 95, "fitness": 0.36994858483215326, "feedback": "The algorithm EnhancedDualStrategyOpt_AIDCE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7433834069149359, 0.7348786988791847, 0.7407249879628095, 0.7547632200036747, 0.7509711838077247, 0.7341204470509286, 0.7359809469105071, 0.7683728921443467, 0.7380200030424648, 0.5660769762369253, 0.5606519242404321, 0.5525058731937167, 0.5231673028937325, 0.5476039678810026, 0.5334172495482321, 0.5432190174013616, 0.5509678181214974, 0.5199497862100233, 0.13095199957700732, 0.1410150183329124, 0.15442117606455252, 0.1261060160320049, 0.12097626869432043, 0.126454255005238, 0.1235001859832544, 0.13854336121057642, 0.13378086217558083, 0.11355015094270327, 0.10764110169019481, 0.11487286463941127, 0.14439002634473275, 0.11777752438115008, 0.10069577437233779, 0.09256921928393369, 0.13228241418771902, 0.10511778752657519, 0.9639889872687877, 0.9875126547564671, 0.9715136155973828, 0.9819003733444224, 0.9807398134731999, 0.9875612556648243, 0.9820120634215757, 0.9807137105790925, 0.9812255808459264, 0.5712557116840191, 0.05639107572195157, 0.5353074078279217, 0.5543438918296107, 0.547041658552462, 0.5201349691768062, 0.5780294113100303, 0.4744297535768903, 0.5860235367151865, 0.6890407925052775, 0.7580624205768985, 0.7699907382097086, 0.7271878819546826, 0.1974183447887512, 0.7260961368737275, 0.7782058472684743, 0.7819096927113736, 0.6086290795588489, 0.11539452209823864, 0.41516266948460456, 0.4269479367796696, 0.11708539690754349, 0.5002891918235577, 0.3773487497242448, 0.4860952672869806, 0.4548070682885784, 0.46532441860037765, 0.5228381146699717, 0.445524655763888, 0.11805610444118342, 0.4109697307010016, 0.38068306509636873, 0.42562123545034924, 0.1258720012345278, 0.39674532563480414, 0.4963785474086211, 0.05830190935128721, 0.13276987849261335, 0.0501645958865351, 0.2169314477730182, 0.5157292260111039, 0.029995053502740898, 0.5189465741588108, 0.2639942082049649, 0.434271250969691, 0.5343566756094764, 0.4947796450318914, 0.45351920977763427, 0.44667058250476266, 0.4156809406998907, 0.4774828020395476, 0.4699802189261617, 0.546908051538072, 0.5062923285473915, 0.04052734712939998, 0.21706695021264377, 0.041577698357990966, 0.09814003088524836, 0.07031238846473897, 0.22557847437579304, 0.16137357011702758, 0.26034362026458735, 0.06994566503051558, 0.379424905121438, 0.33116982498460124, 0.27614106638210434, 0.3011239518914345, 0.2455406158683182, 0.31361848832710026, 0.29797126795866224, 0.2844062817943023, 0.27800026884098605, 0.6732720447006842, 0.6593407592964318, 0.6615475425938271, 0.6887731544156857, 0.6600706393094987, 0.6520137438164902, 0.6648567098630512, 0.6584963919700468, 0.6659785320647196, 0.1077274039818743, 0.16236532737816323, 0.11467306589020665, 0.1406813108303171, 0.1318311743257169, 0.11062071180411825, 0.12639204339339571, 0.09231576637651229, 0.12609705457488818, 0.23780113266996084, 0.1334499640030612, 0.1567927608991, 0.24566277225745947, 0.18951285486066627, 0.16775753831131202, 0.3375707155449652, 0.1778462763261781, 0.308636766723299, 0.45208064145234717, 0.35976084303873246, 0.43302565244019064, 0.4288846880475088, 0.4243963669966091, 0.33233575384866054, 0.3612819493907049, 0.515175345582229, 0.5561645827130981, 0.3249362117198449, 0.2596853356559802, 0.35957326019407343, 0.200303034156314, 0.3644908756635101, 0.19968753700814534, 0.2605065024386427, 0.3286764006985121, 0.36978212722897175, 0.21926032129325035, 0.2190144844806634, 0.2121869750496045, 0.20817890047005327, 0.2025677385756376, 0.21365729702073333, 0.2715210398237766, 0.23513450209985198, 0.23375365363169753, 0.19298783005715692, 0.199206316301887, 0.20319536634140012, 0.18421232585010716, 0.2122231701501347, 0.20285619060458404, 0.1919685691303077, 0.18296908075803653, 0.1956744142786636, 0.812380465549335, 0.1842766175364855, 0.15344414439568066, 0.8244591857447382, 0.16410376850197828, 0.19157449135770277, 0.14970101510373712, 0.15076793165120195, 0.8178428712902542, 0.6891752448834344, 0.1651990378361322, 0.7430712691882866, 0.20133609245014927, 0.713405216681251, 0.16409647870799582, 0.704341672140428, 0.7288093311408752, 0.20759538069558314, 0.18928419177571998, 0.18462074810740914, 0.18239860140949227, 0.21277713249091468, 0.1933126838293745, 0.18991745758062728, 0.16964807458739473, 0.18148838090391084, 0.17523389488609464, 0.09875312147075255, 0.10094021097184014, 0.08942325830016185, 0.13081368022566786, 0.08622991790402645, 0.0788571673512104, 0.10712273526286886, 0.08044343953484023, 0.08838083881530279]}, "mutation_prompt": null}
{"id": "a85df559-e17d-4fe6-86d7-621481c28e25", "solution": "import numpy as np\n\nclass EnhancedDualStrategyOpt_SAI_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 60  # Increase population size for diversity\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.6, 0.6, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.85  # Slightly reduced initial inertia\n\n    def pso_update(self):\n        cognitive = 1.4  # Adjusted cognitive component\n        social = 1.9  # Increased social component\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Polynomial decay on inertia for more gradual adaptation\n        self.inertia = max(0.2, self.inertia * (1 - self.evaluations/(2*self.budget)))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.2, 0.7)  # Narrower range for mutation factor\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.7 if np.random.rand() > 0.3 else 0.5  # Dynamic crossover rate tweaked\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with fine-tuned update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined adaptation\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedDualStrategyOpt_SAI_LS", "description": "Enhanced Dual-Strategy Optimization with Stochastic Adaptation and Improved Local Search.", "configspace": "", "generation": 96, "fitness": 0.32053813635508743, "feedback": "The algorithm EnhancedDualStrategyOpt_SAI_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7332088644097903, 0.7433798848512567, 0.7413241875532799, 0.7399467082547107, 0.7278572205172993, 0.7463645187349648, 0.7356862864926068, 0.740000001791552, 0.7648054716428743, 0.5723530985143643, 0.5420394386985868, 0.5125518873776664, 0.5207362626111041, 0.5078918334120233, 0.5572197218938814, 0.556449649348763, 0.560075471996492, 0.5213769931323768, 0.12628389712208066, 0.1448419347337011, 0.16136453429288344, 0.15015738803945755, 0.12776751234384065, 0.14118921420884822, 0.1378652969644365, 0.15664168704570425, 0.11194565461901929, 0.09575386395613239, 0.12643560518532782, 0.11573191628833246, 0.11559195934700361, 0.10297210185377059, 0.11885233490515879, 0.1301581329463113, 0.12437938820656069, 0.09993963299827369, 0.9722320698345087, 0.9782464731761524, 0.9657659390029616, 0.9561476258052396, 0.9773964478029729, 0.9656633234625394, 0.9667819120804743, 0.9752978450375327, 0.9551974313897437, 0.5443416544015152, 0.5817130028244836, 0.5337177294601149, 0.5125028452912509, 0.60308003438357, 0.5113201759388155, 0.08522095823441411, 0.08356348480397613, 0.4123516849479707, 0.2055722739360586, 0.2989310437836865, 0.7840287202986914, 0.7421933283808377, 0.1962427370798402, 0.1995534454715696, 0.7575132644371371, 0.7680316920177742, 0.7953535955341968, 0.10347186471559011, 0.10991745449676149, 0.27949768865881575, 0.4358943118670988, 0.32775807922667566, 0.11627132987983368, 0.3730730185444968, 0.2358571091580789, 0.41279381932105796, 0.09843447775932257, 0.11731927613138537, 0.42854700188992567, 0.2573875825372419, 0.33426422709202763, 0.38527287502130414, 0.2857498896771201, 0.11291388565258398, 0.3196844268014123, 0.057376136291383606, 0.06346000909983396, 0.0001643509853420655, 0.22193716275655395, 0.11604468098992515, 9.999999999998899e-05, 0.0028654843731960034, 0.1385033184987784, 0.2059730665055396, 0.15832828735826676, 0.16504867795226785, 0.4076076213099282, 0.5091869776245204, 0.308204971424638, 0.25019832237837714, 0.11523866269166394, 0.48986836261993205, 0.052833672014795274, 0.19727853376690518, 0.0898784948770397, 0.1649001013705107, 0.1298095556449258, 0.09541068763889238, 0.06239913883244752, 0.2308053913791983, 0.13013499689709151, 0.06950152433351453, 0.15245348649349866, 0.20374125973344992, 0.18555691464540602, 0.1808068405334945, 0.29974602935397265, 0.1806958459521919, 0.05185158748738028, 0.050886670336689144, 0.045091975418946495, 0.6057811336938509, 0.6962612241897463, 0.5309666596230126, 0.6280381984833154, 0.572264526231554, 0.620209085953473, 0.6698710067685116, 0.5707423911187461, 0.5399251050026115, 0.1256028204211621, 0.12477619066729295, 0.0998929194318926, 0.13032883259447536, 0.15167802642494332, 0.12491641390702624, 0.085136808183778, 0.07302795182677546, 0.1376360393084184, 0.25973537650783396, 0.3238587584554602, 0.28290538372024854, 0.44973048087872225, 0.23998730841475613, 0.17869370380596683, 0.24661474825207774, 0.14484120860631156, 0.18804708765915534, 0.45932249272065606, 0.4223311821507917, 0.2879277214388075, 0.3245887332644103, 0.33990263040199453, 0.4082361577509568, 0.35175779898856585, 0.31476127596919157, 0.41421824250407335, 0.30358266385183286, 0.21963210611078188, 0.29786451206865194, 0.21714252293433967, 0.3395650983162446, 0.227769664490461, 0.2313545298878774, 0.3438753781388324, 0.19996310063058143, 0.21892480224576427, 0.2055883680534586, 0.21125140013641464, 0.2036664588090824, 0.2174567780664899, 0.21523246383476946, 0.2691016327040716, 0.19480896931337577, 0.20146317633625754, 0.21034132878164247, 0.21526799547873365, 0.22908946563614807, 0.19390109621653573, 0.232132293623733, 0.20765352177202256, 0.19835065343781166, 0.18631095735956538, 0.23175112035651368, 0.18456448421826221, 0.16230639693386328, 0.7811603919303655, 0.16042833825237668, 0.17504484761097405, 0.12209825718750034, 0.16061009295325568, 0.19746294020224375, 0.15895635059835878, 0.16514124210527248, 0.7665665411952206, 0.7174907031271422, 0.20166551465537463, 0.7519369102655828, 0.6236058112054701, 0.20157723627244217, 0.7497491551300353, 0.20782912907852746, 0.19992464447117886, 0.20507962823425363, 0.19078798466210622, 0.1936849588771764, 0.23203708527473277, 0.21631541265772158, 0.24960977568804865, 0.20126772058714826, 0.19040708241956006, 0.08372906308859873, 0.12351711014439093, 0.08701655738668723, 0.08159870912616429, 0.08306417487520812, 0.11573486302629821, 0.10628787745455992, 0.09231106376637632, 0.09101430101415275]}, "mutation_prompt": null}
{"id": "db604b46-8c2d-46ce-8985-6432016d482a", "solution": "import numpy as np\n\nclass EnhancedStochasticDualStrategy_AdaptiveInertia:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Adjusted for improved exploration-exploitation balance\n        social = 1.9  # Slight increase to enhance convergence\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Enhanced dynamic inertia using a sinusoidal decay for better adaptive behavior\n        self.inertia = 0.9 - 0.6 * np.sin((np.pi * self.evaluations) / (2 * self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Increased mutation factor for diversification\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9  # Static, high probability for crossover consistency\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self.pso_update()\n\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "EnhancedStochasticDualStrategy_AdaptiveInertia", "description": "Enhanced Stochastic Dual-Strategy with Adaptive Control and Dynamic Inertia for Efficient Optimization.", "configspace": "", "generation": 97, "fitness": 0.317728326874312, "feedback": "The algorithm EnhancedStochasticDualStrategy_AdaptiveInertia got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.21.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.6374325045726765, 0.6091782677456647, 0.6124150402652959, 0.6447943466550776, 0.6053922330168946, 0.6435589419572814, 0.6072082977227082, 0.6404039059584234, 0.6099706893801808, 0.33828335527974096, 0.33740542420686215, 0.3384403476188279, 0.3416285307458482, 0.315550251052389, 0.3520452920149534, 0.3625726374932903, 0.33562989567096024, 0.34190657646956313, 0.09483779940267756, 0.1256614672672176, 0.1011970256423701, 0.1810120843846369, 0.11187105704121314, 0.13308685172538737, 0.10110194940491513, 0.11116198749516826, 0.10520998529796666, 0.10042915204076219, 0.1082722109192551, 0.10972372965874688, 0.11180954778949237, 0.08787837167426782, 0.12041225097944264, 0.15207682938921518, 0.12825698953438092, 0.11059202673802282, 0.9733023987649312, 0.980674783512123, 0.9816407646358958, 0.9511275361370982, 0.9361113676300631, 0.967184443532947, 0.9810787011629365, 0.9720553146363895, 0.9696552172754587, 0.4120160087875331, 9.999999999998899e-05, 0.05604986352729446, 0.38115226469629937, 0.3869149846809121, 0.37657995552474033, 0.38881926154654156, 0.39297397516415644, 0.40542824941632527, 0.5373218328150831, 0.6327427780175865, 0.7196468436034908, 0.6591634294049752, 0.6124032752119997, 0.5987200772270902, 0.6250135409445527, 0.6441374785106189, 0.6070795720912392, 0.3221113484199938, 0.2278845970102037, 0.33562903907961195, 0.396924874566412, 0.31777440110306787, 0.3179208297995876, 0.3009251132349884, 0.3133588710722719, 0.2767365550185926, 0.33781959060026623, 0.39020026580175715, 0.387293681727535, 0.33709440348057973, 0.38130917569014977, 0.3703480975161272, 0.35996468978442264, 0.2626324327233157, 0.32737599058848865, 0.29080603374817804, 0.27312126036669593, 0.30230899862443716, 0.2944873161658488, 0.29467966964690673, 0.2608528081066146, 0.23375226455911025, 0.19700352063028248, 0.2828888195158734, 0.39487046069571063, 0.2991262240043707, 0.4137670926161189, 0.2807966896787151, 0.35813580541340684, 0.25049416332390273, 0.41954753478338513, 0.38367543628878764, 0.39349452623937387, 0.08884714052079923, 0.16220368207583558, 0.12296249429388884, 0.1489694330921011, 0.052751716642737145, 0.1552124939670675, 0.1067435455331992, 0.07918267393772149, 0.09072591542169217, 0.22601239266367734, 0.24055347769575652, 0.22416059408045608, 0.2609531920869116, 0.2461225453445013, 0.23981416537181788, 0.21154397585673312, 0.24447422621553494, 0.22205703446096203, 0.5225770913452261, 0.5325895646556504, 0.5352097603967083, 0.5298421052560304, 0.5480710657833714, 0.573676466260487, 0.5426436587620604, 0.5365510894801364, 0.5355682586531356, 0.11465040427847928, 0.1147262473687295, 0.11676391058949342, 0.13305049797286395, 0.1141507777655375, 0.11754557405377941, 0.11524708426999519, 0.10982964459009104, 0.09808984746791705, 0.40141859167965344, 0.3278691797172496, 0.22188957331660086, 0.4104500749841381, 0.18399266295585337, 0.16491278692366507, 0.22348437346236405, 0.27993514791503615, 0.2234795800081505, 0.34732684864086705, 0.3373375744486877, 0.35813047637184336, 0.4028884189892892, 0.35759116359463816, 0.33809685082954155, 0.3533823599233128, 0.3675228017184067, 0.33114411750507944, 0.26640088140150553, 0.3147637534063904, 0.2846804800202749, 0.25976310977546446, 0.27753807197262614, 0.27926130672590455, 0.28566288608360624, 0.29207725356777414, 0.30611313071644064, 0.19841691815720008, 0.1947814236063481, 0.223569073631272, 0.20790690130917777, 0.20263555579380343, 0.23319199517677724, 0.19302139749804426, 0.18494666721728592, 0.21498759803326373, 0.20312541122312133, 0.19664842521662906, 0.20063820541777322, 0.17783469819991282, 0.19589984768451785, 0.1900784994460607, 0.1866909259567795, 0.1893281725968491, 0.20390204450582028, 0.7377860547076407, 0.18113972004282697, 0.15428446053817024, 0.19434067950686273, 0.16443428854016806, 0.6628810213051259, 0.15781153845667617, 0.15933456084925146, 0.7374890793470599, 0.1465536014652925, 0.2022474656017349, 0.6238150757891218, 0.7213554217886504, 0.19838507984179599, 0.20251979279975907, 0.20858550540408094, 0.1480753843223208, 0.20127857816259442, 0.1885253011846314, 0.2023794567558056, 0.1920146538556341, 0.1827518734102881, 0.18426232242018148, 0.20757609150642564, 0.19665210598730842, 0.19618551735660428, 0.18647447332416245, 0.08594168117952505, 0.09155935679504035, 0.08431071356871322, 0.08157606921075944, 0.0852919778017649, 0.08632232862749478, 0.09305383765415787, 0.08465678630511653, 0.08406142960740903]}, "mutation_prompt": null}
{"id": "33696927-8d0c-48cb-ad1e-97dee147948a", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.6  # Slight adjustment for better balance\n        social = 1.8\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Modified nonlinear inertia decay for enhanced adaptive behavior\n        self.inertia = max(0.3, self.inertia * np.exp(-self.evaluations/self.budget))\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.3, 0.8)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = 0.9 if np.random.rand() > 0.2 else 0.6  # Adjusted dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Enhanced Self-Adaptive Mechanics and Robust Local Search.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.7870987350386937, 0.772518642027322, 0.787728678541876, 0.8010768155416359, 0.7858126277044558, 0.7981966111874281, 0.7662631058241139, 0.8087458627542605, 0.7690837498367729, 0.5896795087852476, 0.5735828463662223, 0.5565392737708605, 0.5894808973567274, 0.6017160046820762, 0.5639929848560422, 0.6312073057755399, 0.5848169343420315, 0.5868629083356047, 0.12061128999816606, 0.5494421317282103, 0.14190306480767445, 0.15382114983953887, 0.12259768362876533, 0.13144750102407776, 0.12365857783104839, 0.13151555098113643, 0.15351739436204825, 0.10301885915320586, 0.11447178468660424, 0.10561358261394438, 0.12129722162780476, 0.11000471569198766, 0.13611168566855814, 0.10043188316143792, 0.090043166015214, 0.12918190052949596, 0.9732621583689356, 0.9815608289967621, 0.9818510617897828, 0.9785027520351097, 0.9792564143828625, 0.9822065439283073, 0.9823095614839283, 0.9790506626627897, 0.9795413886462214, 0.6150983459887418, 0.5640108269027803, 0.6244951432421865, 0.6200267030611315, 0.6119185791232105, 0.5969960056467587, 0.6185226102900205, 0.628923972494331, 0.5949339759948769, 0.7736840356835168, 0.8046487424038944, 0.8013336804898411, 0.7933406383001566, 0.2609792155194338, 0.7613405818748401, 0.752482495741054, 0.8071122782778353, 0.7814998894663063, 0.5535532934233942, 0.1249929576570672, 0.48532480991894444, 0.3911384587307051, 0.3762792506817956, 0.1234822546160278, 0.4215854205785353, 0.5406292687387089, 0.4859706009434315, 0.123855055362601, 0.5143795616659781, 0.6237899346108242, 0.5185170478308194, 0.5752111884529714, 0.566800902011283, 0.4972075508505991, 0.4677454108165018, 0.5195901436728843, 0.1633924876113091, 0.5520351202485271, 0.49944070284297637, 0.4788820797054245, 0.28498921698036017, 0.22969785541125298, 0.16671335625782635, 0.5701972939703067, 0.45482112697308064, 0.6129089428234611, 0.5907074902564944, 0.6073925560819393, 0.6409840927704913, 0.5507468518094081, 0.5515036160881457, 0.5738718840343257, 0.6134334186133665, 0.48497291684096033, 0.06124641794126107, 0.16720493553082083, 0.10664120415307876, 0.3609224600080322, 0.3500717402695108, 0.3374551425988106, 0.15795686538134923, 0.312489430229574, 0.27776098960287465, 0.48682412743852366, 0.39643427067218806, 0.40635826776662887, 0.3309448225366828, 0.432681611970551, 0.4275533769512815, 0.4194937787969636, 0.40573408098205943, 0.384182725699451, 0.7127015145255844, 0.6942192942167968, 0.6823039128582049, 0.7255047010191809, 0.7209093524394025, 0.7416583847973427, 0.6573925306454509, 0.729329908825407, 0.7272781835635522, 0.10983758034885216, 0.0815814639913347, 0.14760364609163557, 0.09949933544094858, 0.12520233526896096, 0.10382086923047829, 0.11949443539224636, 0.13550067992282433, 0.14551652419676597, 0.2104166356200391, 0.24761253808470196, 0.16736004209546773, 0.21069957148426566, 0.3178747451948474, 0.20405493302824973, 0.2016023287136537, 0.1569435079983752, 0.32233515098417287, 0.4668648776898553, 0.42923520535418547, 0.49466073637936636, 0.5330050602939242, 0.48410328718593076, 0.5084100137276557, 0.5073371715241586, 0.5173061281215685, 0.4780557830217459, 0.3169162837845394, 0.3468065173831366, 0.29849109561110176, 0.20372234445480686, 0.3129465001155106, 0.418253610420402, 0.34608326596776173, 0.35200057405278784, 0.22062289763841458, 0.21610700492297152, 0.20980598541198692, 0.19895890469831579, 0.20282820136653212, 0.21265301681019122, 0.19955491410658677, 0.2485951948230275, 0.219186851133931, 0.21177511905542656, 0.21417891275971446, 0.2290515321020663, 0.19951361848862204, 0.2192480859003212, 0.20325848224644782, 0.1985522526013549, 0.19134310349214134, 0.19128419477329295, 0.20835075318747232, 0.2011130207583356, 0.18136518698602955, 0.15480346923505584, 0.8568033281825458, 0.1659355150040135, 0.8099436876802873, 0.15918779105992675, 0.1384718004653287, 0.8377792932980035, 0.7976384823121043, 0.7490010600090697, 0.3283129367391415, 0.20777238880548665, 0.7952854859082754, 0.6776086942188557, 0.802925508818296, 0.20273872256748282, 0.7480380828768712, 0.1979086250905704, 0.21813056777725037, 0.20362282800165876, 0.17768017110198275, 0.19108221134425207, 0.2050148328403255, 0.20468033155912202, 0.1988493882729343, 0.21505535447641733, 0.08928553143436235, 0.09693808402808768, 0.08848415275924182, 0.08921400340364438, 0.09332038547768096, 0.10457266009268973, 0.09776342520115244, 0.09885487006882432, 0.07588945782540701]}, "mutation_prompt": null}
{"id": "62759f67-33ae-4f05-b6ca-1aaa7474c584", "solution": "import numpy as np\n\nclass StochasticDualStrategyOpt_SAM_RLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 50\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.inertia = 0.9\n\n    def pso_update(self):\n        cognitive = 1.5  # Slight adjustment for better balance\n        social = 1.9\n        \n        for i in range(self.pop_size):\n            r1, r2 = np.random.rand(2)\n            self.velocities[i] = self.inertia * self.velocities[i] + \\\n                                 cognitive * r1 * (self.personal_best_positions[i] - self.particles[i]) + \\\n                                 social * r2 * (self.global_best_position - self.particles[i])\n            self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n        # Adaptive inertia for enhanced exploration-exploitation balance\n        self.inertia = 0.9 - 0.6 * (self.evaluations / self.budget)\n\n    def ade_mutation(self, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        F = np.random.uniform(0.4, 0.9)  # Fine-tuned mutation factor for robustness\n        return self.personal_best_positions[a] + F * (self.personal_best_positions[b] - self.personal_best_positions[c])\n    \n    def ade_crossover(self, parent, mutant):\n        cross_prob = np.linspace(0.7, 0.9, self.budget)[self.evaluations]  # Dynamic crossover rate\n        cross_points = np.random.rand(self.dim) < cross_prob\n        return np.where(cross_points, mutant, parent)\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # PSO phase with enhanced update rules\n            self.pso_update()\n\n            # Evaluate PSO particles\n            for i in range(self.pop_size):\n                score = func(self.particles[i])\n                self.evaluations += 1\n                \n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            if self.evaluations >= self.budget:\n                break\n\n            # ADE phase with refined mechanics\n            for i in range(self.pop_size):\n                mutant = self.ade_mutation(i)\n                trial = self.ade_crossover(self.particles[i], mutant)\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                score = func(trial)\n                self.evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = trial\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = trial\n\n        return self.global_best_position", "name": "StochasticDualStrategyOpt_SAM_RLS", "description": "Stochastic Dual-Strategy Optimization with Adaptive Inertia and Dynamic Crossover for Enhanced Local Exploration.", "configspace": "", "generation": 99, "fitness": 0.26081556765308606, "feedback": "The algorithm StochasticDualStrategyOpt_SAM_RLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "841a22b4-20af-495a-a14e-cb1f71375dac", "metadata": {"aucs": [0.5474274596002962, 0.5261613307720356, 0.5230164513339206, 0.5432579037443561, 0.5296085733675302, 0.5415150383411974, 0.46391361714696466, 0.5252064913670325, 0.4801589943553187, 0.2529424291850354, 0.21556680290256158, 0.1902241692505381, 0.21876329222404722, 0.21226445818794137, 0.21595945151712326, 0.2131171261990248, 0.21991491036756983, 0.20802120856496065, 0.10010288162025949, 0.10286167762331211, 0.10679931761478201, 0.11596362373326541, 0.09623201419596883, 0.10588453568972522, 0.12553476920776918, 0.08907317918713964, 0.12088969047108533, 0.07495297284165281, 0.08107276107657269, 0.09653675914525162, 0.09388395170875607, 0.10323059946709723, 0.11139386999398027, 0.09189225711706495, 0.09194304652543817, 0.10060654326632013, 0.9615879807065549, 0.9715598753908591, 0.9809321895146245, 0.9390294318837404, 0.9717641090666295, 0.9708858108823023, 0.9816243892687617, 0.9806861353769769, 0.9615054420162409, 0.2770993002820853, 0.20030660434752667, 0.057840500164733966, 0.27923382828166, 0.2715123346618945, 0.2951090213601054, 0.2635463524047169, 0.08348172200641968, 0.08782969560927956, 0.5318847301295813, 0.5140768738583176, 0.5335714514753338, 0.49305167774839564, 0.19255821383142468, 0.5333611973126384, 0.4966988639306601, 0.5402059970110361, 0.5099927301875515, 0.24446672711198314, 0.21907361908701461, 0.18842369719595697, 0.2509037309643851, 0.17998112944386357, 0.10635247148232707, 0.26685554981489856, 0.2252847204445888, 0.2381044287320251, 0.2563955509057064, 0.05171257553401287, 0.20722602149666747, 0.1599102382516625, 0.19814919074276227, 0.1824285271253232, 0.2567672664141898, 0.26574985217388447, 0.138731892093517, 0.13401401428793214, 0.05444735953814983, 0.11890709411870337, 0.07976492653326073, 0.14324920416551545, 0.10469491784699003, 0.11288642587288689, 0.11601143819502291, 0.10711125522212317, 0.21129001810094672, 0.2228622083565428, 0.21635825147389887, 0.22576139989497201, 0.21665124847913797, 0.10258629239353467, 0.21598924019100718, 0.21910050853606755, 0.23361000238545238, 0.06164668858771982, 0.02049303593771379, 0.033605553964063284, 0.03433470416436979, 0.07105167352333497, 0.027888785040010022, 0.04592270045485258, 0.04662072344632595, 0.04510464684861493, 0.13518955543779354, 0.12972317370085418, 0.1583486783307111, 0.15563447221365345, 0.16575967174174444, 0.1434038386973283, 0.1474990248374748, 0.13917425386063986, 0.1609659842000969, 0.4488036132656279, 0.4322715520081013, 0.42309514370426304, 0.42940922243533186, 0.4368236777513077, 0.43755926264312994, 0.3936613133441802, 0.44691587466926486, 0.4604574624083384, 0.09744366845269103, 0.08826882677372927, 0.23497159624846198, 0.08775222156765738, 0.12316568269853978, 0.11368275689872276, 0.12950348329668016, 0.11183669586055733, 0.11357935171159605, 0.28105184442701847, 0.1896321429316401, 0.17742687359760534, 0.22818588970826925, 0.23957360257354698, 0.12219448226087248, 0.17893834125878927, 0.13684270673865995, 0.3329697049540826, 0.3250232883120846, 0.2968595765888167, 0.2892679680106277, 0.3016558308897598, 0.2799524631614252, 0.33433228370884804, 0.3096479886909843, 0.32679204417790364, 0.3060879941029009, 0.2358584659249594, 0.229423815075253, 0.2253631430937919, 0.18497663007061105, 0.2338934132707473, 0.23136550394507538, 0.261275015285902, 0.22689096698053857, 0.22442053008647522, 0.17309623708283883, 0.17218522620833754, 0.20048875826451928, 0.20479502812086015, 0.20685008001037808, 0.2120697873049051, 0.19267762980118552, 0.1905521647420444, 0.1972564297844438, 0.17483928486794298, 0.18433071459111483, 0.33736154983754674, 0.19629018255400277, 0.17532944503114944, 0.1774360924863202, 0.1938107979921585, 0.22678626214468345, 0.17584513259494905, 0.6404700079480281, 0.6329698242323992, 0.1534866086301505, 0.6652186377140483, 0.1611840910686878, 0.42511276544386334, 0.535435826331363, 0.19368045166855852, 0.6387143372723794, 0.570275148809095, 0.1644352963303669, 0.576095174798964, 0.20144182809251565, 0.19390225461790056, 0.500234320519618, 0.5225830204198443, 0.1472083341751328, 0.19058140551277025, 0.18499467220208166, 0.18508831171629525, 0.19933764280420097, 0.1760478514040289, 0.18352460796662762, 0.20836992786772734, 0.17945163217558324, 0.18471616753678144, 0.1798286822362084, 0.08561621699814881, 0.09721153559669382, 0.07756557199642988, 0.07166101445598816, 0.0800131310448392, 0.080114698234245, 0.07902120508868427, 0.07334502641162022, 0.075109887542809]}, "mutation_prompt": null}
