{"id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid differential evolution and simulated annealing algorithm uses DE for exploration and SA for exploitation to solve black box optimization problems on a bounded domain.", "configspace": "", "generation": 0, "fitness": 0.4364669269525487, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.26.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7380721970578863, 0.7380721970578863, 0.7380721970578863, 0.7375136533338564, 0.7375136533338564, 0.7375136533338564, 0.740554964317617, 0.740554964317617, 0.740554964317617, 0.6974848727163516, 0.6974848727163516, 0.6974848727163516, 0.6984184111713431, 0.6984184111713431, 0.6984184111713431, 0.7001332183932478, 0.7001332183932478, 0.7001332183932478, 0.1545315552407701, 0.1545315552407701, 0.1545315552407701, 0.17019064520717475, 0.17019064520717475, 0.17019064520717475, 0.3858709170863601, 0.3858709170863601, 0.3858709170863601, 0.13746618178908743, 0.13746618178908743, 0.13746618178908743, 0.11366622310527308, 0.11366622310527308, 0.11366622310527308, 0.13028113434228383, 0.13028113434228383, 0.13028113434228383, 0.9536640163652037, 0.9536640163652037, 0.9536640163652037, 0.9604057095681846, 0.9604057095681846, 0.9604057095681846, 0.968280823268244, 0.968280823268244, 0.968280823268244, 0.6409985496938608, 0.6409985496938608, 0.6409985496938608, 0.6439376075420719, 0.6439376075420719, 0.6439376075420719, 0.6001011896664227, 0.6001011896664227, 0.6001011896664227, 0.8120262171847163, 0.8120262171847163, 0.8120262171847163, 0.7961142139156143, 0.7961142139156143, 0.7961142139156143, 0.7667913387939685, 0.7667913387939685, 0.7667913387939685, 0.5446553567576313, 0.5446553567576313, 0.5446553567576313, 0.5737521406348767, 0.5737521406348767, 0.5737521406348767, 0.5851788790342165, 0.5851788790342165, 0.5851788790342165, 0.12704409548414364, 0.12704409548414364, 0.12704409548414364, 0.5342920311358537, 0.5342920311358537, 0.5342920311358537, 0.5940078191486682, 0.5940078191486682, 0.5940078191486682, 0.5555925881202882, 0.5555925881202882, 0.5555925881202882, 0.5683960077405996, 0.5683960077405996, 0.5683960077405996, 0.5178920170152354, 0.5178920170152354, 0.5178920170152354, 0.657065533623304, 0.657065533623304, 0.657065533623304, 0.6288266446655457, 0.6288266446655457, 0.6288266446655457, 0.6624497643081431, 0.6624497643081431, 0.6624497643081431, 0.1023328178696804, 0.1023328178696804, 0.1023328178696804, 0.45072636227261464, 0.45072636227261464, 0.45072636227261464, 0.3160032630956958, 0.3160032630956958, 0.3160032630956958, 0.3990222487005435, 0.3990222487005435, 0.3990222487005435, 0.43281082501615753, 0.43281082501615753, 0.43281082501615753, 0.41705783926941176, 0.41705783926941176, 0.41705783926941176, 0.7133141004864747, 0.7133141004864747, 0.7133141004864747, 0.7079593998238731, 0.7079593998238731, 0.7079593998238731, 0.7000636589081152, 0.7000636589081152, 0.7000636589081152, 0.08658235564970618, 0.08658235564970618, 0.08658235564970618, 0.0844083955724183, 0.0844083955724183, 0.0844083955724183, 0.09487999206796449, 0.09487999206796449, 0.09487999206796449, 0.14081791239908237, 0.14081791239908237, 0.14081791239908237, 0.15051691235862885, 0.15051691235862885, 0.15051691235862885, 0.12475429477788891, 0.12475429477788891, 0.12475429477788891, 0.45535355721225446, 0.45535355721225446, 0.45535355721225446, 0.46617175770540586, 0.46617175770540586, 0.46617175770540586, 0.5617818963990117, 0.5617818963990117, 0.5617818963990117, 0.326725802046537, 0.326725802046537, 0.326725802046537, 0.2079190711786667, 0.2079190711786667, 0.2079190711786667, 0.3406143736195685, 0.3406143736195685, 0.3406143736195685, 0.20279373100001308, 0.20279373100001308, 0.20279373100001308, 0.18361243547798434, 0.18361243547798434, 0.18361243547798434, 0.2098745526212562, 0.2098745526212562, 0.2098745526212562, 0.2117804582387276, 0.2117804582387276, 0.2117804582387276, 0.5769726698889024, 0.5769726698889024, 0.5769726698889024, 0.5167487856483648, 0.5167487856483648, 0.5167487856483648, 0.8002578417723021, 0.8002578417723021, 0.8002578417723021, 0.7684762765441377, 0.7684762765441377, 0.7684762765441377, 0.19242314875454136, 0.19242314875454136, 0.19242314875454136, 0.2080526509484576, 0.2080526509484576, 0.2080526509484576, 0.19792779070966693, 0.19792779070966693, 0.19792779070966693, 0.18913607458364345, 0.18913607458364345, 0.18913607458364345, 0.1833957592674017, 0.1833957592674017, 0.1833957592674017, 0.2016145255125964, 0.2016145255125964, 0.2016145255125964, 0.1786760303063405, 0.1786760303063405, 0.1786760303063405, 0.08276341372658058, 0.08276341372658058, 0.08276341372658058, 0.06810804541011106, 0.06810804541011106, 0.06810804541011106, 0.07753119631473515, 0.07753119631473515, 0.07753119631473515]}, "mutation_prompt": null}
{"id": "724bd24b-f3fd-4bb7-94fd-b0b4477259dd", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid differential evolution and simulated annealing algorithm uses DE for exploration and SA for exploitation to solve black box optimization problems on a bounded domain.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.7380721970578863, 0.7380721970578863, 0.7380721970578863, 0.7375136533338564, 0.7375136533338564, 0.7375136533338564, 0.740554964317617, 0.740554964317617, 0.740554964317617, 0.6974848727163516, 0.6974848727163516, 0.6974848727163516, 0.6984184111713431, 0.6984184111713431, 0.6984184111713431, 0.7001332183932478, 0.7001332183932478, 0.7001332183932478, 0.1545315552407701, 0.1545315552407701, 0.1545315552407701, 0.17019064520717475, 0.17019064520717475, 0.17019064520717475, 0.3858709170863601, 0.3858709170863601, 0.3858709170863601, 0.13746618178908743, 0.13746618178908743, 0.13746618178908743, 0.11366622310527308, 0.11366622310527308, 0.11366622310527308, 0.13028113434228383, 0.13028113434228383, 0.13028113434228383, 0.9536640163652037, 0.9536640163652037, 0.9536640163652037, 0.9604057095681846, 0.9604057095681846, 0.9604057095681846, 0.968280823268244, 0.968280823268244, 0.968280823268244, 0.6409985496938608, 0.6409985496938608, 0.6409985496938608, 0.6439376075420719, 0.6439376075420719, 0.6439376075420719, 0.6001011896664227, 0.6001011896664227, 0.6001011896664227, 0.8120262171847163, 0.8120262171847163, 0.8120262171847163, 0.7961142139156143, 0.7961142139156143, 0.7961142139156143, 0.7667913387939685, 0.7667913387939685, 0.7667913387939685, 0.5446553567576313, 0.5446553567576313, 0.5446553567576313, 0.5737521406348767, 0.5737521406348767, 0.5737521406348767, 0.5851788790342165, 0.5851788790342165, 0.5851788790342165, 0.12704409548414364, 0.12704409548414364, 0.12704409548414364, 0.5342920311358537, 0.5342920311358537, 0.5342920311358537, 0.5940078191486682, 0.5940078191486682, 0.5940078191486682, 0.5555925881202882, 0.5555925881202882, 0.5555925881202882, 0.5683960077405996, 0.5683960077405996, 0.5683960077405996, 0.5178920170152354, 0.5178920170152354, 0.5178920170152354, 0.657065533623304, 0.657065533623304, 0.657065533623304, 0.6288266446655457, 0.6288266446655457, 0.6288266446655457, 0.6624497643081431, 0.6624497643081431, 0.6624497643081431, 0.1023328178696804, 0.1023328178696804, 0.1023328178696804, 0.45072636227261464, 0.45072636227261464, 0.45072636227261464, 0.3160032630956958, 0.3160032630956958, 0.3160032630956958, 0.3990222487005435, 0.3990222487005435, 0.3990222487005435, 0.43281082501615753, 0.43281082501615753, 0.43281082501615753, 0.41705783926941176, 0.41705783926941176, 0.41705783926941176, 0.7133141004864747, 0.7133141004864747, 0.7133141004864747, 0.7079593998238731, 0.7079593998238731, 0.7079593998238731, 0.7000636589081152, 0.7000636589081152, 0.7000636589081152, 0.08658235564970618, 0.08658235564970618, 0.08658235564970618, 0.0844083955724183, 0.0844083955724183, 0.0844083955724183, 0.09487999206796449, 0.09487999206796449, 0.09487999206796449, 0.14081791239908237, 0.14081791239908237, 0.14081791239908237, 0.15051691235862885, 0.15051691235862885, 0.15051691235862885, 0.12475429477788891, 0.12475429477788891, 0.12475429477788891, 0.45535355721225446, 0.45535355721225446, 0.45535355721225446, 0.46617175770540586, 0.46617175770540586, 0.46617175770540586, 0.5617818963990117, 0.5617818963990117, 0.5617818963990117, 0.326725802046537, 0.326725802046537, 0.326725802046537, 0.2079190711786667, 0.2079190711786667, 0.2079190711786667, 0.3406143736195685, 0.3406143736195685, 0.3406143736195685, 0.20279373100001308, 0.20279373100001308, 0.20279373100001308, 0.18361243547798434, 0.18361243547798434, 0.18361243547798434, 0.2098745526212562, 0.2098745526212562, 0.2098745526212562, 0.2117804582387276, 0.2117804582387276, 0.2117804582387276, 0.5769726698889024, 0.5769726698889024, 0.5769726698889024, 0.5167487856483648, 0.5167487856483648, 0.5167487856483648, 0.8002578417723021, 0.8002578417723021, 0.8002578417723021, 0.7684762765441377, 0.7684762765441377, 0.7684762765441377, 0.19242314875454136, 0.19242314875454136, 0.19242314875454136, 0.2080526509484576, 0.2080526509484576, 0.2080526509484576, 0.19792779070966693, 0.19792779070966693, 0.19792779070966693, 0.18913607458364345, 0.18913607458364345, 0.18913607458364345, 0.1833957592674017, 0.1833957592674017, 0.1833957592674017, 0.2016145255125964, 0.2016145255125964, 0.2016145255125964, 0.1786760303063405, 0.1786760303063405, 0.1786760303063405, 0.08276341372658058, 0.08276341372658058, 0.08276341372658058, 0.06810804541011106, 0.06810804541011106, 0.06810804541011106, 0.07753119631473515, 0.07753119631473515, 0.07753119631473515]}, "mutation_prompt": null}
{"id": "03c05679-24d3-4839-b121-76ccc16c3f27", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid differential evolution and simulated annealing algorithm uses DE for exploration and SA for exploitation to solve black box optimization problems on a bounded domain.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.7380721970578863, 0.7380721970578863, 0.7380721970578863, 0.7375136533338564, 0.7375136533338564, 0.7375136533338564, 0.740554964317617, 0.740554964317617, 0.740554964317617, 0.6974848727163516, 0.6974848727163516, 0.6974848727163516, 0.6984184111713431, 0.6984184111713431, 0.6984184111713431, 0.7001332183932478, 0.7001332183932478, 0.7001332183932478, 0.1545315552407701, 0.1545315552407701, 0.1545315552407701, 0.17019064520717475, 0.17019064520717475, 0.17019064520717475, 0.3858709170863601, 0.3858709170863601, 0.3858709170863601, 0.13746618178908743, 0.13746618178908743, 0.13746618178908743, 0.11366622310527308, 0.11366622310527308, 0.11366622310527308, 0.13028113434228383, 0.13028113434228383, 0.13028113434228383, 0.9536640163652037, 0.9536640163652037, 0.9536640163652037, 0.9604057095681846, 0.9604057095681846, 0.9604057095681846, 0.968280823268244, 0.968280823268244, 0.968280823268244, 0.6409985496938608, 0.6409985496938608, 0.6409985496938608, 0.6439376075420719, 0.6439376075420719, 0.6439376075420719, 0.6001011896664227, 0.6001011896664227, 0.6001011896664227, 0.8120262171847163, 0.8120262171847163, 0.8120262171847163, 0.7961142139156143, 0.7961142139156143, 0.7961142139156143, 0.7667913387939685, 0.7667913387939685, 0.7667913387939685, 0.5446553567576313, 0.5446553567576313, 0.5446553567576313, 0.5737521406348767, 0.5737521406348767, 0.5737521406348767, 0.5851788790342165, 0.5851788790342165, 0.5851788790342165, 0.12704409548414364, 0.12704409548414364, 0.12704409548414364, 0.5342920311358537, 0.5342920311358537, 0.5342920311358537, 0.5940078191486682, 0.5940078191486682, 0.5940078191486682, 0.5555925881202882, 0.5555925881202882, 0.5555925881202882, 0.5683960077405996, 0.5683960077405996, 0.5683960077405996, 0.5178920170152354, 0.5178920170152354, 0.5178920170152354, 0.657065533623304, 0.657065533623304, 0.657065533623304, 0.6288266446655457, 0.6288266446655457, 0.6288266446655457, 0.6624497643081431, 0.6624497643081431, 0.6624497643081431, 0.1023328178696804, 0.1023328178696804, 0.1023328178696804, 0.45072636227261464, 0.45072636227261464, 0.45072636227261464, 0.3160032630956958, 0.3160032630956958, 0.3160032630956958, 0.3990222487005435, 0.3990222487005435, 0.3990222487005435, 0.43281082501615753, 0.43281082501615753, 0.43281082501615753, 0.41705783926941176, 0.41705783926941176, 0.41705783926941176, 0.7133141004864747, 0.7133141004864747, 0.7133141004864747, 0.7079593998238731, 0.7079593998238731, 0.7079593998238731, 0.7000636589081152, 0.7000636589081152, 0.7000636589081152, 0.08658235564970618, 0.08658235564970618, 0.08658235564970618, 0.0844083955724183, 0.0844083955724183, 0.0844083955724183, 0.09487999206796449, 0.09487999206796449, 0.09487999206796449, 0.14081791239908237, 0.14081791239908237, 0.14081791239908237, 0.15051691235862885, 0.15051691235862885, 0.15051691235862885, 0.12475429477788891, 0.12475429477788891, 0.12475429477788891, 0.45535355721225446, 0.45535355721225446, 0.45535355721225446, 0.46617175770540586, 0.46617175770540586, 0.46617175770540586, 0.5617818963990117, 0.5617818963990117, 0.5617818963990117, 0.326725802046537, 0.326725802046537, 0.326725802046537, 0.2079190711786667, 0.2079190711786667, 0.2079190711786667, 0.3406143736195685, 0.3406143736195685, 0.3406143736195685, 0.20279373100001308, 0.20279373100001308, 0.20279373100001308, 0.18361243547798434, 0.18361243547798434, 0.18361243547798434, 0.2098745526212562, 0.2098745526212562, 0.2098745526212562, 0.2117804582387276, 0.2117804582387276, 0.2117804582387276, 0.5769726698889024, 0.5769726698889024, 0.5769726698889024, 0.5167487856483648, 0.5167487856483648, 0.5167487856483648, 0.8002578417723021, 0.8002578417723021, 0.8002578417723021, 0.7684762765441377, 0.7684762765441377, 0.7684762765441377, 0.19242314875454136, 0.19242314875454136, 0.19242314875454136, 0.2080526509484576, 0.2080526509484576, 0.2080526509484576, 0.19792779070966693, 0.19792779070966693, 0.19792779070966693, 0.18913607458364345, 0.18913607458364345, 0.18913607458364345, 0.1833957592674017, 0.1833957592674017, 0.1833957592674017, 0.2016145255125964, 0.2016145255125964, 0.2016145255125964, 0.1786760303063405, 0.1786760303063405, 0.1786760303063405, 0.08276341372658058, 0.08276341372658058, 0.08276341372658058, 0.06810804541011106, 0.06810804541011106, 0.06810804541011106, 0.07753119631473515, 0.07753119631473515, 0.07753119631473515]}, "mutation_prompt": null}
{"id": "338a7a50-7a98-4fec-8025-52743b4164c5", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid differential evolution and simulated annealing algorithm uses DE for exploration and SA for exploitation to solve black box optimization problems on a bounded domain.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.7380721970578863, 0.7380721970578863, 0.7380721970578863, 0.7375136533338564, 0.7375136533338564, 0.7375136533338564, 0.740554964317617, 0.740554964317617, 0.740554964317617, 0.6974848727163516, 0.6974848727163516, 0.6974848727163516, 0.6984184111713431, 0.6984184111713431, 0.6984184111713431, 0.7001332183932478, 0.7001332183932478, 0.7001332183932478, 0.1545315552407701, 0.1545315552407701, 0.1545315552407701, 0.17019064520717475, 0.17019064520717475, 0.17019064520717475, 0.3858709170863601, 0.3858709170863601, 0.3858709170863601, 0.13746618178908743, 0.13746618178908743, 0.13746618178908743, 0.11366622310527308, 0.11366622310527308, 0.11366622310527308, 0.13028113434228383, 0.13028113434228383, 0.13028113434228383, 0.9536640163652037, 0.9536640163652037, 0.9536640163652037, 0.9604057095681846, 0.9604057095681846, 0.9604057095681846, 0.968280823268244, 0.968280823268244, 0.968280823268244, 0.6409985496938608, 0.6409985496938608, 0.6409985496938608, 0.6439376075420719, 0.6439376075420719, 0.6439376075420719, 0.6001011896664227, 0.6001011896664227, 0.6001011896664227, 0.8120262171847163, 0.8120262171847163, 0.8120262171847163, 0.7961142139156143, 0.7961142139156143, 0.7961142139156143, 0.7667913387939685, 0.7667913387939685, 0.7667913387939685, 0.5446553567576313, 0.5446553567576313, 0.5446553567576313, 0.5737521406348767, 0.5737521406348767, 0.5737521406348767, 0.5851788790342165, 0.5851788790342165, 0.5851788790342165, 0.12704409548414364, 0.12704409548414364, 0.12704409548414364, 0.5342920311358537, 0.5342920311358537, 0.5342920311358537, 0.5940078191486682, 0.5940078191486682, 0.5940078191486682, 0.5555925881202882, 0.5555925881202882, 0.5555925881202882, 0.5683960077405996, 0.5683960077405996, 0.5683960077405996, 0.5178920170152354, 0.5178920170152354, 0.5178920170152354, 0.657065533623304, 0.657065533623304, 0.657065533623304, 0.6288266446655457, 0.6288266446655457, 0.6288266446655457, 0.6624497643081431, 0.6624497643081431, 0.6624497643081431, 0.1023328178696804, 0.1023328178696804, 0.1023328178696804, 0.45072636227261464, 0.45072636227261464, 0.45072636227261464, 0.3160032630956958, 0.3160032630956958, 0.3160032630956958, 0.3990222487005435, 0.3990222487005435, 0.3990222487005435, 0.43281082501615753, 0.43281082501615753, 0.43281082501615753, 0.41705783926941176, 0.41705783926941176, 0.41705783926941176, 0.7133141004864747, 0.7133141004864747, 0.7133141004864747, 0.7079593998238731, 0.7079593998238731, 0.7079593998238731, 0.7000636589081152, 0.7000636589081152, 0.7000636589081152, 0.08658235564970618, 0.08658235564970618, 0.08658235564970618, 0.0844083955724183, 0.0844083955724183, 0.0844083955724183, 0.09487999206796449, 0.09487999206796449, 0.09487999206796449, 0.14081791239908237, 0.14081791239908237, 0.14081791239908237, 0.15051691235862885, 0.15051691235862885, 0.15051691235862885, 0.12475429477788891, 0.12475429477788891, 0.12475429477788891, 0.45535355721225446, 0.45535355721225446, 0.45535355721225446, 0.46617175770540586, 0.46617175770540586, 0.46617175770540586, 0.5617818963990117, 0.5617818963990117, 0.5617818963990117, 0.326725802046537, 0.326725802046537, 0.326725802046537, 0.2079190711786667, 0.2079190711786667, 0.2079190711786667, 0.3406143736195685, 0.3406143736195685, 0.3406143736195685, 0.20279373100001308, 0.20279373100001308, 0.20279373100001308, 0.18361243547798434, 0.18361243547798434, 0.18361243547798434, 0.2098745526212562, 0.2098745526212562, 0.2098745526212562, 0.2117804582387276, 0.2117804582387276, 0.2117804582387276, 0.5769726698889024, 0.5769726698889024, 0.5769726698889024, 0.5167487856483648, 0.5167487856483648, 0.5167487856483648, 0.8002578417723021, 0.8002578417723021, 0.8002578417723021, 0.7684762765441377, 0.7684762765441377, 0.7684762765441377, 0.19242314875454136, 0.19242314875454136, 0.19242314875454136, 0.2080526509484576, 0.2080526509484576, 0.2080526509484576, 0.19792779070966693, 0.19792779070966693, 0.19792779070966693, 0.18913607458364345, 0.18913607458364345, 0.18913607458364345, 0.1833957592674017, 0.1833957592674017, 0.1833957592674017, 0.2016145255125964, 0.2016145255125964, 0.2016145255125964, 0.1786760303063405, 0.1786760303063405, 0.1786760303063405, 0.08276341372658058, 0.08276341372658058, 0.08276341372658058, 0.06810804541011106, 0.06810804541011106, 0.06810804541011106, 0.07753119631473515, 0.07753119631473515, 0.07753119631473515]}, "mutation_prompt": null}
{"id": "fc9bee53-9523-46eb-aa26-1185dbec8475", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid differential evolution and simulated annealing algorithm uses DE for exploration and SA for exploitation to solve black box optimization problems on a bounded domain.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.7380721970578863, 0.7380721970578863, 0.7380721970578863, 0.7375136533338564, 0.7375136533338564, 0.7375136533338564, 0.740554964317617, 0.740554964317617, 0.740554964317617, 0.6974848727163516, 0.6974848727163516, 0.6974848727163516, 0.6984184111713431, 0.6984184111713431, 0.6984184111713431, 0.7001332183932478, 0.7001332183932478, 0.7001332183932478, 0.1545315552407701, 0.1545315552407701, 0.1545315552407701, 0.17019064520717475, 0.17019064520717475, 0.17019064520717475, 0.3858709170863601, 0.3858709170863601, 0.3858709170863601, 0.13746618178908743, 0.13746618178908743, 0.13746618178908743, 0.11366622310527308, 0.11366622310527308, 0.11366622310527308, 0.13028113434228383, 0.13028113434228383, 0.13028113434228383, 0.9536640163652037, 0.9536640163652037, 0.9536640163652037, 0.9604057095681846, 0.9604057095681846, 0.9604057095681846, 0.968280823268244, 0.968280823268244, 0.968280823268244, 0.6409985496938608, 0.6409985496938608, 0.6409985496938608, 0.6439376075420719, 0.6439376075420719, 0.6439376075420719, 0.6001011896664227, 0.6001011896664227, 0.6001011896664227, 0.8120262171847163, 0.8120262171847163, 0.8120262171847163, 0.7961142139156143, 0.7961142139156143, 0.7961142139156143, 0.7667913387939685, 0.7667913387939685, 0.7667913387939685, 0.5446553567576313, 0.5446553567576313, 0.5446553567576313, 0.5737521406348767, 0.5737521406348767, 0.5737521406348767, 0.5851788790342165, 0.5851788790342165, 0.5851788790342165, 0.12704409548414364, 0.12704409548414364, 0.12704409548414364, 0.5342920311358537, 0.5342920311358537, 0.5342920311358537, 0.5940078191486682, 0.5940078191486682, 0.5940078191486682, 0.5555925881202882, 0.5555925881202882, 0.5555925881202882, 0.5683960077405996, 0.5683960077405996, 0.5683960077405996, 0.5178920170152354, 0.5178920170152354, 0.5178920170152354, 0.657065533623304, 0.657065533623304, 0.657065533623304, 0.6288266446655457, 0.6288266446655457, 0.6288266446655457, 0.6624497643081431, 0.6624497643081431, 0.6624497643081431, 0.1023328178696804, 0.1023328178696804, 0.1023328178696804, 0.45072636227261464, 0.45072636227261464, 0.45072636227261464, 0.3160032630956958, 0.3160032630956958, 0.3160032630956958, 0.3990222487005435, 0.3990222487005435, 0.3990222487005435, 0.43281082501615753, 0.43281082501615753, 0.43281082501615753, 0.41705783926941176, 0.41705783926941176, 0.41705783926941176, 0.7133141004864747, 0.7133141004864747, 0.7133141004864747, 0.7079593998238731, 0.7079593998238731, 0.7079593998238731, 0.7000636589081152, 0.7000636589081152, 0.7000636589081152, 0.08658235564970618, 0.08658235564970618, 0.08658235564970618, 0.0844083955724183, 0.0844083955724183, 0.0844083955724183, 0.09487999206796449, 0.09487999206796449, 0.09487999206796449, 0.14081791239908237, 0.14081791239908237, 0.14081791239908237, 0.15051691235862885, 0.15051691235862885, 0.15051691235862885, 0.12475429477788891, 0.12475429477788891, 0.12475429477788891, 0.45535355721225446, 0.45535355721225446, 0.45535355721225446, 0.46617175770540586, 0.46617175770540586, 0.46617175770540586, 0.5617818963990117, 0.5617818963990117, 0.5617818963990117, 0.326725802046537, 0.326725802046537, 0.326725802046537, 0.2079190711786667, 0.2079190711786667, 0.2079190711786667, 0.3406143736195685, 0.3406143736195685, 0.3406143736195685, 0.20279373100001308, 0.20279373100001308, 0.20279373100001308, 0.18361243547798434, 0.18361243547798434, 0.18361243547798434, 0.2098745526212562, 0.2098745526212562, 0.2098745526212562, 0.2117804582387276, 0.2117804582387276, 0.2117804582387276, 0.5769726698889024, 0.5769726698889024, 0.5769726698889024, 0.5167487856483648, 0.5167487856483648, 0.5167487856483648, 0.8002578417723021, 0.8002578417723021, 0.8002578417723021, 0.7684762765441377, 0.7684762765441377, 0.7684762765441377, 0.19242314875454136, 0.19242314875454136, 0.19242314875454136, 0.2080526509484576, 0.2080526509484576, 0.2080526509484576, 0.19792779070966693, 0.19792779070966693, 0.19792779070966693, 0.18913607458364345, 0.18913607458364345, 0.18913607458364345, 0.1833957592674017, 0.1833957592674017, 0.1833957592674017, 0.2016145255125964, 0.2016145255125964, 0.2016145255125964, 0.1786760303063405, 0.1786760303063405, 0.1786760303063405, 0.08276341372658058, 0.08276341372658058, 0.08276341372658058, 0.06810804541011106, 0.06810804541011106, 0.06810804541011106, 0.07753119631473515, 0.07753119631473515, 0.07753119631473515]}, "mutation_prompt": null}
{"id": "4961bef5-1289-423a-8f24-1106d4f0cccf", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid differential evolution and simulated annealing algorithm uses DE for exploration and SA for exploitation to solve black box optimization problems on a bounded domain.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.7380721970578863, 0.7380721970578863, 0.7380721970578863, 0.7375136533338564, 0.7375136533338564, 0.7375136533338564, 0.740554964317617, 0.740554964317617, 0.740554964317617, 0.6974848727163516, 0.6974848727163516, 0.6974848727163516, 0.6984184111713431, 0.6984184111713431, 0.6984184111713431, 0.7001332183932478, 0.7001332183932478, 0.7001332183932478, 0.1545315552407701, 0.1545315552407701, 0.1545315552407701, 0.17019064520717475, 0.17019064520717475, 0.17019064520717475, 0.3858709170863601, 0.3858709170863601, 0.3858709170863601, 0.13746618178908743, 0.13746618178908743, 0.13746618178908743, 0.11366622310527308, 0.11366622310527308, 0.11366622310527308, 0.13028113434228383, 0.13028113434228383, 0.13028113434228383, 0.9536640163652037, 0.9536640163652037, 0.9536640163652037, 0.9604057095681846, 0.9604057095681846, 0.9604057095681846, 0.968280823268244, 0.968280823268244, 0.968280823268244, 0.6409985496938608, 0.6409985496938608, 0.6409985496938608, 0.6439376075420719, 0.6439376075420719, 0.6439376075420719, 0.6001011896664227, 0.6001011896664227, 0.6001011896664227, 0.8120262171847163, 0.8120262171847163, 0.8120262171847163, 0.7961142139156143, 0.7961142139156143, 0.7961142139156143, 0.7667913387939685, 0.7667913387939685, 0.7667913387939685, 0.5446553567576313, 0.5446553567576313, 0.5446553567576313, 0.5737521406348767, 0.5737521406348767, 0.5737521406348767, 0.5851788790342165, 0.5851788790342165, 0.5851788790342165, 0.12704409548414364, 0.12704409548414364, 0.12704409548414364, 0.5342920311358537, 0.5342920311358537, 0.5342920311358537, 0.5940078191486682, 0.5940078191486682, 0.5940078191486682, 0.5555925881202882, 0.5555925881202882, 0.5555925881202882, 0.5683960077405996, 0.5683960077405996, 0.5683960077405996, 0.5178920170152354, 0.5178920170152354, 0.5178920170152354, 0.657065533623304, 0.657065533623304, 0.657065533623304, 0.6288266446655457, 0.6288266446655457, 0.6288266446655457, 0.6624497643081431, 0.6624497643081431, 0.6624497643081431, 0.1023328178696804, 0.1023328178696804, 0.1023328178696804, 0.45072636227261464, 0.45072636227261464, 0.45072636227261464, 0.3160032630956958, 0.3160032630956958, 0.3160032630956958, 0.3990222487005435, 0.3990222487005435, 0.3990222487005435, 0.43281082501615753, 0.43281082501615753, 0.43281082501615753, 0.41705783926941176, 0.41705783926941176, 0.41705783926941176, 0.7133141004864747, 0.7133141004864747, 0.7133141004864747, 0.7079593998238731, 0.7079593998238731, 0.7079593998238731, 0.7000636589081152, 0.7000636589081152, 0.7000636589081152, 0.08658235564970618, 0.08658235564970618, 0.08658235564970618, 0.0844083955724183, 0.0844083955724183, 0.0844083955724183, 0.09487999206796449, 0.09487999206796449, 0.09487999206796449, 0.14081791239908237, 0.14081791239908237, 0.14081791239908237, 0.15051691235862885, 0.15051691235862885, 0.15051691235862885, 0.12475429477788891, 0.12475429477788891, 0.12475429477788891, 0.45535355721225446, 0.45535355721225446, 0.45535355721225446, 0.46617175770540586, 0.46617175770540586, 0.46617175770540586, 0.5617818963990117, 0.5617818963990117, 0.5617818963990117, 0.326725802046537, 0.326725802046537, 0.326725802046537, 0.2079190711786667, 0.2079190711786667, 0.2079190711786667, 0.3406143736195685, 0.3406143736195685, 0.3406143736195685, 0.20279373100001308, 0.20279373100001308, 0.20279373100001308, 0.18361243547798434, 0.18361243547798434, 0.18361243547798434, 0.2098745526212562, 0.2098745526212562, 0.2098745526212562, 0.2117804582387276, 0.2117804582387276, 0.2117804582387276, 0.5769726698889024, 0.5769726698889024, 0.5769726698889024, 0.5167487856483648, 0.5167487856483648, 0.5167487856483648, 0.8002578417723021, 0.8002578417723021, 0.8002578417723021, 0.7684762765441377, 0.7684762765441377, 0.7684762765441377, 0.19242314875454136, 0.19242314875454136, 0.19242314875454136, 0.2080526509484576, 0.2080526509484576, 0.2080526509484576, 0.19792779070966693, 0.19792779070966693, 0.19792779070966693, 0.18913607458364345, 0.18913607458364345, 0.18913607458364345, 0.1833957592674017, 0.1833957592674017, 0.1833957592674017, 0.2016145255125964, 0.2016145255125964, 0.2016145255125964, 0.1786760303063405, 0.1786760303063405, 0.1786760303063405, 0.08276341372658058, 0.08276341372658058, 0.08276341372658058, 0.06810804541011106, 0.06810804541011106, 0.06810804541011106, 0.07753119631473515, 0.07753119631473515, 0.07753119631473515]}, "mutation_prompt": null}
{"id": "c6d9786b-1485-409d-b7ea-d933c8777a86", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid differential evolution and simulated annealing algorithm uses DE for exploration and SA for exploitation to solve black box optimization problems on a bounded domain.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.7380721970578863, 0.7380721970578863, 0.7380721970578863, 0.7375136533338564, 0.7375136533338564, 0.7375136533338564, 0.740554964317617, 0.740554964317617, 0.740554964317617, 0.6974848727163516, 0.6974848727163516, 0.6974848727163516, 0.6984184111713431, 0.6984184111713431, 0.6984184111713431, 0.7001332183932478, 0.7001332183932478, 0.7001332183932478, 0.1545315552407701, 0.1545315552407701, 0.1545315552407701, 0.17019064520717475, 0.17019064520717475, 0.17019064520717475, 0.3858709170863601, 0.3858709170863601, 0.3858709170863601, 0.13746618178908743, 0.13746618178908743, 0.13746618178908743, 0.11366622310527308, 0.11366622310527308, 0.11366622310527308, 0.13028113434228383, 0.13028113434228383, 0.13028113434228383, 0.9536640163652037, 0.9536640163652037, 0.9536640163652037, 0.9604057095681846, 0.9604057095681846, 0.9604057095681846, 0.968280823268244, 0.968280823268244, 0.968280823268244, 0.6409985496938608, 0.6409985496938608, 0.6409985496938608, 0.6439376075420719, 0.6439376075420719, 0.6439376075420719, 0.6001011896664227, 0.6001011896664227, 0.6001011896664227, 0.8120262171847163, 0.8120262171847163, 0.8120262171847163, 0.7961142139156143, 0.7961142139156143, 0.7961142139156143, 0.7667913387939685, 0.7667913387939685, 0.7667913387939685, 0.5446553567576313, 0.5446553567576313, 0.5446553567576313, 0.5737521406348767, 0.5737521406348767, 0.5737521406348767, 0.5851788790342165, 0.5851788790342165, 0.5851788790342165, 0.12704409548414364, 0.12704409548414364, 0.12704409548414364, 0.5342920311358537, 0.5342920311358537, 0.5342920311358537, 0.5940078191486682, 0.5940078191486682, 0.5940078191486682, 0.5555925881202882, 0.5555925881202882, 0.5555925881202882, 0.5683960077405996, 0.5683960077405996, 0.5683960077405996, 0.5178920170152354, 0.5178920170152354, 0.5178920170152354, 0.657065533623304, 0.657065533623304, 0.657065533623304, 0.6288266446655457, 0.6288266446655457, 0.6288266446655457, 0.6624497643081431, 0.6624497643081431, 0.6624497643081431, 0.1023328178696804, 0.1023328178696804, 0.1023328178696804, 0.45072636227261464, 0.45072636227261464, 0.45072636227261464, 0.3160032630956958, 0.3160032630956958, 0.3160032630956958, 0.3990222487005435, 0.3990222487005435, 0.3990222487005435, 0.43281082501615753, 0.43281082501615753, 0.43281082501615753, 0.41705783926941176, 0.41705783926941176, 0.41705783926941176, 0.7133141004864747, 0.7133141004864747, 0.7133141004864747, 0.7079593998238731, 0.7079593998238731, 0.7079593998238731, 0.7000636589081152, 0.7000636589081152, 0.7000636589081152, 0.08658235564970618, 0.08658235564970618, 0.08658235564970618, 0.0844083955724183, 0.0844083955724183, 0.0844083955724183, 0.09487999206796449, 0.09487999206796449, 0.09487999206796449, 0.14081791239908237, 0.14081791239908237, 0.14081791239908237, 0.15051691235862885, 0.15051691235862885, 0.15051691235862885, 0.12475429477788891, 0.12475429477788891, 0.12475429477788891, 0.45535355721225446, 0.45535355721225446, 0.45535355721225446, 0.46617175770540586, 0.46617175770540586, 0.46617175770540586, 0.5617818963990117, 0.5617818963990117, 0.5617818963990117, 0.326725802046537, 0.326725802046537, 0.326725802046537, 0.2079190711786667, 0.2079190711786667, 0.2079190711786667, 0.3406143736195685, 0.3406143736195685, 0.3406143736195685, 0.20279373100001308, 0.20279373100001308, 0.20279373100001308, 0.18361243547798434, 0.18361243547798434, 0.18361243547798434, 0.2098745526212562, 0.2098745526212562, 0.2098745526212562, 0.2117804582387276, 0.2117804582387276, 0.2117804582387276, 0.5769726698889024, 0.5769726698889024, 0.5769726698889024, 0.5167487856483648, 0.5167487856483648, 0.5167487856483648, 0.8002578417723021, 0.8002578417723021, 0.8002578417723021, 0.7684762765441377, 0.7684762765441377, 0.7684762765441377, 0.19242314875454136, 0.19242314875454136, 0.19242314875454136, 0.2080526509484576, 0.2080526509484576, 0.2080526509484576, 0.19792779070966693, 0.19792779070966693, 0.19792779070966693, 0.18913607458364345, 0.18913607458364345, 0.18913607458364345, 0.1833957592674017, 0.1833957592674017, 0.1833957592674017, 0.2016145255125964, 0.2016145255125964, 0.2016145255125964, 0.1786760303063405, 0.1786760303063405, 0.1786760303063405, 0.08276341372658058, 0.08276341372658058, 0.08276341372658058, 0.06810804541011106, 0.06810804541011106, 0.06810804541011106, 0.07753119631473515, 0.07753119631473515, 0.07753119631473515]}, "mutation_prompt": null}
{"id": "abe77507-a2a4-4bcf-8ed1-7f9c985df552", "solution": "import numpy as np\n\nclass EnhancedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n        self.adaptive_factor = 0.1  # Adaptive component for mutation\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        best_fitness = np.min(fitness)\n        best_individual = population[np.argmin(fitness)]\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice([idx for idx in range(self.pop_size) if idx != i], 3, replace=False)\n                x1, x2, x3 = population[indices]\n                success_rate = (self.budget - evaluations) / self.budget  # Dynamic success rate\n                \n                # Adaptive mutation factor based on success rate\n                adaptive_mutation = self.mutation_factor + self.adaptive_factor * success_rate\n                mutant_vector = np.clip(x1 + adaptive_mutation * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Self-adaptive crossover strategy\n                adaptive_crossover_rate = self.crossover_rate * (1 - success_rate)\n                crossover_mask = np.random.rand(self.dim) < adaptive_crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_individual = trial_vector\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        return best_individual, best_fitness", "name": "EnhancedHybridDESA", "description": "An enhanced hybrid of differential evolution and simulated annealing augmented with adaptive mutation and self-adaptive crossover strategies for improved exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.2714089365330348, "feedback": "The algorithm EnhancedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.7042008904410899, 0.7042008904410899, 0.7042008904410899, 0.7019366120750794, 0.7019366120750794, 0.7019366120750794, 0.6953783401338067, 0.6953783401338067, 0.6953783401338067, 0.5669240058387367, 0.5669240058387367, 0.5669240058387367, 0.5734855097775513, 0.5734855097775513, 0.5734855097775513, 0.5935100352851961, 0.5935100352851961, 0.5935100352851961, 0.5343596756846857, 0.5343596756846857, 0.5343596756846857, 0.5564783334970778, 0.5564783334970778, 0.5564783334970778, 0.5458524789824202, 0.5458524789824202, 0.5458524789824202, 0.493949365655871, 0.493949365655871, 0.493949365655871, 0.47148302624960303, 0.47148302624960303, 0.47148302624960303, 0.47000714039686375, 0.47000714039686375, 0.47000714039686375, 0.8996189393798038, 0.8996189393798038, 0.8996189393798038, 0.8976075041589371, 0.8976075041589371, 0.8976075041589371, 0.8929427197370565, 0.8929427197370565, 0.8929427197370565, 0.27523001186097507, 0.27523001186097507, 0.27523001186097507, 0.2772530649263434, 0.2772530649263434, 0.2772530649263434, 0.24843418150260133, 0.24843418150260133, 0.24843418150260133, 0.2672709767770861, 0.2672709767770861, 0.2672709767770861, 0.26605150117008103, 0.26605150117008103, 0.26605150117008103, 0.28580319123352027, 0.28580319123352027, 0.28580319123352027, 0.18076348895817484, 0.18076348895817484, 0.18076348895817484, 0.10658578103211147, 0.10658578103211147, 0.10658578103211147, 0.1482384555122095, 0.1482384555122095, 0.1482384555122095, 0.12859279886833996, 0.12859279886833996, 0.12859279886833996, 0.15063870536578017, 0.15063870536578017, 0.15063870536578017, 0.12274299753847151, 0.12274299753847151, 0.12274299753847151, 0.014723924397447408, 0.014723924397447408, 0.014723924397447408, 0.007655191050347621, 0.007655191050347621, 0.007655191050347621, 0.013284219730334335, 0.013284219730334335, 0.013284219730334335, 0.0813977114319483, 0.0813977114319483, 0.0813977114319483, 0.0698566173445202, 0.0698566173445202, 0.0698566173445202, 0.09836002714600434, 0.09836002714600434, 0.09836002714600434, 0.002665890804256721, 0.002665890804256721, 0.002665890804256721, 0.009775941179586134, 0.009775941179586134, 0.009775941179586134, 0.02428679593987748, 0.02428679593987748, 0.02428679593987748, 0.08079740807672331, 0.08079740807672331, 0.08079740807672331, 0.11945515696086673, 0.11945515696086673, 0.11945515696086673, 0.09534396936850176, 0.09534396936850176, 0.09534396936850176, 0.45133998435766676, 0.45133998435766676, 0.45133998435766676, 0.43740135054375473, 0.43740135054375473, 0.43740135054375473, 0.4285700563044996, 0.4285700563044996, 0.4285700563044996, 0.07428363342042177, 0.07428363342042177, 0.07428363342042177, 0.08420837579596352, 0.08420837579596352, 0.08420837579596352, 0.07338783959558948, 0.07338783959558948, 0.07338783959558948, 0.15502705055801758, 0.15502705055801758, 0.15502705055801758, 0.16573338973621687, 0.16573338973621687, 0.16573338973621687, 0.26488500313061336, 0.26488500313061336, 0.26488500313061336, 0.2197273927573694, 0.2197273927573694, 0.2197273927573694, 0.23583995895519905, 0.23583995895519905, 0.23583995895519905, 0.2583768385520301, 0.2583768385520301, 0.2583768385520301, 0.1517794036886404, 0.1517794036886404, 0.1517794036886404, 0.17181013845523063, 0.17181013845523063, 0.17181013845523063, 0.16849394081462765, 0.16849394081462765, 0.16849394081462765, 0.1632611980696731, 0.1632611980696731, 0.1632611980696731, 0.16407024999427744, 0.16407024999427744, 0.16407024999427744, 0.18962587726140578, 0.18962587726140578, 0.18962587726140578, 0.28146751040957496, 0.28146751040957496, 0.28146751040957496, 0.2615262989294562, 0.2615262989294562, 0.2615262989294562, 0.18072930724238756, 0.18072930724238756, 0.18072930724238756, 0.19979386741226945, 0.19979386741226945, 0.19979386741226945, 0.2611248074929383, 0.2611248074929383, 0.2611248074929383, 0.30263450833721606, 0.30263450833721606, 0.30263450833721606, 0.1699090585603784, 0.1699090585603784, 0.1699090585603784, 0.2565343345061698, 0.2565343345061698, 0.2565343345061698, 0.3743328002987719, 0.3743328002987719, 0.3743328002987719, 0.18902076766530163, 0.18902076766530163, 0.18902076766530163, 0.17374534905585148, 0.17374534905585148, 0.17374534905585148, 0.178595793727371, 0.178595793727371, 0.178595793727371, 0.05838371920470509, 0.05838371920470509, 0.05838371920470509, 0.060002955644683276, 0.060002955644683276, 0.060002955644683276, 0.06287808443034215, 0.06287808443034215, 0.06287808443034215]}, "mutation_prompt": null}
{"id": "6ed0762f-884e-48b2-ad64-4af696be669d", "solution": "import numpy as np\n\nclass EnhancedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            self.adaptive_parameters(evaluations)\n            \n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]\n\n    def adaptive_parameters(self, evaluations):\n        # Dynamically adjust parameters based on current evaluations\n        progress = evaluations / self.budget\n        self.mutation_factor = 0.8 * (1 - progress) + 0.5 * progress\n        self.crossover_rate = 0.9 * (1 - progress) + 0.6 * progress", "name": "EnhancedHybridDESA", "description": "A hybrid algorithm blending differential evolution for exploration with simulated annealing for exploitation, enhanced by dynamic parameter tuning to solve black box optimization problems on a bounded domain.", "configspace": "", "generation": 8, "fitness": 0.4036526071261902, "feedback": "The algorithm EnhancedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.755480083134839, 0.755480083134839, 0.755480083134839, 0.7477696795844677, 0.7477696795844677, 0.7477696795844677, 0.7527284651943874, 0.7527284651943874, 0.7527284651943874, 0.7142066933201406, 0.7142066933201406, 0.7142066933201406, 0.7103434816788963, 0.7103434816788963, 0.7103434816788963, 0.7046407754063602, 0.7046407754063602, 0.7046407754063602, 0.4649550615110227, 0.4649550615110227, 0.4649550615110227, 0.4638250910040098, 0.4638250910040098, 0.4638250910040098, 0.4188419759599853, 0.4188419759599853, 0.4188419759599853, 0.375004788461901, 0.375004788461901, 0.375004788461901, 0.14865515765172754, 0.14865515765172754, 0.14865515765172754, 0.14092494756694451, 0.14092494756694451, 0.14092494756694451, 0.964639497174512, 0.964639497174512, 0.964639497174512, 0.9838421964202061, 0.9838421964202061, 0.9838421964202061, 0.9730670871762432, 0.9730670871762432, 0.9730670871762432, 0.6469603654917238, 0.6469603654917238, 0.6469603654917238, 0.6332707813458156, 0.6332707813458156, 0.6332707813458156, 0.6456058481704454, 0.6456058481704454, 0.6456058481704454, 0.8316973194092613, 0.8316973194092613, 0.8316973194092613, 0.7928486298346052, 0.7928486298346052, 0.7928486298346052, 0.8313758756666985, 0.8313758756666985, 0.8313758756666985, 0.4211916612043234, 0.4211916612043234, 0.4211916612043234, 0.518723684256178, 0.518723684256178, 0.518723684256178, 0.4590683398728619, 0.4590683398728619, 0.4590683398728619, 0.022034309023482246, 0.022034309023482246, 0.022034309023482246, 0.22474488725748876, 0.22474488725748876, 0.22474488725748876, 0.23088974033092025, 0.23088974033092025, 0.23088974033092025, 0.4077561132790586, 0.4077561132790586, 0.4077561132790586, 0.4108018248801837, 0.4108018248801837, 0.4108018248801837, 0.3413591642412678, 0.3413591642412678, 0.3413591642412678, 0.5364235844083889, 0.5364235844083889, 0.5364235844083889, 0.4802806121578158, 0.4802806121578158, 0.4802806121578158, 0.6029946019946282, 0.6029946019946282, 0.6029946019946282, 0.14801598872604171, 0.14801598872604171, 0.14801598872604171, 0.23257069259271124, 0.23257069259271124, 0.23257069259271124, 0.16026828179097174, 0.16026828179097174, 0.16026828179097174, 0.2981226651889297, 0.2981226651889297, 0.2981226651889297, 0.373433693659901, 0.373433693659901, 0.373433693659901, 0.3185667987583921, 0.3185667987583921, 0.3185667987583921, 0.6763621914397364, 0.6763621914397364, 0.6763621914397364, 0.6675530684711879, 0.6675530684711879, 0.6675530684711879, 0.6244237531800477, 0.6244237531800477, 0.6244237531800477, 0.0986273197234534, 0.0986273197234534, 0.0986273197234534, 0.08374246134130225, 0.08374246134130225, 0.08374246134130225, 0.12300638511445394, 0.12300638511445394, 0.12300638511445394, 0.14984276228257476, 0.14984276228257476, 0.14984276228257476, 0.21451110393287331, 0.21451110393287331, 0.21451110393287331, 0.10969285911989646, 0.10969285911989646, 0.10969285911989646, 0.40863526429556973, 0.40863526429556973, 0.40863526429556973, 0.49952778680235843, 0.49952778680235843, 0.49952778680235843, 0.46866367656972197, 0.46866367656972197, 0.46866367656972197, 0.3396253627912139, 0.3396253627912139, 0.3396253627912139, 0.3084421915208153, 0.3084421915208153, 0.3084421915208153, 0.3620648340408462, 0.3620648340408462, 0.3620648340408462, 0.2047784924308268, 0.2047784924308268, 0.2047784924308268, 0.19107857969919317, 0.19107857969919317, 0.19107857969919317, 0.19315858917571926, 0.19315858917571926, 0.19315858917571926, 0.441986560904539, 0.441986560904539, 0.441986560904539, 0.3577438954582728, 0.3577438954582728, 0.3577438954582728, 0.19763299758921649, 0.19763299758921649, 0.19763299758921649, 0.19780246266038715, 0.19780246266038715, 0.19780246266038715, 0.781557440739446, 0.781557440739446, 0.781557440739446, 0.16282293463013975, 0.16282293463013975, 0.16282293463013975, 0.16818019519644856, 0.16818019519644856, 0.16818019519644856, 0.12631247176832916, 0.12631247176832916, 0.12631247176832916, 0.20281111919519945, 0.20281111919519945, 0.20281111919519945, 0.1791683702892255, 0.1791683702892255, 0.1791683702892255, 0.16465540304065385, 0.16465540304065385, 0.16465540304065385, 0.2112562085431121, 0.2112562085431121, 0.2112562085431121, 0.08357112778014564, 0.08357112778014564, 0.08357112778014564, 0.0877583554450182, 0.0877583554450182, 0.0877583554450182, 0.08806104312603258, 0.08806104312603258, 0.08806104312603258]}, "mutation_prompt": null}
{"id": "3c5307f7-3abf-49c5-b560-dd228a8c5727", "solution": "import numpy as np\n\nclass EnhancedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25\n        self.mutation_factor_min = 0.5\n        self.mutation_factor_max = 1.0\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            self.mutation_factor = self.mutation_factor_min + (self.mutation_factor_max - self.mutation_factor_min) * (1 - evaluations / self.budget)\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    adaptive_temperature = self.temperature * (1 - (fitness[i] - trial_fitness) / (abs(fitness[i]) + 1e-10))\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / adaptive_temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n            \n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedHybridDESA", "description": "An enhanced differential evolution and simulated annealing algorithm integrating adaptive mutation and dynamic temperature adjustment for robust global search.", "configspace": "", "generation": 9, "fitness": 0.3749234915237597, "feedback": "The algorithm EnhancedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.7166374098980273, 0.7166374098980273, 0.7166374098980273, 0.7702917600556789, 0.7702917600556789, 0.7702917600556789, 0.7730764352655518, 0.7730764352655518, 0.7730764352655518, 0.6193201107865943, 0.6193201107865943, 0.6193201107865943, 0.6508805690443795, 0.6508805690443795, 0.6508805690443795, 0.5896777876995957, 0.5896777876995957, 0.5896777876995957, 0.12068389645510147, 0.12068389645510147, 0.12068389645510147, 0.1283963354822868, 0.1283963354822868, 0.1283963354822868, 0.13271077751517624, 0.13271077751517624, 0.13271077751517624, 0.12112434044318776, 0.12112434044318776, 0.12112434044318776, 0.10494758905275214, 0.10494758905275214, 0.10494758905275214, 0.09221294187777784, 0.09221294187777784, 0.09221294187777784, 0.98128426564757, 0.98128426564757, 0.98128426564757, 0.9554116031119083, 0.9554116031119083, 0.9554116031119083, 0.9560815554492853, 0.9560815554492853, 0.9560815554492853, 0.4787341584035055, 0.4787341584035055, 0.4787341584035055, 0.4714798267689775, 0.4714798267689775, 0.4714798267689775, 0.4888000980569184, 0.4888000980569184, 0.4888000980569184, 0.6647469721111869, 0.6647469721111869, 0.6647469721111869, 0.7480932869604754, 0.7480932869604754, 0.7480932869604754, 0.6426121297412866, 0.6426121297412866, 0.6426121297412866, 0.43936978431625173, 0.43936978431625173, 0.43936978431625173, 0.38196655158759063, 0.38196655158759063, 0.38196655158759063, 0.4627942496474192, 0.4627942496474192, 0.4627942496474192, 0.010071386189553277, 0.010071386189553277, 0.010071386189553277, 0.46967914763264706, 0.46967914763264706, 0.46967914763264706, 0.4089922917882646, 0.4089922917882646, 0.4089922917882646, 0.36579601494898617, 0.36579601494898617, 0.36579601494898617, 0.43852398000276704, 0.43852398000276704, 0.43852398000276704, 0.400126792844278, 0.400126792844278, 0.400126792844278, 0.5067351467459618, 0.5067351467459618, 0.5067351467459618, 0.4689715040516076, 0.4689715040516076, 0.4689715040516076, 0.49121618793923194, 0.49121618793923194, 0.49121618793923194, 0.1057058468383757, 0.1057058468383757, 0.1057058468383757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1746684618702351, 0.1746684618702351, 0.1746684618702351, 0.32464847510910566, 0.32464847510910566, 0.32464847510910566, 0.32294624048074705, 0.32294624048074705, 0.32294624048074705, 0.3199971557565664, 0.3199971557565664, 0.3199971557565664, 0.6703684846845214, 0.6703684846845214, 0.6703684846845214, 0.6905841395189769, 0.6905841395189769, 0.6905841395189769, 0.6507217146241195, 0.6507217146241195, 0.6507217146241195, 0.10169720143486016, 0.10169720143486016, 0.10169720143486016, 0.08790913754128082, 0.08790913754128082, 0.08790913754128082, 0.08448640439726618, 0.08448640439726618, 0.08448640439726618, 0.21793665011926688, 0.21793665011926688, 0.21793665011926688, 0.29131354834298073, 0.29131354834298073, 0.29131354834298073, 0.18879921685780454, 0.18879921685780454, 0.18879921685780454, 0.3594749190640487, 0.3594749190640487, 0.3594749190640487, 0.3416179500603749, 0.3416179500603749, 0.3416179500603749, 0.4030725210586925, 0.4030725210586925, 0.4030725210586925, 0.2601397558444287, 0.2601397558444287, 0.2601397558444287, 0.27155495613924063, 0.27155495613924063, 0.27155495613924063, 0.27270207547898173, 0.27270207547898173, 0.27270207547898173, 0.1768485536283615, 0.1768485536283615, 0.1768485536283615, 0.16356007822235952, 0.16356007822235952, 0.16356007822235952, 0.18526123332854472, 0.18526123332854472, 0.18526123332854472, 0.2267939516049433, 0.2267939516049433, 0.2267939516049433, 0.33763673187737964, 0.33763673187737964, 0.33763673187737964, 0.18438879246810147, 0.18438879246810147, 0.18438879246810147, 0.7652352764596008, 0.7652352764596008, 0.7652352764596008, 0.6785520245796497, 0.6785520245796497, 0.6785520245796497, 0.18547187858833936, 0.18547187858833936, 0.18547187858833936, 0.19955811768806353, 0.19955811768806353, 0.19955811768806353, 0.19728893152290305, 0.19728893152290305, 0.19728893152290305, 0.7450091213989078, 0.7450091213989078, 0.7450091213989078, 0.20910384127600123, 0.20910384127600123, 0.20910384127600123, 0.17181585257766985, 0.17181585257766985, 0.17181585257766985, 0.16000386196365002, 0.16000386196365002, 0.16000386196365002, 0.07412723442745517, 0.07412723442745517, 0.07412723442745517, 0.0737203150284429, 0.0737203150284429, 0.0737203150284429, 0.06822385032666445, 0.06822385032666445, 0.06822385032666445]}, "mutation_prompt": null}
{"id": "555cd4ad-f0f0-4d40-85c8-cb0a53961e9f", "solution": "import numpy as np\n\nclass EnhancedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n\n    def adapt_rates(self, evaluations):\n        factor_decay = 0.95\n        self.mutation_factor = max(0.5, self.mutation_factor * factor_decay)\n        self.crossover_rate = min(1.0, self.crossover_rate * (1.0 + factor_decay * np.random.rand()))\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n            self.adapt_rates(evaluations)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedHybridDESA", "description": "An enhanced hybrid DE and SA algorithm integrates adaptive mutation and crossover rates with a stochastic acceptance decision rule to optimize black box functions efficiently.", "configspace": "", "generation": 10, "fitness": 0.17351125934579545, "feedback": "The algorithm EnhancedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.13.", "error": "", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.19980912028169306, 0.19980912028169306, 0.19980912028169306, 0.28284399531480764, 0.28284399531480764, 0.28284399531480764, 0.36009755820963996, 0.36009755820963996, 0.36009755820963996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065914198045177175, 0.0065914198045177175, 0.0065914198045177175, 0.08553844095629393, 0.08553844095629393, 0.08553844095629393, 0.11351249122813623, 0.11351249122813623, 0.11351249122813623, 0.11069858008450306, 0.11069858008450306, 0.11069858008450306, 0.08888364728561571, 0.08888364728561571, 0.08888364728561571, 0.11920241114221841, 0.11920241114221841, 0.11920241114221841, 0.05593807459967992, 0.05593807459967992, 0.05593807459967992, 0.06955895337944185, 0.06955895337944185, 0.06955895337944185, 0.10100513495410013, 0.10100513495410013, 0.10100513495410013, 0.8167497150616423, 0.8167497150616423, 0.8167497150616423, 0.10865425294156228, 0.10865425294156228, 0.10865425294156228, 0.0854016140447198, 0.0854016140447198, 0.0854016140447198, 0.09094447815664863, 0.09094447815664863, 0.09094447815664863, 0.09716302094250329, 0.09716302094250329, 0.09716302094250329, 0.17816052317146402, 0.17816052317146402, 0.17816052317146402, 0.19326796554564862, 0.19326796554564862, 0.19326796554564862, 0.2240121638016196, 0.2240121638016196, 0.2240121638016196, 0.15049203894061014, 0.15049203894061014, 0.15049203894061014, 0.14375749357277545, 0.14375749357277545, 0.14375749357277545, 0.15940404817089315, 0.15940404817089315, 0.15940404817089315, 0.247997385045862, 0.247997385045862, 0.247997385045862, 0.06448086605063508, 0.06448086605063508, 0.06448086605063508, 0.2398871907801845, 0.2398871907801845, 0.2398871907801845, 0.13283026982484702, 0.13283026982484702, 0.13283026982484702, 0.11852258916895408, 0.11852258916895408, 0.11852258916895408, 0.03786783144201067, 0.03786783144201067, 0.03786783144201067, 0.12981622527049408, 0.12981622527049408, 0.12981622527049408, 0.05909734339222672, 0.05909734339222672, 0.05909734339222672, 0.4367239453438846, 0.4367239453438846, 0.4367239453438846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18314679090557773, 0.18314679090557773, 0.18314679090557773, 0.07103909592976998, 0.07103909592976998, 0.07103909592976998, 0.01722859544347155, 0.01722859544347155, 0.01722859544347155, 0.284358122748231, 0.284358122748231, 0.284358122748231, 0.28981826874783934, 0.28981826874783934, 0.28981826874783934, 0.24354450212266043, 0.24354450212266043, 0.24354450212266043, 0.10076896888211873, 0.10076896888211873, 0.10076896888211873, 0.10798135519923635, 0.10798135519923635, 0.10798135519923635, 0.1279028760850348, 0.1279028760850348, 0.1279028760850348, 0.2100434496522574, 0.2100434496522574, 0.2100434496522574, 0.1398896893814623, 0.1398896893814623, 0.1398896893814623, 0.09372452171857226, 0.09372452171857226, 0.09372452171857226, 0.343732226294272, 0.343732226294272, 0.343732226294272, 0.2757988937244362, 0.2757988937244362, 0.2757988937244362, 0.36965157989002473, 0.36965157989002473, 0.36965157989002473, 0.25704703875414403, 0.25704703875414403, 0.25704703875414403, 0.22032754752924255, 0.22032754752924255, 0.22032754752924255, 0.2385146083776838, 0.2385146083776838, 0.2385146083776838, 0.20127245655564185, 0.20127245655564185, 0.20127245655564185, 0.19839615758422102, 0.19839615758422102, 0.19839615758422102, 0.19360683639605814, 0.19360683639605814, 0.19360683639605814, 0.20085551398560098, 0.20085551398560098, 0.20085551398560098, 0.19997238988271315, 0.19997238988271315, 0.19997238988271315, 0.18951123366934908, 0.18951123366934908, 0.18951123366934908, 0.5300225533747847, 0.5300225533747847, 0.5300225533747847, 0.16458581861760646, 0.16458581861760646, 0.16458581861760646, 0.36474710977578095, 0.36474710977578095, 0.36474710977578095, 0.20173263086633186, 0.20173263086633186, 0.20173263086633186, 0.12784210359058856, 0.12784210359058856, 0.12784210359058856, 0.21055944031493623, 0.21055944031493623, 0.21055944031493623, 0.20871645389943427, 0.20871645389943427, 0.20871645389943427, 0.15167780692753507, 0.15167780692753507, 0.15167780692753507, 0.1775533701690083, 0.1775533701690083, 0.1775533701690083, 0.0939814651160652, 0.0939814651160652, 0.0939814651160652, 0.09328052345842774, 0.09328052345842774, 0.09328052345842774, 0.10066788941731941, 0.10066788941731941, 0.10066788941731941]}, "mutation_prompt": null}
{"id": "7434f6ea-4f2c-4e46-b072-4da3d8d0bcfe", "solution": "import numpy as np\n\nclass EnhancedADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Increased population for diversity\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Adaptive mutation factor\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate\n        self.temperature = 1.0\n        self.cooling_rate = 0.93  # Faster cooling\n        self.chaos_factor = np.random.uniform(0.5, 1.5)  # Chaos-driven factor\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                mutant_vector += self.chaos_factor * (x1 - mutant_vector)  # Chaos-influenced exploration\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    # Soft elitism strategy\n                    if np.random.rand() < 0.1:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n            self.mutation_factor = 0.5 + 0.5 * np.random.rand()  # Update mutation factor adaptively\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedADE", "description": "Enhanced adaptive differential evolution with chaos-driven exploration and soft elitism for robust optimization in bounded domains.", "configspace": "", "generation": 11, "fitness": 0.18297886293527899, "feedback": "The algorithm EnhancedADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.3170601654159968, 0.4061142744020988, 0.7280099049585937, 0.31908092031513346, 0.26250547264926427, 0.9240813563693563, 0.22555273762983774, 0.23293130757284464, 0.9203019155247623, 0.051453559685293304, 0.01137918669416127, 0.5339718538771531, 9.999999999998899e-05, 9.999999999998899e-05, 0.825887743568652, 9.999999999998899e-05, 0.01027533741099651, 0.4831667970828233, 0.12568703059396757, 0.10735732822109734, 0.18309564785927646, 0.16062900058378693, 0.1830433942045675, 0.14643609535022806, 0.187771508938275, 0.15985118729674086, 0.16627002149582482, 0.03081119499746432, 0.016406535220207297, 0.12704924008787566, 0.06839446402687921, 0.06538564375853617, 0.1511428844096001, 0.07327991049794091, 0.06994049011663772, 0.12165907023974465, 0.15092987794640145, 0.15198145644591676, 0.36232926837215496, 0.19685805145944046, 0.19703769396921356, 0.26369601486387195, 0.11186331653010506, 0.11159391679196018, 0.24254586304968173, 0.05706580725143762, 0.03950331638579141, 0.15903475270120948, 0.04444885788527786, 0.05599937822540724, 0.1705131909309432, 0.08964842099522707, 0.09431990271479229, 0.14355490063483978, 0.21200503855496344, 0.09003552635960843, 0.9006747412344595, 0.1917840015364045, 0.1473317377005564, 0.2805558119115329, 0.1245157524228776, 0.1105192692824215, 0.870697582576697, 0.009782866353147845, 0.03332029222188648, 0.18899032627363854, 0.1303454124266571, 0.15554604170178754, 0.13238800201812995, 0.14074089696811332, 0.12728404606263155, 0.1865367885384227, 9.999999999998899e-05, 9.999999999998899e-05, 0.14584971619040987, 0.12463060145428095, 0.1320771717217858, 0.17093697078118897, 0.1209694947678045, 0.1381961710886117, 0.15615572259141286, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796780169658413, 9.999999999998899e-05, 9.999999999998899e-05, 0.08208006336111373, 9.999999999998899e-05, 9.999999999998899e-05, 0.05296986395365988, 0.0729779638497603, 0.07628168658504897, 0.12215108878900593, 0.02467384189735078, 0.03006879469304946, 0.06087885646183966, 0.06773353451101283, 0.09046324787414217, 0.09049203351349411, 0.07636476919984414, 0.0474195281165406, 0.17119894997211926, 9.999999999998899e-05, 9.999999999998899e-05, 0.10095375960438324, 9.999999999998899e-05, 9.999999999998899e-05, 0.279897001808909, 0.0063703597439954684, 0.03453819279625692, 0.17964606437427932, 0.10772475176388419, 0.12726801941225163, 0.0796344903337165, 0.08098982265807775, 0.01600855237000942, 0.2600652483540018, 0.3396980947923739, 0.4226644213333972, 0.4969676486095339, 0.20705794123530807, 0.2283555497393649, 0.5818048260641167, 0.2184696135853864, 0.3033458921826372, 0.4082289537961554, 0.09087224504703795, 0.07141491688408874, 0.1356311482392295, 0.06451974012076667, 0.07437957282527519, 0.12390405638616608, 0.12890884325021978, 0.08752751807009496, 0.15662977060471972, 0.1289665687779068, 0.17923695259204364, 0.18895920537186106, 0.12067910018042527, 0.33009639071210095, 0.1785344540552003, 0.22153969305971832, 0.1656701126663429, 0.37212819892966686, 0.2288644036450571, 0.20284577477474075, 0.6209840780054059, 0.27774297329784836, 0.26758202236820905, 0.571021884053725, 0.17929458562748046, 0.2396581318684774, 0.5470808908768687, 0.13331145721090143, 0.19708545875900874, 0.3298104168558963, 0.11362027010339482, 0.12434882453009655, 0.31340998821346433, 0.07624108805157481, 0.22814109888203393, 0.5173646080751846, 0.2218793793972984, 0.22146505270096928, 0.21717397391362725, 0.2509553561538269, 0.2090191243268399, 0.2395305162189122, 0.2496639037670616, 0.2169711388002199, 0.20112286108437616, 9.999999999998899e-05, 9.999999999998899e-05, 0.24239655279211014, 0.18249383206937586, 0.1975554718135697, 0.23748377370064888, 0.24588942120669655, 0.22554576551339645, 0.21879857767826594, 0.43087745147469314, 0.2759574956279204, 0.6726255731088724, 0.1578009080384163, 0.1574732010222698, 0.19803361643661888, 0.1357371040866343, 0.1369061282275752, 0.15870104624095216, 0.15819292434915055, 0.15371838643013291, 0.1680629669603244, 0.13498728930166048, 0.15834913389786032, 0.22267164434816322, 0.11664666338058283, 0.15470434518575804, 0.15573592219504973, 0.17278534286814262, 0.18437066180658557, 0.1812760991096498, 0.18492482150669654, 0.2088564312059772, 0.19346572045367205, 0.20426672984130734, 0.17806285422482793, 0.18794125850903087, 0.13127441483309155, 0.08770932464880588, 0.08798016438629364, 0.08899093585117734, 0.09524255758412836, 0.08576775815689486, 0.08167175879654764, 0.0797740751313264, 0.09005216070271549]}, "mutation_prompt": null}
{"id": "9611cca9-96da-4a95-bc85-264dd3dec58d", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            self.temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid differential evolution and simulated annealing algorithm uses DE for exploration and SA for exploitation to solve black box optimization problems on a bounded domain.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.7380721970578863, 0.7380721970578863, 0.7380721970578863, 0.7375136533338564, 0.7375136533338564, 0.7375136533338564, 0.740554964317617, 0.740554964317617, 0.740554964317617, 0.6974848727163516, 0.6974848727163516, 0.6974848727163516, 0.6984184111713431, 0.6984184111713431, 0.6984184111713431, 0.7001332183932478, 0.7001332183932478, 0.7001332183932478, 0.1545315552407701, 0.1545315552407701, 0.1545315552407701, 0.17019064520717475, 0.17019064520717475, 0.17019064520717475, 0.3858709170863601, 0.3858709170863601, 0.3858709170863601, 0.13746618178908743, 0.13746618178908743, 0.13746618178908743, 0.11366622310527308, 0.11366622310527308, 0.11366622310527308, 0.13028113434228383, 0.13028113434228383, 0.13028113434228383, 0.9536640163652037, 0.9536640163652037, 0.9536640163652037, 0.9604057095681846, 0.9604057095681846, 0.9604057095681846, 0.968280823268244, 0.968280823268244, 0.968280823268244, 0.6409985496938608, 0.6409985496938608, 0.6409985496938608, 0.6439376075420719, 0.6439376075420719, 0.6439376075420719, 0.6001011896664227, 0.6001011896664227, 0.6001011896664227, 0.8120262171847163, 0.8120262171847163, 0.8120262171847163, 0.7961142139156143, 0.7961142139156143, 0.7961142139156143, 0.7667913387939685, 0.7667913387939685, 0.7667913387939685, 0.5446553567576313, 0.5446553567576313, 0.5446553567576313, 0.5737521406348767, 0.5737521406348767, 0.5737521406348767, 0.5851788790342165, 0.5851788790342165, 0.5851788790342165, 0.12704409548414364, 0.12704409548414364, 0.12704409548414364, 0.5342920311358537, 0.5342920311358537, 0.5342920311358537, 0.5940078191486682, 0.5940078191486682, 0.5940078191486682, 0.5555925881202882, 0.5555925881202882, 0.5555925881202882, 0.5683960077405996, 0.5683960077405996, 0.5683960077405996, 0.5178920170152354, 0.5178920170152354, 0.5178920170152354, 0.657065533623304, 0.657065533623304, 0.657065533623304, 0.6288266446655457, 0.6288266446655457, 0.6288266446655457, 0.6624497643081431, 0.6624497643081431, 0.6624497643081431, 0.1023328178696804, 0.1023328178696804, 0.1023328178696804, 0.45072636227261464, 0.45072636227261464, 0.45072636227261464, 0.3160032630956958, 0.3160032630956958, 0.3160032630956958, 0.3990222487005435, 0.3990222487005435, 0.3990222487005435, 0.43281082501615753, 0.43281082501615753, 0.43281082501615753, 0.41705783926941176, 0.41705783926941176, 0.41705783926941176, 0.7133141004864747, 0.7133141004864747, 0.7133141004864747, 0.7079593998238731, 0.7079593998238731, 0.7079593998238731, 0.7000636589081152, 0.7000636589081152, 0.7000636589081152, 0.08658235564970618, 0.08658235564970618, 0.08658235564970618, 0.0844083955724183, 0.0844083955724183, 0.0844083955724183, 0.09487999206796449, 0.09487999206796449, 0.09487999206796449, 0.14081791239908237, 0.14081791239908237, 0.14081791239908237, 0.15051691235862885, 0.15051691235862885, 0.15051691235862885, 0.12475429477788891, 0.12475429477788891, 0.12475429477788891, 0.45535355721225446, 0.45535355721225446, 0.45535355721225446, 0.46617175770540586, 0.46617175770540586, 0.46617175770540586, 0.5617818963990117, 0.5617818963990117, 0.5617818963990117, 0.326725802046537, 0.326725802046537, 0.326725802046537, 0.2079190711786667, 0.2079190711786667, 0.2079190711786667, 0.3406143736195685, 0.3406143736195685, 0.3406143736195685, 0.20279373100001308, 0.20279373100001308, 0.20279373100001308, 0.18361243547798434, 0.18361243547798434, 0.18361243547798434, 0.2098745526212562, 0.2098745526212562, 0.2098745526212562, 0.2117804582387276, 0.2117804582387276, 0.2117804582387276, 0.5769726698889024, 0.5769726698889024, 0.5769726698889024, 0.5167487856483648, 0.5167487856483648, 0.5167487856483648, 0.8002578417723021, 0.8002578417723021, 0.8002578417723021, 0.7684762765441377, 0.7684762765441377, 0.7684762765441377, 0.19242314875454136, 0.19242314875454136, 0.19242314875454136, 0.2080526509484576, 0.2080526509484576, 0.2080526509484576, 0.19792779070966693, 0.19792779070966693, 0.19792779070966693, 0.18913607458364345, 0.18913607458364345, 0.18913607458364345, 0.1833957592674017, 0.1833957592674017, 0.1833957592674017, 0.2016145255125964, 0.2016145255125964, 0.2016145255125964, 0.1786760303063405, 0.1786760303063405, 0.1786760303063405, 0.08276341372658058, 0.08276341372658058, 0.08276341372658058, 0.06810804541011106, 0.06810804541011106, 0.06810804541011106, 0.07753119631473515, 0.07753119631473515, 0.07753119631473515]}, "mutation_prompt": null}
{"id": "9a8cfa53-7c1a-4fe5-a5da-821fe729fce5", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid evolutionary strategy combines differential evolution with adaptive simulated annealing, adjusting cooling based on solution improvement for efficient exploration and exploitation.", "configspace": "", "generation": 13, "fitness": 0.4501471466918786, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.26.", "error": "", "parent_id": "adfdcefe-6f76-4d8a-b9ad-a10d120e090b", "metadata": {"aucs": [0.8689842349407434, 0.8689842349407434, 0.8689842349407434, 0.8688342277205464, 0.8688342277205464, 0.8688342277205464, 0.8687397324559688, 0.8687397324559688, 0.8687397324559688, 0.7542608787279539, 0.7542608787279539, 0.7542608787279539, 0.753756890231205, 0.753756890231205, 0.753756890231205, 0.7673318242355739, 0.7673318242355739, 0.7673318242355739, 0.2747354889793482, 0.2747354889793482, 0.2747354889793482, 0.31240258476885896, 0.31240258476885896, 0.31240258476885896, 0.5294750741693335, 0.5294750741693335, 0.5294750741693335, 0.1227190039715299, 0.1227190039715299, 0.1227190039715299, 0.2587028030302754, 0.2587028030302754, 0.2587028030302754, 0.10589768106898323, 0.10589768106898323, 0.10589768106898323, 0.9690397541567923, 0.9690397541567923, 0.9690397541567923, 0.9430608062887237, 0.9430608062887237, 0.9430608062887237, 0.9742078395029448, 0.9742078395029448, 0.9742078395029448, 0.6204756738337059, 0.6204756738337059, 0.6204756738337059, 0.6009172999470668, 0.6009172999470668, 0.6009172999470668, 0.651594292026609, 0.651594292026609, 0.651594292026609, 0.8027027670113157, 0.8027027670113157, 0.8027027670113157, 0.8006386990403416, 0.8006386990403416, 0.8006386990403416, 0.84683326684925, 0.84683326684925, 0.84683326684925, 0.5741508112144049, 0.5741508112144049, 0.5741508112144049, 0.5112881282173669, 0.5112881282173669, 0.5112881282173669, 0.5792667743380973, 0.5792667743380973, 0.5792667743380973, 0.5680712020826365, 0.5680712020826365, 0.5680712020826365, 0.5749192579870595, 0.5749192579870595, 0.5749192579870595, 0.5195234939213726, 0.5195234939213726, 0.5195234939213726, 0.5626846910029928, 0.5626846910029928, 0.5626846910029928, 0.558207947670875, 0.558207947670875, 0.558207947670875, 0.4827417125291037, 0.4827417125291037, 0.4827417125291037, 0.6088242255366271, 0.6088242255366271, 0.6088242255366271, 0.6407621358909665, 0.6407621358909665, 0.6407621358909665, 0.6898260531649595, 0.6898260531649595, 0.6898260531649595, 0.0921240675176801, 0.0921240675176801, 0.0921240675176801, 0.3648901944821815, 0.3648901944821815, 0.3648901944821815, 0.2789107554279976, 0.2789107554279976, 0.2789107554279976, 0.4089978423853088, 0.4089978423853088, 0.4089978423853088, 0.42984883127414575, 0.42984883127414575, 0.42984883127414575, 0.3700088102238853, 0.3700088102238853, 0.3700088102238853, 0.7718987924161604, 0.7718987924161604, 0.7718987924161604, 0.7465660634609755, 0.7465660634609755, 0.7465660634609755, 0.7483019608077754, 0.7483019608077754, 0.7483019608077754, 0.11957137378179705, 0.11957137378179705, 0.11957137378179705, 0.10393019869895925, 0.10393019869895925, 0.10393019869895925, 0.10149115502373784, 0.10149115502373784, 0.10149115502373784, 0.15415211398838347, 0.15415211398838347, 0.15415211398838347, 0.20902307206299586, 0.20902307206299586, 0.20902307206299586, 0.1757069496664544, 0.1757069496664544, 0.1757069496664544, 0.42917285433346863, 0.42917285433346863, 0.42917285433346863, 0.42434812562169066, 0.42434812562169066, 0.42434812562169066, 0.45252562537976815, 0.45252562537976815, 0.45252562537976815, 0.328369737260373, 0.328369737260373, 0.328369737260373, 0.3046623670501787, 0.3046623670501787, 0.3046623670501787, 0.31622793506162816, 0.31622793506162816, 0.31622793506162816, 0.20725662155015734, 0.20725662155015734, 0.20725662155015734, 0.1704244476396536, 0.1704244476396536, 0.1704244476396536, 0.21456519194260004, 0.21456519194260004, 0.21456519194260004, 0.30210955170129716, 0.30210955170129716, 0.30210955170129716, 0.48955629248205157, 0.48955629248205157, 0.48955629248205157, 0.2153494957435078, 0.2153494957435078, 0.2153494957435078, 0.17129261630379844, 0.17129261630379844, 0.17129261630379844, 0.6813174903206107, 0.6813174903206107, 0.6813174903206107, 0.7211997069358252, 0.7211997069358252, 0.7211997069358252, 0.20642793062973297, 0.20642793062973297, 0.20642793062973297, 0.15661573242824356, 0.15661573242824356, 0.15661573242824356, 0.20861023123669253, 0.20861023123669253, 0.20861023123669253, 0.16357477630291795, 0.16357477630291795, 0.16357477630291795, 0.19723430063297498, 0.19723430063297498, 0.19723430063297498, 0.18270664311016105, 0.18270664311016105, 0.18270664311016105, 0.07204179208967365, 0.07204179208967365, 0.07204179208967365, 0.07573510424266405, 0.07573510424266405, 0.07573510424266405, 0.07827055408361716, 0.07827055408361716, 0.07827055408361716]}, "mutation_prompt": null}
{"id": "99d0746e-1b97-4544-a69b-08a8d7b18b35", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid evolutionary strategy combines differential evolution with adaptive simulated annealing, adjusting cooling based on solution improvement for efficient exploration and exploitation.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a8cfa53-7c1a-4fe5-a5da-821fe729fce5", "metadata": {"aucs": [0.8689842349407434, 0.8689842349407434, 0.8689842349407434, 0.8688342277205464, 0.8688342277205464, 0.8688342277205464, 0.8687397324559688, 0.8687397324559688, 0.8687397324559688, 0.7542608787279539, 0.7542608787279539, 0.7542608787279539, 0.753756890231205, 0.753756890231205, 0.753756890231205, 0.7673318242355739, 0.7673318242355739, 0.7673318242355739, 0.2747354889793482, 0.2747354889793482, 0.2747354889793482, 0.31240258476885896, 0.31240258476885896, 0.31240258476885896, 0.5294750741693335, 0.5294750741693335, 0.5294750741693335, 0.1227190039715299, 0.1227190039715299, 0.1227190039715299, 0.2587028030302754, 0.2587028030302754, 0.2587028030302754, 0.10589768106898323, 0.10589768106898323, 0.10589768106898323, 0.9690397541567923, 0.9690397541567923, 0.9690397541567923, 0.9430608062887237, 0.9430608062887237, 0.9430608062887237, 0.9742078395029448, 0.9742078395029448, 0.9742078395029448, 0.6204756738337059, 0.6204756738337059, 0.6204756738337059, 0.6009172999470668, 0.6009172999470668, 0.6009172999470668, 0.651594292026609, 0.651594292026609, 0.651594292026609, 0.8027027670113157, 0.8027027670113157, 0.8027027670113157, 0.8006386990403416, 0.8006386990403416, 0.8006386990403416, 0.84683326684925, 0.84683326684925, 0.84683326684925, 0.5741508112144049, 0.5741508112144049, 0.5741508112144049, 0.5112881282173669, 0.5112881282173669, 0.5112881282173669, 0.5792667743380973, 0.5792667743380973, 0.5792667743380973, 0.5680712020826365, 0.5680712020826365, 0.5680712020826365, 0.5749192579870595, 0.5749192579870595, 0.5749192579870595, 0.5195234939213726, 0.5195234939213726, 0.5195234939213726, 0.5626846910029928, 0.5626846910029928, 0.5626846910029928, 0.558207947670875, 0.558207947670875, 0.558207947670875, 0.4827417125291037, 0.4827417125291037, 0.4827417125291037, 0.6088242255366271, 0.6088242255366271, 0.6088242255366271, 0.6407621358909665, 0.6407621358909665, 0.6407621358909665, 0.6898260531649595, 0.6898260531649595, 0.6898260531649595, 0.0921240675176801, 0.0921240675176801, 0.0921240675176801, 0.3648901944821815, 0.3648901944821815, 0.3648901944821815, 0.2789107554279976, 0.2789107554279976, 0.2789107554279976, 0.4089978423853088, 0.4089978423853088, 0.4089978423853088, 0.42984883127414575, 0.42984883127414575, 0.42984883127414575, 0.3700088102238853, 0.3700088102238853, 0.3700088102238853, 0.7718987924161604, 0.7718987924161604, 0.7718987924161604, 0.7465660634609755, 0.7465660634609755, 0.7465660634609755, 0.7483019608077754, 0.7483019608077754, 0.7483019608077754, 0.11957137378179705, 0.11957137378179705, 0.11957137378179705, 0.10393019869895925, 0.10393019869895925, 0.10393019869895925, 0.10149115502373784, 0.10149115502373784, 0.10149115502373784, 0.15415211398838347, 0.15415211398838347, 0.15415211398838347, 0.20902307206299586, 0.20902307206299586, 0.20902307206299586, 0.1757069496664544, 0.1757069496664544, 0.1757069496664544, 0.42917285433346863, 0.42917285433346863, 0.42917285433346863, 0.42434812562169066, 0.42434812562169066, 0.42434812562169066, 0.45252562537976815, 0.45252562537976815, 0.45252562537976815, 0.328369737260373, 0.328369737260373, 0.328369737260373, 0.3046623670501787, 0.3046623670501787, 0.3046623670501787, 0.31622793506162816, 0.31622793506162816, 0.31622793506162816, 0.20725662155015734, 0.20725662155015734, 0.20725662155015734, 0.1704244476396536, 0.1704244476396536, 0.1704244476396536, 0.21456519194260004, 0.21456519194260004, 0.21456519194260004, 0.30210955170129716, 0.30210955170129716, 0.30210955170129716, 0.48955629248205157, 0.48955629248205157, 0.48955629248205157, 0.2153494957435078, 0.2153494957435078, 0.2153494957435078, 0.17129261630379844, 0.17129261630379844, 0.17129261630379844, 0.6813174903206107, 0.6813174903206107, 0.6813174903206107, 0.7211997069358252, 0.7211997069358252, 0.7211997069358252, 0.20642793062973297, 0.20642793062973297, 0.20642793062973297, 0.15661573242824356, 0.15661573242824356, 0.15661573242824356, 0.20861023123669253, 0.20861023123669253, 0.20861023123669253, 0.16357477630291795, 0.16357477630291795, 0.16357477630291795, 0.19723430063297498, 0.19723430063297498, 0.19723430063297498, 0.18270664311016105, 0.18270664311016105, 0.18270664311016105, 0.07204179208967365, 0.07204179208967365, 0.07204179208967365, 0.07573510424266405, 0.07573510424266405, 0.07573510424266405, 0.07827055408361716, 0.07827055408361716, 0.07827055408361716]}, "mutation_prompt": null}
{"id": "2b5eaf50-37d6-48ba-bba7-7fa82456c43c", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid evolutionary strategy combines differential evolution with adaptive simulated annealing, adjusting cooling based on solution improvement for efficient exploration and exploitation.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a8cfa53-7c1a-4fe5-a5da-821fe729fce5", "metadata": {"aucs": [0.8689842349407434, 0.8689842349407434, 0.8689842349407434, 0.8688342277205464, 0.8688342277205464, 0.8688342277205464, 0.8687397324559688, 0.8687397324559688, 0.8687397324559688, 0.7542608787279539, 0.7542608787279539, 0.7542608787279539, 0.753756890231205, 0.753756890231205, 0.753756890231205, 0.7673318242355739, 0.7673318242355739, 0.7673318242355739, 0.2747354889793482, 0.2747354889793482, 0.2747354889793482, 0.31240258476885896, 0.31240258476885896, 0.31240258476885896, 0.5294750741693335, 0.5294750741693335, 0.5294750741693335, 0.1227190039715299, 0.1227190039715299, 0.1227190039715299, 0.2587028030302754, 0.2587028030302754, 0.2587028030302754, 0.10589768106898323, 0.10589768106898323, 0.10589768106898323, 0.9690397541567923, 0.9690397541567923, 0.9690397541567923, 0.9430608062887237, 0.9430608062887237, 0.9430608062887237, 0.9742078395029448, 0.9742078395029448, 0.9742078395029448, 0.6204756738337059, 0.6204756738337059, 0.6204756738337059, 0.6009172999470668, 0.6009172999470668, 0.6009172999470668, 0.651594292026609, 0.651594292026609, 0.651594292026609, 0.8027027670113157, 0.8027027670113157, 0.8027027670113157, 0.8006386990403416, 0.8006386990403416, 0.8006386990403416, 0.84683326684925, 0.84683326684925, 0.84683326684925, 0.5741508112144049, 0.5741508112144049, 0.5741508112144049, 0.5112881282173669, 0.5112881282173669, 0.5112881282173669, 0.5792667743380973, 0.5792667743380973, 0.5792667743380973, 0.5680712020826365, 0.5680712020826365, 0.5680712020826365, 0.5749192579870595, 0.5749192579870595, 0.5749192579870595, 0.5195234939213726, 0.5195234939213726, 0.5195234939213726, 0.5626846910029928, 0.5626846910029928, 0.5626846910029928, 0.558207947670875, 0.558207947670875, 0.558207947670875, 0.4827417125291037, 0.4827417125291037, 0.4827417125291037, 0.6088242255366271, 0.6088242255366271, 0.6088242255366271, 0.6407621358909665, 0.6407621358909665, 0.6407621358909665, 0.6898260531649595, 0.6898260531649595, 0.6898260531649595, 0.0921240675176801, 0.0921240675176801, 0.0921240675176801, 0.3648901944821815, 0.3648901944821815, 0.3648901944821815, 0.2789107554279976, 0.2789107554279976, 0.2789107554279976, 0.4089978423853088, 0.4089978423853088, 0.4089978423853088, 0.42984883127414575, 0.42984883127414575, 0.42984883127414575, 0.3700088102238853, 0.3700088102238853, 0.3700088102238853, 0.7718987924161604, 0.7718987924161604, 0.7718987924161604, 0.7465660634609755, 0.7465660634609755, 0.7465660634609755, 0.7483019608077754, 0.7483019608077754, 0.7483019608077754, 0.11957137378179705, 0.11957137378179705, 0.11957137378179705, 0.10393019869895925, 0.10393019869895925, 0.10393019869895925, 0.10149115502373784, 0.10149115502373784, 0.10149115502373784, 0.15415211398838347, 0.15415211398838347, 0.15415211398838347, 0.20902307206299586, 0.20902307206299586, 0.20902307206299586, 0.1757069496664544, 0.1757069496664544, 0.1757069496664544, 0.42917285433346863, 0.42917285433346863, 0.42917285433346863, 0.42434812562169066, 0.42434812562169066, 0.42434812562169066, 0.45252562537976815, 0.45252562537976815, 0.45252562537976815, 0.328369737260373, 0.328369737260373, 0.328369737260373, 0.3046623670501787, 0.3046623670501787, 0.3046623670501787, 0.31622793506162816, 0.31622793506162816, 0.31622793506162816, 0.20725662155015734, 0.20725662155015734, 0.20725662155015734, 0.1704244476396536, 0.1704244476396536, 0.1704244476396536, 0.21456519194260004, 0.21456519194260004, 0.21456519194260004, 0.30210955170129716, 0.30210955170129716, 0.30210955170129716, 0.48955629248205157, 0.48955629248205157, 0.48955629248205157, 0.2153494957435078, 0.2153494957435078, 0.2153494957435078, 0.17129261630379844, 0.17129261630379844, 0.17129261630379844, 0.6813174903206107, 0.6813174903206107, 0.6813174903206107, 0.7211997069358252, 0.7211997069358252, 0.7211997069358252, 0.20642793062973297, 0.20642793062973297, 0.20642793062973297, 0.15661573242824356, 0.15661573242824356, 0.15661573242824356, 0.20861023123669253, 0.20861023123669253, 0.20861023123669253, 0.16357477630291795, 0.16357477630291795, 0.16357477630291795, 0.19723430063297498, 0.19723430063297498, 0.19723430063297498, 0.18270664311016105, 0.18270664311016105, 0.18270664311016105, 0.07204179208967365, 0.07204179208967365, 0.07204179208967365, 0.07573510424266405, 0.07573510424266405, 0.07573510424266405, 0.07827055408361716, 0.07827055408361716, 0.07827055408361716]}, "mutation_prompt": null}
{"id": "9f428962-8574-4076-acf1-fd2ad5750aea", "solution": "import numpy as np\n\nclass EnhancedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.95\n        self.diversity_control_factor = 0.1\n        self.adaptive_mutation = lambda f, i: f * (0.9 + 0.2 * np.sin(np.pi * i / self.pop_size))\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                adaptive_factor = self.adaptive_mutation(self.mutation_factor, evaluations)\n                mutant_vector = np.clip(x1 + adaptive_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                \n                avg_fitness = np.mean(fitness)\n                diversity = np.std(fitness)\n                if diversity < self.diversity_control_factor * avg_fitness and evaluations < self.budget:\n                    population[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    fitness[i] = func(population[i])\n                    evaluations += 1\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedHybridDESA", "description": "Enhanced HybridDESA with adaptive mutation and diversity control to improve convergence and robustness.", "configspace": "", "generation": 16, "fitness": 0.41586431922004335, "feedback": "The algorithm EnhancedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "9a8cfa53-7c1a-4fe5-a5da-821fe729fce5", "metadata": {"aucs": [0.8621208157592696, 0.8621208157592696, 0.8621208157592696, 0.1561289075327864, 0.1561289075327864, 0.1561289075327864, 0.8810057876587243, 0.8810057876587243, 0.8810057876587243, 0.7973202450337702, 0.7973202450337702, 0.7973202450337702, 0.8158900763011447, 0.8158900763011447, 0.8158900763011447, 0.7946356366245222, 0.7946356366245222, 0.7946356366245222, 0.1478825482612297, 0.1478825482612297, 0.1478825482612297, 0.3512848607137674, 0.3512848607137674, 0.3512848607137674, 0.3018012723266458, 0.3018012723266458, 0.3018012723266458, 0.12013331638053792, 0.12013331638053792, 0.12013331638053792, 0.14552303251229481, 0.14552303251229481, 0.14552303251229481, 0.20298010455901483, 0.20298010455901483, 0.20298010455901483, 0.9505694413414965, 0.9505694413414965, 0.9505694413414965, 0.11452295792433942, 0.11452295792433942, 0.11452295792433942, 0.9669792067671807, 0.9669792067671807, 0.9669792067671807, 0.6556132508092908, 0.6556132508092908, 0.6556132508092908, 0.6914556761627088, 0.6914556761627088, 0.6914556761627088, 0.6907772646059819, 0.6907772646059819, 0.6907772646059819, 0.7254775598870555, 0.7254775598870555, 0.7254775598870555, 0.8426155248622665, 0.8426155248622665, 0.8426155248622665, 0.8364553341166343, 0.8364553341166343, 0.8364553341166343, 0.5715003425658646, 0.5715003425658646, 0.5715003425658646, 0.4593921701569216, 0.4593921701569216, 0.4593921701569216, 0.48173335105095116, 0.48173335105095116, 0.48173335105095116, 0.39895414841797616, 0.39895414841797616, 0.39895414841797616, 0.4937515575636986, 0.4937515575636986, 0.4937515575636986, 0.3979058277566814, 0.3979058277566814, 0.3979058277566814, 0.6497331017943393, 0.6497331017943393, 0.6497331017943393, 0.33081530245200563, 0.33081530245200563, 0.33081530245200563, 0.6408623207120417, 0.6408623207120417, 0.6408623207120417, 0.7022653609742124, 0.7022653609742124, 0.7022653609742124, 0.44070099131296503, 0.44070099131296503, 0.44070099131296503, 0.6803964600526153, 0.6803964600526153, 0.6803964600526153, 0.18865129513377865, 0.18865129513377865, 0.18865129513377865, 0.5419552473865887, 0.5419552473865887, 0.5419552473865887, 0.17342553216460588, 0.17342553216460588, 0.17342553216460588, 0.44112681884785643, 0.44112681884785643, 0.44112681884785643, 0.5597001885693275, 0.5597001885693275, 0.5597001885693275, 0.5395753989888568, 0.5395753989888568, 0.5395753989888568, 0.8024682549264004, 0.8024682549264004, 0.8024682549264004, 0.8193563902991416, 0.8193563902991416, 0.8193563902991416, 0.5873964692472764, 0.5873964692472764, 0.5873964692472764, 0.08491380837738616, 0.08491380837738616, 0.08491380837738616, 0.08184560348760295, 0.08184560348760295, 0.08184560348760295, 0.10219756467174179, 0.10219756467174179, 0.10219756467174179, 0.13099704551594404, 0.13099704551594404, 0.13099704551594404, 0.18260492470539336, 0.18260492470539336, 0.18260492470539336, 0.16230825163568063, 0.16230825163568063, 0.16230825163568063, 0.5022488553996252, 0.5022488553996252, 0.5022488553996252, 0.4926335694203744, 0.4926335694203744, 0.4926335694203744, 0.16236559808617312, 0.16236559808617312, 0.16236559808617312, 0.393690738502415, 0.393690738502415, 0.393690738502415, 0.31937415227000876, 0.31937415227000876, 0.31937415227000876, 0.1368176764588418, 0.1368176764588418, 0.1368176764588418, 0.23182167079307459, 0.23182167079307459, 0.23182167079307459, 0.1749861337009243, 0.1749861337009243, 0.1749861337009243, 0.1567730367031105, 0.1567730367031105, 0.1567730367031105, 0.1939374574506456, 0.1939374574506456, 0.1939374574506456, 0.6938084282201085, 0.6938084282201085, 0.6938084282201085, 0.2069381147231032, 0.2069381147231032, 0.2069381147231032, 0.18444708322661874, 0.18444708322661874, 0.18444708322661874, 0.8091543866591411, 0.8091543866591411, 0.8091543866591411, 0.15992131660337638, 0.15992131660337638, 0.15992131660337638, 0.2107195681320876, 0.2107195681320876, 0.2107195681320876, 0.22080486760406415, 0.22080486760406415, 0.22080486760406415, 0.19848189348188838, 0.19848189348188838, 0.19848189348188838, 0.18388294361839908, 0.18388294361839908, 0.18388294361839908, 0.18442434080510817, 0.18442434080510817, 0.18442434080510817, 0.18324332495410534, 0.18324332495410534, 0.18324332495410534, 0.07928024021440416, 0.07928024021440416, 0.07928024021440416, 0.07656698300245046, 0.07656698300245046, 0.07656698300245046, 0.08820205490455613, 0.08820205490455613, 0.08820205490455613]}, "mutation_prompt": null}
{"id": "e5d7f49c-7493-4fce-983b-80066bc2ca56", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid evolutionary strategy combines differential evolution with adaptive simulated annealing, adjusting cooling based on solution improvement for efficient exploration and exploitation.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a8cfa53-7c1a-4fe5-a5da-821fe729fce5", "metadata": {"aucs": [0.8689842349407434, 0.8689842349407434, 0.8689842349407434, 0.8688342277205464, 0.8688342277205464, 0.8688342277205464, 0.8687397324559688, 0.8687397324559688, 0.8687397324559688, 0.7542608787279539, 0.7542608787279539, 0.7542608787279539, 0.753756890231205, 0.753756890231205, 0.753756890231205, 0.7673318242355739, 0.7673318242355739, 0.7673318242355739, 0.2747354889793482, 0.2747354889793482, 0.2747354889793482, 0.31240258476885896, 0.31240258476885896, 0.31240258476885896, 0.5294750741693335, 0.5294750741693335, 0.5294750741693335, 0.1227190039715299, 0.1227190039715299, 0.1227190039715299, 0.2587028030302754, 0.2587028030302754, 0.2587028030302754, 0.10589768106898323, 0.10589768106898323, 0.10589768106898323, 0.9690397541567923, 0.9690397541567923, 0.9690397541567923, 0.9430608062887237, 0.9430608062887237, 0.9430608062887237, 0.9742078395029448, 0.9742078395029448, 0.9742078395029448, 0.6204756738337059, 0.6204756738337059, 0.6204756738337059, 0.6009172999470668, 0.6009172999470668, 0.6009172999470668, 0.651594292026609, 0.651594292026609, 0.651594292026609, 0.8027027670113157, 0.8027027670113157, 0.8027027670113157, 0.8006386990403416, 0.8006386990403416, 0.8006386990403416, 0.84683326684925, 0.84683326684925, 0.84683326684925, 0.5741508112144049, 0.5741508112144049, 0.5741508112144049, 0.5112881282173669, 0.5112881282173669, 0.5112881282173669, 0.5792667743380973, 0.5792667743380973, 0.5792667743380973, 0.5680712020826365, 0.5680712020826365, 0.5680712020826365, 0.5749192579870595, 0.5749192579870595, 0.5749192579870595, 0.5195234939213726, 0.5195234939213726, 0.5195234939213726, 0.5626846910029928, 0.5626846910029928, 0.5626846910029928, 0.558207947670875, 0.558207947670875, 0.558207947670875, 0.4827417125291037, 0.4827417125291037, 0.4827417125291037, 0.6088242255366271, 0.6088242255366271, 0.6088242255366271, 0.6407621358909665, 0.6407621358909665, 0.6407621358909665, 0.6898260531649595, 0.6898260531649595, 0.6898260531649595, 0.0921240675176801, 0.0921240675176801, 0.0921240675176801, 0.3648901944821815, 0.3648901944821815, 0.3648901944821815, 0.2789107554279976, 0.2789107554279976, 0.2789107554279976, 0.4089978423853088, 0.4089978423853088, 0.4089978423853088, 0.42984883127414575, 0.42984883127414575, 0.42984883127414575, 0.3700088102238853, 0.3700088102238853, 0.3700088102238853, 0.7718987924161604, 0.7718987924161604, 0.7718987924161604, 0.7465660634609755, 0.7465660634609755, 0.7465660634609755, 0.7483019608077754, 0.7483019608077754, 0.7483019608077754, 0.11957137378179705, 0.11957137378179705, 0.11957137378179705, 0.10393019869895925, 0.10393019869895925, 0.10393019869895925, 0.10149115502373784, 0.10149115502373784, 0.10149115502373784, 0.15415211398838347, 0.15415211398838347, 0.15415211398838347, 0.20902307206299586, 0.20902307206299586, 0.20902307206299586, 0.1757069496664544, 0.1757069496664544, 0.1757069496664544, 0.42917285433346863, 0.42917285433346863, 0.42917285433346863, 0.42434812562169066, 0.42434812562169066, 0.42434812562169066, 0.45252562537976815, 0.45252562537976815, 0.45252562537976815, 0.328369737260373, 0.328369737260373, 0.328369737260373, 0.3046623670501787, 0.3046623670501787, 0.3046623670501787, 0.31622793506162816, 0.31622793506162816, 0.31622793506162816, 0.20725662155015734, 0.20725662155015734, 0.20725662155015734, 0.1704244476396536, 0.1704244476396536, 0.1704244476396536, 0.21456519194260004, 0.21456519194260004, 0.21456519194260004, 0.30210955170129716, 0.30210955170129716, 0.30210955170129716, 0.48955629248205157, 0.48955629248205157, 0.48955629248205157, 0.2153494957435078, 0.2153494957435078, 0.2153494957435078, 0.17129261630379844, 0.17129261630379844, 0.17129261630379844, 0.6813174903206107, 0.6813174903206107, 0.6813174903206107, 0.7211997069358252, 0.7211997069358252, 0.7211997069358252, 0.20642793062973297, 0.20642793062973297, 0.20642793062973297, 0.15661573242824356, 0.15661573242824356, 0.15661573242824356, 0.20861023123669253, 0.20861023123669253, 0.20861023123669253, 0.16357477630291795, 0.16357477630291795, 0.16357477630291795, 0.19723430063297498, 0.19723430063297498, 0.19723430063297498, 0.18270664311016105, 0.18270664311016105, 0.18270664311016105, 0.07204179208967365, 0.07204179208967365, 0.07204179208967365, 0.07573510424266405, 0.07573510424266405, 0.07573510424266405, 0.07827055408361716, 0.07827055408361716, 0.07827055408361716]}, "mutation_prompt": null}
{"id": "15ba0721-1142-4a86-8b31-864206691cf2", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n        adaptive_crossover_rate = self.crossover_rate\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < adaptive_crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n                \n                adaptive_crossover_rate = max(0.6, self.crossover_rate * (1 - evaluations / self.budget))\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid evolutionary strategy with dynamic population size and adaptive crossover to optimize exploration and exploitation balance.", "configspace": "", "generation": 18, "fitness": 0.3648366291583486, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "9a8cfa53-7c1a-4fe5-a5da-821fe729fce5", "metadata": {"aucs": [0.8608594000706057, 0.8608594000706057, 0.8608594000706057, 0.8581722696145888, 0.8581722696145888, 0.8581722696145888, 0.8734430605513713, 0.8734430605513713, 0.8734430605513713, 0.778717138441956, 0.778717138441956, 0.778717138441956, 0.7511192571383266, 0.7511192571383266, 0.7511192571383266, 0.7501930979869016, 0.7501930979869016, 0.7501930979869016, 0.46099284618645375, 0.46099284618645375, 0.46099284618645375, 0.4350813360779525, 0.4350813360779525, 0.4350813360779525, 0.4908356177108806, 0.4908356177108806, 0.4908356177108806, 0.36586893076528226, 0.36586893076528226, 0.36586893076528226, 0.5127185844777378, 0.5127185844777378, 0.5127185844777378, 0.15737101326748393, 0.15737101326748393, 0.15737101326748393, 0.977921566751806, 0.977921566751806, 0.977921566751806, 0.9589839128708924, 0.9589839128708924, 0.9589839128708924, 0.9688243575096811, 0.9688243575096811, 0.9688243575096811, 0.5527657209840593, 0.5527657209840593, 0.5527657209840593, 0.5583863104509388, 0.5583863104509388, 0.5583863104509388, 0.5642869117694189, 0.5642869117694189, 0.5642869117694189, 0.7124277818257923, 0.7124277818257923, 0.7124277818257923, 0.653394083279921, 0.653394083279921, 0.653394083279921, 0.6956953648305313, 0.6956953648305313, 0.6956953648305313, 0.24571129022989657, 0.24571129022989657, 0.24571129022989657, 0.43589167442489696, 0.43589167442489696, 0.43589167442489696, 0.2425465361888276, 0.2425465361888276, 0.2425465361888276, 0.01124312328928112, 0.01124312328928112, 0.01124312328928112, 0.2619729402021057, 0.2619729402021057, 0.2619729402021057, 0.2520783974211498, 0.2520783974211498, 0.2520783974211498, 0.11213523462166286, 0.11213523462166286, 0.11213523462166286, 0.037524605278363876, 0.037524605278363876, 0.037524605278363876, 0.07978069542403232, 0.07978069542403232, 0.07978069542403232, 0.20257892030616342, 0.20257892030616342, 0.20257892030616342, 0.18455372078445031, 0.18455372078445031, 0.18455372078445031, 0.2716631979553936, 0.2716631979553936, 0.2716631979553936, 0.021581336746832158, 0.021581336746832158, 0.021581336746832158, 0.022268478403268288, 0.022268478403268288, 0.022268478403268288, 0.026885931769438876, 0.026885931769438876, 0.026885931769438876, 0.17349623271720216, 0.17349623271720216, 0.17349623271720216, 0.19813053503977418, 0.19813053503977418, 0.19813053503977418, 0.17173623499439583, 0.17173623499439583, 0.17173623499439583, 0.591571668653275, 0.591571668653275, 0.591571668653275, 0.5729888646646206, 0.5729888646646206, 0.5729888646646206, 0.5553221085994795, 0.5553221085994795, 0.5553221085994795, 0.11482892828631996, 0.11482892828631996, 0.11482892828631996, 0.08341454147777239, 0.08341454147777239, 0.08341454147777239, 0.09789966978302256, 0.09789966978302256, 0.09789966978302256, 0.16066001578549782, 0.16066001578549782, 0.16066001578549782, 0.1355752046641222, 0.1355752046641222, 0.1355752046641222, 0.3599351769335426, 0.3599351769335426, 0.3599351769335426, 0.33951159493206706, 0.33951159493206706, 0.33951159493206706, 0.32929150825243947, 0.32929150825243947, 0.32929150825243947, 0.3905888979819343, 0.3905888979819343, 0.3905888979819343, 0.24632462886455286, 0.24632462886455286, 0.24632462886455286, 0.21711441668596276, 0.21711441668596276, 0.21711441668596276, 0.2586470803762829, 0.2586470803762829, 0.2586470803762829, 0.1827915465027734, 0.1827915465027734, 0.1827915465027734, 0.19133805962531214, 0.19133805962531214, 0.19133805962531214, 0.18864862613596056, 0.18864862613596056, 0.18864862613596056, 0.2467540346019288, 0.2467540346019288, 0.2467540346019288, 0.3918287527152746, 0.3918287527152746, 0.3918287527152746, 0.5865481422229952, 0.5865481422229952, 0.5865481422229952, 0.1716125851308079, 0.1716125851308079, 0.1716125851308079, 0.722504015484543, 0.722504015484543, 0.722504015484543, 0.18801151814964434, 0.18801151814964434, 0.18801151814964434, 0.20852836809360975, 0.20852836809360975, 0.20852836809360975, 0.4050225233679082, 0.4050225233679082, 0.4050225233679082, 0.6388655442536065, 0.6388655442536065, 0.6388655442536065, 0.18710748185848525, 0.18710748185848525, 0.18710748185848525, 0.18150862149473546, 0.18150862149473546, 0.18150862149473546, 0.18240019383871253, 0.18240019383871253, 0.18240019383871253, 0.08280412373084722, 0.08280412373084722, 0.08280412373084722, 0.08434752955295821, 0.08434752955295821, 0.08434752955295821, 0.08410367834038446, 0.08410367834038446, 0.08410367834038446]}, "mutation_prompt": null}
{"id": "1f4414bb-94e8-40d4-b839-51682565c9f7", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid evolutionary strategy combines differential evolution with adaptive simulated annealing, adjusting cooling based on solution improvement for efficient exploration and exploitation.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a8cfa53-7c1a-4fe5-a5da-821fe729fce5", "metadata": {"aucs": [0.8689842349407434, 0.8689842349407434, 0.8689842349407434, 0.8688342277205464, 0.8688342277205464, 0.8688342277205464, 0.8687397324559688, 0.8687397324559688, 0.8687397324559688, 0.7542608787279539, 0.7542608787279539, 0.7542608787279539, 0.753756890231205, 0.753756890231205, 0.753756890231205, 0.7673318242355739, 0.7673318242355739, 0.7673318242355739, 0.2747354889793482, 0.2747354889793482, 0.2747354889793482, 0.31240258476885896, 0.31240258476885896, 0.31240258476885896, 0.5294750741693335, 0.5294750741693335, 0.5294750741693335, 0.1227190039715299, 0.1227190039715299, 0.1227190039715299, 0.2587028030302754, 0.2587028030302754, 0.2587028030302754, 0.10589768106898323, 0.10589768106898323, 0.10589768106898323, 0.9690397541567923, 0.9690397541567923, 0.9690397541567923, 0.9430608062887237, 0.9430608062887237, 0.9430608062887237, 0.9742078395029448, 0.9742078395029448, 0.9742078395029448, 0.6204756738337059, 0.6204756738337059, 0.6204756738337059, 0.6009172999470668, 0.6009172999470668, 0.6009172999470668, 0.651594292026609, 0.651594292026609, 0.651594292026609, 0.8027027670113157, 0.8027027670113157, 0.8027027670113157, 0.8006386990403416, 0.8006386990403416, 0.8006386990403416, 0.84683326684925, 0.84683326684925, 0.84683326684925, 0.5741508112144049, 0.5741508112144049, 0.5741508112144049, 0.5112881282173669, 0.5112881282173669, 0.5112881282173669, 0.5792667743380973, 0.5792667743380973, 0.5792667743380973, 0.5680712020826365, 0.5680712020826365, 0.5680712020826365, 0.5749192579870595, 0.5749192579870595, 0.5749192579870595, 0.5195234939213726, 0.5195234939213726, 0.5195234939213726, 0.5626846910029928, 0.5626846910029928, 0.5626846910029928, 0.558207947670875, 0.558207947670875, 0.558207947670875, 0.4827417125291037, 0.4827417125291037, 0.4827417125291037, 0.6088242255366271, 0.6088242255366271, 0.6088242255366271, 0.6407621358909665, 0.6407621358909665, 0.6407621358909665, 0.6898260531649595, 0.6898260531649595, 0.6898260531649595, 0.0921240675176801, 0.0921240675176801, 0.0921240675176801, 0.3648901944821815, 0.3648901944821815, 0.3648901944821815, 0.2789107554279976, 0.2789107554279976, 0.2789107554279976, 0.4089978423853088, 0.4089978423853088, 0.4089978423853088, 0.42984883127414575, 0.42984883127414575, 0.42984883127414575, 0.3700088102238853, 0.3700088102238853, 0.3700088102238853, 0.7718987924161604, 0.7718987924161604, 0.7718987924161604, 0.7465660634609755, 0.7465660634609755, 0.7465660634609755, 0.7483019608077754, 0.7483019608077754, 0.7483019608077754, 0.11957137378179705, 0.11957137378179705, 0.11957137378179705, 0.10393019869895925, 0.10393019869895925, 0.10393019869895925, 0.10149115502373784, 0.10149115502373784, 0.10149115502373784, 0.15415211398838347, 0.15415211398838347, 0.15415211398838347, 0.20902307206299586, 0.20902307206299586, 0.20902307206299586, 0.1757069496664544, 0.1757069496664544, 0.1757069496664544, 0.42917285433346863, 0.42917285433346863, 0.42917285433346863, 0.42434812562169066, 0.42434812562169066, 0.42434812562169066, 0.45252562537976815, 0.45252562537976815, 0.45252562537976815, 0.328369737260373, 0.328369737260373, 0.328369737260373, 0.3046623670501787, 0.3046623670501787, 0.3046623670501787, 0.31622793506162816, 0.31622793506162816, 0.31622793506162816, 0.20725662155015734, 0.20725662155015734, 0.20725662155015734, 0.1704244476396536, 0.1704244476396536, 0.1704244476396536, 0.21456519194260004, 0.21456519194260004, 0.21456519194260004, 0.30210955170129716, 0.30210955170129716, 0.30210955170129716, 0.48955629248205157, 0.48955629248205157, 0.48955629248205157, 0.2153494957435078, 0.2153494957435078, 0.2153494957435078, 0.17129261630379844, 0.17129261630379844, 0.17129261630379844, 0.6813174903206107, 0.6813174903206107, 0.6813174903206107, 0.7211997069358252, 0.7211997069358252, 0.7211997069358252, 0.20642793062973297, 0.20642793062973297, 0.20642793062973297, 0.15661573242824356, 0.15661573242824356, 0.15661573242824356, 0.20861023123669253, 0.20861023123669253, 0.20861023123669253, 0.16357477630291795, 0.16357477630291795, 0.16357477630291795, 0.19723430063297498, 0.19723430063297498, 0.19723430063297498, 0.18270664311016105, 0.18270664311016105, 0.18270664311016105, 0.07204179208967365, 0.07204179208967365, 0.07204179208967365, 0.07573510424266405, 0.07573510424266405, 0.07573510424266405, 0.07827055408361716, 0.07827055408361716, 0.07827055408361716]}, "mutation_prompt": null}
{"id": "b29c8dac-3e46-4c76-adaa-41143fefb83d", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridDESA", "description": "A hybrid evolutionary strategy combines differential evolution with adaptive simulated annealing, adjusting cooling based on solution improvement for efficient exploration and exploitation.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9a8cfa53-7c1a-4fe5-a5da-821fe729fce5", "metadata": {"aucs": [0.8689842349407434, 0.8689842349407434, 0.8689842349407434, 0.8688342277205464, 0.8688342277205464, 0.8688342277205464, 0.8687397324559688, 0.8687397324559688, 0.8687397324559688, 0.7542608787279539, 0.7542608787279539, 0.7542608787279539, 0.753756890231205, 0.753756890231205, 0.753756890231205, 0.7673318242355739, 0.7673318242355739, 0.7673318242355739, 0.2747354889793482, 0.2747354889793482, 0.2747354889793482, 0.31240258476885896, 0.31240258476885896, 0.31240258476885896, 0.5294750741693335, 0.5294750741693335, 0.5294750741693335, 0.1227190039715299, 0.1227190039715299, 0.1227190039715299, 0.2587028030302754, 0.2587028030302754, 0.2587028030302754, 0.10589768106898323, 0.10589768106898323, 0.10589768106898323, 0.9690397541567923, 0.9690397541567923, 0.9690397541567923, 0.9430608062887237, 0.9430608062887237, 0.9430608062887237, 0.9742078395029448, 0.9742078395029448, 0.9742078395029448, 0.6204756738337059, 0.6204756738337059, 0.6204756738337059, 0.6009172999470668, 0.6009172999470668, 0.6009172999470668, 0.651594292026609, 0.651594292026609, 0.651594292026609, 0.8027027670113157, 0.8027027670113157, 0.8027027670113157, 0.8006386990403416, 0.8006386990403416, 0.8006386990403416, 0.84683326684925, 0.84683326684925, 0.84683326684925, 0.5741508112144049, 0.5741508112144049, 0.5741508112144049, 0.5112881282173669, 0.5112881282173669, 0.5112881282173669, 0.5792667743380973, 0.5792667743380973, 0.5792667743380973, 0.5680712020826365, 0.5680712020826365, 0.5680712020826365, 0.5749192579870595, 0.5749192579870595, 0.5749192579870595, 0.5195234939213726, 0.5195234939213726, 0.5195234939213726, 0.5626846910029928, 0.5626846910029928, 0.5626846910029928, 0.558207947670875, 0.558207947670875, 0.558207947670875, 0.4827417125291037, 0.4827417125291037, 0.4827417125291037, 0.6088242255366271, 0.6088242255366271, 0.6088242255366271, 0.6407621358909665, 0.6407621358909665, 0.6407621358909665, 0.6898260531649595, 0.6898260531649595, 0.6898260531649595, 0.0921240675176801, 0.0921240675176801, 0.0921240675176801, 0.3648901944821815, 0.3648901944821815, 0.3648901944821815, 0.2789107554279976, 0.2789107554279976, 0.2789107554279976, 0.4089978423853088, 0.4089978423853088, 0.4089978423853088, 0.42984883127414575, 0.42984883127414575, 0.42984883127414575, 0.3700088102238853, 0.3700088102238853, 0.3700088102238853, 0.7718987924161604, 0.7718987924161604, 0.7718987924161604, 0.7465660634609755, 0.7465660634609755, 0.7465660634609755, 0.7483019608077754, 0.7483019608077754, 0.7483019608077754, 0.11957137378179705, 0.11957137378179705, 0.11957137378179705, 0.10393019869895925, 0.10393019869895925, 0.10393019869895925, 0.10149115502373784, 0.10149115502373784, 0.10149115502373784, 0.15415211398838347, 0.15415211398838347, 0.15415211398838347, 0.20902307206299586, 0.20902307206299586, 0.20902307206299586, 0.1757069496664544, 0.1757069496664544, 0.1757069496664544, 0.42917285433346863, 0.42917285433346863, 0.42917285433346863, 0.42434812562169066, 0.42434812562169066, 0.42434812562169066, 0.45252562537976815, 0.45252562537976815, 0.45252562537976815, 0.328369737260373, 0.328369737260373, 0.328369737260373, 0.3046623670501787, 0.3046623670501787, 0.3046623670501787, 0.31622793506162816, 0.31622793506162816, 0.31622793506162816, 0.20725662155015734, 0.20725662155015734, 0.20725662155015734, 0.1704244476396536, 0.1704244476396536, 0.1704244476396536, 0.21456519194260004, 0.21456519194260004, 0.21456519194260004, 0.30210955170129716, 0.30210955170129716, 0.30210955170129716, 0.48955629248205157, 0.48955629248205157, 0.48955629248205157, 0.2153494957435078, 0.2153494957435078, 0.2153494957435078, 0.17129261630379844, 0.17129261630379844, 0.17129261630379844, 0.6813174903206107, 0.6813174903206107, 0.6813174903206107, 0.7211997069358252, 0.7211997069358252, 0.7211997069358252, 0.20642793062973297, 0.20642793062973297, 0.20642793062973297, 0.15661573242824356, 0.15661573242824356, 0.15661573242824356, 0.20861023123669253, 0.20861023123669253, 0.20861023123669253, 0.16357477630291795, 0.16357477630291795, 0.16357477630291795, 0.19723430063297498, 0.19723430063297498, 0.19723430063297498, 0.18270664311016105, 0.18270664311016105, 0.18270664311016105, 0.07204179208967365, 0.07204179208967365, 0.07204179208967365, 0.07573510424266405, 0.07573510424266405, 0.07573510424266405, 0.07827055408361716, 0.07827055408361716, 0.07827055408361716]}, "mutation_prompt": null}
{"id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 21, "fitness": 0.45977515975826644, "feedback": "The algorithm HybridAdaptiveDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "9a8cfa53-7c1a-4fe5-a5da-821fe729fce5", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "36c8cf4b-bfa2-4305-86f6-463e53dc9ab4", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "d863659c-95dd-404f-b6fd-92df75ecab81", "solution": "import numpy as np\n\nclass HybridEnhancedDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 30  # Adjusted population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Adjusted crossover rate\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * 0.95  # Adjusted cooling schedule\n        self.cooling_rate = 0.92  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.4 + 0.6 * np.random.rand()\n                    self.crossover_rate = 0.7 + 0.3 * np.random.rand()  # Adaptive crossover rate\n\n                indices = np.random.choice(range(self.pop_size), 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridEnhancedDESA", "description": "A hybrid enhancement integrates dynamic differential evolution and adaptive simulated annealing with self-adaptive mutation and crossover strategies.", "configspace": "", "generation": 23, "fitness": 0.4126991089279868, "feedback": "The algorithm HybridEnhancedDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8575518430013029, 0.8575518430013029, 0.8575518430013029, 0.8429586857016818, 0.8429586857016818, 0.8429586857016818, 0.8515612259149167, 0.8515612259149167, 0.8515612259149167, 0.7291574626521189, 0.7291574626521189, 0.7291574626521189, 0.7485589186396476, 0.7485589186396476, 0.7485589186396476, 0.7056112546372036, 0.7056112546372036, 0.7056112546372036, 0.11968557622152476, 0.11968557622152476, 0.11968557622152476, 0.21581014246945585, 0.21581014246945585, 0.21581014246945585, 0.15859049172058148, 0.15859049172058148, 0.15859049172058148, 0.11517840433832827, 0.11517840433832827, 0.11517840433832827, 0.13450036960976408, 0.13450036960976408, 0.13450036960976408, 0.12881392791055002, 0.12881392791055002, 0.12881392791055002, 0.9646840605510523, 0.9646840605510523, 0.9646840605510523, 0.9552929432212602, 0.9552929432212602, 0.9552929432212602, 0.9598264613629309, 0.9598264613629309, 0.9598264613629309, 0.6261769764764185, 0.6261769764764185, 0.6261769764764185, 0.5587808826392198, 0.5587808826392198, 0.5587808826392198, 0.5370014924563231, 0.5370014924563231, 0.5370014924563231, 0.7153320781915145, 0.7153320781915145, 0.7153320781915145, 0.7433008927040383, 0.7433008927040383, 0.7433008927040383, 0.79694672849219, 0.79694672849219, 0.79694672849219, 0.271346784182247, 0.271346784182247, 0.271346784182247, 0.41891124061438234, 0.41891124061438234, 0.41891124061438234, 0.35274893856731016, 0.35274893856731016, 0.35274893856731016, 0.40561489513925686, 0.40561489513925686, 0.40561489513925686, 0.3189853216785691, 0.3189853216785691, 0.3189853216785691, 0.3932206010243453, 0.3932206010243453, 0.3932206010243453, 0.42849469022998043, 0.42849469022998043, 0.42849469022998043, 0.44360850863078116, 0.44360850863078116, 0.44360850863078116, 0.42704553618022534, 0.42704553618022534, 0.42704553618022534, 0.5477535223096632, 0.5477535223096632, 0.5477535223096632, 0.48071766390532156, 0.48071766390532156, 0.48071766390532156, 0.5634751573345048, 0.5634751573345048, 0.5634751573345048, 0.10024021264111449, 0.10024021264111449, 0.10024021264111449, 0.1978757603348874, 0.1978757603348874, 0.1978757603348874, 0.1969469381094514, 0.1969469381094514, 0.1969469381094514, 0.33981436072716886, 0.33981436072716886, 0.33981436072716886, 0.3450232252726383, 0.3450232252726383, 0.3450232252726383, 0.32423898425303443, 0.32423898425303443, 0.32423898425303443, 0.7304448439036865, 0.7304448439036865, 0.7304448439036865, 0.7466804453243305, 0.7466804453243305, 0.7466804453243305, 0.6974414905856485, 0.6974414905856485, 0.6974414905856485, 0.10931083254511376, 0.10931083254511376, 0.10931083254511376, 0.09512299369528665, 0.09512299369528665, 0.09512299369528665, 0.09744806278550333, 0.09744806278550333, 0.09744806278550333, 0.16047991540997808, 0.16047991540997808, 0.16047991540997808, 0.20357197519346415, 0.20357197519346415, 0.20357197519346415, 0.24148717995739366, 0.24148717995739366, 0.24148717995739366, 0.4397490299429081, 0.4397490299429081, 0.4397490299429081, 0.45255055521850573, 0.45255055521850573, 0.45255055521850573, 0.4298742792162784, 0.4298742792162784, 0.4298742792162784, 0.34808621305005283, 0.34808621305005283, 0.34808621305005283, 0.31533282076663693, 0.31533282076663693, 0.31533282076663693, 0.2866888403266413, 0.2866888403266413, 0.2866888403266413, 0.1872886581193648, 0.1872886581193648, 0.1872886581193648, 0.21073593712265803, 0.21073593712265803, 0.21073593712265803, 0.1720908374120219, 0.1720908374120219, 0.1720908374120219, 0.19293099325878404, 0.19293099325878404, 0.19293099325878404, 0.30838713757570346, 0.30838713757570346, 0.30838713757570346, 0.19851682537263649, 0.19851682537263649, 0.19851682537263649, 0.8270697678288117, 0.8270697678288117, 0.8270697678288117, 0.18914924121774535, 0.18914924121774535, 0.18914924121774535, 0.7502936068697702, 0.7502936068697702, 0.7502936068697702, 0.16796802681393852, 0.16796802681393852, 0.16796802681393852, 0.6297938753475001, 0.6297938753475001, 0.6297938753475001, 0.7249218283663426, 0.7249218283663426, 0.7249218283663426, 0.18614461505567137, 0.18614461505567137, 0.18614461505567137, 0.17363439141797787, 0.17363439141797787, 0.17363439141797787, 0.18298345705005792, 0.18298345705005792, 0.18298345705005792, 0.07634610287668309, 0.07634610287668309, 0.07634610287668309, 0.08541763686466985, 0.08541763686466985, 0.08541763686466985, 0.07501026627637952, 0.07501026627637952, 0.07501026627637952]}, "mutation_prompt": null}
{"id": "7477b5f9-0a8b-45c8-a7f1-eadbbb37dfe0", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Increased population size for diversity\n        self.mutation_factor = 0.7  # Slightly adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly adjusted crossover rate\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.95 + 0.03 * np.random.rand())\n        self.cooling_rate = 0.92  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 40 == 0:  # Adaptive mutation factor more frequently\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive approach integrates differential evolution with simulated annealing, employing dynamic mutation and crossover rates for enhanced exploration.", "configspace": "", "generation": 24, "fitness": 0.3574548218225453, "feedback": "The algorithm HybridAdaptiveDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8423652840579943, 0.8423652840579943, 0.8423652840579943, 0.8379841471943003, 0.8379841471943003, 0.8379841471943003, 0.8278035513949812, 0.8278035513949812, 0.8278035513949812, 0.7170782422306305, 0.7170782422306305, 0.7170782422306305, 0.696876065091449, 0.696876065091449, 0.696876065091449, 0.6969020526394872, 0.6969020526394872, 0.6969020526394872, 0.2457616910134176, 0.2457616910134176, 0.2457616910134176, 0.2165031354273167, 0.2165031354273167, 0.2165031354273167, 0.26282176909184074, 0.26282176909184074, 0.26282176909184074, 0.15767624646092915, 0.15767624646092915, 0.15767624646092915, 0.1345774764830947, 0.1345774764830947, 0.1345774764830947, 0.15237375693956723, 0.15237375693956723, 0.15237375693956723, 0.9594191007339664, 0.9594191007339664, 0.9594191007339664, 0.9837595122797187, 0.9837595122797187, 0.9837595122797187, 0.9757303429039587, 0.9757303429039587, 0.9757303429039587, 0.5199424753065125, 0.5199424753065125, 0.5199424753065125, 0.45327044951985196, 0.45327044951985196, 0.45327044951985196, 0.5220759492671816, 0.5220759492671816, 0.5220759492671816, 0.6436272486292447, 0.6436272486292447, 0.6436272486292447, 0.769761481073916, 0.769761481073916, 0.769761481073916, 0.7733993835203186, 0.7733993835203186, 0.7733993835203186, 0.3148097629872696, 0.3148097629872696, 0.3148097629872696, 0.3567780202039572, 0.3567780202039572, 0.3567780202039572, 0.3481602282296815, 0.3481602282296815, 0.3481602282296815, 0.11585187014966691, 0.11585187014966691, 0.11585187014966691, 0.3260479506798589, 0.3260479506798589, 0.3260479506798589, 0.3388500440944944, 0.3388500440944944, 0.3388500440944944, 0.1961871608867184, 0.1961871608867184, 0.1961871608867184, 0.19113516215004667, 0.19113516215004667, 0.19113516215004667, 0.18694344695450804, 0.18694344695450804, 0.18694344695450804, 0.33281492585376327, 0.33281492585376327, 0.33281492585376327, 0.32577258418887023, 0.32577258418887023, 0.32577258418887023, 0.35994382678489234, 0.35994382678489234, 0.35994382678489234, 0.0745231937247528, 0.0745231937247528, 0.0745231937247528, 0.06156865496085828, 0.06156865496085828, 0.06156865496085828, 0.1677004733203472, 0.1677004733203472, 0.1677004733203472, 0.2542405065824883, 0.2542405065824883, 0.2542405065824883, 0.26627913903224476, 0.26627913903224476, 0.26627913903224476, 0.22771979266172515, 0.22771979266172515, 0.22771979266172515, 0.6790934366213891, 0.6790934366213891, 0.6790934366213891, 0.5953427389211889, 0.5953427389211889, 0.5953427389211889, 0.6180500935951363, 0.6180500935951363, 0.6180500935951363, 0.0910375701926821, 0.0910375701926821, 0.0910375701926821, 0.09301476557098576, 0.09301476557098576, 0.09301476557098576, 0.09480022555893741, 0.09480022555893741, 0.09480022555893741, 0.14874219784286324, 0.14874219784286324, 0.14874219784286324, 0.1709483513991592, 0.1709483513991592, 0.1709483513991592, 0.13773750526821515, 0.13773750526821515, 0.13773750526821515, 0.3396156276996176, 0.3396156276996176, 0.3396156276996176, 0.3185398343637562, 0.3185398343637562, 0.3185398343637562, 0.4205664999573191, 0.4205664999573191, 0.4205664999573191, 0.23699793746201736, 0.23699793746201736, 0.23699793746201736, 0.23990661429484494, 0.23990661429484494, 0.23990661429484494, 0.2685569425757075, 0.2685569425757075, 0.2685569425757075, 0.18047845701680054, 0.18047845701680054, 0.18047845701680054, 0.16998797309577263, 0.16998797309577263, 0.16998797309577263, 0.1731531467509836, 0.1731531467509836, 0.1731531467509836, 0.1975174599014311, 0.1975174599014311, 0.1975174599014311, 0.23802967089085647, 0.23802967089085647, 0.23802967089085647, 0.22805448106554305, 0.22805448106554305, 0.22805448106554305, 0.7803954440988817, 0.7803954440988817, 0.7803954440988817, 0.16466544408647765, 0.16466544408647765, 0.16466544408647765, 0.6145560198669322, 0.6145560198669322, 0.6145560198669322, 0.20831607305098154, 0.20831607305098154, 0.20831607305098154, 0.5114395151411737, 0.5114395151411737, 0.5114395151411737, 0.20947358111059966, 0.20947358111059966, 0.20947358111059966, 0.1950418278134205, 0.1950418278134205, 0.1950418278134205, 0.1500554221924567, 0.1500554221924567, 0.1500554221924567, 0.20437845624040052, 0.20437845624040052, 0.20437845624040052, 0.0775581403425456, 0.0775581403425456, 0.0775581403425456, 0.0739780326804097, 0.0739780326804097, 0.0739780326804097, 0.07168157984795431, 0.07168157984795431, 0.07168157984795431]}, "mutation_prompt": null}
{"id": "a0eb5b09-ae78-4b7f-966c-674640508e8f", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "f2376ecd-57ae-497c-b922-f27748ff4399", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "8ce8a473-2fb7-4482-89f3-88f6bfb4551a", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "8b5b5728-840f-47b0-b916-cf15d468587f", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "d9b1ba76-c2ea-4205-b84a-fdf96db2474c", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "dc465381-2b0e-40a6-913c-f7ac5f8f9c8b", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "80af9650-4f55-49ed-8021-2e3c4a512822", "solution": "import numpy as np\n\nclass AdaptiveDENR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.random.rand())\n        self.cooling_rate = 0.95  # Adjusted cooling rate\n        self.dynamic_pop_adjust = lambda size, fit: max(10, int(size * (1 - 0.1 * (fit / (fit + 1)))))\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n            self.pop_size = self.dynamic_pop_adjust(self.pop_size, np.min(fitness))\n            population = population[:self.pop_size]\n            fitness = fitness[:self.pop_size]\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDENR", "description": "Adaptive Differential Evolution with Nonlinear Cooling and Dynamic Population Resizing for Enhanced Optimization.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 11 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 11 is out of bounds for axis 0 with size 10')", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {}, "mutation_prompt": null}
{"id": "e5cca1db-eb1f-414b-8c09-36889009df1e", "solution": "import numpy as np\n\nclass HybridAdaptiveCrossDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 30  # Adjusted population size for better exploration\n        self.mutation_factor = 0.7  # Slightly lowered mutation factor\n        self.crossover_rate = 0.8  # Adjusted crossover rate\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.8 + 0.1 * np.random.rand())  # Adjusted cooling schedule\n        self.cooling_rate = 0.95  # Adjusted cooling rate for slower annealing\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation and crossover\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand()\n                    self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveCrossDESA", "description": "A hybrid strategy combining differential evolution with dynamic simulated annealing and adaptive crossover to enhance convergence through probabilistic adjustments.", "configspace": "", "generation": 32, "fitness": 0.3567406048300712, "feedback": "The algorithm HybridAdaptiveCrossDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.7947922335506106, 0.7947922335506106, 0.7947922335506106, 0.8049117819932277, 0.8049117819932277, 0.8049117819932277, 0.8090258852911982, 0.8090258852911982, 0.8090258852911982, 0.6567814145828383, 0.6567814145828383, 0.6567814145828383, 0.6790949511558921, 0.6790949511558921, 0.6790949511558921, 0.6626523813133346, 0.6626523813133346, 0.6626523813133346, 0.1321163972192435, 0.1321163972192435, 0.1321163972192435, 0.17923891750659038, 0.17923891750659038, 0.17923891750659038, 0.11713533833520628, 0.11713533833520628, 0.11713533833520628, 0.11551386790496343, 0.11551386790496343, 0.11551386790496343, 0.11666712511413957, 0.11666712511413957, 0.11666712511413957, 0.11184461636802301, 0.11184461636802301, 0.11184461636802301, 0.9501751392797608, 0.9501751392797608, 0.9501751392797608, 0.9702329736925314, 0.9702329736925314, 0.9702329736925314, 0.9673142144130565, 0.9673142144130565, 0.9673142144130565, 0.4675644971148414, 0.4675644971148414, 0.4675644971148414, 0.4530009672754045, 0.4530009672754045, 0.4530009672754045, 0.4389514898091802, 0.4389514898091802, 0.4389514898091802, 0.6977541145600455, 0.6977541145600455, 0.6977541145600455, 0.7036231739798677, 0.7036231739798677, 0.7036231739798677, 0.6960587678236652, 0.6960587678236652, 0.6960587678236652, 0.34219885520134197, 0.34219885520134197, 0.34219885520134197, 0.3567546227432342, 0.3567546227432342, 0.3567546227432342, 0.3111277585445522, 0.3111277585445522, 0.3111277585445522, 0.44620758694758844, 0.44620758694758844, 0.44620758694758844, 0.3510376092152182, 0.3510376092152182, 0.3510376092152182, 0.2863644626323436, 0.2863644626323436, 0.2863644626323436, 0.2789818750286017, 0.2789818750286017, 0.2789818750286017, 0.23322019982801634, 0.23322019982801634, 0.23322019982801634, 0.21403592441489605, 0.21403592441489605, 0.21403592441489605, 0.35586343628383466, 0.35586343628383466, 0.35586343628383466, 0.34848716601388774, 0.34848716601388774, 0.34848716601388774, 0.43005624492645644, 0.43005624492645644, 0.43005624492645644, 0.1033759369713465, 0.1033759369713465, 0.1033759369713465, 0.13873515035623696, 0.13873515035623696, 0.13873515035623696, 0.12798956819863794, 0.12798956819863794, 0.12798956819863794, 0.258168149718243, 0.258168149718243, 0.258168149718243, 0.26329793492514963, 0.26329793492514963, 0.26329793492514963, 0.2464342003185912, 0.2464342003185912, 0.2464342003185912, 0.6196944100958075, 0.6196944100958075, 0.6196944100958075, 0.6038188112950132, 0.6038188112950132, 0.6038188112950132, 0.6143842375398756, 0.6143842375398756, 0.6143842375398756, 0.09710354525342302, 0.09710354525342302, 0.09710354525342302, 0.08446122506244735, 0.08446122506244735, 0.08446122506244735, 0.08456145640389534, 0.08456145640389534, 0.08456145640389534, 0.15903287818694278, 0.15903287818694278, 0.15903287818694278, 0.26303039373825887, 0.26303039373825887, 0.26303039373825887, 0.16682862636061202, 0.16682862636061202, 0.16682862636061202, 0.33649708062656136, 0.33649708062656136, 0.33649708062656136, 0.3323100939128032, 0.3323100939128032, 0.3323100939128032, 0.3699984557543702, 0.3699984557543702, 0.3699984557543702, 0.27626416297391065, 0.27626416297391065, 0.27626416297391065, 0.25621352523027263, 0.25621352523027263, 0.25621352523027263, 0.27363441728833904, 0.27363441728833904, 0.27363441728833904, 0.19109842687927647, 0.19109842687927647, 0.19109842687927647, 0.1872515793596049, 0.1872515793596049, 0.1872515793596049, 0.1871087936228073, 0.1871087936228073, 0.1871087936228073, 0.19106898155244234, 0.19106898155244234, 0.19106898155244234, 0.18094344298716492, 0.18094344298716492, 0.18094344298716492, 0.2263344711904106, 0.2263344711904106, 0.2263344711904106, 0.7366468981434766, 0.7366468981434766, 0.7366468981434766, 0.17782603067836067, 0.17782603067836067, 0.17782603067836067, 0.17779770244982496, 0.17779770244982496, 0.17779770244982496, 0.7427245656458222, 0.7427245656458222, 0.7427245656458222, 0.5389260824032782, 0.5389260824032782, 0.5389260824032782, 0.2083415105270806, 0.2083415105270806, 0.2083415105270806, 0.19849496314841197, 0.19849496314841197, 0.19849496314841197, 0.1830424807387493, 0.1830424807387493, 0.1830424807387493, 0.18552063066112, 0.18552063066112, 0.18552063066112, 0.06374686885012726, 0.06374686885012726, 0.06374686885012726, 0.08676293534566071, 0.08676293534566071, 0.08676293534566071, 0.06706693330718005, 0.06706693330718005, 0.06706693330718005]}, "mutation_prompt": null}
{"id": "ac1b5752-0b6b-4967-b3c8-18b430274ea5", "solution": "import numpy as np\n\nclass HybridEvoStochasticTunneling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.7\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.random.rand())  # Tuned cooling schedule\n        self.cooling_rate = 0.9  # Modified cooling rate for better exploration\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 40 == 0:  # Adapt the mutation factor more frequently\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)  # More frequent adjustment\n                else:\n                    prob_accept = np.exp(-np.exp((fitness[i] - trial_fitness) / temperature))  # Apply tunneling\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridEvoStochasticTunneling", "description": "An innovative hybrid evolutionary algorithm combines adaptive differential evolution with stochastic tunneling to enhance local and global search capabilities.", "configspace": "", "generation": 33, "fitness": 0.1133625449845562, "feedback": "The algorithm HybridEvoStochasticTunneling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.1735821101674222, 0.1735821101674222, 0.1735821101674222, 0.14705429739400766, 0.14705429739400766, 0.14705429739400766, 0.15298916686201447, 0.15298916686201447, 0.15298916686201447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0363648547422053, 0.0363648547422053, 0.0363648547422053, 0.029710240099875995, 0.029710240099875995, 0.029710240099875995, 0.02827207501955309, 0.02827207501955309, 0.02827207501955309, 0.024264799704992623, 0.024264799704992623, 0.024264799704992623, 0.02219049743346113, 0.02219049743346113, 0.02219049743346113, 0.0023928704935829437, 0.0023928704935829437, 0.0023928704935829437, 0.9340215034406256, 0.9340215034406256, 0.9340215034406256, 0.949257233134537, 0.949257233134537, 0.949257233134537, 0.9553925937432665, 0.9553925937432665, 0.9553925937432665, 0.055211099005708086, 0.055211099005708086, 0.055211099005708086, 0.07018914681023802, 0.07018914681023802, 0.07018914681023802, 0.04853111205385807, 0.04853111205385807, 0.04853111205385807, 0.06869376999893806, 0.06869376999893806, 0.06869376999893806, 0.107645605308333, 0.107645605308333, 0.107645605308333, 0.08297741137819103, 0.08297741137819103, 0.08297741137819103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029551369486481405, 0.029551369486481405, 0.029551369486481405, 0.06562193369944147, 0.06562193369944147, 0.06562193369944147, 0.03501600323851506, 0.03501600323851506, 0.03501600323851506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1758382012988381, 0.1758382012988381, 0.1758382012988381, 0.17151328499160934, 0.17151328499160934, 0.17151328499160934, 0.16434787046201838, 0.16434787046201838, 0.16434787046201838, 0.035813870569005646, 0.035813870569005646, 0.035813870569005646, 0.03396180257217363, 0.03396180257217363, 0.03396180257217363, 0.043773183798286985, 0.043773183798286985, 0.043773183798286985, 0.15402124617949264, 0.15402124617949264, 0.15402124617949264, 0.1430962433629278, 0.1430962433629278, 0.1430962433629278, 0.11634246577678475, 0.11634246577678475, 0.11634246577678475, 0.17605586204981571, 0.17605586204981571, 0.17605586204981571, 0.14179302296859442, 0.14179302296859442, 0.14179302296859442, 0.15345091042540482, 0.15345091042540482, 0.15345091042540482, 0.11301266405374677, 0.11301266405374677, 0.11301266405374677, 0.09313399361249708, 0.09313399361249708, 0.09313399361249708, 0.1058598639411732, 0.1058598639411732, 0.1058598639411732, 0.13047134489753875, 0.13047134489753875, 0.13047134489753875, 0.13867740553226338, 0.13867740553226338, 0.13867740553226338, 0.13205979928420697, 0.13205979928420697, 0.13205979928420697, 0.10017740056516355, 0.10017740056516355, 0.10017740056516355, 0.09116482629425426, 0.09116482629425426, 0.09116482629425426, 0.10544404241072625, 0.10544404241072625, 0.10544404241072625, 0.1562613822629504, 0.1562613822629504, 0.1562613822629504, 0.1455622715729904, 0.1455622715729904, 0.1455622715729904, 0.15215107264309213, 0.15215107264309213, 0.15215107264309213, 0.178157475262528, 0.178157475262528, 0.178157475262528, 0.11371898188026774, 0.11371898188026774, 0.11371898188026774, 0.18593543933015744, 0.18593543933015744, 0.18593543933015744, 0.19364630296474938, 0.19364630296474938, 0.19364630296474938, 0.1899049341849236, 0.1899049341849236, 0.1899049341849236, 0.17991329200353523, 0.17991329200353523, 0.17991329200353523, 0.03866782738237562, 0.03866782738237562, 0.03866782738237562, 0.03941521856732921, 0.03941521856732921, 0.03941521856732921, 0.04803004257137655, 0.04803004257137655, 0.04803004257137655]}, "mutation_prompt": null}
{"id": "50266bb9-3393-4b4a-8431-e058d5f613b9", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "ace8caaf-719f-4fd3-b804-94bc6bd62a04", "solution": "import numpy as np\n\nclass StochasticAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 30\n        self.mutation_factor = 0.7\n        self.crossover_rate = 0.8\n        self.initial_temperature = 1.2\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.random.rand())\n        self.cooling_rate = 0.92\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if np.random.rand() < 0.25:  # Stochastic mutation factor adjustment\n                    self.mutation_factor = 0.4 + 0.6 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "StochasticAdaptiveDE", "description": "A stochastic adaptive differential evolution algorithm combines dynamic scaling and randomness to exploit search space features and improve convergence efficiency.", "configspace": "", "generation": 35, "fitness": 0.36083517293649764, "feedback": "The algorithm StochasticAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8424966036279331, 0.8424966036279331, 0.8424966036279331, 0.8466438635859591, 0.8466438635859591, 0.8466438635859591, 0.8488904026764801, 0.8488904026764801, 0.8488904026764801, 0.7185140621797734, 0.7185140621797734, 0.7185140621797734, 0.7349796655166729, 0.7349796655166729, 0.7349796655166729, 0.7123919946087682, 0.7123919946087682, 0.7123919946087682, 0.1501739636599384, 0.1501739636599384, 0.1501739636599384, 0.23376884834974465, 0.23376884834974465, 0.23376884834974465, 0.14592130189644326, 0.14592130189644326, 0.14592130189644326, 0.13943003093535566, 0.13943003093535566, 0.13943003093535566, 0.23935364788951896, 0.23935364788951896, 0.23935364788951896, 0.22123498651291484, 0.22123498651291484, 0.22123498651291484, 0.9698427860391494, 0.9698427860391494, 0.9698427860391494, 0.9792328387738346, 0.9792328387738346, 0.9792328387738346, 0.9559777361512635, 0.9559777361512635, 0.9559777361512635, 0.5834169827183987, 0.5834169827183987, 0.5834169827183987, 0.5526032769792724, 0.5526032769792724, 0.5526032769792724, 0.5645676041690976, 0.5645676041690976, 0.5645676041690976, 0.7212442608426644, 0.7212442608426644, 0.7212442608426644, 0.7038851700180191, 0.7038851700180191, 0.7038851700180191, 0.7828365319845961, 0.7828365319845961, 0.7828365319845961, 0.3302220732951662, 0.3302220732951662, 0.3302220732951662, 0.2655349582144486, 0.2655349582144486, 0.2655349582144486, 0.25767868586451226, 0.25767868586451226, 0.25767868586451226, 0.2229111817001621, 0.2229111817001621, 0.2229111817001621, 0.2994914167014586, 0.2994914167014586, 0.2994914167014586, 0.34414568839112536, 0.34414568839112536, 0.34414568839112536, 0.2064865241911319, 0.2064865241911319, 0.2064865241911319, 0.19706268345648892, 0.19706268345648892, 0.19706268345648892, 0.24180815483787832, 0.24180815483787832, 0.24180815483787832, 0.2829386457099172, 0.2829386457099172, 0.2829386457099172, 0.3978829950142323, 0.3978829950142323, 0.3978829950142323, 0.4342540492018817, 0.4342540492018817, 0.4342540492018817, 0.06321759746420741, 0.06321759746420741, 0.06321759746420741, 0.11818231887031183, 0.11818231887031183, 0.11818231887031183, 0.15475348063844485, 0.15475348063844485, 0.15475348063844485, 0.25427196568635235, 0.25427196568635235, 0.25427196568635235, 0.289569040692356, 0.289569040692356, 0.289569040692356, 0.22130558610955053, 0.22130558610955053, 0.22130558610955053, 0.6645065450757239, 0.6645065450757239, 0.6645065450757239, 0.6708247642815058, 0.6708247642815058, 0.6708247642815058, 0.6563099172777299, 0.6563099172777299, 0.6563099172777299, 0.07942948885151235, 0.07942948885151235, 0.07942948885151235, 0.11092478921866877, 0.11092478921866877, 0.11092478921866877, 0.08832874057009321, 0.08832874057009321, 0.08832874057009321, 0.23784666347147765, 0.23784666347147765, 0.23784666347147765, 0.14174062250929909, 0.14174062250929909, 0.14174062250929909, 0.13719282360383345, 0.13719282360383345, 0.13719282360383345, 0.4453076456724495, 0.4453076456724495, 0.4453076456724495, 0.3336034335576663, 0.3336034335576663, 0.3336034335576663, 0.4582825173474204, 0.4582825173474204, 0.4582825173474204, 0.3084924334138802, 0.3084924334138802, 0.3084924334138802, 0.2674522185268946, 0.2674522185268946, 0.2674522185268946, 0.3293900616369009, 0.3293900616369009, 0.3293900616369009, 0.17477996782065508, 0.17477996782065508, 0.17477996782065508, 0.19089768995263345, 0.19089768995263345, 0.19089768995263345, 0.20744954994267617, 0.20744954994267617, 0.20744954994267617, 0.2503374249266176, 0.2503374249266176, 0.2503374249266176, 0.257943433120685, 0.257943433120685, 0.257943433120685, 0.22670496699011078, 0.22670496699011078, 0.22670496699011078, 0.774135451425265, 0.774135451425265, 0.774135451425265, 0.15832783386032256, 0.15832783386032256, 0.15832783386032256, 0.1824051142164521, 0.1824051142164521, 0.1824051142164521, 0.20110050206174268, 0.20110050206174268, 0.20110050206174268, 0.2066750355537651, 0.2066750355537651, 0.2066750355537651, 0.2051609695159493, 0.2051609695159493, 0.2051609695159493, 0.20819689150302234, 0.20819689150302234, 0.20819689150302234, 0.16743971338060815, 0.16743971338060815, 0.16743971338060815, 0.1782111438893189, 0.1782111438893189, 0.1782111438893189, 0.08088401045762017, 0.08088401045762017, 0.08088401045762017, 0.07612604622301855, 0.07612604622301855, 0.07612604622301855, 0.07460043641688519, 0.07460043641688519, 0.07460043641688519]}, "mutation_prompt": null}
{"id": "a46cc7d0-8702-47c4-afa0-c6d430d5d9b2", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "ad623036-c926-4154-a9db-2f9403f39550", "solution": "import numpy as np\n\nclass ImprovedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 30  # Increased population size for better diversity\n        self.mutation_factor = 0.9  # Increased mutation factor for broader exploration\n        self.crossover_rate = 0.7  # Lower crossover rate to maintain diversity\n        self.initial_temperature = 1.5  # Higher initial temperature for greater acceptance probability\n        self.cooling_schedule = lambda t, i: t * (0.95 + 0.03 * np.random.rand())  # Slightly different cooling schedule\n        self.cooling_rate = 0.92  # Adjusted cooling rate for fine-tuned cooling\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Modified mutation adaptation frequency\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "ImprovedHybridDESA", "description": "An adaptive hybrid evolutionary strategy combines differential evolution with adaptive cooling and mutation mechanisms, enhancing exploration and exploitation for diverse optimization problems.", "configspace": "", "generation": 37, "fitness": 0.2959115647166893, "feedback": "The algorithm ImprovedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8058099563746829, 0.8058099563746829, 0.8058099563746829, 0.8035485277258152, 0.8035485277258152, 0.8035485277258152, 0.785846894578831, 0.785846894578831, 0.785846894578831, 0.6244925017977716, 0.6244925017977716, 0.6244925017977716, 0.6282268230393526, 0.6282268230393526, 0.6282268230393526, 0.6335304167725425, 0.6335304167725425, 0.6335304167725425, 0.3243023042590134, 0.3243023042590134, 0.3243023042590134, 0.1944930099341483, 0.1944930099341483, 0.1944930099341483, 0.19843804209848392, 0.19843804209848392, 0.19843804209848392, 0.22091820435065324, 0.22091820435065324, 0.22091820435065324, 0.21611413260475243, 0.21611413260475243, 0.21611413260475243, 0.17081956799129072, 0.17081956799129072, 0.17081956799129072, 0.9617224645756401, 0.9617224645756401, 0.9617224645756401, 0.9652038774029951, 0.9652038774029951, 0.9652038774029951, 0.980834833833357, 0.980834833833357, 0.980834833833357, 0.3902022209266166, 0.3902022209266166, 0.3902022209266166, 0.3369793506549147, 0.3369793506549147, 0.3369793506549147, 0.38086081693931406, 0.38086081693931406, 0.38086081693931406, 0.5228020470552556, 0.5228020470552556, 0.5228020470552556, 0.5731426719556527, 0.5731426719556527, 0.5731426719556527, 0.4807838642247759, 0.4807838642247759, 0.4807838642247759, 0.19333255217145062, 0.19333255217145062, 0.19333255217145062, 0.19401463964783294, 0.19401463964783294, 0.19401463964783294, 0.23085050483900826, 0.23085050483900826, 0.23085050483900826, 0.009911799447107073, 0.009911799447107073, 0.009911799447107073, 0.20308284215401917, 0.20308284215401917, 0.20308284215401917, 0.21717004508400928, 0.21717004508400928, 0.21717004508400928, 0.040382340989398524, 0.040382340989398524, 0.040382340989398524, 0.03452479399946318, 0.03452479399946318, 0.03452479399946318, 0.029387534291550055, 0.029387534291550055, 0.029387534291550055, 0.11483075930484898, 0.11483075930484898, 0.11483075930484898, 0.143708590940399, 0.143708590940399, 0.143708590940399, 0.175352315257699, 0.175352315257699, 0.175352315257699, 0.017883141445206974, 0.017883141445206974, 0.017883141445206974, 0.011619018966160133, 0.011619018966160133, 0.011619018966160133, 0.0303743847770096, 0.0303743847770096, 0.0303743847770096, 0.1550203295620679, 0.1550203295620679, 0.1550203295620679, 0.17235278476968197, 0.17235278476968197, 0.17235278476968197, 0.12849634314074132, 0.12849634314074132, 0.12849634314074132, 0.524127930219989, 0.524127930219989, 0.524127930219989, 0.5022670822614652, 0.5022670822614652, 0.5022670822614652, 0.5126756176079528, 0.5126756176079528, 0.5126756176079528, 0.08898907034155568, 0.08898907034155568, 0.08898907034155568, 0.08883070212306265, 0.08883070212306265, 0.08883070212306265, 0.09940849409254371, 0.09940849409254371, 0.09940849409254371, 0.19597803473996078, 0.19597803473996078, 0.19597803473996078, 0.19825559004267523, 0.19825559004267523, 0.19825559004267523, 0.14861493039069795, 0.14861493039069795, 0.14861493039069795, 0.30099484058493275, 0.30099484058493275, 0.30099484058493275, 0.3098617634665237, 0.3098617634665237, 0.3098617634665237, 0.33347590917347414, 0.33347590917347414, 0.33347590917347414, 0.240443792785059, 0.240443792785059, 0.240443792785059, 0.19983319490436835, 0.19983319490436835, 0.19983319490436835, 0.2510059670282374, 0.2510059670282374, 0.2510059670282374, 0.1953255020493656, 0.1953255020493656, 0.1953255020493656, 0.16734982653218555, 0.16734982653218555, 0.16734982653218555, 0.18340899536095, 0.18340899536095, 0.18340899536095, 0.19532189699814773, 0.19532189699814773, 0.19532189699814773, 0.19742532136564372, 0.19742532136564372, 0.19742532136564372, 0.3293260149216337, 0.3293260149216337, 0.3293260149216337, 0.7208151696295676, 0.7208151696295676, 0.7208151696295676, 0.20967055902607434, 0.20967055902607434, 0.20967055902607434, 0.45634588473629634, 0.45634588473629634, 0.45634588473629634, 0.1627765079729201, 0.1627765079729201, 0.1627765079729201, 0.1878212832854188, 0.1878212832854188, 0.1878212832854188, 0.20305391860933575, 0.20305391860933575, 0.20305391860933575, 0.18018549402457062, 0.18018549402457062, 0.18018549402457062, 0.19829265421145614, 0.19829265421145614, 0.19829265421145614, 0.1827132888055376, 0.1827132888055376, 0.1827132888055376, 0.07405043072694262, 0.07405043072694262, 0.07405043072694262, 0.09030243320079134, 0.09030243320079134, 0.09030243320079134, 0.07531730849877827, 0.07531730849877827, 0.07531730849877827]}, "mutation_prompt": null}
{"id": "f35877a3-8225-4ab7-b1b0-fcfd7b3f494c", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "2ef488d7-c6e9-40e0-bab9-e919b5d40f8e", "solution": "import numpy as np\n\nclass MultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.85  # Changed mutation factor for better exploration\n        self.crossover_rate = 0.8  # Reduced crossover rate for increased diversity\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.random.rand())  # Adjusted schedule\n        self.cooling_rate = 0.95  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 40 == 0:  # Adaptive mutation factor more frequently\n                    self.mutation_factor = 0.4 + 0.6 * np.random.rand()  # Wider range for dynamic adjustment\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "MultiStrategyDE", "description": "A multi-strategy differential evolution combines targeted mutation and adaptive cooling, optimizing selection and exploration dynamically.", "configspace": "", "generation": 39, "fitness": 0.4326502424065709, "feedback": "The algorithm MultiStrategyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8905218314135197, 0.8905218314135197, 0.8905218314135197, 0.8993719371460293, 0.8993719371460293, 0.8993719371460293, 0.8993157634154825, 0.8993157634154825, 0.8993157634154825, 0.8423896087780971, 0.8423896087780971, 0.8423896087780971, 0.8088808949155588, 0.8088808949155588, 0.8088808949155588, 0.8139516922849, 0.8139516922849, 0.8139516922849, 0.25186978344382616, 0.25186978344382616, 0.25186978344382616, 0.300032206197144, 0.300032206197144, 0.300032206197144, 0.38077248740516856, 0.38077248740516856, 0.38077248740516856, 0.14744346244685824, 0.14744346244685824, 0.14744346244685824, 0.1573359901865823, 0.1573359901865823, 0.1573359901865823, 0.16359466808084466, 0.16359466808084466, 0.16359466808084466, 0.9712948745136765, 0.9712948745136765, 0.9712948745136765, 0.9912671062498943, 0.9912671062498943, 0.9912671062498943, 0.952713271614023, 0.952713271614023, 0.952713271614023, 0.6926770435148016, 0.6926770435148016, 0.6926770435148016, 0.6573464453076967, 0.6573464453076967, 0.6573464453076967, 0.0882728013413775, 0.0882728013413775, 0.0882728013413775, 0.8422977923187203, 0.8422977923187203, 0.8422977923187203, 0.7808634181287836, 0.7808634181287836, 0.7808634181287836, 0.8230116227919042, 0.8230116227919042, 0.8230116227919042, 0.516951031849312, 0.516951031849312, 0.516951031849312, 0.46500173914792375, 0.46500173914792375, 0.46500173914792375, 0.5337858681569229, 0.5337858681569229, 0.5337858681569229, 0.44257423748252955, 0.44257423748252955, 0.44257423748252955, 0.5975409190103775, 0.5975409190103775, 0.5975409190103775, 0.3334605590296794, 0.3334605590296794, 0.3334605590296794, 0.37833538877698103, 0.37833538877698103, 0.37833538877698103, 0.47909921408477674, 0.47909921408477674, 0.47909921408477674, 0.32778492087361333, 0.32778492087361333, 0.32778492087361333, 0.562644815157767, 0.562644815157767, 0.562644815157767, 0.3205424606250362, 0.3205424606250362, 0.3205424606250362, 0.6438563044051804, 0.6438563044051804, 0.6438563044051804, 0.2740600333413449, 0.2740600333413449, 0.2740600333413449, 0.20552608739186207, 0.20552608739186207, 0.20552608739186207, 0.22987187652000518, 0.22987187652000518, 0.22987187652000518, 0.36698298623671155, 0.36698298623671155, 0.36698298623671155, 0.43293412386680263, 0.43293412386680263, 0.43293412386680263, 0.3239318957460592, 0.3239318957460592, 0.3239318957460592, 0.7676638991662286, 0.7676638991662286, 0.7676638991662286, 0.7619750835291299, 0.7619750835291299, 0.7619750835291299, 0.7742981801392732, 0.7742981801392732, 0.7742981801392732, 0.11532586630160746, 0.11532586630160746, 0.11532586630160746, 0.1026841343992363, 0.1026841343992363, 0.1026841343992363, 0.1063546073461401, 0.1063546073461401, 0.1063546073461401, 0.1671561314546448, 0.1671561314546448, 0.1671561314546448, 0.16306195947209212, 0.16306195947209212, 0.16306195947209212, 0.16541643642936887, 0.16541643642936887, 0.16541643642936887, 0.46700125934868086, 0.46700125934868086, 0.46700125934868086, 0.4942553133962587, 0.4942553133962587, 0.4942553133962587, 0.520237210097495, 0.520237210097495, 0.520237210097495, 0.31516818994234885, 0.31516818994234885, 0.31516818994234885, 0.31552129669667706, 0.31552129669667706, 0.31552129669667706, 0.3930693256655794, 0.3930693256655794, 0.3930693256655794, 0.20310712557225463, 0.20310712557225463, 0.20310712557225463, 0.19268077313714405, 0.19268077313714405, 0.19268077313714405, 0.20919739490052613, 0.20919739490052613, 0.20919739490052613, 0.6374201391673566, 0.6374201391673566, 0.6374201391673566, 0.2206218984435514, 0.2206218984435514, 0.2206218984435514, 0.2507452528416376, 0.2507452528416376, 0.2507452528416376, 0.8776737787001774, 0.8776737787001774, 0.8776737787001774, 0.18420093037139373, 0.18420093037139373, 0.18420093037139373, 0.5380427158826433, 0.5380427158826433, 0.5380427158826433, 0.2028538380543058, 0.2028538380543058, 0.2028538380543058, 0.2012323815551651, 0.2012323815551651, 0.2012323815551651, 0.20837222622473717, 0.20837222622473717, 0.20837222622473717, 0.18137103543727862, 0.18137103543727862, 0.18137103543727862, 0.18672964094758293, 0.18672964094758293, 0.18672964094758293, 0.19001138811904006, 0.19001138811904006, 0.19001138811904006, 0.08187500566128858, 0.08187500566128858, 0.08187500566128858, 0.08058191888779132, 0.08058191888779132, 0.08058191888779132, 0.08480195278669467, 0.08480195278669467, 0.08480195278669467]}, "mutation_prompt": null}
{"id": "d2af6039-45e5-4872-9616-14cc2dcc4987", "solution": "import numpy as np\n\nclass HybridAdaptiveDEST:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Adjusted population size\n        self.mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.85  # Adjusted crossover rate\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t / (1 + 0.01 * i)\n        self.cooling_rate = 0.95  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 30 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.4 + 0.6 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / (temperature + 1e-8))\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDEST", "description": "A robust hybrid metaheuristic combining adaptive differential evolution and stochastic tunneling for improved global search efficiency.", "configspace": "", "generation": 40, "fitness": 0.453351042929621, "feedback": "The algorithm HybridAdaptiveDEST got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.27.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8666160499802352, 0.8666160499802352, 0.8666160499802352, 0.854200830619093, 0.854200830619093, 0.854200830619093, 0.8716275173060822, 0.8716275173060822, 0.8716275173060822, 0.7696954130288849, 0.7696954130288849, 0.7696954130288849, 0.7605335894592824, 0.7605335894592824, 0.7605335894592824, 0.7627495360926746, 0.7627495360926746, 0.7627495360926746, 0.3600212686536459, 0.3600212686536459, 0.3600212686536459, 0.13254163707170097, 0.13254163707170097, 0.13254163707170097, 0.13350785364588025, 0.13350785364588025, 0.13350785364588025, 0.12491126931309904, 0.12491126931309904, 0.12491126931309904, 0.11669632601926327, 0.11669632601926327, 0.11669632601926327, 0.20151908143921293, 0.20151908143921293, 0.20151908143921293, 0.9827790850943038, 0.9827790850943038, 0.9827790850943038, 0.9572338571803836, 0.9572338571803836, 0.9572338571803836, 0.9755938243311555, 0.9755938243311555, 0.9755938243311555, 0.6202954704894709, 0.6202954704894709, 0.6202954704894709, 0.662547052298968, 0.662547052298968, 0.662547052298968, 0.6481938291459707, 0.6481938291459707, 0.6481938291459707, 0.7715355198767657, 0.7715355198767657, 0.7715355198767657, 0.7976183106010404, 0.7976183106010404, 0.7976183106010404, 0.8127270527267709, 0.8127270527267709, 0.8127270527267709, 0.5550901035507174, 0.5550901035507174, 0.5550901035507174, 0.4844208661306906, 0.4844208661306906, 0.4844208661306906, 0.48502941553691825, 0.48502941553691825, 0.48502941553691825, 0.4324825331977826, 0.4324825331977826, 0.4324825331977826, 0.5251933668401307, 0.5251933668401307, 0.5251933668401307, 0.5150911291911988, 0.5150911291911988, 0.5150911291911988, 0.49652636348403634, 0.49652636348403634, 0.49652636348403634, 0.43736641997689685, 0.43736641997689685, 0.43736641997689685, 0.4766691414952343, 0.4766691414952343, 0.4766691414952343, 0.6176029523383322, 0.6176029523383322, 0.6176029523383322, 0.467737381510675, 0.467737381510675, 0.467737381510675, 0.6516812232431759, 0.6516812232431759, 0.6516812232431759, 0.19908037254470723, 0.19908037254470723, 0.19908037254470723, 0.2893883819481784, 0.2893883819481784, 0.2893883819481784, 0.2136431904919205, 0.2136431904919205, 0.2136431904919205, 0.34162919698458183, 0.34162919698458183, 0.34162919698458183, 0.37433934578628436, 0.37433934578628436, 0.37433934578628436, 0.37335017865016784, 0.37335017865016784, 0.37335017865016784, 0.7937952215228143, 0.7937952215228143, 0.7937952215228143, 0.7320902308546982, 0.7320902308546982, 0.7320902308546982, 0.7500281898121036, 0.7500281898121036, 0.7500281898121036, 0.10476037604385147, 0.10476037604385147, 0.10476037604385147, 0.09158737690614438, 0.09158737690614438, 0.09158737690614438, 0.12204459289394876, 0.12204459289394876, 0.12204459289394876, 0.20129646943329849, 0.20129646943329849, 0.20129646943329849, 0.16123655237677936, 0.16123655237677936, 0.16123655237677936, 0.188824101919971, 0.188824101919971, 0.188824101919971, 0.4453323775244099, 0.4453323775244099, 0.4453323775244099, 0.4371719883543669, 0.4371719883543669, 0.4371719883543669, 0.5105336826556246, 0.5105336826556246, 0.5105336826556246, 0.2909233867885517, 0.2909233867885517, 0.2909233867885517, 0.34890256935943764, 0.34890256935943764, 0.34890256935943764, 0.4532793331296867, 0.4532793331296867, 0.4532793331296867, 0.21330119830790695, 0.21330119830790695, 0.21330119830790695, 0.20147076456703583, 0.20147076456703583, 0.20147076456703583, 0.21424733920346695, 0.21424733920346695, 0.21424733920346695, 0.30673885483285346, 0.30673885483285346, 0.30673885483285346, 0.545328001379519, 0.545328001379519, 0.545328001379519, 0.2209932196911999, 0.2209932196911999, 0.2209932196911999, 0.855416905182085, 0.855416905182085, 0.855416905182085, 0.1832663410150962, 0.1832663410150962, 0.1832663410150962, 0.7743276189119326, 0.7743276189119326, 0.7743276189119326, 0.6745005690853265, 0.6745005690853265, 0.6745005690853265, 0.20324454929928504, 0.20324454929928504, 0.20324454929928504, 0.725524704436082, 0.725524704436082, 0.725524704436082, 0.17548308524539402, 0.17548308524539402, 0.17548308524539402, 0.18240791413310098, 0.18240791413310098, 0.18240791413310098, 0.17565247724636301, 0.17565247724636301, 0.17565247724636301, 0.07789106365674925, 0.07789106365674925, 0.07789106365674925, 0.07617173644381947, 0.07617173644381947, 0.07617173644381947, 0.08403636144429272, 0.08403636144429272, 0.08403636144429272]}, "mutation_prompt": null}
{"id": "d640afdf-6c7e-4422-b6be-9ed9460c1a30", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "780af327-5a3b-416d-b1ab-d4362fa6abf5", "solution": "import numpy as np\n\nclass SynergisticAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25\n        self.mutation_factor = 0.7\n        self.crossover_rate = 0.8\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.random.rand())\n        self.cooling_rate = 0.92\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 40 == 0:  # Adaptive mutation factor adjustment with new interval\n                    self.mutation_factor = 0.4 + 0.6 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / (temperature * np.random.rand()))\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "SynergisticAdaptiveDESA", "description": "A synergy of differential evolution and simulated annealing with enhanced adaptive mechanisms and stochastic variability for robust optimization.", "configspace": "", "generation": 42, "fitness": 0.4175990436298252, "feedback": "The algorithm SynergisticAdaptiveDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.26.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8496597561925507, 0.8496597561925507, 0.8496597561925507, 0.8614466202100858, 0.8614466202100858, 0.8614466202100858, 0.8538639938841041, 0.8538639938841041, 0.8538639938841041, 0.7647816638483989, 0.7647816638483989, 0.7647816638483989, 0.7630623054930773, 0.7630623054930773, 0.7630623054930773, 0.7448153634540591, 0.7448153634540591, 0.7448153634540591, 0.37762236385668835, 0.37762236385668835, 0.37762236385668835, 0.4540420362698102, 0.4540420362698102, 0.4540420362698102, 0.3891193926586347, 0.3891193926586347, 0.3891193926586347, 0.3263020673444764, 0.3263020673444764, 0.3263020673444764, 0.12652207287002126, 0.12652207287002126, 0.12652207287002126, 0.19904344830634113, 0.19904344830634113, 0.19904344830634113, 0.9449981705088044, 0.9449981705088044, 0.9449981705088044, 0.9856751241737532, 0.9856751241737532, 0.9856751241737532, 0.9691145342231927, 0.9691145342231927, 0.9691145342231927, 0.6315028249101249, 0.6315028249101249, 0.6315028249101249, 0.6064796831251481, 0.6064796831251481, 0.6064796831251481, 0.6027307854964046, 0.6027307854964046, 0.6027307854964046, 0.7612778577882953, 0.7612778577882953, 0.7612778577882953, 0.8243396518800827, 0.8243396518800827, 0.8243396518800827, 0.8185963231092171, 0.8185963231092171, 0.8185963231092171, 0.40680948391562766, 0.40680948391562766, 0.40680948391562766, 0.23824838255391834, 0.23824838255391834, 0.23824838255391834, 0.4539534503031223, 0.4539534503031223, 0.4539534503031223, 0.2747887612642277, 0.2747887612642277, 0.2747887612642277, 0.3810290026109868, 0.3810290026109868, 0.3810290026109868, 0.4438890707836334, 0.4438890707836334, 0.4438890707836334, 0.2800040788137892, 0.2800040788137892, 0.2800040788137892, 0.3106472274315937, 0.3106472274315937, 0.3106472274315937, 0.22251704083796353, 0.22251704083796353, 0.22251704083796353, 0.44030866157171045, 0.44030866157171045, 0.44030866157171045, 0.44005613670228927, 0.44005613670228927, 0.44005613670228927, 0.5704811065028255, 0.5704811065028255, 0.5704811065028255, 0.06080584182723181, 0.06080584182723181, 0.06080584182723181, 0.1685998770834929, 0.1685998770834929, 0.1685998770834929, 0.17070418261417453, 0.17070418261417453, 0.17070418261417453, 0.28242661076059594, 0.28242661076059594, 0.28242661076059594, 0.32703820785904336, 0.32703820785904336, 0.32703820785904336, 0.2883266570814541, 0.2883266570814541, 0.2883266570814541, 0.7081343652549235, 0.7081343652549235, 0.7081343652549235, 0.7333533282755005, 0.7333533282755005, 0.7333533282755005, 0.7269751862562379, 0.7269751862562379, 0.7269751862562379, 0.09916154576979297, 0.09916154576979297, 0.09916154576979297, 0.10617607046534194, 0.10617607046534194, 0.10617607046534194, 0.09416455228401921, 0.09416455228401921, 0.09416455228401921, 0.14833522993409642, 0.14833522993409642, 0.14833522993409642, 0.16496319610336463, 0.16496319610336463, 0.16496319610336463, 0.13300905473360058, 0.13300905473360058, 0.13300905473360058, 0.3988291067676245, 0.3988291067676245, 0.3988291067676245, 0.4352108806067283, 0.4352108806067283, 0.4352108806067283, 0.5072789952092394, 0.5072789952092394, 0.5072789952092394, 0.3161269064725206, 0.3161269064725206, 0.3161269064725206, 0.29306173929226675, 0.29306173929226675, 0.29306173929226675, 0.3374393169285347, 0.3374393169285347, 0.3374393169285347, 0.1763551998395858, 0.1763551998395858, 0.1763551998395858, 0.19895881933745718, 0.19895881933745718, 0.19895881933745718, 0.19296296729105467, 0.19296296729105467, 0.19296296729105467, 0.2385698446780673, 0.2385698446780673, 0.2385698446780673, 0.5467739124727125, 0.5467739124727125, 0.5467739124727125, 0.2105530112690006, 0.2105530112690006, 0.2105530112690006, 0.8078184038380957, 0.8078184038380957, 0.8078184038380957, 0.17794269568137155, 0.17794269568137155, 0.17794269568137155, 0.7141943967025144, 0.7141943967025144, 0.7141943967025144, 0.7449662650628948, 0.7449662650628948, 0.7449662650628948, 0.20079143841695146, 0.20079143841695146, 0.20079143841695146, 0.20320209598230587, 0.20320209598230587, 0.20320209598230587, 0.1925035997497505, 0.1925035997497505, 0.1925035997497505, 0.20852030573171465, 0.20852030573171465, 0.20852030573171465, 0.1981202885433705, 0.1981202885433705, 0.1981202885433705, 0.08262447928109562, 0.08262447928109562, 0.08262447928109562, 0.0793764408683253, 0.0793764408683253, 0.0793764408683253, 0.07504768212640467, 0.07504768212640467, 0.07504768212640467]}, "mutation_prompt": null}
{"id": "94710ffb-bf12-483c-b8a3-4728b52c3628", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "b7487b3a-303e-4a1f-8e33-a1357ad0d10e", "solution": "import numpy as np\n\nclass HybridAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDESA", "description": "A hybrid adaptive strategy enhances differential evolution with dynamic simulated annealing, adjusting mutation and cooling mechanisms for improved convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8778337267611581, 0.8778337267611581, 0.8778337267611581, 0.8658322833699441, 0.8658322833699441, 0.8658322833699441, 0.8722281079045399, 0.8722281079045399, 0.8722281079045399, 0.7947209169984092, 0.7947209169984092, 0.7947209169984092, 0.7845589197755642, 0.7845589197755642, 0.7845589197755642, 0.7917033659607912, 0.7917033659607912, 0.7917033659607912, 0.46211090836240587, 0.46211090836240587, 0.46211090836240587, 0.3726221767673301, 0.3726221767673301, 0.3726221767673301, 0.138176219989966, 0.138176219989966, 0.138176219989966, 0.12317383284229799, 0.12317383284229799, 0.12317383284229799, 0.12661655783206316, 0.12661655783206316, 0.12661655783206316, 0.15967092104598757, 0.15967092104598757, 0.15967092104598757, 0.9542412739878713, 0.9542412739878713, 0.9542412739878713, 0.9519571595674488, 0.9519571595674488, 0.9519571595674488, 0.9391832231539655, 0.9391832231539655, 0.9391832231539655, 0.6398484153721896, 0.6398484153721896, 0.6398484153721896, 0.6917782085144657, 0.6917782085144657, 0.6917782085144657, 0.6985764652855527, 0.6985764652855527, 0.6985764652855527, 0.8499997701283636, 0.8499997701283636, 0.8499997701283636, 0.8240886705810446, 0.8240886705810446, 0.8240886705810446, 0.8233175183731714, 0.8233175183731714, 0.8233175183731714, 0.636284122885137, 0.636284122885137, 0.636284122885137, 0.602903178904494, 0.602903178904494, 0.602903178904494, 0.6197243434202424, 0.6197243434202424, 0.6197243434202424, 0.01000169091653802, 0.01000169091653802, 0.01000169091653802, 0.5001084818971767, 0.5001084818971767, 0.5001084818971767, 0.6141506018895828, 0.6141506018895828, 0.6141506018895828, 0.6376832783124078, 0.6376832783124078, 0.6376832783124078, 0.6091555213372875, 0.6091555213372875, 0.6091555213372875, 0.6061552191684947, 0.6061552191684947, 0.6061552191684947, 0.7094998530601393, 0.7094998530601393, 0.7094998530601393, 0.6669657262479929, 0.6669657262479929, 0.6669657262479929, 0.7280428973110602, 0.7280428973110602, 0.7280428973110602, 0.11426527717871382, 0.11426527717871382, 0.11426527717871382, 0.35123624170943146, 0.35123624170943146, 0.35123624170943146, 0.19995275245363175, 0.19995275245363175, 0.19995275245363175, 0.4894076069211034, 0.4894076069211034, 0.4894076069211034, 0.5389237211159048, 0.5389237211159048, 0.5389237211159048, 0.48786211479528696, 0.48786211479528696, 0.48786211479528696, 0.811810698406866, 0.811810698406866, 0.811810698406866, 0.7979621601172247, 0.7979621601172247, 0.7979621601172247, 0.782797456434897, 0.782797456434897, 0.782797456434897, 0.10873749643879405, 0.10873749643879405, 0.10873749643879405, 0.1338142874651017, 0.1338142874651017, 0.1338142874651017, 0.09227858043482307, 0.09227858043482307, 0.09227858043482307, 0.2874318081781666, 0.2874318081781666, 0.2874318081781666, 0.14748068271915094, 0.14748068271915094, 0.14748068271915094, 0.16861222488362348, 0.16861222488362348, 0.16861222488362348, 0.4935235749723641, 0.4935235749723641, 0.4935235749723641, 0.5111370273194731, 0.5111370273194731, 0.5111370273194731, 0.573878480797108, 0.573878480797108, 0.573878480797108, 0.3632691504016242, 0.3632691504016242, 0.3632691504016242, 0.23516282638266417, 0.23516282638266417, 0.23516282638266417, 0.49645776634533834, 0.49645776634533834, 0.49645776634533834, 0.1830667320520344, 0.1830667320520344, 0.1830667320520344, 0.19102950555799647, 0.19102950555799647, 0.19102950555799647, 0.1801450542012406, 0.1801450542012406, 0.1801450542012406, 0.20720998213094022, 0.20720998213094022, 0.20720998213094022, 0.41534067924093865, 0.41534067924093865, 0.41534067924093865, 0.48599956898932195, 0.48599956898932195, 0.48599956898932195, 0.871741100326606, 0.871741100326606, 0.871741100326606, 0.18854897801369852, 0.18854897801369852, 0.18854897801369852, 0.20131607847542332, 0.20131607847542332, 0.20131607847542332, 0.16809635613550777, 0.16809635613550777, 0.16809635613550777, 0.20034291762767276, 0.20034291762767276, 0.20034291762767276, 0.15536155819597752, 0.15536155819597752, 0.15536155819597752, 0.19869152671847667, 0.19869152671847667, 0.19869152671847667, 0.15586886167523006, 0.15586886167523006, 0.15586886167523006, 0.19928580230331605, 0.19928580230331605, 0.19928580230331605, 0.072689497579976, 0.072689497579976, 0.072689497579976, 0.08365965730626979, 0.08365965730626979, 0.08365965730626979, 0.07650215266818139, 0.07650215266818139, 0.07650215266818139]}, "mutation_prompt": null}
{"id": "4c6f7e83-1034-4a97-9097-06cc2874563e", "solution": "import numpy as np\n\nclass EnhancedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20  # Adjusted population size for diversity\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.95 + 0.03 * np.random.rand())  # Slightly altered cooling rate\n        self.cooling_rate = 0.92  # Fine-tuned cooling rate\n        self.adaptive_crossover_rate = True  # New flag for adaptive crossover\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand()  # Altered range for mutation factor\n\n                if self.adaptive_crossover_rate and evaluations % 30 == 0:  # Adaptive crossover rate\n                    self.crossover_rate = 0.8 + 0.2 * np.random.rand()  # Adaptive scaling\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedHybridDESA", "description": "An enhanced differential evolution with dynamic simulated annealing using adaptive strategies for mutation and crossover rates for better exploration and exploitation.", "configspace": "", "generation": 45, "fitness": 0.4537638646617463, "feedback": "The algorithm EnhancedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8419015373891618, 0.8419015373891618, 0.8419015373891618, 0.8684903384734972, 0.8684903384734972, 0.8684903384734972, 0.8651367768921843, 0.8651367768921843, 0.8651367768921843, 0.7612861533410216, 0.7612861533410216, 0.7612861533410216, 0.7370760147350073, 0.7370760147350073, 0.7370760147350073, 0.7654804529835109, 0.7654804529835109, 0.7654804529835109, 0.150291959596073, 0.150291959596073, 0.150291959596073, 0.2678322045006538, 0.2678322045006538, 0.2678322045006538, 0.4289009526350468, 0.4289009526350468, 0.4289009526350468, 0.13963744420917623, 0.13963744420917623, 0.13963744420917623, 0.13944020929224132, 0.13944020929224132, 0.13944020929224132, 0.13377412046525283, 0.13377412046525283, 0.13377412046525283, 0.9584540984600893, 0.9584540984600893, 0.9584540984600893, 0.9833139414123795, 0.9833139414123795, 0.9833139414123795, 0.9668723454191227, 0.9668723454191227, 0.9668723454191227, 0.622562685620542, 0.622562685620542, 0.622562685620542, 0.5882809002968113, 0.5882809002968113, 0.5882809002968113, 0.08785591807137338, 0.08785591807137338, 0.08785591807137338, 0.8290103980580102, 0.8290103980580102, 0.8290103980580102, 0.852977363777201, 0.852977363777201, 0.852977363777201, 0.8548809863301525, 0.8548809863301525, 0.8548809863301525, 0.5623305176785113, 0.5623305176785113, 0.5623305176785113, 0.5568853157339391, 0.5568853157339391, 0.5568853157339391, 0.6062762479112763, 0.6062762479112763, 0.6062762479112763, 0.6504138510536517, 0.6504138510536517, 0.6504138510536517, 0.6673030352474916, 0.6673030352474916, 0.6673030352474916, 0.5676594217115667, 0.5676594217115667, 0.5676594217115667, 0.5421737020624579, 0.5421737020624579, 0.5421737020624579, 0.5653217214756405, 0.5653217214756405, 0.5653217214756405, 0.6122344495523822, 0.6122344495523822, 0.6122344495523822, 0.6416550637534486, 0.6416550637534486, 0.6416550637534486, 0.6473124180332663, 0.6473124180332663, 0.6473124180332663, 0.7107896016882831, 0.7107896016882831, 0.7107896016882831, 0.28705627838399994, 0.28705627838399994, 0.28705627838399994, 0.49346623531251876, 0.49346623531251876, 0.49346623531251876, 0.2109772355604984, 0.2109772355604984, 0.2109772355604984, 0.4256129185305597, 0.4256129185305597, 0.4256129185305597, 0.4634569532439714, 0.4634569532439714, 0.4634569532439714, 0.4301132682751915, 0.4301132682751915, 0.4301132682751915, 0.7897102641323104, 0.7897102641323104, 0.7897102641323104, 0.7631044942568666, 0.7631044942568666, 0.7631044942568666, 0.7770274916321944, 0.7770274916321944, 0.7770274916321944, 0.10166808524148652, 0.10166808524148652, 0.10166808524148652, 0.09037862472233904, 0.09037862472233904, 0.09037862472233904, 0.1435919681380865, 0.1435919681380865, 0.1435919681380865, 0.2755389000472427, 0.2755389000472427, 0.2755389000472427, 0.147876799136491, 0.147876799136491, 0.147876799136491, 0.16859982296391296, 0.16859982296391296, 0.16859982296391296, 0.4495828224771853, 0.4495828224771853, 0.4495828224771853, 0.39777110934057014, 0.39777110934057014, 0.39777110934057014, 0.4513867761608985, 0.4513867761608985, 0.4513867761608985, 0.37037018379436537, 0.37037018379436537, 0.37037018379436537, 0.33223428587803916, 0.33223428587803916, 0.33223428587803916, 0.36231102786499536, 0.36231102786499536, 0.36231102786499536, 0.2132567024190365, 0.2132567024190365, 0.2132567024190365, 0.19905770737695883, 0.19905770737695883, 0.19905770737695883, 0.1870612588394075, 0.1870612588394075, 0.1870612588394075, 0.22025389456044053, 0.22025389456044053, 0.22025389456044053, 0.20075208896483365, 0.20075208896483365, 0.20075208896483365, 0.37360782956908123, 0.37360782956908123, 0.37360782956908123, 0.8497008089721053, 0.8497008089721053, 0.8497008089721053, 0.16017077684032388, 0.16017077684032388, 0.16017077684032388, 0.8406621115329941, 0.8406621115329941, 0.8406621115329941, 0.1155582098973047, 0.1155582098973047, 0.1155582098973047, 0.19965986991886975, 0.19965986991886975, 0.19965986991886975, 0.2090177051000217, 0.2090177051000217, 0.2090177051000217, 0.20499972411933454, 0.20499972411933454, 0.20499972411933454, 0.1865356161478301, 0.1865356161478301, 0.1865356161478301, 0.17368526646440097, 0.17368526646440097, 0.17368526646440097, 0.07461573483479644, 0.07461573483479644, 0.07461573483479644, 0.07210640993613704, 0.07210640993613704, 0.07210640993613704, 0.08464884719770549, 0.08464884719770549, 0.08464884719770549]}, "mutation_prompt": null}
{"id": "40832dae-38cf-4f42-81f0-ba13fda8ceb7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 30  # Increased population size\n        self.mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Adjusted crossover rate\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.random.rand())\n        self.cooling_rate = 0.95  # Adjusted cooling rate for slower cooling\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 30 == 0:  # More frequent adaptive mutation factor\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand()\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDESA", "description": "Combining adaptive differential evolution with dynamic local search, utilizing adaptive learning rate and selective intensification for improved convergence.", "configspace": "", "generation": 46, "fitness": 0.3467840943412765, "feedback": "The algorithm EnhancedAdaptiveDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8275657136843628, 0.8275657136843628, 0.8275657136843628, 0.8381765437271953, 0.8381765437271953, 0.8381765437271953, 0.8300143657214653, 0.8300143657214653, 0.8300143657214653, 0.7152064970327874, 0.7152064970327874, 0.7152064970327874, 0.7187201827057431, 0.7187201827057431, 0.7187201827057431, 0.6979399522874008, 0.6979399522874008, 0.6979399522874008, 0.26969386034589127, 0.26969386034589127, 0.26969386034589127, 0.13289291374658352, 0.13289291374658352, 0.13289291374658352, 0.12010972345148552, 0.12010972345148552, 0.12010972345148552, 0.1860400621749242, 0.1860400621749242, 0.1860400621749242, 0.12292889789702643, 0.12292889789702643, 0.12292889789702643, 0.17456642564267255, 0.17456642564267255, 0.17456642564267255, 0.9747541989598473, 0.9747541989598473, 0.9747541989598473, 0.9335991357612808, 0.9335991357612808, 0.9335991357612808, 0.9638854803898099, 0.9638854803898099, 0.9638854803898099, 0.5370526943040872, 0.5370526943040872, 0.5370526943040872, 0.466241437127913, 0.466241437127913, 0.466241437127913, 0.5050145648858375, 0.5050145648858375, 0.5050145648858375, 0.644578820196835, 0.644578820196835, 0.644578820196835, 0.7153034530964683, 0.7153034530964683, 0.7153034530964683, 0.7303105976773194, 0.7303105976773194, 0.7303105976773194, 0.28456965729310113, 0.28456965729310113, 0.28456965729310113, 0.2989304990227344, 0.2989304990227344, 0.2989304990227344, 0.4160363349343895, 0.4160363349343895, 0.4160363349343895, 0.00978459562713574, 0.00978459562713574, 0.00978459562713574, 0.2869495111657846, 0.2869495111657846, 0.2869495111657846, 0.26442900394394697, 0.26442900394394697, 0.26442900394394697, 0.22230300865004005, 0.22230300865004005, 0.22230300865004005, 0.2355190127438913, 0.2355190127438913, 0.2355190127438913, 0.16867338564033652, 0.16867338564033652, 0.16867338564033652, 0.34045393711385163, 0.34045393711385163, 0.34045393711385163, 0.2943182762344483, 0.2943182762344483, 0.2943182762344483, 0.38497288046390543, 0.38497288046390543, 0.38497288046390543, 0.09370763724268893, 0.09370763724268893, 0.09370763724268893, 0.10654802735633917, 0.10654802735633917, 0.10654802735633917, 0.12087631195743598, 0.12087631195743598, 0.12087631195743598, 0.241284136043597, 0.241284136043597, 0.241284136043597, 0.24590365927671942, 0.24590365927671942, 0.24590365927671942, 0.23522150003586684, 0.23522150003586684, 0.23522150003586684, 0.6390437616387181, 0.6390437616387181, 0.6390437616387181, 0.6764065581894521, 0.6764065581894521, 0.6764065581894521, 0.5870059110025889, 0.5870059110025889, 0.5870059110025889, 0.09848904418969973, 0.09848904418969973, 0.09848904418969973, 0.10443256535408962, 0.10443256535408962, 0.10443256535408962, 0.09517061450612585, 0.09517061450612585, 0.09517061450612585, 0.16185370270494237, 0.16185370270494237, 0.16185370270494237, 0.1409148993822904, 0.1409148993822904, 0.1409148993822904, 0.14300743569871777, 0.14300743569871777, 0.14300743569871777, 0.3576675119164152, 0.3576675119164152, 0.3576675119164152, 0.3796282201759924, 0.3796282201759924, 0.3796282201759924, 0.3888517052521169, 0.3888517052521169, 0.3888517052521169, 0.26910324415904396, 0.26910324415904396, 0.26910324415904396, 0.2599064465622746, 0.2599064465622746, 0.2599064465622746, 0.2853298845947232, 0.2853298845947232, 0.2853298845947232, 0.20263900090837994, 0.20263900090837994, 0.20263900090837994, 0.20279209427762823, 0.20279209427762823, 0.20279209427762823, 0.19375014446866012, 0.19375014446866012, 0.19375014446866012, 0.3426529233779594, 0.3426529233779594, 0.3426529233779594, 0.19442645828811556, 0.19442645828811556, 0.19442645828811556, 0.20218521698455338, 0.20218521698455338, 0.20218521698455338, 0.713182665650518, 0.713182665650518, 0.713182665650518, 0.20116174551488153, 0.20116174551488153, 0.20116174551488153, 0.17494028940644857, 0.17494028940644857, 0.17494028940644857, 0.16583311528858302, 0.16583311528858302, 0.16583311528858302, 0.20064693409142476, 0.20064693409142476, 0.20064693409142476, 0.45482813666227007, 0.45482813666227007, 0.45482813666227007, 0.17765859572415432, 0.17765859572415432, 0.17765859572415432, 0.174104664432834, 0.174104664432834, 0.174104664432834, 0.17910784991402795, 0.17910784991402795, 0.17910784991402795, 0.08802995654269996, 0.08802995654269996, 0.08802995654269996, 0.07797528998972869, 0.07797528998972869, 0.07797528998972869, 0.08065131015869798, 0.08065131015869798, 0.08065131015869798]}, "mutation_prompt": null}
{"id": "e344f8e0-816a-4f0a-a5c3-82d550671c76", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i))\n        self.cooling_rate = 0.95  # Adjusted cooling rate\n        self.chaos_factor = 0.2   # Introducing a chaos factor\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor with chaos\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand() + self.chaos_factor * np.cos(evaluations)\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedMultiStrategyDE", "description": "Enhanced multi-strategy evolution combines adaptive differential evolution with chaos-inspired dynamic mutation, promoting diverse exploration and robust convergence.", "configspace": "", "generation": 47, "fitness": 0.48272351980631806, "feedback": "The algorithm EnhancedMultiStrategyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.28.", "error": "", "parent_id": "3e9f0a59-7806-4006-a9bf-2dc92f92c6c0", "metadata": {"aucs": [0.8902381538203942, 0.8902381538203942, 0.8902381538203942, 0.8961014849130735, 0.8961014849130735, 0.8961014849130735, 0.8912212597332951, 0.8912212597332951, 0.8912212597332951, 0.7799935826043505, 0.7799935826043505, 0.7799935826043505, 0.797223585348527, 0.797223585348527, 0.797223585348527, 0.7756102485076201, 0.7756102485076201, 0.7756102485076201, 0.23683520278172265, 0.23683520278172265, 0.23683520278172265, 0.1458177986184499, 0.1458177986184499, 0.1458177986184499, 0.31627317460298654, 0.31627317460298654, 0.31627317460298654, 0.1587984216367313, 0.1587984216367313, 0.1587984216367313, 0.3482875955006829, 0.3482875955006829, 0.3482875955006829, 0.22586857344474887, 0.22586857344474887, 0.22586857344474887, 0.9610351444206748, 0.9610351444206748, 0.9610351444206748, 0.9628678014201008, 0.9628678014201008, 0.9628678014201008, 0.9797572014466398, 0.9797572014466398, 0.9797572014466398, 0.7223255002850171, 0.7223255002850171, 0.7223255002850171, 0.7166548047127177, 0.7166548047127177, 0.7166548047127177, 0.6384765174497755, 0.6384765174497755, 0.6384765174497755, 0.8418041820443792, 0.8418041820443792, 0.8418041820443792, 0.8652015764203522, 0.8652015764203522, 0.8652015764203522, 0.869553360948035, 0.869553360948035, 0.869553360948035, 0.6775847604351922, 0.6775847604351922, 0.6775847604351922, 0.13265757013634305, 0.13265757013634305, 0.13265757013634305, 0.5468308759876708, 0.5468308759876708, 0.5468308759876708, 0.6489801066135171, 0.6489801066135171, 0.6489801066135171, 0.6330065864422498, 0.6330065864422498, 0.6330065864422498, 0.6658007804584266, 0.6658007804584266, 0.6658007804584266, 0.6732464743057316, 0.6732464743057316, 0.6732464743057316, 0.6136489791537092, 0.6136489791537092, 0.6136489791537092, 0.6240417841434994, 0.6240417841434994, 0.6240417841434994, 0.7015642244626488, 0.7015642244626488, 0.7015642244626488, 0.7264923644592058, 0.7264923644592058, 0.7264923644592058, 0.7233764112165426, 0.7233764112165426, 0.7233764112165426, 0.32086301104659565, 0.32086301104659565, 0.32086301104659565, 0.4475932670353514, 0.4475932670353514, 0.4475932670353514, 0.33786298476644583, 0.33786298476644583, 0.33786298476644583, 0.40295305104071333, 0.40295305104071333, 0.40295305104071333, 0.577304946735822, 0.577304946735822, 0.577304946735822, 0.49993968356551355, 0.49993968356551355, 0.49993968356551355, 0.8443058332007227, 0.8443058332007227, 0.8443058332007227, 0.8069083706411523, 0.8069083706411523, 0.8069083706411523, 0.8149200263439631, 0.8149200263439631, 0.8149200263439631, 0.1332318333262017, 0.1332318333262017, 0.1332318333262017, 0.10096009881566625, 0.10096009881566625, 0.10096009881566625, 0.10051672977806625, 0.10051672977806625, 0.10051672977806625, 0.16559070049462987, 0.16559070049462987, 0.16559070049462987, 0.1368323931495805, 0.1368323931495805, 0.1368323931495805, 0.19178987342090736, 0.19178987342090736, 0.19178987342090736, 0.5271773610865973, 0.5271773610865973, 0.5271773610865973, 0.5740625944112734, 0.5740625944112734, 0.5740625944112734, 0.6544678591166705, 0.6544678591166705, 0.6544678591166705, 0.4079263399527826, 0.4079263399527826, 0.4079263399527826, 0.4274192097851114, 0.4274192097851114, 0.4274192097851114, 0.4692877104916011, 0.4692877104916011, 0.4692877104916011, 0.20439577919054186, 0.20439577919054186, 0.20439577919054186, 0.17908150998774142, 0.17908150998774142, 0.17908150998774142, 0.17627006458385663, 0.17627006458385663, 0.17627006458385663, 0.5682327881796307, 0.5682327881796307, 0.5682327881796307, 0.2284151226849308, 0.2284151226849308, 0.2284151226849308, 0.5485316172007824, 0.5485316172007824, 0.5485316172007824, 0.1984165202770245, 0.1984165202770245, 0.1984165202770245, 0.17679404407719934, 0.17679404407719934, 0.17679404407719934, 0.7856846075349583, 0.7856846075349583, 0.7856846075349583, 0.1671825951305409, 0.1671825951305409, 0.1671825951305409, 0.20891055013821747, 0.20891055013821747, 0.20891055013821747, 0.20979726401931276, 0.20979726401931276, 0.20979726401931276, 0.1716804936851477, 0.1716804936851477, 0.1716804936851477, 0.18062396763259425, 0.18062396763259425, 0.18062396763259425, 0.1834198636276142, 0.1834198636276142, 0.1834198636276142, 0.07699770586564281, 0.07699770586564281, 0.07699770586564281, 0.08359217662825036, 0.08359217662825036, 0.08359217662825036, 0.07897678893053017, 0.07897678893053017, 0.07897678893053017]}, "mutation_prompt": null}
{"id": "0eb8c43a-f219-42ec-92f6-100f5365673c", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.9  # Slightly increased mutation factor\n        self.crossover_rate = 0.85  # Altered crossover rate\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.05 * np.cos(i))\n        self.cooling_rate = 0.9  # Adjusted cooling rate\n        self.quantum_factor = 0.3  # Introducing a quantum factor for exploration\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Quantum-inspired mutation frequency\n                    self.mutation_factor = 0.4 + 0.6 * np.random.rand() + self.quantum_factor * np.sin(evaluations)\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "QuantumInspiredAdaptiveDE", "description": "Quantum-inspired adaptive DE integrates quantum operators and adaptive strategies to enhance exploration and convergence in diverse landscapes.", "configspace": "", "generation": 48, "fitness": 0.4456348463338671, "feedback": "The algorithm QuantumInspiredAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.27.", "error": "", "parent_id": "e344f8e0-816a-4f0a-a5c3-82d550671c76", "metadata": {"aucs": [0.9012906721444076, 0.9012906721444076, 0.9012906721444076, 0.8975796014807265, 0.8975796014807265, 0.8975796014807265, 0.8957986908794807, 0.8957986908794807, 0.8957986908794807, 0.8130843800532785, 0.8130843800532785, 0.8130843800532785, 0.8285624657552437, 0.8285624657552437, 0.8285624657552437, 0.8040519666505583, 0.8040519666505583, 0.8040519666505583, 0.5345263165691898, 0.5345263165691898, 0.5345263165691898, 0.16402640742095098, 0.16402640742095098, 0.16402640742095098, 0.535393291723254, 0.535393291723254, 0.535393291723254, 0.15913767073232632, 0.15913767073232632, 0.15913767073232632, 0.5841734209914831, 0.5841734209914831, 0.5841734209914831, 0.17447322846778823, 0.17447322846778823, 0.17447322846778823, 0.962324531336995, 0.962324531336995, 0.962324531336995, 0.9726011313528083, 0.9726011313528083, 0.9726011313528083, 0.9715466175451613, 0.9715466175451613, 0.9715466175451613, 0.6763159240152024, 0.6763159240152024, 0.6763159240152024, 0.7044715342415062, 0.7044715342415062, 0.7044715342415062, 0.6701988341990894, 0.6701988341990894, 0.6701988341990894, 0.22963151248491642, 0.22963151248491642, 0.22963151248491642, 0.7588432115868735, 0.7588432115868735, 0.7588432115868735, 0.8608061152918218, 0.8608061152918218, 0.8608061152918218, 0.5352767602658017, 0.5352767602658017, 0.5352767602658017, 0.433520737444149, 0.433520737444149, 0.433520737444149, 0.1323256610971434, 0.1323256610971434, 0.1323256610971434, 0.053836630106140704, 0.053836630106140704, 0.053836630106140704, 0.56495895571451, 0.56495895571451, 0.56495895571451, 0.4221946281508592, 0.4221946281508592, 0.4221946281508592, 0.5141704810423429, 0.5141704810423429, 0.5141704810423429, 0.27892508041282227, 0.27892508041282227, 0.27892508041282227, 0.4811200383851444, 0.4811200383851444, 0.4811200383851444, 0.5227172416922681, 0.5227172416922681, 0.5227172416922681, 0.4333686794546341, 0.4333686794546341, 0.4333686794546341, 0.6457545525207111, 0.6457545525207111, 0.6457545525207111, 0.3108449556282631, 0.3108449556282631, 0.3108449556282631, 0.37610729865324033, 0.37610729865324033, 0.37610729865324033, 0.22781072398740854, 0.22781072398740854, 0.22781072398740854, 0.4280320217130962, 0.4280320217130962, 0.4280320217130962, 0.35139720006776265, 0.35139720006776265, 0.35139720006776265, 0.4488732332687466, 0.4488732332687466, 0.4488732332687466, 0.7398612919803025, 0.7398612919803025, 0.7398612919803025, 0.5912995551984983, 0.5912995551984983, 0.5912995551984983, 0.7383303390669635, 0.7383303390669635, 0.7383303390669635, 0.1321193203735498, 0.1321193203735498, 0.1321193203735498, 0.12994835675229555, 0.12994835675229555, 0.12994835675229555, 0.10218352955478982, 0.10218352955478982, 0.10218352955478982, 0.20868372034975202, 0.20868372034975202, 0.20868372034975202, 0.17442881875519867, 0.17442881875519867, 0.17442881875519867, 0.15659593168329133, 0.15659593168329133, 0.15659593168329133, 0.5698824687279034, 0.5698824687279034, 0.5698824687279034, 0.4578514349820695, 0.4578514349820695, 0.4578514349820695, 0.651900481432619, 0.651900481432619, 0.651900481432619, 0.42278127284549905, 0.42278127284549905, 0.42278127284549905, 0.3796717036721803, 0.3796717036721803, 0.3796717036721803, 0.5349958740286496, 0.5349958740286496, 0.5349958740286496, 0.18163293121842483, 0.18163293121842483, 0.18163293121842483, 0.19439327131748763, 0.19439327131748763, 0.19439327131748763, 0.18864089829581443, 0.18864089829581443, 0.18864089829581443, 0.7529352633759645, 0.7529352633759645, 0.7529352633759645, 0.21986568462905554, 0.21986568462905554, 0.21986568462905554, 0.22554808610668742, 0.22554808610668742, 0.22554808610668742, 0.8229185060415523, 0.8229185060415523, 0.8229185060415523, 0.17049481452021464, 0.17049481452021464, 0.17049481452021464, 0.15969643047791127, 0.15969643047791127, 0.15969643047791127, 0.165124826782445, 0.165124826782445, 0.165124826782445, 0.7464858253232702, 0.7464858253232702, 0.7464858253232702, 0.15546413572545947, 0.15546413572545947, 0.15546413572545947, 0.1889526002153754, 0.1889526002153754, 0.1889526002153754, 0.21696381401023812, 0.21696381401023812, 0.21696381401023812, 0.1937390408458014, 0.1937390408458014, 0.1937390408458014, 0.0718870363487275, 0.0718870363487275, 0.0718870363487275, 0.09887388334191982, 0.09887388334191982, 0.09887388334191982, 0.0814853835304108, 0.0814853835304108, 0.0814853835304108]}, "mutation_prompt": null}
{"id": "09c67e31-06b2-451a-bd5d-65ecee03dcb9", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i))\n        self.cooling_rate = 0.95  # Adjusted cooling rate\n        self.chaos_factor = 0.2   # Introducing a chaos factor\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor with chaos\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand() + self.chaos_factor * np.cos(evaluations)\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedMultiStrategyDE", "description": "Enhanced multi-strategy evolution combines adaptive differential evolution with chaos-inspired dynamic mutation, promoting diverse exploration and robust convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e344f8e0-816a-4f0a-a5c3-82d550671c76", "metadata": {"aucs": [0.8902381538203942, 0.8902381538203942, 0.8902381538203942, 0.8961014849130735, 0.8961014849130735, 0.8961014849130735, 0.8912212597332951, 0.8912212597332951, 0.8912212597332951, 0.7799935826043505, 0.7799935826043505, 0.7799935826043505, 0.797223585348527, 0.797223585348527, 0.797223585348527, 0.7756102485076201, 0.7756102485076201, 0.7756102485076201, 0.23683520278172265, 0.23683520278172265, 0.23683520278172265, 0.1458177986184499, 0.1458177986184499, 0.1458177986184499, 0.31627317460298654, 0.31627317460298654, 0.31627317460298654, 0.1587984216367313, 0.1587984216367313, 0.1587984216367313, 0.3482875955006829, 0.3482875955006829, 0.3482875955006829, 0.22586857344474887, 0.22586857344474887, 0.22586857344474887, 0.9610351444206748, 0.9610351444206748, 0.9610351444206748, 0.9628678014201008, 0.9628678014201008, 0.9628678014201008, 0.9797572014466398, 0.9797572014466398, 0.9797572014466398, 0.7223255002850171, 0.7223255002850171, 0.7223255002850171, 0.7166548047127177, 0.7166548047127177, 0.7166548047127177, 0.6384765174497755, 0.6384765174497755, 0.6384765174497755, 0.8418041820443792, 0.8418041820443792, 0.8418041820443792, 0.8652015764203522, 0.8652015764203522, 0.8652015764203522, 0.869553360948035, 0.869553360948035, 0.869553360948035, 0.6775847604351922, 0.6775847604351922, 0.6775847604351922, 0.13265757013634305, 0.13265757013634305, 0.13265757013634305, 0.5468308759876708, 0.5468308759876708, 0.5468308759876708, 0.6489801066135171, 0.6489801066135171, 0.6489801066135171, 0.6330065864422498, 0.6330065864422498, 0.6330065864422498, 0.6658007804584266, 0.6658007804584266, 0.6658007804584266, 0.6732464743057316, 0.6732464743057316, 0.6732464743057316, 0.6136489791537092, 0.6136489791537092, 0.6136489791537092, 0.6240417841434994, 0.6240417841434994, 0.6240417841434994, 0.7015642244626488, 0.7015642244626488, 0.7015642244626488, 0.7264923644592058, 0.7264923644592058, 0.7264923644592058, 0.7233764112165426, 0.7233764112165426, 0.7233764112165426, 0.32086301104659565, 0.32086301104659565, 0.32086301104659565, 0.4475932670353514, 0.4475932670353514, 0.4475932670353514, 0.33786298476644583, 0.33786298476644583, 0.33786298476644583, 0.40295305104071333, 0.40295305104071333, 0.40295305104071333, 0.577304946735822, 0.577304946735822, 0.577304946735822, 0.49993968356551355, 0.49993968356551355, 0.49993968356551355, 0.8443058332007227, 0.8443058332007227, 0.8443058332007227, 0.8069083706411523, 0.8069083706411523, 0.8069083706411523, 0.8149200263439631, 0.8149200263439631, 0.8149200263439631, 0.1332318333262017, 0.1332318333262017, 0.1332318333262017, 0.10096009881566625, 0.10096009881566625, 0.10096009881566625, 0.10051672977806625, 0.10051672977806625, 0.10051672977806625, 0.16559070049462987, 0.16559070049462987, 0.16559070049462987, 0.1368323931495805, 0.1368323931495805, 0.1368323931495805, 0.19178987342090736, 0.19178987342090736, 0.19178987342090736, 0.5271773610865973, 0.5271773610865973, 0.5271773610865973, 0.5740625944112734, 0.5740625944112734, 0.5740625944112734, 0.6544678591166705, 0.6544678591166705, 0.6544678591166705, 0.4079263399527826, 0.4079263399527826, 0.4079263399527826, 0.4274192097851114, 0.4274192097851114, 0.4274192097851114, 0.4692877104916011, 0.4692877104916011, 0.4692877104916011, 0.20439577919054186, 0.20439577919054186, 0.20439577919054186, 0.17908150998774142, 0.17908150998774142, 0.17908150998774142, 0.17627006458385663, 0.17627006458385663, 0.17627006458385663, 0.5682327881796307, 0.5682327881796307, 0.5682327881796307, 0.2284151226849308, 0.2284151226849308, 0.2284151226849308, 0.5485316172007824, 0.5485316172007824, 0.5485316172007824, 0.1984165202770245, 0.1984165202770245, 0.1984165202770245, 0.17679404407719934, 0.17679404407719934, 0.17679404407719934, 0.7856846075349583, 0.7856846075349583, 0.7856846075349583, 0.1671825951305409, 0.1671825951305409, 0.1671825951305409, 0.20891055013821747, 0.20891055013821747, 0.20891055013821747, 0.20979726401931276, 0.20979726401931276, 0.20979726401931276, 0.1716804936851477, 0.1716804936851477, 0.1716804936851477, 0.18062396763259425, 0.18062396763259425, 0.18062396763259425, 0.1834198636276142, 0.1834198636276142, 0.1834198636276142, 0.07699770586564281, 0.07699770586564281, 0.07699770586564281, 0.08359217662825036, 0.08359217662825036, 0.08359217662825036, 0.07897678893053017, 0.07897678893053017, 0.07897678893053017]}, "mutation_prompt": null}
{"id": "fc2f8136-edc2-4e36-8fad-db28a99e8c36", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i))\n        self.cooling_rate = 0.95  # Adjusted cooling rate\n        self.chaos_factor = 0.2   # Introducing a chaos factor\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adaptive mutation factor with chaos\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand() + self.chaos_factor * np.cos(evaluations)\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedMultiStrategyDE", "description": "Enhanced multi-strategy evolution combines adaptive differential evolution with chaos-inspired dynamic mutation, promoting diverse exploration and robust convergence.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e344f8e0-816a-4f0a-a5c3-82d550671c76", "metadata": {"aucs": [0.8902381538203942, 0.8902381538203942, 0.8902381538203942, 0.8961014849130735, 0.8961014849130735, 0.8961014849130735, 0.8912212597332951, 0.8912212597332951, 0.8912212597332951, 0.7799935826043505, 0.7799935826043505, 0.7799935826043505, 0.797223585348527, 0.797223585348527, 0.797223585348527, 0.7756102485076201, 0.7756102485076201, 0.7756102485076201, 0.23683520278172265, 0.23683520278172265, 0.23683520278172265, 0.1458177986184499, 0.1458177986184499, 0.1458177986184499, 0.31627317460298654, 0.31627317460298654, 0.31627317460298654, 0.1587984216367313, 0.1587984216367313, 0.1587984216367313, 0.3482875955006829, 0.3482875955006829, 0.3482875955006829, 0.22586857344474887, 0.22586857344474887, 0.22586857344474887, 0.9610351444206748, 0.9610351444206748, 0.9610351444206748, 0.9628678014201008, 0.9628678014201008, 0.9628678014201008, 0.9797572014466398, 0.9797572014466398, 0.9797572014466398, 0.7223255002850171, 0.7223255002850171, 0.7223255002850171, 0.7166548047127177, 0.7166548047127177, 0.7166548047127177, 0.6384765174497755, 0.6384765174497755, 0.6384765174497755, 0.8418041820443792, 0.8418041820443792, 0.8418041820443792, 0.8652015764203522, 0.8652015764203522, 0.8652015764203522, 0.869553360948035, 0.869553360948035, 0.869553360948035, 0.6775847604351922, 0.6775847604351922, 0.6775847604351922, 0.13265757013634305, 0.13265757013634305, 0.13265757013634305, 0.5468308759876708, 0.5468308759876708, 0.5468308759876708, 0.6489801066135171, 0.6489801066135171, 0.6489801066135171, 0.6330065864422498, 0.6330065864422498, 0.6330065864422498, 0.6658007804584266, 0.6658007804584266, 0.6658007804584266, 0.6732464743057316, 0.6732464743057316, 0.6732464743057316, 0.6136489791537092, 0.6136489791537092, 0.6136489791537092, 0.6240417841434994, 0.6240417841434994, 0.6240417841434994, 0.7015642244626488, 0.7015642244626488, 0.7015642244626488, 0.7264923644592058, 0.7264923644592058, 0.7264923644592058, 0.7233764112165426, 0.7233764112165426, 0.7233764112165426, 0.32086301104659565, 0.32086301104659565, 0.32086301104659565, 0.4475932670353514, 0.4475932670353514, 0.4475932670353514, 0.33786298476644583, 0.33786298476644583, 0.33786298476644583, 0.40295305104071333, 0.40295305104071333, 0.40295305104071333, 0.577304946735822, 0.577304946735822, 0.577304946735822, 0.49993968356551355, 0.49993968356551355, 0.49993968356551355, 0.8443058332007227, 0.8443058332007227, 0.8443058332007227, 0.8069083706411523, 0.8069083706411523, 0.8069083706411523, 0.8149200263439631, 0.8149200263439631, 0.8149200263439631, 0.1332318333262017, 0.1332318333262017, 0.1332318333262017, 0.10096009881566625, 0.10096009881566625, 0.10096009881566625, 0.10051672977806625, 0.10051672977806625, 0.10051672977806625, 0.16559070049462987, 0.16559070049462987, 0.16559070049462987, 0.1368323931495805, 0.1368323931495805, 0.1368323931495805, 0.19178987342090736, 0.19178987342090736, 0.19178987342090736, 0.5271773610865973, 0.5271773610865973, 0.5271773610865973, 0.5740625944112734, 0.5740625944112734, 0.5740625944112734, 0.6544678591166705, 0.6544678591166705, 0.6544678591166705, 0.4079263399527826, 0.4079263399527826, 0.4079263399527826, 0.4274192097851114, 0.4274192097851114, 0.4274192097851114, 0.4692877104916011, 0.4692877104916011, 0.4692877104916011, 0.20439577919054186, 0.20439577919054186, 0.20439577919054186, 0.17908150998774142, 0.17908150998774142, 0.17908150998774142, 0.17627006458385663, 0.17627006458385663, 0.17627006458385663, 0.5682327881796307, 0.5682327881796307, 0.5682327881796307, 0.2284151226849308, 0.2284151226849308, 0.2284151226849308, 0.5485316172007824, 0.5485316172007824, 0.5485316172007824, 0.1984165202770245, 0.1984165202770245, 0.1984165202770245, 0.17679404407719934, 0.17679404407719934, 0.17679404407719934, 0.7856846075349583, 0.7856846075349583, 0.7856846075349583, 0.1671825951305409, 0.1671825951305409, 0.1671825951305409, 0.20891055013821747, 0.20891055013821747, 0.20891055013821747, 0.20979726401931276, 0.20979726401931276, 0.20979726401931276, 0.1716804936851477, 0.1716804936851477, 0.1716804936851477, 0.18062396763259425, 0.18062396763259425, 0.18062396763259425, 0.1834198636276142, 0.1834198636276142, 0.1834198636276142, 0.07699770586564281, 0.07699770586564281, 0.07699770586564281, 0.08359217662825036, 0.08359217662825036, 0.08359217662825036, 0.07897678893053017, 0.07897678893053017, 0.07897678893053017]}, "mutation_prompt": null}
{"id": "fec10146-af33-4ca7-9b7d-b40d5e0255ec", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i))\n        self.cooling_rate = 0.95\n        self.chaos_factor = 0.2\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand() + self.chaos_factor * np.cos(evaluations)\n                \n                if evaluations % 100 == 0:  # Adaptive mutation based on best individual\n                    best_idx = np.argmin(fitness)\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand() * np.cos(evaluations)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 2, replace=False)\n                    x1, x2 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Multi-Strategy DE with Chaos-Inspired Mutation and Gradient-Guided Exploitation for Enhanced Exploration and Convergence.", "configspace": "", "generation": 51, "fitness": 0.49040777788705936, "feedback": "The algorithm AdaptiveMultiStrategyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.28.", "error": "", "parent_id": "e344f8e0-816a-4f0a-a5c3-82d550671c76", "metadata": {"aucs": [0.8955891641707684, 0.8955891641707684, 0.8955891641707684, 0.9040282417657306, 0.9040282417657306, 0.9040282417657306, 0.9017626170839758, 0.9017626170839758, 0.9017626170839758, 0.8277117263004398, 0.8277117263004398, 0.8277117263004398, 0.8254877373529398, 0.8254877373529398, 0.8254877373529398, 0.8298969763176497, 0.8298969763176497, 0.8298969763176497, 0.3810368837100564, 0.3810368837100564, 0.3810368837100564, 0.5228145011571719, 0.5228145011571719, 0.5228145011571719, 0.34170489743245125, 0.34170489743245125, 0.34170489743245125, 0.13675558004918875, 0.13675558004918875, 0.13675558004918875, 0.16382909806715829, 0.16382909806715829, 0.16382909806715829, 0.2025690140767984, 0.2025690140767984, 0.2025690140767984, 0.9680737007737593, 0.9680737007737593, 0.9680737007737593, 0.9818881233375175, 0.9818881233375175, 0.9818881233375175, 0.9833178136109815, 0.9833178136109815, 0.9833178136109815, 0.7064814769641614, 0.7064814769641614, 0.7064814769641614, 0.7149242495677147, 0.7149242495677147, 0.7149242495677147, 0.6775578616551698, 0.6775578616551698, 0.6775578616551698, 0.864307177169471, 0.864307177169471, 0.864307177169471, 0.8674776714221704, 0.8674776714221704, 0.8674776714221704, 0.6622794596826825, 0.6622794596826825, 0.6622794596826825, 0.729955117596454, 0.729955117596454, 0.729955117596454, 0.5575893785721159, 0.5575893785721159, 0.5575893785721159, 0.5138348070275853, 0.5138348070275853, 0.5138348070275853, 0.543255461664087, 0.543255461664087, 0.543255461664087, 0.5639928174882534, 0.5639928174882534, 0.5639928174882534, 0.5686986941765297, 0.5686986941765297, 0.5686986941765297, 0.649700967835513, 0.649700967835513, 0.649700967835513, 0.6914003210510837, 0.6914003210510837, 0.6914003210510837, 0.2208839556179586, 0.2208839556179586, 0.2208839556179586, 0.6731204902275607, 0.6731204902275607, 0.6731204902275607, 0.3623773810898001, 0.3623773810898001, 0.3623773810898001, 0.8034297771290143, 0.8034297771290143, 0.8034297771290143, 0.5371253042893734, 0.5371253042893734, 0.5371253042893734, 0.45590791778970563, 0.45590791778970563, 0.45590791778970563, 0.18365123548714923, 0.18365123548714923, 0.18365123548714923, 0.6468898398067857, 0.6468898398067857, 0.6468898398067857, 0.6355060176148879, 0.6355060176148879, 0.6355060176148879, 0.6100148839891814, 0.6100148839891814, 0.6100148839891814, 0.8630837800748234, 0.8630837800748234, 0.8630837800748234, 0.6799409240959988, 0.6799409240959988, 0.6799409240959988, 0.8552840354441037, 0.8552840354441037, 0.8552840354441037, 0.12287556163309432, 0.12287556163309432, 0.12287556163309432, 0.41730156980116806, 0.41730156980116806, 0.41730156980116806, 0.13818485114633772, 0.13818485114633772, 0.13818485114633772, 0.1783062915412773, 0.1783062915412773, 0.1783062915412773, 0.14151119374585797, 0.14151119374585797, 0.14151119374585797, 0.1405469785458292, 0.1405469785458292, 0.1405469785458292, 0.38000902844606244, 0.38000902844606244, 0.38000902844606244, 0.5584407833854343, 0.5584407833854343, 0.5584407833854343, 0.6989930891700415, 0.6989930891700415, 0.6989930891700415, 0.5027539352987068, 0.5027539352987068, 0.5027539352987068, 0.5023570705962934, 0.5023570705962934, 0.5023570705962934, 0.5685412614030033, 0.5685412614030033, 0.5685412614030033, 0.22158368831666353, 0.22158368831666353, 0.22158368831666353, 0.20608133015586338, 0.20608133015586338, 0.20608133015586338, 0.21136129453843988, 0.21136129453843988, 0.21136129453843988, 0.23451854673814665, 0.23451854673814665, 0.23451854673814665, 0.5445719210264428, 0.5445719210264428, 0.5445719210264428, 0.19538734157717885, 0.19538734157717885, 0.19538734157717885, 0.8817515990642596, 0.8817515990642596, 0.8817515990642596, 0.17467674176836823, 0.17467674176836823, 0.17467674176836823, 0.16484829345339547, 0.16484829345339547, 0.16484829345339547, 0.16738228735468297, 0.16738228735468297, 0.16738228735468297, 0.20710730984178805, 0.20710730984178805, 0.20710730984178805, 0.20886002074927446, 0.20886002074927446, 0.20886002074927446, 0.19152823352981874, 0.19152823352981874, 0.19152823352981874, 0.16719981786414295, 0.16719981786414295, 0.16719981786414295, 0.20269980974031443, 0.20269980974031443, 0.20269980974031443, 0.08541012912791246, 0.08541012912791246, 0.08541012912791246, 0.08860182696484242, 0.08860182696484242, 0.08860182696484242, 0.10083112160770502, 0.10083112160770502, 0.10083112160770502]}, "mutation_prompt": null}
{"id": "fdc7732b-72e6-47d2-ad51-97aa74f8878e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i))\n        self.cooling_rate = 0.95\n        self.chaos_factor = 0.2\n        self.dynamic_pop = True\n        self.pop_growth = 1.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            if self.dynamic_pop and evaluations % 100 == 0:\n                self.pop_size = min(int(self.pop_size * self.pop_growth), self.budget - evaluations)\n                additional_pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size - len(population), self.dim))\n                population = np.vstack([population, additional_pop])\n                fitness = np.append(fitness, [func(ind) for ind in additional_pop])\n                evaluations += len(additional_pop)\n\n            for i in range(len(population)):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand() + self.chaos_factor * np.cos(evaluations)\n\n                if evaluations % 100 == 0:  # Adaptive mutation based on best individual\n                    best_idx = np.argmin(fitness)\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand() * np.cos(evaluations)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(len(population), 2, replace=False)\n                    x1, x2 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(len(population), 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveMultiStrategyDE", "description": "Enhanced Adaptive Multi-Strategy DE with Dynamic Population Control and Fitness-Driven Adaptive Parameters for Robust Convergence.", "configspace": "", "generation": 52, "fitness": 0.46406567349248773, "feedback": "The algorithm EnhancedAdaptiveMultiStrategyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "fec10146-af33-4ca7-9b7d-b40d5e0255ec", "metadata": {"aucs": [0.8698410343545439, 0.8698410343545439, 0.8698410343545439, 0.8989096558014087, 0.8989096558014087, 0.8989096558014087, 0.8954072243196368, 0.8954072243196368, 0.8954072243196368, 0.79418244658999, 0.79418244658999, 0.79418244658999, 0.792239992086218, 0.792239992086218, 0.792239992086218, 0.8178710292537911, 0.8178710292537911, 0.8178710292537911, 0.14563462989232012, 0.14563462989232012, 0.14563462989232012, 0.1600746687212844, 0.1600746687212844, 0.1600746687212844, 0.15724260398924694, 0.15724260398924694, 0.15724260398924694, 0.12527866134647192, 0.12527866134647192, 0.12527866134647192, 0.12746140602743128, 0.12746140602743128, 0.12746140602743128, 0.155034589427394, 0.155034589427394, 0.155034589427394, 0.9710363380762418, 0.9710363380762418, 0.9710363380762418, 0.9706058729153633, 0.9706058729153633, 0.9706058729153633, 0.9736750445725448, 0.9736750445725448, 0.9736750445725448, 0.6477134915597569, 0.6477134915597569, 0.6477134915597569, 0.70143251925411, 0.70143251925411, 0.70143251925411, 0.6781811931868527, 0.6781811931868527, 0.6781811931868527, 0.8162658122546035, 0.8162658122546035, 0.8162658122546035, 0.8797113066998788, 0.8797113066998788, 0.8797113066998788, 0.8358904244383173, 0.8358904244383173, 0.8358904244383173, 0.47231048173333245, 0.47231048173333245, 0.47231048173333245, 0.5217858515571592, 0.5217858515571592, 0.5217858515571592, 0.47858236641655727, 0.47858236641655727, 0.47858236641655727, 0.3853735830277033, 0.3853735830277033, 0.3853735830277033, 0.12980014984980393, 0.12980014984980393, 0.12980014984980393, 0.614472761296619, 0.614472761296619, 0.614472761296619, 0.6828189422668742, 0.6828189422668742, 0.6828189422668742, 0.6634804848976383, 0.6634804848976383, 0.6634804848976383, 0.6462075752743925, 0.6462075752743925, 0.6462075752743925, 0.7421726722638112, 0.7421726722638112, 0.7421726722638112, 0.6842961358499937, 0.6842961358499937, 0.6842961358499937, 0.7379837918809988, 0.7379837918809988, 0.7379837918809988, 0.12771913723044948, 0.12771913723044948, 0.12771913723044948, 0.5051598023965322, 0.5051598023965322, 0.5051598023965322, 0.3436530995916759, 0.3436530995916759, 0.3436530995916759, 0.41668802282567663, 0.41668802282567663, 0.41668802282567663, 0.5419706905649794, 0.5419706905649794, 0.5419706905649794, 0.5389546355344508, 0.5389546355344508, 0.5389546355344508, 0.8482981242838534, 0.8482981242838534, 0.8482981242838534, 0.8424075003083014, 0.8424075003083014, 0.8424075003083014, 0.7851949628583796, 0.7851949628583796, 0.7851949628583796, 0.15309512155007687, 0.15309512155007687, 0.15309512155007687, 0.11556270311543704, 0.11556270311543704, 0.11556270311543704, 0.09264262243906107, 0.09264262243906107, 0.09264262243906107, 0.19010526951025752, 0.19010526951025752, 0.19010526951025752, 0.24695793318733517, 0.24695793318733517, 0.24695793318733517, 0.24471690494902332, 0.24471690494902332, 0.24471690494902332, 0.5265151772469172, 0.5265151772469172, 0.5265151772469172, 0.5120913612385936, 0.5120913612385936, 0.5120913612385936, 0.622654271248991, 0.622654271248991, 0.622654271248991, 0.4645890452837319, 0.4645890452837319, 0.4645890452837319, 0.4628990788281515, 0.4628990788281515, 0.4628990788281515, 0.4165553798925121, 0.4165553798925121, 0.4165553798925121, 0.18329907812210022, 0.18329907812210022, 0.18329907812210022, 0.19381583583229567, 0.19381583583229567, 0.19381583583229567, 0.20706124006521587, 0.20706124006521587, 0.20706124006521587, 0.4978166232816541, 0.4978166232816541, 0.4978166232816541, 0.5843029790762317, 0.5843029790762317, 0.5843029790762317, 0.5984209506297571, 0.5984209506297571, 0.5984209506297571, 0.1718579823678782, 0.1718579823678782, 0.1718579823678782, 0.18269048251046993, 0.18269048251046993, 0.18269048251046993, 0.20393978176985683, 0.20393978176985683, 0.20393978176985683, 0.168340982668297, 0.168340982668297, 0.168340982668297, 0.2044893615541502, 0.2044893615541502, 0.2044893615541502, 0.19921546826638936, 0.19921546826638936, 0.19921546826638936, 0.18900681701449262, 0.18900681701449262, 0.18900681701449262, 0.1844801937030175, 0.1844801937030175, 0.1844801937030175, 0.21787961049892224, 0.21787961049892224, 0.21787961049892224, 0.0800155494854331, 0.0800155494854331, 0.0800155494854331, 0.08330020811259653, 0.08330020811259653, 0.08330020811259653, 0.0913897613336796, 0.0913897613336796, 0.0913897613336796]}, "mutation_prompt": null}
{"id": "a1df110e-c7cb-4911-ab8e-eed1c24260c8", "solution": "import numpy as np\nfrom scipy.stats import levy\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_pop_size = 20\n        self.current_pop_size = self.initial_pop_size\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i))\n        self.cooling_rate = 0.95\n        self.chaos_factor = 0.2\n        self.levy_scale = 0.5  # Scale for Lévy flight\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.initial_pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.current_pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand() + self.chaos_factor * np.cos(evaluations)\n                \n                if evaluations % 100 == 0:  # Adaptive mutation based on best individual\n                    best_idx = np.argmin(fitness)\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand() * np.cos(evaluations)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.current_pop_size, 2, replace=False)\n                    x1, x2 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.current_pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.1:  # Lévy flight with a probability\n                    mutant_vector += levy.rvs(scale=self.levy_scale, size=self.dim)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            # Dynamic population control: increase pop size if exploration is needed\n            if evaluations % 200 == 0 and self.current_pop_size < 50:\n                self.current_pop_size += 1\n                new_individual = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                new_fitness = func(new_individual)\n                population = np.vstack([population, new_individual])\n                fitness = np.append(fitness, new_fitness)\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive Multi-Strategy DE with Dynamic Population Control and Lévy Flight for Improved Global Search.", "configspace": "", "generation": 53, "fitness": 0.46509565591389807, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.29.", "error": "", "parent_id": "fec10146-af33-4ca7-9b7d-b40d5e0255ec", "metadata": {"aucs": [0.8800391590894585, 0.8800391590894585, 0.8800391590894585, 0.8892308722435991, 0.8892308722435991, 0.8892308722435991, 0.8844598295867336, 0.8844598295867336, 0.8844598295867336, 0.8288625574406061, 0.8288625574406061, 0.8288625574406061, 0.839926341662536, 0.839926341662536, 0.839926341662536, 0.7922922922192791, 0.7922922922192791, 0.7922922922192791, 0.406226565270973, 0.406226565270973, 0.406226565270973, 0.38304318931776293, 0.38304318931776293, 0.38304318931776293, 0.3518855393745822, 0.3518855393745822, 0.3518855393745822, 0.2569691394063839, 0.2569691394063839, 0.2569691394063839, 0.15862950177119906, 0.15862950177119906, 0.15862950177119906, 0.13770541922785484, 0.13770541922785484, 0.13770541922785484, 0.9874989296869958, 0.9874989296869958, 0.9874989296869958, 0.9843123728304435, 0.9843123728304435, 0.9843123728304435, 0.9796576201595707, 0.9796576201595707, 0.9796576201595707, 0.6739987505482526, 0.6739987505482526, 0.6739987505482526, 0.6699311979973375, 0.6699311979973375, 0.6699311979973375, 0.7128237754499949, 0.7128237754499949, 0.7128237754499949, 0.8401150967634126, 0.8401150967634126, 0.8401150967634126, 0.8464674525428428, 0.8464674525428428, 0.8464674525428428, 0.8882126608001533, 0.8882126608001533, 0.8882126608001533, 0.5350229136908182, 0.5350229136908182, 0.5350229136908182, 0.31735911995178623, 0.31735911995178623, 0.31735911995178623, 0.42394401928625214, 0.42394401928625214, 0.42394401928625214, 0.04081831849703066, 0.04081831849703066, 0.04081831849703066, 0.5739791886379704, 0.5739791886379704, 0.5739791886379704, 0.5130913492144096, 0.5130913492144096, 0.5130913492144096, 0.6788951222586638, 0.6788951222586638, 0.6788951222586638, 0.6678517229476083, 0.6678517229476083, 0.6678517229476083, 0.5555875423280099, 0.5555875423280099, 0.5555875423280099, 0.5941572548643014, 0.5941572548643014, 0.5941572548643014, 0.4719517522369191, 0.4719517522369191, 0.4719517522369191, 0.64997559525569, 0.64997559525569, 0.64997559525569, 0.07428538536404561, 0.07428538536404561, 0.07428538536404561, 0.2913843141510891, 0.2913843141510891, 0.2913843141510891, 0.2026927731581314, 0.2026927731581314, 0.2026927731581314, 0.5047559503935255, 0.5047559503935255, 0.5047559503935255, 0.5829298337238948, 0.5829298337238948, 0.5829298337238948, 0.49180675320434986, 0.49180675320434986, 0.49180675320434986, 0.8641125423886173, 0.8641125423886173, 0.8641125423886173, 0.8198415578183424, 0.8198415578183424, 0.8198415578183424, 0.8491849131936051, 0.8491849131936051, 0.8491849131936051, 0.11579984686736677, 0.11579984686736677, 0.11579984686736677, 0.11132172405525376, 0.11132172405525376, 0.11132172405525376, 0.13667765590876502, 0.13667765590876502, 0.13667765590876502, 0.17792174380295278, 0.17792174380295278, 0.17792174380295278, 0.2339162166050096, 0.2339162166050096, 0.2339162166050096, 0.2043014142717534, 0.2043014142717534, 0.2043014142717534, 0.50545591121845, 0.50545591121845, 0.50545591121845, 0.5487344562493535, 0.5487344562493535, 0.5487344562493535, 0.5508270330405496, 0.5508270330405496, 0.5508270330405496, 0.34659084305051224, 0.34659084305051224, 0.34659084305051224, 0.4737291346847148, 0.4737291346847148, 0.4737291346847148, 0.37019996734658767, 0.37019996734658767, 0.37019996734658767, 0.18933011276469425, 0.18933011276469425, 0.18933011276469425, 0.1956722829720482, 0.1956722829720482, 0.1956722829720482, 0.20292119589096513, 0.20292119589096513, 0.20292119589096513, 0.22440513334243994, 0.22440513334243994, 0.22440513334243994, 0.20259873507943915, 0.20259873507943915, 0.20259873507943915, 0.3771419212021522, 0.3771419212021522, 0.3771419212021522, 0.9064430199389489, 0.9064430199389489, 0.9064430199389489, 0.1846961805202234, 0.1846961805202234, 0.1846961805202234, 0.1463961880405934, 0.1463961880405934, 0.1463961880405934, 0.2088315086060487, 0.2088315086060487, 0.2088315086060487, 0.7424217352624665, 0.7424217352624665, 0.7424217352624665, 0.2093858319300692, 0.2093858319300692, 0.2093858319300692, 0.20397569441914187, 0.20397569441914187, 0.20397569441914187, 0.1779758676002342, 0.1779758676002342, 0.1779758676002342, 0.19833326289951503, 0.19833326289951503, 0.19833326289951503, 0.08555991739777524, 0.08555991739777524, 0.08555991739777524, 0.07365060240740928, 0.07365060240740928, 0.07365060240740928, 0.08575590247019538, 0.08575590247019538, 0.08575590247019538]}, "mutation_prompt": null}
{"id": "a8867601-e26f-474d-a8a6-190f0c14c5f1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.7\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.cos(i))\n        self.cooling_rate = 0.95\n        self.chaos_factor = 0.15\n        self.adaptation_interval = 25\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % self.adaptation_interval == 0:\n                    self.mutation_factor += self.chaos_factor * (np.sin(evaluations) - 0.5)\n                \n                if evaluations % 80 == 0:  # Strategic mutation based on best individual\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 2, replace=False)\n                    x1, x2 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive Differential Evolution with Stochastic and Strategic Adaptations for Improved Convergence.", "configspace": "", "generation": 54, "fitness": 0.14572137053030443, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "fec10146-af33-4ca7-9b7d-b40d5e0255ec", "metadata": {"aucs": [0.3550244387217122, 0.3550244387217122, 0.3550244387217122, 0.2962632214933054, 0.2962632214933054, 0.2962632214933054, 0.2310884844989236, 0.2310884844989236, 0.2310884844989236, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09480451426943515, 0.09480451426943515, 0.09480451426943515, 0.06841261156271417, 0.06841261156271417, 0.06841261156271417, 0.09348838296031003, 0.09348838296031003, 0.09348838296031003, 0.057137928426223894, 0.057137928426223894, 0.057137928426223894, 0.04467401905218371, 0.04467401905218371, 0.04467401905218371, 0.03787214196114297, 0.03787214196114297, 0.03787214196114297, 0.9619877791677134, 0.9619877791677134, 0.9619877791677134, 0.9715716923112423, 0.9715716923112423, 0.9715716923112423, 0.9713033420262414, 0.9713033420262414, 0.9713033420262414, 0.08263136533814452, 0.08263136533814452, 0.08263136533814452, 0.08721119715131276, 0.08721119715131276, 0.08721119715131276, 0.07079301664289961, 0.07079301664289961, 0.07079301664289961, 0.10858020192226836, 0.10858020192226836, 0.10858020192226836, 0.17818216517787555, 0.17818216517787555, 0.17818216517787555, 0.1635407207283348, 0.1635407207283348, 0.1635407207283348, 0.07299697668849969, 0.07299697668849969, 0.07299697668849969, 0.10594972745789288, 0.10594972745789288, 0.10594972745789288, 0.031076319300605837, 0.031076319300605837, 0.031076319300605837, 0.018587356468276472, 0.018587356468276472, 0.018587356468276472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007267088117833942, 0.007267088117833942, 0.007267088117833942, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08896769699790363, 0.08896769699790363, 0.08896769699790363, 0.10180154491249382, 0.10180154491249382, 0.10180154491249382, 0.11146479373624096, 0.11146479373624096, 0.11146479373624096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011588249222324931, 0.011588249222324931, 0.011588249222324931, 0.019744037482273935, 0.019744037482273935, 0.019744037482273935, 0.007398895144152262, 0.007398895144152262, 0.007398895144152262, 0.3300528659995614, 0.3300528659995614, 0.3300528659995614, 0.23625831249767315, 0.23625831249767315, 0.23625831249767315, 0.23112590144768463, 0.23112590144768463, 0.23112590144768463, 0.06797465447052986, 0.06797465447052986, 0.06797465447052986, 0.04622776784074156, 0.04622776784074156, 0.04622776784074156, 0.058347918759942385, 0.058347918759942385, 0.058347918759942385, 0.14297270823116492, 0.14297270823116492, 0.14297270823116492, 0.12831496018730737, 0.12831496018730737, 0.12831496018730737, 0.1900803027575123, 0.1900803027575123, 0.1900803027575123, 0.1933722257280288, 0.1933722257280288, 0.1933722257280288, 0.16592490025502216, 0.16592490025502216, 0.16592490025502216, 0.1758336884427112, 0.1758336884427112, 0.1758336884427112, 0.12130191834163906, 0.12130191834163906, 0.12130191834163906, 0.15577802501977622, 0.15577802501977622, 0.15577802501977622, 0.15874403433843765, 0.15874403433843765, 0.15874403433843765, 0.15351183008001956, 0.15351183008001956, 0.15351183008001956, 0.15947743895709554, 0.15947743895709554, 0.15947743895709554, 0.1517238574651023, 0.1517238574651023, 0.1517238574651023, 0.15983165484119322, 0.15983165484119322, 0.15983165484119322, 0.16065833769703242, 0.16065833769703242, 0.16065833769703242, 0.18486110917172616, 0.18486110917172616, 0.18486110917172616, 0.166090728909286, 0.166090728909286, 0.166090728909286, 0.1579452785260601, 0.1579452785260601, 0.1579452785260601, 0.12248212720840734, 0.12248212720840734, 0.12248212720840734, 0.1658695438673149, 0.1658695438673149, 0.1658695438673149, 0.20576518713591596, 0.20576518713591596, 0.20576518713591596, 0.18046882260612251, 0.18046882260612251, 0.18046882260612251, 0.17231516742453368, 0.17231516742453368, 0.17231516742453368, 0.19297044347355163, 0.19297044347355163, 0.19297044347355163, 0.16294932485307, 0.16294932485307, 0.16294932485307, 0.043162721861428, 0.043162721861428, 0.043162721861428, 0.05151172227357437, 0.05151172227357437, 0.05151172227357437, 0.04562328857227038, 0.04562328857227038, 0.04562328857227038]}, "mutation_prompt": null}
{"id": "ce8c9b28-d1be-4a61-8d82-47c76dd90da4", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i))\n        self.cooling_rate = 0.95\n        self.chaos_factor = 0.2\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:\n                    self.mutation_factor = 0.5 + 0.5 * np.random.rand() + self.chaos_factor * np.cos(evaluations)\n                \n                if evaluations % 100 == 0:  # Adaptive mutation based on best individual\n                    best_idx = np.argmin(fitness)\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand() * np.cos(evaluations)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 2, replace=False)\n                    x1, x2 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Multi-Strategy DE with Chaos-Inspired Mutation and Gradient-Guided Exploitation for Enhanced Exploration and Convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fec10146-af33-4ca7-9b7d-b40d5e0255ec", "metadata": {"aucs": [0.8955891641707684, 0.8955891641707684, 0.8955891641707684, 0.9040282417657306, 0.9040282417657306, 0.9040282417657306, 0.9017626170839758, 0.9017626170839758, 0.9017626170839758, 0.8277117263004398, 0.8277117263004398, 0.8277117263004398, 0.8254877373529398, 0.8254877373529398, 0.8254877373529398, 0.8298969763176497, 0.8298969763176497, 0.8298969763176497, 0.3810368837100564, 0.3810368837100564, 0.3810368837100564, 0.5228145011571719, 0.5228145011571719, 0.5228145011571719, 0.34170489743245125, 0.34170489743245125, 0.34170489743245125, 0.13675558004918875, 0.13675558004918875, 0.13675558004918875, 0.16382909806715829, 0.16382909806715829, 0.16382909806715829, 0.2025690140767984, 0.2025690140767984, 0.2025690140767984, 0.9680737007737593, 0.9680737007737593, 0.9680737007737593, 0.9818881233375175, 0.9818881233375175, 0.9818881233375175, 0.9833178136109815, 0.9833178136109815, 0.9833178136109815, 0.7064814769641614, 0.7064814769641614, 0.7064814769641614, 0.7149242495677147, 0.7149242495677147, 0.7149242495677147, 0.6775578616551698, 0.6775578616551698, 0.6775578616551698, 0.864307177169471, 0.864307177169471, 0.864307177169471, 0.8674776714221704, 0.8674776714221704, 0.8674776714221704, 0.6622794596826825, 0.6622794596826825, 0.6622794596826825, 0.729955117596454, 0.729955117596454, 0.729955117596454, 0.5575893785721159, 0.5575893785721159, 0.5575893785721159, 0.5138348070275853, 0.5138348070275853, 0.5138348070275853, 0.543255461664087, 0.543255461664087, 0.543255461664087, 0.5639928174882534, 0.5639928174882534, 0.5639928174882534, 0.5686986941765297, 0.5686986941765297, 0.5686986941765297, 0.649700967835513, 0.649700967835513, 0.649700967835513, 0.6914003210510837, 0.6914003210510837, 0.6914003210510837, 0.2208839556179586, 0.2208839556179586, 0.2208839556179586, 0.6731204902275607, 0.6731204902275607, 0.6731204902275607, 0.3623773810898001, 0.3623773810898001, 0.3623773810898001, 0.8034297771290143, 0.8034297771290143, 0.8034297771290143, 0.5371253042893734, 0.5371253042893734, 0.5371253042893734, 0.45590791778970563, 0.45590791778970563, 0.45590791778970563, 0.18365123548714923, 0.18365123548714923, 0.18365123548714923, 0.6468898398067857, 0.6468898398067857, 0.6468898398067857, 0.6355060176148879, 0.6355060176148879, 0.6355060176148879, 0.6100148839891814, 0.6100148839891814, 0.6100148839891814, 0.8630837800748234, 0.8630837800748234, 0.8630837800748234, 0.6799409240959988, 0.6799409240959988, 0.6799409240959988, 0.8552840354441037, 0.8552840354441037, 0.8552840354441037, 0.12287556163309432, 0.12287556163309432, 0.12287556163309432, 0.41730156980116806, 0.41730156980116806, 0.41730156980116806, 0.13818485114633772, 0.13818485114633772, 0.13818485114633772, 0.1783062915412773, 0.1783062915412773, 0.1783062915412773, 0.14151119374585797, 0.14151119374585797, 0.14151119374585797, 0.1405469785458292, 0.1405469785458292, 0.1405469785458292, 0.38000902844606244, 0.38000902844606244, 0.38000902844606244, 0.5584407833854343, 0.5584407833854343, 0.5584407833854343, 0.6989930891700415, 0.6989930891700415, 0.6989930891700415, 0.5027539352987068, 0.5027539352987068, 0.5027539352987068, 0.5023570705962934, 0.5023570705962934, 0.5023570705962934, 0.5685412614030033, 0.5685412614030033, 0.5685412614030033, 0.22158368831666353, 0.22158368831666353, 0.22158368831666353, 0.20608133015586338, 0.20608133015586338, 0.20608133015586338, 0.21136129453843988, 0.21136129453843988, 0.21136129453843988, 0.23451854673814665, 0.23451854673814665, 0.23451854673814665, 0.5445719210264428, 0.5445719210264428, 0.5445719210264428, 0.19538734157717885, 0.19538734157717885, 0.19538734157717885, 0.8817515990642596, 0.8817515990642596, 0.8817515990642596, 0.17467674176836823, 0.17467674176836823, 0.17467674176836823, 0.16484829345339547, 0.16484829345339547, 0.16484829345339547, 0.16738228735468297, 0.16738228735468297, 0.16738228735468297, 0.20710730984178805, 0.20710730984178805, 0.20710730984178805, 0.20886002074927446, 0.20886002074927446, 0.20886002074927446, 0.19152823352981874, 0.19152823352981874, 0.19152823352981874, 0.16719981786414295, 0.16719981786414295, 0.16719981786414295, 0.20269980974031443, 0.20269980974031443, 0.20269980974031443, 0.08541012912791246, 0.08541012912791246, 0.08541012912791246, 0.08860182696484242, 0.08860182696484242, 0.08860182696484242, 0.10083112160770502, 0.10083112160770502, 0.10083112160770502]}, "mutation_prompt": null}
{"id": "276e5e8e-71d9-4295-8183-e7d4df3936a8", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Increased population size for diversity\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.initial_temperature = 1.0\n        self.cooling_schedule = lambda t, i: t * (0.9 - 0.05 * np.cos(i))  # Modified cooling schedule\n        self.cooling_rate = 0.9  # Slightly increased cooling rate for faster convergence\n        self.chaos_factor = 0.3  # Adjusted chaos factor\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Adjusted frequency of mutation factor adaptation\n                    self.mutation_factor = 0.5 + 0.3 * np.random.rand() + self.chaos_factor * np.sin(evaluations)\n                \n                if evaluations % 120 == 0:  # Adaptive mutation based on median individual\n                    sorted_indices = np.argsort(fitness)\n                    median_idx = sorted_indices[self.pop_size // 2]\n                    self.mutation_factor = 0.7 + 0.3 * np.random.rand() * np.cos(evaluations)\n                    x_median = population[median_idx]\n                    indices = np.random.choice(self.pop_size, 2, replace=False)\n                    x1, x2 = population[indices]\n                    mutant_vector = np.clip(x_median + self.mutation_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveMultiStrategyDE", "description": "Adaptive Multi-Strategy DE with Chaotic Perturbations and Temperature-Adaptive Selection for Enhanced Optimization Efficiency.", "configspace": "", "generation": 56, "fitness": 0.474583939367185, "feedback": "The algorithm AdaptiveMultiStrategyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.27.", "error": "", "parent_id": "fec10146-af33-4ca7-9b7d-b40d5e0255ec", "metadata": {"aucs": [0.877412394405119, 0.877412394405119, 0.877412394405119, 0.8819059241960018, 0.8819059241960018, 0.8819059241960018, 0.8659389489349482, 0.8659389489349482, 0.8659389489349482, 0.7750642291303979, 0.7750642291303979, 0.7750642291303979, 0.7747047498009929, 0.7747047498009929, 0.7747047498009929, 0.7648098193767501, 0.7648098193767501, 0.7648098193767501, 0.15138327934297635, 0.15138327934297635, 0.15138327934297635, 0.3235666249662462, 0.3235666249662462, 0.3235666249662462, 0.40902909570878476, 0.40902909570878476, 0.40902909570878476, 0.13651607900645268, 0.13651607900645268, 0.13651607900645268, 0.1470365365102423, 0.1470365365102423, 0.1470365365102423, 0.14908990614942863, 0.14908990614942863, 0.14908990614942863, 0.9432088624150732, 0.9432088624150732, 0.9432088624150732, 0.9073080941640365, 0.9073080941640365, 0.9073080941640365, 0.9174662490831464, 0.9174662490831464, 0.9174662490831464, 0.6971946381533554, 0.6971946381533554, 0.6971946381533554, 0.666443231806281, 0.666443231806281, 0.666443231806281, 0.6857773435083898, 0.6857773435083898, 0.6857773435083898, 0.8576656098634725, 0.8576656098634725, 0.8576656098634725, 0.8410003217444905, 0.8410003217444905, 0.8410003217444905, 0.8349601663366382, 0.8349601663366382, 0.8349601663366382, 0.5735865999277832, 0.5735865999277832, 0.5735865999277832, 0.5115055273831727, 0.5115055273831727, 0.5115055273831727, 0.5478459005931581, 0.5478459005931581, 0.5478459005931581, 0.5233759941009004, 0.5233759941009004, 0.5233759941009004, 0.6652300778190978, 0.6652300778190978, 0.6652300778190978, 0.5784192269753221, 0.5784192269753221, 0.5784192269753221, 0.6231124666834391, 0.6231124666834391, 0.6231124666834391, 0.6179420899097372, 0.6179420899097372, 0.6179420899097372, 0.6754829734983612, 0.6754829734983612, 0.6754829734983612, 0.6836654376179851, 0.6836654376179851, 0.6836654376179851, 0.5595020624902742, 0.5595020624902742, 0.5595020624902742, 0.7017846568984147, 0.7017846568984147, 0.7017846568984147, 0.1596394476686369, 0.1596394476686369, 0.1596394476686369, 0.5346725719876961, 0.5346725719876961, 0.5346725719876961, 0.3344004684890747, 0.3344004684890747, 0.3344004684890747, 0.45454939752440837, 0.45454939752440837, 0.45454939752440837, 0.5239698506550758, 0.5239698506550758, 0.5239698506550758, 0.544308523979302, 0.544308523979302, 0.544308523979302, 0.8107931820911689, 0.8107931820911689, 0.8107931820911689, 0.8303077390996773, 0.8303077390996773, 0.8303077390996773, 0.8083844908431036, 0.8083844908431036, 0.8083844908431036, 0.40472492192876597, 0.40472492192876597, 0.40472492192876597, 0.10657508344755351, 0.10657508344755351, 0.10657508344755351, 0.1218508948873176, 0.1218508948873176, 0.1218508948873176, 0.1507514468097454, 0.1507514468097454, 0.1507514468097454, 0.19352186955880357, 0.19352186955880357, 0.19352186955880357, 0.19055344450881795, 0.19055344450881795, 0.19055344450881795, 0.5251175230655349, 0.5251175230655349, 0.5251175230655349, 0.5156330411816525, 0.5156330411816525, 0.5156330411816525, 0.5429641342643488, 0.5429641342643488, 0.5429641342643488, 0.4733359994689118, 0.4733359994689118, 0.4733359994689118, 0.42751582398320465, 0.42751582398320465, 0.42751582398320465, 0.40914114495635445, 0.40914114495635445, 0.40914114495635445, 0.19692087918283485, 0.19692087918283485, 0.19692087918283485, 0.20895376706827573, 0.20895376706827573, 0.20895376706827573, 0.2211360107151531, 0.2211360107151531, 0.2211360107151531, 0.2975008770269416, 0.2975008770269416, 0.2975008770269416, 0.5004484895254722, 0.5004484895254722, 0.5004484895254722, 0.21437616021934058, 0.21437616021934058, 0.21437616021934058, 0.8322687940874872, 0.8322687940874872, 0.8322687940874872, 0.17320124564037143, 0.17320124564037143, 0.17320124564037143, 0.17833681948707691, 0.17833681948707691, 0.17833681948707691, 0.20311214343624062, 0.20311214343624062, 0.20311214343624062, 0.20436550671034215, 0.20436550671034215, 0.20436550671034215, 0.20740567939036814, 0.20740567939036814, 0.20740567939036814, 0.18438380374489083, 0.18438380374489083, 0.18438380374489083, 0.1723863292731599, 0.1723863292731599, 0.1723863292731599, 0.19452264401499186, 0.19452264401499186, 0.19452264401499186, 0.09457666017022404, 0.09457666017022404, 0.09457666017022404, 0.08106119524074673, 0.08106119524074673, 0.08106119524074673, 0.07344051060337564, 0.07344051060337564, 0.07344051060337564]}, "mutation_prompt": null}
{"id": "1bd726ae-3c2a-4478-9d1e-998d7a26a65b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.9  # Adjusted for more diversity\n        self.crossover_rate = 0.85  # Slightly reduced for finer local search\n        self.initial_temperature = 1.5  # Increased for better exploration\n        self.cooling_schedule = lambda t, i: t * (0.80 + 0.15 * np.cos(i))  # Adjusted cooling schedule\n        self.cooling_rate = 0.93  # Slightly slower cooling\n        self.chaos_factor = 0.3  # Enhanced chaos influence\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Changed frequency for dynamic mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations)\n\n                if evaluations % 90 == 0:  # Altered adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Chaos-Induced Dynamic Mutation and Temperature-Based Acceptance for Improved Exploration and Exploitation.", "configspace": "", "generation": 57, "fitness": 0.49253679699376274, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.28.", "error": "", "parent_id": "fec10146-af33-4ca7-9b7d-b40d5e0255ec", "metadata": {"aucs": [0.8958162860814596, 0.8958162860814596, 0.8958162860814596, 0.910613622460147, 0.910613622460147, 0.910613622460147, 0.900902790189313, 0.900902790189313, 0.900902790189313, 0.8275920988760344, 0.8275920988760344, 0.8275920988760344, 0.7973403398799922, 0.7973403398799922, 0.7973403398799922, 0.813085331917212, 0.813085331917212, 0.813085331917212, 0.31302037176372965, 0.31302037176372965, 0.31302037176372965, 0.3728793605829199, 0.3728793605829199, 0.3728793605829199, 0.17430597254451263, 0.17430597254451263, 0.17430597254451263, 0.34862443451395964, 0.34862443451395964, 0.34862443451395964, 0.16678387892345725, 0.16678387892345725, 0.16678387892345725, 0.15323121210106094, 0.15323121210106094, 0.15323121210106094, 0.9589029092206667, 0.9589029092206667, 0.9589029092206667, 0.9650014909560067, 0.9650014909560067, 0.9650014909560067, 0.9752356737168393, 0.9752356737168393, 0.9752356737168393, 0.6963448487797437, 0.6963448487797437, 0.6963448487797437, 0.6439642763367364, 0.6439642763367364, 0.6439642763367364, 0.7042593911872246, 0.7042593911872246, 0.7042593911872246, 0.7896837610494952, 0.7896837610494952, 0.7896837610494952, 0.8522579323034918, 0.8522579323034918, 0.8522579323034918, 0.8449316742161892, 0.8449316742161892, 0.8449316742161892, 0.6955432281241435, 0.6955432281241435, 0.6955432281241435, 0.5530513783590656, 0.5530513783590656, 0.5530513783590656, 0.7476070254603566, 0.7476070254603566, 0.7476070254603566, 0.577571862004226, 0.577571862004226, 0.577571862004226, 0.6146320001232863, 0.6146320001232863, 0.6146320001232863, 0.44480561319006284, 0.44480561319006284, 0.44480561319006284, 0.6135029297794792, 0.6135029297794792, 0.6135029297794792, 0.524340409968642, 0.524340409968642, 0.524340409968642, 0.6254890411647723, 0.6254890411647723, 0.6254890411647723, 0.6164017206496306, 0.6164017206496306, 0.6164017206496306, 0.5152955162623007, 0.5152955162623007, 0.5152955162623007, 0.6461979355923504, 0.6461979355923504, 0.6461979355923504, 0.08884360337998076, 0.08884360337998076, 0.08884360337998076, 0.39401272229122586, 0.39401272229122586, 0.39401272229122586, 0.17782640684809703, 0.17782640684809703, 0.17782640684809703, 0.4142535141868219, 0.4142535141868219, 0.4142535141868219, 0.5339672807657844, 0.5339672807657844, 0.5339672807657844, 0.46513654308244445, 0.46513654308244445, 0.46513654308244445, 0.839792516363861, 0.839792516363861, 0.839792516363861, 0.828268693903436, 0.828268693903436, 0.828268693903436, 0.6654218794141149, 0.6654218794141149, 0.6654218794141149, 0.1348980512662007, 0.1348980512662007, 0.1348980512662007, 0.09592453341845886, 0.09592453341845886, 0.09592453341845886, 0.1315601418846274, 0.1315601418846274, 0.1315601418846274, 0.14221619939410957, 0.14221619939410957, 0.14221619939410957, 0.19087290955941194, 0.19087290955941194, 0.19087290955941194, 0.2500868485903964, 0.2500868485903964, 0.2500868485903964, 0.592818856473337, 0.592818856473337, 0.592818856473337, 0.5271065731735123, 0.5271065731735123, 0.5271065731735123, 0.6694626444971641, 0.6694626444971641, 0.6694626444971641, 0.4012495167599254, 0.4012495167599254, 0.4012495167599254, 0.42593482453583786, 0.42593482453583786, 0.42593482453583786, 0.46963028131707907, 0.46963028131707907, 0.46963028131707907, 0.2083802375870658, 0.2083802375870658, 0.2083802375870658, 0.19337385440777344, 0.19337385440777344, 0.19337385440777344, 0.19101861466517978, 0.19101861466517978, 0.19101861466517978, 0.6418485718064275, 0.6418485718064275, 0.6418485718064275, 0.6598583846557478, 0.6598583846557478, 0.6598583846557478, 0.6525411109763564, 0.6525411109763564, 0.6525411109763564, 0.8498284832486726, 0.8498284832486726, 0.8498284832486726, 0.16770546471442083, 0.16770546471442083, 0.16770546471442083, 0.15178853840224638, 0.15178853840224638, 0.15178853840224638, 0.16687991244145617, 0.16687991244145617, 0.16687991244145617, 0.2016834438494679, 0.2016834438494679, 0.2016834438494679, 0.8606037828866943, 0.8606037828866943, 0.8606037828866943, 0.17849829787945204, 0.17849829787945204, 0.17849829787945204, 0.17055871148476875, 0.17055871148476875, 0.17055871148476875, 0.18646311627974776, 0.18646311627974776, 0.18646311627974776, 0.09403346104282195, 0.09403346104282195, 0.09403346104282195, 0.07654749097172231, 0.07654749097172231, 0.07654749097172231, 0.09253704686656039, 0.09253704686656039, 0.09253704686656039]}, "mutation_prompt": null}
{"id": "e6148400-7bc0-40cf-9757-0916d6db693f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.9  # Adjusted for more diversity\n        self.crossover_rate = 0.85  # Slightly reduced for finer local search\n        self.initial_temperature = 1.5  # Increased for better exploration\n        self.cooling_schedule = lambda t, i: t * (0.80 + 0.15 * np.cos(i))  # Adjusted cooling schedule\n        self.cooling_rate = 0.93  # Slightly slower cooling\n        self.chaos_factor = 0.3  # Enhanced chaos influence\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Changed frequency for dynamic mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations)\n\n                if evaluations % 90 == 0:  # Altered adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Chaos-Induced Dynamic Mutation and Temperature-Based Acceptance for Improved Exploration and Exploitation.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1bd726ae-3c2a-4478-9d1e-998d7a26a65b", "metadata": {"aucs": [0.8958162860814596, 0.8958162860814596, 0.8958162860814596, 0.910613622460147, 0.910613622460147, 0.910613622460147, 0.900902790189313, 0.900902790189313, 0.900902790189313, 0.8275920988760344, 0.8275920988760344, 0.8275920988760344, 0.7973403398799922, 0.7973403398799922, 0.7973403398799922, 0.813085331917212, 0.813085331917212, 0.813085331917212, 0.31302037176372965, 0.31302037176372965, 0.31302037176372965, 0.3728793605829199, 0.3728793605829199, 0.3728793605829199, 0.17430597254451263, 0.17430597254451263, 0.17430597254451263, 0.34862443451395964, 0.34862443451395964, 0.34862443451395964, 0.16678387892345725, 0.16678387892345725, 0.16678387892345725, 0.15323121210106094, 0.15323121210106094, 0.15323121210106094, 0.9589029092206667, 0.9589029092206667, 0.9589029092206667, 0.9650014909560067, 0.9650014909560067, 0.9650014909560067, 0.9752356737168393, 0.9752356737168393, 0.9752356737168393, 0.6963448487797437, 0.6963448487797437, 0.6963448487797437, 0.6439642763367364, 0.6439642763367364, 0.6439642763367364, 0.7042593911872246, 0.7042593911872246, 0.7042593911872246, 0.7896837610494952, 0.7896837610494952, 0.7896837610494952, 0.8522579323034918, 0.8522579323034918, 0.8522579323034918, 0.8449316742161892, 0.8449316742161892, 0.8449316742161892, 0.6955432281241435, 0.6955432281241435, 0.6955432281241435, 0.5530513783590656, 0.5530513783590656, 0.5530513783590656, 0.7476070254603566, 0.7476070254603566, 0.7476070254603566, 0.577571862004226, 0.577571862004226, 0.577571862004226, 0.6146320001232863, 0.6146320001232863, 0.6146320001232863, 0.44480561319006284, 0.44480561319006284, 0.44480561319006284, 0.6135029297794792, 0.6135029297794792, 0.6135029297794792, 0.524340409968642, 0.524340409968642, 0.524340409968642, 0.6254890411647723, 0.6254890411647723, 0.6254890411647723, 0.6164017206496306, 0.6164017206496306, 0.6164017206496306, 0.5152955162623007, 0.5152955162623007, 0.5152955162623007, 0.6461979355923504, 0.6461979355923504, 0.6461979355923504, 0.08884360337998076, 0.08884360337998076, 0.08884360337998076, 0.39401272229122586, 0.39401272229122586, 0.39401272229122586, 0.17782640684809703, 0.17782640684809703, 0.17782640684809703, 0.4142535141868219, 0.4142535141868219, 0.4142535141868219, 0.5339672807657844, 0.5339672807657844, 0.5339672807657844, 0.46513654308244445, 0.46513654308244445, 0.46513654308244445, 0.839792516363861, 0.839792516363861, 0.839792516363861, 0.828268693903436, 0.828268693903436, 0.828268693903436, 0.6654218794141149, 0.6654218794141149, 0.6654218794141149, 0.1348980512662007, 0.1348980512662007, 0.1348980512662007, 0.09592453341845886, 0.09592453341845886, 0.09592453341845886, 0.1315601418846274, 0.1315601418846274, 0.1315601418846274, 0.14221619939410957, 0.14221619939410957, 0.14221619939410957, 0.19087290955941194, 0.19087290955941194, 0.19087290955941194, 0.2500868485903964, 0.2500868485903964, 0.2500868485903964, 0.592818856473337, 0.592818856473337, 0.592818856473337, 0.5271065731735123, 0.5271065731735123, 0.5271065731735123, 0.6694626444971641, 0.6694626444971641, 0.6694626444971641, 0.4012495167599254, 0.4012495167599254, 0.4012495167599254, 0.42593482453583786, 0.42593482453583786, 0.42593482453583786, 0.46963028131707907, 0.46963028131707907, 0.46963028131707907, 0.2083802375870658, 0.2083802375870658, 0.2083802375870658, 0.19337385440777344, 0.19337385440777344, 0.19337385440777344, 0.19101861466517978, 0.19101861466517978, 0.19101861466517978, 0.6418485718064275, 0.6418485718064275, 0.6418485718064275, 0.6598583846557478, 0.6598583846557478, 0.6598583846557478, 0.6525411109763564, 0.6525411109763564, 0.6525411109763564, 0.8498284832486726, 0.8498284832486726, 0.8498284832486726, 0.16770546471442083, 0.16770546471442083, 0.16770546471442083, 0.15178853840224638, 0.15178853840224638, 0.15178853840224638, 0.16687991244145617, 0.16687991244145617, 0.16687991244145617, 0.2016834438494679, 0.2016834438494679, 0.2016834438494679, 0.8606037828866943, 0.8606037828866943, 0.8606037828866943, 0.17849829787945204, 0.17849829787945204, 0.17849829787945204, 0.17055871148476875, 0.17055871148476875, 0.17055871148476875, 0.18646311627974776, 0.18646311627974776, 0.18646311627974776, 0.09403346104282195, 0.09403346104282195, 0.09403346104282195, 0.07654749097172231, 0.07654749097172231, 0.07654749097172231, 0.09253704686656039, 0.09253704686656039, 0.09253704686656039]}, "mutation_prompt": null}
{"id": "5d2c11c4-6981-4411-a951-de6f92d26932", "solution": "import numpy as np\n\nclass AdvancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8  # Adjusted for balanced exploration\n        self.crossover_rate = 0.8  # Modified for improved exploration\n        self.initial_temperature = 2.0  # Higher starting temperature for broader search\n        self.cooling_schedule = lambda t, i: t / (1 + 0.01 * i)  # Logarithmic cooling for steady temperature reduction\n        self.cooling_rate = 0.95  # Adjusted cooling rate for smoother convergence\n        self.chaos_factor = 0.25  # Slightly reduced chaos influence\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Altered frequency for synchronicity-induced mutation\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand() + self.chaos_factor * np.cos(evaluations)\n\n                if evaluations % 100 == 0:  # New adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdvancedAdaptiveDE", "description": "Advanced Adaptive DE with Synchronicity-Induced Mutation and Logarithmic Cooling for Enhanced Global Convergence.", "configspace": "", "generation": 59, "fitness": 0.430670145440898, "feedback": "The algorithm AdvancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "1bd726ae-3c2a-4478-9d1e-998d7a26a65b", "metadata": {"aucs": [0.8453703075614776, 0.8453703075614776, 0.8453703075614776, 0.8851522220519565, 0.8851522220519565, 0.8851522220519565, 0.8790342147010464, 0.8790342147010464, 0.8790342147010464, 0.7973865379599627, 0.7973865379599627, 0.7973865379599627, 0.7914851738616289, 0.7914851738616289, 0.7914851738616289, 0.7810525517839781, 0.7810525517839781, 0.7810525517839781, 0.33820247275471216, 0.33820247275471216, 0.33820247275471216, 0.46136387009414115, 0.46136387009414115, 0.46136387009414115, 0.3555446709339233, 0.3555446709339233, 0.3555446709339233, 0.14933639345658944, 0.14933639345658944, 0.14933639345658944, 0.29677842496660845, 0.29677842496660845, 0.29677842496660845, 0.2963676340470617, 0.2963676340470617, 0.2963676340470617, 0.9774708927298182, 0.9774708927298182, 0.9774708927298182, 0.9841288810007724, 0.9841288810007724, 0.9841288810007724, 0.9733105188967719, 0.9733105188967719, 0.9733105188967719, 0.57270362800535, 0.57270362800535, 0.57270362800535, 0.590559379881116, 0.590559379881116, 0.590559379881116, 0.653352191651672, 0.653352191651672, 0.653352191651672, 0.8504923145493747, 0.8504923145493747, 0.8504923145493747, 0.7847642121507488, 0.7847642121507488, 0.7847642121507488, 0.7619327544710015, 0.7619327544710015, 0.7619327544710015, 0.4250903114747997, 0.4250903114747997, 0.4250903114747997, 0.426134889038671, 0.426134889038671, 0.426134889038671, 0.4935990751095938, 0.4935990751095938, 0.4935990751095938, 0.016689339826929772, 0.016689339826929772, 0.016689339826929772, 0.5637394728815441, 0.5637394728815441, 0.5637394728815441, 0.4900104431806822, 0.4900104431806822, 0.4900104431806822, 0.3292794369744454, 0.3292794369744454, 0.3292794369744454, 0.3105392325897851, 0.3105392325897851, 0.3105392325897851, 0.4215713017937718, 0.4215713017937718, 0.4215713017937718, 0.4858344542136118, 0.4858344542136118, 0.4858344542136118, 0.4894903821350597, 0.4894903821350597, 0.4894903821350597, 0.5513956532536128, 0.5513956532536128, 0.5513956532536128, 0.0688135932148074, 0.0688135932148074, 0.0688135932148074, 0.2325769862936813, 0.2325769862936813, 0.2325769862936813, 0.17113162081334243, 0.17113162081334243, 0.17113162081334243, 0.32062519233036824, 0.32062519233036824, 0.32062519233036824, 0.33827386035054974, 0.33827386035054974, 0.33827386035054974, 0.315282324440202, 0.315282324440202, 0.315282324440202, 0.7413834277558948, 0.7413834277558948, 0.7413834277558948, 0.7586114354968475, 0.7586114354968475, 0.7586114354968475, 0.7241317019872849, 0.7241317019872849, 0.7241317019872849, 0.09978831859577053, 0.09978831859577053, 0.09978831859577053, 0.09715568904036331, 0.09715568904036331, 0.09715568904036331, 0.10020861627740874, 0.10020861627740874, 0.10020861627740874, 0.16590307496381484, 0.16590307496381484, 0.16590307496381484, 0.19463565137017425, 0.19463565137017425, 0.19463565137017425, 0.20776042533421157, 0.20776042533421157, 0.20776042533421157, 0.39677007691471844, 0.39677007691471844, 0.39677007691471844, 0.4913245673552814, 0.4913245673552814, 0.4913245673552814, 0.4464897027588811, 0.4464897027588811, 0.4464897027588811, 0.28669614961120526, 0.28669614961120526, 0.28669614961120526, 0.2888221464857198, 0.2888221464857198, 0.2888221464857198, 0.33038644942367035, 0.33038644942367035, 0.33038644942367035, 0.19149253020088397, 0.19149253020088397, 0.19149253020088397, 0.1717555068902522, 0.1717555068902522, 0.1717555068902522, 0.17240499652216823, 0.17240499652216823, 0.17240499652216823, 0.5375773169806173, 0.5375773169806173, 0.5375773169806173, 0.37762855466682055, 0.37762855466682055, 0.37762855466682055, 0.22653455264455402, 0.22653455264455402, 0.22653455264455402, 0.7150723718092842, 0.7150723718092842, 0.7150723718092842, 0.16119738934685357, 0.16119738934685357, 0.16119738934685357, 0.664762037971105, 0.664762037971105, 0.664762037971105, 0.7891689703028895, 0.7891689703028895, 0.7891689703028895, 0.16421156146738847, 0.16421156146738847, 0.16421156146738847, 0.2093180154741422, 0.2093180154741422, 0.2093180154741422, 0.18399018242343412, 0.18399018242343412, 0.18399018242343412, 0.19208177560983486, 0.19208177560983486, 0.19208177560983486, 0.19016704050832267, 0.19016704050832267, 0.19016704050832267, 0.08291624608074255, 0.08291624608074255, 0.08291624608074255, 0.07393733224622101, 0.07393733224622101, 0.07393733224622101, 0.0980998398027243, 0.0980998398027243, 0.0980998398027243]}, "mutation_prompt": null}
{"id": "364ecaac-543a-401e-a22b-54ca9aa386be", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.9  # Adjusted for more diversity\n        self.crossover_rate = 0.85  # Slightly reduced for finer local search\n        self.initial_temperature = 1.5  # Increased for better exploration\n        self.cooling_schedule = lambda t, i: t * (0.80 + 0.15 * np.cos(i))  # Adjusted cooling schedule\n        self.cooling_rate = 0.93  # Slightly slower cooling\n        self.chaos_factor = 0.3  # Enhanced chaos influence\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Changed frequency for dynamic mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations)\n\n                if evaluations % 90 == 0:  # Altered adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Chaos-Induced Dynamic Mutation and Temperature-Based Acceptance for Improved Exploration and Exploitation.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1bd726ae-3c2a-4478-9d1e-998d7a26a65b", "metadata": {"aucs": [0.8958162860814596, 0.8958162860814596, 0.8958162860814596, 0.910613622460147, 0.910613622460147, 0.910613622460147, 0.900902790189313, 0.900902790189313, 0.900902790189313, 0.8275920988760344, 0.8275920988760344, 0.8275920988760344, 0.7973403398799922, 0.7973403398799922, 0.7973403398799922, 0.813085331917212, 0.813085331917212, 0.813085331917212, 0.31302037176372965, 0.31302037176372965, 0.31302037176372965, 0.3728793605829199, 0.3728793605829199, 0.3728793605829199, 0.17430597254451263, 0.17430597254451263, 0.17430597254451263, 0.34862443451395964, 0.34862443451395964, 0.34862443451395964, 0.16678387892345725, 0.16678387892345725, 0.16678387892345725, 0.15323121210106094, 0.15323121210106094, 0.15323121210106094, 0.9589029092206667, 0.9589029092206667, 0.9589029092206667, 0.9650014909560067, 0.9650014909560067, 0.9650014909560067, 0.9752356737168393, 0.9752356737168393, 0.9752356737168393, 0.6963448487797437, 0.6963448487797437, 0.6963448487797437, 0.6439642763367364, 0.6439642763367364, 0.6439642763367364, 0.7042593911872246, 0.7042593911872246, 0.7042593911872246, 0.7896837610494952, 0.7896837610494952, 0.7896837610494952, 0.8522579323034918, 0.8522579323034918, 0.8522579323034918, 0.8449316742161892, 0.8449316742161892, 0.8449316742161892, 0.6955432281241435, 0.6955432281241435, 0.6955432281241435, 0.5530513783590656, 0.5530513783590656, 0.5530513783590656, 0.7476070254603566, 0.7476070254603566, 0.7476070254603566, 0.577571862004226, 0.577571862004226, 0.577571862004226, 0.6146320001232863, 0.6146320001232863, 0.6146320001232863, 0.44480561319006284, 0.44480561319006284, 0.44480561319006284, 0.6135029297794792, 0.6135029297794792, 0.6135029297794792, 0.524340409968642, 0.524340409968642, 0.524340409968642, 0.6254890411647723, 0.6254890411647723, 0.6254890411647723, 0.6164017206496306, 0.6164017206496306, 0.6164017206496306, 0.5152955162623007, 0.5152955162623007, 0.5152955162623007, 0.6461979355923504, 0.6461979355923504, 0.6461979355923504, 0.08884360337998076, 0.08884360337998076, 0.08884360337998076, 0.39401272229122586, 0.39401272229122586, 0.39401272229122586, 0.17782640684809703, 0.17782640684809703, 0.17782640684809703, 0.4142535141868219, 0.4142535141868219, 0.4142535141868219, 0.5339672807657844, 0.5339672807657844, 0.5339672807657844, 0.46513654308244445, 0.46513654308244445, 0.46513654308244445, 0.839792516363861, 0.839792516363861, 0.839792516363861, 0.828268693903436, 0.828268693903436, 0.828268693903436, 0.6654218794141149, 0.6654218794141149, 0.6654218794141149, 0.1348980512662007, 0.1348980512662007, 0.1348980512662007, 0.09592453341845886, 0.09592453341845886, 0.09592453341845886, 0.1315601418846274, 0.1315601418846274, 0.1315601418846274, 0.14221619939410957, 0.14221619939410957, 0.14221619939410957, 0.19087290955941194, 0.19087290955941194, 0.19087290955941194, 0.2500868485903964, 0.2500868485903964, 0.2500868485903964, 0.592818856473337, 0.592818856473337, 0.592818856473337, 0.5271065731735123, 0.5271065731735123, 0.5271065731735123, 0.6694626444971641, 0.6694626444971641, 0.6694626444971641, 0.4012495167599254, 0.4012495167599254, 0.4012495167599254, 0.42593482453583786, 0.42593482453583786, 0.42593482453583786, 0.46963028131707907, 0.46963028131707907, 0.46963028131707907, 0.2083802375870658, 0.2083802375870658, 0.2083802375870658, 0.19337385440777344, 0.19337385440777344, 0.19337385440777344, 0.19101861466517978, 0.19101861466517978, 0.19101861466517978, 0.6418485718064275, 0.6418485718064275, 0.6418485718064275, 0.6598583846557478, 0.6598583846557478, 0.6598583846557478, 0.6525411109763564, 0.6525411109763564, 0.6525411109763564, 0.8498284832486726, 0.8498284832486726, 0.8498284832486726, 0.16770546471442083, 0.16770546471442083, 0.16770546471442083, 0.15178853840224638, 0.15178853840224638, 0.15178853840224638, 0.16687991244145617, 0.16687991244145617, 0.16687991244145617, 0.2016834438494679, 0.2016834438494679, 0.2016834438494679, 0.8606037828866943, 0.8606037828866943, 0.8606037828866943, 0.17849829787945204, 0.17849829787945204, 0.17849829787945204, 0.17055871148476875, 0.17055871148476875, 0.17055871148476875, 0.18646311627974776, 0.18646311627974776, 0.18646311627974776, 0.09403346104282195, 0.09403346104282195, 0.09403346104282195, 0.07654749097172231, 0.07654749097172231, 0.07654749097172231, 0.09253704686656039, 0.09253704686656039, 0.09253704686656039]}, "mutation_prompt": null}
{"id": "5d0bb282-cf4e-45c6-a948-6644d0020767", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8  # Adjusted for controlled diversity\n        self.crossover_rate = 0.9  # Enhanced for robust exploitation\n        self.initial_temperature = 1.6  # Further increased for better exploration\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.10 * np.cos(i))  # Modified cooling schedule\n        self.cooling_rate = 0.92  # Refined cooling rate\n        self.chaos_factor = 0.35  # Increased chaos influence\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.6 + 0.3 * np.random.rand() + self.chaos_factor * np.sin(evaluations)\n\n                if evaluations % 85 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Optimized Adaptive DE with Enhanced Chaos and Stochastic Control for Robust Exploration and Exploitation.", "configspace": "", "generation": 61, "fitness": 0.48380175387036944, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "1bd726ae-3c2a-4478-9d1e-998d7a26a65b", "metadata": {"aucs": [0.9018296743095304, 0.9018296743095304, 0.9018296743095304, 0.9052224383842352, 0.9052224383842352, 0.9052224383842352, 0.9017888281603705, 0.9017888281603705, 0.9017888281603705, 0.8172552994325663, 0.8172552994325663, 0.8172552994325663, 0.8204274009946199, 0.8204274009946199, 0.8204274009946199, 0.8119488452627837, 0.8119488452627837, 0.8119488452627837, 0.4225186159733133, 0.4225186159733133, 0.4225186159733133, 0.4078571395733175, 0.4078571395733175, 0.4078571395733175, 0.22565142340114686, 0.22565142340114686, 0.22565142340114686, 0.1416629514505776, 0.1416629514505776, 0.1416629514505776, 0.15727080136455973, 0.15727080136455973, 0.15727080136455973, 0.12672978184659622, 0.12672978184659622, 0.12672978184659622, 0.974427353437037, 0.974427353437037, 0.974427353437037, 0.9477233335984128, 0.9477233335984128, 0.9477233335984128, 0.9370328647871732, 0.9370328647871732, 0.9370328647871732, 0.6996235641870927, 0.6996235641870927, 0.6996235641870927, 0.7406653679494783, 0.7406653679494783, 0.7406653679494783, 0.7191195229303804, 0.7191195229303804, 0.7191195229303804, 0.8912952054152178, 0.8912952054152178, 0.8912952054152178, 0.8684453128712022, 0.8684453128712022, 0.8684453128712022, 0.8525255854204651, 0.8525255854204651, 0.8525255854204651, 0.6774437795009168, 0.6774437795009168, 0.6774437795009168, 0.6563020491914164, 0.6563020491914164, 0.6563020491914164, 0.6147316833814195, 0.6147316833814195, 0.6147316833814195, 0.6293583362859647, 0.6293583362859647, 0.6293583362859647, 0.7030789943315078, 0.7030789943315078, 0.7030789943315078, 0.720895019943161, 0.720895019943161, 0.720895019943161, 0.5845560311539778, 0.5845560311539778, 0.5845560311539778, 0.6312096654073507, 0.6312096654073507, 0.6312096654073507, 0.6893604449512386, 0.6893604449512386, 0.6893604449512386, 0.7134048742277275, 0.7134048742277275, 0.7134048742277275, 0.7433224508498102, 0.7433224508498102, 0.7433224508498102, 0.7506482259462717, 0.7506482259462717, 0.7506482259462717, 0.10999290568753983, 0.10999290568753983, 0.10999290568753983, 0.45387303294571235, 0.45387303294571235, 0.45387303294571235, 0.2015511034102755, 0.2015511034102755, 0.2015511034102755, 0.5259729962762788, 0.5259729962762788, 0.5259729962762788, 0.4348193806070312, 0.4348193806070312, 0.4348193806070312, 0.4538415467147361, 0.4538415467147361, 0.4538415467147361, 0.864876181640841, 0.864876181640841, 0.864876181640841, 0.7187826753089872, 0.7187826753089872, 0.7187826753089872, 0.8484788892665652, 0.8484788892665652, 0.8484788892665652, 0.1325050648617917, 0.1325050648617917, 0.1325050648617917, 0.2897711889385428, 0.2897711889385428, 0.2897711889385428, 0.10804563596459105, 0.10804563596459105, 0.10804563596459105, 0.18043106937533027, 0.18043106937533027, 0.18043106937533027, 0.16473547325067317, 0.16473547325067317, 0.16473547325067317, 0.1194549667639323, 0.1194549667639323, 0.1194549667639323, 0.5256844997054075, 0.5256844997054075, 0.5256844997054075, 0.6041025807567193, 0.6041025807567193, 0.6041025807567193, 0.4644105638452898, 0.4644105638452898, 0.4644105638452898, 0.46202358290328827, 0.46202358290328827, 0.46202358290328827, 0.24840969669690782, 0.24840969669690782, 0.24840969669690782, 0.4503545169796592, 0.4503545169796592, 0.4503545169796592, 0.2114800484496595, 0.2114800484496595, 0.2114800484496595, 0.21909045007171535, 0.21909045007171535, 0.21909045007171535, 0.2191694128450279, 0.2191694128450279, 0.2191694128450279, 0.24133432452350667, 0.24133432452350667, 0.24133432452350667, 0.40180393177874507, 0.40180393177874507, 0.40180393177874507, 0.20610246210836736, 0.20610246210836736, 0.20610246210836736, 0.8774240515916215, 0.8774240515916215, 0.8774240515916215, 0.19633642104085203, 0.19633642104085203, 0.19633642104085203, 0.16018288982653417, 0.16018288982653417, 0.16018288982653417, 0.16832747965360628, 0.16832747965360628, 0.16832747965360628, 0.1982823955686166, 0.1982823955686166, 0.1982823955686166, 0.20346176646958025, 0.20346176646958025, 0.20346176646958025, 0.1880812653999755, 0.1880812653999755, 0.1880812653999755, 0.17664869209273215, 0.17664869209273215, 0.17664869209273215, 0.1799978340357975, 0.1799978340357975, 0.1799978340357975, 0.07271338554515405, 0.07271338554515405, 0.07271338554515405, 0.0825328435167425, 0.0825328435167425, 0.0825328435167425, 0.08330620632742303, 0.08330620632742303, 0.08330620632742303]}, "mutation_prompt": null}
{"id": "af38ff41-f8e8-4a04-b561-a6520b297540", "solution": "import numpy as np\n\nclass AdaptiveDEWithTopology:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8  # Reduced for stability\n        self.crossover_rate = 0.7  # Further reduced to focus on local optimization\n        self.initial_temperature = 2.0  # Higher initial temperature for global search\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i))  # Incremental cooling\n        self.cooling_rate = 0.95  # Slow cooling for gradual adaptation\n        self.random_topology_rate = 0.2  # Random topology influence\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 75 == 0:  # Frequency for dynamic mutation\n                    self.mutation_factor = 0.6 + 0.3 * np.random.rand() + self.random_topology_rate * np.cos(evaluations)\n\n                if evaluations % 100 == 0:  # Adaptive mutation with topology adjustment\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 5, replace=False)\n                    x1, x2, x3, x4, x5 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3 + x4 - x5), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDEWithTopology", "description": "Adaptive DE with Randomized Topology and Incremental Cooling for Balanced Exploration and Exploitation.", "configspace": "", "generation": 62, "fitness": 0.3976735415491059, "feedback": "The algorithm AdaptiveDEWithTopology got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "1bd726ae-3c2a-4478-9d1e-998d7a26a65b", "metadata": {"aucs": [0.8779082124846843, 0.8779082124846843, 0.8779082124846843, 0.8888759277007681, 0.8888759277007681, 0.8888759277007681, 0.8910725203610673, 0.8910725203610673, 0.8910725203610673, 0.7777885534289539, 0.7777885534289539, 0.7777885534289539, 0.8220750429087207, 0.8220750429087207, 0.8220750429087207, 0.7889932473727168, 0.7889932473727168, 0.7889932473727168, 0.5146587785698666, 0.5146587785698666, 0.5146587785698666, 0.5085599761193313, 0.5085599761193313, 0.5085599761193313, 0.5973688300949891, 0.5973688300949891, 0.5973688300949891, 0.3687422526812465, 0.3687422526812465, 0.3687422526812465, 0.4777470655792896, 0.4777470655792896, 0.4777470655792896, 0.1441745988054991, 0.1441745988054991, 0.1441745988054991, 0.9802838026408074, 0.9802838026408074, 0.9802838026408074, 0.9671420060055427, 0.9671420060055427, 0.9671420060055427, 0.9816740388489682, 0.9816740388489682, 0.9816740388489682, 0.6030217939173479, 0.6030217939173479, 0.6030217939173479, 0.6178874629805062, 0.6178874629805062, 0.6178874629805062, 0.5982594040260761, 0.5982594040260761, 0.5982594040260761, 0.6993146941129468, 0.6993146941129468, 0.6993146941129468, 0.7989956359306964, 0.7989956359306964, 0.7989956359306964, 0.7930046919223732, 0.7930046919223732, 0.7930046919223732, 0.26397828817328095, 0.26397828817328095, 0.26397828817328095, 0.38508173947282653, 0.38508173947282653, 0.38508173947282653, 0.3473266883998577, 0.3473266883998577, 0.3473266883998577, 0.2032541329292461, 0.2032541329292461, 0.2032541329292461, 0.34938568927012537, 0.34938568927012537, 0.34938568927012537, 0.24589516854718563, 0.24589516854718563, 0.24589516854718563, 0.07683604972484004, 0.07683604972484004, 0.07683604972484004, 0.1416229062630162, 0.1416229062630162, 0.1416229062630162, 0.14017717690843623, 0.14017717690843623, 0.14017717690843623, 0.3204740782865232, 0.3204740782865232, 0.3204740782865232, 0.20433540683465978, 0.20433540683465978, 0.20433540683465978, 0.32139419637364197, 0.32139419637364197, 0.32139419637364197, 0.08746396634437648, 0.08746396634437648, 0.08746396634437648, 0.08754317126262645, 0.08754317126262645, 0.08754317126262645, 0.0549692623091258, 0.0549692623091258, 0.0549692623091258, 0.21331109445020657, 0.21331109445020657, 0.21331109445020657, 0.2743906072052119, 0.2743906072052119, 0.2743906072052119, 0.21236162721492635, 0.21236162721492635, 0.21236162721492635, 0.6495581124092387, 0.6495581124092387, 0.6495581124092387, 0.6191526414261227, 0.6191526414261227, 0.6191526414261227, 0.7039208019533061, 0.7039208019533061, 0.7039208019533061, 0.0882041708778536, 0.0882041708778536, 0.0882041708778536, 0.09576948431691601, 0.09576948431691601, 0.09576948431691601, 0.10388857985521194, 0.10388857985521194, 0.10388857985521194, 0.15431434325507087, 0.15431434325507087, 0.15431434325507087, 0.2087831165368419, 0.2087831165368419, 0.2087831165368419, 0.1922976522381704, 0.1922976522381704, 0.1922976522381704, 0.41228761170137374, 0.41228761170137374, 0.41228761170137374, 0.4009550966831472, 0.4009550966831472, 0.4009550966831472, 0.45932680869161824, 0.45932680869161824, 0.45932680869161824, 0.27779958145256656, 0.27779958145256656, 0.27779958145256656, 0.28278166725768195, 0.28278166725768195, 0.28278166725768195, 0.28634433245958313, 0.28634433245958313, 0.28634433245958313, 0.19115872741127393, 0.19115872741127393, 0.19115872741127393, 0.1847231630246785, 0.1847231630246785, 0.1847231630246785, 0.17882284633495582, 0.17882284633495582, 0.17882284633495582, 0.45538558690921493, 0.45538558690921493, 0.45538558690921493, 0.2029552786631007, 0.2029552786631007, 0.2029552786631007, 0.25573933144238215, 0.25573933144238215, 0.25573933144238215, 0.787222806553244, 0.787222806553244, 0.787222806553244, 0.697069447711334, 0.697069447711334, 0.697069447711334, 0.716872236014577, 0.716872236014577, 0.716872236014577, 0.20637328151222578, 0.20637328151222578, 0.20637328151222578, 0.18821489485046516, 0.18821489485046516, 0.18821489485046516, 0.2004822475274317, 0.2004822475274317, 0.2004822475274317, 0.17825714582674423, 0.17825714582674423, 0.17825714582674423, 0.18128633051194576, 0.18128633051194576, 0.18128633051194576, 0.19827716618674895, 0.19827716618674895, 0.19827716618674895, 0.09419908235547081, 0.09419908235547081, 0.09419908235547081, 0.07499153047079776, 0.07499153047079776, 0.07499153047079776, 0.07773010065181374, 0.07773010065181374, 0.07773010065181374]}, "mutation_prompt": null}
{"id": "58e6b807-8e53-4780-9d4c-d69eb055c8ae", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.95  # Adjusted for more diversity with higher mutation factor\n        self.crossover_rate = 0.80  # Slightly reduced for finer local search\n        self.initial_temperature = 2.0  # Increased for better exploration\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.cos(i))  # Adjusted cooling schedule for smooth transition\n        self.cooling_rate = 0.91  # Slightly slower cooling to allow more exploration\n        self.chaos_factor = 0.4  # Enhanced chaos influence for greater randomness\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Changed frequency for dynamic mutation\n                    self.mutation_factor = 0.6 + 0.3 * np.random.rand() + self.chaos_factor * np.sin(evaluations)\n\n                if evaluations % 100 == 0:  # Altered adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Chaos-Induced Dynamic Mutation and Simulated Annealing-Driven Exploration for Efficient Optimization.", "configspace": "", "generation": 63, "fitness": 0.4405834498491717, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.28.", "error": "", "parent_id": "1bd726ae-3c2a-4478-9d1e-998d7a26a65b", "metadata": {"aucs": [0.8964479029387874, 0.8964479029387874, 0.8964479029387874, 0.9061814824970779, 0.9061814824970779, 0.9061814824970779, 0.9060775809393327, 0.9060775809393327, 0.9060775809393327, 0.81772626720826, 0.81772626720826, 0.81772626720826, 0.8114836516489092, 0.8114836516489092, 0.8114836516489092, 0.8141697878986737, 0.8141697878986737, 0.8141697878986737, 0.477064351367265, 0.477064351367265, 0.477064351367265, 0.370558310642378, 0.370558310642378, 0.370558310642378, 0.5391510684604603, 0.5391510684604603, 0.5391510684604603, 0.148938568738613, 0.148938568738613, 0.148938568738613, 0.1443039508196231, 0.1443039508196231, 0.1443039508196231, 0.08690670605678608, 0.08690670605678608, 0.08690670605678608, 0.9409093197471055, 0.9409093197471055, 0.9409093197471055, 0.9820655648018186, 0.9820655648018186, 0.9820655648018186, 0.9875066087068923, 0.9875066087068923, 0.9875066087068923, 0.6654000807483839, 0.6654000807483839, 0.6654000807483839, 0.6611181709000697, 0.6611181709000697, 0.6611181709000697, 0.7103408553123176, 0.7103408553123176, 0.7103408553123176, 0.818954595421508, 0.818954595421508, 0.818954595421508, 0.8683138836338079, 0.8683138836338079, 0.8683138836338079, 0.49149758731242765, 0.49149758731242765, 0.49149758731242765, 0.41837242581305256, 0.41837242581305256, 0.41837242581305256, 0.5087547750619879, 0.5087547750619879, 0.5087547750619879, 0.5480614848981524, 0.5480614848981524, 0.5480614848981524, 0.5699948746240795, 0.5699948746240795, 0.5699948746240795, 0.530530778557365, 0.530530778557365, 0.530530778557365, 0.47106726193105264, 0.47106726193105264, 0.47106726193105264, 0.29816045172721106, 0.29816045172721106, 0.29816045172721106, 0.35734669746394077, 0.35734669746394077, 0.35734669746394077, 0.41772923378569604, 0.41772923378569604, 0.41772923378569604, 0.24543818620247237, 0.24543818620247237, 0.24543818620247237, 0.479511748873207, 0.479511748873207, 0.479511748873207, 0.6286915888253944, 0.6286915888253944, 0.6286915888253944, 0.06381328102377648, 0.06381328102377648, 0.06381328102377648, 0.33038909880655065, 0.33038909880655065, 0.33038909880655065, 0.1606498405097191, 0.1606498405097191, 0.1606498405097191, 0.37056257447581753, 0.37056257447581753, 0.37056257447581753, 0.42615496682664633, 0.42615496682664633, 0.42615496682664633, 0.3092844501789326, 0.3092844501789326, 0.3092844501789326, 0.8026258938156173, 0.8026258938156173, 0.8026258938156173, 0.7926578310597733, 0.7926578310597733, 0.7926578310597733, 0.7785044463316887, 0.7785044463316887, 0.7785044463316887, 0.11254608685553436, 0.11254608685553436, 0.11254608685553436, 0.11029818520951262, 0.11029818520951262, 0.11029818520951262, 0.14202721181734046, 0.14202721181734046, 0.14202721181734046, 0.31977815804026655, 0.31977815804026655, 0.31977815804026655, 0.24467929870089167, 0.24467929870089167, 0.24467929870089167, 0.16628222215092703, 0.16628222215092703, 0.16628222215092703, 0.529392690596221, 0.529392690596221, 0.529392690596221, 0.6044495209005445, 0.6044495209005445, 0.6044495209005445, 0.5926705559661228, 0.5926705559661228, 0.5926705559661228, 0.25504690488445847, 0.25504690488445847, 0.25504690488445847, 0.4468995943195896, 0.4468995943195896, 0.4468995943195896, 0.3936269016102587, 0.3936269016102587, 0.3936269016102587, 0.17624417286621885, 0.17624417286621885, 0.17624417286621885, 0.18994727086115493, 0.18994727086115493, 0.18994727086115493, 0.1996472574676238, 0.1996472574676238, 0.1996472574676238, 0.6980111712537561, 0.6980111712537561, 0.6980111712537561, 0.24067907238166786, 0.24067907238166786, 0.24067907238166786, 0.22950785341152868, 0.22950785341152868, 0.22950785341152868, 0.8647845291943476, 0.8647845291943476, 0.8647845291943476, 0.1634761882151914, 0.1634761882151914, 0.1634761882151914, 0.16724303344749203, 0.16724303344749203, 0.16724303344749203, 0.16801509838018214, 0.16801509838018214, 0.16801509838018214, 0.20322326539005497, 0.20322326539005497, 0.20322326539005497, 0.16811770011871408, 0.16811770011871408, 0.16811770011871408, 0.16506120758978882, 0.16506120758978882, 0.16506120758978882, 0.1819847076453336, 0.1819847076453336, 0.1819847076453336, 0.19509646790040747, 0.19509646790040747, 0.19509646790040747, 0.0696412111368292, 0.0696412111368292, 0.0696412111368292, 0.07723613844873434, 0.07723613844873434, 0.07723613844873434, 0.09297652578703985, 0.09297652578703985, 0.09297652578703985]}, "mutation_prompt": null}
{"id": "09c75b29-389d-409f-9dbd-56e3114fca89", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.95  # Slightly increased for more diversity\n        self.crossover_rate = 0.80  # Reduced for more exploration\n        self.initial_temperature = 1.7  # Increased for better exploration\n        self.cooling_schedule = lambda t, i: t * (0.78 + 0.18 * np.cos(i))  # Adjusted cooling schedule\n        self.cooling_rate = 0.91  # Slower cooling for gradual refinement\n        self.chaos_factor = 0.35  # Enhanced chaos influence\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Dynamic mutation frequency\n                    self.mutation_factor = 0.55 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations)\n\n                if evaluations % 85 == 0:  # Adjusted adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive Differential Evolution with Dynamic Chaos and Temperature-Based Strategies for Effective Exploration-Exploitation Balance.", "configspace": "", "generation": 64, "fitness": 0.4453095651619305, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.27.", "error": "", "parent_id": "1bd726ae-3c2a-4478-9d1e-998d7a26a65b", "metadata": {"aucs": [0.9049817758341873, 0.9049817758341873, 0.9049817758341873, 0.890399280528534, 0.890399280528534, 0.890399280528534, 0.8928802977445103, 0.8928802977445103, 0.8928802977445103, 0.8015742305443141, 0.8015742305443141, 0.8015742305443141, 0.7997288078291485, 0.7997288078291485, 0.7997288078291485, 0.8128774254893083, 0.8128774254893083, 0.8128774254893083, 0.5151105264413547, 0.5151105264413547, 0.5151105264413547, 0.512851376072373, 0.512851376072373, 0.512851376072373, 0.5160792061780992, 0.5160792061780992, 0.5160792061780992, 0.3525990818981086, 0.3525990818981086, 0.3525990818981086, 0.16032097600330675, 0.16032097600330675, 0.16032097600330675, 0.16717513233628956, 0.16717513233628956, 0.16717513233628956, 0.9730111638187684, 0.9730111638187684, 0.9730111638187684, 0.9683288040625042, 0.9683288040625042, 0.9683288040625042, 0.9832629830923616, 0.9832629830923616, 0.9832629830923616, 0.6500000978383689, 0.6500000978383689, 0.6500000978383689, 0.6800867164814475, 0.6800867164814475, 0.6800867164814475, 0.08805268499020547, 0.08805268499020547, 0.08805268499020547, 0.8179139357479533, 0.8179139357479533, 0.8179139357479533, 0.8381913915526807, 0.8381913915526807, 0.8381913915526807, 0.8150506094894199, 0.8150506094894199, 0.8150506094894199, 0.5025351039002014, 0.5025351039002014, 0.5025351039002014, 0.4793636020443025, 0.4793636020443025, 0.4793636020443025, 0.5308923074308993, 0.5308923074308993, 0.5308923074308993, 0.5601742554974738, 0.5601742554974738, 0.5601742554974738, 0.453867904193039, 0.453867904193039, 0.453867904193039, 0.41331713762125966, 0.41331713762125966, 0.41331713762125966, 0.40292417788513624, 0.40292417788513624, 0.40292417788513624, 0.3116017220059262, 0.3116017220059262, 0.3116017220059262, 0.41010772896595293, 0.41010772896595293, 0.41010772896595293, 0.5238313188048522, 0.5238313188048522, 0.5238313188048522, 0.43075949630833243, 0.43075949630833243, 0.43075949630833243, 0.5711070277010233, 0.5711070277010233, 0.5711070277010233, 0.12334423642811676, 0.12334423642811676, 0.12334423642811676, 0.33007118586006945, 0.33007118586006945, 0.33007118586006945, 0.24688519662999364, 0.24688519662999364, 0.24688519662999364, 0.3726979249913711, 0.3726979249913711, 0.3726979249913711, 0.3960082720897695, 0.3960082720897695, 0.3960082720897695, 0.3490693453204954, 0.3490693453204954, 0.3490693453204954, 0.78003283004486, 0.78003283004486, 0.78003283004486, 0.7767259653137591, 0.7767259653137591, 0.7767259653137591, 0.7765520151156021, 0.7765520151156021, 0.7765520151156021, 0.14860993641282472, 0.14860993641282472, 0.14860993641282472, 0.10203009636074145, 0.10203009636074145, 0.10203009636074145, 0.09987553062357835, 0.09987553062357835, 0.09987553062357835, 0.14025742744735958, 0.14025742744735958, 0.14025742744735958, 0.14734129144013808, 0.14734129144013808, 0.14734129144013808, 0.5397075413200474, 0.5397075413200474, 0.5397075413200474, 0.532683801989698, 0.532683801989698, 0.532683801989698, 0.467030036961012, 0.467030036961012, 0.467030036961012, 0.5730517373355775, 0.5730517373355775, 0.5730517373355775, 0.39621045252385334, 0.39621045252385334, 0.39621045252385334, 0.4039185269645965, 0.4039185269645965, 0.4039185269645965, 0.38041927419585597, 0.38041927419585597, 0.38041927419585597, 0.19536512617202972, 0.19536512617202972, 0.19536512617202972, 0.1945208724910018, 0.1945208724910018, 0.1945208724910018, 0.18907708185444572, 0.18907708185444572, 0.18907708185444572, 0.2206529524433064, 0.2206529524433064, 0.2206529524433064, 0.43300699895226735, 0.43300699895226735, 0.43300699895226735, 0.5187677484120852, 0.5187677484120852, 0.5187677484120852, 0.8320021323147967, 0.8320021323147967, 0.8320021323147967, 0.16403829542016468, 0.16403829542016468, 0.16403829542016468, 0.16139408879528327, 0.16139408879528327, 0.16139408879528327, 0.15339126488485122, 0.15339126488485122, 0.15339126488485122, 0.20468391599631142, 0.20468391599631142, 0.20468391599631142, 0.20551334412950473, 0.20551334412950473, 0.20551334412950473, 0.1728460193644734, 0.1728460193644734, 0.1728460193644734, 0.16552861494809235, 0.16552861494809235, 0.16552861494809235, 0.18132463325727144, 0.18132463325727144, 0.18132463325727144, 0.08738430993023671, 0.08738430993023671, 0.08738430993023671, 0.08440435575129301, 0.08440435575129301, 0.08440435575129301, 0.08490602484061927, 0.08490602484061927, 0.08490602484061927]}, "mutation_prompt": null}
{"id": "c04199a1-bc22-498c-b857-d49a82499c50", "solution": "import numpy as np\n\nclass AdvancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8 + 0.2 * np.random.rand()  # Self-adaptive mutation factor\n        self.crossover_rate = 0.9  # Improved crossover rate for better exploration\n        self.initial_temperature = 2.0  # Increased for broader search at start\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i / 5))  # Stochastic cooling schedule\n        self.cooling_rate = 0.92  # Adjusted cooling rate\n        self.chaos_factor = 0.35  # Altered chaos influence for diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 55 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.6 + 0.3 * np.random.rand() + self.chaos_factor * np.cos(evaluations / 10)\n\n                if evaluations % 85 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdvancedAdaptiveDE", "description": "Advanced Adaptive DE with Stochastic Temperature Control and Self-Adaptive Chaos-Induced Dynamic Mutation for Efficient Search.", "configspace": "", "generation": 65, "fitness": 0.49492974120720873, "feedback": "The algorithm AdvancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.29.", "error": "", "parent_id": "1bd726ae-3c2a-4478-9d1e-998d7a26a65b", "metadata": {"aucs": [0.9025800775981403, 0.8855841576926933, 0.8769158567418172, 0.8943573832283054, 0.8932248550282035, 0.8959430482197105, 0.870300634490522, 0.8881824682571544, 0.8964680036287952, 0.8119085497146807, 0.7941830852686032, 0.8037049347866595, 0.8281358155660998, 0.8050354179115028, 0.7807871611057007, 0.8282579022755829, 0.812044454188801, 0.7982775133460376, 0.37993995780247325, 0.1697009871730113, 0.12197160352125358, 0.2913330316046062, 0.15748154722409768, 0.19410658253896929, 0.35832809311456837, 0.15004907295559455, 0.33331692402531865, 0.15868635314635815, 0.47717027388773503, 0.3996330234453648, 0.1417173182676259, 0.2913456200300877, 0.1449216924507436, 0.11455391476321453, 0.14332020548672353, 0.13648983236614654, 0.9598634458081092, 0.9632912132831966, 0.9539551728249802, 0.9827500409665637, 0.9745352562158883, 0.9745805317895424, 0.9531692030848967, 0.9701550170520921, 0.9611400000123838, 0.687855826921322, 0.6965925607371453, 0.7048127023489771, 0.6888907996735312, 0.7015780159919247, 0.7046420729346901, 0.7603945460414809, 0.6773316940514542, 0.7141442319858031, 0.8109882033795068, 0.8495746367808412, 0.8392984480487149, 0.9045564549122712, 0.8752784010443792, 0.8720898787052102, 0.8397666420222333, 0.8695530637925136, 0.8503524223575436, 0.6053348455271972, 0.4101094155533207, 0.6993206751727465, 0.5100247146737631, 0.5386039100679434, 0.6119757813816473, 0.7076266853457487, 0.6080606201851892, 0.5213824600742434, 0.016539969346138106, 0.010134515115051368, 0.010078832088155965, 0.5650893008805042, 0.6784984576275459, 0.5854736381587122, 0.6326076218624384, 0.5479950752082288, 0.508327613899602, 0.6799869883819805, 0.6205875239630115, 0.3307387907032545, 0.6724144051660885, 0.6799397619173425, 0.6620642589862404, 0.6445075038864293, 0.6648113660452842, 0.6704891847314336, 0.5541596689702495, 0.38032744659041806, 0.7501106909295574, 0.15102614800271674, 0.7106461917625163, 0.7227117769160545, 0.7273988022925958, 0.7324133338119397, 0.7104525106341177, 0.1938217813617733, 9.999999999998899e-05, 9.999999999998899e-05, 0.2133406059116496, 0.5917776310952377, 0.4508905121876038, 0.31828828487987204, 0.24466925923349114, 0.2357544451139072, 0.4992772535706642, 0.47708455822854234, 0.4219258194269849, 0.5820810562579877, 0.5966543466495959, 0.635685779567681, 0.6231293368698088, 0.41732304279093846, 0.5511500375963607, 0.8279157759924782, 0.841965320780289, 0.8059377829107969, 0.8608578629586991, 0.8600300459584983, 0.8621044065084924, 0.8041523364746466, 0.8528156476684334, 0.7283907334180653, 0.12460809194590305, 0.0971348776957146, 0.12427225022131383, 0.12271204758826681, 0.12449348590634968, 0.3250062687905977, 0.12536259682193973, 0.1344015610958713, 0.10548915660341174, 0.18339956502300803, 0.13901501970722496, 0.6373992926658281, 0.15674818511477973, 0.22332453890340498, 0.2658580089707546, 0.1868345046502069, 0.3612186534582591, 0.2951178403620185, 0.6420715164525979, 0.6112814622635974, 0.6382136456685963, 0.5733129083347722, 0.6077050731816187, 0.555640346837547, 0.641991503760803, 0.6151024104410993, 0.6018882574784572, 0.3924784892702684, 0.5272904856586456, 0.511656157792223, 0.41991268526400294, 0.35902303087070164, 0.5182163649036298, 0.46769083438436954, 0.4970455550271681, 0.48720918402186775, 0.1970123066653433, 0.1754109428988706, 0.20218955428446794, 0.17127368147846467, 0.24424127108879023, 0.1846117926773847, 0.1898650040741131, 0.19390194113728043, 0.18336645585210876, 0.5125321339877273, 0.6882462068695927, 0.3973485952729092, 0.20478588487511562, 0.24199127126807984, 0.7785148408493197, 0.6476871288892085, 0.23823871713657796, 0.6086866752838826, 0.9104564744876764, 0.847904563624782, 0.8402970650044772, 0.8572730728207536, 0.8600885156325158, 0.176974868165635, 0.1827225959114155, 0.1530844243187678, 0.20899143828308198, 0.208254344090826, 0.16786944268346848, 0.16107488133635184, 0.2049512608037073, 0.7608771053616408, 0.8349190543752535, 0.8703685872160727, 0.15437436135955795, 0.15404467505868236, 0.18459380418405225, 0.18544121324795626, 0.16282299968466452, 0.17704307319148194, 0.15980718660889326, 0.17441057975191177, 0.1975596730477015, 0.170654629501942, 0.18110159988997154, 0.0892646823389397, 0.08895787946902078, 0.08275196072600322, 0.08227690934407839, 0.08254940782797471, 0.09305613621478281, 0.08737978673299551, 0.10882373511328802, 0.08147986672871155]}, "mutation_prompt": null}
{"id": "7f197443-187e-4a27-989a-7c41ccaa5843", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Slightly altered mutation factor\n        self.crossover_rate = 0.9\n        self.initial_temperature = 2.0\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.cos(i / 10))  # Modified stochastic cooling\n        self.cooling_rate = 0.95  # Slightly slower cooling\n        self.chaos_factor = 0.4  # Increased chaos influence\n        self.adaptive_pop_size = lambda evals: max(5, int(20 - (15 * evals / self.budget)))  # Dynamic population resizing\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            self.pop_size = self.adaptive_pop_size(evaluations)\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 15)\n\n                if evaluations % 90 == 0:\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x1 - x2), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x3 - x2), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Dynamic Population Resizing and Adaptive Mutation for Improved Convergence.", "configspace": "", "generation": 66, "fitness": 0.41815809003290694, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.29.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.9068237927257078, 0.9142948224806596, 0.9156421036298947, 0.9091940752717002, 0.9078401408965847, 0.9159529001706626, 0.910025092656695, 0.9149326530850106, 0.9072357981452208, 0.8534333512756593, 0.8437487503760297, 0.8484242499150874, 0.8269775602976114, 0.8257596485084918, 0.8315214918379051, 0.8428719868889885, 0.8445379885193509, 0.805055230344881, 0.17384437633427408, 0.6104858522583914, 0.7235665006890308, 0.1701966850740413, 0.13975625766378652, 0.5103458414290692, 0.16232604329750155, 0.6539558970912376, 0.6550238370550361, 0.12188138650941727, 0.14177142229718775, 0.17246564944178788, 0.16864365869153786, 0.13435309674769325, 0.13766429459307294, 0.17420402012608704, 0.17626768903751344, 0.17878923402479452, 0.93455974841629, 0.9835181322780266, 0.983533095524963, 0.9792251562850267, 0.965924035244134, 0.9634276792600582, 0.9428068586943229, 0.9535384498616206, 0.9671983186873758, 0.7508370116648645, 0.7465755772163745, 0.7335995731151033, 0.6523439858056099, 0.7659807631827303, 0.7399903622166358, 0.5475029286819479, 0.6348386070564849, 0.6019272125145773, 0.8761239510005412, 0.8735730167202874, 0.38305970548172164, 0.915888870943812, 0.20862881225882113, 0.8134448189947324, 0.8748511716007463, 0.899662880292049, 0.8514196128789229, 0.17262876758609158, 0.5359614390977452, 0.36243575159968977, 0.4713962099482032, 0.2448351209402052, 0.17662423509577785, 0.36528668633518535, 0.13494039629386678, 0.26332132116445395, 0.21471484747701475, 0.4777394209609813, 0.13570242588831916, 0.3948135613383641, 0.2943923179402298, 0.13369994584946832, 0.35430830312206885, 0.1960749893366155, 0.19663564854016435, 0.23496439494042942, 0.3526947790210576, 0.39936220382950005, 0.3136677348309823, 0.28314423964899604, 0.083348052550272, 0.48131889320626164, 0.09787959896311005, 0.1845840900895056, 0.38746090582959203, 0.2632164995397477, 0.260851943535338, 0.4799767447580695, 0.36842801422390714, 0.3366853787502506, 0.7995519944095049, 0.4291000425040029, 0.35326779440032285, 0.3134658568600852, 0.15401506433884915, 0.09638696384187884, 0.16563396952152254, 0.27364729665462817, 0.18723785610043453, 0.23331789833693606, 0.17247946101743383, 0.3217328922291949, 0.21517745136305955, 0.5087234602594114, 0.41772042849614666, 0.4089274432834352, 0.34097840501345, 0.3082692966344187, 0.3219904974167851, 0.26738341637829577, 0.4118249142007946, 0.6798482243140893, 0.6702348071823446, 0.726876158070968, 0.7106792205500594, 0.6172350707711904, 0.5605889035468563, 0.6627923706922414, 0.7071076822188418, 0.7090662054236845, 0.14437025274147075, 0.1232789072982885, 0.12867515271142926, 0.12693194593100454, 0.1324781197872975, 0.14686938994365573, 0.12233898480579775, 0.16674654782090437, 0.09786941084431255, 0.22572341703897048, 0.48371188905136486, 0.20789982055048628, 0.16460286009709302, 0.23236777438945988, 0.13596133203430183, 0.19810111288923093, 0.3297905507379262, 0.1491092201796499, 0.7014397023968486, 0.5774419787339131, 0.26129260581728875, 0.5478671877859915, 0.722057000133306, 0.6702535296152659, 0.6018756869760289, 0.4811016483325725, 0.749735222013558, 0.3703296242581834, 0.27168976167576353, 0.45419712602299234, 0.4757686227249851, 0.43684717313216437, 0.32591911650747085, 0.44752106237925204, 0.42667572634031203, 0.6213828827118015, 0.20047276055171404, 0.1965202621715546, 0.20520896076717154, 0.199298932075474, 0.19788512976494366, 0.20711201672813018, 0.19848361892143163, 0.20668557689238176, 0.20753345724402172, 0.22292098800423787, 0.24460781383650543, 0.24795183203275517, 0.21776680884373067, 0.20510285676173334, 0.2231053429863019, 0.24574714917994167, 0.1950691053140241, 0.7496800108607504, 0.17205505874464178, 0.8701324895880407, 0.8699870277339405, 0.8624913351958415, 0.18749149349125582, 0.15686697921187476, 0.16725531818484485, 0.1863136386925095, 0.18644873562271136, 0.16775579655960426, 0.16799067778495502, 0.1677444227033542, 0.9074111443349893, 0.15449510334369843, 0.15509223007139006, 0.21113959597699905, 0.21185182796542357, 0.21204062592756723, 0.20338950841324155, 0.21349166915436357, 0.17689568091641616, 0.17416863560495222, 0.1822884752612871, 0.16970608652736918, 0.19280956904484836, 0.19121362223910032, 0.19638406552073706, 0.09281512296172745, 0.09867264161582368, 0.10646429991080697, 0.0932759808739313, 0.12037155669573929, 0.099549602844889, 0.09082109500682167, 0.10381781789861633, 0.09792392260872407]}, "mutation_prompt": null}
{"id": "b5884851-7f45-412a-a489-923935bfeec1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.85 + 0.15 * np.random.rand()  # Slightly increased mutation factor variability\n        self.crossover_rate = 0.88  # Adjusted crossover rate for exploration-exploitation balance\n        self.initial_temperature = 2.5  # Higher starting temperature for more global search\n        self.cooling_schedule = lambda t, i: t * (0.88 + 0.08 * np.cos(i / 5))  # Modified cooling schedule with cosine\n        self.cooling_rate = 0.93  # Slightly increased cooling rate\n        self.chaos_factor = 0.4  # Enhanced chaos influence for maintaining diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Refined frequency for dynamic mutation\n                    self.mutation_factor = 0.7 + 0.25 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 10)\n\n                if evaluations % 80 == 0:  # Improved adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Differential Evolution with Adaptive Mechanisms and Dynamic Chaos-Driven Exploration for Robust Optimization.", "configspace": "", "generation": 67, "fitness": 0.46406375153280144, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8899599649103556, 0.8578980405879966, 0.880855794541201, 0.8893183733061798, 0.8912808323938999, 0.8832570738794504, 0.8718725501370818, 0.8712567488920597, 0.8840406208110785, 0.7870922985245061, 0.806219600025803, 0.800248020607405, 0.7624414696815023, 0.7698499591617014, 0.7584081952360174, 0.7653834428124429, 0.765838583745103, 0.77136981242431, 0.36284190818680584, 0.1255816190940895, 0.21157592261479807, 0.130015405224572, 0.16028294063071313, 0.5143056845345577, 0.4619138736568288, 0.18035446534432598, 0.15237167664366424, 0.12678118012669126, 0.19381336376058722, 0.12796098196896677, 0.11610244537960968, 0.13900953284358475, 0.11725005241016839, 0.12830053628654003, 0.17839261176261045, 0.1187214083547602, 0.9790137501110038, 0.9703253508804683, 0.9588571923563447, 0.985603913888165, 0.9855651590980076, 0.9855664938659007, 0.9449494894275118, 0.96530285485772, 0.9345666890406686, 0.679000821542364, 0.6908474452344138, 0.6301890692956991, 0.681956379907577, 0.6683565984763595, 0.6828205622980114, 0.0515529373367013, 0.05165767649842601, 0.05153099230765512, 0.8138818043943503, 0.834921124092844, 0.8266277653592933, 0.8569029155767207, 0.8257633327068681, 0.8393308189556434, 0.8581121393694756, 0.8266988790060835, 0.8686134753107904, 0.4697213161011826, 0.6200098580314521, 0.6010452181841205, 0.5731707068370596, 0.5527792096001278, 0.60179473882193, 0.6057798881277334, 0.658122121734121, 0.13020769573368085, 0.4628560454708518, 0.6831329321022228, 0.43147971631107607, 0.49282098575582267, 0.4244690422908468, 0.488305734180417, 0.5664980415107099, 0.47149305349246784, 0.353964342228699, 0.6004731938977796, 0.563654329944284, 0.4152798986129824, 0.5809255343928531, 0.589622044235343, 0.6434232733665859, 0.55849507078525, 0.6056820773511175, 0.6175557655637662, 0.6653591927235545, 0.6474709156326419, 0.6837730100725679, 0.6263638868116038, 0.5980752723844385, 0.6133017247356101, 0.6642033682660531, 0.7081470292756509, 0.6678664761012789, 0.23579983724175857, 0.4182372132500288, 0.12546645641525667, 0.24727390776130964, 0.5282910747919761, 0.23419744595202396, 0.18759790692953449, 0.32490372910730925, 0.29446326087096697, 0.5037405622479556, 0.46993941470570855, 0.48201528457704057, 0.47946381134158333, 0.4800870620413503, 0.4955082392638568, 0.5206148954877536, 0.4650908304991177, 0.4490702974859174, 0.8366397327293753, 0.7952754751855751, 0.8157823395700308, 0.7964116340750814, 0.8332986426863302, 0.8049366812204639, 0.7852692869092215, 0.7858888993841954, 0.8002659741982099, 0.0962620411543279, 0.1140432868712089, 0.10470863097487071, 0.14101973662552358, 0.3575862386599614, 0.11785121054700398, 0.1057072884735688, 0.3620715047577845, 0.09025980778449672, 0.15129436227387782, 0.19208985825456404, 0.14428797864559761, 0.15193581344642426, 0.18424292321339386, 0.3594580466087297, 0.18307508546150686, 0.2036154199992739, 0.24406530255072933, 0.4516698777723708, 0.5127010618740763, 0.5209886277554228, 0.4639245140595194, 0.4929790237678532, 0.5274292209752858, 0.5660536864454966, 0.5316694827701532, 0.5599275509042465, 0.4119624526907617, 0.4526543201634098, 0.3740755342055483, 0.3846615500449486, 0.3560315896007983, 0.4006968692955647, 0.3960866146722911, 0.46113382809604886, 0.4281433247218973, 0.1851405636804927, 0.1814206254446935, 0.21142866650836944, 0.19129630248739438, 0.1958469020755622, 0.1849632122396958, 0.20158734789163535, 0.19147279329066147, 0.19133380232613195, 0.1973300493326655, 0.4014091520523315, 0.22570117245099286, 0.2322088639823311, 0.3183844639314247, 0.4757103069981504, 0.21448126056097072, 0.6872945842176216, 0.23851867687497608, 0.16413286158719997, 0.813088091339786, 0.8401734390091595, 0.17262571824632666, 0.16563407943864128, 0.16351269124619305, 0.18205808879025343, 0.16202651001312973, 0.7080048562351811, 0.16864097988514082, 0.21054372671133392, 0.21209569852744736, 0.7800981458172068, 0.7451681826367781, 0.775731986092948, 0.1274057365622503, 0.8825399124675437, 0.8619335704964233, 0.20739168858969337, 0.19285050497537282, 0.18970009609811622, 0.17310897974989825, 0.18474604068408618, 0.19233063932144312, 0.17224602484387452, 0.17384085214567735, 0.20245409183287943, 0.0898308476544869, 0.09072198626940076, 0.07349892129519542, 0.09474100095327853, 0.0793400156694073, 0.07788807983868995, 0.0891541476636869, 0.08138925061204749, 0.08169524702645359]}, "mutation_prompt": null}
{"id": "97d66cd9-cea6-46bd-ba3b-39bf04913930", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Slightly increased population size for diversity\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Self-adaptive with a broader range\n        self.crossover_rate = 0.95  # Higher crossover rate for more frequent mixing\n        self.initial_temperature = 1.5  # Moderate initial temperature\n        self.cooling_schedule = lambda t, i: t / (1 + 0.05 * i)  # Nonlinear cooling schedule\n        self.cooling_rate = 0.9  # Enhanced cooling rate\n        self.chaos_factor = 0.4  # Increased chaos influence for more randomness\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # More frequent dynamic mutation adjustment\n                    self.mutation_factor = 0.5 + 0.35 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 15)\n\n                if evaluations % 75 == 0:  # Adjusted adaptive mutation condition frequency\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Nonlinear Dynamic Cooling and Chaotic Perturbation for Robust Exploration and Exploitation.", "configspace": "", "generation": 68, "fitness": 0.47016451040431373, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.29.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.898698414872287, 0.8827069255222832, 0.8959789496886298, 0.885311226486347, 0.8893727769996427, 0.8676830267481306, 0.8858147105513728, 0.886725419075539, 0.8797249655894057, 0.7744698342394339, 0.8166868946395901, 0.7894254286061614, 0.7845320744902952, 0.7635735903574672, 0.8217252672674269, 0.7149330382191422, 0.6969512716251873, 0.789553104813578, 0.1466259608372722, 0.5211677953114704, 0.11752079800408044, 0.17166148094731948, 0.14240003076599772, 0.6863603418123811, 0.1758949903706316, 0.16656465893746009, 0.14455209583393147, 0.2308404910490086, 0.14125482802092282, 0.1443190792673058, 0.4451804333874516, 0.48991465049352734, 0.1440325763469782, 0.11520712848787551, 0.13314732292845088, 0.1631537416124358, 0.9035210945510417, 0.9771293375949233, 0.9770896546737695, 0.9633072366386626, 0.9233106200414457, 0.9322019226965673, 0.9285509676371427, 0.9580336446376846, 0.9323876258829367, 0.6686247687210055, 0.6559321325744227, 0.7124816585072327, 0.6273545020778983, 0.6974719925152397, 0.7161975595786644, 0.6692677289732605, 0.6781020900510522, 0.7418839415601888, 0.8825092611351552, 0.8800138394826114, 0.9062824728302488, 0.8910876842883392, 0.727683943284327, 0.8651135403156262, 0.8999303950206868, 0.8942684892373617, 0.8695194685952148, 0.6347756341049696, 0.7250085576751029, 0.3659928705999409, 0.6994519189271353, 0.6473031471770423, 0.7015310083969383, 0.13349072107020388, 0.47987130069899087, 0.5002989050708115, 0.7101968109514609, 0.47705817173789133, 0.40647776336394803, 0.5787541999788104, 0.4755680668913923, 0.48793157193318715, 0.4643897201544934, 0.4836942251900124, 0.4650049975795304, 0.12893193513712176, 0.4998313774485148, 0.5726094366432706, 0.35783626186725515, 0.5939349091577795, 0.3327462836850055, 0.2213318592402862, 0.5452666642498288, 0.4788100178114796, 0.7790867861816912, 0.7089993635235502, 0.7653200352051573, 0.1930439959365563, 0.6026126250725241, 0.1911653654436648, 0.7918839708744813, 0.7836756753861619, 0.7452967082360862, 0.12181648826625335, 0.13594315531337087, 0.23298369134652763, 0.3683299102812695, 0.21611152837581982, 0.3175235296549257, 0.11939114208701762, 0.2388556055265394, 0.33356023851123684, 0.45826338682971224, 0.43862757308402855, 0.42535947122882667, 0.6446557250212421, 0.45211683541035974, 0.6463521339007221, 0.6065365108212684, 0.3835020556678074, 0.5181042366647579, 0.8513038444563578, 0.8726518071470251, 0.8690204150595232, 0.8561361029749799, 0.723895042672051, 0.8149124481920254, 0.8063789301612287, 0.8427756789607826, 0.7879136183600449, 0.14031783947236998, 0.141267432045738, 0.13773788558315647, 0.1367343768590017, 0.1016809371334284, 0.12806366978222306, 0.14660329506256953, 0.13513782451908396, 0.1556814648115864, 0.28514399439255445, 0.22808240785095768, 0.16302369755965052, 0.1260853231982324, 0.1435495548694674, 0.11647245265821582, 0.24785122849074337, 0.29329887742348704, 0.18221409671390743, 0.5222372874742673, 0.6565480098601508, 0.6458669818325911, 0.527747784504725, 0.6416365079362197, 0.5611757131033956, 0.6702952267086542, 0.5840322539885645, 0.49733732570045996, 0.5122706749589123, 0.4088011261891673, 0.2652716557617062, 0.43915504120168225, 0.484350407488898, 0.40179359611202137, 0.48810958516160996, 0.5864627774357054, 0.6421920241088676, 0.21244377045031004, 0.22337637892680318, 0.18432292665182592, 0.19596343644699787, 0.2242693359717277, 0.22667692320792732, 0.19352849496108793, 0.21799602491194714, 0.19260839523123852, 0.2482142233484399, 0.22902195959096883, 0.21887471299940742, 0.6938500522929467, 0.20204230236100462, 0.20343367421765657, 0.7386099366039542, 0.19405779416332247, 0.24580741040956988, 0.872549640815339, 0.866805255370128, 0.1545822981772571, 0.2038628110477294, 0.1944499932261493, 0.1671701293610226, 0.8295622717484534, 0.15746742820424675, 0.8510331709268552, 0.20823988983113095, 0.9026825051064594, 0.1679257012849925, 0.20899427943651372, 0.16735149665170534, 0.1674070279299662, 0.15556050144733014, 0.81962579584391, 0.11254235567234516, 0.19332668166477884, 0.18699080959762204, 0.17451515293835163, 0.20858467820159, 0.1848038534139531, 0.17757542466703746, 0.1994556278343239, 0.18155887787447644, 0.1886213750275898, 0.0871274349471518, 0.07757045048791189, 0.08629555396554411, 0.08000922665530819, 0.10008034500296237, 0.08462376605979804, 0.08454110465768461, 0.08512802657410157, 0.08245834909182681]}, "mutation_prompt": null}
{"id": "730c3a98-a5ad-4ba2-8a1a-772c6e9520de", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Increased population size for better diversity\n        self.mutation_factor = 0.7 + 0.25 * np.random.rand()  # Slightly adjusted mutation factor\n        self.crossover_rate = 0.85  # Adjusted crossover rate for exploration\n        self.initial_temperature = 2.5  # Higher starting temperature for global exploration\n        self.cooling_schedule = lambda t, i: t * (0.8 + 0.2 * np.sin(i / 6))  # Refined stochastic cooling\n        self.cooling_rate = 0.90  # Slightly faster cooling rate\n        self.chaos_factor = 0.3  # Modified chaos influence for more control\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Changed frequency for better mutation adaptation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 12)\n\n                if evaluations % 90 == 0:  # Adjusted adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Stochastic Elements and Dynamic Selection for Improved Convergence Efficiency.", "configspace": "", "generation": 69, "fitness": 0.445808660872342, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8749379319502217, 0.8728916555587786, 0.8742079160163281, 0.8879832366637669, 0.8706965847762641, 0.8666085987005491, 0.8822341918707206, 0.8586978243502719, 0.8628067190229842, 0.7795980604203153, 0.7803841943543155, 0.7790348183213505, 0.7889525208899351, 0.768528435008417, 0.7707392380745234, 0.7897686584551233, 0.7692952687335473, 0.7700735329890163, 0.38379124973424095, 0.24464804377445082, 0.5199500847445492, 0.44516551755794787, 0.2874799632891615, 0.4433772896106226, 0.1494594589539462, 0.36706158941490963, 0.18024183684504258, 0.1364261670320186, 0.15724773960224325, 0.11502370582710686, 0.35281427902897544, 0.17763145428922889, 0.1674757850738069, 0.1433091574372416, 0.12457380322111822, 0.14808555664313894, 0.9608494038415321, 0.9575883732368156, 0.9415255129621644, 0.976075921630433, 0.9760620132370879, 0.9760726232045562, 0.9274873349945014, 0.9209192656701637, 0.9573683134304236, 0.6922895897360328, 0.6653544479767395, 0.6236432094272375, 0.6609523415869294, 0.6476557649687604, 0.6996150007545526, 0.6920230807609338, 0.708658082570836, 0.6687798682709342, 0.7957476731243902, 0.8179435847415216, 0.799364576374478, 0.8379670964356154, 0.8171487726341837, 0.8410706924835106, 0.816624067955326, 0.8117079022006795, 0.839167336038617, 0.47472647387796985, 0.561787701292485, 0.43675795246965354, 0.47093605098103264, 0.39076664576889486, 0.5343737873158216, 0.5577551333189763, 0.42794159010201416, 0.47895087405838765, 0.4143793295530639, 0.3402207564940871, 0.022134724845889298, 0.416186038363492, 0.5135717488537017, 0.47695885122558135, 0.38257410730628905, 0.5389571160285658, 0.3999051281545011, 0.49611472118726674, 0.5164957275939895, 0.49974735791600566, 0.47954493249339303, 0.4802135681524735, 0.48982066656744183, 0.5658692316628773, 0.5257980525539927, 0.5355454757842204, 0.6037286216030022, 0.5727708453732525, 0.6310587308900008, 0.5643415111779129, 0.6023612677795089, 0.5953792220725853, 0.605038163232198, 0.606836724832212, 0.5911790417581423, 0.1844886849704751, 0.1868762284962382, 0.21932517129939966, 0.3710987797880061, 0.14023644392141688, 0.37103474522614055, 0.17149865973135892, 0.10486090924250879, 0.29883854928345777, 0.3717159589280231, 0.3610595715237097, 0.3985730855282902, 0.4484671122579681, 0.4397258985226241, 0.4701369887000083, 0.36076332570839453, 0.42241933178282387, 0.3748352846889469, 0.7841537768197917, 0.7879617995979731, 0.7770299657423774, 0.804955989479107, 0.7864747559699216, 0.7818759032518525, 0.7579587694462983, 0.7728898659475014, 0.7953838998315282, 0.11566731287031506, 0.096698040626787, 0.11921427345978186, 0.10456066570376188, 0.11707282493981597, 0.11896253806724544, 0.09796708895688622, 0.13346834061722657, 0.12200555642113808, 0.2269639184006076, 0.22072827791669603, 0.16248567529688895, 0.14358465667487108, 0.17633913282710278, 0.15279003185292694, 0.2522908390986034, 0.2007153497069546, 0.14901099838030096, 0.46366843453214046, 0.511831038089932, 0.5353194039179424, 0.48624504807176194, 0.5247834313292887, 0.44766925879303177, 0.5003144687230499, 0.5020479466893089, 0.5830605029577272, 0.37185606571591845, 0.38180838484205826, 0.4054209721577198, 0.37342203818947406, 0.2856643000063347, 0.393474208884653, 0.4125003572256779, 0.41632179961014126, 0.3520460654726376, 0.1845742464843524, 0.18530136533877817, 0.18898998579738013, 0.1897160500878916, 0.2020755241952098, 0.19192081007978146, 0.20759042310203668, 0.18612737913134247, 0.1937000349342255, 0.25787992092021383, 0.20125946966102815, 0.29760422725302893, 0.22776973698279357, 0.22223907688766653, 0.3647381720404176, 0.35386141714214814, 0.5942847166138996, 0.20087946382764954, 0.8529013002107914, 0.15392570124715454, 0.7361489209752285, 0.18418168334190865, 0.17465092167417806, 0.814330706260807, 0.6587087145015887, 0.20139426355966483, 0.18070502343255557, 0.2067327277691775, 0.8083433006926461, 0.20618979775247115, 0.16061147591786085, 0.1643246916730572, 0.20494595033641883, 0.7362334678380889, 0.2089601678435703, 0.19570533167516757, 0.16480896564599812, 0.19683031012942998, 0.18580517719822998, 0.18558149213105601, 0.1733537574909405, 0.18192202852686068, 0.18007132581215524, 0.18384315746361113, 0.20902923110025673, 0.07841604828908288, 0.07971684629642406, 0.08160102896198607, 0.08176108355142564, 0.07653535979293224, 0.08362789473486987, 0.08341574340568791, 0.07539534004862902, 0.06923929682525176]}, "mutation_prompt": null}
{"id": "f1ecc4e3-9620-42b5-8a1c-76ffb9085903", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Increased population size for diversity\n        self.mutation_factor = 0.85 + 0.15 * np.random.rand()  # Fine-tuned mutation factor\n        self.crossover_rate = 0.95  # Optimized crossover rate\n        self.initial_temperature = 2.5  # Higher initial temperature\n        self.cooling_schedule = lambda t, i: t * (0.80 + 0.15 * np.sin(i / 10))  # Enhanced cooling schedule\n        self.cooling_rate = 0.90  # Modified cooling rate\n        self.chaos_factor = 0.40  # Increased chaos influence for exploration\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.55 + 0.35 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 15)\n\n                if evaluations % 80 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced DE with Adaptive Local Search and Temperature-Controlled Mutation for Robust Exploration.", "configspace": "", "generation": 70, "fitness": 0.48411261202091327, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8767826950582112, 0.8468417708449694, 0.8567625214613842, 0.8682570691193982, 0.8862770795436682, 0.8743384445083672, 0.8783763035981581, 0.8766508620909949, 0.8794717887155835, 0.7864907407015406, 0.8234088293102679, 0.7779835139502507, 0.7682567597678441, 0.7999697308050224, 0.766893417539128, 0.7851744536254504, 0.7987973715140699, 0.7721842087022365, 0.34578140282267766, 0.5021961284937124, 0.15047626937777336, 0.2590726008896598, 0.1388282944615432, 0.14634279220891344, 0.19159426976712934, 0.1471071723513423, 0.13525678620262438, 0.13217468385483822, 0.14012426116811572, 0.13505149618706525, 0.5071275948911106, 0.12712863647840367, 0.15748342350441857, 0.10465595421486318, 0.13759112376697935, 0.15170139115381442, 0.9261706395306779, 0.9378651405471355, 0.9641522000761308, 0.9679825882915487, 0.971243140933151, 0.9712472664387639, 0.9131454913548477, 0.9751564144709367, 0.9330827790142059, 0.6622188329434413, 0.6987759046616138, 0.6682136846117097, 0.7373273817575022, 0.6735821349990885, 0.6767574576660554, 0.677435406569487, 0.693965489941308, 0.713247248826107, 0.8626459408248389, 0.38115034659305036, 0.8589792884073965, 0.8872404482661854, 0.9005383581810785, 0.9080538381058663, 0.8878122444962125, 0.8851061339385179, 0.849129503106948, 0.1304883645797832, 0.6531173141029069, 0.554927719162414, 0.5648368180168677, 0.4225895143338091, 0.7045870385170114, 0.5660225947566502, 0.7312371049574666, 0.6972890960383156, 0.053840177509535736, 0.6539932973423026, 0.7536315309886814, 0.5151896221002856, 0.13025367192010473, 0.6599634361659947, 0.6238349466689, 0.6473662598106797, 0.5815223975059391, 0.73946775485609, 0.5962459145096491, 0.6885227978513635, 0.3393387380544457, 0.6861544984359178, 0.482894030667959, 0.6305935847766372, 0.6832581778935087, 0.5586360486285369, 0.7907211465021277, 0.7767304224703874, 0.78298098642066, 0.7538252850538827, 0.7215746153951832, 0.7783572693277152, 0.7729272954754147, 0.802046624785062, 0.7320229259228359, 0.21184220076643068, 0.33554567847280803, 0.13965274585255105, 0.27476109878508903, 0.20919427620783104, 0.5790164140542418, 0.22661685679409016, 0.40383933850003007, 0.1569150570919814, 0.5643733328118516, 0.6019873612058229, 0.48140237976990197, 0.612590609964446, 0.5769648248398536, 0.6050729229133864, 0.5598233370681662, 0.40822983499674137, 0.6338964673416513, 0.8514790311917901, 0.8636649086711967, 0.8331803346729861, 0.8240569739005926, 0.8289215887262184, 0.8303915944612809, 0.8071767221028335, 0.8443579625274463, 0.8390697162414057, 0.13992934114369093, 0.135363266051844, 0.12685657996328537, 0.16620610639593358, 0.12678398225542786, 0.15164958861477063, 0.13130670156373037, 0.12614038119123383, 0.13136538718578827, 0.3915276647067665, 0.23249219222296702, 0.35833853500825197, 0.17813189219278847, 0.13275734119517346, 0.4137813607509273, 0.21405703357548467, 0.2450643748951441, 0.5015957638144557, 0.5959888028430278, 0.5943110269222078, 0.5385496190651633, 0.5657290821586125, 0.6137651218525435, 0.5175942489352637, 0.67172149086171, 0.5964667817722877, 0.586557207541246, 0.42198229616713767, 0.43582469131994794, 0.44652455860659723, 0.5219541952646415, 0.4693655485766023, 0.2815013728592004, 0.48742067949541, 0.4596116420747375, 0.4897842557604627, 0.18606803327542298, 0.19813797674618472, 0.23086148195492073, 0.20275113348656792, 0.21220702260919067, 0.21166516061257734, 0.18537575371640047, 0.20287904782591082, 0.21560059212518223, 0.20639288100263797, 0.22332771813404817, 0.2376802270938989, 0.6054080668526762, 0.2044824911562232, 0.2383688829881816, 0.23427756871839167, 0.5419659241427732, 0.20692109499695688, 0.8872547425147268, 0.8952733706786447, 0.8558482108395816, 0.16583137883189103, 0.15702507357307882, 0.19421080850826788, 0.13599599956963793, 0.8625506055883729, 0.8846923469932921, 0.20807133749102324, 0.20814986599478424, 0.20809742091900252, 0.16829508483477695, 0.1663856747550817, 0.16629429925279493, 0.12782067012124976, 0.12756760670118095, 0.12746377291352584, 0.19097441710565732, 0.19782604733114917, 0.17842853859795138, 0.19358470187972765, 0.19126471167410752, 0.18513209323312507, 0.23281536119515955, 0.17818290588080488, 0.17770710544625945, 0.07605248786260876, 0.08585415262274787, 0.08639043167614036, 0.09311744077908624, 0.08833920567927034, 0.09310182054861849, 0.0810827032279865, 0.08607608661171617, 0.08334480419864376]}, "mutation_prompt": null}
{"id": "caca2ed4-ca89-43ac-875e-14aca8d31828", "solution": "import numpy as np\n\nclass HybridStochasticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Increased population size for diversity\n        self.mutation_factor = 0.7 + 0.4 * np.random.rand()  # Increased mutation factor range\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate to encourage exploration\n        self.initial_temperature = 3.0  # Higher initial temperature for broad initial search\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.cos(i / 10))  # Dynamic cooling schedule\n        self.cooling_rate = 0.85  # Slower cooling rate for sustained exploration\n        self.levy_factor = 1.5  # Levy flight factor for mutation\n\n    def levy_flight(self, size):\n        u = np.random.normal(0, 1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / np.abs(v) ** (1 / self.levy_factor)\n        return step\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 40 == 0:  # More frequent dynamic mutation\n                    self.mutation_factor = 0.5 + 0.3 * np.random.rand() + self.levy_flight(1)[0]\n\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridStochasticDE", "description": "Hybrid Stochastic DE with Adaptive Levy Flight Mutation and Dynamic Temperature Cooling for Enhanced Global Search.", "configspace": "", "generation": 71, "fitness": 0.3610390677281514, "feedback": "The algorithm HybridStochasticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8000065526524894, 0.8385158645520178, 0.8470266632148917, 0.8232433302778054, 0.8078788213071292, 0.8225180443146345, 0.7994305072503372, 0.7942951453617717, 0.7720007252781906, 0.7199535766372919, 0.7196225469669023, 0.6411063442427587, 0.6693605374675035, 0.6753377122863227, 0.6706747251010045, 0.7309867748440997, 0.774380190644312, 0.018789059821150977, 0.6261303723208151, 0.13900569228301807, 0.18003171258853434, 0.5317938270600207, 0.5420964212950805, 0.4432254025635035, 0.16760692745637584, 0.2619478728814575, 0.17564051622484167, 0.1461825308680489, 0.14492589026244473, 0.17356334227543735, 0.14943691259137415, 0.14336578949992962, 0.1367341505819326, 0.1749494009419077, 0.47412272784040765, 0.47795928212205085, 0.9846448106229678, 0.985894940778409, 0.9837485309337003, 0.9909012895263613, 0.9909012895263613, 0.9909012895263613, 0.9858440476732564, 0.9858440499266138, 0.985844049602214, 0.48128006789028055, 0.47429641193484773, 0.5064959282584611, 0.488931184238126, 0.4921351834106167, 0.48743143495810437, 0.5057086143634184, 0.548240327628047, 0.5116215875382093, 0.7588966775281324, 0.5801461302792755, 0.5826795271194031, 0.6821121899691638, 0.7554371537078455, 0.7797581287673676, 0.7288798884498077, 0.6258306907813351, 0.7572764554925425, 0.2430169768549324, 0.22245602751500015, 0.24690183597029236, 0.2746055627898173, 0.24372139297665962, 0.26862094866999964, 0.21099512634418138, 0.37387440202095246, 0.43731534820949103, 0.202449587320642, 0.12199929141324717, 0.12157652509377126, 0.2668935395099199, 0.22495148055734293, 0.4593614066012398, 0.2654239181121404, 0.2676524131215505, 0.2149795549287673, 0.33820186057056423, 0.12895514052447266, 0.22391320122142222, 0.24272140813423015, 0.2147259837709926, 0.17056561414817117, 0.19119096265619895, 0.17640845003242633, 0.1866669813466456, 0.2528847526424478, 0.332197144567428, 0.278043781728161, 0.3274311284292887, 0.3216303323212847, 0.2796710342735762, 0.3854645784174445, 0.21910611308536, 0.32362122533479676, 0.05540805385815406, 0.12000976137732922, 0.13217618707730638, 0.1476301148678254, 0.09497347849635263, 0.12214921364632869, 0.2094771103173707, 0.19413454118681517, 0.11436404825666491, 0.2997145247721339, 0.17826641710719393, 0.21885805064572783, 0.2537085651429184, 0.2456818757656306, 0.22207183447597867, 0.22866719217837117, 0.2497722922745138, 0.2425144070229016, 0.6335317120997032, 0.6161158977312149, 0.6811660642437265, 0.7023855318632094, 0.6655441982168769, 0.5913491111846216, 0.5835077168702828, 0.6340675024749021, 0.647052210430808, 0.13579553762925556, 0.24560678935270697, 0.14207978062806292, 0.095202093866115, 0.1271969437985193, 0.12951090724764258, 0.1295909693362568, 0.13200802227782882, 0.14238539754022006, 0.21832307071420043, 0.145575613614778, 0.23148058375297986, 0.12318806230829871, 0.13284495845023336, 0.1295117913503685, 0.14237630391724831, 0.25592938848893587, 0.15020157283743552, 0.4464199158151093, 0.41083272699941253, 0.466457819577647, 0.21117203954484143, 0.43305164080293646, 0.4120491117836427, 0.5191152260938562, 0.42075918972988036, 0.49875154428897217, 0.3614070438237491, 0.35617637707620176, 0.25489607601928266, 0.28537725754448184, 0.18114345257066877, 0.2728839051757276, 0.29305516685984634, 0.32132042004624106, 0.36118909957119294, 0.20047498666432662, 0.18278608093901438, 0.17607707197583167, 0.19636446689795362, 0.17480260195248443, 0.17783266074199056, 0.20062101833227242, 0.20459886766495705, 0.1785759256187135, 0.5142033725974355, 0.2312915221712628, 0.2401695920771335, 0.7244647594238891, 0.1928844075790398, 0.20056739719644734, 0.20513498371839045, 0.23941655319006616, 0.21231443585682253, 0.828914143043775, 0.6670218557197283, 0.7537997429145681, 0.18254101641315712, 0.18018067433823703, 0.166880750344654, 0.6331284175692986, 0.17995806459750152, 0.15895236513332822, 0.16093958506287853, 0.20025187507500253, 0.16431761591784178, 0.5420250235319849, 0.15975552428577489, 0.1576337237447436, 0.2054622611616963, 0.205543000825141, 0.20562110404529788, 0.2389331279095972, 0.18677058085573872, 0.18404053908623141, 0.1837289087889994, 0.20556460964940337, 0.1991404355638744, 0.19812955744456706, 0.18592015014525698, 0.18033351769318018, 0.08112016048125492, 0.08279841291799184, 0.0809015812991043, 0.08773347498214301, 0.06520687446390872, 0.07092720419307263, 0.07879167520551733, 0.08374175974011522, 0.08026239099458721]}, "mutation_prompt": null}
{"id": "f6e3bd52-737a-4c7f-a249-cbc3325bcce3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Slightly increased population size\n        self.mutation_factor = 0.9 + 0.1 * np.random.rand()  # Tweaked self-adaptive mutation factor\n        self.crossover_rate = 0.85  # Adjusted for varied exploration\n        self.initial_temperature = 2.5  # Higher for broader initial search\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.sin(i / 3))  # Refined stochastic cooling\n        self.cooling_rate = 0.95  # Slightly decreased cooling rate\n        self.chaos_factor = 0.4  # Increased chaos influence for higher diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # New frequency for dynamic mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 12)\n\n                if evaluations % 80 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Dynamic Chaos Control and Temperature-Dependent Mutation for Robust Global Optimization.", "configspace": "", "generation": 72, "fitness": 0.4630025699605419, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8746352888422114, 0.8773483563476309, 0.8806111899504633, 0.8853093710277565, 0.8904231819561953, 0.8779009201297059, 0.8875239308896326, 0.8861156415606284, 0.8671860352771915, 0.8055852084646276, 0.8160891619114737, 0.7790187344633561, 0.8050416060456211, 0.7846832569455998, 0.778731646167896, 0.7817615898227523, 0.7775272748341783, 0.7963970858323954, 0.3822615860603883, 0.41101027575569027, 0.14919551979828538, 0.39920549096574154, 0.16298737008188868, 0.36131277592709543, 0.39594286588577965, 0.16622515160243678, 0.15058972606835574, 0.15329787638808556, 0.14689805428873437, 0.13928115167298527, 0.1365961908451223, 0.3505553623198915, 0.14441418519705151, 0.13478334942039405, 0.15126426655486136, 0.21640472709810787, 0.9650916639903809, 0.952344969477021, 0.972185359602085, 0.986567838029564, 0.9865213328079275, 0.9865275382197173, 0.9278209189049019, 0.9541929072377473, 0.9527762381392297, 0.6148263748799072, 0.6423467977102442, 0.6638131972476933, 0.6654502861160008, 0.6579503359325811, 0.6955721243323936, 0.6592520738014988, 0.66383088777228, 0.6860295802901091, 0.8208792511054239, 0.8503749601976888, 0.7951392403415443, 0.8321265105953782, 0.8283660440943441, 0.8711722965252706, 0.8388206611757135, 0.8093769878142675, 0.8413786523118032, 0.5758448629732269, 0.44191912100327835, 0.5922515458799404, 0.5531086606287712, 0.6052206404444698, 0.5165519938943475, 0.4926206600909522, 0.5324746582997838, 0.5293402743150228, 0.016423313479127732, 0.30783500027577604, 0.5783067486431577, 0.4910910936589069, 0.43735430441574186, 0.40256796072579637, 0.5890650463286577, 0.45401928493774923, 0.4650312456945398, 0.17510501133879464, 0.44319853510940255, 0.48929763832158113, 0.572938222093991, 0.5294149364804255, 0.174273801718406, 0.5610536841537191, 0.5181125769905034, 0.4569463062613015, 0.4143694067184739, 0.5588999380224147, 0.5731837437058829, 0.47761515502768603, 0.30436465114463385, 0.627142062203772, 0.7076754073141351, 0.6666250287270223, 0.6044847560149263, 0.06996710986009147, 0.06379173440046892, 0.12966257963333683, 0.41711757821113904, 0.3384018670762342, 0.33648069900751776, 0.18543662965272512, 0.2332405443228266, 0.3506110474556835, 0.4401796736592327, 0.3952770337611585, 0.4378872297493315, 0.48704940380808326, 0.42562276133147914, 0.4720729028030394, 0.45278456148446067, 0.4364506346029132, 0.38100942719628106, 0.8043230469191223, 0.812821718482127, 0.8208674771593505, 0.7899201044981713, 0.7870000697906147, 0.7926216636683684, 0.8058972398995987, 0.7895289548979739, 0.7806306883833813, 0.12209411861010755, 0.1159130225223507, 0.12229449134254156, 0.12365709008681802, 0.14364593011049798, 0.12181359186785534, 0.11381354261246257, 0.1217920817182363, 0.12687443252827357, 0.13558042079292332, 0.23917951679867377, 0.14344007800722958, 0.23020009255771, 0.15086223031084467, 0.16403889539806804, 0.15340600105005708, 0.17591139211949125, 0.21995005978381466, 0.618863281415349, 0.4806827289036101, 0.5333248335947985, 0.6108545938797005, 0.531717391758236, 0.5006909045199592, 0.28423430144907225, 0.5425728836032047, 0.6268910455441434, 0.33847385498040194, 0.3468652255589165, 0.3179731705286398, 0.3992008916915316, 0.20915601548672924, 0.30491252652603984, 0.3807341747456301, 0.40504986797241826, 0.42144436989096457, 0.18963126399361385, 0.18987554885191815, 0.19477367089806064, 0.19488639183589784, 0.19226548872652305, 0.20097036120624734, 0.1956321127109153, 0.23792256493265873, 0.18667452160980458, 0.5608474440260967, 0.5938697466560093, 0.23464764296601115, 0.4931861234237995, 0.6206781914975464, 0.2245610989034944, 0.5401668020479596, 0.49338770602568904, 0.49929669771775087, 0.7882835468768947, 0.1713627264611436, 0.17136271986442264, 0.8504490957541704, 0.8247479818132952, 0.8341771263797082, 0.7429573858164198, 0.777016328263775, 0.8046507738526397, 0.20851398186701953, 0.2076978883400724, 0.16803477329673755, 0.2004896624206971, 0.2053530929568882, 0.20587085698429397, 0.15192915700212795, 0.8141099744972113, 0.8318645138018064, 0.189852347182502, 0.20550219874087594, 0.18018678764313023, 0.20033204371954583, 0.17961412760044693, 0.180658048050363, 0.18978835589318788, 0.19062694308438755, 0.19563029964446288, 0.07727128591721699, 0.09137489595886072, 0.0808646609932282, 0.08157955598615918, 0.07596899432974258, 0.07797931938040115, 0.07927084643484472, 0.0789128438806771, 0.07565544868644791]}, "mutation_prompt": null}
{"id": "2ede62c1-0d9d-4a80-ac62-6e656977ccdc", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Adaptive quantum-inspired mutation factor\n        self.crossover_rate = 0.85  # Balanced crossover rate\n        self.initial_temperature = 3.0  # Higher initial temperature for extensive search\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.1 * np.cos(i / 6))  # Multi-phase cooling schedule\n        self.cooling_rate = 0.94  # Enhanced cooling rate\n        self.entropy_factor = 0.25  # Entropy-based diversity adjustment\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Frequency for entropy-based mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.entropy_factor * np.sin(evaluations / 7)\n\n                if evaluations % 90 == 0:  # Adaptive mutation with entropy influence\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / (temperature + 1e-9))\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "QuantumInspiredAdaptiveDE", "description": "Quantum-Inspired Adaptive DE with Entropy-Based Mutation and Multi-Phase Cooling for Balanced Exploration-Exploitation.", "configspace": "", "generation": 73, "fitness": 0.460147503568728, "feedback": "The algorithm QuantumInspiredAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8379182789503734, 0.8674274845326444, 0.8725223040559728, 0.8611717197942012, 0.8558921755649085, 0.8748963473249554, 0.882921897775349, 0.8668311706246943, 0.878473555243627, 0.7718496350960552, 0.7748396262702546, 0.7676137527517197, 0.7716152489398145, 0.7796930757254833, 0.7598594013294273, 0.7680639039931585, 0.7901376701446547, 0.771076718922731, 0.35073393778092854, 0.30161971483619476, 0.14246968300742413, 0.43866494051908844, 0.2211837128624068, 0.14969764987776202, 0.1817816796026951, 0.2564749786240026, 0.12005900728368757, 0.133498663231999, 0.21689187366077967, 0.15925740107352848, 0.16016485024709504, 0.2587044169595003, 0.11748411669387593, 0.23668753670693, 0.4168625004849291, 0.12067327064147593, 0.9881947127282481, 0.9782046478718234, 0.9599361669408895, 0.9832023277836948, 0.9715851170865386, 0.9715684213043593, 0.9667180258797189, 0.929824331945702, 0.956787351281051, 0.6536629935564549, 0.6282550524157003, 0.6340081069023311, 0.6321387422006428, 0.6282682229786892, 0.5976783654804361, 0.6846300129526097, 0.6629593342347442, 0.6747424127663175, 0.8490280490116578, 0.7997887483603014, 0.8250689688934609, 0.8188345486829286, 0.780370326636028, 0.807524828793498, 0.8324218091356177, 0.8406908485443629, 0.812268410484305, 0.5873841350539308, 0.6404009668307815, 0.5748771436660733, 0.30688029354728275, 0.5294902955854546, 0.4079608223201553, 0.5598463041197467, 0.39972228796455234, 0.4522971381399612, 0.518745739520587, 0.43497475251866835, 0.483469917640723, 0.43633182829247774, 0.5393942356751098, 0.5067937708373121, 0.5263302267087322, 0.36566771249614605, 0.29116274196914405, 0.5228593497577254, 0.45078977529374054, 0.425555205938108, 0.1831251013007451, 0.5259639148773584, 0.4731339883862028, 0.4903281271614036, 0.46523179404051973, 0.5022833515575231, 0.6307170638098758, 0.6105486598519384, 0.6168530833056434, 0.6560380434524407, 0.6077196953058257, 0.5857502689733893, 0.6304607134038758, 0.7129096654647233, 0.6592436821508233, 0.1466769842954393, 0.20312200711590667, 0.1454711577137996, 0.3325269113885786, 0.39147405083230147, 0.31852528881699016, 0.2738652303442387, 0.1794744749786258, 0.2555244765151793, 0.3761397130852733, 0.4155578197422024, 0.40606515768022877, 0.3924816098534547, 0.41719745351740845, 0.4155614971918724, 0.3300558465965039, 0.391203480305794, 0.39396639040888726, 0.7799868565125619, 0.7603823329835947, 0.813870440341928, 0.7337161097170832, 0.7778598058839262, 0.7811170977092043, 0.7552360694694227, 0.7823194772721414, 0.771892045536085, 0.10226936830012456, 0.09900716432894008, 0.1283476653616381, 0.09841846938443866, 0.09009955996456442, 0.11048762342764495, 0.09849282185450359, 0.10608151201458726, 0.10926944675890649, 0.41560628286555934, 0.16544932077292684, 0.14832592774016362, 0.315324172074374, 0.19229645926004668, 0.14106290415453437, 0.24006476717827052, 0.17816271665076544, 0.1607580011759403, 0.5325224823333392, 0.45697418460341266, 0.4677398744459079, 0.5076733448348665, 0.508834826857301, 0.536908400283671, 0.5324150590702075, 0.519898676360202, 0.5785754526599627, 0.32056861894622135, 0.35789453865489895, 0.3712290383410567, 0.3656429218262438, 0.3149293498273994, 0.35995220847816223, 0.41553036397392684, 0.36027177984209446, 0.4010930178187452, 0.1903468795560629, 0.18540944221137567, 0.19359587312497528, 0.1802831208952801, 0.19754502295787824, 0.1755909697698348, 0.18688548971754082, 0.19609801319149023, 0.18776464204413712, 0.4568017251218267, 0.24517516532323702, 0.481478251168435, 0.6504372688670825, 0.637847741141378, 0.5735670020761521, 0.5105824701909414, 0.5079324335335904, 0.4007270512980533, 0.8453314618234358, 0.8571408345602854, 0.8441010640731185, 0.1758778287378323, 0.833049363524785, 0.7938964817218634, 0.18215534853334814, 0.16505077096873688, 0.8647184393590392, 0.2082644947525678, 0.16795169721694858, 0.16767402914083573, 0.16427717817232512, 0.19963473229631779, 0.7308152270807733, 0.20621817083929872, 0.1279440327771899, 0.8146606622747881, 0.1947669791044191, 0.1873444704291508, 0.19382230524157162, 0.17801484508507037, 0.19760683359797704, 0.16023597061187733, 0.17662123169334432, 0.22649846638942628, 0.18129100410461496, 0.07330910058588636, 0.08645266490664161, 0.07765609545031149, 0.07689648514702951, 0.08444517678165808, 0.0800406047832346, 0.09201019088898377, 0.07685130475441637, 0.07640197010756511]}, "mutation_prompt": null}
{"id": "7e85b723-ec5e-4287-9577-7ac1b287357a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25\n        self.mutation_factor = 0.9 + 0.1 * np.random.rand()  # Adjusted self-adaptive mutation factor\n        self.crossover_rate = 0.85  # Fine-tuned crossover rate for exploration-exploitation balance\n        self.initial_temperature = 3.0  # Higher initial temperature for increased exploration at start\n        self.cooling_schedule = lambda t, i: t * (0.88 + 0.07 * np.cos(i / 6))  # Probabilistic cooling schedule\n        self.cooling_rate = 0.95  # Refined cooling rate\n        self.chaos_factor = 0.3  # Slightly decreased chaos factor for stability\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 45 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.7 + 0.25 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 12)\n\n                if evaluations % 75 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Probabilistic Cooling, Dynamic Mutation Adjustment, and Adaptive Population Scaling for Improved Performance.", "configspace": "", "generation": 74, "fitness": 0.3996107703767726, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.26.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8274570670516466, 0.8263281841592798, 0.838558745180447, 0.8424495642818159, 0.8471006798466878, 0.8336947855883604, 0.8223473687008267, 0.8262549025468114, 0.8426891202902416, 0.7251841022526633, 0.7369682553329548, 0.6930065393912878, 0.7328641232041608, 0.7263095434566114, 0.7226254203458455, 0.7222938688402372, 0.7108887196866722, 0.7246354960966404, 0.1563410926776867, 0.20694533141425275, 0.19275018951575207, 0.45221896920325466, 0.17870839613845713, 0.1302411612902461, 0.15461373790632338, 0.14272966046359237, 0.12645787450320645, 0.13511819474543973, 0.13497826724365736, 0.12693811768734153, 0.11592841632014184, 0.12002292003703008, 0.13399999496957193, 0.13737714860222627, 0.12329702415319588, 0.13920306322430875, 0.9716273562164491, 0.9717188791148342, 0.9717046117100132, 0.9861831928585989, 0.9861824167919355, 0.986182526890558, 0.971970252008225, 0.956368745329486, 0.9475897967636374, 0.5530269644807377, 0.5320415786607553, 0.5495660685825049, 0.5700693425862564, 0.4974830837415891, 0.5755684545364557, 0.5742568322727895, 0.6027082217903867, 0.5887912133843927, 0.6704634974999784, 0.7606664173701466, 0.6752994114016412, 0.8003573694250254, 0.7222577183521284, 0.7502715668220789, 0.7419813664519119, 0.7633821574320507, 0.7392244583973423, 0.40031191942846955, 0.3723608073820247, 0.4295638383074293, 0.35556364093424797, 0.32950421575259004, 0.5180463218435482, 0.3661249714800091, 0.4061422630823486, 0.45309812376600733, 0.3215744493996092, 0.4645722323418614, 0.3721441545863525, 0.2957398139601177, 0.4445434266873618, 0.5471894314033938, 0.3463210165859938, 0.4758993227982864, 0.37162016582790025, 0.31420625252461887, 0.3272767672520135, 0.34224060364270836, 0.31867060521036017, 0.26436557760623924, 0.28021765272760113, 0.3456473504212466, 0.35978512741073765, 0.3500343419694407, 0.44108496762358473, 0.5039696043865862, 0.49536956978784363, 0.47305439516002223, 0.4517841514033678, 0.37618811060462576, 0.566131889090933, 0.5550264516885312, 0.5536228487578435, 0.12112976957602895, 0.12708738714916712, 0.10230002918567804, 0.13049150433301637, 0.19834195561154444, 0.28293163147362443, 0.12278591879749257, 0.21670829370061628, 0.24506760249468207, 0.2831896348106129, 0.3112963842609614, 0.3236775050541819, 0.33408671777495325, 0.32287647110889106, 0.34312205445545496, 0.2999913931150824, 0.27987893319452606, 0.3140330235383403, 0.7282280178604676, 0.7392491435056441, 0.7244642029076228, 0.7159044307035867, 0.7010010544004464, 0.7178041462856332, 0.7088381811466495, 0.6547511803498791, 0.6954618678973427, 0.13436182223501292, 0.10227496961828242, 0.0942838329985527, 0.08696537568323204, 0.11071012195069818, 0.09069416097880234, 0.08898003291842238, 0.09315201394174033, 0.08698190760350355, 0.14049062033800763, 0.17968079314940621, 0.1499994322691196, 0.18439597852448086, 0.47053843610361934, 0.2253125105491275, 0.21963521479629167, 0.17650890049596035, 0.24116782119930047, 0.3718349045673963, 0.3927847274359846, 0.343297220724491, 0.37990320377731446, 0.36889166247551775, 0.3800846881230021, 0.4417557108323421, 0.4425562509876064, 0.43623388695147336, 0.29428893483132057, 0.2697984112513504, 0.3237539003126395, 0.2741009349535697, 0.26244836684845085, 0.30129323903734373, 0.2992805292464856, 0.3037599471933554, 0.32821178067723866, 0.1666017233733348, 0.19071496122626974, 0.18373142814375298, 0.1814563764803352, 0.1950894303209637, 0.1874202867708299, 0.19033623186170434, 0.17755581847634405, 0.19177419071233404, 0.23402814825338847, 0.1841118517402488, 0.21030582430556266, 0.29984461827760367, 0.2746057918897984, 0.39864177832726944, 0.3010475077668836, 0.35819388608613, 0.2053909768301565, 0.8527478665112993, 0.8222528009171384, 0.8131008552414258, 0.1827683517507318, 0.6425661549802216, 0.662519409342615, 0.17608157441349848, 0.6223382208715422, 0.624344046704971, 0.15925976453174062, 0.1654247572265003, 0.16687428381588887, 0.1652025114927681, 0.7146549697333052, 0.8022571059652894, 0.12696728519280465, 0.1938173921637677, 0.19380938069181752, 0.18780561149629604, 0.19052341720265054, 0.19253696961903555, 0.17283048758520259, 0.20306998467501503, 0.17096656424491208, 0.21558302985320887, 0.18081651144842759, 0.16729708667359933, 0.07918433385126356, 0.07271137307840003, 0.07426561886769578, 0.07320495753473166, 0.08059724643128663, 0.0717384462645112, 0.06876663837051633, 0.07221834195752164, 0.07339560950915602]}, "mutation_prompt": null}
{"id": "d7a70c36-e7fb-4b73-b11b-a6c5edec1666", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.9  # Increased adaptive mutation factor\n        self.crossover_rate = 0.85  # Adjusted crossover rate for stability\n        self.initial_temperature = 1.8  # Reduced initial temperature for focused search\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.sin(i / 6))  # Revised stochastic cooling schedule\n        self.cooling_rate = 0.88  # Enhanced cooling rate for gradual exploration\n        self.chaos_factor = 0.4  # Increased chaos factor to boost diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Refined frequency for chaos-induced mutation\n                    self.mutation_factor = 0.65 + 0.25 * np.random.rand() + self.chaos_factor * np.tan(evaluations / 15)\n\n                if evaluations % 80 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / (temperature + 1e-10))  # Small constant to prevent division by zero\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Temperature-Driven Selection Probability and Iterative Chaos Mutation for Balanced Exploration and Exploitation.", "configspace": "", "generation": 75, "fitness": 0.4089822693068327, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8533793290102546, 0.8533793290102546, 0.8533793290102546, 0.8827671946997333, 0.8827671946997333, 0.8827671946997333, 0.868367314690448, 0.868367314690448, 0.868367314690448, 0.7538557063291929, 0.7538557063291929, 0.7538557063291929, 0.760731223575793, 0.760731223575793, 0.760731223575793, 0.77324793200712, 0.77324793200712, 0.77324793200712, 0.07243618402692664, 0.07243618402692664, 0.07243618402692664, 0.1582328221595053, 0.1582328221595053, 0.1582328221595053, 0.13461235418059136, 0.13461235418059136, 0.13461235418059136, 0.17623030808888618, 0.17623030808888618, 0.17623030808888618, 0.12562245718447862, 0.12562245718447862, 0.12562245718447862, 0.11913082470571623, 0.11913082470571623, 0.11913082470571623, 0.9770953260111722, 0.9770953260111722, 0.9770953260111722, 0.9807988203040893, 0.9807988203040893, 0.9807988203040893, 0.9767994580838175, 0.9767994580838175, 0.9767994580838175, 0.6565492484016433, 0.6565492484016433, 0.6565492484016433, 0.5918885138977692, 0.5918885138977692, 0.5918885138977692, 0.5790167752030811, 0.5790167752030811, 0.5790167752030811, 0.7882666369009617, 0.7882666369009617, 0.7882666369009617, 0.670785592973348, 0.670785592973348, 0.670785592973348, 0.538681815238252, 0.538681815238252, 0.538681815238252, 0.5545979951528599, 0.5545979951528599, 0.5545979951528599, 0.3684022557734816, 0.3684022557734816, 0.3684022557734816, 0.5670760663332289, 0.5670760663332289, 0.5670760663332289, 0.009953359001720896, 0.009953359001720896, 0.009953359001720896, 0.4704758899647864, 0.4704758899647864, 0.4704758899647864, 0.26410293999418655, 0.26410293999418655, 0.26410293999418655, 0.31985741924976074, 0.31985741924976074, 0.31985741924976074, 0.3446014125439104, 0.3446014125439104, 0.3446014125439104, 0.2012437349478149, 0.2012437349478149, 0.2012437349478149, 0.4457789045309931, 0.4457789045309931, 0.4457789045309931, 0.37687381012129817, 0.37687381012129817, 0.37687381012129817, 0.495881014593329, 0.495881014593329, 0.495881014593329, 0.12331675505611872, 0.12331675505611872, 0.12331675505611872, 0.23839256316783008, 0.23839256316783008, 0.23839256316783008, 0.16317960093523454, 0.16317960093523454, 0.16317960093523454, 0.31443485018436235, 0.31443485018436235, 0.31443485018436235, 0.4310546926005816, 0.4310546926005816, 0.4310546926005816, 0.2786012187449721, 0.2786012187449721, 0.2786012187449721, 0.761766536058881, 0.761766536058881, 0.761766536058881, 0.66681519784433, 0.66681519784433, 0.66681519784433, 0.6536842997774567, 0.6536842997774567, 0.6536842997774567, 0.13763127813228382, 0.13763127813228382, 0.13763127813228382, 0.14030363558563497, 0.14030363558563497, 0.14030363558563497, 0.1670380064347884, 0.1670380064347884, 0.1670380064347884, 0.14613437925411887, 0.14613437925411887, 0.14613437925411887, 0.31463794235039666, 0.31463794235039666, 0.31463794235039666, 0.24707540602632538, 0.24707540602632538, 0.24707540602632538, 0.48128421663606347, 0.48128421663606347, 0.48128421663606347, 0.5585022185764319, 0.5585022185764319, 0.5585022185764319, 0.5926885618542221, 0.5926885618542221, 0.5926885618542221, 0.1771278481394758, 0.1771278481394758, 0.1771278481394758, 0.4416718286141227, 0.4416718286141227, 0.4416718286141227, 0.38757780471242986, 0.38757780471242986, 0.38757780471242986, 0.17834532848506657, 0.17834532848506657, 0.17834532848506657, 0.221233376128116, 0.221233376128116, 0.221233376128116, 0.18195914229696164, 0.18195914229696164, 0.18195914229696164, 0.18491976980819902, 0.18491976980819902, 0.18491976980819902, 0.7161477815237423, 0.7161477815237423, 0.7161477815237423, 0.633986231448592, 0.633986231448592, 0.633986231448592, 0.8265883179975243, 0.8265883179975243, 0.8265883179975243, 0.15389010368675904, 0.15389010368675904, 0.15389010368675904, 0.15180308029432943, 0.15180308029432943, 0.15180308029432943, 0.1669679083656077, 0.1669679083656077, 0.1669679083656077, 0.7011286768084852, 0.7011286768084852, 0.7011286768084852, 0.20635902093520664, 0.20635902093520664, 0.20635902093520664, 0.17774865773007364, 0.17774865773007364, 0.17774865773007364, 0.18356005320731672, 0.18356005320731672, 0.18356005320731672, 0.20952261651797532, 0.20952261651797532, 0.20952261651797532, 0.10356935935478484, 0.10356935935478484, 0.10356935935478484, 0.08338757028485255, 0.08338757028485255, 0.08338757028485255, 0.0853469146521455, 0.0853469146521455, 0.0853469146521455]}, "mutation_prompt": null}
{"id": "97e20a62-73ef-4b94-809f-e5d784b6fb5d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Slightly increased population size for diversity\n        self.mutation_factor = 0.85 + 0.15 * np.random.rand()  # Adjusted mutation factor for balance\n        self.crossover_rate = 0.9  # Retaining high crossover rate for exploration\n        self.initial_temperature = 2.5  # Increased temperature for broader search at start\n        self.cooling_schedule = lambda t, i: t * (0.88 + 0.1 * np.sin(i / 7))  # Slightly adjusted stochastic cooling\n        self.cooling_rate = 0.91  # Refined cooling rate\n        self.chaos_factor = 0.38  # Enhanced chaos influence for increased diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Different dynamic mutation frequency\n                    self.mutation_factor = 0.65 + 0.35 * np.random.rand() + self.chaos_factor * np.cos(evaluations / 12)\n\n                if evaluations % 90 == 0:  # New adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Stochastic Temperature Control and Chaotic Mutation for Improved Global Optimization.", "configspace": "", "generation": 76, "fitness": 0.4443889253672044, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8566195592731024, 0.8307091555154552, 0.8537019365749262, 0.8388776225058422, 0.8385271148676272, 0.8568217418080386, 0.8540232901478123, 0.8504047472221136, 0.8599676852549762, 0.7444420374676395, 0.7420712741589708, 0.756863918438692, 0.7168837403134254, 0.704587990086113, 0.7408608069601941, 0.739791410903433, 0.7248040740427322, 0.7586354110226479, 0.21632611851023353, 0.12715247913151473, 0.25001371675152595, 0.12272357259763245, 0.13527120936641257, 0.12298414530214119, 0.28131835728809884, 0.1679458542214456, 0.11670689388010547, 0.12484263564909504, 0.13648366767898568, 0.11339076376048851, 0.15024798533356187, 0.10660170765503096, 0.11856095706084746, 0.11599064676938309, 0.11468440002872882, 0.12868927035286137, 0.9735362491944712, 0.9627527822624423, 0.9472676426015895, 0.9699029314132432, 0.9773584845445878, 0.9774007984556797, 0.9801150616684067, 0.9697444587303391, 0.9696688791306882, 0.563873896343136, 0.613253433807448, 0.557261578276373, 0.5974028520956748, 0.5821075959594335, 0.6048793811070302, 0.627317076254106, 0.6025862809977265, 0.5585566949211591, 0.7984672167627549, 0.7527478011560305, 0.7712040469271122, 0.8334385556443626, 0.7911053066060626, 0.7753258495103678, 0.7501109905341263, 0.7908659256104533, 0.7900611405433245, 0.5670973038464127, 0.4654120966751131, 0.5747986837209171, 0.4687111026619244, 0.48410852755514777, 0.5027808438598906, 0.41787933403602207, 0.49773365734329067, 0.5477951524487037, 0.3660467702190937, 0.43028861781192995, 0.5233606251941528, 0.4744363352600667, 0.6083084891703177, 0.5639249136968304, 0.43973236005735106, 0.5625237093686728, 0.5199786307185208, 0.46308803690690215, 0.46353928645493436, 0.5456560324302525, 0.580870615073203, 0.506366052920561, 0.5359265837134405, 0.5968847277475094, 0.5874870940309729, 0.5098051343764286, 0.6266620181231837, 0.6582428530429325, 0.596750386756189, 0.5822365433719764, 0.6323275571913585, 0.6416244771195792, 0.6703586023137764, 0.674289422959298, 0.6500257124317057, 0.11305288739803399, 0.14371615336159993, 0.1730966499803791, 0.383064775071552, 0.3874266235564926, 0.17005381416071463, 0.27106411528447416, 0.18705492780880573, 0.25712062927065027, 0.4051542168172547, 0.4152276777343059, 0.35979756212273173, 0.4532253995076817, 0.4183099060909369, 0.46375862268523427, 0.3560639276962845, 0.38956637706310526, 0.36564789113388074, 0.7615707261581357, 0.7564781716977865, 0.7637647993176362, 0.7856303566966627, 0.7670736229678786, 0.7707432585560656, 0.7722077899489017, 0.749775465393887, 0.7945260729087489, 0.1190229805224462, 0.10132636337764322, 0.1127445342299479, 0.10910216322746003, 0.11114019387423324, 0.1020656018953352, 0.09008437432420469, 0.11627565204719581, 0.1004379611506312, 0.15132100381087799, 0.17481996314039738, 0.16019058596734903, 0.16533157480185967, 0.26671367071281393, 0.14074088849376132, 0.22021526130416913, 0.18557073110457567, 0.17645298781329344, 0.40590455227681776, 0.4402550714151735, 0.44697152777524995, 0.4233112524929664, 0.45761089149197776, 0.5024984206092485, 0.4867847280131268, 0.47909735548445553, 0.4561020839490758, 0.38239522488028077, 0.35667631052314175, 0.35429306363589885, 0.35301800571515973, 0.3618806195644598, 0.3571153690850424, 0.3460750794104337, 0.3722672901298514, 0.3468811409698809, 0.18883533950905473, 0.18597196154264628, 0.20047354196443734, 0.18512734626157146, 0.18093024140480207, 0.19726898054144093, 0.17687956897505097, 0.2140474454622292, 0.20295054211452512, 0.21355431809676706, 0.20221306958890883, 0.4984207427618016, 0.4541416151889083, 0.3848248314774, 0.2082226936561521, 0.2190964965803942, 0.5248361687968506, 0.4465870847769813, 0.7121574828144388, 0.19272855922501553, 0.19344407064459146, 0.1656925726191728, 0.20259502218471737, 0.18895651872753894, 0.18322745451614286, 0.8063715102516711, 0.8057154572633564, 0.7628158434195491, 0.7808377587539547, 0.7405022387817862, 0.7133978474858154, 0.16697075592679134, 0.16383783116376394, 0.2113803554263174, 0.772720842475765, 0.7783947508923015, 0.1686823488179633, 0.196875582588654, 0.17408890400909072, 0.18973487507982978, 0.2388850285715728, 0.23745784003031656, 0.17735448270007548, 0.17358947874992414, 0.18092095776533368, 0.07572996385657516, 0.07202458489984254, 0.08338295692560205, 0.07727333220452437, 0.07405987115806734, 0.0866472901408546, 0.08421250760312338, 0.07617043223886921, 0.08402258152454145]}, "mutation_prompt": null}
{"id": "3f6b6c58-a9bc-4689-ae94-a4377443f068", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Slightly increased population size for diversity\n        self.mutation_factor = 0.9 + 0.1 * np.random.rand()  # Narrowed range for more stable mutation\n        self.crossover_rate = 0.85  # Balanced crossover rate for exploration and exploitation\n        self.initial_temperature = 2.5  # Higher initial temperature for robust exploration\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.sin(i / 10))  # Controlled cooling schedule\n        self.cooling_rate = 0.95  # Slightly slower cooling rate\n        self.chaos_factor = 0.4  # Increased chaos influence to enhance diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Slightly changed frequency for dynamic mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 10)\n\n                if evaluations % 90 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDE", "description": "Hybrid Adaptive DE with Controlled Chaos and Temperature-Induced Dynamic Mutation for Enhanced Optimization.", "configspace": "", "generation": 77, "fitness": 0.4602460460030178, "feedback": "The algorithm HybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8781377002737042, 0.8926999531627308, 0.8739650248034156, 0.8730365054253346, 0.8691958948363847, 0.886761106633335, 0.8608552201641461, 0.8698117040671798, 0.8795674581160275, 0.7867777737695629, 0.8027220895093238, 0.7882742351348483, 0.7665905934069552, 0.7867077080028999, 0.7925441486428735, 0.7914668538518352, 0.7967055925375246, 0.8013939619040785, 0.4658403263319786, 0.46738306371733873, 0.35745310983344414, 0.18172830656336292, 0.16798690466589228, 0.1641058595764966, 0.2979205569508018, 0.375222690411829, 0.3586284997186011, 0.14368302467202443, 0.1246673105359527, 0.48864214332211053, 0.15283475497415056, 0.2386043348629001, 0.16170254848729693, 0.38277204022127975, 0.1586611905082027, 0.25745245319525245, 0.9569066329490196, 0.9294055646683996, 0.9434298251478425, 0.9372216845617728, 0.9824493369230944, 0.9824611464619561, 0.9217060497043023, 0.9460794474723586, 0.933481700084866, 0.6130678557332248, 0.6530397541790448, 0.6180225872797241, 0.6832678795973295, 0.561333042884232, 0.6202727023869166, 0.6294743494483848, 0.6446107260218428, 0.6398670823716108, 0.4217048328114411, 0.8007713395785377, 0.7969976137891437, 0.502047351934902, 0.8530638996465625, 0.8717380570846537, 0.8442847630655101, 0.7990033028004033, 0.869573369181536, 0.4898988642895139, 0.5457907489880076, 0.5216770522239602, 0.12966569413313378, 0.6559244901650423, 0.6790548411617761, 0.5290965668144284, 0.5770234128369911, 0.4264295693874136, 0.16042716426620895, 0.4200175486587996, 0.3382676788881849, 0.5729441438552717, 0.25008954941545003, 0.1332490312852539, 0.5290114798732088, 0.4376480416076195, 0.41666510973705606, 0.0847968063960357, 0.4872911583222388, 0.4336220638149585, 0.5138616219222479, 0.46949755158905815, 0.5246979785285784, 0.5348706717222449, 0.4455800910298744, 0.20929980061464493, 0.6720153182039443, 0.5464625171702803, 0.5952347359307399, 0.5834862481150047, 0.31516678240254636, 0.3962782422441746, 0.735325925824267, 0.6545092506326124, 0.6180553165461619, 0.13928727475577674, 0.06070427679463497, 0.05637433848336937, 0.2543588696961411, 0.3695778277870191, 0.22527330478697838, 0.265115197362516, 0.16641534890049903, 0.15082720891336432, 0.46291652654636395, 0.4058101876395245, 0.40076830279420994, 0.445286269601055, 0.46264104122773886, 0.41448820471232406, 0.48072445643980277, 0.37754440360419483, 0.3973261187739492, 0.8006511992747707, 0.8149721806720704, 0.8128650208946633, 0.7963326067301436, 0.7198434222677601, 0.7724738185189259, 0.7457646896046899, 0.8018345096829037, 0.7960173214513429, 0.11804054750999371, 0.09598097583953857, 0.15620353751023197, 0.11688548453763337, 0.15475662549944913, 0.12434664500142223, 0.10619482603361763, 0.15762038124706035, 0.12143299724073209, 0.12439458273426318, 0.15227330611138679, 0.16128199334495563, 0.13948071302238785, 0.19196793271135582, 0.3137840231104805, 0.22507388085415903, 0.2264235650053008, 0.163116166096831, 0.5157905358951916, 0.6135162826762395, 0.4481512761566554, 0.5974567718403274, 0.4080886220703547, 0.5871575500893687, 0.6134629803213796, 0.6540429002953134, 0.590500222057476, 0.38168053400457747, 0.38579119519260263, 0.41964898723573896, 0.36408192501081316, 0.4432166692215507, 0.38210325807546597, 0.5117154972695162, 0.46432488476671674, 0.40779506574320523, 0.19948848592550938, 0.20102252194984072, 0.19356688734965988, 0.2063655212358707, 0.17607805003040589, 0.20765843488466185, 0.22767644179003166, 0.18978741227035156, 0.19617287942791828, 0.20939784870497358, 0.5810445108569295, 0.6674829295846182, 0.23760641556745732, 0.37377574060968344, 0.6251296471696036, 0.6232479859695651, 0.24540955466256742, 0.38961456333988886, 0.867046942397875, 0.8592495615971717, 0.8722070645698232, 0.17191683614186226, 0.1936855158419375, 0.16494367517195663, 0.7820164027454519, 0.8817682482458475, 0.893718623838333, 0.8694507727089282, 0.8371060539490175, 0.8514440022078381, 0.16489711990424782, 0.21049787716680513, 0.21030600615233375, 0.20830518573382661, 0.208868334183425, 0.2083228405268459, 0.18627294696027508, 0.18072100722767082, 0.20803538929055476, 0.17738755872113088, 0.19074443210810266, 0.17837523435481184, 0.19198552721986828, 0.20173797090785217, 0.18601297361728153, 0.08042055760625477, 0.08201021882010717, 0.08738266860091648, 0.08395742151383112, 0.08599541239387021, 0.07627485914173326, 0.08501651298812918, 0.08414084214008055, 0.07570263021966694]}, "mutation_prompt": null}
{"id": "098838e8-a9f3-4037-843e-5a034cc9e868", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Increased population size for better diversity\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Adjusted mutation factor range for more adaptive control\n        self.crossover_rate = 0.85  # Slightly lower crossover rate for more stable convergence\n        self.initial_temperature = 1.8  # Modified for controlled initial exploration\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.cos(i / 3))  # Slightly adjusted cooling schedule\n        self.cooling_rate = 0.95  # Adjusted cooling rate for gradual convergence\n        self.chaos_factor = 0.4  # Increased chaos to enhance exploration in search space\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 8)\n\n                if evaluations % 80 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    quantum_factor = np.random.rand(self.dim)  # Quantum-inspired mutation element\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3) + self.chaos_factor * quantum_factor, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Dynamic Variation Control and Quantum-Inspired Mutation for Diverse Exploration.", "configspace": "", "generation": 78, "fitness": 0.20444797086900263, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.40119410160784164, 0.41354904062652653, 0.453324900963746, 0.4013071836039944, 0.4347806064248506, 0.37149137501002805, 0.41066928179362516, 0.38730502587524585, 0.396023612032231, 0.0768714682975804, 0.03603350376240688, 0.05364708429747023, 0.06808684675059906, 0.058520492212635, 0.03854304812248588, 0.055178502289332965, 0.06402609120734837, 0.05214721223527741, 0.11116691405148071, 0.10403238332601539, 0.10725193208710115, 0.10850154012037105, 0.06740390826928011, 0.12273710445859853, 0.10877228145474183, 0.10963771266319322, 0.10940628337385427, 0.09313518353113759, 0.09350318403475033, 0.09636524038965821, 0.10181794871163596, 0.1064155048223645, 0.104490677005034, 0.1138793363182391, 0.1049198626937452, 0.11039020991790782, 0.9783896300779493, 0.9642782386187234, 0.9576349599250255, 0.9586687313067634, 0.9796394367907573, 0.9796735006084493, 0.9244356879799014, 0.8032721380426111, 0.9088610523555305, 0.25527235507547863, 0.2403968597179451, 0.25895067159577134, 0.27708796026772853, 0.23994575629822068, 0.2263040234079755, 0.2037429142347298, 0.20995177136023224, 0.19283108818212158, 0.3028559590387716, 0.29615262761376515, 0.21171841979150163, 0.2549701552327731, 0.3054436418374592, 0.30972268945394377, 0.2824751541236781, 0.25938877023871354, 0.23762733460843566, 0.19525217029233122, 0.22553728710352228, 0.20403203718526697, 0.19014729526412877, 0.1986117174040204, 0.20317883896859568, 0.2385063373069538, 0.16877190785289986, 0.2265982591235981, 0.10416133796109261, 0.021394519286135227, 0.0925612161350593, 0.13774061409299976, 0.13881924142196367, 0.1259303834585731, 0.1294821228305898, 0.1522650554621101, 0.15988811502399747, 0.0030571566876002043, 0.01892867172538304, 0.02878352681092744, 9.999999999998899e-05, 0.03539580989277347, 9.999999999998899e-05, 0.019034883147054593, 0.05862590893291819, 0.050624022387284695, 0.08740423195411873, 0.08333788557164934, 0.10072974726744266, 0.10090158536353044, 0.0458485523328509, 0.09251629678531481, 0.10021629929560427, 0.12679913589048142, 0.08394822579928496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09168112780488369, 0.08261457445707421, 0.08453162474617315, 0.09692026749513061, 0.041919530892724155, 0.0797871307888327, 0.06787942782546419, 0.08074495240043722, 0.05739148447254716, 0.3848610945836105, 0.34618851895847524, 0.3994990690435294, 0.36900155090752085, 0.3860357506645937, 0.3700840054540685, 0.3705899061613098, 0.40055719570836434, 0.37763367477507814, 0.08064671934873635, 0.09706065579406731, 0.09137521250161607, 0.09155864242276546, 0.08952172341943476, 0.08974183893754739, 0.11361603262377828, 0.07607621189106462, 0.09795475079968474, 0.1555151687578884, 0.1728316426530615, 0.15541856535982712, 0.20048229454110877, 0.1924220880024642, 0.13962395463468436, 0.1812284913581409, 0.15686663367330744, 0.15621926612149695, 0.2713202986344764, 0.2728553168856913, 0.2950235378958892, 0.27947260793836926, 0.2595706008784384, 0.21235576320337346, 0.2609891581789566, 0.2781277678529638, 0.2778639501560548, 0.19303758958379535, 0.16440304382386417, 0.21040544765019376, 0.17471035305272875, 0.16025444090994967, 0.16919917328563716, 0.18735325782694012, 0.18989059227726424, 0.2075173596537213, 0.19454969860052984, 0.19412681021246514, 0.1811707597700467, 0.1764457594073039, 0.19150106711702197, 0.20864217737431157, 0.1749167419893929, 0.18431154250287052, 0.18947965378844722, 0.18122715207063966, 0.19801190486726405, 0.19658716288174982, 0.19010561727374942, 0.17843759697087802, 0.1898124779740259, 0.18807435370224912, 0.19320678353155651, 0.21804927141172425, 0.48655543540050294, 0.19069310140564388, 0.42885020729000733, 0.18460043742582144, 0.18132513747460555, 0.1816412618855291, 0.13641273163295542, 0.3685821891895692, 0.18095669383320667, 0.39061714312844054, 0.39470234201104304, 0.164924494736451, 0.595718117472622, 0.1644710617731071, 0.16286688955301143, 0.20665088627410477, 0.2067431735974431, 0.19983436052975656, 0.21319093848288195, 0.19810828829638727, 0.17431981898133564, 0.1834707393401851, 0.19196395636716512, 0.19777542545719373, 0.18300811944234352, 0.18573277721235515, 0.18202248224698847, 0.06724943304363384, 0.0804950543659092, 0.07609461667504114, 0.06647125983145308, 0.07960407604567554, 0.08023762345364593, 0.08543980993384415, 0.07814582502642753, 0.0758497196279031]}, "mutation_prompt": null}
{"id": "2579c12b-7487-4549-a5b6-35c9c988b03a", "solution": "import numpy as np\n\nclass EnhancedDynamicDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.75 + 0.1 * np.random.rand()  # Slightly reduced mutation factor\n        self.crossover_rate = 0.85  # Slightly lowered crossover rate for improved stability\n        self.initial_temperature = 3.0  # Higher initial temperature for more diverse exploration\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.cos(i / 3))  # Multi-layered stochastic cooling\n        self.cooling_rate = 0.95  # More gradual cooling rate\n        self.chaos_factor = 0.4  # Increased chaos factor for enhanced diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Adjusted dynamic mutation frequency\n                    self.mutation_factor = 0.7 + 0.2 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 12)\n\n                if evaluations % 90 == 0:  # Modified condition for adaptive mutation\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedDynamicDE", "description": "Enhanced Dynamic DE with Multi-Layered Stochastic Cooling and Adaptive Mutation for Robust Optimization.", "configspace": "", "generation": 79, "fitness": 0.4745100063394198, "feedback": "The algorithm EnhancedDynamicDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8788440695918965, 0.8927961655505176, 0.9001602429354687, 0.888523924945759, 0.8991169402318894, 0.8937116277179837, 0.885895408339151, 0.8783825010079368, 0.8893058513460186, 0.8045696386082541, 0.7853777596154915, 0.7882608764556358, 0.7828515938878433, 0.7997920908451204, 0.7902782415618537, 0.7909261589012112, 0.8126859700519528, 0.7866424101880016, 0.18409966708493908, 0.48189727214811906, 0.49406804410472616, 0.16436745116045892, 0.4330352688431829, 0.4772288051169995, 0.29702960818371316, 0.2560540134978201, 0.504772083412776, 0.15929095930419868, 0.23899390917597574, 0.20357084873069164, 0.13415699888573185, 0.3126728133928358, 0.2767995076764541, 0.15131128509426894, 0.15425584425037142, 0.1494980870314292, 0.9592722521777141, 0.9674055956044347, 0.967218613528474, 0.9604816783903706, 0.9582008162354687, 0.9345767035869386, 0.9437590418459076, 0.9685164943119771, 0.976064800953161, 0.683180853476286, 0.6874277003321645, 0.6706638668074875, 0.678188933755213, 0.7011909886592718, 0.6543514950006069, 0.6903474763045025, 0.6614818822701272, 0.6886929762320074, 0.8532304936834474, 0.8460370214251566, 0.8196045777784119, 0.8051720767028051, 0.8659221138838764, 0.8641749344620967, 0.5397661698439853, 0.8006153767832846, 0.7733694210912674, 0.6073050757821161, 0.46091298735000497, 0.44419367824773703, 0.5255696486870421, 0.6670462299584261, 0.5930239427913897, 0.53309512876075, 0.612746650660989, 0.5807304620321084, 0.1288211179140799, 0.49517970910324116, 0.47340432667185983, 0.5576252612855264, 0.523755914033676, 0.6335874799019394, 0.6123112415839738, 0.48149383541289603, 0.421220559317514, 0.5442782772278781, 0.45700694061183045, 0.5034004566059821, 0.5238903022267087, 0.4130305156698171, 0.1638493357156542, 0.4745818025778049, 0.5475042824867897, 0.48447042345865443, 0.6379555422736822, 0.6499727979431488, 0.6026103854305933, 0.5623699110850329, 0.5016880096277094, 0.5667929167511488, 0.6731704517608742, 0.6737612248556553, 0.6887166824407498, 0.2722765173328082, 0.08557562059664048, 0.19914664581310082, 0.4467132248778686, 0.41117257618785497, 0.4398126795290992, 0.1769796786302058, 0.2630068896507629, 0.13250722805766257, 0.41634736008007833, 0.430751698183232, 0.43132565856275473, 0.4501250366044808, 0.4771111152900792, 0.47893676640319605, 0.410031814447131, 0.43030371998609795, 0.43479228530037606, 0.7992267325051879, 0.783520096145172, 0.8045876768701395, 0.7794492035219043, 0.7971092095388528, 0.8115692623230909, 0.7651148980414348, 0.771430907429225, 0.8095558533055847, 0.14160823348633245, 0.11106783150399568, 0.1502911671438245, 0.14435811444576008, 0.125016580248135, 0.116305036129293, 0.15123757130948745, 0.20169391099961442, 0.11206138909109964, 0.1481868445955934, 0.2878836487307035, 0.13542776743656937, 0.13893161507227103, 0.3059573563765152, 0.2435314669713632, 0.20709348174837494, 0.15164364955332899, 0.23929003758231115, 0.5602662856114107, 0.5389273641357284, 0.47083097413133246, 0.5000929319906577, 0.46636295474423295, 0.4916540892718234, 0.5942305469038995, 0.5563530236579687, 0.5131710008252982, 0.3765108033423257, 0.33872174992924575, 0.36854663794402054, 0.3333923721898169, 0.4251128260996745, 0.3998164747579751, 0.41962026313398904, 0.3864580041506325, 0.410182551077381, 0.22378373407169838, 0.19587808207053425, 0.21289731634382547, 0.19550453912371135, 0.17962698709716918, 0.19573275391856138, 0.19503990324719012, 0.20257216994303462, 0.19275930160609822, 0.44737629674917956, 0.5188993184793643, 0.5928167209945707, 0.22719030455957956, 0.21769434658630094, 0.5022296858245014, 0.4098104047847283, 0.44298266449828194, 0.4380317333895146, 0.8313243222591279, 0.8566455068561329, 0.8078781929608085, 0.19302891202961114, 0.16422453910712154, 0.7152221242920517, 0.16585374029243394, 0.7470217758303437, 0.7130283649025968, 0.16822950371159373, 0.16893410726631175, 0.16891918550102925, 0.670893050692688, 0.7624891288488039, 0.7777242428289721, 0.21234246017996738, 0.21196979680001027, 0.21190194108709426, 0.19338168963537428, 0.1956977367453402, 0.19021207516707217, 0.18022405204076108, 0.1751342030322146, 0.20738384022155498, 0.18807501770958301, 0.18479695070623936, 0.18292350717571404, 0.07865114873764756, 0.08011708383028127, 0.08281560026757617, 0.08184611702641509, 0.08884631266929832, 0.07775479897178006, 0.07535067270644813, 0.08437524120520612, 0.07658944894751962]}, "mutation_prompt": null}
{"id": "8c7f64e8-9123-4363-aa99-af296c16e1ee", "solution": "import numpy as np\n\nclass RefinedAdvancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Slightly higher variability in mutation factor\n        self.crossover_rate = 0.85  # Modified crossover rate for balance\n        self.initial_temperature = 3.0  # Further increased for initial exploration\n        self.cooling_schedule = lambda t, i: t * (0.80 + 0.15 * np.cos(i / 10))  # Enhanced dynamic cooling\n        self.cooling_rate = 0.90  # Slightly faster cooling rate\n        self.chaos_factor = 0.40  # Increased chaos influence\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.65 + 0.35 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 15)\n\n                if evaluations % 90 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "RefinedAdvancedAdaptiveDE", "description": "Refined Advanced Adaptive DE with Enhanced Stochastic Cooling and Variable Mutation for Improved Convergence.", "configspace": "", "generation": 80, "fitness": 0.4523829384119194, "feedback": "The algorithm RefinedAdvancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8745255478781936, 0.8809835074190645, 0.8670031220855499, 0.883938864975468, 0.8881455841217196, 0.8853471488699398, 0.885401225080996, 0.8884457945914207, 0.8724932188719312, 0.7981714416192509, 0.7991879922819984, 0.7819362080876913, 0.7718344090885974, 0.8020312848212909, 0.7831541300335313, 0.7693863778230943, 0.7844927788959075, 0.7693909147677715, 0.4228156635662943, 0.33153707309522473, 0.31265321032105786, 0.1451499978713533, 0.21703465197460547, 0.49987661200631395, 0.3329907421702062, 0.3301482239155713, 0.3274487921811393, 0.16005339914431027, 0.14929009692717377, 0.37263373091371266, 0.14899702466374243, 0.15718117837965417, 0.16381997972953433, 0.1532988695200973, 0.17303013498472974, 0.2748494817197191, 0.9717500542442221, 0.986345724709619, 0.9863483827852007, 0.9778924697918987, 0.987073816790681, 0.9870794031658296, 0.9802569514941827, 0.9843291951572448, 0.9843423949689402, 0.6532315310556561, 0.6655928597283818, 0.5718795473916389, 0.6753634836581845, 0.6952902989778592, 0.6462767111482224, 0.7173424003741968, 0.6515366208521531, 0.68254448177244, 0.7931990712598322, 0.7851375031051089, 0.8122514253684177, 0.8533187879582332, 0.8125804030846501, 0.6958530598520403, 0.7830462280449937, 0.8538979711574678, 0.821797024012677, 0.5546848529495397, 0.4594686910052542, 0.5730803409020102, 0.5865342160121165, 0.4963221964878165, 0.48455948090019907, 0.5585890686941286, 0.6184972900636865, 0.6079785944012577, 0.533875818851, 0.016607671264420976, 0.5388547702526403, 0.577406270849395, 0.5197014208264017, 0.5961042327843008, 0.5571483428943723, 0.5566090349008583, 0.5461480246242023, 0.5228982427119788, 0.44339679387062547, 0.4130062065244251, 0.43738221384166154, 0.48024559313614534, 0.4547487687689634, 0.47075481671301045, 0.43227048639030485, 0.4671348641078391, 0.6033484197080858, 0.5590399793239027, 0.5634029505597753, 0.6129464665965196, 0.5689577564501265, 0.5627668352856396, 0.6036398421731988, 0.6601807046149336, 0.6519339736136334, 0.11865358476765686, 0.12896601299511, 0.24734000125847777, 0.17206152462676005, 0.38499073131743267, 0.23717415039979828, 0.1669294642035255, 0.15814650095177418, 0.14942945250306727, 0.42549766718681026, 0.37082544206334334, 0.41913437137557286, 0.46961213377379996, 0.4817101198348688, 0.441029578730899, 0.41597997082631166, 0.40893180354997216, 0.36497057891099327, 0.8011223946177972, 0.7688954100430648, 0.7843903425523627, 0.2077728527850522, 0.7717380887380316, 0.7886665000741491, 0.792444930420137, 0.8235733722066844, 0.7668733540999808, 0.1304390571927554, 0.09129971513957369, 0.11463280407030252, 0.10062083927694898, 0.14104692160471533, 0.11385832376583604, 0.11475480055091558, 0.09919894798675266, 0.11770766107988362, 0.10010734589153403, 0.40090417428644953, 0.14145794264527922, 0.14079941370763427, 0.16509162285851275, 0.2482928362214306, 0.13197193201136526, 0.21057417033946335, 0.1810632229611462, 0.5205224599237783, 0.5059860916621347, 0.4632737428855719, 0.4531021057530855, 0.5197552645201402, 0.5760151334046493, 0.5391308408372709, 0.5664019515684107, 0.46673717160584705, 0.4099067029603549, 0.3330927032152048, 0.38967068063521393, 0.33936319048857255, 0.3550561692355947, 0.3531649628249144, 0.46844234784642436, 0.36920224220756326, 0.41144177935781645, 0.18616919123783915, 0.18366890755645726, 0.18489714636329502, 0.17746159516715965, 0.18550211079068335, 0.18263810054786456, 0.1924887382071171, 0.17653326705902983, 0.19039916199669737, 0.3612593974823606, 0.22953656870728278, 0.564980284618261, 0.22383106739231584, 0.20828529903275117, 0.21519589503202297, 0.49850977545804054, 0.20623806790027033, 0.5779557675648997, 0.8453641946336046, 0.8305137136085161, 0.8495132499551206, 0.8201765257298403, 0.1880135435158231, 0.16293817797655852, 0.8068836070517527, 0.17443888429706844, 0.19217258629259626, 0.10812499077805116, 0.2101491751348432, 0.16645957140537704, 0.8298055274002273, 0.20703931797821473, 0.20105817396541648, 0.15439986783283, 0.1553013787723696, 0.20987838644968726, 0.18002050574683204, 0.18543182267220837, 0.18683496811019362, 0.1729816608052146, 0.2108172867844188, 0.2606349532776512, 0.18488862453986232, 0.1855346042382644, 0.17753717357063103, 0.07998870860614749, 0.08803319854930547, 0.07022307162292041, 0.07319966202131434, 0.0770172064446466, 0.07512264502336852, 0.0785710141320165, 0.08182065427228169, 0.07286666496638539]}, "mutation_prompt": null}
{"id": "5f1e2272-d5e0-49fb-8fdf-c6072993c49e", "solution": "import numpy as np\n\nclass AdvancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Slightly increased population size for diversity\n        self.mutation_factor = 0.9 * np.random.rand()  # Increased adaptive mutation factor range\n        self.crossover_rate = 0.85  # Adjusted crossover rate for balance\n        self.initial_temperature = 2.5  # Further increased temperature for exploration\n        self.cooling_schedule = lambda t, i: t * (0.88 + 0.07 * np.cos(i / 5))  # Altered cooling schedule\n        self.cooling_rate = 0.93  # Adjusted cooling rate for prolonged exploration\n        self.chaos_factor = 0.30  # Slightly reduced chaos influence\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 47 == 0:  # Different frequency for dynamic mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 10)\n\n                if evaluations % 75 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    quantum_perturbation = np.random.normal(0, 1, self.dim) * 0.01  # Quantum-inspired perturbation\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3) + quantum_perturbation, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < 0.5 * prob_accept:  # Enhanced probability factor for acceptance\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdvancedAdaptiveDE", "description": "Advanced Adaptive DE with Novel Quantum-inspired Perturbation and Enhanced Selection Strategy for Diverse Exploration.", "configspace": "", "generation": 81, "fitness": 0.32642362943872266, "feedback": "The algorithm AdvancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.6593992303327503, 0.6620975297548766, 0.6557837966994389, 0.7122736734256876, 0.6778587843519227, 0.6640002843960501, 0.6501001433908413, 0.6466653183747573, 0.6494066087244033, 0.2655716994080686, 0.27476148070301887, 0.2698239439818134, 0.27093551586208375, 0.2861440607083331, 0.2911619518767842, 0.3020018628619282, 0.25738025596612146, 0.26064632011608335, 0.20499036500172718, 0.1894498216848698, 0.14332054714250209, 0.19974247166586356, 0.20662994889582675, 0.22349225547319163, 0.2224558513646402, 0.24768302465368075, 0.21981748661590317, 0.2000559680855074, 0.15283140831842157, 0.1184697507271798, 0.13071045356878275, 0.13720989872483025, 0.14285365346722445, 0.15048122362077698, 0.12980035902063702, 0.16971936486561467, 0.9551819214364672, 0.9476815051937911, 0.9731430442571432, 0.9682054609017159, 0.9290619268522404, 0.9604182519561839, 0.9400913873800725, 0.9484545759494382, 0.9534134688382873, 0.40578499964317805, 0.4422165403229068, 0.4362955905509305, 0.44827947524137757, 0.4280894305498245, 0.42538419956657203, 0.43672898319775755, 0.46151179345378046, 0.4462534503990938, 0.7947729281898097, 0.6687606479901717, 0.8018207344615126, 0.8108935906976099, 0.8247588549934829, 0.7941827218847026, 0.8071037952111668, 0.8320220599445529, 0.7983080198415241, 0.28195919992259955, 0.28592423407698364, 0.2587801215261979, 0.31175797513383063, 0.27527884182826945, 0.3638459591354648, 0.3288380800051953, 0.3009729882338208, 0.3010449239363622, 0.27770466042060504, 0.2830587720081815, 0.12241357183199053, 0.2833994382194106, 0.29376128664721435, 0.3045636635598822, 0.30154142106862913, 0.30760545794154215, 0.29646195638457284, 0.17092629229169287, 0.1485175576283142, 0.19870408771794368, 0.1315967638620612, 0.16960389304449186, 0.13633242832127035, 0.1509495698297042, 0.14879029383008924, 0.1554117399911309, 0.2278998577858371, 0.20372117489353447, 0.24704676588169305, 0.21831050183115297, 0.21700767208632166, 0.20064039595123861, 0.22143893554082883, 0.21361983077798874, 0.21519777661050854, 0.04788374513523519, 0.04833910241250472, 0.06406504635663457, 0.0863615986667865, 0.08528104279650739, 0.0641467140364459, 0.07745637921322979, 0.07013787028756036, 0.0639552713257282, 0.1934772872527193, 0.17350508261872022, 0.20190546904878404, 0.19846830062093246, 0.20390262517165014, 0.21199001250671368, 0.19467939595089823, 0.19501616740425498, 0.1905631704295061, 0.5525182465167806, 0.5266415000168715, 0.528390984818986, 0.5506632348895298, 0.5484515080746217, 0.5390174003932322, 0.5273215977643892, 0.521713314431236, 0.5093664787669212, 0.10641525313297084, 0.10678080744022578, 0.13139933874538368, 0.12245159535846029, 0.10804093367205092, 0.10129499264358, 0.11116739412884524, 0.10085580587854004, 0.18496110224188722, 0.3973662710629928, 0.18248776969629, 0.19756669372361602, 0.24561736182192295, 0.24693813018516342, 0.1752187396235726, 0.13916710293445866, 0.18323708723433285, 0.19517269903470136, 0.3668585698729022, 0.3833206396098183, 0.35569571928883004, 0.37433810781977694, 0.3789897357229245, 0.3709993677854966, 0.37354504388367327, 0.3717280520946191, 0.3854098746504261, 0.28658975455888513, 0.2991891198717582, 0.2972997227589502, 0.2995864177333546, 0.2925473755592102, 0.29159446546957435, 0.3035378968670962, 0.2893963061365987, 0.29365559300042365, 0.18868506928028628, 0.18177970391893428, 0.19674136770048845, 0.20411775739006366, 0.1740371550898795, 0.19747457817436698, 0.18908752522938188, 0.1936768362140583, 0.20072297418490936, 0.3202696946217578, 0.3618994259129288, 0.22427081670716675, 0.32931135031164294, 0.2304420902463541, 0.2274216660340066, 0.34136008326556744, 0.3794816494001543, 0.3813555659562946, 0.18414393182747635, 0.1720576321770403, 0.8621574934222331, 0.1689001185371033, 0.8021685173600076, 0.1720803952346498, 0.8467118383060843, 0.7699160904659145, 0.751422199415767, 0.16540924229348897, 0.16553773449471632, 0.2012533875083764, 0.2101408022216006, 0.6599158983100283, 0.20666588621359872, 0.7627962654254289, 0.20981684108128262, 0.20946190383296037, 0.17700952278587323, 0.1780078609565504, 0.2066760842284272, 0.17740695148137842, 0.19246799083122612, 0.17449701265121131, 0.19027977417457154, 0.1840593546413708, 0.19378232770544168, 0.09590100473385932, 0.07220699821154775, 0.07860325274376734, 0.08882318587944993, 0.08367003674237872, 0.07255338127977118, 0.07612030878561926, 0.08014414493062016, 0.07779012759033521]}, "mutation_prompt": null}
{"id": "e17000e9-8ed7-4f77-a077-07b8dfcbc47e", "solution": "import numpy as np\n\nclass EnhancedHierarchicalDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 30\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Refined self-adaptive mutation factor\n        self.crossover_rate = 0.85  # Adjusted crossover rate for better balance\n        self.initial_temperature = 2.5  # Modified for enhanced initial exploration\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.cos(i / 7))  # Probabilistic cooling schedule\n        self.cooling_rate = 0.95  # Fine-tuned cooling rate\n        self.chaos_factor = 0.4  # Enhanced chaos influence for increased diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if np.random.rand() < 0.25:  # Probabilistic adaptive mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 15)\n\n                if evaluations % 100 == 0:  # Adaptive mutation condition with dynamic adjustment\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedHierarchicalDE", "description": "Enhanced Hierarchical DE with Adaptive Chaos and Probabilistic Search Control for Improved Global Optimization.", "configspace": "", "generation": 82, "fitness": 0.43948630202644867, "feedback": "The algorithm EnhancedHierarchicalDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.26.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8545257272940344, 0.8322415346465638, 0.8428053751032308, 0.8595031462133271, 0.8493882263743432, 0.8580623767590451, 0.8624917972059816, 0.8624917972059816, 0.8624917972059816, 0.7495799084634776, 0.7308849091848688, 0.7444046750722004, 0.7364383756379632, 0.7227134343905582, 0.7460279159475534, 0.7466477265703861, 0.7466477265703861, 0.7466477265703861, 0.4150481157229319, 0.24335291258482694, 0.1565830951802596, 0.2150786801576925, 0.44014295495910116, 0.1708738889506216, 0.26751003982521093, 0.20286855723037467, 0.15647559199114003, 0.14135965224809877, 0.14415716684218882, 0.22523256296141958, 0.344265027099786, 0.13990388524628705, 0.1493243268591481, 0.22746209251886929, 0.1352365033426859, 0.20051339525822087, 0.966430422972712, 0.9437914564499632, 0.9512186788715049, 0.9771071021576491, 0.9771066036564557, 0.97710667501173, 0.9740147094642407, 0.9740384119972356, 0.9740347811874314, 0.6296546234113576, 0.5742461918547213, 0.6378960185840503, 0.6080103255485216, 0.594117060093819, 0.6119395523954194, 0.6374037765159808, 0.5657407388079461, 0.5754319601231968, 0.8002589207496652, 0.843041162498468, 0.807982706863217, 0.8222321204154537, 0.7742023791645737, 0.7970327085848216, 0.7996671094621531, 0.7836093355259713, 0.8016829208645119, 0.4703467617068391, 0.4336032758997963, 0.48183135134059696, 0.4508041365607316, 0.4676956704035594, 0.12626054657441532, 0.4536817505424451, 0.5011086847676185, 0.5386880658429349, 0.3649641133402003, 0.3846902888199769, 0.32628475687353664, 0.5172974897645946, 0.421571214928532, 0.4923831500127326, 0.49922334714518435, 0.4143853784907141, 0.3899799430674491, 0.38404814234446527, 0.4555358535211639, 0.4068849878878126, 0.3117923878881854, 0.44000095956252994, 0.4080436460997545, 0.4638827327453673, 0.4636393111145072, 0.4657611865583722, 0.6182611245868815, 0.5311323094779754, 0.5650249316430542, 0.5969039400849444, 0.47250059636762487, 0.5210119397234548, 0.6319723401065585, 0.632875465279917, 0.5306482171131004, 0.11358579403941238, 0.19792306637539836, 0.15366182623566949, 0.2835537742825258, 0.2835537742825258, 0.2835537742825258, 0.15439196409152445, 0.15576419768351446, 0.30110524515679404, 0.34787579908055255, 0.34787579908055255, 0.34787579908055255, 0.4012374373439519, 0.401004163780603, 0.32903594524680124, 0.31831288287157744, 0.35551718523446363, 0.3719639342825648, 0.7542861663308048, 0.7534544945452331, 0.7337968761235183, 0.7296890011209995, 0.716964139828657, 0.72664404287619, 0.7732240029787343, 0.7732240029787343, 0.7732240029787343, 0.11331644992373535, 0.1090399349753145, 0.1148171841400395, 0.13990135398833814, 0.10154556048091057, 0.09126579690560521, 0.12193832637435154, 0.11504061534865173, 0.09545946963706353, 0.16121430003942172, 0.16121430003942172, 0.16121430003942172, 0.3133445592156835, 0.23630513601506786, 0.6363502804665275, 0.18482180799696335, 0.21771215336028993, 0.19268807093201246, 0.4680925198481739, 0.4683873543052315, 0.4832346090973001, 0.48361943890392267, 0.5159632816353978, 0.47401367786906623, 0.5098824699333907, 0.5495645909698514, 0.500411758465164, 0.3264162191250082, 0.3304990858832765, 0.3572500884815527, 0.3426738921828901, 0.30065894984250685, 0.34202285431724766, 0.3679988110799225, 0.3975273035157595, 0.3803260021931407, 0.19807000429088206, 0.18821553021588477, 0.19562508173005577, 0.20044088467005128, 0.20246256056712553, 0.1833724427331379, 0.18231159671729802, 0.18231159671729802, 0.18231159671729802, 0.21093227744132814, 0.4258809769751031, 0.45067554525502707, 0.4398070336445923, 0.4398070336445923, 0.4398070336445923, 0.5086478921130513, 0.5125137130794859, 0.21115964995290037, 0.8141113315079862, 0.8141113315079862, 0.8141113315079862, 0.7640713353389156, 0.767025775193404, 0.7671190247035262, 0.18949822699679753, 0.1888161950259537, 0.1884778431860351, 0.16721877112118833, 0.16672802857882763, 0.16656303094992653, 0.20284944319194198, 0.2065629028970024, 0.20052999778684588, 0.7124583724949054, 0.7685322380740875, 0.20734733981193143, 0.17764238215236328, 0.1829503254511261, 0.18123559342632978, 0.181153032590759, 0.19197510917246918, 0.181444910469021, 0.1830411611905104, 0.1794006515382116, 0.18803273152066247, 0.08170994219867111, 0.07885229086322465, 0.07683096323915484, 0.0801642287800931, 0.08005300781164393, 0.07896346284949174, 0.082856224171457, 0.08261017325297104, 0.08850740051363648]}, "mutation_prompt": null}
{"id": "053b0ddf-c10e-4f1d-b441-f06be4a7e2f9", "solution": "import numpy as np\n\nclass EnhancedChaosInspiredDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Empowered self-adaptive mutation factor\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate for precision\n        self.initial_temperature = 2.5  # Enhanced initial temperature for expansive search\n        self.cooling_schedule = lambda t, i: t * (0.8 + 0.15 * np.cos(i / 7))  # Refined stochastic cooling schedule\n        self.cooling_rate = 0.88  # Further adjusted cooling rate for balance\n        self.chaos_factor = 0.4  # Increased chaos influence for better diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Increased frequency for dynamic mutation adjustments\n                    self.mutation_factor = 0.65 + 0.35 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 12)\n\n                if evaluations % 80 == 0:  # Altered condition for best vector-driven adaptive mutation\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x3 - x2), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x3 - x2), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedChaosInspiredDE", "description": "Enhanced Chaos-Inspired DE with Adaptive Temperature Modulation and Robust Diversity Control for Superior Global Optimization.", "configspace": "", "generation": 83, "fitness": 0.42063104398899176, "feedback": "The algorithm EnhancedChaosInspiredDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8454944934048004, 0.8537647179679199, 0.8268839485858389, 0.8342866938998461, 0.8450062102109134, 0.8582421594550196, 0.8518188350742565, 0.8344229144897284, 0.8606638134519701, 0.7658302634985718, 0.7533062005057717, 0.7386575618680831, 0.7375877030769917, 0.7511420745133321, 0.7204537890473401, 0.7317339122183958, 0.7285493611563996, 0.7389905051954411, 0.1685131751186284, 0.229334886561938, 0.21275306417560902, 0.11875483506047535, 0.21191661534227313, 0.11501696323139243, 0.15433254102319094, 0.17676348940696607, 0.11287322554100954, 0.12480512925037568, 0.1164947173809322, 0.1039342031876862, 0.10400434870497866, 0.12060096037910484, 0.15566877157244086, 0.12426195246918614, 0.13034087727705357, 0.12640239415291976, 0.9613315124824181, 0.9778244905058308, 0.9771885528868852, 0.9721969937681623, 0.9660937239707572, 0.9640012858593379, 0.9689280484383297, 0.9750635530153062, 0.9643158514317711, 0.5936658341504076, 0.5814310439000909, 0.5634393229983281, 0.579439625184061, 0.5503166516012262, 0.5336412236958501, 0.6160544176942726, 0.5774320258551888, 0.6391861558246144, 0.8132003888316923, 0.7810183724172768, 0.4868159192158349, 0.8277301265666259, 0.8164635130586109, 0.7480213247676214, 0.7810455819436215, 0.814823333735255, 0.8171388761190426, 0.4688898309597713, 0.3907057523337606, 0.4447518366466999, 0.4308946848587606, 0.45263987114264126, 0.41786013942162836, 0.512221203929174, 0.5043181124118361, 0.4503202150128589, 0.021702774775125944, 0.009919574380981566, 0.06942055753957699, 0.46103662182238137, 0.34820803122985466, 0.41338976786126824, 0.4640235170420879, 0.4309043955571118, 0.5057409180314028, 0.42187188946773546, 0.36159102179261005, 0.4358822925253808, 0.353078686271699, 0.3546626982296782, 0.5076928293390929, 0.3102000351925275, 0.35302119331208937, 0.33529435406375274, 0.5330837029325699, 0.48490222543578143, 0.5248041042215651, 0.47431127994222466, 0.5501823650239049, 0.4979683329303567, 0.5557733320667779, 0.6081518290405494, 0.5656628855369288, 0.07673258114945436, 0.10433467228211213, 0.09176617503354068, 0.3001402214189284, 0.23211566178370635, 0.3211172265427199, 0.2016525362831625, 0.22182526232505895, 0.19933742129181486, 0.330945437447995, 0.34994511770050274, 0.34386533580530854, 0.3530688261425452, 0.3552941262779429, 0.37957698955882757, 0.3342125009822239, 0.34907219776215714, 0.2857723307883656, 0.7405252543964003, 0.6925604315136372, 0.7394512373156635, 0.7529283118796879, 0.7059586671793789, 0.7331170143792713, 0.7419747762333355, 0.7226759923175803, 0.7270208083269611, 0.11280634819034785, 0.09608562259060471, 0.11844099141196762, 0.11155719725400759, 0.11043596573277392, 0.11234666084206368, 0.09442716704534981, 0.11645406214297704, 0.08623156588330372, 0.16821056257657985, 0.4396702275244383, 0.1554611166455825, 0.28243028775203605, 0.2752420949164939, 0.247265900572599, 0.48649628913757825, 0.2319446948110757, 0.19858632854361402, 0.47322162474386065, 0.43609902198352857, 0.4876523354186777, 0.443573851967499, 0.39788194515021846, 0.4316617089514785, 0.502935371868737, 0.5043405460667396, 0.5049698904802712, 0.3232801942029476, 0.3804147881501422, 0.3348182712399964, 0.3036051817068083, 0.3101300389843965, 0.3073554334081656, 0.3228488787082545, 0.316426130001374, 0.32934502893672835, 0.1887830169709841, 0.17186415567479907, 0.20042387704649023, 0.19792122962639058, 0.18920660770827935, 0.19001025255484127, 0.22253353660434405, 0.19470703854670102, 0.18209229107952796, 0.4350987449772511, 0.23654417900716884, 0.45358588876024575, 0.44251494891860244, 0.25312841082753335, 0.29435563579769497, 0.26061682962340926, 0.3750365006801193, 0.45379169244904616, 0.8211427409557135, 0.788767636551226, 0.8376349582282031, 0.8385519635354063, 0.191043192705043, 0.805175491427977, 0.7417844602637929, 0.7685624727005707, 0.7484413958123559, 0.7946608445306682, 0.19898991284734646, 0.1672155720479368, 0.16593752504052683, 0.20045529417830898, 0.1651290350478103, 0.207014751548809, 0.20447836866720104, 0.21238113195883757, 0.17635978067963964, 0.17771859871017337, 0.1850205847885652, 0.18873898824543733, 0.19231796977204008, 0.19311433470086437, 0.17765525532334248, 0.172334373528381, 0.1870681415798724, 0.07476058203283809, 0.07783360941568718, 0.07950778306781559, 0.07197490337382428, 0.07518783877184854, 0.08857296584016006, 0.07873096150809511, 0.08129450293965235, 0.0803943831239583]}, "mutation_prompt": null}
{"id": "fdc473c4-1722-4928-8730-733fc16bada6", "solution": "import numpy as np\n\nclass AdaptiveQuantumDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Quantum-inspired mutation factor\n        self.crossover_rate = 0.85  # Tuning for balance in exploration\n        self.initial_temperature = 3.0  # Enhanced for extensive search at start\n        self.cooling_schedule = lambda t, i: t * np.exp(-0.02 * i)  # Exponential cooling schedule\n        self.cooling_rate = 0.95  # Adjusted cooling rate\n        self.chaos_factor = 0.3  # Quantum chaos influence for diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 10)\n\n                if evaluations % 90 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveQuantumDE", "description": "Adaptive Quantum-Inspired Differential Evolution with Dynamic Chaos and Stochastic Cooling for Enhanced Global Search.", "configspace": "", "generation": 84, "fitness": 0.47720768783332673, "feedback": "The algorithm AdaptiveQuantumDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8825729208011643, 0.8760153281697222, 0.8869901396064843, 0.8792256821707535, 0.8757407653308684, 0.8861811296237574, 0.8752901870756671, 0.8689404569810839, 0.8667717855534972, 0.7946373142635152, 0.7944848659216569, 0.7978662393499056, 0.8044741619472857, 0.7869502361641904, 0.7926145033602379, 0.7747386651395876, 0.7771140679199393, 0.8042778781974151, 0.3152515915099723, 0.5546249747783447, 0.27635886350285777, 0.3601510336037128, 0.4188799493677954, 0.12906289238011026, 0.2919285937471664, 0.134185100377747, 0.24865556436211744, 0.1626478714358054, 0.09273412518120927, 0.2441621316843685, 0.15316026758198253, 0.14440295570654138, 0.1493019498071948, 0.353015954280846, 0.14889830965736606, 0.32840856924885287, 0.9318738233956879, 0.948531984154834, 0.9437654857260085, 0.9667785002615424, 0.9679695269873206, 0.9680555428401936, 0.9393698960516041, 0.9513089612278581, 0.9297602928416984, 0.6132874324745663, 0.6542291426488279, 0.6500748238386937, 0.6658946312006216, 0.6579422197024525, 0.6848717074516348, 0.6973057794435826, 0.6638056699657426, 0.6870883925183718, 0.7794137659975657, 0.817661710745467, 0.8223312051442362, 0.8659232942718815, 0.8643840274440117, 0.8669282242058806, 0.8623360422252044, 0.8416262613579852, 0.8600410293799907, 0.6771404523941109, 0.5479184672758881, 0.6275745758206999, 0.5757674228765491, 0.5758839492501631, 0.3677477061228386, 0.5914539596637429, 0.4359020949316589, 0.5464139432135048, 0.17408216554822042, 0.6407458511394972, 0.38028786826172556, 0.5150757082743975, 0.5532232740728213, 0.5956926244981593, 0.3977517301354816, 0.6645724694097477, 0.46905408085186473, 0.5463719129771212, 0.49828022435123676, 0.5933465444710209, 0.4777305180831949, 0.5004159874338759, 0.4630981574487357, 0.5570897790280367, 0.5841523659031407, 0.47628770977176393, 0.6726713353991878, 0.6289390064819855, 0.5335425444993157, 0.5896573019290516, 0.6096699747603671, 0.5822398552447952, 0.6952212671691893, 0.6610486403579514, 0.702408040249525, 0.06840525614081705, 0.22878240362030533, 0.08124155856371729, 0.2265093823028831, 0.4360424307941704, 0.2521261304505863, 0.260711265897421, 0.30954549139190735, 0.14893116406800488, 0.36222338930254294, 0.4143256585584204, 0.39913333653475835, 0.42057387406446456, 0.4227228186862654, 0.44514136812496485, 0.37837681349350083, 0.39268407683447637, 0.46880253027185403, 0.7672809789101448, 0.7770248240609736, 0.7992342177586704, 0.7777547550807318, 0.8000475735165082, 0.7782750453723073, 0.7747101796284892, 0.8052020405243973, 0.7089866747495118, 0.105276776877962, 0.12600500102704604, 0.12499641695029373, 0.10645607909861465, 0.10150415678511349, 0.10826667066508111, 0.1324923598277744, 0.13474894528312342, 0.09570621009804015, 0.4726338230919137, 0.19996361633604154, 0.1435099611008156, 0.17335543057545222, 0.4231718615828898, 0.3235209541772832, 0.2318828360208881, 0.170864110646896, 0.2194660338201493, 0.49548704604515226, 0.5515390799874197, 0.5322665407564773, 0.48070201698502557, 0.47127490449866005, 0.4579443736445804, 0.5566364075804007, 0.6078254409603585, 0.555097835271195, 0.37677945367331345, 0.4035846127580527, 0.38496257289459646, 0.33505788883113197, 0.34470640243990547, 0.391724070553392, 0.390513723624594, 0.34319678018445154, 0.4526023568909897, 0.19792800295187019, 0.20857664787492514, 0.2101073028891658, 0.20375824468298454, 0.18925674024369132, 0.2263826722821477, 0.19952305526424507, 0.18979993689651786, 0.19568202766075815, 0.6229438714136251, 0.5521123312102092, 0.6047605138576762, 0.23901052726874472, 0.6556943561651486, 0.49465720565779814, 0.21593607453661523, 0.21120057935300807, 0.5450472416274076, 0.8169484675923174, 0.8504379527267643, 0.8709423077598356, 0.19840991858360757, 0.8160138763360365, 0.7527619899216467, 0.16421427246867037, 0.8738563903432084, 0.8270594016023186, 0.16733621755171502, 0.16718101336168456, 0.7009035708146785, 0.8156891397104885, 0.20366920533324973, 0.16271958304925427, 0.20832355592511487, 0.3462271644092523, 0.2108463811502036, 0.18219758390748708, 0.18855317695666285, 0.19001888918337384, 0.18031343197203842, 0.17799897018518418, 0.19069948365909173, 0.17800807627858484, 0.18683706148978685, 0.18953379440342066, 0.07725389438706531, 0.07886163854230255, 0.08730192047015628, 0.08550325445677687, 0.07599611930300854, 0.07696520206113633, 0.08265983045596803, 0.08269963464130192, 0.0772869703260225]}, "mutation_prompt": null}
{"id": "04d98bf8-edf6-4bb7-b15b-e3929c02a539", "solution": "import numpy as np\n\nclass AdvancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8 + 0.2 * np.random.rand()  # Self-adaptive mutation factor\n        self.crossover_rate = 0.9  # Improved crossover rate for better exploration\n        self.initial_temperature = 2.0  # Increased for broader search at start\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i / 5))  # Stochastic cooling schedule\n        self.cooling_rate = 0.92  # Adjusted cooling rate\n        self.chaos_factor = 0.35  # Altered chaos influence for diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 55 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.6 + 0.3 * np.random.rand() + self.chaos_factor * np.cos(evaluations / 10)\n\n                if evaluations % 85 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdvancedAdaptiveDE", "description": "Advanced Adaptive DE with Stochastic Temperature Control and Self-Adaptive Chaos-Induced Dynamic Mutation for Efficient Search.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.9025800775981403, 0.8855841576926933, 0.8769158567418172, 0.8943573832283054, 0.8932248550282035, 0.8959430482197105, 0.870300634490522, 0.8881824682571544, 0.8964680036287952, 0.8119085497146807, 0.7941830852686032, 0.8037049347866595, 0.8281358155660998, 0.8050354179115028, 0.7807871611057007, 0.8282579022755829, 0.812044454188801, 0.7982775133460376, 0.37993995780247325, 0.1697009871730113, 0.12197160352125358, 0.2913330316046062, 0.15748154722409768, 0.19410658253896929, 0.35832809311456837, 0.15004907295559455, 0.33331692402531865, 0.15868635314635815, 0.47717027388773503, 0.3996330234453648, 0.1417173182676259, 0.2913456200300877, 0.1449216924507436, 0.11455391476321453, 0.14332020548672353, 0.13648983236614654, 0.9598634458081092, 0.9632912132831966, 0.9539551728249802, 0.9827500409665637, 0.9745352562158883, 0.9745805317895424, 0.9531692030848967, 0.9701550170520921, 0.9611400000123838, 0.687855826921322, 0.6965925607371453, 0.7048127023489771, 0.6888907996735312, 0.7015780159919247, 0.7046420729346901, 0.7603945460414809, 0.6773316940514542, 0.7141442319858031, 0.8109882033795068, 0.8495746367808412, 0.8392984480487149, 0.9045564549122712, 0.8752784010443792, 0.8720898787052102, 0.8397666420222333, 0.8695530637925136, 0.8503524223575436, 0.6053348455271972, 0.4101094155533207, 0.6993206751727465, 0.5100247146737631, 0.5386039100679434, 0.6119757813816473, 0.7076266853457487, 0.6080606201851892, 0.5213824600742434, 0.016539969346138106, 0.010134515115051368, 0.010078832088155965, 0.5650893008805042, 0.6784984576275459, 0.5854736381587122, 0.6326076218624384, 0.5479950752082288, 0.508327613899602, 0.6799869883819805, 0.6205875239630115, 0.3307387907032545, 0.6724144051660885, 0.6799397619173425, 0.6620642589862404, 0.6445075038864293, 0.6648113660452842, 0.6704891847314336, 0.5541596689702495, 0.38032744659041806, 0.7501106909295574, 0.15102614800271674, 0.7106461917625163, 0.7227117769160545, 0.7273988022925958, 0.7324133338119397, 0.7104525106341177, 0.1938217813617733, 9.999999999998899e-05, 9.999999999998899e-05, 0.2133406059116496, 0.5917776310952377, 0.4508905121876038, 0.31828828487987204, 0.24466925923349114, 0.2357544451139072, 0.4992772535706642, 0.47708455822854234, 0.4219258194269849, 0.5820810562579877, 0.5966543466495959, 0.635685779567681, 0.6231293368698088, 0.41732304279093846, 0.5511500375963607, 0.8279157759924782, 0.841965320780289, 0.8059377829107969, 0.8608578629586991, 0.8600300459584983, 0.8621044065084924, 0.8041523364746466, 0.8528156476684334, 0.7283907334180653, 0.12460809194590305, 0.0971348776957146, 0.12427225022131383, 0.12271204758826681, 0.12449348590634968, 0.3250062687905977, 0.12536259682193973, 0.1344015610958713, 0.10548915660341174, 0.18339956502300803, 0.13901501970722496, 0.6373992926658281, 0.15674818511477973, 0.22332453890340498, 0.2658580089707546, 0.1868345046502069, 0.3612186534582591, 0.2951178403620185, 0.6420715164525979, 0.6112814622635974, 0.6382136456685963, 0.5733129083347722, 0.6077050731816187, 0.555640346837547, 0.641991503760803, 0.6151024104410993, 0.6018882574784572, 0.3924784892702684, 0.5272904856586456, 0.511656157792223, 0.41991268526400294, 0.35902303087070164, 0.5182163649036298, 0.46769083438436954, 0.4970455550271681, 0.48720918402186775, 0.1970123066653433, 0.1754109428988706, 0.20218955428446794, 0.17127368147846467, 0.24424127108879023, 0.1846117926773847, 0.1898650040741131, 0.19390194113728043, 0.18336645585210876, 0.5125321339877273, 0.6882462068695927, 0.3973485952729092, 0.20478588487511562, 0.24199127126807984, 0.7785148408493197, 0.6476871288892085, 0.23823871713657796, 0.6086866752838826, 0.9104564744876764, 0.847904563624782, 0.8402970650044772, 0.8572730728207536, 0.8600885156325158, 0.176974868165635, 0.1827225959114155, 0.1530844243187678, 0.20899143828308198, 0.208254344090826, 0.16786944268346848, 0.16107488133635184, 0.2049512608037073, 0.7608771053616408, 0.8349190543752535, 0.8703685872160727, 0.15437436135955795, 0.15404467505868236, 0.18459380418405225, 0.18544121324795626, 0.16282299968466452, 0.17704307319148194, 0.15980718660889326, 0.17441057975191177, 0.1975596730477015, 0.170654629501942, 0.18110159988997154, 0.0892646823389397, 0.08895787946902078, 0.08275196072600322, 0.08227690934407839, 0.08254940782797471, 0.09305613621478281, 0.08737978673299551, 0.10882373511328802, 0.08147986672871155]}, "mutation_prompt": null}
{"id": "7f99ac31-4b66-435f-8c4c-c946958ebd6e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 22  # Slightly increased population size for more diversity\n        self.mutation_factor = 0.85 + 0.15 * np.random.rand()  # Slightly narrowed mutation factor range\n        self.crossover_rate = 0.88  # Adjusted crossover rate for exploration-exploitation balance\n        self.initial_temperature = 2.5  # Higher initial temperature for broader initial search\n        self.cooling_schedule = lambda t, i: t * (0.83 + 0.12 * np.sin(i * np.pi / 10))  # Modified stochastic cooling schedule\n        self.cooling_rate = 0.9  # Lower cooling rate for gradual cooling\n        self.chaos_factor = 0.3  # Adjusted chaos influence for maintaining diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if np.random.rand() < 0.25:  # Introduced randomness in mutation factor adjustment\n                    self.mutation_factor = 0.65 + 0.25 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 15)\n\n                if evaluations % 75 == 0:  # Changed frequency for adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Chaotic Dynamic Adaptation and Stochastic Cooling for Robust Black Box Optimization.", "configspace": "", "generation": 86, "fitness": 0.4640409369596374, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8743176350319573, 0.8743176350319573, 0.8743176350319573, 0.878951465507915, 0.878951465507915, 0.878951465507915, 0.8708928731940906, 0.8708928731940906, 0.8708928731940906, 0.7872045641610479, 0.7851578628237784, 0.7762252153719396, 0.7529182130508587, 0.7493928262417417, 0.7493928262417417, 0.7585582886473693, 0.7585582886473693, 0.7585582886473693, 0.3425992026582293, 0.3425992026582293, 0.3425992026582293, 0.31147398825958517, 0.2172987501834398, 0.12142676547448206, 0.18282852408253603, 0.18282852408253603, 0.18282852408253603, 0.27109816023144395, 0.27109816023144395, 0.27109816023144395, 0.13410788788316308, 0.13410788788316308, 0.13410788788316308, 0.14254373369836792, 0.1589950076965415, 0.24881678956206243, 0.9833573525301564, 0.9833573525301564, 0.9833573525301564, 0.9765536601083914, 0.9814999176417416, 0.9815019407491729, 0.9824806329707005, 0.982480594090207, 0.982480599683226, 0.6802826289559964, 0.6802826289559964, 0.6802826289559964, 0.6163188466212814, 0.6217375210525018, 0.6194228678036986, 0.665209872541177, 0.665209872541177, 0.665209872541177, 0.7547015467114451, 0.7547015467114451, 0.7547015467114451, 0.8493580241254537, 0.8493580241254537, 0.8493580241254537, 0.8050354831642189, 0.8050354831642189, 0.8050354831642189, 0.5977209571093492, 0.5977209571093492, 0.5977209571093492, 0.5782585592328959, 0.5782585592328959, 0.5782585592328959, 0.4130241284732018, 0.4130241284732018, 0.4130241284732018, 0.6185887362529481, 0.6185887362529481, 0.6185887362529481, 0.3905918461793628, 0.3905918461793628, 0.3905918461793628, 0.5199778412972921, 0.5199778412972921, 0.5199778412972921, 0.5157731869862088, 0.5157731869862088, 0.5157731869862088, 0.5660229997645998, 0.5660229997645998, 0.5660229997645998, 0.4849486528090584, 0.4849486528090584, 0.4849486528090584, 0.674796687021169, 0.6731528987010997, 0.6584637457191587, 0.6512637135907544, 0.6512637135907544, 0.6512637135907544, 0.7121772266889247, 0.7121772266889247, 0.7121772266889247, 0.10789808924865918, 0.10789808924865918, 0.10789808924865918, 0.45759880148434773, 0.45759880148434773, 0.45759880148434773, 0.30806703424107085, 0.30806703424107085, 0.30806703424107085, 0.470326360784434, 0.43256158317710924, 0.44878899050193943, 0.47637240784006607, 0.47637240784006607, 0.47637240784006607, 0.4622358303805906, 0.4622358303805906, 0.4622358303805906, 0.8242515852043812, 0.8242515852043812, 0.8242515852043812, 0.7829043858415239, 0.7829043858415239, 0.7829043858415239, 0.8052412410207744, 0.8052412410207744, 0.8052412410207744, 0.11234216104201111, 0.11234216104201111, 0.11234216104201111, 0.09681148635721182, 0.09681148635721182, 0.09681148635721182, 0.1026111992932901, 0.1026111992932901, 0.1026111992932901, 0.5640766504512296, 0.5640766504512296, 0.5640766504512296, 0.20591740879230025, 0.20591740879230025, 0.20591740879230025, 0.17794501455109335, 0.17794501455109335, 0.17794501455109335, 0.45345639778287106, 0.48856709533086695, 0.44034237038122237, 0.5122197538937552, 0.5122197538937552, 0.5122197538937552, 0.507627876548433, 0.507627876548433, 0.507627876548433, 0.378685128883954, 0.35671120335127293, 0.3383394537181271, 0.3929454864730586, 0.3929454864730586, 0.3929454864730586, 0.43319068448350584, 0.4294551044389684, 0.4294551044389684, 0.1838830600818362, 0.1838830600818362, 0.1838830600818362, 0.19915346347078355, 0.19915346347078355, 0.19915346347078355, 0.21856765807783063, 0.21856765807783063, 0.21856765807783063, 0.20609086917637953, 0.20609086917637953, 0.20609086917637953, 0.2045246788083226, 0.2045246788083226, 0.2045246788083226, 0.4942878874145865, 0.4942878874145865, 0.4942878874145865, 0.8587806315580429, 0.8587806315580429, 0.8587806315580429, 0.15638887486494446, 0.15638887486494446, 0.15638887486494446, 0.6489937024829102, 0.6489937024829102, 0.6489937024829102, 0.16785890367441114, 0.16785890367441114, 0.16785890367441114, 0.20500747585150791, 0.20500747585150791, 0.20500747585150791, 0.20732852615884034, 0.20432304871120388, 0.20433125746635306, 0.18654304555362278, 0.18636891186931226, 0.18463185525061032, 0.1929761269809619, 0.1755732030456938, 0.1755732030456938, 0.18434900603971838, 0.18434900603971838, 0.18434900603971838, 0.07677274548709556, 0.07677274548709556, 0.07677274548709556, 0.0769642859671461, 0.0769642859671461, 0.0769642859671461, 0.07979212063759511, 0.07438790227671999, 0.07438790227671999]}, "mutation_prompt": null}
{"id": "9e4cb4b6-a371-438a-a9ff-8afd0c78db53", "solution": "import numpy as np\n\nclass EnhancedCoevolutionaryDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()\n        self.crossover_rate = 0.85\n        self.initial_temperature = 2.5\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.cos(i / 7))\n        self.cooling_rate = 0.95\n        self.chaos_factor = 0.4\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 40 == 0:\n                    self.mutation_factor = 0.6 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 12)\n\n                if evaluations % 60 == 0:\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedCoevolutionaryDE", "description": "Enhanced Coevolutionary DE with Adaptive Multi-Niche Temperature Control and Chaotic Mutation for Diverse Exploration and Robust Optimization.", "configspace": "", "generation": 87, "fitness": 0.4344820923090236, "feedback": "The algorithm EnhancedCoevolutionaryDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8390739857591945, 0.8580347633386431, 0.8554849558728541, 0.8547073840564242, 0.8547411999911693, 0.8518978225384641, 0.8580255747296226, 0.8417248005247872, 0.8553356663794534, 0.7566904580598306, 0.7565010154967768, 0.737069869992885, 0.7511754330276129, 0.7327715444810776, 0.7296487022049396, 0.7342458697727638, 0.7185312526137899, 0.7495017027757275, 0.4060228770261559, 0.34516100764629665, 0.23432674423496525, 0.16439435606815755, 0.13722064207064943, 0.17617763078260817, 0.15091587490872627, 0.48868395389913943, 0.1294046825835492, 0.1481241650815397, 0.13711849546211252, 0.12645521444570873, 0.11438301794967576, 0.14983853922638102, 0.13617410811905173, 0.14910211681673868, 0.1568810005090121, 0.13213810277873184, 0.9639920800690585, 0.9797592658682719, 0.9280363136880935, 0.9871891999552966, 0.9911999543722305, 0.9911998991616534, 0.9679018544951505, 0.9720508940557154, 0.9720506059959072, 0.6162497550425252, 0.6284634796577178, 0.6026600739664543, 0.6019403720629943, 0.5964330310620698, 0.672873607815901, 0.598542013327461, 0.6241935837099379, 0.6132033915737345, 0.8044384249650158, 0.755142100944237, 0.7947030570380422, 0.7846716513752976, 0.8173785639615649, 0.7951409229135594, 0.8097200146054884, 0.775817088067603, 0.7988036668547108, 0.5086316351063369, 0.12985152682855727, 0.39897294219735124, 0.4803546579958954, 0.5076200683736483, 0.46177157156487103, 0.580582854856037, 0.3869293554028371, 0.4811560308676749, 0.24155513640677906, 0.05300891766597993, 0.02182011789090177, 0.5185711569976252, 0.48363664211403623, 0.5414869669440481, 0.4258568329955964, 0.5574867666595633, 0.5263532264272353, 0.40222701769175684, 0.42513124831616855, 0.45911279867439037, 0.36792233542477437, 0.4059995059956034, 0.4574008633778456, 0.5037171466522417, 0.41363715915271004, 0.4726812634323999, 0.5523965173573884, 0.5575941204989873, 0.5527844703681182, 0.6051243902376353, 0.5440043106804451, 0.5429794340284231, 0.6543433461084832, 0.6079088203911074, 0.6256962835442925, 0.12817717876701396, 0.26415073067237316, 0.0744536538302375, 0.11699823619504535, 0.33198467844167745, 0.2604760530683663, 0.14775771880988287, 0.12051526238539267, 0.11137922874564321, 0.3249247738809974, 0.33430034904264216, 0.3753967662515264, 0.37409213040052514, 0.3997460265261329, 0.4210383559508142, 0.3565591792945231, 0.3648376715453917, 0.3633711157865769, 0.7431151809618477, 0.7887148203368388, 0.7655103350231321, 0.7279684625217444, 0.7674615209582851, 0.7402526431081831, 0.78772965608587, 0.7623729171398336, 0.7446171903400852, 0.12470611562808698, 0.1045617633068665, 0.12511605505946322, 0.1069037642321593, 0.13939429531214786, 0.08231650010811609, 0.09554361440221326, 0.09912176667396067, 0.11231258391200805, 0.17114235889942553, 0.18708747704868722, 0.14746851335740596, 0.14522448013703615, 0.20815038647113848, 0.2961155500132291, 0.17395520285042332, 0.21038156531460417, 0.1556604803751528, 0.44973101350051237, 0.42485182942752087, 0.47693004472495426, 0.49119239767121614, 0.46781856619214646, 0.38610232682410817, 0.523786447999694, 0.47652465894080764, 0.43899657473785525, 0.3162173376723949, 0.34075881965988697, 0.31301351791134635, 0.27607398100955305, 0.315633581323122, 0.28901846061394976, 0.3701496188550062, 0.3417905953018985, 0.3096479285788837, 0.18870011899197936, 0.18894651318082178, 0.18352880105936997, 0.18150409848101412, 0.1870202104483587, 0.18473202034466618, 0.19567758342892483, 0.17794464317512482, 0.2015539084513931, 0.22380370369648117, 0.43043098914957145, 0.5251609371274961, 0.5185718965943881, 0.21504392657980298, 0.3509450257748441, 0.42014152537821925, 0.5952529428951647, 0.4128335154804318, 0.7733836598260854, 0.8173898723730363, 0.8278398713453009, 0.18784892547695275, 0.7679676824713475, 0.8388925192914864, 0.8183234716241556, 0.807153739472396, 0.824736656813392, 0.20199150504490715, 0.2063024892371893, 0.16685668913692475, 0.20441197254078036, 0.207105860359446, 0.7413393671168695, 0.15323430617277933, 0.20744146445374123, 0.2063475413934741, 0.17981152472948492, 0.2012890844597971, 0.18569175241647862, 0.19459431617855072, 0.18406044226783402, 0.1692552863632193, 0.18206136664116535, 0.18033772655632985, 0.20417056232891062, 0.07044807934375752, 0.07671084440377363, 0.07542265892220534, 0.0842808545945527, 0.0785289778733057, 0.08606391376931877, 0.08657087329604185, 0.08449759191384909, 0.07492728112600067]}, "mutation_prompt": null}
{"id": "18e2d90c-095d-469c-88d6-fd874d6fabc3", "solution": "import numpy as np\n\nclass AdvancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8 + 0.2 * np.random.rand()  # Self-adaptive mutation factor\n        self.crossover_rate = 0.9  # Improved crossover rate for better exploration\n        self.initial_temperature = 2.0  # Increased for broader search at start\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i / 5))  # Stochastic cooling schedule\n        self.cooling_rate = 0.92  # Adjusted cooling rate\n        self.chaos_factor = 0.35  # Altered chaos influence for diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 55 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.6 + 0.3 * np.random.rand() + self.chaos_factor * np.cos(evaluations / 10)\n\n                if evaluations % 85 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdvancedAdaptiveDE", "description": "Advanced Adaptive DE with Stochastic Temperature Control and Self-Adaptive Chaos-Induced Dynamic Mutation for Efficient Search.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.9025800775981403, 0.8855841576926933, 0.8769158567418172, 0.8943573832283054, 0.8932248550282035, 0.8959430482197105, 0.870300634490522, 0.8881824682571544, 0.8964680036287952, 0.8119085497146807, 0.7941830852686032, 0.8037049347866595, 0.8281358155660998, 0.8050354179115028, 0.7807871611057007, 0.8282579022755829, 0.812044454188801, 0.7982775133460376, 0.37993995780247325, 0.1697009871730113, 0.12197160352125358, 0.2913330316046062, 0.15748154722409768, 0.19410658253896929, 0.35832809311456837, 0.15004907295559455, 0.33331692402531865, 0.15868635314635815, 0.47717027388773503, 0.3996330234453648, 0.1417173182676259, 0.2913456200300877, 0.1449216924507436, 0.11455391476321453, 0.14332020548672353, 0.13648983236614654, 0.9598634458081092, 0.9632912132831966, 0.9539551728249802, 0.9827500409665637, 0.9745352562158883, 0.9745805317895424, 0.9531692030848967, 0.9701550170520921, 0.9611400000123838, 0.687855826921322, 0.6965925607371453, 0.7048127023489771, 0.6888907996735312, 0.7015780159919247, 0.7046420729346901, 0.7603945460414809, 0.6773316940514542, 0.7141442319858031, 0.8109882033795068, 0.8495746367808412, 0.8392984480487149, 0.9045564549122712, 0.8752784010443792, 0.8720898787052102, 0.8397666420222333, 0.8695530637925136, 0.8503524223575436, 0.6053348455271972, 0.4101094155533207, 0.6993206751727465, 0.5100247146737631, 0.5386039100679434, 0.6119757813816473, 0.7076266853457487, 0.6080606201851892, 0.5213824600742434, 0.016539969346138106, 0.010134515115051368, 0.010078832088155965, 0.5650893008805042, 0.6784984576275459, 0.5854736381587122, 0.6326076218624384, 0.5479950752082288, 0.508327613899602, 0.6799869883819805, 0.6205875239630115, 0.3307387907032545, 0.6724144051660885, 0.6799397619173425, 0.6620642589862404, 0.6445075038864293, 0.6648113660452842, 0.6704891847314336, 0.5541596689702495, 0.38032744659041806, 0.7501106909295574, 0.15102614800271674, 0.7106461917625163, 0.7227117769160545, 0.7273988022925958, 0.7324133338119397, 0.7104525106341177, 0.1938217813617733, 9.999999999998899e-05, 9.999999999998899e-05, 0.2133406059116496, 0.5917776310952377, 0.4508905121876038, 0.31828828487987204, 0.24466925923349114, 0.2357544451139072, 0.4992772535706642, 0.47708455822854234, 0.4219258194269849, 0.5820810562579877, 0.5966543466495959, 0.635685779567681, 0.6231293368698088, 0.41732304279093846, 0.5511500375963607, 0.8279157759924782, 0.841965320780289, 0.8059377829107969, 0.8608578629586991, 0.8600300459584983, 0.8621044065084924, 0.8041523364746466, 0.8528156476684334, 0.7283907334180653, 0.12460809194590305, 0.0971348776957146, 0.12427225022131383, 0.12271204758826681, 0.12449348590634968, 0.3250062687905977, 0.12536259682193973, 0.1344015610958713, 0.10548915660341174, 0.18339956502300803, 0.13901501970722496, 0.6373992926658281, 0.15674818511477973, 0.22332453890340498, 0.2658580089707546, 0.1868345046502069, 0.3612186534582591, 0.2951178403620185, 0.6420715164525979, 0.6112814622635974, 0.6382136456685963, 0.5733129083347722, 0.6077050731816187, 0.555640346837547, 0.641991503760803, 0.6151024104410993, 0.6018882574784572, 0.3924784892702684, 0.5272904856586456, 0.511656157792223, 0.41991268526400294, 0.35902303087070164, 0.5182163649036298, 0.46769083438436954, 0.4970455550271681, 0.48720918402186775, 0.1970123066653433, 0.1754109428988706, 0.20218955428446794, 0.17127368147846467, 0.24424127108879023, 0.1846117926773847, 0.1898650040741131, 0.19390194113728043, 0.18336645585210876, 0.5125321339877273, 0.6882462068695927, 0.3973485952729092, 0.20478588487511562, 0.24199127126807984, 0.7785148408493197, 0.6476871288892085, 0.23823871713657796, 0.6086866752838826, 0.9104564744876764, 0.847904563624782, 0.8402970650044772, 0.8572730728207536, 0.8600885156325158, 0.176974868165635, 0.1827225959114155, 0.1530844243187678, 0.20899143828308198, 0.208254344090826, 0.16786944268346848, 0.16107488133635184, 0.2049512608037073, 0.7608771053616408, 0.8349190543752535, 0.8703685872160727, 0.15437436135955795, 0.15404467505868236, 0.18459380418405225, 0.18544121324795626, 0.16282299968466452, 0.17704307319148194, 0.15980718660889326, 0.17441057975191177, 0.1975596730477015, 0.170654629501942, 0.18110159988997154, 0.0892646823389397, 0.08895787946902078, 0.08275196072600322, 0.08227690934407839, 0.08254940782797471, 0.09305613621478281, 0.08737978673299551, 0.10882373511328802, 0.08147986672871155]}, "mutation_prompt": null}
{"id": "2b2f5bbe-9403-4cb7-8506-9a30ef412819", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Refined adaptive mutation factor\n        self.crossover_rate = 0.85  # Adjusted crossover rate for increased diversity\n        self.initial_temperature = 2.5  # Altered for expansive exploration at the start\n        self.cooling_schedule = lambda t, i: t * (0.88 + 0.12 * np.cos(i / 4))  # Temperature perturbation\n        self.cooling_rate = 0.90  # Modified cooling rate\n        self.chaos_factor = 0.3  # Revised chaos influence for controlled diversity\n        self.learning_rate = 0.02  # Added learning rate for dynamic adjustments\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Frequency for dynamic mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 8)\n\n                if evaluations % 80 == 0:  # Adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / (temperature + self.learning_rate))\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE leveraging dynamic learning rates, temperature perturbation, and chaos-driven exploration for robust optimization.", "configspace": "", "generation": 89, "fitness": 0.35057452572412184, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.22.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.5183243156900104, 0.5414427293677494, 0.5182357741613419, 0.5433033990171399, 0.5452181935572675, 0.5404933747392546, 0.5277869437984746, 0.519862958914737, 0.609113782296234, 0.5061475774869844, 0.5203103778297792, 0.49225003107826415, 0.47534840974069337, 0.4941459967372095, 0.5099721646417892, 0.500061609128794, 0.4642663802140633, 0.5003848219924945, 0.17012737431791503, 0.15453707947765338, 0.26831525304071024, 0.3635731891695141, 0.37022420502697717, 0.17526690776226483, 0.3203423568090358, 0.3494795384190116, 0.1696090082045666, 0.13987904330225953, 0.14675114379808107, 0.1445819340140333, 0.13442019520478066, 0.14842516662143568, 0.14627923948110733, 0.16948785352193685, 0.17226752295426173, 0.1149498384699178, 0.9676227811454072, 0.9601685796936363, 0.9627989463188745, 0.9628453866933728, 0.9726153056736144, 0.9718647030364559, 0.970843004204464, 0.9795920932793726, 0.9683925917766378, 0.4010793439544442, 0.3663124620673809, 0.4274672120591293, 0.4343916554340381, 0.369326983562961, 0.4272173175624816, 0.4412184396333234, 0.08692775167123579, 0.36865117629946553, 0.8740468745387631, 0.8629640057417796, 0.8602669061523304, 0.8969744827945082, 0.884918974989878, 0.8714308059721084, 0.893051389638854, 0.8857861684215202, 0.8591365672458717, 0.2662914626892774, 0.28145540337858166, 0.2997540425362337, 0.2510892687263371, 0.2764320854012229, 0.2635461485228898, 0.2929008569129301, 0.2713137292144283, 0.2634863674743526, 0.2458527583078537, 0.2645315968559444, 0.2692278746521788, 0.30836277147079627, 0.3076511961809706, 0.29138667117508144, 0.253760487158468, 0.28129770679034527, 0.2776513732177983, 0.30512385132588893, 0.14099104061179712, 0.06525729464419205, 0.36752972335433165, 0.11386915538935882, 0.21353669643525297, 0.2898932512871917, 0.36474559496769976, 0.30048135370742335, 0.4145054804961601, 0.3623691690925054, 0.32389328882408985, 0.2932919753795783, 0.2532803926473147, 0.23135808076838837, 0.278783323159401, 0.3290083209181234, 0.4143895498755258, 0.10714227221254369, 0.19725265715855778, 0.07104157902260444, 0.17086156740331349, 0.26293165369723537, 0.21430998412229552, 0.29107580788845544, 0.16801754812022518, 0.32710656401369975, 0.3446135972987573, 0.32816704236879546, 0.31516276427034295, 0.24734259187069385, 0.3709753931519143, 0.32514080975265325, 0.2531287197165447, 0.2948968434286833, 0.16620624392980188, 0.4964913885320338, 0.5020886906545374, 0.488639895241077, 0.4775756357537587, 0.47812003712433315, 0.4713681496195111, 0.4890871207139401, 0.47722391021665767, 0.4688671865660451, 0.10087110440427971, 0.14386165076865765, 0.1402797790707907, 0.12147028219010902, 0.10920187422390304, 0.3256329710164758, 0.14247175965572256, 0.16900185752612273, 0.21053253776051795, 0.15874048317070388, 0.20386605121864143, 0.13166672887318986, 0.396730370866089, 0.223794922535404, 0.15186521988815582, 0.14095324097347617, 0.25460712317917156, 0.20860722383241537, 0.38978638822910816, 0.30729390293598735, 0.4208287223640075, 0.42275973707817427, 0.41704697236217847, 0.37268319924718973, 0.35328889573882216, 0.4291204693696241, 0.4118703401596481, 0.35662529643511576, 0.33529120391388534, 0.37726895591890675, 0.3352009058194586, 0.2420625584422219, 0.3703236851146413, 0.37536069111031334, 0.3777283742686677, 0.40135111172400106, 0.1955972238970506, 0.18565999090355545, 0.21112707836291145, 0.2086125555670496, 0.19316859311645362, 0.2070975159788332, 0.21453011129547828, 0.19860977456965612, 0.21050939119312195, 0.21311888186359096, 0.28770674283710973, 0.4088338481466056, 0.4586472084004557, 0.3241769518361348, 0.23624775997218284, 0.383619524977032, 0.36793574583508426, 0.23942873498567463, 0.5077117362306438, 0.5757736548312915, 0.1970485948940386, 0.6711415250699235, 0.46612804577995126, 0.1602510922257716, 0.6780614346555347, 0.16515490808468947, 0.48898015709567866, 0.16771129153472653, 0.5735454673504333, 0.5558175516204293, 0.2090921988595973, 0.5623760862549327, 0.20431853844165448, 0.20105754129916775, 0.15503723358138954, 0.15502027103144522, 0.18476692524287686, 0.18397951979082672, 0.1737070341434459, 0.2016581236854078, 0.17250357585169418, 0.18735985617107087, 0.18035614725835347, 0.18416405548348158, 0.22086358327934563, 0.08783391635229054, 0.09582147683473574, 0.08084390260960339, 0.09800362991316636, 0.08626191045076936, 0.08044631893447862, 0.08938093221547427, 0.11858871641880997, 0.08242378086084867]}, "mutation_prompt": null}
{"id": "b88b38f4-80dd-40eb-ad18-0283eedf613d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.75 + 0.25 * np.random.rand()  # Slightly adjusted mutation factor\n        self.crossover_rate = 0.85 + 0.05 * np.random.rand()  # Dynamic crossover rate for exploration-exploitation balance\n        self.initial_temperature = 2.5  # Increased for even broader search at start\n        self.cooling_schedule = lambda t, i: t * (0.9 - 0.05 * np.cos(i / 7))  # Nonlinear cooling schedule\n        self.cooling_rate = 0.93  # Adjusted cooling rate\n        self.chaos_factor = 0.4  # Altered chaos influence for more diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.65 + 0.3 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 8)\n\n                if evaluations % 80 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Nonlinear Cooling and Dynamic Crossover for Improved Search Performance.", "configspace": "", "generation": 90, "fitness": 0.4799937728792292, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8888497529060817, 0.9017275241540343, 0.8767546113556682, 0.8941818139414626, 0.8775878415616905, 0.8846960356214287, 0.874329573548331, 0.8870036090971642, 0.8830502222128512, 0.8188222404351669, 0.8003110762571265, 0.7999714192212134, 0.7810103429584037, 0.7954086356250605, 0.7839868072067818, 0.7870202490269854, 0.8133490857139929, 0.8071929910123451, 0.44131331049091416, 0.368299416232036, 0.5922468289754965, 0.21490639936995726, 0.2549936771666398, 0.26295900138716544, 0.36402929292921493, 0.29410732692355546, 0.4382767843616955, 0.44050948133989765, 0.14169923316308541, 0.16198877480310925, 0.15919329667701043, 0.29050970169350554, 0.13457666543559788, 0.12769038085986306, 0.13214200111717256, 0.2936497946078481, 0.9702993522222192, 0.9606382118656961, 0.9530013582984627, 0.9699830963351843, 0.9699776234538531, 0.9849594909500836, 0.9742578116158064, 0.9660103118501856, 0.9720088637580149, 0.7311171182545917, 0.6584040522844041, 0.6924651985562691, 0.6956461817308894, 0.6952812377864213, 0.653388059904921, 0.7277133787377844, 0.08745594953020086, 0.6554172886179287, 0.819167831961128, 0.379380128604511, 0.8165098446942931, 0.8802732995031507, 0.8282002019309354, 0.7960763315422841, 0.9136697968508962, 0.8291987937739753, 0.8308084135731643, 0.5724802911216536, 0.5278280640465491, 0.6093914481990167, 0.6204465182325348, 0.5974686438694793, 0.5873276761026178, 0.5053562965637782, 0.5576789456686417, 0.6033236161028088, 0.12181521405646778, 0.6291690194377706, 0.4194637177111944, 0.5454244144551177, 0.47211552744508367, 0.6266770333225091, 0.4341072478747935, 0.5558924806885419, 0.562701445779133, 0.6476468557094568, 0.5137314025359561, 0.5220141904537278, 0.6582566463984574, 0.6050474385258733, 0.05645316850600324, 0.46535969478438255, 0.6326736104633517, 0.5116796008313094, 0.6961253129331144, 0.6558019375719212, 0.648137205035291, 0.707438783474653, 0.6279445445618648, 0.6685147141784296, 0.6558558117762945, 0.7035565591559815, 0.673007181370314, 0.08050779252068319, 0.33209120946725934, 0.33621082848587935, 0.2100952562604359, 0.4425151821469129, 0.3923275136413207, 0.19972306905228565, 0.1501461686277924, 0.20055494493972292, 0.4186693645079521, 0.4946244333638211, 0.4168691476711479, 0.5280848992516993, 0.5000410011683923, 0.4506351248196858, 0.5366736263100826, 0.5328519139732528, 0.45019981330380265, 0.8189549438060304, 0.768125679238021, 0.8078087835033463, 0.7990976697401195, 0.802692764929603, 0.746826273182915, 0.7562093714341607, 0.7948071635979285, 0.7837450198016926, 0.10801787860927292, 0.1194235592623698, 0.09667646539916364, 0.12906292188441726, 0.46410043674635537, 0.1256294347603547, 0.12838705797266248, 0.11710430165881824, 0.11627391592441094, 0.14252974428635812, 0.2678679089562154, 0.16474554519001938, 0.20817875132152108, 0.20429951879064812, 0.20206294791570623, 0.22921478843614362, 0.2639624240713151, 0.14578706269781616, 0.5340492887720389, 0.5909990158815179, 0.543248856333115, 0.5666891176142452, 0.4469736183842653, 0.4764664949181475, 0.5806082064113944, 0.5753458937226034, 0.5994733820922284, 0.4147725706497135, 0.3887018007374492, 0.3785185307223754, 0.22824120238438195, 0.3590311113058895, 0.4122237923134886, 0.46211092540913, 0.4218163796344149, 0.4178110552431781, 0.17330799658759466, 0.21918194248685197, 0.18301545749647352, 0.20044177876686176, 0.19884659940042637, 0.18508246510725368, 0.20779650988870157, 0.189490334134919, 0.20997046318381685, 0.7050833551248122, 0.5825538911943093, 0.5406753674459671, 0.21632643641093696, 0.6332480026059829, 0.20790533415627865, 0.5261824624768117, 0.4338936559965917, 0.6231892408916193, 0.8363870842497634, 0.7927000370982806, 0.8303412239982169, 0.1952007675373415, 0.17601114469532764, 0.17260064041445877, 0.788669792133834, 0.8058364913909137, 0.7742836544433063, 0.20724181659445962, 0.20085509666104995, 0.16744843401503728, 0.20905276908237735, 0.20835397227622798, 0.20613667353667475, 0.12552739860533912, 0.8677063766396842, 0.21172548687392234, 0.18046903672836778, 0.21374996830484572, 0.1832447562161036, 0.17826180752900067, 0.16892770608479402, 0.17874287391528965, 0.1974319146237965, 0.18567611948008234, 0.19065724529370032, 0.0897075192395469, 0.08927145522003943, 0.07283991726258177, 0.08512938272978865, 0.07867687472842821, 0.07774024527278667, 0.08028052885813486, 0.07223730555346086, 0.08427857959036333]}, "mutation_prompt": null}
{"id": "22c542b9-5d11-449b-a1f9-51a953c44849", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_pop_size = 20\n        self.mutation_factor = 0.7 + 0.3 * np.random.rand()  # Self-adaptive mutation factor\n        self.crossover_rate = 0.85  # Balanced crossover rate for exploration and exploitation\n        self.initial_temperature = 2.5  # Start with a higher temperature for wider exploration\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.cos(i / 3))  # Smooth cooling schedule\n        self.cooling_rate = 0.95  # Gradual cooling for sustained exploration\n        self.chaos_factor = 0.3  # Chaos influence for enhancing diversity\n        self.dynamic_pop_adjustment = lambda e: self.initial_pop_size + int(10 * np.sin(e / 50))  # Adaptive population size\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.initial_pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            current_pop_size = self.dynamic_pop_adjustment(evaluations)\n            for i in range(current_pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 15)\n\n                indices = np.random.choice(self.initial_pop_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Adaptive Population Size and Dynamic Diversity Control for Robust Optimization.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {}, "mutation_prompt": null}
{"id": "9ac8cb56-5608-4f70-930f-aaad89b5d782", "solution": "import numpy as np\n\nclass StochasticDynamicDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8 + 0.1 * np.random.rand()  # Reduced adaptation range\n        self.crossover_rate = 0.95  # Enhanced crossover rate\n        self.initial_temperature = 2.5  # Further increased for broader initial search\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.cos(i / 4))  # Modified stochastic cooling schedule\n        self.cooling_rate = 0.93  # Slightly adjusted cooling rate\n        self.chaos_factor = 0.4  # Increased chaos influence for diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 12)\n\n                if evaluations % 80 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "StochasticDynamicDE", "description": "Stochastic Dynamic DE with Adaptive Chaos-Driven Crossover and Enhanced Cooling for Superior Search Efficiency.", "configspace": "", "generation": 92, "fitness": 0.44869092717737125, "feedback": "The algorithm StochasticDynamicDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.29.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.9069951789892143, 0.893017464948216, 0.892853744153809, 0.901876890968374, 0.9077973684125554, 0.8976823310558981, 0.9075772331471496, 0.9045482841616459, 0.8883761369997498, 0.800559064826139, 0.8501087718794963, 0.8250461567988924, 0.8175143779857262, 0.829561809410049, 0.8435362348990754, 0.8315232268772752, 0.8090991924996274, 0.818269102693503, 0.4539187132862359, 0.16566807863804045, 0.18038359275565186, 0.1551738114661113, 0.14709068397078284, 0.2963731569319773, 0.6332494050725022, 0.14442117547123912, 0.17031182904144715, 0.14631385823777288, 0.11330855127704986, 0.46047668915491147, 0.1504105123274343, 0.1311835296867293, 0.13943595188457125, 0.1279450590409531, 0.15887247138530236, 0.12629565312774482, 0.9685730285770328, 0.9771480600582899, 0.9771535199080396, 0.917949888276892, 0.9330850451904145, 0.9258672238255853, 0.9569192068968829, 0.9620359871617437, 0.95681698706201, 0.6161395440370461, 0.7509398972177364, 0.6799214423675918, 0.5890966714853092, 0.5713806189394396, 0.7118973536999702, 0.6536339591994311, 0.7304939522166971, 0.6950578934162815, 0.7012770306020016, 0.8953876952394708, 0.3598016036662057, 0.9341242437483263, 0.2750356556386859, 0.3365093273698918, 0.7362902509020182, 0.8849457899736426, 0.9292548050554306, 0.8438930776493669, 0.41427840533478133, 0.3282922326388169, 0.35010505495674216, 0.7224105711868767, 0.6792056950211047, 0.352479660526291, 0.6366466991070733, 0.13483241661634526, 0.40078917154979576, 0.3726704241308507, 0.5229900828394982, 0.6128106072232462, 0.605427996694892, 0.7192581411607134, 0.5500567427214965, 0.4660599470846487, 0.5150349567590922, 0.1440659506288352, 0.7945894879581585, 0.19210286820653932, 0.18908316919081802, 0.43589667577163393, 0.7680188999595996, 0.1756085129277426, 0.3307736322410356, 0.6495080189197064, 0.5648876234840108, 0.32478154308216767, 0.5878333725785819, 0.768517012835834, 0.17581661771907675, 0.31116754731094953, 0.7296768089274158, 0.6010545691092897, 0.8400085655280243, 0.16417919084527988, 0.09704148079275132, 0.20445800640761613, 0.20299289795228825, 0.3016767380031783, 0.6125893017775064, 0.26264100341461905, 0.1440766451721014, 0.18957525960344568, 0.41201398849440307, 0.44679092144482035, 0.44313312681788597, 0.446698473763412, 0.5211543844193443, 0.4917364467877049, 0.2796367346124221, 0.47396704611700047, 0.49389811976465325, 0.71144991160208, 0.7600855514914789, 0.8210701656482956, 0.8797399618288345, 0.6974073026696253, 0.8332948414977455, 0.8757527252972813, 0.8720275331100265, 0.8839563706339814, 0.17309975197773253, 0.11150518819353272, 0.16091607793648288, 0.1787596094452667, 0.16877712829373392, 0.13410364429579313, 0.13422262255299444, 0.13781790060833388, 0.1271527498167052, 0.2161173057776561, 0.2030790878207004, 0.16732248490253132, 0.15562388630712465, 0.2546469061486034, 0.26267789390188756, 0.24452538303249738, 0.23744192775832995, 0.1457009122031, 0.5281008430999123, 0.6169545030398977, 0.6974132644249095, 0.5235789093362018, 0.500307548017477, 0.45418688585212796, 0.49612326572738785, 0.3816621379097316, 0.7552793975572676, 0.30561457028160643, 0.36398678983344757, 0.345472406190631, 0.47312941420775956, 0.35203944882525906, 0.6624349168881876, 0.48151265837409607, 0.5106641052924898, 0.5595884849444346, 0.20818959321595687, 0.198429310797689, 0.172771618532374, 0.21305850987630404, 0.20818215538192575, 0.2095562996735192, 0.21576935863942048, 0.18676387351149992, 0.21933781475574154, 0.2474629956527431, 0.24100382807241272, 0.23781186820876665, 0.23892999009874183, 0.7349161645852292, 0.18488932216666287, 0.2092638363117859, 0.2042650815590965, 0.240690938588614, 0.17214085831695558, 0.833722984673557, 0.8258580062101198, 0.16781415145532808, 0.16773988312338495, 0.16777692634372365, 0.16354435014193236, 0.8568562090387046, 0.8826100956463954, 0.8933351155359399, 0.16543874635789868, 0.1661039257952729, 0.21079788858232273, 0.20779130992575823, 0.20821221172427662, 0.15532025439691055, 0.15698505842576016, 0.15688092805610865, 0.18536202305985794, 0.17352787266476066, 0.18477884926499022, 0.15472035272166562, 0.16230062802622014, 0.17519593234573072, 0.18106558423008, 0.17048747353221894, 0.1814588841012681, 0.0864040746441953, 0.08743723696264516, 0.08538041443025546, 0.11726103476660521, 0.08005971579306337, 0.07872610642826838, 0.10060983439713322, 0.08874738481095157, 0.08476652923185934]}, "mutation_prompt": null}
{"id": "d06a6b37-5c05-4bb4-8f37-cbe4c4603492", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.75 + 0.3 * np.random.rand()  # Adjusted mutation factor for more adaptability\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate for more stability\n        self.initial_temperature = 3.0  # Higher initial temperature for broader search\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.1 * np.cos(i / 6))  # Sine-based cooling schedule\n        self.cooling_rate = 0.88  # Altered cooling rate\n        self.momentum_factor = 0.1  # Introduced momentum influence for dynamic exploration\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n        momentum = np.zeros((self.pop_size, self.dim))\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Frequency for dynamic mutation\n                    self.mutation_factor = 0.5 + 0.4 * np.random.rand()\n\n                if evaluations % 80 == 0:  # Condition for adaptive mutation\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3) + momentum[i], self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3) + momentum[i], self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    momentum[i] = self.momentum_factor * (trial_vector - population[i])\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        momentum[i] = self.momentum_factor * (trial_vector - population[i])\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridAdaptiveDE", "description": "Hybrid Adaptive DE with Sine-Based Cooling and Momentum-Driven Random Walk for Enhanced Exploration.", "configspace": "", "generation": 93, "fitness": 0.4527116626337731, "feedback": "The algorithm HybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8915348866188496, 0.8899537870471397, 0.8799076640311858, 0.8968288978646994, 0.8914069868074965, 0.8895295750124599, 0.89305330018545, 0.8934461930359814, 0.8922973537274034, 0.8073217315826954, 0.7974280842182656, 0.8023858486083703, 0.8059189907211459, 0.7920140015222146, 0.7755474017041448, 0.7889786776075631, 0.7809240968575619, 0.8084267947356816, 0.11772711894709131, 0.12638434222232608, 0.1285423163941185, 0.13359447484836018, 0.11763195672228044, 0.14820793576695646, 0.11163954717553348, 0.1226672092434401, 0.1376634544506533, 0.12232409771014119, 0.1317721021329442, 0.1377716693132376, 0.10828884361724245, 0.13893041990421895, 0.11354106728903968, 0.1338760608290791, 0.13595302872005266, 0.12159660326561283, 0.9743733431659909, 0.976789878274032, 0.9569042412333101, 0.9749573853956184, 0.9835533907892582, 0.9835628189178222, 0.9582693668067854, 0.9817037316017408, 0.9817172413200246, 0.7274899845715973, 0.7194463213203096, 0.6815337814423599, 0.6720238694788823, 0.6850127057329972, 0.7067547208569108, 0.7002411979288978, 0.7080200312951481, 0.6522314375342328, 0.8349864698115848, 0.7811897148108304, 0.8267642071887148, 0.8257187789462883, 0.8425735170417472, 0.8298104339574527, 0.8623360535146931, 0.846931005854392, 0.835169383761037, 0.5744678017757417, 0.48521052379530993, 0.561360609740295, 0.42532883513407727, 0.439024766814623, 0.552427060042348, 0.6078599637164162, 0.5228421832256007, 0.6236436036954545, 0.532685381958014, 0.18027046015953596, 0.409101056217791, 0.5302180699247627, 0.6299373002324202, 0.5903332730826131, 0.617384193456658, 0.5239229319346995, 0.4938111803195955, 0.5919397772613264, 0.5577595499927064, 0.6019848210268688, 0.5582980845312998, 0.49295107815004024, 0.5278611664247982, 0.563429494663843, 0.5581240181671044, 0.5427020095628254, 0.5306438855257032, 0.5517252656448528, 0.6033301306598633, 0.5329555352078572, 0.5832803840901778, 0.570445720768763, 0.5473728928437409, 0.639709274403534, 0.6282101614887551, 0.16126117992120126, 0.29341688518453357, 0.11476387156023993, 0.41389735158100427, 0.3965466865965098, 0.20557919079468123, 0.20471061074364916, 0.16734763578654888, 0.19462904620903332, 0.4691406201730087, 0.4188192579815805, 0.47275743626308986, 0.4865226542944998, 0.47405311418068785, 0.43602709857869304, 0.42966675971037716, 0.4534738038542342, 0.43875736528492515, 0.7628438865871514, 0.7877111234705731, 0.8087865773220229, 0.8097365355507812, 0.7903003229481799, 0.8076244327639235, 0.7803904316625665, 0.8013564447859005, 0.7936616007374498, 0.1103642992268038, 0.10039274809581, 0.09118505021746481, 0.10649608530566856, 0.10919263824408731, 0.10241353357112692, 0.09719735664912421, 0.10758734082903143, 0.09185386301672316, 0.18808254790907397, 0.15757191233746248, 0.14307038420594764, 0.13710489195095998, 0.1588418741136698, 0.16562292512849053, 0.17137288410561502, 0.14881378406443235, 0.1510218433867867, 0.47470559145389746, 0.47915669675632777, 0.4965491394521565, 0.49497182301015796, 0.47222078418178215, 0.4606350107296697, 0.5553329857696939, 0.5542544922481324, 0.5217322056533507, 0.3735013096058154, 0.38247730979855266, 0.3502531120469232, 0.3900357894362443, 0.3425020704585481, 0.3758531018541901, 0.4222711901345456, 0.4265303875347608, 0.3914891341428608, 0.20036475994960434, 0.19271014956744525, 0.1828631289171243, 0.17915976040678327, 0.21560529394680594, 0.1910842639638285, 0.19446551547434998, 0.1930422232630583, 0.18706670715334062, 0.19842427320003475, 0.1899915478817028, 0.3300905626008649, 0.19146807509770924, 0.21641717694264662, 0.24213794250424636, 0.28612877316724383, 0.223880701564814, 0.19713321476854662, 0.19715136848076542, 0.8198191643708966, 0.8518090547597329, 0.7874450945567752, 0.8061409880526322, 0.6138010175544525, 0.16471753698846114, 0.7656113847358599, 0.7658983412843978, 0.42083190849098495, 0.20745057280856727, 0.20566955454139957, 0.6444194743273063, 0.199290338576934, 0.19789373290673806, 0.5089954699135458, 0.15486205923568885, 0.1548567521664399, 0.19064032652123675, 0.17470870115703252, 0.18113159914268284, 0.19008089794514238, 0.20108373309645378, 0.18104997669470446, 0.17811355425829334, 0.1877231934500333, 0.17646642252268518, 0.0759879321110507, 0.08080260367495862, 0.07695876608419328, 0.0775858169289424, 0.0822100300781845, 0.07000249336031905, 0.08496442702359852, 0.08987666892609525, 0.07356010201141594]}, "mutation_prompt": null}
{"id": "a07ead30-d3be-451e-a5bb-e4fd957cef52", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Increased population size for better diversity\n        self.mutation_factor = 0.9 + 0.1 * np.random.rand()  # Refined mutation factor range\n        self.crossover_rate = 0.85  # Adjusted crossover rate for improved balance\n        self.initial_temperature = 2.5  # Slightly higher initial temperature for exploration\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.05 * np.sin(i / 4))  # Modified cooling pattern\n        self.cooling_rate = 0.95  # Slightly slower cooling rate\n        self.chaos_factor = 0.4  # Enhanced chaos influence for perturbation\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.7 + 0.25 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 15)\n\n                if evaluations % 80 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Dynamic Population Control and Perturbation-Driven Mutation for Superior Exploration and Exploitation Balance.", "configspace": "", "generation": 94, "fitness": 0.4074506584866983, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.839116771401049, 0.8472426023896427, 0.8555773596386571, 0.8352829254820726, 0.8573845526605514, 0.8580177155564812, 0.8343645421764214, 0.8337387159556009, 0.8330091526500314, 0.7228403887947432, 0.7090458021172183, 0.7337802212478756, 0.7118112212700207, 0.7321293581335644, 0.7428718349251215, 0.7748484803363644, 0.7356852383861863, 0.7311105694218831, 0.301625196592333, 0.17882112170703435, 0.13651379962459032, 0.24281644442421468, 0.3116737479479942, 0.17925315784607831, 0.2320641891474312, 0.12421979269662298, 0.1302053035921188, 0.1206032244476517, 0.11592089446099996, 0.11094861375147069, 0.142603233618523, 0.12383950101423413, 0.13087826230125132, 0.1263827932421655, 0.22943628389755533, 0.12138345635474035, 0.9566431611963098, 0.9641065686507806, 0.9639459707352827, 0.9880882336591105, 0.9880889208075915, 0.9880888215998619, 0.9760064065623197, 0.9688418729661061, 0.9688349618343268, 0.5700128297789862, 0.06199078221965815, 0.5638964688236903, 0.5631346893410141, 0.5533192552788262, 0.5278078495485791, 0.6406308765423981, 0.6253921542452643, 0.5836072341521001, 0.7498834322134277, 0.7679686673081465, 0.8307943601736832, 0.8382578813931993, 0.8029326397727324, 0.7513230804966933, 0.7850101749143976, 0.7966938843253775, 0.8063972206787509, 0.5093620392716605, 0.400368133357047, 0.37822758604103135, 0.4205467567493504, 0.12509720674098135, 0.39811294317288015, 0.41770552419979945, 0.5021309340445272, 0.590273014653802, 0.4195171984506034, 0.016368490192317564, 0.5047705943122023, 0.4685223493460787, 0.5373572235424307, 0.4407114347515646, 0.43462706434189624, 0.46305383108324116, 0.4712605104488279, 0.4115358999455202, 0.33253514684412744, 0.33435585206286667, 0.2694617445102052, 0.38962865467392105, 0.3205865745876376, 0.3647498811283537, 0.4083297589569148, 0.4485196281442164, 0.5094655801263593, 0.44391459106670794, 0.48985396437809803, 0.5180034442797359, 0.5335383584364353, 0.4767515267140431, 0.5223789938164354, 0.5360115469416866, 0.5371201853874695, 0.19060565150317166, 0.17425521508042818, 0.21530301036332067, 0.1646424755999617, 0.13571619522758538, 0.20008240833181434, 0.263398849757412, 0.27261716849818207, 0.15919048644551748, 0.30725424487346287, 0.35329552137645126, 0.3772216752322297, 0.3538721474860881, 0.37208813225421855, 0.3725824667716737, 0.3081638586256463, 0.3732294349913552, 0.29896517413209445, 0.7194303657547405, 0.7095780952620694, 0.7372008589612719, 0.74122636187939, 0.7182871105471453, 0.7561813925567513, 0.7366123210585152, 0.708255873828382, 0.7189176387640059, 0.09419317777135072, 0.1046424448762393, 0.09703303869354696, 0.14480167828381396, 0.09465567163504329, 0.11569402059667844, 0.11894110893633658, 0.0868539571845165, 0.09136042191762694, 0.16110299133117856, 0.1656723444488194, 0.13154159407691346, 0.18637363399077866, 0.15042158997996213, 0.182792742170664, 0.22501076854909485, 0.2539397376348882, 0.24165064183928742, 0.43895663865562407, 0.42635150453391146, 0.3883582429232718, 0.4007322412930754, 0.42659825891209757, 0.4326026818323637, 0.4698899466936042, 0.46391671312461, 0.47388491356447904, 0.29117403960963006, 0.32611186889588495, 0.35136294682066815, 0.28495678293508875, 0.34157049144769025, 0.2863425041315768, 0.3712593583841116, 0.3211453727939374, 0.3512030702501132, 0.1868452148740194, 0.1807874465000714, 0.17669776832409956, 0.18860571366679213, 0.19178342644368396, 0.17772027909831045, 0.19112258846186236, 0.19947089411524743, 0.19558601828404298, 0.5178713395660451, 0.3505328959552749, 0.47688730506549004, 0.5017374516106401, 0.3323505190802881, 0.2332106282941956, 0.4234102722367078, 0.45343868974126766, 0.23581091619618688, 0.7696995962208008, 0.16553553954074873, 0.16558520721248204, 0.1835716529254715, 0.1738798577631313, 0.1621839701251916, 0.6556595031134445, 0.18079974296332768, 0.7115518537651324, 0.1686600601957129, 0.21001091639056135, 0.20929920217988418, 0.7276317095196583, 0.19949685080600388, 0.7671564992612523, 0.20880520520408163, 0.2054708011931975, 0.4628326360073476, 0.18633330916922308, 0.1844905352282048, 0.17078202369445228, 0.1555205989744607, 0.18158042655424755, 0.18472535044180327, 0.19703085968530143, 0.1964760022180556, 0.19059348402123188, 0.0784607144075955, 0.0786734592805991, 0.07702220362542411, 0.07392175531720424, 0.09061162597163985, 0.07375757936394545, 0.07993195817541798, 0.07496232099083955, 0.08799554309407309]}, "mutation_prompt": null}
{"id": "4223fbbd-3a1b-445a-bd9b-bf988bc97e87", "solution": "import numpy as np\n\nclass AdvancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8 + 0.2 * np.random.rand()  # Self-adaptive mutation factor\n        self.crossover_rate = 0.9  # Improved crossover rate for better exploration\n        self.initial_temperature = 2.0  # Increased for broader search at start\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i / 5))  # Stochastic cooling schedule\n        self.cooling_rate = 0.92  # Adjusted cooling rate\n        self.chaos_factor = 0.35  # Altered chaos influence for diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 55 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.6 + 0.3 * np.random.rand() + self.chaos_factor * np.cos(evaluations / 10)\n\n                if evaluations % 85 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdvancedAdaptiveDE", "description": "Advanced Adaptive DE with Stochastic Temperature Control and Self-Adaptive Chaos-Induced Dynamic Mutation for Efficient Search.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.9025800775981403, 0.8855841576926933, 0.8769158567418172, 0.8943573832283054, 0.8932248550282035, 0.8959430482197105, 0.870300634490522, 0.8881824682571544, 0.8964680036287952, 0.8119085497146807, 0.7941830852686032, 0.8037049347866595, 0.8281358155660998, 0.8050354179115028, 0.7807871611057007, 0.8282579022755829, 0.812044454188801, 0.7982775133460376, 0.37993995780247325, 0.1697009871730113, 0.12197160352125358, 0.2913330316046062, 0.15748154722409768, 0.19410658253896929, 0.35832809311456837, 0.15004907295559455, 0.33331692402531865, 0.15868635314635815, 0.47717027388773503, 0.3996330234453648, 0.1417173182676259, 0.2913456200300877, 0.1449216924507436, 0.11455391476321453, 0.14332020548672353, 0.13648983236614654, 0.9598634458081092, 0.9632912132831966, 0.9539551728249802, 0.9827500409665637, 0.9745352562158883, 0.9745805317895424, 0.9531692030848967, 0.9701550170520921, 0.9611400000123838, 0.687855826921322, 0.6965925607371453, 0.7048127023489771, 0.6888907996735312, 0.7015780159919247, 0.7046420729346901, 0.7603945460414809, 0.6773316940514542, 0.7141442319858031, 0.8109882033795068, 0.8495746367808412, 0.8392984480487149, 0.9045564549122712, 0.8752784010443792, 0.8720898787052102, 0.8397666420222333, 0.8695530637925136, 0.8503524223575436, 0.6053348455271972, 0.4101094155533207, 0.6993206751727465, 0.5100247146737631, 0.5386039100679434, 0.6119757813816473, 0.7076266853457487, 0.6080606201851892, 0.5213824600742434, 0.016539969346138106, 0.010134515115051368, 0.010078832088155965, 0.5650893008805042, 0.6784984576275459, 0.5854736381587122, 0.6326076218624384, 0.5479950752082288, 0.508327613899602, 0.6799869883819805, 0.6205875239630115, 0.3307387907032545, 0.6724144051660885, 0.6799397619173425, 0.6620642589862404, 0.6445075038864293, 0.6648113660452842, 0.6704891847314336, 0.5541596689702495, 0.38032744659041806, 0.7501106909295574, 0.15102614800271674, 0.7106461917625163, 0.7227117769160545, 0.7273988022925958, 0.7324133338119397, 0.7104525106341177, 0.1938217813617733, 9.999999999998899e-05, 9.999999999998899e-05, 0.2133406059116496, 0.5917776310952377, 0.4508905121876038, 0.31828828487987204, 0.24466925923349114, 0.2357544451139072, 0.4992772535706642, 0.47708455822854234, 0.4219258194269849, 0.5820810562579877, 0.5966543466495959, 0.635685779567681, 0.6231293368698088, 0.41732304279093846, 0.5511500375963607, 0.8279157759924782, 0.841965320780289, 0.8059377829107969, 0.8608578629586991, 0.8600300459584983, 0.8621044065084924, 0.8041523364746466, 0.8528156476684334, 0.7283907334180653, 0.12460809194590305, 0.0971348776957146, 0.12427225022131383, 0.12271204758826681, 0.12449348590634968, 0.3250062687905977, 0.12536259682193973, 0.1344015610958713, 0.10548915660341174, 0.18339956502300803, 0.13901501970722496, 0.6373992926658281, 0.15674818511477973, 0.22332453890340498, 0.2658580089707546, 0.1868345046502069, 0.3612186534582591, 0.2951178403620185, 0.6420715164525979, 0.6112814622635974, 0.6382136456685963, 0.5733129083347722, 0.6077050731816187, 0.555640346837547, 0.641991503760803, 0.6151024104410993, 0.6018882574784572, 0.3924784892702684, 0.5272904856586456, 0.511656157792223, 0.41991268526400294, 0.35902303087070164, 0.5182163649036298, 0.46769083438436954, 0.4970455550271681, 0.48720918402186775, 0.1970123066653433, 0.1754109428988706, 0.20218955428446794, 0.17127368147846467, 0.24424127108879023, 0.1846117926773847, 0.1898650040741131, 0.19390194113728043, 0.18336645585210876, 0.5125321339877273, 0.6882462068695927, 0.3973485952729092, 0.20478588487511562, 0.24199127126807984, 0.7785148408493197, 0.6476871288892085, 0.23823871713657796, 0.6086866752838826, 0.9104564744876764, 0.847904563624782, 0.8402970650044772, 0.8572730728207536, 0.8600885156325158, 0.176974868165635, 0.1827225959114155, 0.1530844243187678, 0.20899143828308198, 0.208254344090826, 0.16786944268346848, 0.16107488133635184, 0.2049512608037073, 0.7608771053616408, 0.8349190543752535, 0.8703685872160727, 0.15437436135955795, 0.15404467505868236, 0.18459380418405225, 0.18544121324795626, 0.16282299968466452, 0.17704307319148194, 0.15980718660889326, 0.17441057975191177, 0.1975596730477015, 0.170654629501942, 0.18110159988997154, 0.0892646823389397, 0.08895787946902078, 0.08275196072600322, 0.08227690934407839, 0.08254940782797471, 0.09305613621478281, 0.08737978673299551, 0.10882373511328802, 0.08147986672871155]}, "mutation_prompt": null}
{"id": "b0c64ac5-df06-4166-a55b-7cb75fdc7776", "solution": "import numpy as np\n\nclass AdvancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.8 + 0.2 * np.random.rand()  # Self-adaptive mutation factor\n        self.crossover_rate = 0.9  # Improved crossover rate for better exploration\n        self.initial_temperature = 2.0  # Increased for broader search at start\n        self.cooling_schedule = lambda t, i: t * (0.85 + 0.1 * np.sin(i / 5))  # Stochastic cooling schedule\n        self.cooling_rate = 0.92  # Adjusted cooling rate\n        self.chaos_factor = 0.35  # Altered chaos influence for diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 55 == 0:  # Adjusted frequency for dynamic mutation\n                    self.mutation_factor = 0.6 + 0.3 * np.random.rand() + self.chaos_factor * np.cos(evaluations / 10)\n\n                if evaluations % 85 == 0:  # Modified adaptive mutation condition\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdvancedAdaptiveDE", "description": "Advanced Adaptive DE with Stochastic Temperature Control and Self-Adaptive Chaos-Induced Dynamic Mutation for Efficient Search.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.9025800775981403, 0.8855841576926933, 0.8769158567418172, 0.8943573832283054, 0.8932248550282035, 0.8959430482197105, 0.870300634490522, 0.8881824682571544, 0.8964680036287952, 0.8119085497146807, 0.7941830852686032, 0.8037049347866595, 0.8281358155660998, 0.8050354179115028, 0.7807871611057007, 0.8282579022755829, 0.812044454188801, 0.7982775133460376, 0.37993995780247325, 0.1697009871730113, 0.12197160352125358, 0.2913330316046062, 0.15748154722409768, 0.19410658253896929, 0.35832809311456837, 0.15004907295559455, 0.33331692402531865, 0.15868635314635815, 0.47717027388773503, 0.3996330234453648, 0.1417173182676259, 0.2913456200300877, 0.1449216924507436, 0.11455391476321453, 0.14332020548672353, 0.13648983236614654, 0.9598634458081092, 0.9632912132831966, 0.9539551728249802, 0.9827500409665637, 0.9745352562158883, 0.9745805317895424, 0.9531692030848967, 0.9701550170520921, 0.9611400000123838, 0.687855826921322, 0.6965925607371453, 0.7048127023489771, 0.6888907996735312, 0.7015780159919247, 0.7046420729346901, 0.7603945460414809, 0.6773316940514542, 0.7141442319858031, 0.8109882033795068, 0.8495746367808412, 0.8392984480487149, 0.9045564549122712, 0.8752784010443792, 0.8720898787052102, 0.8397666420222333, 0.8695530637925136, 0.8503524223575436, 0.6053348455271972, 0.4101094155533207, 0.6993206751727465, 0.5100247146737631, 0.5386039100679434, 0.6119757813816473, 0.7076266853457487, 0.6080606201851892, 0.5213824600742434, 0.016539969346138106, 0.010134515115051368, 0.010078832088155965, 0.5650893008805042, 0.6784984576275459, 0.5854736381587122, 0.6326076218624384, 0.5479950752082288, 0.508327613899602, 0.6799869883819805, 0.6205875239630115, 0.3307387907032545, 0.6724144051660885, 0.6799397619173425, 0.6620642589862404, 0.6445075038864293, 0.6648113660452842, 0.6704891847314336, 0.5541596689702495, 0.38032744659041806, 0.7501106909295574, 0.15102614800271674, 0.7106461917625163, 0.7227117769160545, 0.7273988022925958, 0.7324133338119397, 0.7104525106341177, 0.1938217813617733, 9.999999999998899e-05, 9.999999999998899e-05, 0.2133406059116496, 0.5917776310952377, 0.4508905121876038, 0.31828828487987204, 0.24466925923349114, 0.2357544451139072, 0.4992772535706642, 0.47708455822854234, 0.4219258194269849, 0.5820810562579877, 0.5966543466495959, 0.635685779567681, 0.6231293368698088, 0.41732304279093846, 0.5511500375963607, 0.8279157759924782, 0.841965320780289, 0.8059377829107969, 0.8608578629586991, 0.8600300459584983, 0.8621044065084924, 0.8041523364746466, 0.8528156476684334, 0.7283907334180653, 0.12460809194590305, 0.0971348776957146, 0.12427225022131383, 0.12271204758826681, 0.12449348590634968, 0.3250062687905977, 0.12536259682193973, 0.1344015610958713, 0.10548915660341174, 0.18339956502300803, 0.13901501970722496, 0.6373992926658281, 0.15674818511477973, 0.22332453890340498, 0.2658580089707546, 0.1868345046502069, 0.3612186534582591, 0.2951178403620185, 0.6420715164525979, 0.6112814622635974, 0.6382136456685963, 0.5733129083347722, 0.6077050731816187, 0.555640346837547, 0.641991503760803, 0.6151024104410993, 0.6018882574784572, 0.3924784892702684, 0.5272904856586456, 0.511656157792223, 0.41991268526400294, 0.35902303087070164, 0.5182163649036298, 0.46769083438436954, 0.4970455550271681, 0.48720918402186775, 0.1970123066653433, 0.1754109428988706, 0.20218955428446794, 0.17127368147846467, 0.24424127108879023, 0.1846117926773847, 0.1898650040741131, 0.19390194113728043, 0.18336645585210876, 0.5125321339877273, 0.6882462068695927, 0.3973485952729092, 0.20478588487511562, 0.24199127126807984, 0.7785148408493197, 0.6476871288892085, 0.23823871713657796, 0.6086866752838826, 0.9104564744876764, 0.847904563624782, 0.8402970650044772, 0.8572730728207536, 0.8600885156325158, 0.176974868165635, 0.1827225959114155, 0.1530844243187678, 0.20899143828308198, 0.208254344090826, 0.16786944268346848, 0.16107488133635184, 0.2049512608037073, 0.7608771053616408, 0.8349190543752535, 0.8703685872160727, 0.15437436135955795, 0.15404467505868236, 0.18459380418405225, 0.18544121324795626, 0.16282299968466452, 0.17704307319148194, 0.15980718660889326, 0.17441057975191177, 0.1975596730477015, 0.170654629501942, 0.18110159988997154, 0.0892646823389397, 0.08895787946902078, 0.08275196072600322, 0.08227690934407839, 0.08254940782797471, 0.09305613621478281, 0.08737978673299551, 0.10882373511328802, 0.08147986672871155]}, "mutation_prompt": null}
{"id": "4adedb6e-e7da-443f-b855-27dadc95d927", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.75 + 0.25 * np.random.rand()  # Adapted mutation factor\n        self.crossover_rate = 0.85  # Tweaked crossover rate\n        self.initial_temperature = 2.5  # Modified for broader initial search\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.1 * np.cos(i / 7))  # Refined stochastic cooling\n        self.cooling_rate = 0.95  # Altered cooling rate\n        self.levy_exponent = 1.5  # Introduced Levy flight parameter\n        self.uncertainty_weight = 0.4  # New factor for uncertainty-driven mutation\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        def levy_flight(size):\n            u = np.random.normal(0, 1, size)\n            v = np.random.normal(0, 1, size)\n            step = u / np.power(np.abs(v), 1 / self.levy_exponent)\n            return 0.01 * step * (population - np.mean(population, axis=0))\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Adjusted frequency for mutation updates\n                    self.mutation_factor = 0.55 + 0.35 * np.random.rand() + self.uncertainty_weight * np.random.randn()\n\n                if evaluations % 80 == 0: \n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3) + levy_flight(self.dim), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3) + levy_flight(self.dim), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Dynamic Levy Flight Adjustments and Uncertainty-Driven Mutation for Optimized Search Efficacy.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {}, "mutation_prompt": null}
{"id": "cdd8fdba-803d-454d-af54-21a2c868a308", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20\n        self.mutation_factor = 0.85 + 0.15 * np.random.rand()  # Slightly adjusted self-adaptive mutation factor\n        self.crossover_rate = 0.88  # Tuned crossover rate for exploration and exploitation balance\n        self.initial_temperature = 1.8  # Fine-tuned for enhanced initial exploration\n        self.cooling_schedule = lambda t, i: t * (0.83 + 0.15 * np.cos(i / 6))  # Refined stochastic cooling schedule\n        self.cooling_rate = 0.91  # Slightly modified cooling rate\n        self.chaos_factor = 0.38  # Increased chaos factor for maintaining diversity\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 60 == 0:  # Tuned frequency for dynamic mutation\n                    self.mutation_factor = 0.65 + 0.25 * np.random.rand() + self.chaos_factor * np.sin(evaluations / 11)\n\n                if evaluations % 90 == 0:  # Modified adaptive mutation condition for strategic selection\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive DE with Strategic Leadership Selection and Chaotic Adaptive Perturbation to Boost Optimization Efficiency.", "configspace": "", "generation": 98, "fitness": 0.5101885969119603, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.51 with standard deviation 0.27.", "error": "", "parent_id": "c04199a1-bc22-498c-b857-d49a82499c50", "metadata": {"aucs": [0.8922847806523129, 0.88970331751051, 0.8923946962146714, 0.900155702321392, 0.8758173472955482, 0.8860717626002319, 0.8757164988987541, 0.9060755240240297, 0.9014885905562401, 0.8088234376684628, 0.8032726222277367, 0.8052538706333615, 0.8019180060824719, 0.8072398298463256, 0.8276138707269184, 0.8068663954027028, 0.8187861420324316, 0.8067449373443818, 0.3311159168391913, 0.36850163049984097, 0.3959932283635158, 0.15981386618761995, 0.4711930153154885, 0.2988578676002275, 0.3737670728256708, 0.23995657916994184, 0.4853949893936075, 0.1569455275600582, 0.3643369714193949, 0.1204318025888671, 0.3448085348816292, 0.15476771701017356, 0.37952069456816295, 0.13545904607686476, 0.44324857215902214, 0.3897025197635223, 0.9569456715551118, 0.9641980028632089, 0.9644537077493206, 0.9571501243415139, 0.9621882558316023, 0.9607585982083822, 0.9642053521242906, 0.9651359961266318, 0.9565021753053076, 0.7021543259952967, 0.6976254228508061, 0.7194643298640542, 0.69228542050778, 0.6772641303479023, 0.6803978957179295, 0.7179155431971169, 0.6879589443154185, 0.6518928030768842, 0.8925760854555881, 0.8447773629169679, 0.8426736422133503, 0.8846298572228959, 0.850756833706274, 0.8530781033077544, 0.8527285743534827, 0.8300999893649079, 0.7994108443555213, 0.6242293389263232, 0.6599166591752151, 0.5749546272184325, 0.6128617409576442, 0.568042331151122, 0.665681192173563, 0.5947226621528403, 0.5995659941368392, 0.5649812089109303, 0.5650025185467816, 0.588948243492292, 0.5989390117784821, 0.574502079682213, 0.5436319631062928, 0.5863468528363451, 0.6338461320672335, 0.5759607953246678, 0.582415627456587, 0.6069070378379735, 0.4138961475544418, 0.5707816422501213, 0.6219942720387976, 0.4887760245353783, 0.44152506502896793, 0.6586990418878425, 0.6237870657143911, 0.6462013930721735, 0.651111629863099, 0.7461313478368155, 0.5557521352179609, 0.637633824015238, 0.6988686923419299, 0.6960987476804243, 0.7395750526034075, 0.6750990937084685, 0.7583426820871688, 0.08655566563888517, 0.13443728634101426, 0.41109929034108805, 0.5442688249749306, 0.35695230929509636, 0.15368218959460134, 0.18446379127994383, 0.3087511534337576, 0.1694373676683788, 0.5130777381291456, 0.5047385854818456, 0.43337686848482204, 0.5740971235763475, 0.5272459808387824, 0.551639686883524, 0.5273474509878477, 0.41469025954553407, 0.4876672727287885, 0.7947703524817332, 0.8503139127347997, 0.7952896701788589, 0.7431654370376994, 0.8176506411344454, 0.8196400473872951, 0.8149612722098989, 0.825896003040476, 0.7157175341232886, 0.14239973806117756, 0.12773153453144404, 0.11559862162835166, 0.13336304340639804, 0.10724229391282714, 0.11084545006840985, 0.10105863491953537, 0.10247231142912228, 0.10086864693668518, 0.23907600602174994, 0.65837937330009, 0.28871363788795024, 0.22206156886983686, 0.5387480029573758, 0.3506257059229678, 0.3657071818381601, 0.19928571002522288, 0.14531915313838473, 0.5268893900151101, 0.47510156832230266, 0.5438426129954104, 0.5103985029329122, 0.5327430280867917, 0.5580750978779985, 0.5825453343975731, 0.6311264358536781, 0.5944451008441847, 0.4438734592073277, 0.34690522360466625, 0.378140890109979, 0.4242628207372542, 0.19591630786324332, 0.4176411896319737, 0.4643187532877172, 0.46412470898483216, 0.3624395636852894, 0.19848757952544382, 0.20765233729040244, 0.1947076997699737, 0.18303619920412273, 0.20071911709614143, 0.21043476527324112, 0.1997165779347323, 0.20416616665632947, 0.22533822269274384, 0.4285293422492976, 0.6373942973304896, 0.5133356820689173, 0.6489484525509799, 0.588165345570804, 0.3881688757342545, 0.5622392248112613, 0.2291202085783388, 0.5128257779274237, 0.8194531750702505, 0.8046201292597619, 0.8389729788875239, 0.8053765636720599, 0.7785381939762558, 0.7607445266068199, 0.7147762802331379, 0.1644705117574463, 0.1652721264018443, 0.29090833013969875, 0.8229080354098738, 0.8524324493347364, 0.7690777575213121, 0.20853666846988705, 0.20827666909945153, 0.15599012729030093, 0.1553505835870005, 0.15505236847193338, 0.18665105372871915, 0.192122451939854, 0.19316531933501435, 0.19632407886434167, 0.1770924980839138, 0.18496418832977013, 0.16653630514037232, 0.24413463325980445, 0.18086242117307616, 0.0793618638391903, 0.07630480083073088, 0.09004802903101372, 0.07549787374200823, 0.0774537637569761, 0.07008288004098995, 0.07536279188396033, 0.07999998724719937, 0.09280757495056713]}, "mutation_prompt": null}
{"id": "70d02c21-e4c5-4981-ac67-c1b812d9e58b", "solution": "import numpy as np\n\nclass QuantumAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 25  # Increased population size for better exploration\n        self.mutation_factor = 0.9 + 0.1 * np.random.rand()  # Slightly enhanced self-adaptive mutation factor\n        self.crossover_rate = 0.9  # Adjusted crossover rate for better convergence\n        self.initial_temperature = 2.0  # Increased for enhanced initial exploration\n        self.cooling_schedule = lambda t, i: t * (0.9 + 0.1 * np.cos(i / 5))  # Modified stochastic cooling schedule\n        self.cooling_rate = 0.95  # Adjusted cooling rate for gradual temperature decrease\n        self.quantum_factor = 0.4  # Added quantum factor for maintaining diversity\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.pop_size\n        temperature = self.initial_temperature\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n\n                if evaluations % 50 == 0:  # Tuned frequency for dynamic mutation\n                    self.mutation_factor = 0.7 + 0.2 * np.random.rand() + self.quantum_factor * np.sin(evaluations / 10)\n\n                if evaluations % 80 == 0:  # Modified adaptive mutation condition for strategic selection\n                    best_idx = np.argmin(fitness)\n                    x_best = population[best_idx]\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x_best + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n                else:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    x1, x2, x3 = population[indices]\n                    mutant_vector = np.clip(x1 + self.mutation_factor * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n                    temperature = self.cooling_schedule(temperature, i)\n                else:\n                    prob_accept = np.exp((fitness[i] - trial_fitness) / temperature)\n                    if np.random.rand() < prob_accept:\n                        population[i] = trial_vector\n                        fitness[i] = trial_fitness\n\n            temperature *= self.cooling_rate\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "QuantumAdaptiveDE", "description": "Adaptive Differential Evolution with Quantum-inspired Perturbations and Dynamic Temperature Control for Diverse Exploration and Swift Convergence.", "configspace": "", "generation": 99, "fitness": 0.45680279396939655, "feedback": "The algorithm QuantumAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.27.", "error": "", "parent_id": "cdd8fdba-803d-454d-af54-21a2c868a308", "metadata": {"aucs": [0.8425285393247057, 0.8355835143898431, 0.8371610422947786, 0.8632989210795986, 0.8508902168846049, 0.8580451870982542, 0.859101674053846, 0.8648172011455004, 0.862074203557653, 0.7250017111950866, 0.744507535963153, 0.7767330657812482, 0.7222673294899227, 0.7777000490940514, 0.7466865199433177, 0.7466375768460574, 0.743095677455454, 0.7264268313722602, 0.16886217544693005, 0.27733659209358197, 0.11789738544329953, 0.11508550363766368, 0.16825118081744728, 0.12049029514298293, 0.21900293812524818, 0.14762362640153115, 0.13738130961059447, 0.1535822325230416, 0.10546871203711639, 0.12466423422650641, 0.12618722349427514, 0.13807046133458056, 0.13266720197877513, 0.1066315126228059, 0.13483669817219002, 0.13491417016021456, 0.9624372144803119, 0.956170213537768, 0.9576387661293738, 0.9853940798764877, 0.9853864020889428, 0.9853875010461606, 0.954901014527464, 0.9629204273494165, 0.9611604832739468, 0.6527694877614457, 0.6184340279543719, 0.6225871391207949, 0.568159667250528, 0.5861406050381586, 0.6361648335583547, 0.6169263938693353, 0.6288637989989558, 0.6485933279830723, 0.7969256952360745, 0.7777140449058227, 0.8674973190033962, 0.8571300000609618, 0.796907950018771, 0.8602275432445765, 0.811773112247811, 0.7752816697226427, 0.812615415601512, 0.49842352412711266, 0.5061445250960641, 0.5794305557221315, 0.488321104356206, 0.5536901479146761, 0.49832695652748304, 0.5916417478217966, 0.5207885050591741, 0.42665835948960407, 0.5332035952692051, 0.5366073756590538, 0.43821616147845477, 0.545654099759745, 0.5486552083873248, 0.5715935608611693, 0.5231305209474222, 0.5141983087138504, 0.574726391646347, 0.5263702395319454, 0.5562556343324311, 0.5123203442369357, 0.5737560025467563, 0.5546105242886679, 0.5482328123748912, 0.4904717889339597, 0.579373872474263, 0.5389592181549111, 0.6503801693204475, 0.6565592787206787, 0.6286802661837547, 0.6830007818060448, 0.6839159766615392, 0.6727640054100326, 0.6441872595627218, 0.6545571074882435, 0.6597238320508012, 0.08844723795742615, 0.10962949488473028, 0.30320486483288167, 0.4512308753847646, 0.22395255536555791, 0.43914440584355086, 0.25749869994789343, 0.3085498416151379, 0.29157029557576153, 0.4089106375455145, 0.44076832355251705, 0.4201564699581293, 0.4861151654528447, 0.4356618226246667, 0.44056812144221646, 0.4540058534424397, 0.47639966733597416, 0.4279334970609918, 0.7946549101552927, 0.7989994624229166, 0.7839953704284678, 0.7838949744026169, 0.7698438640855871, 0.7812685170602767, 0.7685258365722282, 0.7864724990642542, 0.7926672938830256, 0.10150963930075618, 0.09805745470412042, 0.11550879628916666, 0.16213476391314174, 0.11890526674968782, 0.10615129297935832, 0.12460783746597859, 0.09422246705985804, 0.12063976210864491, 0.14408594425758214, 0.2253279125819072, 0.2431805566926153, 0.26123972487908576, 0.6540460212641239, 0.14098572267844356, 0.1469434461512168, 0.15055154377559954, 0.16074863221776758, 0.4548418691696253, 0.44928678700751823, 0.4960077013991304, 0.44789565365207773, 0.4397916483053005, 0.42739380772297186, 0.5076674663680818, 0.5006491347303512, 0.5212208111482862, 0.39215979164162684, 0.37021240505045083, 0.3768428863934318, 0.34320521546904414, 0.36244427228511855, 0.36488178151813566, 0.41141296867331867, 0.4084383377427049, 0.44058828919226567, 0.19925248785538063, 0.18528842086678743, 0.19561389947065289, 0.18346947619927423, 0.18223264120436455, 0.19035427488969747, 0.18790072449743822, 0.20687445522570724, 0.17661635576461288, 0.47226963734651606, 0.42757321847830076, 0.45675998946823726, 0.2462081158866275, 0.188258677200283, 0.3304505373925003, 0.3993706073363049, 0.5627604305261478, 0.4657685540270108, 0.15490180160418965, 0.8429347551198663, 0.8302858684034752, 0.8458983547306165, 0.6963755808522996, 0.15329264695288025, 0.8031645226257268, 0.20732202885415285, 0.20735024878921815, 0.16293957205185816, 0.20978467315207305, 0.2088480763654169, 0.1666650147259957, 0.7958180089717234, 0.7942847530077897, 0.21113469622278902, 0.2073231379358439, 0.20737960727246385, 0.17997299788754795, 0.20099322884587423, 0.17631889352372532, 0.19166125126678668, 0.18425869677072548, 0.2001813464129798, 0.1641893946120998, 0.1861585687657319, 0.17573261105161342, 0.08601746384124342, 0.07741593691026283, 0.08114138377097246, 0.07758989312651232, 0.07532732504454887, 0.08831048016125131, 0.07412623535480234, 0.07372517653052513, 0.08455044476163931]}, "mutation_prompt": null}
