{"id": "892bd2c7-abdd-4072-aa9e-df0ec7570c38", "solution": "import numpy as np\n\nclass HybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Differential evolution scaling factor\n        CR = 0.9  # Crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = max(0.4, F * (1 + np.random.uniform(-0.1, 0.1)))\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.95)\n\n        return best_solution, best_score", "name": "HybridEvolutionaryOptimizer", "description": "A hybrid evolutionary strategy combined with adaptive differential evolution, balancing exploration and exploitation for enhanced convergence.", "configspace": "", "generation": 0, "fitness": 0.3480040063663889, "feedback": "The algorithm HybridEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8630117150308246, 0.8270544060364138, 0.9124279369713688, 0.8462438982547115, 0.8434313935219094, 0.9124863328214783, 0.8560385020282273, 0.8557779332825582, 0.9057989336460899, 0.7108715060131572, 0.7734477848396109, 0.824185651766426, 9.999999999998899e-05, 0.7866113075816993, 9.999999999998899e-05, 0.7165651459944327, 0.05277313533290984, 0.837277786872243, 0.21627935167987866, 0.1651351079239317, 0.16729502017876308, 0.1353013550706893, 0.14703827157421678, 0.3300461747964928, 0.16049928029103033, 0.1538166684587441, 0.15745135984412406, 0.14472926133551867, 0.15140294041708635, 0.23041869881392962, 0.12208551532196632, 0.12010005881152597, 0.15318397882367685, 0.14112175581567354, 0.16019673365862563, 0.11016529956402377, 0.9898892040168453, 0.050027673633189274, 0.9690898241258664, 0.9768101186383531, 0.9829135048710419, 0.972918002584253, 0.9744038510356671, 0.9838848619325984, 0.9774613844112507, 0.40460169208329055, 0.5415975096858987, 0.5425263204081443, 0.38840837498472924, 0.2220787638399958, 0.7188867348554883, 0.08876423896254104, 0.6667961540359761, 0.583098770801561, 0.6894795683606579, 0.7841746756806568, 0.8773067994681798, 0.8391256986865891, 0.7896923766669508, 0.8720885501902162, 0.8176174329169036, 0.7819965589216044, 0.3900134016697301, 0.25878626301576824, 0.14776232626922225, 0.373446398729536, 0.27224208510501524, 0.12208646821273139, 0.2230575465648712, 0.33595834099510014, 0.15149800980771233, 0.42375309322890575, 0.009884346271598732, 0.022379878074757276, 0.13455592520370352, 0.28337405716709996, 0.23725015010476558, 0.24606027634756933, 0.24601697350971896, 0.19324199714026458, 0.3526451459329236, 0.1747436047823221, 0.21312708248451318, 0.06988924971408828, 0.16872553306009397, 0.31373379976519944, 0.14502278051455175, 0.0688034519510462, 0.3571791534248616, 0.32319440125493104, 0.41951688639946805, 0.104658283173092, 0.38966108844884706, 0.32779860711312736, 0.35762255852884617, 0.2149508230331849, 0.2624138145406527, 0.017599137957969968, 0.23912568754243524, 0.030586685741129105, 0.09185438038430294, 0.1682004478766076, 0.0899256148364671, 0.07413833906676259, 0.20220672092100944, 0.09228431506393886, 0.13591445681809877, 0.17528489375851952, 0.19063025326028205, 0.3367331373151278, 0.31593591115662456, 0.1943995084965865, 0.30853656972231125, 0.4225189937070173, 0.1758474916725874, 0.3332163853500313, 0.31080413071389645, 0.6321674653603968, 0.6641768866719975, 0.7429511966416342, 0.6361972857175058, 0.6063747301131444, 0.7372713897530256, 0.6166716369941259, 0.13937961266207044, 0.7113075655767029, 0.09056025476047858, 0.10719962921259996, 0.12851358204028096, 0.08726988526755142, 0.11180219584133466, 0.15299330432136848, 0.09420206499658601, 0.13689033257020256, 0.11316171720639867, 0.18485051557918608, 0.21081851251412798, 0.15110170761171304, 0.19289000160246295, 0.14968083947625377, 0.18981108107119615, 0.2938179620414847, 0.10511546799950977, 0.12917149429821362, 0.2849386284886143, 0.5145606390692858, 0.4532747426111571, 0.3373232035691529, 0.6375342178437822, 0.5302349363364446, 0.3478890959269104, 0.7034064906529096, 0.43702185689493256, 0.21425047785681584, 0.3113645319790206, 0.3492991524378707, 0.1879282063410972, 0.19801433537743984, 0.2737123546255579, 0.3022844692651512, 0.44883093672366936, 0.4230084297575355, 0.18901386908102624, 0.1607747161661367, 0.1949680375371432, 0.20583320109068004, 0.1714532865361773, 0.17310356082530198, 0.19217129188926751, 0.1901847298190129, 0.18103602923804596, 0.1877263446274432, 0.20016508432787783, 0.5161209366398887, 0.1777540770523347, 0.6014799772891134, 0.47625340035007957, 0.22750949782773466, 0.20921232812216872, 0.39227310444190655, 0.8794342916979088, 0.16692242237013055, 0.9185346094023018, 0.18950944583741247, 0.18142038911363179, 0.8998434971774387, 0.16996226896246736, 0.18692148470276282, 0.18150474214973433, 0.20611460148473937, 0.16006395025139375, 0.7169969221069206, 0.7684453443140196, 0.7526593493492194, 0.20565517337703376, 0.10498362756353286, 0.19707890619412993, 0.12787112977752058, 0.18264615318622834, 0.17340841114277683, 0.1544247641068356, 0.18551429003555353, 0.18148441966816797, 0.17951011042841059, 0.18226810787510983, 0.14595679822220642, 0.16248233056386818, 0.06541638225279656, 0.07615480106042982, 0.07896665790614499, 0.07399195888926313, 0.07947247829499848, 0.07960706265601891, 0.07079506189804219, 0.07120640593698013, 0.07647281758969093]}, "mutation_prompt": null}
{"id": "f9cc3a60-cf01-4fbc-9599-3035f2bef38b", "solution": "import numpy as np\n\nclass ChaoticHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def chaotic_sequence(self, x):\n        return 4 * x * (1 - x)  # Logistic map for chaos\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n\n        F = 0.8  # Differential evolution scaling factor\n        CR = 0.9  # Crossover probability\n        chaotic_param = 0.5  # Initial value for chaotic sequence\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                chaotic_param = self.chaotic_sequence(chaotic_param)\n                F_chaotic = F * chaotic_param\n                mutant = np.clip(a + F_chaotic * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates with chaos\n            F = max(0.4, F * (1 + np.random.uniform(-0.1, 0.1)))\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.95)\n\n        return best_solution, best_score", "name": "ChaoticHybridEvolutionaryOptimizer", "description": "A hybrid evolutionary algorithm combining adaptive differential evolution with chaotic maps for parameter tuning and enhanced search capabilities.", "configspace": "", "generation": 1, "fitness": 0.04454227808749974, "feedback": "The algorithm ChaoticHybridEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "892bd2c7-abdd-4072-aa9e-df0ec7570c38", "metadata": {"aucs": [0.11011499870454577, 0.08779798015069429, 0.11669024461146549, 0.04745714054987327, 0.15544867267975937, 0.13803293030798758, 0.08140125858634051, 0.08935038483800795, 0.09878583441096778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03137572183824977, 0.01467079663371329, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012186513362246743, 0.016076307699992465, 0.031463677429850345, 0.022035350629013406, 0.005382206075009388, 9.999999999998899e-05, 0.023635418255052887, 9.999999999998899e-05, 0.02975050791688716, 0.010134199942084865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08563670710918636, 0.051174642699125306, 0.04287777107098589, 0.07405764515508095, 0.05339254635645352, 0.07558202531399061, 0.08019454778847701, 0.048986754550083944, 0.07883063236039434, 0.03591326855291932, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032110397819811176, 9.999999999998899e-05, 0.06468903480784172, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.012188433276419497, 0.06890055543400941, 0.022803473783880923, 0.04523403563960071, 0.061540379645944276, 0.025177785886344783, 0.03990241873954403, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00922456836726937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019077791268307553, 9.999999999998899e-05, 9.999999999998899e-05, 0.031749540738217674, 9.999999999998899e-05, 0.006001443751024627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1291258196326064, 0.13185939113269962, 0.16575236964907858, 0.16172818060362637, 0.09979211574661817, 0.11956921936664788, 0.1240568991094797, 0.11958824593242712, 0.1210557193025883, 0.01816205303210061, 0.02933626079781715, 9.999999999998899e-05, 0.006101769545772684, 0.023396067009543553, 0.04502496438603232, 9.999999999998899e-05, 0.013150523651480062, 0.0267656688986897, 0.07275351655531281, 0.10379617066480629, 0.06363397162222695, 0.10393313614990707, 0.10852972522114013, 0.08260819505419492, 0.05497932156064522, 0.12104243650977065, 0.07726393575557644, 0.10307054212379552, 0.11737515945023336, 0.10548696776804667, 0.14442107235747903, 0.09386693901080945, 0.10176294544643139, 0.11420206329748472, 0.13456594018210422, 0.07784834048331069, 0.06615999374525361, 0.0483491770988026, 0.06163035654426752, 0.06485958459975594, 0.04702572349635015, 0.04762529867166121, 0.07342458127931673, 0.06877397714276756, 0.05626145373071345, 0.13694382244623793, 0.08458225983591072, 0.13345086981233123, 0.12415452698519625, 0.0897145765895706, 0.10553917214008912, 0.13611697804969025, 0.12562822738805535, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07853934632361215, 0.06450714334950769, 0.08986410785698484, 0.08643265153539537, 0.1207914665021157, 0.06661401029160186, 0.08321291858607716, 0.09945912702183812, 0.060876012169857274, 0.061036423439492005, 0.06820566663691241, 0.0202205905598436, 0.0962430852260242, 0.062180653209558456, 0.047753830345926174, 0.05596445949685824, 0.044739647966268836, 0.04143420019681854, 0.15068980278548005, 0.12932286395589176, 0.14763022729669195, 0.11599487746987158, 0.1276372566578461, 0.12465113207635137, 0.14455833654101302, 0.10862764757569365, 0.14689007985489466, 0.02252958829264573, 0.026162050058270325, 0.031393493129599714, 0.004755136527316295, 0.01874117556322563, 0.015435049144497337, 0.010631519758918295, 0.008656779642533863, 0.02191168061636195]}, "mutation_prompt": null}
{"id": "1ea2cfab-ee93-4cc5-b357-eb8a0ede06ba", "solution": "import numpy as np\n\nclass AdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 10 + int(2 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.7  # Differential evolution scaling factor\n        CR = 0.85  # Crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = max(0.5, F * (1 + np.random.uniform(-0.2, 0.2)))\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.6, 0.95)\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:\n                self.population_size = int(self.initial_population_size * 0.8)\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "AdaptiveHybridOptimizer", "description": "A hybrid strategy blending evolutionary algorithms with adaptive differential evolution and dynamic population size adjustment for improved convergence.", "configspace": "", "generation": 2, "fitness": 0.40273124287702666, "feedback": "The algorithm AdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "892bd2c7-abdd-4072-aa9e-df0ec7570c38", "metadata": {"aucs": [0.8837330206790245, 0.8252058275565118, 0.896350582197004, 0.8968452929529596, 0.18194397533950324, 0.8983185565617996, 0.8946668936926598, 0.8562623467202927, 0.9103755791054137, 0.8033754973965908, 0.7872609215772904, 0.818848773560799, 0.785856056114022, 0.787921326071729, 0.848016891498303, 0.806044786906053, 0.7831291028991236, 0.8507756181285566, 0.36986783682444846, 0.45557397704273783, 0.42783242841894376, 0.4465119155760523, 0.5764311062691174, 0.4149331817834482, 0.44320026992656114, 0.1498744653582209, 0.3080012366742443, 0.1598449649289847, 0.13034031493545117, 0.15658807154377918, 0.3410201893348863, 0.538935135760191, 0.3457088620754195, 0.42871993164702804, 0.5452168294084012, 0.13010643270217492, 0.9844926216394243, 0.9805988898358444, 0.9771457614988701, 0.9863871982968131, 0.9857322116291062, 0.9845660342715724, 0.9854035078947858, 0.9755927012079217, 0.9842307370143116, 0.6322903325455103, 0.6437643997777245, 0.628046458262419, 0.6430783666102793, 0.6135603785362694, 0.4969416202563278, 0.6309942268696742, 0.614194661669871, 0.5536278800828822, 0.6774134509858987, 0.791193840332038, 0.8397980461497174, 0.8612663683139727, 0.7901799868267557, 0.8713894642022535, 0.7972226439117993, 0.30602769239195904, 0.8562834119803672, 0.5463080245538243, 0.49306265839427454, 0.3671781881220135, 0.3873520453874464, 0.533092105240083, 0.550160643872318, 0.4031330003272756, 0.49962349037840414, 0.20661282384556057, 0.48944149664545644, 0.009830887349167816, 0.1338273875252094, 0.5656198104830307, 0.12320545486145784, 0.3957934794538742, 0.47556557030137836, 0.48990652345370533, 0.19598392518845265, 0.25968143696751544, 9.999999999998899e-05, 0.24092723111068148, 0.2876208894018404, 9.999999999998899e-05, 0.23943508280584602, 0.26498612519372977, 0.022752861610225827, 0.07998850100332844, 0.2703323131951497, 0.4627724092899024, 0.3582474077392169, 0.3517431216011059, 0.013088657778566604, 0.33878192812936636, 0.3547578594488764, 0.4737462752383488, 0.3914041232568505, 0.07696735186154857, 0.17253537200552527, 0.15816360542050822, 0.17964199382005264, 0.13904846215079247, 0.14999705609319758, 0.21578232923681095, 0.0953612241364914, 0.2662212536634494, 0.3304522747471196, 0.3092122220291359, 0.2614295174981325, 0.34811296587383045, 0.3653670430686521, 0.31468162286847856, 0.31416789497956965, 0.27084570818863096, 0.2931000024401933, 0.6977431216613066, 0.6866038370614447, 0.7053949899227532, 0.6986091738141289, 0.6623226333535068, 0.6738939314315926, 0.72544041708806, 0.7501032262572495, 0.6508039995732786, 0.13456957368628442, 0.10852729415695284, 0.09194950186754725, 0.13142476336757514, 0.10962453636060576, 0.13186533250232568, 0.08394902749280808, 0.09193977189856561, 0.25893717406753136, 0.169144881468552, 0.16312538793283415, 0.21099165313090285, 0.12490757131719876, 0.2690211432156635, 0.16599975761205876, 0.19076694703114094, 0.21086614738535958, 0.1378659493134694, 0.5258419633167206, 0.5346711693158416, 0.38561108346437023, 0.4894734661115733, 0.3967238834011868, 0.4301508925623474, 0.49910845474471177, 0.48297430730155577, 0.47449856331915696, 0.3177482368860155, 0.30533219130174705, 0.2998235886647367, 0.3548531860500249, 0.3689162437772848, 0.3228042138216466, 0.3899255484432572, 0.3289255623291216, 0.2962052891139111, 0.2042346357791034, 0.17270840527080722, 0.1746320151417574, 0.1725491814141351, 0.16109498654864807, 0.18350346253490357, 0.18582296361326767, 0.19417670631874184, 0.23660819494378893, 0.20542555347759084, 0.5436216795009042, 0.21871768271567238, 0.4950343881893584, 0.5120997453905387, 0.21183650847528535, 0.560303555101809, 0.6098584519838891, 0.36719602067120316, 0.16092160884802686, 0.16205717395233965, 0.1523064574557209, 0.8012547793191356, 0.18224689257041882, 0.7978197071286856, 0.16341620427661185, 0.16220966924756763, 0.8259695729471889, 0.1560570919518237, 0.2009471998603226, 0.1756885579461881, 0.2071674336323096, 0.1927840867387114, 0.5539583824035856, 0.20264905755374907, 0.18631129240616362, 0.19694000488146257, 0.18279839274310794, 0.17521934398673744, 0.18417641478858404, 0.21201469399813055, 0.1705582827433273, 0.18524443115125444, 0.16902036546848198, 0.17275006482885824, 0.19435090750096173, 0.07045527995971879, 0.08128087106047333, 0.08247838828446308, 0.08130753744189656, 0.07567960807807506, 0.07270198026241192, 0.08212394525490896, 0.07536612264582054, 0.08000020175553457]}, "mutation_prompt": null}
{"id": "265cf628-df63-44f2-9e73-83e34ea84211", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 10 + int(2 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.7  # Differential evolution scaling factor\n        CR = 0.85  # Crossover probability\n        reinit_prob = 0.1  # Probability of re-initializing an individual\n        local_search_prob = 0.3  # Probability of applying local search\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n                # Re-initialize with a small probability for diversification\n                if np.random.rand() < reinit_prob:\n                    self.population[i] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                    self.scores[i] = np.inf\n\n                # Local search using a simple gradient approximation\n                if np.random.rand() < local_search_prob:\n                    gradient = np.random.uniform(-0.01, 0.01, self.dim)\n                    candidate = np.clip(self.population[i] + gradient, self.bounds[0], self.bounds[1])\n                    candidate_score = func(candidate)\n                    self.evaluation_count += 1\n                    if candidate_score < self.scores[i]:\n                        self.population[i] = candidate\n                        self.scores[i] = candidate_score\n                        if candidate_score < best_score:\n                            best_score = candidate_score\n                            best_solution = candidate\n\n            # Adaptive mutation and crossover rates\n            F = max(0.4, F * (1 + np.random.uniform(-0.2, 0.2)))\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.6, 0.95)\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:\n                self.population_size = max(5, int(self.initial_population_size * 0.7))\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedAdaptiveHybridOptimizer", "description": "An enhanced adaptive hybrid optimizer incorporating probabilistic re-initialization and stochastic gradient-based local search to improve diversification and convergence speed.", "configspace": "", "generation": 3, "fitness": 0.17842652676276546, "feedback": "The algorithm EnhancedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "1ea2cfab-ee93-4cc5-b357-eb8a0ede06ba", "metadata": {"aucs": [0.3960452056610989, 0.354176693540433, 0.36837446905528204, 0.4231608106109498, 0.37975233045934353, 0.3379701917687422, 0.3809897663558147, 0.36594269314399475, 0.29583299537059093, 0.07442311851460348, 0.12933675563028824, 0.029918658185769553, 0.07418738843864536, 0.09304542946754701, 0.026592385219940895, 0.08319961443603152, 0.13961114692682552, 0.02356959460867425, 0.11051313127359119, 0.09841812581576503, 0.07947810939478217, 0.07044074736709904, 0.09340246869844848, 0.08684242534101994, 0.0852109326796231, 0.09337226063413351, 0.09149334939333786, 0.060767566425758535, 0.06603651844294234, 0.06181617354366098, 0.07491682626167784, 0.07192571618776256, 0.06349023138659593, 0.06561656326533227, 0.07716299103818869, 0.06338318950853372, 0.9806418285498003, 0.9701103976024428, 0.9804236904835322, 0.9833264551253679, 0.9791647380207698, 0.9745532326902062, 0.9833160956742536, 0.9888973649359107, 0.9781427572633958, 0.1444946140420258, 0.14783871925315273, 0.11189868456236929, 0.15087887467680083, 0.14547917231060925, 0.10718308879873417, 0.17906971356119483, 0.16089058648021715, 0.11468264367473002, 0.19608455295590177, 0.21516372297497444, 0.16104264915640032, 0.1968516207663834, 0.25462982608476836, 0.23121672284528627, 0.2103434253600146, 0.2258274068886793, 0.23047112747270726, 0.09935035983893126, 0.09395162647003819, 0.10575111189384201, 0.11303815902900949, 0.10724393648385977, 0.10533378576191665, 0.11433372935515496, 0.11158905297335076, 0.0978540245906474, 0.11960237639709415, 0.0931524636538077, 0.08034162621340835, 0.1015948800112757, 0.11154321637290654, 0.0849339163580618, 0.10586861936999614, 0.10702863254620065, 0.07194944936407788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10466344040475484, 0.10401383644806306, 0.09127779097330546, 0.09567553566986353, 0.11235645740200761, 0.07730639894659141, 0.12144443254869186, 0.09945278805345281, 0.07541817133211426, 9.999999999998899e-05, 0.0046774299864251745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08180159007641341, 0.0740625584004212, 0.0292539200148918, 0.05087637844695769, 0.0980120204419116, 0.03788542779727466, 0.058968591776947465, 0.10178848652136707, 0.05306609335364132, 0.34745021717942837, 0.39590891909876536, 0.30607330662824817, 0.31314295471791576, 0.3669157822947673, 0.3975194831925012, 0.330708142553616, 0.33052808415356527, 0.28813046190569813, 0.08694302757723615, 0.08661835406630303, 0.06961878977439717, 0.06977181841757574, 0.07498771588029518, 0.07400903454180918, 0.07133772017196738, 0.06738617346373499, 0.0752043897061796, 0.1451178816362635, 0.14898263817775226, 0.14830142924904322, 0.1549322396414503, 0.14323836183720706, 0.15541742337322084, 0.15212145607405692, 0.13356260898310435, 0.16675700779219182, 0.2246492061332208, 0.22780826450046676, 0.2107748451851229, 0.2122509783587503, 0.21838939616940722, 0.1727835959037235, 0.23315227555078177, 0.24015126605968617, 0.21739754251542043, 0.1793513276339056, 0.17630125715471023, 0.14526543798324187, 0.1337993981774791, 0.1721388826074859, 0.14770217371796657, 0.14028486327569278, 0.15142224904629453, 0.14575576144327984, 0.19533538088395253, 0.22076036827642886, 0.214886606263763, 0.18649174029287519, 0.17176378081774113, 0.18783751509840163, 0.1842775110578294, 0.19121451577071302, 0.19588632840102327, 0.15967501060980105, 0.17251050730051398, 0.1769085513145645, 0.1698789257004537, 0.17580113242697137, 0.17760603954395138, 0.16077544376709396, 0.16577431416454547, 0.1734696166453168, 0.2812869450996909, 0.1680754387644362, 0.1699071385496994, 0.20534228769890606, 0.22304763717284692, 0.16200392790305085, 0.2589643607230202, 0.31303780021675864, 0.2127186943124154, 0.22792259331241616, 0.18643999201770511, 0.177637161557051, 0.1762049145473913, 0.18493673887212758, 0.17477900331656726, 0.20003000461700982, 0.20559582866341575, 0.1892235964736264, 0.19244151267433762, 0.20692668534309622, 0.18695975592877956, 0.2049505633591021, 0.1928732245550443, 0.19104400470412242, 0.1951888093172106, 0.185172271307532, 0.18920376624384572, 0.06749987620687536, 0.0740180573984619, 0.07597827738425278, 0.059118865656276776, 0.08917578857030972, 0.06795765687615696, 0.08129849845419046, 0.07043256413194054, 0.07061550544466044]}, "mutation_prompt": null}
{"id": "314450b6-f5fb-4bba-aa15-5412df8865d2", "solution": "import numpy as np\n\nclass StochasticHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 10 + int(2 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Differential evolution scaling factor, slightly increased for more aggressive exploration\n        CR = 0.85  # Crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation with stochastic perturbation\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                perturbation = np.random.uniform(-0.5, 0.5, self.dim)\n                mutant = np.clip(a + F * (b - c) + perturbation, self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = max(0.6, F * (1 + np.random.uniform(-0.3, 0.3)))\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.5, 0.95)\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:\n                self.population_size = int(self.initial_population_size * 0.7)\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "StochasticHybridOptimizer", "description": "A robust hybrid optimizer integrating adaptive differential evolution with stochastic perturbations and dynamic population reduction to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": 0.20005170312176504, "feedback": "The algorithm StochasticHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "1ea2cfab-ee93-4cc5-b357-eb8a0ede06ba", "metadata": {"aucs": [0.4176973707413477, 0.4163812839786508, 0.3701061503359663, 0.40905986229978575, 0.4075073260821348, 0.3846183706659094, 0.4337725761110077, 0.4370271475040448, 0.3823463347567505, 0.061096543207328935, 0.07489891488805422, 0.042312519238795754, 0.09931597015749105, 0.07958589855574605, 0.06390381368069009, 0.08370879336311321, 0.07591360464364627, 0.0387336874925448, 0.12780020525850955, 0.13439411245658772, 0.1038474947041339, 0.15085285823425731, 0.11450376312558441, 0.09133702712573977, 0.13138124147266828, 0.11794868863237529, 0.0951472671261443, 0.12117611445950627, 0.09712648266566792, 0.08307646588352491, 0.12082214837874983, 0.11445876258059429, 0.10409601144568337, 0.10621521692613589, 0.10073090413690222, 0.10087401018171827, 0.9697219376321062, 0.9888853338327738, 0.9688407003788229, 0.9661200477116665, 0.9773405699628243, 0.98733116540306, 0.9712318329723789, 0.9851311590699365, 0.9761563002159505, 0.24586817263208915, 0.23726740398162804, 0.20020913857520062, 0.23721300142870982, 0.23499126894745315, 0.22555854440392376, 0.24253802163676996, 0.25006298925233816, 0.19548080694890746, 0.2814432393226022, 0.23337024067372836, 0.2548563482739634, 0.2792501520004975, 0.2668795104320131, 0.2442810231252226, 0.2472167240937121, 0.2748711652962659, 0.24914158902735173, 0.1410284936193621, 0.14752965455174127, 0.12250972910444269, 0.15112966408239115, 0.1507245936727919, 0.11080673643993055, 0.1447404927425281, 0.12099101931952105, 0.10875622263095519, 0.1302037859245454, 0.11101742026662975, 0.10961221133176346, 0.14731927058911187, 0.13291818914850395, 0.08642689266014403, 0.14433916274587022, 0.10593715220895106, 0.09511655232755634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09148481057041558, 0.08784026443617099, 0.05438819310376075, 0.0686257509284105, 0.05903401664078867, 0.08369144348207558, 0.1089322049079201, 0.05340553475535581, 0.06218563619496931, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05027752687745213, 0.05684827324887298, 0.06314123504911462, 0.09345198476568073, 0.07939105217890574, 0.06154055432939909, 0.06718566176489182, 0.060682083418641786, 0.06847073016915561, 0.40410887198605094, 0.3934486238172431, 0.3492643545263475, 0.3883224767854563, 0.38381200984894825, 0.35979601605313793, 0.37423839803071746, 0.3889434346328189, 0.3611169628673565, 0.11169197090057537, 0.08797728186690434, 0.08725671016230152, 0.09201744224839115, 0.10968716140227697, 0.08142746646507881, 0.10459420902789829, 0.07365945310439637, 0.07095773157815366, 0.1503862215211087, 0.15342941371997387, 0.15067006252489024, 0.1345453810701963, 0.18044743290551757, 0.15864277867710264, 0.1500702628691375, 0.17670372753999086, 0.1824975740429985, 0.2566914372517384, 0.241173506255016, 0.23142816058284543, 0.2608127514804319, 0.2479146323728092, 0.2252977863932597, 0.26756662956960764, 0.2754158326249294, 0.24269788096727885, 0.19908996475857632, 0.1895618890819717, 0.18128365461707985, 0.17634822542833006, 0.16766097912472355, 0.17605304573954528, 0.1993399309157734, 0.19288596012924109, 0.17444353115138622, 0.18390125187634743, 0.2088662459171151, 0.1847920188822353, 0.18500925027043835, 0.17375157871169689, 0.16870335279135396, 0.20375690630143495, 0.18581903525205457, 0.1793043126424172, 0.20959353771167444, 0.20103423094335882, 0.1844157715281889, 0.21073720737814128, 0.1880429492163318, 0.17316854119909408, 0.1950787521265931, 0.17925121379454545, 0.18149942576480194, 0.1645964846480752, 0.48573090006356157, 0.18029168095562398, 0.5345660183989314, 0.5106930059109024, 0.17293266061829815, 0.553474554083982, 0.15559804907776564, 0.17654538765872907, 0.38750327329530276, 0.16733575749259977, 0.166740875997184, 0.19277685442253634, 0.2985350107888415, 0.20446739232815192, 0.15518316670664223, 0.21197668706380368, 0.2061480710233068, 0.17407376894955617, 0.18035034131108518, 0.18583443644369912, 0.1743101789072551, 0.17839449113929928, 0.17813779673191876, 0.19798628725772882, 0.17664940119531236, 0.1859508719490588, 0.07445289755810813, 0.08201001808470643, 0.07223191605440493, 0.08074991699583867, 0.06971365883396519, 0.061722122142539027, 0.07675375370789805, 0.08430055016837246, 0.07182729549081412]}, "mutation_prompt": null}
{"id": "3352bf8e-dbd8-458e-bd99-16ebb5704d9e", "solution": "import numpy as np\n\nclass LearningAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(1.5 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Differential evolution scaling factor\n        CR = 0.9  # Crossover probability\n        learning_rate = 0.05  # Learning rate for adaptive strategies\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = max(0.4, F * (1 + np.random.uniform(-0.1, 0.1)))\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.95)\n\n            # Dynamic population and learning-based adaptation\n            if (self.evaluation_count / self.budget) > 0.3 and (self.evaluation_count / self.budget) < 0.7:\n                self.population_size = int(self.initial_population_size * (1 - learning_rate))\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "LearningAdaptiveHybridOptimizer", "description": "A hybrid optimizer combining evolutionary strategies with adaptive differential evolution, dynamic crossover, and learning-based population adaptation for enhanced convergence.", "configspace": "", "generation": 5, "fitness": 0.3447810216227043, "feedback": "The algorithm LearningAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "1ea2cfab-ee93-4cc5-b357-eb8a0ede06ba", "metadata": {"aucs": [0.917537444259175, 0.7778868360346782, 0.8348816061955454, 0.9204353658686405, 0.7807775151401477, 0.8517694333806621, 0.9208118417128723, 0.8208557505885103, 0.8443834356620832, 0.08099418634789401, 0.5842799032636162, 0.7621641237569625, 0.8545325081326911, 0.429890984997524, 0.7695584744763064, 0.7715232092935198, 0.5456977151329201, 0.7863084703678987, 0.5843820757004721, 0.1519771949737696, 0.1600125200936674, 0.37134466303015157, 0.16983513075417866, 0.25045968171105937, 0.17690545244255063, 0.11491791081391967, 0.4784561450685645, 0.12768480976096108, 0.11503982364905041, 0.15434565651742305, 0.15258473160893282, 0.11554481112809722, 0.3133528478532266, 0.3923038277502139, 0.10965062605068254, 0.12925125773387625, 0.9604500818970566, 0.982780021905875, 0.9756230658677952, 0.966947350779261, 0.9889404273891873, 0.9712573852664079, 0.939450904355999, 0.9635818099293624, 0.9910722034724438, 0.15244201731586005, 0.3256498666011829, 0.6678331961551474, 0.2281474933568849, 0.3338505236378576, 0.6035858540496186, 0.23454544092780527, 0.39457794800917245, 0.6652106452785258, 0.8849586280827363, 0.2780929099368078, 0.7938889636108412, 0.36936055009338, 0.34453957834420346, 0.8162455840968569, 0.883347285699361, 0.6387139157395161, 0.8181850822119191, 0.19850069451377983, 0.23099119780015376, 0.270808692737483, 0.13886913248895438, 0.2831858781091413, 0.12819374737423206, 0.1838472954126963, 0.19681223214036225, 0.31054822813706107, 0.18929781230123433, 0.010170540708768439, 0.2811524722895119, 0.15508950339412497, 0.33357337471280557, 0.21086861395638812, 0.20564005867223345, 0.20205635728848126, 0.3280576619213671, 0.014755188652702422, 0.09878385895687714, 0.3479629649184791, 0.19630159522234758, 0.07458762125264962, 0.3418207424465609, 0.11434321916063672, 0.12739002173739788, 0.3885026379199451, 0.1609812319272087, 0.2849587037928373, 0.4128389424578489, 0.24867223532827687, 0.2958401050868037, 0.40006912529144867, 0.142988386480157, 0.299537931819584, 0.5318206126381038, 0.10157749015887296, 0.005168226778273999, 0.08235769573538743, 0.10119787898548971, 0.024833332828871013, 0.24706133595050883, 0.2264588598828573, 0.06539488218156786, 0.22014477885979078, 0.19638930887921213, 0.184910723194033, 0.3827808522694939, 0.0061351207887943016, 0.19107078360540886, 0.3847326073521635, 0.22283550407476893, 0.20267955797094284, 0.33908146991021726, 0.5652250666972947, 0.531357837098879, 0.7238077860281056, 0.8322052988069149, 0.5797326367729856, 0.7388657216478773, 0.6114065508323748, 0.5152381565691024, 0.7328047196805456, 0.12029890760636497, 0.09203158201046302, 0.10954730099340215, 0.13633558013994573, 0.09617623489123783, 0.11237274123184049, 0.1703703249834536, 0.09700065442411943, 0.09671991690651927, 0.18432931041275025, 0.09312774313352834, 0.14485631755123318, 0.18885140496126218, 0.16160004908098835, 0.1728727466700951, 0.24947439151700912, 0.1406341454514568, 0.184029296092311, 0.5349965704443131, 0.2951136491873724, 0.4490256965502194, 0.490875061404877, 0.28865475634115667, 0.42821976231726877, 0.5220899836108708, 0.30449235365201943, 0.5036916820714408, 0.3215998942087033, 0.2001622275260142, 0.3270197875490688, 0.3614017296968174, 0.20620103503513487, 0.3035145411096587, 0.6530781095794767, 0.24649209714232356, 0.38149282522542094, 0.23648408025505074, 0.1774477265261163, 0.1834380100579418, 0.21097374850773776, 0.15815027547213267, 0.19301834119553707, 0.21561510445020737, 0.19909243341623584, 0.22607107993114328, 0.24051167157144915, 0.17215591850851308, 0.20942715455426508, 0.24466667510745643, 0.1718282820348488, 0.2755652397308177, 0.20108847078533787, 0.20577686713554766, 0.27561017166842616, 0.27749834656587435, 0.7721025886659066, 0.15424808856963734, 0.1664735784095679, 0.18813819540838794, 0.1938457177833367, 0.13535929300494665, 0.8176438995396974, 0.19248366232905223, 0.5899363211548566, 0.1678681952520794, 0.8004828344114546, 0.2765096564505468, 0.6060917662524106, 0.2034255089751189, 0.2105865750527528, 0.1550056550109331, 0.1544896639163862, 0.18030883134368692, 0.1879674006402675, 0.18722138803194088, 0.23744223836242284, 0.15005795333629723, 0.1572297908194663, 0.23331097886138774, 0.18967755824408727, 0.1690276271450213, 0.08889987870920646, 0.06482285287904488, 0.08226876716916176, 0.09115418631567285, 0.06599673435570441, 0.08313365605113321, 0.08777332130305227, 0.06291720546367363, 0.07473958524816482]}, "mutation_prompt": null}
{"id": "73249819-6376-4143-87ba-87ae87592e2a", "solution": "import numpy as np\n\nclass EnhancedHybridSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 10 + int(2 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.7  # Differential evolution scaling factor\n        CR = 0.85  # Crossover probability\n        T = 1.0  # Initial temperature for simulated annealing\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Simulated annealing acceptance\n                acceptance_prob = np.exp((self.scores[i] - trial_score) / T)\n                if trial_score < self.scores[i] or np.random.rand() < acceptance_prob:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = max(0.5, F * (1 + np.random.uniform(-0.2, 0.2)))\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.6, 0.95)\n            \n            # Cooling schedule for simulated annealing\n            T *= 0.99  # Exponential decay of temperature\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:\n                self.population_size = int(self.initial_population_size * 0.7)\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedHybridSimulatedAnnealing", "description": "An enhanced algorithm integrating simulated annealing with adaptive differential evolution and dynamic population size for robust convergence across various landscapes.", "configspace": "", "generation": 6, "fitness": 0.3175005938496854, "feedback": "The algorithm EnhancedHybridSimulatedAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.20.", "error": "", "parent_id": "1ea2cfab-ee93-4cc5-b357-eb8a0ede06ba", "metadata": {"aucs": [0.46760135693042815, 0.45822271809420123, 0.479751594329347, 0.44284276048036986, 0.46549714667584663, 0.4760703930933413, 0.43014964427971447, 0.47576647007157225, 0.45713894722764226, 0.46469112047132444, 0.45498966507362926, 0.445894913020768, 0.4334185839304959, 0.4345233863306346, 0.4444369089514214, 0.4618905262878856, 0.4831504733537204, 0.4364000567253211, 0.17536400794271723, 0.12529296243226018, 0.1311068695755574, 0.1820417273695747, 0.13979312172802183, 0.384035113127561, 0.35325039136879277, 0.18311466127265064, 0.3500037479735101, 0.2054318883946603, 0.38084226757000783, 0.18402631732373043, 0.15438691158750228, 0.1547452762274083, 0.19612086840034026, 0.3974067463092502, 0.13488957274421132, 0.3659951531911385, 0.981484150715139, 0.9619288576743229, 0.9586982414305331, 0.9783076460783295, 0.9798979362357481, 0.985063307442419, 0.9861654775983852, 0.9570628490511386, 0.9823257083294663, 0.40093884603086816, 0.3773604313551324, 0.05927018311167809, 0.3863470763597032, 0.40108516446751385, 0.3807210485841195, 0.3702733016403197, 0.4010188189688989, 0.3850075514695199, 0.3611233034120107, 0.35584738298881935, 0.6632233451803917, 0.75869732091022, 0.7737570900110564, 0.5868902644155947, 0.35620351823346263, 0.7017809017997951, 0.7188000358463591, 0.3049728206275548, 0.3172558901115291, 0.3633485100742422, 0.2262769089591966, 0.27084720527002004, 0.3184934739096723, 0.3025974404902211, 0.4293487337734607, 0.41029166240804327, 0.022378635194787555, 0.327086653245123, 0.3314009038101884, 0.245075559309743, 0.20840981074452392, 0.26946802256154345, 0.23516744058720873, 0.34473234108174455, 0.36178137887759265, 0.13372728701615255, 0.2969525739079246, 0.09538523159014911, 0.18099407230878117, 0.2005789258321421, 0.1413782768009758, 0.3121675373161372, 0.34826925411575327, 0.35478247187204837, 0.3577150909499094, 0.24005471700834435, 0.23619104196892404, 0.2723937700611807, 0.1643189271073182, 0.1888145299188856, 0.30784192689777456, 0.3180865590925436, 0.09221268360875512, 0.07537126928638027, 0.32091788728473125, 0.11343880563363473, 0.3291026697119953, 0.27690638282934243, 0.11762828962714178, 0.19596027770698665, 0.10968632953416146, 0.04501393810268184, 0.32439305757253045, 0.3436060400521438, 0.30746198975579175, 0.30194525588258747, 0.3369916958092882, 0.31055493170060877, 0.29829889380120944, 0.3220926770962973, 0.24357838090406325, 0.43896688640260606, 0.4289061910229772, 0.43473158530643263, 0.4387681795829643, 0.43330646199474787, 0.42920578273154186, 0.4565598132691928, 0.431597232147072, 0.45434144276746014, 0.13460893916168393, 0.2482103566945022, 0.13802874519715702, 0.13223914850948426, 0.11961506449575876, 0.1452348375491389, 0.11402053766120457, 0.10705037167348586, 0.10787961635324006, 0.12164922916026988, 0.1627476677228824, 0.13393575473020014, 0.17643820496019502, 0.2638679416186477, 0.17833450239807536, 0.2194445218501785, 0.23087737356891924, 0.17056704844709403, 0.3793437612451812, 0.3705860845681316, 0.36660270115050564, 0.37191190969144716, 0.3777273627878023, 0.3912323685194464, 0.39411289445466724, 0.3001248471824164, 0.38342588430993585, 0.29036650225636973, 0.2893235557136694, 0.2609651102682967, 0.29694791509057705, 0.28515293689936805, 0.36097529638466874, 0.35794295350814875, 0.32614968079792794, 0.32285637940174994, 0.22639940327905428, 0.19475136487808054, 0.1752990332005746, 0.1888896509697483, 0.24110907236403856, 0.20840185496664598, 0.19588850256185997, 0.21232083198162377, 0.19292210562650514, 0.23142249243502466, 0.3970341626797832, 0.21907227556646391, 0.21820205606368004, 0.36108659228938156, 0.4160410651425617, 0.24745923587304297, 0.44911492759657323, 0.20216919471565498, 0.18573938690283853, 0.5587651252170445, 0.1623157209266205, 0.17950158579035147, 0.18560811742557093, 0.16319139367670799, 0.6143554143583949, 0.15310167370809036, 0.1414273243581663, 0.5611759932509526, 0.16852096042214304, 0.5017861081128099, 0.5586241302233478, 0.20908044398224568, 0.20108594926120582, 0.20755915786950974, 0.19876131831197597, 0.18903683836867935, 0.17961223111939706, 0.1905928795609223, 0.1884636495574349, 0.17797244819583136, 0.16325370690752916, 0.18792052657962033, 0.1850172155393851, 0.17063060495889348, 0.200484271813672, 0.10102748750878743, 0.07348535112551491, 0.07109302652249261, 0.07161278077659405, 0.08593091476753967, 0.08042828848806327, 0.08211536653188489, 0.08230826968058558, 0.07076613642434171]}, "mutation_prompt": null}
{"id": "664f9709-c1ff-428d-91fb-4553f92b7ff6", "solution": "import numpy as np\n\nclass EnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 10 + int(2 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n\n        F = 0.8  # Increased differential evolution scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation with elitism\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + F * (best_solution - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = max(0.4, F * (1 + np.random.uniform(-0.3, 0.3)))\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.7, 0.95)\n\n            # Dynamic population adjustment with elitism\n            if (self.evaluation_count / self.budget) > 0.6:\n                self.population_size = int(self.initial_population_size * 0.75)\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedHybridOptimizer", "description": "An enhanced hybrid optimizer using dynamic mutation strategies and elitism to improve convergence and solution quality.", "configspace": "", "generation": 7, "fitness": 0.2520434899405148, "feedback": "The algorithm EnhancedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.26.", "error": "", "parent_id": "1ea2cfab-ee93-4cc5-b357-eb8a0ede06ba", "metadata": {"aucs": [0.12651177221040266, 0.2319207349227227, 0.9182673668420644, 0.18189314711040172, 0.8803880707494198, 0.9327131615726663, 0.183486390687308, 0.17336175603157156, 0.17555738242176844, 0.07858045797176638, 9.999999999998899e-05, 9.999999999998899e-05, 0.04791493396767821, 0.06529392334413608, 0.8676927666778722, 0.05965758499761564, 9.999999999998899e-05, 0.01923982180905337, 0.08179027866666189, 0.14977154942518467, 0.18065892617142143, 0.18425855062725527, 0.06739540271888633, 0.07450569262082796, 0.7472791588832886, 0.0688449423395181, 0.1962153190942003, 0.15232342943040644, 0.09119454510538816, 0.02861177555001415, 0.1266261583920546, 0.11147267367540681, 0.16094889540905355, 0.13793728219375967, 0.09834810680660844, 0.10027220785427393, 0.9957039605478302, 0.050045481149806226, 0.9926922760838502, 0.9937069007800144, 0.9898348081133918, 0.9933488449171436, 0.9921604215441373, 0.9943291711444819, 0.9957817034737946, 0.7365458654850282, 0.7440484161470806, 9.999999999998899e-05, 0.7455941060341787, 0.04252567710968158, 0.8409767139136328, 0.12738384423806892, 0.7320224561366273, 9.999999999998899e-05, 0.21811396450347387, 0.22473578183734222, 0.5472829950365117, 0.3720869241585789, 0.20574039782424447, 0.16494867322526008, 0.1754994494253177, 0.14611755231145107, 0.13245709864633715, 0.4189509420321307, 0.11817255932176052, 0.1330697016527984, 0.6592605523563555, 0.1251885268031545, 0.39872136405872827, 0.6244775541254104, 0.15125942511515056, 0.1323714115236131, 0.6248511040672082, 0.009908238338080078, 0.016605406102846665, 0.6503566060551209, 0.12430399823896665, 0.34144604135052603, 9.999999999998899e-05, 0.24518184744358806, 0.3423970487997965, 0.09231964680947258, 9.999999999998899e-05, 0.062382421996996174, 0.26775046904360145, 9.999999999998899e-05, 0.047755978840176794, 0.23772476396485076, 9.999999999998899e-05, 9.999999999998899e-05, 0.08968478689424775, 0.1571731090422832, 0.14106600483473775, 0.10519048995569025, 0.0004379116274718653, 0.11206447130546804, 0.12235613354024577, 0.038914954836463234, 0.14197248986259947, 9.999999999998899e-05, 0.048340487951566535, 0.05204093256337128, 0.33512887047711404, 0.0768407754347401, 0.08232247325571296, 0.14964584419153648, 9.999999999998899e-05, 0.12256005230298328, 9.999999999998899e-05, 0.4244164265686249, 9.999999999998899e-05, 0.229948153421201, 0.3476884830429363, 0.006741771360454729, 0.3232750737367057, 9.999999999998899e-05, 0.04987850796847393, 0.6857303706210333, 0.6618265736228002, 0.5875890589945814, 0.6309860977434334, 0.7375567036710187, 0.6128270341050981, 0.7333881360837553, 0.5531620417966632, 0.6883681970203348, 0.05160235154946602, 0.05447901247089537, 0.04855182073388509, 0.09893598918436342, 0.08843125268344287, 0.13220411471251792, 0.15354707553086977, 0.1094176459099715, 0.11134233337030797, 0.26386272620632134, 0.09279782893597965, 0.15211734631740148, 0.14481587412291552, 0.12108746688984307, 0.10517979275325584, 0.2018359120079677, 0.14619512218730202, 0.15162133273351153, 0.403225353182317, 0.28984508630103845, 0.4279121215179438, 0.19375501810035245, 0.1873210154463142, 0.43621851909713494, 0.16627052103210294, 0.18659574013891045, 0.5188282574259857, 0.29310609572939916, 0.18585358394474571, 0.2517976817133877, 0.24968683992141205, 0.20307931681568503, 0.35067639624347813, 0.24787235398089003, 0.20354503827172, 0.2615003276126786, 0.18983789699602127, 0.1810062589522351, 0.18535582079841362, 0.17553522817142275, 0.19339873973768795, 0.19186889155851328, 0.18740025262503934, 0.21787585784714325, 0.20588075586777455, 0.24727392864303088, 0.19552162532347372, 0.20748151300709516, 0.21383791332824142, 0.18375497809491714, 0.20605028312269846, 0.22144782226854565, 0.19202606561316327, 0.20670709743385451, 0.16372526945439936, 0.15372380369687166, 0.15421309548972617, 0.14717277398931616, 0.15967540682866854, 0.9293837631957939, 0.16174077329463832, 0.13176670504820653, 0.16118651359549363, 0.14902985375708944, 0.1432729633730262, 0.08282858795356696, 0.8695268213609433, 0.162359473041504, 0.2096910255741632, 0.19403321677629937, 0.1778602081253059, 0.1509786247985987, 0.18321597834985537, 0.18068578582813755, 0.1885897002402005, 0.2136844166490679, 0.20940770066037973, 0.17899930667941955, 0.19107778762233996, 0.18949691373869526, 0.2245866957582564, 0.10530148029263853, 0.08557696448389884, 0.07955814483330037, 0.07917317988556627, 0.06996110312851234, 0.0937603209824509, 0.09928354678642537, 0.04741150895382651, 0.10238354281802253]}, "mutation_prompt": null}
{"id": "68cfe3cd-b26c-4819-8bdc-c944b9a00344", "solution": "import numpy as np\n\nclass AdvancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 10 + int(2 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n        self.elite_fraction = 0.2  # Fraction of population to be considered elite\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.7  # Differential evolution scaling factor\n        CR = 0.85  # Crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Select elites\n            elite_size = int(self.elite_fraction * self.population_size)\n            elite_indices = np.argsort(self.scores)[:elite_size]\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation with elitist strategy\n                if i in elite_indices:  # Force exploration for elite individuals\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                else:\n                    a, b, c = self.population[np.random.choice(elite_indices, 3, replace=False)]\n                mutant = np.clip(self.population[a] + F * (self.population[b] - self.population[c]), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive parameter tuning\n            F = max(0.6, F * (1 + np.random.uniform(-0.3, 0.3)))\n            CR = np.clip(CR + np.random.uniform(-0.15, 0.15), 0.5, 0.95)\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:\n                self.population_size = int(self.initial_population_size * 0.75)\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "AdvancedHybridOptimizer", "description": "An advanced hybrid optimizer that incorporates adaptive parameter tuning and elitist strategies to enhance exploration and exploitation balance for black-box optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "1ea2cfab-ee93-4cc5-b357-eb8a0ede06ba", "metadata": {}, "mutation_prompt": null}
{"id": "f242d45f-766b-4c5e-ab7f-b04c267637ff", "solution": "import numpy as np\n\nclass EnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 10 + int(2 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n        self.memory = np.full(self.dim, np.nan)\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.7  # Differential evolution scaling factor\n        CR = 0.85  # Crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n                        self.memory = trial.copy()\n\n            # Adaptive mutation and crossover rates\n            F = max(0.4, F * (1 + np.random.uniform(-0.15, 0.15)))\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:\n                self.population_size = int(self.initial_population_size * 0.75)\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n            # Incorporate memory for learning\n            if np.random.rand() < 0.1 and not np.isnan(self.memory).any():\n                idx = np.random.choice(self.population_size)\n                perturbation = np.random.randn(self.dim) * 0.1\n                self.population[idx] = np.clip(self.memory + perturbation, self.bounds[0], self.bounds[1])\n\n        return best_solution, best_score", "name": "EnhancedHybridOptimizer", "description": "An enhanced hybrid optimizer blending evolutionary algorithms with adaptive differential evolution, incorporating individual learning and memory mechanisms for improved convergence.", "configspace": "", "generation": 9, "fitness": 0.3202097330123492, "feedback": "The algorithm EnhancedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "1ea2cfab-ee93-4cc5-b357-eb8a0ede06ba", "metadata": {"aucs": [0.7390069035576606, 0.7495866109068678, 0.9133280776494443, 0.6328747967970227, 0.7001230645653513, 0.9223091279646842, 0.7219322092198911, 0.6795072288753695, 0.8990708109497685, 0.35955959088912937, 0.8983661982628707, 0.8429393615596581, 0.508903720529764, 0.2394771503166898, 0.3879951339938773, 0.5098400539424237, 0.4379972281475156, 0.8550264337103826, 0.15340487749195708, 0.1510405488457638, 0.16309641478555081, 0.14116334682298037, 0.14090546131015058, 0.17467885540550565, 0.35074923992161466, 0.17210781157623534, 0.17087219614513383, 0.14037421473241807, 0.15785047442606503, 0.15064630768832155, 0.12291011422588849, 0.12273418479951614, 0.14423854175262152, 0.1215723006440661, 0.16119811836785936, 0.15167609048538688, 0.9885270229765781, 0.973475260843192, 0.9773969540913496, 0.9863502843283726, 0.9528199823337216, 0.9803351193927134, 0.9546722112593315, 0.9433781963275197, 0.973084263791783, 0.35033169801047503, 0.45777917236902643, 0.7138991930520983, 0.34054350648551146, 0.3440447906633779, 0.6511498713231427, 0.3086593449629653, 0.41054212614442, 0.584014012633268, 0.37350993736657734, 0.0999784084805837, 0.8932878998839773, 0.2111831382326389, 0.19681974010868863, 0.8787590786751187, 0.3749375336957609, 0.24743244672749143, 0.7296674634155147, 0.12859737166909324, 0.15074456030806982, 0.3479495651112403, 0.21391055203531129, 0.18565778921455656, 0.18937578140122957, 0.3452610502900194, 0.15253738514130089, 0.1734289208201084, 0.1750134412525831, 0.1183270883369989, 0.19647002587781992, 0.22457170388471936, 0.15636974474435905, 0.583866060742155, 0.2414090744214834, 0.16896415863324366, 0.20185967059314158, 0.06571201573657048, 9.999999999998899e-05, 0.08192127897743262, 0.07561450272597758, 0.1721760992348611, 0.11185700555405653, 0.05060107886207765, 0.20370110172563594, 0.12201294647101535, 0.22132978326433372, 0.13183040296058335, 0.11591507667295375, 0.15490539603727593, 0.1363514120190572, 0.18510261293025876, 0.20295225079222257, 0.15861108549111747, 0.19762699353093727, 0.046240757309755076, 0.29113994633755247, 0.05096068366413542, 0.15574847191868957, 0.14935654708036705, 0.08123241469088205, 0.003321443928695378, 0.16416553346984708, 0.06323118303607611, 0.1864288967284654, 0.11107748561702069, 0.25095615101097646, 0.16846665534064542, 0.1549376415480368, 0.30519280388356607, 0.2066706810058594, 0.14135122975734926, 0.32489401929958994, 0.5199341653251701, 0.49561336462764416, 0.5415570925410409, 0.4070056995926914, 0.5801525030466168, 0.5775045283955582, 0.4888349844886878, 0.46390838830915304, 0.5614644929887571, 0.11924242750989611, 0.1580675736570103, 0.152506260675633, 0.0978422333072182, 0.14941257271771669, 0.13013862580831248, 0.11247842986321177, 0.11323679810233767, 0.10589582666058284, 0.2444468270816459, 0.2317294804309722, 0.17737025488164415, 0.36533899995565366, 0.4333413104643259, 0.3310442751136565, 0.3163189463258399, 0.19185638657479454, 0.19532657010615562, 0.27743298120347504, 0.5085978361959027, 0.40059252628631214, 0.29455497294583033, 0.3093829091389484, 0.33163673159958573, 0.3057808495672525, 0.5180410716351002, 0.4607503981732911, 0.2510256199246733, 0.3800839750596491, 0.32908616766561305, 0.2716002654609371, 0.34729421495418755, 0.2687747413466154, 0.2638539605130551, 0.3278425845963727, 0.3390481766476049, 0.19622613965352942, 0.2123073954900575, 0.2389858805668451, 0.19699500485733268, 0.20880873870013783, 0.2061658721944858, 0.21407539889445226, 0.23064484949246733, 0.21759174022502725, 0.4275969237021412, 0.7808172276181736, 0.20697391512579233, 0.4597595524518603, 0.24950560218063977, 0.24170387482040068, 0.2097377933434571, 0.20959785832220224, 0.22218543314770445, 0.7242572949516528, 0.1728699786210962, 0.18756462851182198, 0.7418649791084513, 0.1889404081457986, 0.1873439287733919, 0.7092631799938885, 0.6954511233499348, 0.20609137391428167, 0.20822826754949986, 0.16804692920668418, 0.8388401077429123, 0.19867491498353018, 0.49060691890147123, 0.16748248282037548, 0.12865902476683966, 0.21057238423502778, 0.11316695828602608, 0.1753553885656256, 0.19427067359589778, 0.18380552696891073, 0.19648052331001886, 0.1785481247221593, 0.1865953811571105, 0.18898121942457613, 0.17441802976803789, 0.19066291405648217, 0.09003605928677738, 0.08369822460201737, 0.0871976916168472, 0.08574442837570695, 0.10948013145151758, 0.07407364560778473, 0.08753826378858542, 0.09863119165948808, 0.08158283466223348]}, "mutation_prompt": null}
{"id": "d2089243-5d69-4313-a4e8-26e6c6e54657", "solution": "import numpy as np\n\nclass RefinedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(2.5 * np.sqrt(dim))  # Modified initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Adjusted DE scaling factor\n        CR = 0.9  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)  # Ensure unique candidates\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.4, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                self.population_size = int(self.initial_population_size * 0.7)\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "RefinedAdaptiveHybridOptimizer", "description": "An adaptive hybrid optimizer integrating evolutionary strategies with differential evolution and dynamic population management for enhanced solution accuracy.", "configspace": "", "generation": 10, "fitness": 0.4108721580451321, "feedback": "The algorithm RefinedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "1ea2cfab-ee93-4cc5-b357-eb8a0ede06ba", "metadata": {"aucs": [0.6603147573417787, 0.906691766948841, 0.8797310597343531, 0.8770138578871488, 0.897054786212832, 0.8975067534020748, 0.8743989134449064, 0.904282214974429, 0.8781280694084588, 0.817472085456876, 0.8403017694526869, 0.7938581605490055, 0.8161448169167811, 0.8344859611568756, 0.7994117190433916, 0.8032475058976317, 0.855958361078614, 0.7990463074780633, 0.7021039787940277, 0.5772590067176653, 0.26602484455644004, 0.633354864352484, 0.547285030804332, 0.13730021281842397, 0.5163947880604984, 0.5712254657666297, 0.155970741055261, 0.1352461325881501, 0.35409495819495007, 0.16335674533868239, 0.393683841222495, 0.4505917818000903, 0.5452144329139739, 0.16166355413785094, 0.16749851892511747, 0.15525181600436722, 0.9953672014681736, 0.954689416945604, 0.9845134948243844, 0.9634494013208864, 0.9862909284344247, 0.9647157781049727, 0.9677581058747454, 0.9809098814975594, 0.9701432764697255, 0.5481682892701848, 0.7187937621753662, 0.7172994607850889, 0.5821363131547672, 0.39800378990594354, 0.7013659476549258, 0.5565694859229278, 0.4046633797008059, 0.7055041955157113, 0.8284157049473508, 0.8778736731517124, 0.7831008304444078, 0.8401214860013015, 0.883294129348004, 0.8443994324664802, 0.8064611537937605, 0.8544354879767325, 0.8039663832877892, 0.1602499924394759, 0.27673934529725097, 0.2194183939541463, 0.16315657613476975, 0.21232424044441078, 0.25409174268992907, 0.1938453304415153, 0.15503519169665758, 0.2457988599909119, 0.1397741093502065, 0.08025671371128884, 0.4189153413815595, 0.14542172464692726, 0.1981964460210054, 0.37006183467806864, 0.14921349107190396, 0.17935858454365283, 0.1981276375105573, 0.10446038053637274, 0.0656559604008744, 0.06958087206311592, 0.09359618621100418, 0.1379432190068588, 0.5030304055472685, 0.10039877622698168, 0.2418737931735644, 0.3287991353645383, 0.23495430247250182, 0.2595851278323822, 0.4553151072701398, 0.18799389742816042, 0.13256548693906212, 0.6831161831016146, 0.2488692575804865, 0.6914460087004235, 0.7258566616978825, 0.1030945008218962, 0.1282168857505609, 0.1673193654172137, 0.11699403981971213, 0.22833137648732493, 0.2346136236792341, 0.16270471234683825, 0.31464138311836987, 0.1424576637609769, 0.3215413104498649, 0.2701151080649895, 0.43153893379433916, 0.3420242737714182, 0.35799231335441206, 0.37118181394768746, 0.3109415215443211, 0.2620664624069452, 0.48313615635589124, 0.8185862984219756, 0.54829010037633, 0.8300969216411185, 0.5676652234062096, 0.5632604813306188, 0.6736319076202466, 0.607232371164256, 0.5019940534772549, 0.8179922505825831, 0.09877773181808058, 0.10506175137832618, 0.10639229516393134, 0.12701868896806467, 0.10852906416706587, 0.11620501470141842, 0.09624853061807115, 0.13229959153532722, 0.10089788684262224, 0.13929889166464438, 0.1726334070093366, 0.14271906102011112, 0.15847529291261309, 0.17242989079288296, 0.16872494835254415, 0.18663173808782285, 0.1452764023947053, 0.15420818915053314, 0.6382334572579224, 0.549308655550574, 0.5885957262501083, 0.38394771460146826, 0.5891698250204835, 0.5379080168752505, 0.6661575219737272, 0.5980666264346242, 0.4190259985920777, 0.4388382665978142, 0.5249110771173706, 0.43225601445010864, 0.41866874403213905, 0.25057933049271064, 0.4606020135209452, 0.42891601916405975, 0.5105857074729406, 0.47102959029635183, 0.1934424788862239, 0.19652885788397467, 0.18901327772430954, 0.2188530014918023, 0.18341622542256608, 0.18734412610147932, 0.20181186775045812, 0.19103289642240184, 0.210922393767087, 0.5847293464382687, 0.7171537147550346, 0.46228397726191317, 0.47742409568411104, 0.21988359148182612, 0.6869958939922148, 0.19570151834142768, 0.6651416089316542, 0.23052648142436738, 0.1630725268069495, 0.18126401189158337, 0.8256241449058772, 0.17691603358384678, 0.5100189841190904, 0.17759927758789562, 0.17270347329684066, 0.20758109206242514, 0.7741778787917605, 0.16600069539827633, 0.21149376468632475, 0.4371032729958666, 0.19315048407540658, 0.2821340198091674, 0.8197546911501529, 0.20955922358718282, 0.15387392891403373, 0.21245349674199154, 0.20326274952736756, 0.19047221428955385, 0.19236585493927494, 0.18578731934119497, 0.20880839353270186, 0.18064070716388547, 0.17878184904435968, 0.17861780693617313, 0.19761728761782638, 0.07409334592438466, 0.08064138321813408, 0.0828098692999234, 0.0788523246261601, 0.07070298053331026, 0.07829559695454258, 0.08614867332494014, 0.08002332389501221, 0.08148207978523225]}, "mutation_prompt": null}
{"id": "5396a001-cbf2-4e7d-99ef-3717011cac07", "solution": "import numpy as np\n\nclass RefinedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(2.5 * np.sqrt(dim))  # Modified initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Adjusted DE scaling factor\n        CR = 0.9  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)  # Ensure unique candidates\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.4, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                self.population_size = int(self.initial_population_size * 0.7)\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "RefinedAdaptiveHybridOptimizer", "description": "An adaptive hybrid optimizer integrating evolutionary strategies with differential evolution and dynamic population management for enhanced solution accuracy.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2089243-5d69-4313-a4e8-26e6c6e54657", "metadata": {"aucs": [0.6603147573417787, 0.906691766948841, 0.8797310597343531, 0.8770138578871488, 0.897054786212832, 0.8975067534020748, 0.8743989134449064, 0.904282214974429, 0.8781280694084588, 0.817472085456876, 0.8403017694526869, 0.7938581605490055, 0.8161448169167811, 0.8344859611568756, 0.7994117190433916, 0.8032475058976317, 0.855958361078614, 0.7990463074780633, 0.7021039787940277, 0.5772590067176653, 0.26602484455644004, 0.633354864352484, 0.547285030804332, 0.13730021281842397, 0.5163947880604984, 0.5712254657666297, 0.155970741055261, 0.1352461325881501, 0.35409495819495007, 0.16335674533868239, 0.393683841222495, 0.4505917818000903, 0.5452144329139739, 0.16166355413785094, 0.16749851892511747, 0.15525181600436722, 0.9953672014681736, 0.954689416945604, 0.9845134948243844, 0.9634494013208864, 0.9862909284344247, 0.9647157781049727, 0.9677581058747454, 0.9809098814975594, 0.9701432764697255, 0.5481682892701848, 0.7187937621753662, 0.7172994607850889, 0.5821363131547672, 0.39800378990594354, 0.7013659476549258, 0.5565694859229278, 0.4046633797008059, 0.7055041955157113, 0.8284157049473508, 0.8778736731517124, 0.7831008304444078, 0.8401214860013015, 0.883294129348004, 0.8443994324664802, 0.8064611537937605, 0.8544354879767325, 0.8039663832877892, 0.1602499924394759, 0.27673934529725097, 0.2194183939541463, 0.16315657613476975, 0.21232424044441078, 0.25409174268992907, 0.1938453304415153, 0.15503519169665758, 0.2457988599909119, 0.1397741093502065, 0.08025671371128884, 0.4189153413815595, 0.14542172464692726, 0.1981964460210054, 0.37006183467806864, 0.14921349107190396, 0.17935858454365283, 0.1981276375105573, 0.10446038053637274, 0.0656559604008744, 0.06958087206311592, 0.09359618621100418, 0.1379432190068588, 0.5030304055472685, 0.10039877622698168, 0.2418737931735644, 0.3287991353645383, 0.23495430247250182, 0.2595851278323822, 0.4553151072701398, 0.18799389742816042, 0.13256548693906212, 0.6831161831016146, 0.2488692575804865, 0.6914460087004235, 0.7258566616978825, 0.1030945008218962, 0.1282168857505609, 0.1673193654172137, 0.11699403981971213, 0.22833137648732493, 0.2346136236792341, 0.16270471234683825, 0.31464138311836987, 0.1424576637609769, 0.3215413104498649, 0.2701151080649895, 0.43153893379433916, 0.3420242737714182, 0.35799231335441206, 0.37118181394768746, 0.3109415215443211, 0.2620664624069452, 0.48313615635589124, 0.8185862984219756, 0.54829010037633, 0.8300969216411185, 0.5676652234062096, 0.5632604813306188, 0.6736319076202466, 0.607232371164256, 0.5019940534772549, 0.8179922505825831, 0.09877773181808058, 0.10506175137832618, 0.10639229516393134, 0.12701868896806467, 0.10852906416706587, 0.11620501470141842, 0.09624853061807115, 0.13229959153532722, 0.10089788684262224, 0.13929889166464438, 0.1726334070093366, 0.14271906102011112, 0.15847529291261309, 0.17242989079288296, 0.16872494835254415, 0.18663173808782285, 0.1452764023947053, 0.15420818915053314, 0.6382334572579224, 0.549308655550574, 0.5885957262501083, 0.38394771460146826, 0.5891698250204835, 0.5379080168752505, 0.6661575219737272, 0.5980666264346242, 0.4190259985920777, 0.4388382665978142, 0.5249110771173706, 0.43225601445010864, 0.41866874403213905, 0.25057933049271064, 0.4606020135209452, 0.42891601916405975, 0.5105857074729406, 0.47102959029635183, 0.1934424788862239, 0.19652885788397467, 0.18901327772430954, 0.2188530014918023, 0.18341622542256608, 0.18734412610147932, 0.20181186775045812, 0.19103289642240184, 0.210922393767087, 0.5847293464382687, 0.7171537147550346, 0.46228397726191317, 0.47742409568411104, 0.21988359148182612, 0.6869958939922148, 0.19570151834142768, 0.6651416089316542, 0.23052648142436738, 0.1630725268069495, 0.18126401189158337, 0.8256241449058772, 0.17691603358384678, 0.5100189841190904, 0.17759927758789562, 0.17270347329684066, 0.20758109206242514, 0.7741778787917605, 0.16600069539827633, 0.21149376468632475, 0.4371032729958666, 0.19315048407540658, 0.2821340198091674, 0.8197546911501529, 0.20955922358718282, 0.15387392891403373, 0.21245349674199154, 0.20326274952736756, 0.19047221428955385, 0.19236585493927494, 0.18578731934119497, 0.20880839353270186, 0.18064070716388547, 0.17878184904435968, 0.17861780693617313, 0.19761728761782638, 0.07409334592438466, 0.08064138321813408, 0.0828098692999234, 0.0788523246261601, 0.07070298053331026, 0.07829559695454258, 0.08614867332494014, 0.08002332389501221, 0.08148207978523225]}, "mutation_prompt": null}
{"id": "db4b0bb1-f03e-4296-b97d-a34f55a7ec51", "solution": "import numpy as np\n\nclass RefinedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.8 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.7  # Slightly adjusted DE scaling factor\n        CR = 0.85  # Slightly adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)  # Ensure unique candidates\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Simulated annealing inspired step\n            temperature = 1.0 - (self.evaluation_count / self.budget)\n            for i in range(self.population_size):\n                if self.evaluation_count >= self.budget:\n                    break\n                new_position = self.population[i] + np.random.normal(0, 0.1, self.dim) * temperature\n                new_position = np.clip(new_position, self.bounds[0], self.bounds[1])\n                new_score = func(new_position)\n                self.evaluation_count += 1\n                if new_score < self.scores[i] or np.exp((self.scores[i] - new_score) / temperature) > np.random.rand():\n                    self.population[i] = new_position\n                    self.scores[i] = new_score\n                    if new_score < best_score:\n                        best_score = new_score\n                        best_solution = new_position\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.05, 0.05)), 0.5, 0.9)\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.75, 0.95)\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:\n                self.population_size = int(self.initial_population_size * 0.6)\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "RefinedAdaptiveHybridOptimizer", "description": "An adaptive dual-strategy optimizer employing both differential evolution and simulated annealing with dynamically tuned parameters for improved convergence.", "configspace": "", "generation": 12, "fitness": 0.2947154558660127, "feedback": "The algorithm RefinedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.19.", "error": "", "parent_id": "d2089243-5d69-4313-a4e8-26e6c6e54657", "metadata": {"aucs": [0.45533417749242766, 0.4452512020283169, 0.40678648568284903, 0.44186202212895254, 0.446419238825174, 0.45545180681404207, 0.44913667316998773, 0.42369360269400935, 0.4255226982784508, 0.4883164669669492, 0.5727812078172997, 0.5462504875731434, 0.6274707355653362, 0.5643283888677628, 0.612242012187451, 0.5296399356871299, 0.5819604640351391, 0.42833856585251084, 0.15894124753993588, 0.12708806331394384, 0.13803296171790447, 0.14855541213563406, 0.14715782489015894, 0.22935174332392327, 0.165331707463095, 0.13181902695032444, 0.13154255714740049, 0.12317906633148545, 0.11889793392457126, 0.12310222467193199, 0.12645744626334532, 0.1199173933949449, 0.12373675780146365, 0.12797295945081155, 0.13803461834544684, 0.1572550420233143, 0.9252558025295295, 0.8881739577916209, 0.9089193237309958, 0.9126392266271467, 0.9205397408199658, 0.9336988146702733, 0.9256454346969503, 0.953190276304366, 0.8761358632670793, 0.29142554185320746, 0.2722855235087023, 0.26813268794416956, 0.3080792604387672, 0.3011330764282155, 0.3034688679698655, 0.29078393375920564, 0.2873128343553535, 0.28944749747736365, 0.5709197916128901, 0.366512385583735, 0.5765663316892552, 0.4161127482086844, 0.3978041784749887, 0.510289486678802, 0.6007011167328782, 0.4734606792945515, 0.5593807504455415, 0.2877224515795167, 0.22655934449837967, 0.2543195289909216, 0.20996035239925703, 0.2763585110000012, 0.2594301140747397, 0.2759413876270723, 0.25663587082843764, 0.2465625125058426, 0.24247295743094377, 0.12826831746792489, 0.24613423794884515, 0.2515611604011452, 0.23316481877049033, 0.23040934334922192, 0.21915975440613766, 0.1858551025939974, 0.2282972289651113, 0.1576599318878159, 0.3410369647032172, 0.18092969368412015, 0.31432895600066846, 0.1888918639980609, 0.19853960432478812, 0.2095541160985136, 0.24594728576655034, 0.28540246264633296, 0.37667230535782115, 0.22023663735529686, 0.40094166162675926, 0.21730358792934645, 0.33636869421529514, 0.24474467797568344, 0.3692569688712196, 0.4108014548991924, 0.37643084083900324, 0.040809811972307264, 0.10753259851694641, 0.0918072126249383, 0.05980754347271866, 0.2875571205346078, 0.03732655395478501, 0.12476875829750866, 0.10321994430636983, 0.0576157032548652, 0.2339028463386128, 0.22357776703679844, 0.2039302844373725, 0.3570452373667474, 0.2512313778151034, 0.20151969955694948, 0.22539133173616754, 0.1897260995948109, 0.18251770633081266, 0.38307861871127924, 0.3922579648878177, 0.4090117936374158, 0.3929365525336398, 0.40232226255380377, 0.3736926721507303, 0.3729401576196082, 0.3804477743268496, 0.3833012395261304, 0.12089863980835658, 0.12804770049960335, 0.11633316777723157, 0.1351818595920169, 0.11742389080719162, 0.13207559810344605, 0.1122497178287093, 0.1349285097438604, 0.1096218379828151, 0.23490699555507422, 0.25576494483448897, 0.20927055641593284, 0.22431822000636958, 0.17437166895818468, 0.20136232967379497, 0.20510804604122945, 0.293677375144891, 0.2459193403523543, 0.2657942094271981, 0.2909571719266313, 0.27641865157492873, 0.2912025594163149, 0.2668290693451766, 0.27881590017258384, 0.2924977672742538, 0.29979610337333884, 0.2920423217070487, 0.2373354986634576, 0.19906269309939484, 0.2278292723397608, 0.23665021049258617, 0.2361035378453319, 0.16547532174043933, 0.2448350470502677, 0.23518464428628416, 0.2500506736825939, 0.19206186146970972, 0.21848856801129635, 0.1980127954979266, 0.20742660732815843, 0.1877763685834164, 0.20061357224776633, 0.19082313246044935, 0.18555810323525368, 0.1851700077064844, 0.19193912613663344, 0.26145405041680736, 0.20339444631818027, 0.1967429708744236, 0.18945168497562803, 0.24978097141803723, 0.19685991490819144, 0.19182355078515645, 0.20363168681209987, 0.2049452018151845, 0.5621136599817025, 0.5432467665230059, 0.5541609597167598, 0.4449221074485932, 0.5130809394693379, 0.39387610262633965, 0.5662962156621913, 0.18240408768934713, 0.1645150763865897, 0.47235632208608336, 0.5677204548880299, 0.28223356842725655, 0.18312546562855392, 0.4805578425517695, 0.46120503085614484, 0.2019220025262669, 0.47838638722492166, 0.19443535530506828, 0.1902625602767397, 0.19034627405649795, 0.1982743499117824, 0.18625863417422917, 0.20372123932458996, 0.17731189331953445, 0.18796962315859922, 0.1916362995321793, 0.08796475552889715, 0.08025472830070979, 0.08306550042839245, 0.08356688618328045, 0.07701821234490458, 0.07198134215071572, 0.08371455234811043, 0.08344365634560147, 0.07258131376803756]}, "mutation_prompt": null}
{"id": "d3428288-de93-4f77-807a-4912007b81ed", "solution": "import numpy as np\n\nclass StochasticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.5 * np.sqrt(dim))  # Increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Modified DE scaling factor\n        CR = 0.8  # Modified crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)  # Ensure unique candidates\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates with stochastic noise\n            F = np.clip(F * (1 + np.random.normal(0, 0.05)), 0.5, 1.0)  # Stochastic adaptation\n            CR = np.clip(CR + np.random.normal(0, 0.03), 0.6, 0.95)  # Stochastic adaptation\n\n            # Dynamic population adjustment based on performance\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                self.population_size = int(self.initial_population_size * 0.65)\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "StochasticAdaptiveHybridOptimizer", "description": "A stochastic adaptive hybrid algorithm combining evolutionary strategies with self-tuning differential evolution for robust convergence and solution accuracy.", "configspace": "", "generation": 13, "fitness": 0.38125747794844783, "feedback": "The algorithm StochasticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.24.", "error": "", "parent_id": "d2089243-5d69-4313-a4e8-26e6c6e54657", "metadata": {"aucs": [0.7489351237950453, 0.8547317306026909, 0.7942353652960874, 0.7762032840493611, 0.8644337966028991, 0.8258837764928697, 0.7636782050965669, 0.8672859066250432, 0.7982366201233183, 0.6622147696475993, 0.7664832494403817, 0.6401362575533933, 0.6348163748323236, 0.7582265872245748, 0.6581053128357408, 0.6306852327805216, 0.7737622699803386, 0.6775094332323982, 0.1559012647030057, 0.4104411885876832, 0.36351308457587783, 0.26710454397834704, 0.3880877531681117, 0.3019157987721808, 0.290862445015186, 0.41610797648855646, 0.436808010936371, 0.3327424564607713, 0.29965699329727646, 0.23959548072434267, 0.10693393987973399, 0.31041965718005926, 0.24426490568749526, 0.22720837682048534, 0.31430867070348667, 0.2809736662287169, 0.9838983093778508, 0.969248830095811, 0.9929770733927408, 0.9725332069283359, 0.9794724193237139, 0.9639651828462551, 0.9740834186479589, 0.970669656838167, 0.9794405202746421, 0.5230518512296969, 0.5424196852282186, 0.4782844609783835, 0.5458167271746948, 0.508737765991581, 0.4865458327051788, 0.08685489373102939, 0.5865290324489276, 0.4619708252965493, 0.7073732632499041, 0.7706213887018539, 0.713136933747755, 0.7457834305557469, 0.7423708252225207, 0.7132132420733829, 0.6500376127689187, 0.7563789933146029, 0.6563192109817535, 0.36924295495963355, 0.3455397470567907, 0.36700658329709346, 0.30131625846819754, 0.32361692023567756, 0.3742163777873644, 0.4260132732808428, 0.29481266229769976, 0.345394190916673, 0.3122920944626397, 0.3941699093958956, 0.009580682655792594, 0.239927715398505, 0.30837805084951275, 0.36616587120019795, 0.22891553079341642, 0.3521354170783162, 0.32093874518444787, 0.357562856211436, 0.2483825919370065, 0.2565334035367539, 0.3367322936497782, 0.18875124024614842, 0.25128833523079797, 0.33821085645401383, 0.19459509667558172, 0.21954580691116943, 0.4817112673123808, 0.4005478290523562, 0.34384637343072577, 0.49787876580477586, 0.2550527754327663, 0.29019894036073746, 0.4537253340165137, 0.423258793359228, 0.3706230394404927, 0.08427847451831894, 0.08087274122986654, 0.09247475912967207, 0.24351711576175783, 0.05873994677510941, 0.15958136068536843, 0.10732774944480805, 0.16260979894697725, 0.09938256462720396, 0.25150095054529154, 0.2529641600201189, 0.2301499921482567, 0.30135290048437646, 0.2693480081267662, 0.2586064832376994, 0.24092396922918846, 0.24164054248590683, 0.22838606127439176, 0.6846953944930261, 0.636078994343228, 0.6362972709483286, 0.6454838041432789, 0.6447978595023242, 0.6728252985884575, 0.6331753171217773, 0.5774195714793047, 0.5915292259753155, 0.10002359237195013, 0.11020911799793343, 0.08475409444348425, 0.08842157918547278, 0.11028304905601927, 0.10166517297453026, 0.10164720722447096, 0.10838776482454648, 0.10349420408552357, 0.4361402496455705, 0.31278516586974203, 0.22710772943150803, 0.5234122131742616, 0.18305528215270173, 0.16763480509825968, 0.2055779061047449, 0.169653845957504, 0.13894512608047394, 0.34511231620324, 0.40285699298580124, 0.3525736913223536, 0.3894217750255049, 0.3667695208248426, 0.3568425654526127, 0.4580747607196298, 0.45610175602951586, 0.38737308453817654, 0.28597173884017546, 0.3116954059351186, 0.2585959924397271, 0.25743923443627503, 0.268498204191684, 0.2506008218920759, 0.3072200647622393, 0.3369123723489099, 0.2521562722632442, 0.18186270347259947, 0.19119207287121986, 0.17225921978468473, 0.1959967306376974, 0.20145038699407547, 0.21238077660710986, 0.21397945680185548, 0.1969978370265526, 0.1838201399925382, 0.2070960772007605, 0.19450941174941172, 0.46778060539869715, 0.19620788904486053, 0.3826628144444505, 0.1839676756042139, 0.3469545949934051, 0.3494417693417524, 0.2945267963878707, 0.16870683243467888, 0.7991311456124844, 0.17987820020259349, 0.18324672632977212, 0.5043572601671154, 0.6640594653842263, 0.1820115337270105, 0.18410953455255208, 0.6242782822159474, 0.701479402006886, 0.16594299249061328, 0.1637289532310311, 0.750142553916951, 0.400694244810501, 0.579702647429067, 0.20923991821622423, 0.665632754157069, 0.1491943911798438, 0.18531028330812227, 0.21349753006358363, 0.20525700138296077, 0.18439627679096837, 0.1886597391646735, 0.17688851253095272, 0.15644475921154466, 0.18246533127478282, 0.18780379726657948, 0.07453736334365635, 0.07618353683722767, 0.07114901248475036, 0.06931970501100082, 0.07848439611691005, 0.07643186610632258, 0.08501285324552099, 0.0797369095947752, 0.0757848886297603]}, "mutation_prompt": null}
{"id": "f72c34ff-6e5f-44cb-9b75-31dd8a603b20", "solution": "import numpy as np\n\nclass StochasticHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Increased DE scaling factor for exploration\n        CR = 0.85  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n                else:\n                    # Simulated annealing step\n                    if np.random.rand() < np.exp(-(trial_score - self.scores[i]) / (1 + self.evaluation_count / self.budget)):\n                        self.population[i] = trial\n                        self.scores[i] = trial_score\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Broader adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.6, 0.9)  # Broader adaptive CR range\n\n            if (self.evaluation_count / self.budget) > 0.5:  # Earlier dynamic reduction threshold\n                self.population_size = int(self.initial_population_size * 0.65)\n                self.population = self.population[:self.population_size]\n                self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "StochasticHybridOptimizer", "description": "A Stochastic Hybrid Optimizer combining elements of differential evolution, simulated annealing, and adaptive strategies for robust black-box optimization.", "configspace": "", "generation": 14, "fitness": 0.24174269199112416, "feedback": "The algorithm StochasticHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.17.", "error": "", "parent_id": "d2089243-5d69-4313-a4e8-26e6c6e54657", "metadata": {"aucs": [0.33771678607870403, 0.33289292918150626, 0.33239271112603597, 0.40376309161173474, 0.35192780597186935, 0.35440901215431475, 0.3289272052571526, 0.32525994444016704, 0.39056709953724345, 0.31826556655284266, 0.3009368495471787, 0.30088598231612973, 0.27989197146592615, 0.27802261301913445, 0.305709571165769, 0.3006445741565814, 0.27228574286515983, 0.30851012029185043, 0.23881598898147904, 0.21817033352512982, 0.22530181117049264, 0.17264496157215703, 0.2257848222992106, 0.18352584916454462, 0.23628595975465216, 0.2016372502196534, 0.22524669810118625, 0.1371645391167805, 0.19144470963480675, 0.17495090390247114, 0.1609364881153631, 0.15865946659785546, 0.1407577220811287, 0.1597667429292311, 0.1418337201078641, 0.194731488629717, 0.9785029867804313, 0.9913405269797632, 0.9875438854467264, 0.9752851611227747, 0.9626911255391255, 0.9718780434385108, 0.9520876226566277, 0.9606067969435454, 0.982591909280933, 0.23540870881786002, 0.25658960615195925, 0.2574022736201973, 0.267470405207348, 0.24133880858140788, 0.24816210160959895, 0.23159978043946639, 0.23251770959056095, 0.2535703717981552, 0.31183974272358617, 0.3361009638165183, 0.29931778303124235, 0.3412180383148349, 0.32612411772879746, 0.2689371799364999, 0.31090928554759145, 0.3032628311767658, 0.2986420874588701, 0.17616695923712666, 0.2125440950681784, 0.20239166327416347, 0.19798964053798362, 0.18530712910427038, 0.18279922561999573, 0.21468667017103882, 0.18370567852928799, 0.21822577006023613, 0.0101590142015755, 0.05024704944126879, 0.17784292666474188, 0.19832702668435953, 0.18113011210008223, 0.20896136374334606, 0.22677023005828278, 0.22860358014959137, 0.17629110720859098, 0.17200558963277968, 9.999999999998899e-05, 0.19907010597080865, 0.1185025041144494, 0.16606965576533528, 0.2141559901495519, 0.1876297020979658, 0.25980199377109214, 0.14956856726648748, 0.2246295453348931, 0.26276952977020474, 0.27250891038725156, 0.2515721171364096, 0.238629160736617, 0.19784216518266073, 0.2996695101896656, 0.24074190323210265, 0.26593496317537024, 0.07860033451782311, 0.06322446015895744, 0.08086579012750239, 0.15231299483087568, 0.11535836657215293, 0.18471050645357556, 0.15337625945783906, 0.1868776411639238, 0.13703113995660587, 0.19314318015327325, 0.1896038530330556, 0.1861770713083013, 0.1934610922356491, 0.19549221311943166, 0.18024194425099105, 0.17196660065972158, 0.1894225128105128, 0.1971591625592206, 0.2879649743043665, 0.3397689537594202, 0.2985783265866725, 0.31195514048662976, 0.3039798565271433, 0.3079901033528182, 0.3299528526708755, 0.30002565981016205, 0.28408866304191793, 0.09697596957646182, 0.12164246063835926, 0.10755541345611042, 0.12670172299444926, 0.10414247497492157, 0.09906263961493855, 0.10350623681173088, 0.09467830775346808, 0.1016802481478124, 0.186663423687903, 0.21112803617698106, 0.152633206686017, 0.18603710624116698, 0.17247440498004107, 0.15190755457385297, 0.18047283042362305, 0.11936257524747451, 0.15854526588079576, 0.24109824956288528, 0.22716966536849437, 0.23105470643246973, 0.2314141453388593, 0.232421348392981, 0.22361642668349324, 0.24058841095111383, 0.24834711369859086, 0.250547734752287, 0.1983698325386567, 0.23281490555889306, 0.21748008428531984, 0.20172812452820432, 0.19720286600238313, 0.20447983866886132, 0.21827957471338566, 0.21833314401073045, 0.23125732080856887, 0.1956560259672746, 0.17958805836273117, 0.18526639752408303, 0.1866153836658112, 0.19762789099394784, 0.19013311877580652, 0.17805994498690925, 0.19312241315998868, 0.21800679458284877, 0.17416156081188205, 0.19092523297334674, 0.18290875116877758, 0.18550969187765087, 0.1807066396096363, 0.1800298283025462, 0.17223554817270192, 0.18211330733473974, 0.17970365534400334, 0.4976746206000835, 0.16117235633212856, 0.16969757842630862, 0.17406438067836028, 0.16843231512870638, 0.39229064487447196, 0.40238426633690016, 0.15746646718604285, 0.37041660158965584, 0.20439329152835695, 0.20114603418203159, 0.19555776758268018, 0.15970376898179162, 0.36098081910156843, 0.16730031970319237, 0.20390538384785317, 0.20698756112222017, 0.1953477925838022, 0.18231082528201925, 0.17715867795441587, 0.1881252907250197, 0.193976421173788, 0.18945318354003227, 0.1790529076662042, 0.19495269330631348, 0.21491665853209463, 0.1751992180164098, 0.0735296509486787, 0.07691675148022037, 0.08062551695077613, 0.08384201665058777, 0.0752434112960696, 0.07735846596865181, 0.08388882779720175, 0.07184048826740597, 0.0750751849038983]}, "mutation_prompt": null}
{"id": "16154417-a605-4e0b-9a3e-a676022fa16a", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer combining evolutionary strategies with differential evolution and adaptive population dynamics for robust optimization.", "configspace": "", "generation": 15, "fitness": 0.43140670531638065, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "d2089243-5d69-4313-a4e8-26e6c6e54657", "metadata": {"aucs": [0.8882618092741813, 0.829182044780998, 0.8610499892064126, 0.8860672888600784, 0.8497892624077474, 0.8568544710138344, 0.8827839553377691, 0.8447332944770616, 0.8566070684950713, 0.8136255532868154, 0.7365055706409713, 0.7531697291868006, 0.800552865395084, 0.73954571840588, 0.7492828120372013, 0.8166446882528984, 0.760235123508034, 0.7586193024188106, 0.13783213059376176, 0.3468626938086081, 0.6039352394239013, 0.5403394278626681, 0.3868593530664918, 0.439146204247862, 0.5172031815989693, 0.3933832194614454, 0.501547223903948, 0.15671731366968122, 0.13947198605299094, 0.3742683441997391, 0.13587244849754931, 0.1331466841365031, 0.46208939290785644, 0.1587838554797063, 0.12343544019416441, 0.49699449656364114, 0.963978727658187, 0.977173733535758, 0.9807624472179383, 0.9699521028578815, 0.9841417337388083, 0.9787561683905639, 0.9788014501290754, 0.9473640827898129, 0.9714761082144242, 0.6746321929141335, 0.6235019242244924, 0.5945279322612524, 0.6910090259054971, 0.6106718722850978, 0.5650212132381787, 0.689207491869011, 0.6442234250575412, 0.543877043680057, 0.8476063130638523, 0.7999471967673868, 0.5787679066608846, 0.838824510188956, 0.8260262498485814, 0.7507964748172186, 0.8651675140818017, 0.8070031109094138, 0.6754739948500335, 0.6147647784141852, 0.4229391179598081, 0.21428535914283475, 0.12965886557991868, 0.5152964251861405, 0.28267494328250087, 0.25821885749668305, 0.5087009802422158, 0.3552145555804568, 0.11898021494747901, 0.3539063328767946, 0.1605005678151128, 0.16837396323295106, 0.5127307942442694, 0.3325267063023809, 0.27414568046285515, 0.49431350745791147, 0.3846755465250158, 0.5050459564357026, 0.4604003836681171, 0.1552595836134999, 0.49020287338840207, 0.4035899555275041, 0.1689480848010726, 0.5839168975564963, 0.543229142487669, 0.21106570916867728, 0.6647247008289272, 0.5908940568134999, 0.29425470324285463, 0.6278376630050826, 0.6134456061308942, 0.2241619720345721, 0.6660785792357446, 0.6522643138160658, 0.32799904770964416, 0.0902964133486368, 0.1562209582062336, 0.058257060442464925, 0.40496692005049095, 0.2758869290445706, 0.07362059717192349, 0.22197647915570073, 0.24662785389647257, 0.12430111133136179, 0.4546018961901098, 0.3824472674845073, 0.24718004979828323, 0.5295328064736091, 0.3971107050785766, 0.24665584618784386, 0.3542601268885882, 0.05611232785236531, 0.22048088299036517, 0.8016260441972363, 0.7234519616082478, 0.6413597488818221, 0.7898741758713639, 0.751930478578601, 0.6596184987667619, 0.8212238071918924, 0.7398801181862478, 0.6763925317259811, 0.12045573167821899, 0.11063953682944627, 0.11154599609955462, 0.09830150135406979, 0.09539403892802856, 0.09528609416819767, 0.09436164549388448, 0.11145109008158327, 0.0925654487465426, 0.2572110432393042, 0.14754692938299463, 0.19083463997692962, 0.1486426991642975, 0.1600763262440763, 0.1693597451956086, 0.17573809606978685, 0.19883908763919833, 0.13130091749729544, 0.5710459748680342, 0.5165488116844719, 0.4344742845260373, 0.5830106237936813, 0.4456955139442704, 0.4604099637260439, 0.625976616044059, 0.5833555720421328, 0.5113997675694357, 0.37711568701630427, 0.3312875182696915, 0.2605532844718407, 0.3829487624979654, 0.33490878495752874, 0.26382654051170007, 0.48147793471107403, 0.41587842215988213, 0.3189279646986095, 0.19811971996963995, 0.1912969982142141, 0.19368907780371736, 0.18572378550633306, 0.18912017390648062, 0.20302969260439307, 0.2162838419390335, 0.18333954260740404, 0.18821258339367508, 0.5763709809022803, 0.33401540419554154, 0.39523241889259186, 0.7117491544517767, 0.20632807258234553, 0.2154237898851411, 0.2821553451957334, 0.19597258617823832, 0.4476154762795336, 0.20209510796950936, 0.16362560254843428, 0.15045504449239255, 0.8451740998386034, 0.8064337687601139, 0.687948541978866, 0.8201113687969195, 0.15777106603551472, 0.5125783452934345, 0.2067346336377135, 0.8180824339586369, 0.5040373642304616, 0.8492972367999032, 0.20121043684208173, 0.199129969303394, 0.1538281572075041, 0.20518013637189403, 0.20340075168121674, 0.17026804202018286, 0.18272037475040892, 0.1822616484854157, 0.21358477907744222, 0.1934029092520535, 0.20341563423359943, 0.18425748503122907, 0.1930840221409098, 0.19160193588857577, 0.08321300819551347, 0.07772183880765315, 0.07375765783814581, 0.08548465904670632, 0.08115410705450321, 0.08134977688084633, 0.07774551428698873, 0.0754391923825497, 0.08300930480387614]}, "mutation_prompt": null}
{"id": "5dcda5d4-b9c1-4a1c-b1da-1d3566bfaaed", "solution": "import numpy as np\n\nclass AdaptiveEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.5 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Increased DE scaling factor for more exploration\n        CR = 0.7  # Adjusted crossover probability for diversity\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection with stochastic acceptance\n                if trial_score < self.scores[i] or np.random.rand() < 0.05:  # Added stochastic acceptance\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Adjusted adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)  # Adjusted adaptive CR range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Earlier dynamic reduction threshold\n                new_population_size = max(int(self.initial_population_size * 0.5), 5)  # Ensure minimum size\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "AdaptiveEvolutionaryOptimizer", "description": "An adaptive evolutionary optimizer with dynamic population control, blending differential evolution and stochastic hill climbing for enhanced exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": 0.29917832893457735, "feedback": "The algorithm AdaptiveEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8440093013773444, 0.8149922217739674, 0.8407976311470269, 0.7812677141314247, 0.8544792485698904, 0.7274834506347098, 0.7868763552163666, 0.8363684430141973, 0.7920870516636274, 0.7283538673861614, 0.7132544947886907, 0.6529943242454972, 0.6786090397595503, 0.7430480504994785, 0.6056910820884953, 0.6799928085239987, 0.6567208050028148, 0.5867924227375889, 0.10204825649526195, 0.11835983347570567, 0.1305065764884059, 0.11644923974451471, 0.14644605516737774, 0.12216248792076967, 0.10969102419925825, 0.09808504243552629, 0.12120486680468623, 0.08433468647141873, 0.10248192001777079, 0.10781405518038867, 0.11755544202604984, 0.10525978640715017, 0.30866968911267834, 0.1155695784823011, 0.09666677785299949, 0.10796244962796897, 0.9884106102290607, 0.9591934471783093, 0.9787529512653342, 0.9678628810116012, 0.95515348670832, 0.9847289898299882, 0.9552892431849771, 0.9694782212395492, 0.9807861890704127, 0.5079453771503797, 0.4814781233282297, 0.4585658180847829, 0.532718546447536, 0.5812063913247023, 0.5111901898492393, 0.4369483428460027, 0.4751752273179456, 0.46385427769435283, 0.5272602973612628, 0.5510668706730835, 0.4199070620746005, 0.38249625115559527, 0.6604824571393704, 0.7644515427349798, 0.5320051763431338, 0.6127736915518234, 0.51533554541609, 0.26241608349661305, 0.2389404415146812, 0.23179058789913232, 0.2503385606375177, 0.24728229964858905, 0.29743404375044924, 0.22346574628910365, 0.3039877947337053, 0.16678174018890257, 0.015658358887104984, 0.1779604443007411, 0.04996267818465239, 0.31830256275903723, 0.28552711942058395, 0.17043622971442696, 0.18525206848070297, 0.17396931929760884, 0.2171854491268479, 0.03807707991858189, 0.011292480023844864, 0.05351854006863199, 0.004163399699934622, 9.999999999998899e-05, 0.03699348398806401, 0.0016536813971320674, 0.01808544946357593, 0.09533515708196028, 0.0790748515493046, 0.08991705123059313, 0.14426569174536963, 0.11858204669463379, 0.07962472483892158, 0.08491357115279263, 0.16404787637763585, 0.0864563582334793, 0.0770757780530743, 0.021024323612045204, 0.03036229357621234, 0.04041232364172376, 0.03508382080602679, 0.11028727601960586, 0.017722290853448452, 0.08967458662972128, 0.0276768115155539, 0.03215928015338121, 0.14210874885670566, 0.2124418783987606, 0.1667717762567228, 0.21649123347866717, 0.21637728460599315, 0.19696483031453982, 0.194925932103043, 0.11512473095870768, 0.13015540076066534, 0.5254112712684915, 0.5096445674482406, 0.5506105518403288, 0.5185767855560535, 0.5322565630942012, 0.5041298709741199, 0.48515126790128593, 0.5995393528938315, 0.5456748808872485, 0.08379694153088602, 0.08511519497562325, 0.10628161797592839, 0.07632431932134132, 0.08160975172275431, 0.07725625060033958, 0.09098200233163478, 0.08512979296101353, 0.08774815404580971, 0.2160355400317302, 0.14619899344609188, 0.15931536366317356, 0.2161309570021036, 0.16467674307176405, 0.20635093081762168, 0.13074350393813616, 0.20057286328863244, 0.15801292184429583, 0.32446020743769843, 0.3916319079680489, 0.3152073436013636, 0.3326031488767357, 0.3900252760915459, 0.35719198672729024, 0.4853729290004065, 0.4956870238802944, 0.3910328407074367, 0.2517679680152862, 0.2206152144141179, 0.2804558045474369, 0.25044893340078545, 0.2200123151359371, 0.2283073061737072, 0.32864909991861646, 0.2827340541083433, 0.2703250930939838, 0.18125667987202632, 0.16950889018261117, 0.18471492869892592, 0.18507450530341807, 0.1759160548661043, 0.17967278292460265, 0.17675529630005893, 0.1862877909995444, 0.1830648973950474, 0.18226044526320406, 0.18520047665815387, 0.17976366410654587, 0.1922474060395376, 0.1724163389328205, 0.17795860499798766, 0.20104520728309827, 0.20037808341597718, 0.185130224183374, 0.16689459756607505, 0.16502694247513083, 0.7246439267300482, 0.23393061983029673, 0.21588771079047397, 0.17107464018701957, 0.17506545007863317, 0.16400241168012164, 0.4797700259883302, 0.20366578425478232, 0.6611012352891603, 0.1646941584802718, 0.1606169208878142, 0.17882159215899207, 0.1578618206354373, 0.6497019785931654, 0.5317725849003958, 0.1454222236526419, 0.19666267087015488, 0.17548823794697233, 0.18417834195574478, 0.1850789882693017, 0.1824169465156643, 0.19959843444383518, 0.1940263013300919, 0.16946126741690148, 0.1743274587167294, 0.06959016062557255, 0.07121213833228957, 0.06705480043939283, 0.07312370989214612, 0.06912336152676324, 0.0682969159985245, 0.08387830956029518, 0.08197823703315266, 0.08337359879046125]}, "mutation_prompt": null}
{"id": "e2b52b60-120c-49bf-a91e-88bab588e849", "solution": "import numpy as np\n\nclass SynergisticAdaptiveOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(1.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.75  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.10, 0.10)), 0.55, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "SynergisticAdaptiveOptimizer", "description": "A synergy of probabilistic exploration and adaptive strategies optimizing convergence through dynamic adjustment and hybridization.", "configspace": "", "generation": 17, "fitness": 0.3874381306537905, "feedback": "The algorithm SynergisticAdaptiveOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8330724023126601, 0.8240153301688697, 0.8661760470217386, 0.8673855366819163, 0.8288597220926421, 0.8558416222894356, 0.861549812456244, 0.8213613298521669, 0.8666887022742442, 0.7282721928793903, 0.7319265848488505, 0.7309505569386094, 0.7486552353482265, 0.7332851573220627, 0.7657660323077224, 0.7410575228587203, 0.7323075384401305, 0.7853293699927973, 0.4174193997082798, 0.14082868504938417, 0.31563727042337697, 0.3152346409336221, 0.4296998420157294, 0.34549378332721714, 0.4373435610619594, 0.34708829322223367, 0.311794207405126, 0.36289543341430863, 0.35592295421390585, 0.1317596496912019, 0.40326337777405075, 0.1395334359124386, 0.14161190711789406, 0.14969481645795457, 0.16063514956968283, 0.3137195390685834, 0.9663539833372778, 0.9743434765043946, 0.9788334846648369, 0.9563857060254015, 0.9640622082704782, 0.9786143234651475, 0.9944165577167411, 0.9571405813135148, 0.9639768138160644, 0.5913591847026403, 0.5471990207027746, 0.5963703340562465, 0.6163066515434039, 0.5724405947301257, 0.6070386894379032, 0.5923297880455374, 0.5663372837029983, 0.5744215446236745, 0.6977361195160509, 0.7932086875863926, 0.7364527350600294, 0.7479224148863375, 0.6989204723105018, 0.7178286533795579, 0.6614373063643499, 0.856743652383245, 0.7764978552557056, 0.21116061025972643, 0.3674555184430668, 0.4485898065574444, 0.2879221002985941, 0.317359609740376, 0.47921601137160563, 0.25098993567612493, 0.2970735610206574, 0.43514556570834395, 0.24579803148154178, 0.4570181750434035, 0.3837309037605965, 0.28563904538643115, 0.310754048821719, 0.40993509368115355, 0.18924983798004613, 0.37689342067275644, 0.4515029835921476, 0.24552206953943378, 0.18975514608262145, 0.2931443870459627, 0.17878755549208014, 0.21076026524777491, 0.22453778035355731, 0.21032457888512435, 0.2827326179726567, 0.27514568707874476, 0.3857359129620729, 0.4436480516315273, 0.3239014028343963, 0.27742063621985524, 0.3554527872879585, 0.37295683988487816, 0.3846347190134799, 0.406923137717217, 0.488004111032702, 0.08045737480512649, 0.06400099573219409, 0.06796452164376365, 0.07770195516758249, 0.1295482527211418, 0.14119664531610343, 0.07391159315170392, 0.13353865855563596, 0.1719627285459192, 0.24172927406378864, 0.22673618105959037, 0.2722955211886512, 0.31826021727634357, 0.25331240288769874, 0.3113059758071719, 0.26691612316572944, 0.2473174039223417, 0.2580153014926132, 0.6850606726436781, 0.6849127223136249, 0.6968611755042431, 0.6322926731531382, 0.6213711291199485, 0.706223502119113, 0.6170661035407863, 0.6429495097134102, 0.6980485317258277, 0.10530637914532326, 0.10427391764583394, 0.08874722410455593, 0.1113549224989201, 0.09674337930017152, 0.09357939909046675, 0.11586237755479667, 0.10431470789075448, 0.08800039568980611, 0.18499445106628787, 0.13863156497280638, 0.3138305886104814, 0.16655250897981166, 0.16456736968277763, 0.14817672141072524, 0.15149371644664356, 0.17450875856310943, 0.19489672940867964, 0.4508938328339007, 0.44592667465782765, 0.460373695666739, 0.4270992046587686, 0.43165132564855935, 0.41033666352497367, 0.5068557302089682, 0.4988933728435274, 0.512177542792561, 0.293656532608927, 0.2783685147946162, 0.29497975151245426, 0.31041141994941446, 0.27955324230916645, 0.31252341459858657, 0.26391751000982966, 0.3248328868200757, 0.3571696240672897, 0.2105687830891383, 0.2140036431773893, 0.19234543058720843, 0.17276418537956673, 0.17397494415092551, 0.1906014045943707, 0.2360898335508531, 0.19901119747237617, 0.21839924475446515, 0.35306753178855144, 0.20308415688995674, 0.3332933524164515, 0.35626537596363594, 0.49375776044796715, 0.3104456927885044, 0.20227453566695497, 0.2671785370715235, 0.36018829393184537, 0.19105277510830043, 0.1807752033909057, 0.7207056475969151, 0.797177527943299, 0.1818102481410896, 0.17903702388867115, 0.15976775359874396, 0.17784933910424894, 0.16434293260660193, 0.6387348305322837, 0.2075143624152559, 0.20236712689644898, 0.16502713294010574, 0.664245838380246, 0.19710121918503964, 0.20253327760886664, 0.20885533855516414, 0.7072780314221296, 0.18371737930003196, 0.19248612986581215, 0.18020170119933077, 0.188419708791137, 0.17013671652339868, 0.17339381778970397, 0.19248421919425196, 0.1824633022719243, 0.1804489510381947, 0.07971310032624712, 0.07212166157040667, 0.08043257056153874, 0.09101694709657115, 0.07256120907569363, 0.07599728245602344, 0.08126398360368625, 0.07408553267134599, 0.07421258530995767]}, "mutation_prompt": null}
{"id": "2f90f560-e6e3-45e0-97c2-26d0592fb028", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer combining evolutionary strategies with differential evolution and adaptive population dynamics for robust optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8882618092741813, 0.829182044780998, 0.8610499892064126, 0.8860672888600784, 0.8497892624077474, 0.8568544710138344, 0.8827839553377691, 0.8447332944770616, 0.8566070684950713, 0.8136255532868154, 0.7365055706409713, 0.7531697291868006, 0.800552865395084, 0.73954571840588, 0.7492828120372013, 0.8166446882528984, 0.760235123508034, 0.7586193024188106, 0.13783213059376176, 0.3468626938086081, 0.6039352394239013, 0.5403394278626681, 0.3868593530664918, 0.439146204247862, 0.5172031815989693, 0.3933832194614454, 0.501547223903948, 0.15671731366968122, 0.13947198605299094, 0.3742683441997391, 0.13587244849754931, 0.1331466841365031, 0.46208939290785644, 0.1587838554797063, 0.12343544019416441, 0.49699449656364114, 0.963978727658187, 0.977173733535758, 0.9807624472179383, 0.9699521028578815, 0.9841417337388083, 0.9787561683905639, 0.9788014501290754, 0.9473640827898129, 0.9714761082144242, 0.6746321929141335, 0.6235019242244924, 0.5945279322612524, 0.6910090259054971, 0.6106718722850978, 0.5650212132381787, 0.689207491869011, 0.6442234250575412, 0.543877043680057, 0.8476063130638523, 0.7999471967673868, 0.5787679066608846, 0.838824510188956, 0.8260262498485814, 0.7507964748172186, 0.8651675140818017, 0.8070031109094138, 0.6754739948500335, 0.6147647784141852, 0.4229391179598081, 0.21428535914283475, 0.12965886557991868, 0.5152964251861405, 0.28267494328250087, 0.25821885749668305, 0.5087009802422158, 0.3552145555804568, 0.11898021494747901, 0.3539063328767946, 0.1605005678151128, 0.16837396323295106, 0.5127307942442694, 0.3325267063023809, 0.27414568046285515, 0.49431350745791147, 0.3846755465250158, 0.5050459564357026, 0.4604003836681171, 0.1552595836134999, 0.49020287338840207, 0.4035899555275041, 0.1689480848010726, 0.5839168975564963, 0.543229142487669, 0.21106570916867728, 0.6647247008289272, 0.5908940568134999, 0.29425470324285463, 0.6278376630050826, 0.6134456061308942, 0.2241619720345721, 0.6660785792357446, 0.6522643138160658, 0.32799904770964416, 0.0902964133486368, 0.1562209582062336, 0.058257060442464925, 0.40496692005049095, 0.2758869290445706, 0.07362059717192349, 0.22197647915570073, 0.24662785389647257, 0.12430111133136179, 0.4546018961901098, 0.3824472674845073, 0.24718004979828323, 0.5295328064736091, 0.3971107050785766, 0.24665584618784386, 0.3542601268885882, 0.05611232785236531, 0.22048088299036517, 0.8016260441972363, 0.7234519616082478, 0.6413597488818221, 0.7898741758713639, 0.751930478578601, 0.6596184987667619, 0.8212238071918924, 0.7398801181862478, 0.6763925317259811, 0.12045573167821899, 0.11063953682944627, 0.11154599609955462, 0.09830150135406979, 0.09539403892802856, 0.09528609416819767, 0.09436164549388448, 0.11145109008158327, 0.0925654487465426, 0.2572110432393042, 0.14754692938299463, 0.19083463997692962, 0.1486426991642975, 0.1600763262440763, 0.1693597451956086, 0.17573809606978685, 0.19883908763919833, 0.13130091749729544, 0.5710459748680342, 0.5165488116844719, 0.4344742845260373, 0.5830106237936813, 0.4456955139442704, 0.4604099637260439, 0.625976616044059, 0.5833555720421328, 0.5113997675694357, 0.37711568701630427, 0.3312875182696915, 0.2605532844718407, 0.3829487624979654, 0.33490878495752874, 0.26382654051170007, 0.48147793471107403, 0.41587842215988213, 0.3189279646986095, 0.19811971996963995, 0.1912969982142141, 0.19368907780371736, 0.18572378550633306, 0.18912017390648062, 0.20302969260439307, 0.2162838419390335, 0.18333954260740404, 0.18821258339367508, 0.5763709809022803, 0.33401540419554154, 0.39523241889259186, 0.7117491544517767, 0.20632807258234553, 0.2154237898851411, 0.2821553451957334, 0.19597258617823832, 0.4476154762795336, 0.20209510796950936, 0.16362560254843428, 0.15045504449239255, 0.8451740998386034, 0.8064337687601139, 0.687948541978866, 0.8201113687969195, 0.15777106603551472, 0.5125783452934345, 0.2067346336377135, 0.8180824339586369, 0.5040373642304616, 0.8492972367999032, 0.20121043684208173, 0.199129969303394, 0.1538281572075041, 0.20518013637189403, 0.20340075168121674, 0.17026804202018286, 0.18272037475040892, 0.1822616484854157, 0.21358477907744222, 0.1934029092520535, 0.20341563423359943, 0.18425748503122907, 0.1930840221409098, 0.19160193588857577, 0.08321300819551347, 0.07772183880765315, 0.07375765783814581, 0.08548465904670632, 0.08115410705450321, 0.08134977688084633, 0.07774551428698873, 0.0754391923825497, 0.08300930480387614]}, "mutation_prompt": null}
{"id": "e58b5cef-aff5-4813-869b-568a26e57bb7", "solution": "import numpy as np\n\nclass EnhancedProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(2.0 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor for more exploration\n        CR = 0.85  # Adjusted crossover probability for increased diversity\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Fine-tuned adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)  # Fine-tuned adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.7)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer with enhanced diversity preservation and adaptive parameter tuning for robust optimization.", "configspace": "", "generation": 19, "fitness": 0.3601591001755184, "feedback": "The algorithm EnhancedProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8030900038905542, 0.8372196873174264, 0.8196955679295697, 0.8061739228307954, 0.852500510431841, 0.8212282407974523, 0.787450539397926, 0.8435650650844393, 0.8157887417658822, 0.6664556190328588, 0.7498205265803739, 0.6849120032678309, 0.6927223739459174, 0.7215027157629831, 0.6776695688470656, 0.6982250205464642, 0.7379448596140521, 0.6648816000607767, 0.37443162718075396, 0.307115864620205, 0.32089191486194324, 0.2655212153875377, 0.32571147717102344, 0.3007634029681876, 0.24257736163199262, 0.20950632932257618, 0.41698164721803865, 0.23565323316812292, 0.14066540101837888, 0.24071495074608618, 0.12385210379787737, 0.28147112216994497, 0.22250275629764527, 0.20651033996023627, 0.24418369426272535, 0.22830031270963058, 0.9747452388226182, 0.956510894667244, 0.9868062744780001, 0.9857822275044327, 0.9651582310031207, 0.9724686001025882, 0.9539417092347937, 0.9824136996860122, 0.9662831855771314, 0.527070692090196, 0.5285552541556985, 0.4657895759840348, 0.5365137606650261, 0.5280682026287324, 0.5136725177337204, 0.48247216846643515, 0.5548845046661566, 0.5345638100154446, 0.7342175835408493, 0.6548789674106085, 0.5529638113044165, 0.7210696041347593, 0.6931234193114519, 0.6573013754851811, 0.6968281007221979, 0.731631129561828, 0.7158932394508972, 0.32606239964351613, 0.2972115479083759, 0.2931779364006263, 0.43818832583933787, 0.24402801811468988, 0.28072996101986014, 0.3297962108462882, 0.2631243358857035, 0.32818835897539034, 0.04948708641014332, 0.2648344976743091, 0.16770103194200892, 0.39786187702277065, 0.3189402969381333, 0.34755132037611547, 0.2758310267202788, 0.2809417914287202, 0.3074402080830262, 0.2723566363856045, 0.16745700821893117, 0.13774279357275554, 0.23107693373538507, 0.17369112387743513, 0.13993457676858945, 0.2665921337660665, 0.17382451936836074, 0.1810561163669736, 0.37890769116763867, 0.30685085925501987, 0.24555219569720776, 0.3571405797395665, 0.2883219513793738, 0.3042904229141187, 0.4392882112810669, 0.32874465621387017, 0.2702261873198375, 0.14077328879478623, 0.08580126950533462, 0.0524658888797338, 0.12211636473161747, 0.08616826509461994, 0.09132681983808766, 0.17922309603329434, 0.10404609906783502, 0.06840689655046794, 0.24877460369584714, 0.2161514839847708, 0.19240509119561666, 0.26703353442562006, 0.23518963473546428, 0.2190951673863063, 0.25703400113607244, 0.21447376382553474, 0.1775600565388621, 0.6459545849404131, 0.6330256098780557, 0.6095626081491776, 0.6666516015054859, 0.629449170421015, 0.5697858652502394, 0.6907645300238638, 0.65809179712199, 0.5791664391085583, 0.10962055129111137, 0.09036109251770741, 0.09458359313359088, 0.10740712673237707, 0.08783901979369946, 0.10190731904340844, 0.083100695732649, 0.09780713673655317, 0.08913605652908863, 0.1663927037337346, 0.18344897902903223, 0.162745486967949, 0.1843206197977536, 0.14692647591052443, 0.1582502245324927, 0.16055409036319612, 0.12622991384153615, 0.14112365054865317, 0.3759062421922976, 0.4288120129195949, 0.3227729178646307, 0.38822893310425655, 0.3245318090106569, 0.3003082037061342, 0.424212123770056, 0.4675099157239999, 0.3860895146178178, 0.26799536027648796, 0.32892229392853867, 0.2493282437661738, 0.24446690559737527, 0.26230405461528106, 0.23891855208630886, 0.29549890589542005, 0.29268122132265495, 0.26979195741046047, 0.189595696050312, 0.18523783675893146, 0.18463587668459247, 0.1777265005311156, 0.1849439947712278, 0.21332668650556252, 0.18283444756963008, 0.1898823240157711, 0.1872972243966996, 0.1933120184025382, 0.24972194510400314, 0.1920627896789574, 0.3099409064564892, 0.2947977392297977, 0.24052691612188726, 0.32316276433742164, 0.25706002734064026, 0.234870370334472, 0.733227350358846, 0.18419346137321801, 0.172225682175136, 0.7369116284645523, 0.1888682147948939, 0.17722753224652277, 0.59379459201923, 0.6750815916319285, 0.6612184550999064, 0.1987156600104285, 0.1661291570258172, 0.1603040767423023, 0.1761778546081636, 0.16439384826940573, 0.1816535777128353, 0.753144966453348, 0.6647313068173407, 0.21032703193887736, 0.20170028411779917, 0.18112525977127691, 0.1891700653718159, 0.17895354996117752, 0.1907042952636906, 0.20417518474533203, 0.18492479794217076, 0.1991190620479668, 0.18357472009042397, 0.07548708684085614, 0.07159152570976823, 0.07745165737027637, 0.07607984509520616, 0.07459072271198586, 0.07547689719677586, 0.0761801130771208, 0.075711948200617, 0.07259520624525373]}, "mutation_prompt": null}
{"id": "12f6d6d5-38e7-48db-a9b9-a1c5523f9bed", "solution": "import numpy as np\n\nclass StochasticMutationEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(2.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Updated DE scaling factor to enhance exploration\n        CR = 0.7  # Adjusted crossover probability for diverse offspring\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation with stochastic component\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                stochastic_factor = np.random.uniform(0.5, 1.5)\n                mutant = np.clip(a + F * stochastic_factor * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.10, 0.10)), 0.6, 1.2)  # Enhanced adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)  # Adjusted adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.65:  # Altered dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.7)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "StochasticMutationEnhancedHybridOptimizer", "description": "A stochastic mutation-enhanced adaptive hybrid optimizer utilizing a novel balance between exploration and exploitation for improved convergence.", "configspace": "", "generation": 20, "fitness": 0.3593214425122603, "feedback": "The algorithm StochasticMutationEnhancedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7773344819661544, 0.8362051142887389, 0.8562721919501635, 0.777259338741879, 0.8531229278767223, 0.8422348849557453, 0.79344654002902, 0.8527716736679312, 0.8614241123137392, 0.6674249343273104, 0.7206900566635416, 0.755572929456984, 0.6439517015699303, 0.7414341269263951, 0.714841619081481, 0.6523971770264402, 0.7389361157233072, 0.7543710615762282, 0.2077536492895079, 0.1544841473729015, 0.17227230764597856, 0.20089554798118725, 0.3475887117221328, 0.35271375821224793, 0.26955804893389046, 0.1577541915634596, 0.2813175928176427, 0.20792219985139204, 0.21003978805370693, 0.3160274424854157, 0.13750911738270621, 0.1452382225874972, 0.23611328584817692, 0.13403134856472754, 0.15567204810060753, 0.1591230723982482, 0.9748593227200089, 0.9867418874447862, 0.9719881047220251, 0.9633796432558036, 0.9832685458811993, 0.9620575443966141, 0.9596492691967615, 0.989289529238986, 0.946318528121644, 0.46792314359127307, 0.5030260597777332, 0.5507488549856904, 0.4608733436099416, 0.506513818040516, 0.5387840442687721, 0.4854603010401096, 0.4925373155740278, 0.5649481872684159, 0.662172942779167, 0.7636514374517851, 0.7624920990206239, 0.6821130874051661, 0.7789418005072153, 0.7733944625923415, 0.6763383282236325, 0.6951498185130048, 0.6659336839144958, 0.2869457107634835, 0.31207518756230934, 0.34852512038346284, 0.25001671389352165, 0.24476660721927823, 0.284264984478661, 0.2544755927162127, 0.3076276049346828, 0.43276775841229487, 0.20138211850285692, 0.2721547091109282, 0.26300447468371735, 0.23698902833555913, 0.30665146338733573, 0.3288328763041367, 0.2266671360870326, 0.2506845920475653, 0.3595325814628644, 0.15543592403366224, 0.12801167145701908, 0.24889857792351633, 0.11401281272783492, 0.19852545438412184, 0.2861238330710908, 0.12976161638864991, 0.16261237432432407, 0.2675421337687095, 0.22621641222241595, 0.3458506651929619, 0.3862758540562914, 0.2625086331100127, 0.36291844788043126, 0.3771077798021243, 0.3001283613152306, 0.374620986987774, 0.4721335227446207, 9.999999999998899e-05, 0.07738265138836609, 0.19859288115876883, 0.05907454526069178, 0.10995002104314955, 0.18868827873091742, 0.11585520594298238, 0.08920733585521645, 0.15742945310028356, 0.17766683406333883, 0.21047445300302303, 0.274830846664196, 0.22574277056439784, 0.2649669446602134, 0.31921503080136493, 0.2077555393057453, 0.2447288471759419, 0.30555482085698227, 0.5682954759899921, 0.6287393089082467, 0.7051634172749444, 0.5701440964083065, 0.5977674184589803, 0.693780137085085, 0.5765208202009495, 0.6296743508755867, 0.6854889585623825, 0.1008952191150323, 0.1140161695802342, 0.09199961677791757, 0.08077361393062843, 0.09673878786109269, 0.11943586907165482, 0.08365629612480918, 0.08516426021285972, 0.10827806576795573, 0.13229427877646194, 0.15094951314058747, 0.1523186307469896, 0.16435441712010923, 0.1732557678730141, 0.14411291493954959, 0.14188909050620968, 0.1797309165128449, 0.15956239740349343, 0.3698952376673964, 0.3995628378013035, 0.43123568574173965, 0.3365541286986078, 0.36205862632137775, 0.4371024549269237, 0.40007457842955463, 0.4117307738589562, 0.46904133177782403, 0.22468266007719095, 0.3123372410009899, 0.2734939576857299, 0.23660216401103895, 0.2500632160759505, 0.28769378235953424, 0.2408344095181958, 0.31296531606765143, 0.3515195711139204, 0.18512301924987462, 0.18896462657759583, 0.18804398953550128, 0.1698760092211984, 0.20649334079888226, 0.17536183923053628, 0.19129819650682034, 0.20711211904259874, 0.19235127625309367, 0.19254921265023228, 0.26881366362857584, 0.492428460921125, 0.27844835392454126, 0.38718349203486124, 0.2216764680980403, 0.19477799115088124, 0.2145410336423691, 0.3998681055410479, 0.1669113223798968, 0.8196758514851987, 0.5333056192862595, 0.4976369517215289, 0.17213018051684215, 0.7876743161630548, 0.6781737058320512, 0.17729311162743966, 0.20028280084583505, 0.16607244134898647, 0.16661559386648728, 0.20202185995037925, 0.1754373697169167, 0.20195213065680118, 0.1874667581793108, 0.12577973051281566, 0.732727734183634, 0.2103870357473534, 0.20270837921978924, 0.18506922678334792, 0.18513325461329266, 0.17605273187303405, 0.17506313309842447, 0.19018971385615546, 0.1836261014598758, 0.1881465740189272, 0.18565513298689407, 0.07444119477467159, 0.09821603833778647, 0.07562597904726354, 0.07112278506118186, 0.07426737571697883, 0.08031518427207907, 0.06874326363487615, 0.07330708721436963, 0.07931857854374336]}, "mutation_prompt": null}
{"id": "8c928fe9-baad-46d9-a8f0-33a79ce739c8", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(2.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.85  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer with enhanced dynamic population strategy and improved exploration-exploitation balance for robust optimization.", "configspace": "", "generation": 21, "fitness": 0.352128875277094, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8053236961008079, 0.6960278724643342, 0.7155762122137517, 0.8064131249445725, 0.7179692941945586, 0.7510278898481485, 0.8232221568140157, 0.7082873533326415, 0.7330577352316132, 0.6995757421923078, 0.5534247209803462, 0.5945980621578352, 0.693399802703722, 0.5484269480651889, 0.5849972802104424, 0.6900417316738127, 0.5501753339138489, 0.5899213668181127, 0.22436716760676367, 0.3749101296588234, 0.13690288366033943, 0.2561103350499032, 0.12014648027485131, 0.16312405142856534, 0.2032979401088597, 0.12365410173829061, 0.30212735821587944, 0.3707923144647741, 0.11446459211758597, 0.13706072950793224, 0.17850117782609864, 0.11238431253254799, 0.13282426532188196, 0.1276143599988132, 0.1766696338542335, 0.13148243642870872, 0.9361010966561572, 0.9788992352665434, 0.9546593285417597, 0.8795143403128765, 0.9729223344774435, 0.9517594189434652, 0.9045986131301254, 0.9893910828761963, 0.9667125691939211, 0.5419890250269384, 0.4308007892775124, 0.05771021050231884, 0.5235040606903024, 0.4327075813814292, 0.46774573135186837, 0.5349691416367517, 0.40031242391977817, 0.49015575932149813, 0.8003458570352224, 0.5767357424735764, 0.561548680411274, 0.7870055208586828, 0.5614711676757724, 0.5803262098756519, 0.7819053603760886, 0.5858833692501466, 0.5203792279005344, 0.4248171492988667, 0.28981168066611085, 0.26963346630947604, 0.3799084294045688, 0.28779956717621114, 0.3330862310673173, 0.43153769659790464, 0.2263001304724247, 0.22956005758129017, 0.02193356048940509, 0.42218413917698205, 0.0160934189200852, 0.3525150196334945, 0.3217457436174054, 0.2592707015041339, 0.3934013735345294, 0.267896372732187, 0.3318922147641702, 0.3129758824540442, 0.2692514647690175, 0.26493239528274115, 0.4031550231658747, 0.19412136550969483, 0.25593524712872584, 0.40297342161462313, 0.2323847286717733, 0.17050836808383574, 0.48557392570278823, 0.36452980762407183, 0.1957143332019904, 0.48998889210523067, 0.2774427089395157, 0.2791412028285708, 0.552883330058217, 0.4279990918066623, 0.39307432920743623, 0.148779446971128, 0.0948024863063367, 0.12893898982717777, 0.25748187535561806, 0.1891938166202125, 0.16398746809311815, 0.12822563155494282, 0.12035412764846865, 0.1027610356562163, 0.32372243967555503, 0.18805355414753555, 0.2187694355092582, 0.3049690797096195, 0.25816997891462046, 0.2688137701445986, 0.2804358917163011, 0.2258654086079268, 0.28484775124287676, 0.6778008872386194, 0.5782835981149819, 0.6195441890453417, 0.6367039432401786, 0.592466412117568, 0.6131084024530611, 0.6181860677937281, 0.5581149477586954, 0.6352994550770052, 0.09043519923136811, 0.10696447163323342, 0.11720319354025999, 0.10007962856096986, 0.09959161341139755, 0.08663891521939893, 0.11011292404635864, 0.08279508361383447, 0.08888450286703009, 0.14058720647952172, 0.1817986691864395, 0.1430210468375821, 0.15441445475369453, 0.18935352039090647, 0.22032800915390927, 0.15851334207752044, 0.27804431606131863, 0.17182647049736244, 0.42891881500150186, 0.3399295761162794, 0.3410724868041517, 0.39767916374154477, 0.32409190713716374, 0.37128446726726316, 0.5038204728125708, 0.3908093173407885, 0.389006671278582, 0.2737923128720354, 0.22507255172591878, 0.2586653983266841, 0.2863162414834888, 0.2512931355534609, 0.2724140062385957, 0.3369847835007266, 0.2599069365601364, 0.2943789442915833, 0.17082370508432376, 0.19316226777189527, 0.1761772172614825, 0.20778823667843438, 0.1853912695342631, 0.18022144318346223, 0.18202039154503424, 0.17588117446099383, 0.2069004990187896, 0.19977685937365242, 0.22360232200133856, 0.27862968855675396, 0.28396602766776646, 0.18382796233099574, 0.19631593841407435, 0.3778753034428034, 0.4471463287043759, 0.33082442673982404, 0.7685323258714494, 0.17058245968647212, 0.6980699786359603, 0.16747169540672235, 0.1902034847269478, 0.591286229322572, 0.7896264074747062, 0.16732093462271802, 0.5121800428725083, 0.16694915507152897, 0.1966799365637466, 0.195792533962434, 0.6686485090258891, 0.19442788397524546, 0.18796133367952916, 0.2040265585576937, 0.6878079464271263, 0.19959976413726765, 0.18771738511440228, 0.18099367614854234, 0.18245191198506883, 0.17628242134090766, 0.16971167936740317, 0.18505775308764982, 0.2213629718867287, 0.19089834487013013, 0.19231832651996805, 0.08011232685609926, 0.07794014042606234, 0.07920247251693147, 0.08099235719590903, 0.07530689580976757, 0.0683988213350516, 0.07815407090379922, 0.06959131305611721, 0.07220916036559233]}, "mutation_prompt": null}
{"id": "9348918b-276d-4ef8-9adf-3aa390be5f55", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer combining evolutionary strategies with differential evolution and adaptive population dynamics for robust optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8882618092741813, 0.829182044780998, 0.8610499892064126, 0.8860672888600784, 0.8497892624077474, 0.8568544710138344, 0.8827839553377691, 0.8447332944770616, 0.8566070684950713, 0.8136255532868154, 0.7365055706409713, 0.7531697291868006, 0.800552865395084, 0.73954571840588, 0.7492828120372013, 0.8166446882528984, 0.760235123508034, 0.7586193024188106, 0.13783213059376176, 0.3468626938086081, 0.6039352394239013, 0.5403394278626681, 0.3868593530664918, 0.439146204247862, 0.5172031815989693, 0.3933832194614454, 0.501547223903948, 0.15671731366968122, 0.13947198605299094, 0.3742683441997391, 0.13587244849754931, 0.1331466841365031, 0.46208939290785644, 0.1587838554797063, 0.12343544019416441, 0.49699449656364114, 0.963978727658187, 0.977173733535758, 0.9807624472179383, 0.9699521028578815, 0.9841417337388083, 0.9787561683905639, 0.9788014501290754, 0.9473640827898129, 0.9714761082144242, 0.6746321929141335, 0.6235019242244924, 0.5945279322612524, 0.6910090259054971, 0.6106718722850978, 0.5650212132381787, 0.689207491869011, 0.6442234250575412, 0.543877043680057, 0.8476063130638523, 0.7999471967673868, 0.5787679066608846, 0.838824510188956, 0.8260262498485814, 0.7507964748172186, 0.8651675140818017, 0.8070031109094138, 0.6754739948500335, 0.6147647784141852, 0.4229391179598081, 0.21428535914283475, 0.12965886557991868, 0.5152964251861405, 0.28267494328250087, 0.25821885749668305, 0.5087009802422158, 0.3552145555804568, 0.11898021494747901, 0.3539063328767946, 0.1605005678151128, 0.16837396323295106, 0.5127307942442694, 0.3325267063023809, 0.27414568046285515, 0.49431350745791147, 0.3846755465250158, 0.5050459564357026, 0.4604003836681171, 0.1552595836134999, 0.49020287338840207, 0.4035899555275041, 0.1689480848010726, 0.5839168975564963, 0.543229142487669, 0.21106570916867728, 0.6647247008289272, 0.5908940568134999, 0.29425470324285463, 0.6278376630050826, 0.6134456061308942, 0.2241619720345721, 0.6660785792357446, 0.6522643138160658, 0.32799904770964416, 0.0902964133486368, 0.1562209582062336, 0.058257060442464925, 0.40496692005049095, 0.2758869290445706, 0.07362059717192349, 0.22197647915570073, 0.24662785389647257, 0.12430111133136179, 0.4546018961901098, 0.3824472674845073, 0.24718004979828323, 0.5295328064736091, 0.3971107050785766, 0.24665584618784386, 0.3542601268885882, 0.05611232785236531, 0.22048088299036517, 0.8016260441972363, 0.7234519616082478, 0.6413597488818221, 0.7898741758713639, 0.751930478578601, 0.6596184987667619, 0.8212238071918924, 0.7398801181862478, 0.6763925317259811, 0.12045573167821899, 0.11063953682944627, 0.11154599609955462, 0.09830150135406979, 0.09539403892802856, 0.09528609416819767, 0.09436164549388448, 0.11145109008158327, 0.0925654487465426, 0.2572110432393042, 0.14754692938299463, 0.19083463997692962, 0.1486426991642975, 0.1600763262440763, 0.1693597451956086, 0.17573809606978685, 0.19883908763919833, 0.13130091749729544, 0.5710459748680342, 0.5165488116844719, 0.4344742845260373, 0.5830106237936813, 0.4456955139442704, 0.4604099637260439, 0.625976616044059, 0.5833555720421328, 0.5113997675694357, 0.37711568701630427, 0.3312875182696915, 0.2605532844718407, 0.3829487624979654, 0.33490878495752874, 0.26382654051170007, 0.48147793471107403, 0.41587842215988213, 0.3189279646986095, 0.19811971996963995, 0.1912969982142141, 0.19368907780371736, 0.18572378550633306, 0.18912017390648062, 0.20302969260439307, 0.2162838419390335, 0.18333954260740404, 0.18821258339367508, 0.5763709809022803, 0.33401540419554154, 0.39523241889259186, 0.7117491544517767, 0.20632807258234553, 0.2154237898851411, 0.2821553451957334, 0.19597258617823832, 0.4476154762795336, 0.20209510796950936, 0.16362560254843428, 0.15045504449239255, 0.8451740998386034, 0.8064337687601139, 0.687948541978866, 0.8201113687969195, 0.15777106603551472, 0.5125783452934345, 0.2067346336377135, 0.8180824339586369, 0.5040373642304616, 0.8492972367999032, 0.20121043684208173, 0.199129969303394, 0.1538281572075041, 0.20518013637189403, 0.20340075168121674, 0.17026804202018286, 0.18272037475040892, 0.1822616484854157, 0.21358477907744222, 0.1934029092520535, 0.20341563423359943, 0.18425748503122907, 0.1930840221409098, 0.19160193588857577, 0.08321300819551347, 0.07772183880765315, 0.07375765783814581, 0.08548465904670632, 0.08115410705450321, 0.08134977688084633, 0.07774551428698873, 0.0754391923825497, 0.08300930480387614]}, "mutation_prompt": null}
{"id": "88ce328e-5c62-4941-ac52-9e825a1fe2a7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.5 * np.sqrt(dim))  # Slightly larger initial population\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n        self.temperature = 1.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Slightly increased DE scaling factor\n        CR = 0.75  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Simulated annealing influence\n                if np.random.rand() < np.exp(-self.scores[i] / self.temperature):\n                    mutant += np.random.normal(0, 0.1, self.dim)\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n            # Temperature annealing schedule\n            self.temperature *= 0.95  # Cooling schedule for simulated annealing\n\n        return best_solution, best_score", "name": "EnhancedAdaptiveHybridOptimizer", "description": "An enhanced adaptive hybrid optimizer integrating simulated annealing with evolutionary strategies and differential evolution for robust search.", "configspace": "", "generation": 23, "fitness": 0.3144272484764637, "feedback": "The algorithm EnhancedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8491247668171235, 0.785477018623818, 0.8222857192622404, 0.8556015000693098, 0.8270889544990123, 0.8129917213139705, 0.5049665999065268, 0.5229018932501831, 0.5185238608499529, 0.1826329439341643, 0.2100861898962023, 0.12907657965775088, 0.13783005294022188, 0.16451163186739526, 0.1810472185972951, 0.1423372164025537, 0.1725086547790966, 0.12566779621770907, 0.13939597368832624, 0.14244458115905922, 0.14729319144460062, 0.35947849310867797, 0.4306612182956373, 0.3675702905032192, 0.3995638415388756, 0.47329732462391827, 0.28090877919996804, 0.11279819593554608, 0.11576520755216146, 0.11671969392874948, 0.364106937396655, 0.34860520405534623, 0.13842315695825713, 0.3688137598496448, 0.3614528484672114, 0.1255804522184124, 0.9765800955009452, 0.9302945942417817, 0.9368244478744208, 0.9655003227474498, 0.978108507926288, 0.9691838943520017, 0.9739125634677551, 0.9746348133782524, 0.9805746555508215, 0.6387095874620818, 0.4775675911184035, 0.5946394345723269, 0.6267688099648521, 0.47595925770066694, 0.14826551423518264, 0.3111441587370769, 0.3115394945083836, 0.28962253392350834, 0.8053292431732799, 0.5558186078377203, 0.7021680200127176, 0.8237550894101396, 0.6786616108043746, 0.7625546942145303, 0.7861578073795426, 0.5500354011523214, 0.7920096224957964, 0.33878115709290346, 0.3259357974261239, 0.22347302313491024, 0.16533832191113873, 0.15834775345096563, 0.1663425888883634, 0.22367043833830824, 0.2748328648105819, 0.4306777846532024, 0.1948074356993862, 0.009927094904330636, 0.5128239585200292, 0.3670350584090941, 0.2616844375691143, 0.34285969904907143, 0.36491286623905084, 0.28144719102372906, 0.26869098250578116, 0.07558309100800686, 0.06382660862950273, 0.06626833693139, 0.3339117573317182, 0.11797628771086688, 0.4170279315845583, 0.02332272504812094, 0.009632588687037091, 0.060925615314534665, 0.4849517957610029, 0.27044215565466523, 0.516432107576076, 0.12604134927865618, 0.15216466325103561, 0.1766624699720062, 0.45898243727893717, 0.28903839738368364, 0.5445251125265, 0.012664705842027613, 0.018112335079216613, 0.005095067455703095, 0.014598358718723503, 0.0475153377918075, 0.021816256817344004, 0.2398595153857861, 0.08622368707459349, 0.1747712771675387, 0.31893308164215106, 0.1976579189530262, 0.3116712306573368, 0.10953576755217331, 0.09470347821329961, 0.1111922610402507, 0.11612384088956784, 0.10861518478315135, 0.11171956702076935, 0.4294920543998648, 0.42359618554041845, 0.4167191759160158, 0.4401525066406621, 0.42063454495759545, 0.4325192870022223, 0.7128420558378123, 0.5781596803273514, 0.7293697473111085, 0.10918048503542199, 0.08502587191116162, 0.10579281175221622, 0.12238822906648061, 0.11380508947141621, 0.10736276106114073, 0.09553382865722337, 0.09992429839064665, 0.09628537705394158, 0.19211622877651235, 0.1553266386300205, 0.15580027866501933, 0.17487200409745252, 0.14969848916563455, 0.14505175091268485, 0.19093473998286015, 0.2081366870936695, 0.1626354652177493, 0.30162840651787204, 0.2805541445214984, 0.2956553377932818, 0.48281065757680053, 0.3373721442062986, 0.5110882639612258, 0.5816085438122234, 0.41519210860839817, 0.4641489068932677, 0.22270960446123866, 0.22079605622994058, 0.22971044517228134, 0.3248169573426358, 0.21892950442740144, 0.33034939521252815, 0.37733865668975997, 0.3136260994886647, 0.3430614290527283, 0.19413164945757289, 0.17780189329870422, 0.19587468953549236, 0.2077302236672396, 0.1833352391952463, 0.20110174295665095, 0.20360387100492783, 0.19025045586912293, 0.2042913748464419, 0.1840679044682113, 0.20117703522457808, 0.2332564081864137, 0.31190480877675486, 0.37050995337030623, 0.20221857074274574, 0.5088213795880435, 0.28618581857712044, 0.2171064370951482, 0.16666544791010185, 0.1996123979892589, 0.20056783039609227, 0.17846722266944903, 0.1866009910736015, 0.621138983280642, 0.18684044048054294, 0.17098958085745541, 0.1713577778361388, 0.45077776360960786, 0.20667794925092653, 0.20516089465745457, 0.7367103602110427, 0.17866600401033705, 0.2003540691035144, 0.20965927581489308, 0.204565251734521, 0.5293960759212251, 0.20469424533598513, 0.1820026322459969, 0.17523186209158015, 0.18627568618721857, 0.17706235864972164, 0.18386157814467774, 0.19967852896468552, 0.18741010759454158, 0.2080226913799288, 0.07268598152439298, 0.07252276715118333, 0.0731426576633376, 0.08443762093239471, 0.07065803210411137, 0.0791970450568118, 0.0762079014888668, 0.06878919071550227, 0.07810147698506675]}, "mutation_prompt": null}
{"id": "cebca447-a7af-49ef-b037-987e8d429a58", "solution": "import numpy as np\n\nclass AdaptiveGradientMutationOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Set DE scaling factor slightly higher\n        CR = 0.7  # Set crossover probability slightly lower\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation using gradient-based approach\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                grad_mutant = np.clip(a + F * (b - c) + 0.1 * np.sign(b - c) * (self.bounds[1] - self.bounds[0]), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, grad_mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.5, 1.2)  # Adapt F with wider range\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.5, 0.9)  # Adapt CR with smaller change\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.8:  # Change adjustment threshold\n                new_population_size = max(int(self.initial_population_size * 0.5), 5)  # Ensure size doesn't get too small\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "AdaptiveGradientMutationOptimizer", "description": "An adaptive gradient-based mutation optimizer integrating probabilistic selection with differential evolution for efficient search.", "configspace": "", "generation": 24, "fitness": 0.14943147552807054, "feedback": "The algorithm AdaptiveGradientMutationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.2130753512658904, 0.19353968572807656, 0.239926237174102, 0.23381703798792164, 0.2587330839114512, 0.25943812916230624, 0.23168548837995273, 0.2045763855542968, 0.23769983014198215, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08610959308717925, 0.056378656887502654, 0.08996430035582414, 0.07831607110133632, 0.06058818963345891, 0.10613487156499468, 0.07695263272024444, 0.08589767424443684, 0.08757153913644267, 0.06763473320488045, 0.03545992129916309, 0.07415746330163053, 0.05727887035662915, 0.04881716037664696, 0.07366030862090078, 0.05469479019040069, 0.05233086756372596, 0.08887355067503, 0.980878398763586, 0.9736418257953191, 0.9830217301821635, 0.9828045922698203, 0.9843683349831549, 0.9854530964598595, 0.977822159627746, 0.9777747889532824, 0.9859935396653186, 0.14760297652265675, 0.131602261463319, 0.15902476405224575, 0.12410831337138117, 0.12410271048586197, 0.15677159911575822, 0.1203712809438715, 0.07817946991367641, 0.1167254801527341, 0.17246650556496101, 0.14872943241282666, 0.17816924066695705, 0.1927633097457394, 0.1716395101541297, 0.18612559093025116, 0.20303165553282254, 0.1450851842018408, 0.19427236048375807, 0.056800155628032756, 0.02888846440825632, 0.08966504684974985, 0.06438014360581878, 0.04028290646083621, 0.0692479626117436, 0.0500096246991496, 0.05339708619180805, 0.07908397567478709, 0.05916911999314145, 0.01323087252928834, 0.08292923530395269, 0.042555419162625174, 0.045277340207469985, 0.07450074058928402, 0.05315802339891473, 0.04285221379594206, 0.06660884408341938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0491138040267759, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04969137816669067, 0.03209674599710921, 0.053644864596333, 0.02785012043390711, 9.999999999998899e-05, 0.07574006127344146, 0.05175662069416542, 0.04274404109826535, 0.05924699733038252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011125469708070712, 0.007031654305299839, 0.036493699435160454, 0.024175740487162534, 0.02569180269732152, 0.025285241394777613, 0.04779534085217785, 0.04243568714426549, 0.03683649941725631, 0.27486584599515895, 0.2381563135134337, 0.24853615859503886, 0.2130332257641191, 0.21425896207866735, 0.24501007677699804, 0.2418950119613995, 0.21798516745306706, 0.23646311519446772, 0.07403561278682647, 0.0747723180169031, 0.08462103168629587, 0.06381272146056804, 0.059364494585134375, 0.07782716982655746, 0.07266230815209673, 0.056267606229581046, 0.07258737173373431, 0.1463276648549634, 0.1512384959986477, 0.13464159985377178, 0.1127183190547194, 0.1366605387675559, 0.13497898334263736, 0.1305814009698053, 0.13336243225676936, 0.13235308801842205, 0.19963000524313002, 0.18679950123640732, 0.19616833212621776, 0.209985654059337, 0.18298012696492183, 0.1945525067212035, 0.19165539780952878, 0.196781325927871, 0.20830924553452357, 0.1512037579790425, 0.12589856126237153, 0.14174570214587656, 0.14724910513684553, 0.1487878022065946, 0.13739248015332794, 0.13231541015412496, 0.1279859102812415, 0.13789703204098747, 0.18456087893933082, 0.1877905787340053, 0.17147674850622696, 0.16639587649078624, 0.17538182057389062, 0.19371448283321957, 0.17357114866922851, 0.193152769652568, 0.17644790718501702, 0.16382342618660228, 0.13486211837823125, 0.17447412815693975, 0.16402774749627902, 0.15115264632918313, 0.17330725514325718, 0.18425660171738312, 0.13979161545766017, 0.17128052688532203, 0.15845708328672659, 0.25768451905003853, 0.15695057031791915, 0.17260296206245618, 0.18600770495022967, 0.16351123182789418, 0.2008915879860489, 0.18478752274615906, 0.16936455751583868, 0.18893897275468552, 0.14739223229470721, 0.16161098088517933, 0.2401094935623026, 0.16391467039681917, 0.17294287254654195, 0.30599647832292365, 0.18912314921243267, 0.17889944358553034, 0.18299102612388118, 0.18012919595526977, 0.1697729717480415, 0.18352741308331577, 0.17927971035775958, 0.18575004185761368, 0.16531654114404049, 0.16769438419263283, 0.1960949147050648, 0.06319248412846268, 0.057633834188329125, 0.06063771370092086, 0.05716373514153894, 0.05363026177590058, 0.063972799929637, 0.06293141734603525, 0.06196774792194759, 0.06116783791815872]}, "mutation_prompt": null}
{"id": "8912a690-6056-47ad-a756-4683077d197e", "solution": "import numpy as np\n\nclass EnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.5 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Increased DE scaling factor for more exploration\n        CR = 0.75  # Adjusted crossover probability for diversity\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation with elite member consideration\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c) + 0.2 * (best_solution - self.population[i]), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.6, 1.2)  # Wider adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.95)  # Narrowed adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.65:  # Slightly earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedHybridOptimizer", "description": "A hybrid optimizer using a blend of evolutionary strategies and dynamic differential evolution with adaptive probability adjustments for efficient optimization.", "configspace": "", "generation": 25, "fitness": 0.33652212371796475, "feedback": "The algorithm EnhancedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7504252879331956, 0.7468717243595836, 0.8000642930166194, 0.7695625963159405, 0.7695030367274396, 0.8443801020993122, 0.7469956899169254, 0.76720929363098, 0.8160193969617399, 0.6020761294549658, 0.6274471579824576, 0.7118237790370642, 0.584334516053279, 0.6091077374927591, 0.7285413480042024, 0.6130902029748979, 0.6264107345411898, 0.696888779300409, 0.09664335674611646, 0.09843092595056147, 0.1283764814984657, 0.11300569461291343, 0.09261384532349293, 0.1257670780821456, 0.11666645550655086, 0.11020275111614286, 0.1027109929240263, 0.08768808985465715, 0.09677390820514897, 0.11734998393174356, 0.10466748441073703, 0.09062142863934408, 0.10805869139113145, 0.09820675623896491, 0.10105320140206708, 0.11560535390312254, 0.9829072418829514, 0.9818539379576958, 0.9932901857644877, 0.991618237403725, 0.9843809141097648, 0.9802957741409641, 0.9852536551176635, 0.9803080875133913, 0.9835575184099401, 0.43810106001984883, 0.49036880465135313, 0.4871329018117696, 0.4775899232573141, 0.4065953090838147, 0.5369548994809868, 0.5552978316106378, 0.46675899052948033, 0.5371605141473119, 0.6469378175776408, 0.6221099695832499, 0.6167459207367681, 0.6551774685954244, 0.6664895192970026, 0.6291808940076433, 0.6457545430087273, 0.6727795803300494, 0.6991207441888174, 0.3894639228415666, 0.4256292071049683, 0.4175678861680986, 0.2838797392367707, 0.33301536797305076, 0.39229568737651954, 0.31946024167049714, 0.29967324071403323, 0.49424264390630346, 0.009878361669198421, 0.009893417694344486, 0.09836560343799627, 0.3097022148726335, 0.34528864005508164, 0.3922347784798631, 0.3334410104913551, 0.31107943678967753, 0.332051955719492, 0.2570831875119852, 0.2720885659132659, 0.16135650191678308, 0.283149669319531, 0.33044470523917846, 0.23800028564098696, 0.3048493960038846, 0.2991431162152297, 0.19295986014482225, 0.3826834344232528, 0.4504461968821284, 0.2953472907386051, 0.3176648576485933, 0.41567258367934445, 0.25643605691293614, 0.4856642357283456, 0.4631859577456299, 0.3120967754982621, 0.12416466108509971, 0.09989533458524313, 0.05097302824023464, 0.13641538485836502, 0.11869460205048565, 0.13010340993442293, 0.06095576511443401, 0.1421112809488786, 0.11490434929325966, 0.20511051184416396, 0.2753840094227862, 0.22622478105505162, 0.2678917891385929, 0.2580463735244828, 0.2584030880207996, 0.25493384788038653, 0.2588271340941629, 0.25191101365100377, 0.637004653588442, 0.6335048540321503, 0.6783749356238429, 0.5877614165127676, 0.6367041205327815, 0.6650055606012382, 0.6181833572727373, 0.6239901685631094, 0.6599284513717218, 0.08209604510110291, 0.10966134726833465, 0.1023735270228906, 0.09438770035786859, 0.09229226322432094, 0.09029763737921626, 0.0810697507205208, 0.087376036953425, 0.09484830935202393, 0.1380153105472104, 0.13382918794339893, 0.22124639613217445, 0.1824634590632297, 0.15450383651687827, 0.17139442145967898, 0.13197533459233668, 0.1342501427778796, 0.15283436269069772, 0.3337489887450944, 0.36100395306197786, 0.4182327208055764, 0.31321524690828506, 0.3313050576031127, 0.3885716103663803, 0.3797468719613585, 0.4196963491455201, 0.4339130334728597, 0.27485179101616286, 0.237265732910376, 0.2976821681091294, 0.22551469131315505, 0.23533510341636066, 0.2375963073268582, 0.2794101558915473, 0.322577098382013, 0.2681841548164875, 0.18626063709762697, 0.18038569300215546, 0.17779330045778696, 0.18338484306044556, 0.19269023807935937, 0.18099706592954046, 0.16844651051287807, 0.1853282254088453, 0.1823941255848578, 0.17275460984786128, 0.18204843957593086, 0.17898149288659404, 0.1820544575745966, 0.21568265800301734, 0.18189537136448763, 0.17719558934154522, 0.1741669873568249, 0.17924337364467613, 0.4760753929949807, 0.12221039513503895, 0.17000304150519063, 0.17892840406467425, 0.18508851751260613, 0.5521546846045423, 0.18181759053780933, 0.16124174802030466, 0.6181430443750138, 0.1639595941832378, 0.3347886690350427, 0.21239865563801963, 0.19914546134692557, 0.19444518592588345, 0.6772146006153521, 0.21005458253396625, 0.21902290182486972, 0.2047294089797207, 0.17380311730628129, 0.1792178086119175, 0.20261670035100787, 0.1757292080160867, 0.19794139252280307, 0.18550505966382114, 0.18470222735837472, 0.18610406531682588, 0.17584992153326862, 0.06423918575630394, 0.06102498566983505, 0.07792764515757844, 0.06901745849535779, 0.07163866598011814, 0.07513859065069295, 0.07765447320136531, 0.06942091612630552, 0.08559525348120645]}, "mutation_prompt": null}
{"id": "e47619d9-2164-4ea6-aace-e7ea7d9c6b71", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(3.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Modified DE scaling factor\n        CR = 0.9  # Modified crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.6, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.7, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer refined with enhanced diversification and exploitation strategies for improved convergence.", "configspace": "", "generation": 26, "fitness": 0.4133060766841182, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7804465055317404, 0.8673201768816172, 0.824689752792475, 0.8139809951715936, 0.8630357214160861, 0.8366771802392761, 0.8004577044566729, 0.8646927719023996, 0.8289081811293079, 0.6839497281358251, 0.7660392259408774, 0.6946105850762291, 0.6872728564121117, 0.7541643505213228, 0.697226899468649, 0.6786918397885964, 0.7597882959869329, 0.6912264992385974, 0.36195090993271206, 0.4133052923045044, 0.48157562579149593, 0.46304497501023656, 0.15114024221544442, 0.4673083144075678, 0.273159099413413, 0.43771779316488924, 0.4512252345190979, 0.234953771148664, 0.13547340446356138, 0.19165369786379338, 0.3738291030139197, 0.15696414753395316, 0.12437093563723556, 0.13419336944691207, 0.16017369250719637, 0.3216828403420523, 0.9689234542351971, 0.9719779692231366, 0.96703115611822, 0.9854691090851565, 0.9530960083970259, 0.9731060058677253, 0.9616742808010647, 0.9689220737089007, 0.9655685000562173, 0.5589932215216762, 0.6120634600050365, 0.5915928949896991, 0.6253817397966533, 0.6017281998729289, 0.5708913350149625, 0.5769050473636959, 0.659054508455013, 0.5906727474577254, 0.737856428035676, 0.8072684647564615, 0.6687174667393913, 0.7432716160436954, 0.8769080561803556, 0.7304765546767159, 0.7644734143674868, 0.7216285362585775, 0.7432919686642123, 0.41873779182846804, 0.2705886370092456, 0.36265263939511583, 0.4477162648330292, 0.5250789876904141, 0.4812435426446474, 0.28224225405854475, 0.5202132648563853, 0.5470744867083922, 0.36487785044182397, 0.23817963729419933, 0.3216097473941508, 0.3849004913837455, 0.5182366680294529, 0.5544060624354091, 0.507714729874983, 0.12973621688679882, 0.31212985953073014, 0.2806637691348115, 0.40638269622057877, 0.2887147964227319, 0.3872757873303392, 0.3348950300188891, 0.304694465320109, 0.24503764467914335, 0.43951383234898334, 0.39877069105834284, 0.32292247335732915, 0.5022832931080032, 0.4499303227807523, 0.4057520703074813, 0.47948726741474446, 0.43150856803194304, 0.4759900553142197, 0.5382706147303844, 0.5279559816817645, 0.04548821410884396, 0.15706137736324877, 0.10040083548723755, 0.3213119667002813, 0.26301034810190116, 0.1186776750567684, 0.07104435608524984, 0.1732592033529885, 0.11582311447498139, 0.293414569046337, 0.2751421017052943, 0.3252650966192091, 0.30355235161622796, 0.37876193604965125, 0.34347702877591113, 0.30430602601444057, 0.2959094149461231, 0.31518679436693076, 0.7035815760398973, 0.7367853103203534, 0.7381288726886215, 0.6676087240086371, 0.7575105969194126, 0.678554841136084, 0.6406791078199641, 0.7048821441141628, 0.6690725327592428, 0.11103668645377329, 0.10163299359871036, 0.08793361842517078, 0.0905336432254984, 0.10035513447015532, 0.11169061059595464, 0.09660337025652965, 0.10736238005189003, 0.10670844491289533, 0.1403501100997191, 0.14464948755713936, 0.17035500210292953, 0.13752111834137137, 0.19351473892188253, 0.13930857938639363, 0.15480346831891656, 0.15469598667591855, 0.1753527827880007, 0.5055600381433009, 0.4255157626714344, 0.43473806802013737, 0.43662125584282496, 0.4945159949361497, 0.4337153583603578, 0.4917542267603605, 0.5725430106263065, 0.5218892867766836, 0.2911245155994465, 0.4005047840597237, 0.30479048560196875, 0.29508466726682814, 0.35281090224743006, 0.3307844757552806, 0.3852530598172611, 0.3690470226863941, 0.2999146749506444, 0.18070751342736713, 0.22135219717132726, 0.18846912285043582, 0.19438088516475505, 0.1941038136183073, 0.1843947650878507, 0.18807662710828932, 0.18942341224182824, 0.18438069935815504, 0.20921392316732523, 0.5514934217129104, 0.5358963278470044, 0.44949159929539395, 0.49831183670806145, 0.21327785460533033, 0.18561234424162065, 0.21560899640708486, 0.202576713441586, 0.2030032664520861, 0.17758503517786617, 0.7999003237847677, 0.17993427690552688, 0.17226444305003807, 0.7826959168190069, 0.17620208073260657, 0.7126358982796543, 0.8388546680976225, 0.15919659577214007, 0.20343919150585443, 0.8165752910526983, 0.6716754540042873, 0.1628780523001533, 0.1629810463093634, 0.20666427291338063, 0.1511590580346478, 0.7981591202732145, 0.1810861408011516, 0.18940403671489192, 0.20208130909128674, 0.16731294968191146, 0.20681585804864877, 0.17238295703307815, 0.19389017729158597, 0.1731154730273049, 0.18445908944801448, 0.0787455312166001, 0.0777468670231517, 0.08782264300432996, 0.0746722211947799, 0.0837503075772209, 0.07649061308291127, 0.08208663059804899, 0.08833156777011553, 0.09163585620590242]}, "mutation_prompt": null}
{"id": "9ad0a131-edf8-4e25-86a9-554e1f2f6980", "solution": "import numpy as np\n\nclass BayesianAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(2.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.75  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Bayesian-inspired mutation selection\n                samples = [self.population[j] for j in indices if j != i]\n                mean_sample = np.mean(samples, axis=0)\n                variance = np.var(samples, axis=0)\n                weights = variance / np.sum(variance)\n                a, b, c = np.random.choice(samples, 3, replace=False, p=weights)\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.4, 1.2)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.55, 1.0)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.7)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "BayesianAdaptiveHybridOptimizer", "description": "A probability-guided hybrid optimizer integrating Bayesian learning with adaptive differential evolution to enhance convergence efficiency.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {}, "mutation_prompt": null}
{"id": "8fc96fb1-f93e-407d-ae9f-980e44c588e5", "solution": "import numpy as np\n\nclass EnhancedProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(1.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.85  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.4, 1.1)  # Expanded adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.5, 0.95)  # Expanded adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.8:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedProbabilisticAdaptiveHybridOptimizer", "description": "An adaptive strategy combining stochastic evolutionary techniques with dynamic adjustments in parameters and population size for enhanced optimization efficiency.", "configspace": "", "generation": 28, "fitness": 0.4132970034700319, "feedback": "The algorithm EnhancedProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8956379227078439, 0.8769653279596128, 0.8923223132406302, 0.8877937449054444, 0.8895531751159649, 0.8985486190395523, 0.8750134618289597, 0.8767832452890915, 0.8957750068338717, 0.8010801260140797, 0.7873202746025876, 0.805834131756472, 0.7827313617404984, 0.7887370490830237, 0.8071033266051717, 0.8018996350414461, 0.8006436844145157, 0.8121010639293675, 0.3946474707586858, 0.685618967312036, 0.6009065567396334, 0.3659064564484995, 0.1735490438818279, 0.4746631349988011, 0.35721361530698814, 0.6316918833653578, 0.4907058829284763, 0.14117873548998472, 0.5243567053236916, 0.15782071389440644, 0.13623111607930238, 0.1758008719519587, 0.1277886315223552, 0.15986573036876073, 0.1674273611405539, 0.5419640910667308, 0.9814115576312835, 0.9783675996809069, 0.9784812295986917, 0.9787337686521898, 0.9749401960509186, 0.9552242867668707, 0.9763093949763699, 0.9786338889334653, 0.969525142126896, 0.5750421845111141, 0.5515050601134988, 0.6516088605282714, 0.6400457786906143, 0.6078719850216106, 0.640587347718905, 0.46645104514787894, 0.5941861970317118, 0.6523996831739669, 0.7895026785198636, 0.6879789206541747, 0.7943260349384874, 0.8648973639632561, 0.7073043491034997, 0.21043538014504926, 0.8200470543437443, 0.6850671913902084, 0.7630036588915365, 0.31389156492646486, 0.23818272596822432, 0.20825457554555615, 0.2670240653009034, 0.15901813654056374, 0.239975392259839, 0.26455170985569343, 0.20124384052927347, 0.2964229775783489, 0.21561965078461798, 0.021385911458345452, 0.5557329777895201, 0.21669133860064527, 0.17671106053034125, 0.2646076572248568, 0.2274136281408522, 0.16293807457817, 0.2485687296504413, 0.21604607398186326, 0.2184397424733877, 0.22593675098877886, 0.6138097220353208, 0.27912664155842026, 0.26471371868743365, 0.41447496727058775, 0.34543909083741464, 0.2250689281146494, 0.6390945064394905, 0.4031048310496608, 0.455433886122909, 0.475551377179135, 0.12071350595652042, 0.15786285240248488, 0.639826515113616, 0.2579795200331717, 0.5236163445096135, 0.26451372654681315, 0.09470944337005238, 0.11247759107359345, 0.19100999263487395, 0.09733721812465279, 0.2661152372301788, 0.1643247112100349, 0.12670261335360233, 0.14555816588303605, 0.28893431481781795, 0.34960931960611474, 0.29619830194411656, 0.41417824451710417, 0.36283345945422585, 0.33630768300684943, 0.4337569492611798, 0.2675772331065922, 0.3049737183998519, 0.8188664251234796, 0.6564436662820036, 0.7729510384688814, 0.6774625060956375, 0.5930514815796192, 0.7078589777357194, 0.8172924631663725, 0.713180430904643, 0.746136189388235, 0.11426594330191531, 0.10934379097928137, 0.11940761541931788, 0.11628558855834326, 0.11707412786169569, 0.1326140564596039, 0.16446858833624445, 0.12398755730609368, 0.11305971179638452, 0.14024435984175632, 0.12931333693068614, 0.23855582236641992, 0.2153742500114979, 0.19066811997650512, 0.260320405351422, 0.15077354622747263, 0.20503517986986408, 0.14704257331285409, 0.619434946129505, 0.4582195159347894, 0.4574975534432678, 0.5338598471262042, 0.4854007936424126, 0.5103494885765554, 0.645294777363357, 0.6080414986480704, 0.5591140561068322, 0.3736123264101354, 0.3354097790117583, 0.3478904847369343, 0.42240244044369524, 0.1992388582405028, 0.36311161839010864, 0.49904727730645104, 0.3872696107713194, 0.4069626685390286, 0.204915272362992, 0.1884859200384269, 0.23069177395218687, 0.18104230059781246, 0.2027758279017413, 0.1882761738904576, 0.2394021204944986, 0.1805851818127019, 0.19509694194353167, 0.21282619349645615, 0.5323503245315067, 0.24130960320251815, 0.5833849253455647, 0.5235595475125463, 0.4885523823568777, 0.3895059685743709, 0.3436678144180926, 0.410725674953081, 0.16939346088430707, 0.6990642222662296, 0.15172839403567484, 0.1738069227736836, 0.1800072588020134, 0.188644715639394, 0.7475982043093683, 0.5844813878461328, 0.8143834524372652, 0.7413276906138595, 0.20325876433496426, 0.7269577933790621, 0.20108630289707397, 0.19540666554958674, 0.19900884373064753, 0.20589691758709217, 0.21051664479106358, 0.15464872670215424, 0.20471975324093328, 0.18757355051006008, 0.19735209288449684, 0.17321820363188123, 0.1898182308352695, 0.1846228543285826, 0.18554629143699253, 0.1884885065159636, 0.18540578675232633, 0.09029953823231318, 0.08632058116117625, 0.08830132690949954, 0.08479613221530491, 0.07603529865318781, 0.08392723347435471, 0.07583540402026434, 0.08692589115059457, 0.08670127158691066]}, "mutation_prompt": null}
{"id": "42fc0c49-ac52-43b0-b8ed-9273f63f7b1a", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(2.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.85  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c) + np.random.normal(0, 0.1, self.dim), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.2)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 1.0)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer with enhanced mutation strategies and reinforced dynamic population control for improved optimization.", "configspace": "", "generation": 29, "fitness": 0.21673400993787245, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.42166999776688685, 0.43941088025398545, 0.4702158397966003, 0.4264120346596262, 0.4713368541812514, 0.43280403980514803, 0.40460740513519067, 0.460067280257219, 0.4764955726754828, 0.06395957053557633, 0.1050452556831939, 0.09340120301226651, 0.06405402957591488, 0.09306156211898342, 0.10876969269387937, 0.06297040148586852, 0.09694641484760413, 0.07987995839978179, 0.11014259576020868, 0.11376725396298193, 0.11331747808195958, 0.11410028130642347, 0.10714575045368269, 0.12374892792526393, 0.10481595216565087, 0.11870515349708743, 0.12249741045330997, 0.10171771144843311, 0.09794435380630861, 0.11325750605093776, 0.09107500943685687, 0.11350100219831616, 0.09936531001707372, 0.08533483287319321, 0.10310503459186204, 0.09891074995803228, 0.9759602204952612, 0.9749006336462234, 0.9670829877530354, 0.9633752087822779, 0.9346246700712084, 0.9529102625709182, 0.9674545030862238, 0.9719961487061771, 0.9586779192748893, 0.2439606868063141, 0.2892097431213734, 0.2661293328754777, 0.2617557717289255, 0.26976832900344594, 0.26257225506577575, 0.23998684669006487, 0.27049452061966717, 0.2759937586657051, 0.28931921411244454, 0.3089332719933302, 0.31192380554380283, 0.29302265544755235, 0.3692661038660886, 0.3926229010682346, 0.29562423720310793, 0.4813134459276983, 0.2957003807171379, 0.13338429863385315, 0.16479228697313175, 0.14083784274359656, 0.12555059147512526, 0.1530394829409295, 0.1515173530112579, 0.13977525589142137, 0.14703336907249653, 0.16566827390365013, 0.15642442997737493, 0.14972573431127845, 0.1569618501007446, 0.13581488023897348, 0.16312616405815972, 0.15478674160598782, 0.1099321309805984, 0.15924524788869998, 0.1580000761889815, 0.02292601021719165, 0.03047008982935928, 0.0333179419885008, 0.03812688191397262, 0.024726349578620854, 0.018392147912954404, 0.007940094742393544, 0.015765016809118237, 0.017374689398481524, 0.08499304556133302, 0.09859353591165854, 0.0914996653637179, 0.07984114729686809, 0.11504795300902948, 0.06319715872058573, 0.1087282310846327, 0.09957767632395187, 0.09251304744051736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08222932215816836, 0.09646289843692102, 0.10367879835601779, 0.09381599577380206, 0.10233539751327658, 0.09605576073678457, 0.07940209349536731, 0.09700412342493514, 0.10319445792289772, 0.37477285713276565, 0.3944443892323415, 0.4015851364488252, 0.38844133651550905, 0.4174657265359414, 0.39957358279294886, 0.3782490329944853, 0.39768266468374547, 0.3981683055222256, 0.08408586198196277, 0.0975635983936296, 0.12312818294234262, 0.09267255235600003, 0.08755734649934144, 0.09032387974397516, 0.08470708646064284, 0.09666340190013378, 0.0885782539569262, 0.2282907965574622, 0.1610809761941655, 0.23079522129900842, 0.21589251429052414, 0.15185381830896116, 0.16143059928155779, 0.17530162209777667, 0.1331055908700879, 0.16162367142890632, 0.24920338783300944, 0.28080435423949635, 0.2694287553761818, 0.24905336979601445, 0.273667597148319, 0.2733857956079885, 0.25885701361941293, 0.2931040494282281, 0.26582524600569035, 0.19454709293686878, 0.20789904716984509, 0.1905752835937099, 0.18640513885122556, 0.2013379788022992, 0.21265259199795505, 0.20023772982593357, 0.23491547925432688, 0.20549133827838773, 0.22325182715007985, 0.19250379837084408, 0.1803362237963425, 0.16987232429124466, 0.18389550221548723, 0.18678688528720933, 0.20091186493389912, 0.19080459538762162, 0.19676313932676293, 0.1708648855019348, 0.18273921587806274, 0.17758731346487744, 0.1752075260664605, 0.18844323667997798, 0.18525531799500383, 0.16978582232542672, 0.1940355239811693, 0.19874669745860452, 0.18198110309303261, 0.5498042040007824, 0.18316661776347887, 0.46831587521022955, 0.43301708420097296, 0.19290142565493884, 0.1763778062802257, 0.1818680783526272, 0.43598701986995003, 0.16299038174288272, 0.2034403605039451, 0.18529337300012805, 0.3431527581313487, 0.3932748752643437, 0.19316689547958554, 0.4620041576843592, 0.5103176433164437, 0.2000302145900804, 0.18906300942625331, 0.18371973319730295, 0.17771734157875396, 0.18537081772837227, 0.1889843820183229, 0.1748734566909116, 0.1925769765820643, 0.21214610654705668, 0.18552964400041227, 0.06839957401953523, 0.07981644980092584, 0.0925442030137954, 0.06533531431563255, 0.08009694578577242, 0.07508410850363945, 0.07011018547418935, 0.08501146327576392, 0.06898994155256533]}, "mutation_prompt": null}
{"id": "92b9085b-312d-483b-aa7c-c75c5fd80604", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(2.5 * np.sqrt(dim))  # Adjusted initial population size to be larger\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Increased DE scaling factor for exploration\n        CR = 0.7  # Reduced crossover probability for diversity\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.1)  # Revised adaptive F for stability\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.55, 0.9)  # Revised adaptive CR for stability\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Lowered dynamic reduction threshold\n                new_population_size = max(int(self.initial_population_size * 0.5), 5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = np.resize(self.population, (self.population_size, self.dim))\n                    self.scores = np.resize(self.scores, self.population_size)\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer utilizing differential evolution with enhanced population dynamics and adaptive learning rates for improved convergence.", "configspace": "", "generation": 30, "fitness": 0.3473979860337803, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7584226956818346, 0.8377648417395784, 0.7727230832446834, 0.7850704536902672, 0.8385642018448423, 0.7884988935512154, 0.7707149103646349, 0.8491895016958121, 0.7797705416000916, 0.6122350076660921, 0.7209038408070785, 0.6426991068479806, 0.6146271903609537, 0.6999167973923008, 0.6460514581947826, 0.6539017460189629, 0.734414581977881, 0.6329025962170799, 0.45339221482591097, 0.4402784474615987, 0.4364557029384608, 0.41350821343544286, 0.42469551315436216, 0.3654163274621375, 0.42246893702635413, 0.15283616018348456, 0.45520502713748, 0.37341481444252256, 0.3370400727838694, 0.3333190436827206, 0.3290100009497555, 0.3825846213638725, 0.37305760002527466, 0.34872936161226276, 0.33319144666118516, 0.3179197018344767, 0.9702273109663874, 0.9896535278131687, 0.9744615933154638, 0.9687614562660187, 0.9764903912929923, 0.9823955714925177, 0.981904347309123, 0.9768472559551751, 0.9770781549288057, 0.40406266631219445, 0.5411758810807155, 0.4767606774672758, 0.4373532682663568, 0.5699168263878553, 0.47266665770781624, 0.3647254365649767, 0.5009351056702258, 0.48739615156545424, 0.48172324632393393, 0.5639297905065764, 0.5380169725726338, 0.45084660407561084, 0.5937560051940358, 0.5330854684161124, 0.5414017616313682, 0.5466800313040882, 0.5549207703675978, 0.18394469931341173, 0.2926787509222538, 0.34142401220563756, 0.23084294840700303, 0.32579638464057403, 0.27522809409308446, 0.23570305852177387, 0.2610134525490577, 0.2578213364928489, 0.1816184308236103, 0.39068371493784826, 0.18449066876448084, 0.2584898974944454, 0.4094705532631744, 0.3181209722895657, 0.22378602506247391, 0.24587233669566677, 0.22124837965742084, 0.10734725066732065, 0.1400599153153591, 0.15797068232205347, 0.08607954753233593, 0.09613283088728164, 0.1687332571136525, 0.038918219039697055, 0.1728908414203264, 0.15513893115966237, 0.1871609378414688, 0.23254414912857535, 0.19049683716299104, 0.16588154027802138, 0.21130774505211936, 0.22571588592015146, 0.18012958380813415, 0.3072186944905363, 0.3183187979957546, 0.04057480057492213, 0.12249803893535482, 0.13670936897860497, 0.044717313282425675, 0.10682258556517243, 0.10451126005141487, 0.05475001313731287, 0.07305980866358297, 0.0991102846046541, 0.17281841861286362, 0.20996578976407376, 0.16974184784362056, 0.1813931407757634, 0.2317135948614154, 0.20747402425639527, 0.15616450777434454, 0.2013642090952642, 0.16118271132433015, 0.4996876001749606, 0.6276107217790725, 0.569975626494875, 0.5280991182970894, 0.5939454490508946, 0.5687230200714346, 0.5470277147869573, 0.6348671136539707, 0.600482051615823, 0.0902814642699088, 0.11714589602646197, 0.0859952535156997, 0.09292767274654012, 0.10557192658962444, 0.09107147765402279, 0.09161488529795248, 0.10280505961314845, 0.09075282215561709, 0.1309931956704693, 0.14221988379519168, 0.1551065369975757, 0.15626876528895972, 0.1606090296398046, 0.1885728460013153, 0.16416337145120452, 0.16264571012151063, 0.2052712273960161, 0.30901574605864957, 0.35777622501201434, 0.3217983964457679, 0.323573267832591, 0.39453744552993386, 0.34821502299892904, 0.3636898140889473, 0.44187627783113803, 0.42830647446795345, 0.23716707558884764, 0.27177185152850303, 0.27070904471748314, 0.205670295502829, 0.24127747090844154, 0.1970560131792215, 0.2602021141137235, 0.3431767614021932, 0.2510156840351403, 0.18249567104938091, 0.19069423920585837, 0.20532871507783057, 0.17900025950763643, 0.19531642522687132, 0.18886209257846043, 0.19317750886338847, 0.19360246644692802, 0.19479971470039392, 0.18527285587416586, 0.30691752812547046, 0.4098123010591377, 0.18794096443086883, 0.3407644899492326, 0.21320037789225377, 0.35252558574636583, 0.5372919138801898, 0.3728767432774287, 0.15923711618408343, 0.636099608167896, 0.4999323243141772, 0.16964572020688518, 0.5586971339389155, 0.17950731553057508, 0.17081737146344023, 0.5161897403275338, 0.44652126869591247, 0.4220863709478865, 0.19456319855310533, 0.6021736694980956, 0.1695887805226115, 0.512422993291618, 0.1715332106543721, 0.1902410893826394, 0.5978781912195166, 0.6274666800955742, 0.17449450320299997, 0.19352652012873273, 0.18919630633133389, 0.1821300081699726, 0.19992740069040182, 0.17791969011735675, 0.20029513385341002, 0.1881699582979557, 0.1873688190136753, 0.07568372268704426, 0.07505733705463302, 0.07546373644070914, 0.07190250200996817, 0.0799678337815447, 0.07571225398476489, 0.07379437452954751, 0.07618987135359279, 0.07249428636078259]}, "mutation_prompt": null}
{"id": "f9765846-dce1-46be-a0f1-41ad577d6e3c", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(2.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.85  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "DynamicAdaptiveHybridOptimizer", "description": "A dynamic adaptive hybrid optimizer with co-evolutionary population dynamics and strategic parameter tuning for enhanced convergence.", "configspace": "", "generation": 31, "fitness": 0.352128875277094, "feedback": "The algorithm DynamicAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8053236961008079, 0.6960278724643342, 0.7155762122137517, 0.8064131249445725, 0.7179692941945586, 0.7510278898481485, 0.8232221568140157, 0.7082873533326415, 0.7330577352316132, 0.6995757421923078, 0.5534247209803462, 0.5945980621578352, 0.693399802703722, 0.5484269480651889, 0.5849972802104424, 0.6900417316738127, 0.5501753339138489, 0.5899213668181127, 0.22436716760676367, 0.3749101296588234, 0.13690288366033943, 0.2561103350499032, 0.12014648027485131, 0.16312405142856534, 0.2032979401088597, 0.12365410173829061, 0.30212735821587944, 0.3707923144647741, 0.11446459211758597, 0.13706072950793224, 0.17850117782609864, 0.11238431253254799, 0.13282426532188196, 0.1276143599988132, 0.1766696338542335, 0.13148243642870872, 0.9361010966561572, 0.9788992352665434, 0.9546593285417597, 0.8795143403128765, 0.9729223344774435, 0.9517594189434652, 0.9045986131301254, 0.9893910828761963, 0.9667125691939211, 0.5419890250269384, 0.4308007892775124, 0.05771021050231884, 0.5235040606903024, 0.4327075813814292, 0.46774573135186837, 0.5349691416367517, 0.40031242391977817, 0.49015575932149813, 0.8003458570352224, 0.5767357424735764, 0.561548680411274, 0.7870055208586828, 0.5614711676757724, 0.5803262098756519, 0.7819053603760886, 0.5858833692501466, 0.5203792279005344, 0.4248171492988667, 0.28981168066611085, 0.26963346630947604, 0.3799084294045688, 0.28779956717621114, 0.3330862310673173, 0.43153769659790464, 0.2263001304724247, 0.22956005758129017, 0.02193356048940509, 0.42218413917698205, 0.0160934189200852, 0.3525150196334945, 0.3217457436174054, 0.2592707015041339, 0.3934013735345294, 0.267896372732187, 0.3318922147641702, 0.3129758824540442, 0.2692514647690175, 0.26493239528274115, 0.4031550231658747, 0.19412136550969483, 0.25593524712872584, 0.40297342161462313, 0.2323847286717733, 0.17050836808383574, 0.48557392570278823, 0.36452980762407183, 0.1957143332019904, 0.48998889210523067, 0.2774427089395157, 0.2791412028285708, 0.552883330058217, 0.4279990918066623, 0.39307432920743623, 0.148779446971128, 0.0948024863063367, 0.12893898982717777, 0.25748187535561806, 0.1891938166202125, 0.16398746809311815, 0.12822563155494282, 0.12035412764846865, 0.1027610356562163, 0.32372243967555503, 0.18805355414753555, 0.2187694355092582, 0.3049690797096195, 0.25816997891462046, 0.2688137701445986, 0.2804358917163011, 0.2258654086079268, 0.28484775124287676, 0.6778008872386194, 0.5782835981149819, 0.6195441890453417, 0.6367039432401786, 0.592466412117568, 0.6131084024530611, 0.6181860677937281, 0.5581149477586954, 0.6352994550770052, 0.09043519923136811, 0.10696447163323342, 0.11720319354025999, 0.10007962856096986, 0.09959161341139755, 0.08663891521939893, 0.11011292404635864, 0.08279508361383447, 0.08888450286703009, 0.14058720647952172, 0.1817986691864395, 0.1430210468375821, 0.15441445475369453, 0.18935352039090647, 0.22032800915390927, 0.15851334207752044, 0.27804431606131863, 0.17182647049736244, 0.42891881500150186, 0.3399295761162794, 0.3410724868041517, 0.39767916374154477, 0.32409190713716374, 0.37128446726726316, 0.5038204728125708, 0.3908093173407885, 0.389006671278582, 0.2737923128720354, 0.22507255172591878, 0.2586653983266841, 0.2863162414834888, 0.2512931355534609, 0.2724140062385957, 0.3369847835007266, 0.2599069365601364, 0.2943789442915833, 0.17082370508432376, 0.19316226777189527, 0.1761772172614825, 0.20778823667843438, 0.1853912695342631, 0.18022144318346223, 0.18202039154503424, 0.17588117446099383, 0.2069004990187896, 0.19977685937365242, 0.22360232200133856, 0.27862968855675396, 0.28396602766776646, 0.18382796233099574, 0.19631593841407435, 0.3778753034428034, 0.4471463287043759, 0.33082442673982404, 0.7685323258714494, 0.17058245968647212, 0.6980699786359603, 0.16747169540672235, 0.1902034847269478, 0.591286229322572, 0.7896264074747062, 0.16732093462271802, 0.5121800428725083, 0.16694915507152897, 0.1966799365637466, 0.195792533962434, 0.6686485090258891, 0.19442788397524546, 0.18796133367952916, 0.2040265585576937, 0.6878079464271263, 0.19959976413726765, 0.18771738511440228, 0.18099367614854234, 0.18245191198506883, 0.17628242134090766, 0.16971167936740317, 0.18505775308764982, 0.2213629718867287, 0.19089834487013013, 0.19231832651996805, 0.08011232685609926, 0.07794014042606234, 0.07920247251693147, 0.08099235719590903, 0.07530689580976757, 0.0683988213350516, 0.07815407090379922, 0.06959131305611721, 0.07220916036559233]}, "mutation_prompt": null}
{"id": "7056d93b-30ba-4045-b69b-c921f4c98c5b", "solution": "import numpy as np\n\nclass RefinedProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(2.5 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor to enhance exploration\n        CR = 0.75  # Slightly reduced crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Refined adaptive F with narrower range\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.5, 0.95)  # Refined adaptive CR with narrower range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Lowered dynamic reduction threshold for earlier adjustment\n                new_population_size = int(self.initial_population_size * 0.7)  # Adjusted reduction factor\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "RefinedProbabilisticAdaptiveHybridOptimizer", "description": "A refined probabilistic adaptive hybrid optimizer enhancing exploration and exploitation dynamics with improved adaptive strategies.", "configspace": "", "generation": 32, "fitness": 0.32397658500684445, "feedback": "The algorithm RefinedProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7735383984617239, 0.8326068007509573, 0.7884871711682974, 0.7802313625267727, 0.8492214816365179, 0.8025914032125024, 0.8035484996159556, 0.8411676895808538, 0.8094996123632081, 0.6492501442115945, 0.7293518475686318, 0.6646511828929713, 0.6543420405332626, 0.7309279780496237, 0.650511623493687, 0.650279992894631, 0.6848565451786006, 0.6454591273582411, 0.4258610378507417, 0.46769283837409326, 0.39415357526000905, 0.5115513508103006, 0.5050563297917167, 0.3713692539390576, 0.37591255089724485, 0.5400944195120254, 0.39029756088670897, 0.3724987886683824, 0.15464931784243618, 0.3264684387664575, 0.33233634479991847, 0.39990789212405575, 0.35165583392427946, 0.2951429294380121, 0.3225966876905846, 0.34246773008829245, 0.9491386756680517, 0.9896535278131687, 0.9701086900074667, 0.9672846611300878, 0.973754932472308, 0.9815296426615975, 0.9762230183345835, 0.9808390776706941, 0.9723251585586534, 0.3896979398351724, 0.4656508496534466, 0.4320221079620744, 0.41062406482850333, 0.48812844765136354, 0.3935142363068138, 0.4049906188674943, 0.42737397447237413, 0.40637767240170497, 0.42806177953099755, 0.5176057009076255, 0.4877021138423655, 0.45171024271356486, 0.6530955413558294, 0.583637735774587, 0.48684587207869146, 0.5550426799371022, 0.48693639400552313, 0.2224239677197254, 0.3530067855548653, 0.1942884761576127, 0.2203496478739283, 0.32373202827705816, 0.20582870164998446, 0.19322799376374944, 0.2839775365278203, 0.21533057353703877, 0.1584891525203358, 0.2400463679523589, 0.14761555880688448, 0.17161961798944303, 0.32409263953156464, 0.1778549739059082, 0.1445792432445081, 0.29013838992645236, 0.19886577142078699, 0.08829568529152587, 0.16886000635699872, 0.1039823166916869, 0.0787086109106343, 0.11262781123060961, 0.04411967017082585, 0.07268051667531017, 0.14605118962646124, 0.025034053837416637, 0.16009492283876992, 0.26144390731024314, 0.19010651134046053, 0.1318327724380557, 0.22165783867335953, 0.1199681924033199, 0.14331601000550998, 0.28499797602150356, 0.1698865446304737, 0.03397390798400046, 0.05081233005387531, 0.013425134158330021, 0.06999807251668211, 0.11668080489699462, 0.00757543504792757, 0.030160636927957785, 0.08286101786467626, 0.027603143559486676, 0.15225399742329937, 0.23395096420371386, 0.1419828597521111, 0.17807467157572232, 0.25871399574782994, 0.17165144585096115, 0.13931236239485678, 0.18666013663251124, 0.13717827141573724, 0.511710715802465, 0.6050504092502769, 0.5096613176314231, 0.534098414689846, 0.6194694443957307, 0.48581746636146095, 0.5235806639737818, 0.6349075491596909, 0.5153733428610735, 0.10123725952168694, 0.10650456174052547, 0.10653053449325511, 0.09529607353553271, 0.1008414677098095, 0.08434271117984915, 0.10006242637674512, 0.0844742914512131, 0.08730633778034902, 0.16898937529445646, 0.15871551245170834, 0.15039297629442738, 0.16687133592134884, 0.148331179748739, 0.16911007781889298, 0.14558724400214285, 0.15758909551957145, 0.15465113450206824, 0.3178888322703374, 0.34711623528231317, 0.30181549542664776, 0.2839660089032614, 0.33159283747723034, 0.3107828155558805, 0.3653813224226048, 0.3894948577760948, 0.3834269204433184, 0.20864551080134475, 0.24404656460757101, 0.21012913459073257, 0.21906685297305983, 0.2545521251443733, 0.18384440961939286, 0.2587842774538188, 0.3191435631251701, 0.2595926470435639, 0.18179032230337266, 0.18375018042483848, 0.17027316325349862, 0.178365728164547, 0.2022786173487906, 0.18175984420409597, 0.17534587342754382, 0.21100131308709935, 0.19206423521562244, 0.348562668771759, 0.187254000331605, 0.41017640956797075, 0.19361037014738403, 0.2059497931556018, 0.21278013119485695, 0.272932248125219, 0.34325338009017103, 0.1927744872021494, 0.16496684520343807, 0.1682107628487376, 0.15735902966225257, 0.48364294031076827, 0.18908860588835175, 0.17063731943119076, 0.14637487683219585, 0.5220331120043873, 0.17648253491546584, 0.4540536696113153, 0.43519401283542325, 0.40193195257973136, 0.1995391134653841, 0.48874983407127726, 0.3097156488381958, 0.1987694096756707, 0.21053459249727158, 0.19333470538020447, 0.2156531631512848, 0.18689902651442536, 0.1807578598888009, 0.18542846744746355, 0.1710953000380705, 0.1784334985713909, 0.1915048630074352, 0.18258377618606836, 0.19144757424141878, 0.06982652797172995, 0.07701783079037372, 0.07797591471972287, 0.07519003555021742, 0.08813944189421186, 0.07026384795167628, 0.0796107298663814, 0.08024036183755068, 0.07444678997394549]}, "mutation_prompt": null}
{"id": "627c597b-c8be-4d72-9709-1091c9e9a92d", "solution": "import numpy as np\n\nclass VarianceScaledStochasticOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(1.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n\n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.75  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and enhanced differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                variance_scaling = np.random.uniform(0.5, 1.5)\n                mutant = np.clip(a + F * (b - c) * variance_scaling, self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.1)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.7)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "VarianceScaledStochasticOptimizer", "description": "A variance-scaled stochastic optimizer blending evolutionary tactics with adaptive differential mutation and dynamic selection for efficient optimization.", "configspace": "", "generation": 33, "fitness": 0.34760682775192686, "feedback": "The algorithm VarianceScaledStochasticOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8320117284053242, 0.7930920273388328, 0.8218371245501634, 0.8519612195165316, 0.7971061015057124, 0.8146659420956546, 0.8295495193823852, 0.7937690422359889, 0.8233851768684208, 0.7197608210509515, 0.6736910732850742, 0.6940547421824693, 0.7119093005074717, 0.6764198919317893, 0.7055524071098864, 0.7098336331949242, 0.6567710556734985, 0.7178218260751541, 0.14617123481478989, 0.3154092534456643, 0.3741072587636205, 0.2121264905150535, 0.20340994818055147, 0.4070435927751709, 0.3109235741374381, 0.4387779238663778, 0.4050151594173622, 0.20365073127726108, 0.19014333669890016, 0.29994746803434047, 0.14021584856666724, 0.29015582764595227, 0.31777461107609295, 0.24222764109565498, 0.1398049877899461, 0.2764483227804452, 0.9731689720341501, 0.9853379493477945, 0.9831262357145273, 0.9720208653913815, 0.9659257381322919, 0.9723468183107647, 0.9821570651558111, 0.9661614528171925, 0.9648092890495843, 0.5458529504005276, 0.4893326478140032, 0.5420962459714465, 0.5452242381904115, 0.42947804545507684, 0.5338172201148952, 0.5393896475557806, 0.4297833032112577, 0.5669088137274602, 0.6098852741053429, 0.6119573255683045, 0.646952343768433, 0.6745574179794163, 0.6700490020796868, 0.6822817163853927, 0.723207717104071, 0.5975274204979, 0.6894655946946309, 0.2802825099483419, 0.21878863054548514, 0.39253123233194465, 0.2739019945206491, 0.23995746783344485, 0.3994364062302166, 0.2765712417171443, 0.2454715914880321, 0.33338374372964763, 0.17893743126726513, 0.009634194862199408, 0.2156657237109696, 0.4477203798938746, 0.22530109356556927, 0.2430825422696804, 0.2577562365899553, 0.227325009904497, 0.18749232018168394, 0.1785531293960757, 0.10343857927264022, 0.16909042878336022, 0.22619344342404368, 0.07912771575368482, 0.24070430126793585, 0.15772359897648824, 0.09243658338170047, 0.23251635210526866, 0.3569251408074984, 0.2251094518669181, 0.32615184423369714, 0.35316066061571205, 0.18583482287536113, 0.31866220509332677, 0.33498453334004985, 0.2490504529216493, 0.41298738690436343, 0.04025277188951637, 0.031248084033681733, 0.05444461116816801, 0.14500366689614586, 0.06516142651438406, 0.17104645633004034, 0.12160955151357833, 0.07840598140922961, 0.07407992992769663, 0.2437148568693941, 0.17255069973195436, 0.24846446543566514, 0.2454118861441299, 0.19636282657252346, 0.2695207171249583, 0.244088259000251, 0.16015138954663122, 0.2584271596176413, 0.6219240830220638, 0.5604494140624079, 0.6754154094882326, 0.637571981479532, 0.5650706862367119, 0.6341654794489833, 0.6393509090444671, 0.5288835549781595, 0.6427650117926166, 0.11302846798192245, 0.0908562213122388, 0.08877210615901099, 0.10524315518842564, 0.09057124860401089, 0.10789294714504816, 0.1015341122328991, 0.09020389565345721, 0.08832307024407038, 0.1561188625458293, 0.15048754276764031, 0.14656919528658285, 0.14102516216049021, 0.16947732288025186, 0.14771444631720043, 0.1683729054131461, 0.14931003923281883, 0.15497798144901664, 0.39516827055693204, 0.3215395555362588, 0.4417069371152521, 0.3675801621164253, 0.33518525861815274, 0.40855832967008476, 0.4701188084791835, 0.4369920916690212, 0.4450227848425118, 0.26442400324512927, 0.2113141896697458, 0.30369079481656114, 0.2862642779814186, 0.22950216819798797, 0.3000372427246015, 0.2931884792598989, 0.28304429809629106, 0.29914180569437454, 0.20381975972897903, 0.20148133627002784, 0.18755896142995032, 0.18327293554595891, 0.19139689258417614, 0.1865906715993848, 0.1937300805052682, 0.1791303209367907, 0.18682060062781036, 0.20912283262528986, 0.19875416592982043, 0.47899659701233166, 0.41324130453220054, 0.24948880676597585, 0.23997904583689722, 0.40499532925034687, 0.23123412060555792, 0.4178100799311193, 0.16207811174439757, 0.5190140546797573, 0.6889295937173092, 0.18108013587330718, 0.1944440389088582, 0.7725532412495569, 0.1806853059250212, 0.1894635606198749, 0.16115403644818382, 0.16615447685466334, 0.15629784991634987, 0.16645408176380883, 0.190676147998309, 0.18171153667415696, 0.2004202480474292, 0.20815109536300047, 0.19480850290259577, 0.22050931639800442, 0.18771353845379546, 0.1752916082719752, 0.18271592691628424, 0.19537100733335444, 0.18642834361939964, 0.19763120781313892, 0.1762131933550296, 0.1973829010986209, 0.20043220678659535, 0.07907300907568404, 0.07446234591135747, 0.0697667150019593, 0.08696345760199142, 0.0796762696556762, 0.07176430832802194, 0.08246225397367657, 0.07044977885292425, 0.07351059944216798]}, "mutation_prompt": null}
{"id": "3b368d5a-d6a3-451d-98f3-dc3fb711a46e", "solution": "import numpy as np\n\nclass RefinedProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(3.0 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Slightly increased DE scaling factor for enhanced mutation\n        CR = 0.85  # Increased crossover probability for better exploration\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.6, 1.1)  # More flexible adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.65, 0.95)  # More flexible adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * np.random.uniform(0.5, 0.7))\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "RefinedProbabilisticAdaptiveHybridOptimizer", "description": "A refined probability-based adaptive hybrid optimizer with enhanced exploration and exploitation balance through dynamic strategy adjustments.", "configspace": "", "generation": 34, "fitness": 0.4000729083018221, "feedback": "The algorithm RefinedProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7709021033497554, 0.8735678183277997, 0.8264450591494101, 0.7991386472872546, 0.870123790629274, 0.8235258844771948, 0.788563428259222, 0.8414955581019206, 0.8271502652679246, 0.6745369391424159, 0.7722747449529258, 0.6931465867976253, 0.6496630848724966, 0.7498570467924639, 0.6637689402445405, 0.6865865195970627, 0.73451524352319, 0.6835057520122844, 0.14019828052181404, 0.3721165992816071, 0.32355412104195613, 0.35641398398140056, 0.33752395690331927, 0.3202447164504516, 0.24948775423218605, 0.4074141323903798, 0.3808061112356339, 0.32908354709737997, 0.1399874255711675, 0.37132868481625436, 0.24721606114795702, 0.3056832179923997, 0.27423225418259844, 0.1284607427586012, 0.27406517836318434, 0.33846406896346826, 0.9691928208511411, 0.9713744781794837, 0.9791280961752571, 0.9854970044786817, 0.963060003665099, 0.9688860584275791, 0.9805424326455011, 0.9657876881131351, 0.979301845773326, 0.5432074136446559, 0.5893743167722205, 0.5375504338371062, 0.47234418325553684, 0.5865648917290711, 0.5525684614126053, 0.48183312842421133, 0.5839430462789104, 0.5328837291694795, 0.7022239012853021, 0.7836077661137767, 0.6618817489141808, 0.6704286255256519, 0.8179518971260107, 0.7262987234932203, 0.7272671942527011, 0.760686588623894, 0.7058252559722844, 0.4054215663105484, 0.5199216346805651, 0.3328585921903039, 0.40402791573846575, 0.46579324745331385, 0.12010418592457717, 0.3536392455644808, 0.4733034638050684, 0.39782860800533404, 0.3195749287371865, 0.3519116077907558, 0.17933478806950587, 0.39014410197520044, 0.4783795818821135, 0.4682075915656416, 0.3393108507585384, 0.23882758929289005, 0.29380052763339704, 0.22340234189176733, 0.3521626299882571, 0.3032021930412271, 0.15987366620082644, 0.3616052740036175, 0.20797934659529305, 0.2132700231434551, 0.27147345108188403, 0.21287792916384407, 0.37210689003347275, 0.45606765332350563, 0.37838627964896876, 0.3034025117690189, 0.48761376379434496, 0.3107174384486274, 0.4024851466702568, 0.5358989089766897, 0.41364881230001393, 0.07600020973235111, 0.11620824922328865, 0.10859251997316255, 0.15858993337177185, 0.24183964389753032, 0.15324260463553308, 0.13922295359973247, 0.240193221319162, 0.09928776331493061, 0.2524880963476229, 0.28415284985383016, 0.2691401819838817, 0.27193602904916203, 0.32301671874950455, 0.3063584380618798, 0.24952638467524735, 0.29203750649351246, 0.27179685296799705, 0.584229938741814, 0.6939478010960503, 0.6875283107656533, 0.5903542598576152, 0.6879413815853095, 0.6675191647466967, 0.5650479690403114, 0.7212597164742709, 0.6760525337462813, 0.1042622003875715, 0.17226562859542371, 0.13985834707743305, 0.10645942632353711, 0.11343853843073681, 0.08456489269013379, 0.12085539394167977, 0.1062623567012061, 0.0990121461143022, 0.14072747492456306, 0.11720225522682703, 0.1774923315126956, 0.1722606769615238, 0.15770837920387204, 0.14343328610858042, 0.14322054616925928, 0.1415145655433816, 0.37680702943066957, 0.36562349923843085, 0.427442265578723, 0.40923288118690593, 0.37890911654562665, 0.48994438988472944, 0.3936887299265244, 0.4124471161235288, 0.4867405165947857, 0.4689034758916394, 0.3004436011147469, 0.36250751233649303, 0.28022330429563813, 0.2706041158711079, 0.3137062055511741, 0.2459377088269561, 0.2927501123704149, 0.36500679620487264, 0.32246968828641953, 0.18453472929660975, 0.19611604289897944, 0.18560022900305084, 0.15649093995838126, 0.18696829564630313, 0.20371057736598064, 0.18045158567884612, 0.20589436252312143, 0.1869292896140169, 0.1933022574883032, 0.21105305940277208, 0.38702456187076506, 0.3184664051250581, 0.35909337705482336, 0.38412235463532607, 0.2238646745789482, 0.4687610542083074, 0.23458722247534602, 0.20113140213125702, 0.17832143462740446, 0.1654363664516152, 0.6848236939348531, 0.5978856687928183, 0.7114576378905728, 0.17682216410238394, 0.7523372956190448, 0.7814194852540302, 0.7085902225917883, 0.15102503998826577, 0.7274570665561285, 0.5058329002589622, 0.6645703984372091, 0.19370483287609408, 0.19490368577541406, 0.8258287237342057, 0.6975845968747323, 0.19606385669888682, 0.1752426057009101, 0.18665178644308733, 0.16079168736658978, 0.16961657704583977, 0.2250184386381584, 0.19056124621960557, 0.1672413366786637, 0.19016784284142496, 0.07776437058518937, 0.07761605908025626, 0.06760961150125788, 0.07993074125962174, 0.0832029518537225, 0.07568987813893002, 0.07888214389215242, 0.08875382707334933, 0.08457758166849905]}, "mutation_prompt": null}
{"id": "3310d2ce-a398-4cb7-9a16-4c8a8731fe7e", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer combining evolutionary strategies with differential evolution and adaptive population dynamics for robust optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8882618092741813, 0.829182044780998, 0.8610499892064126, 0.8860672888600784, 0.8497892624077474, 0.8568544710138344, 0.8827839553377691, 0.8447332944770616, 0.8566070684950713, 0.8136255532868154, 0.7365055706409713, 0.7531697291868006, 0.800552865395084, 0.73954571840588, 0.7492828120372013, 0.8166446882528984, 0.760235123508034, 0.7586193024188106, 0.13783213059376176, 0.3468626938086081, 0.6039352394239013, 0.5403394278626681, 0.3868593530664918, 0.439146204247862, 0.5172031815989693, 0.3933832194614454, 0.501547223903948, 0.15671731366968122, 0.13947198605299094, 0.3742683441997391, 0.13587244849754931, 0.1331466841365031, 0.46208939290785644, 0.1587838554797063, 0.12343544019416441, 0.49699449656364114, 0.963978727658187, 0.977173733535758, 0.9807624472179383, 0.9699521028578815, 0.9841417337388083, 0.9787561683905639, 0.9788014501290754, 0.9473640827898129, 0.9714761082144242, 0.6746321929141335, 0.6235019242244924, 0.5945279322612524, 0.6910090259054971, 0.6106718722850978, 0.5650212132381787, 0.689207491869011, 0.6442234250575412, 0.543877043680057, 0.8476063130638523, 0.7999471967673868, 0.5787679066608846, 0.838824510188956, 0.8260262498485814, 0.7507964748172186, 0.8651675140818017, 0.8070031109094138, 0.6754739948500335, 0.6147647784141852, 0.4229391179598081, 0.21428535914283475, 0.12965886557991868, 0.5152964251861405, 0.28267494328250087, 0.25821885749668305, 0.5087009802422158, 0.3552145555804568, 0.11898021494747901, 0.3539063328767946, 0.1605005678151128, 0.16837396323295106, 0.5127307942442694, 0.3325267063023809, 0.27414568046285515, 0.49431350745791147, 0.3846755465250158, 0.5050459564357026, 0.4604003836681171, 0.1552595836134999, 0.49020287338840207, 0.4035899555275041, 0.1689480848010726, 0.5839168975564963, 0.543229142487669, 0.21106570916867728, 0.6647247008289272, 0.5908940568134999, 0.29425470324285463, 0.6278376630050826, 0.6134456061308942, 0.2241619720345721, 0.6660785792357446, 0.6522643138160658, 0.32799904770964416, 0.0902964133486368, 0.1562209582062336, 0.058257060442464925, 0.40496692005049095, 0.2758869290445706, 0.07362059717192349, 0.22197647915570073, 0.24662785389647257, 0.12430111133136179, 0.4546018961901098, 0.3824472674845073, 0.24718004979828323, 0.5295328064736091, 0.3971107050785766, 0.24665584618784386, 0.3542601268885882, 0.05611232785236531, 0.22048088299036517, 0.8016260441972363, 0.7234519616082478, 0.6413597488818221, 0.7898741758713639, 0.751930478578601, 0.6596184987667619, 0.8212238071918924, 0.7398801181862478, 0.6763925317259811, 0.12045573167821899, 0.11063953682944627, 0.11154599609955462, 0.09830150135406979, 0.09539403892802856, 0.09528609416819767, 0.09436164549388448, 0.11145109008158327, 0.0925654487465426, 0.2572110432393042, 0.14754692938299463, 0.19083463997692962, 0.1486426991642975, 0.1600763262440763, 0.1693597451956086, 0.17573809606978685, 0.19883908763919833, 0.13130091749729544, 0.5710459748680342, 0.5165488116844719, 0.4344742845260373, 0.5830106237936813, 0.4456955139442704, 0.4604099637260439, 0.625976616044059, 0.5833555720421328, 0.5113997675694357, 0.37711568701630427, 0.3312875182696915, 0.2605532844718407, 0.3829487624979654, 0.33490878495752874, 0.26382654051170007, 0.48147793471107403, 0.41587842215988213, 0.3189279646986095, 0.19811971996963995, 0.1912969982142141, 0.19368907780371736, 0.18572378550633306, 0.18912017390648062, 0.20302969260439307, 0.2162838419390335, 0.18333954260740404, 0.18821258339367508, 0.5763709809022803, 0.33401540419554154, 0.39523241889259186, 0.7117491544517767, 0.20632807258234553, 0.2154237898851411, 0.2821553451957334, 0.19597258617823832, 0.4476154762795336, 0.20209510796950936, 0.16362560254843428, 0.15045504449239255, 0.8451740998386034, 0.8064337687601139, 0.687948541978866, 0.8201113687969195, 0.15777106603551472, 0.5125783452934345, 0.2067346336377135, 0.8180824339586369, 0.5040373642304616, 0.8492972367999032, 0.20121043684208173, 0.199129969303394, 0.1538281572075041, 0.20518013637189403, 0.20340075168121674, 0.17026804202018286, 0.18272037475040892, 0.1822616484854157, 0.21358477907744222, 0.1934029092520535, 0.20341563423359943, 0.18425748503122907, 0.1930840221409098, 0.19160193588857577, 0.08321300819551347, 0.07772183880765315, 0.07375765783814581, 0.08548465904670632, 0.08115410705450321, 0.08134977688084633, 0.07774551428698873, 0.0754391923825497, 0.08300930480387614]}, "mutation_prompt": null}
{"id": "1c34b56b-8903-4370-9773-4172078ee2c7", "solution": "import numpy as np\n\nclass AdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(3.0 * np.log(dim + 1))  # Increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.7  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Adjusted adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.5, 0.9)  # Adjusted adaptive CR range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "AdaptiveHybridOptimizer", "description": "An adaptive hybrid optimizer that refines its evolutionary strategy with dynamically adjusted population and improved diversity management for enhanced performance.", "configspace": "", "generation": 36, "fitness": 0.349010206930438, "feedback": "The algorithm AdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7709970323227839, 0.7687332654606509, 0.7981274733066563, 0.8098733641901553, 0.777764720627498, 0.8288247857822837, 0.7724951815986987, 0.7846299765592314, 0.8220558604870006, 0.6765805503305823, 0.6678532340307148, 0.6990081282257962, 0.6764266722402841, 0.6650193472263848, 0.7032587437367549, 0.6692381478579333, 0.673906047474379, 0.6989982264808331, 0.3449934441781044, 0.318214821209477, 0.41004915316573676, 0.39845548126064256, 0.39946529526496855, 0.4752888900368559, 0.139312389864931, 0.13918740384338513, 0.4537120335784517, 0.29642980367587224, 0.37156438808008785, 0.42881907732663216, 0.3373387109235053, 0.132825441077152, 0.14742559527492793, 0.12036197508128565, 0.3452987587764268, 0.162851427840904, 0.9716067216635159, 0.975057555911113, 0.9772569721778853, 0.9865586249116185, 0.9677676301559249, 0.9651342609136143, 0.9814065434583141, 0.9804448259051175, 0.9712113300517992, 0.5593573884712384, 0.5138746726965994, 0.5020311498978087, 0.532105295244786, 0.5096665708015555, 0.5148196455498838, 0.5503222383392694, 0.525255003429421, 0.4924093169513504, 0.7387140646043087, 0.6538957490747432, 0.532576464444806, 0.7003687040396432, 0.7298583634495941, 0.6533627779315153, 0.714718345841246, 0.6695674978265749, 0.5719801957245673, 0.23519541147003464, 0.42017573800900265, 0.2656422932997661, 0.2651599533355379, 0.2755339468053797, 0.24656548214295648, 0.4287153079588747, 0.28722961343511166, 0.22354897344697622, 0.021515509616171435, 0.009732963539996309, 0.21180732038829686, 0.25683540758069523, 0.34903263749376867, 0.23356676630531148, 0.23308292161192146, 0.2982401523815613, 0.23189280821650626, 0.2929699909115763, 0.27710573452323983, 0.029143150463706857, 0.0005758015528281035, 0.2026310487615136, 0.04220836946601669, 0.20727276519701865, 0.20654428278772408, 0.04448558830189964, 0.33603849985398715, 0.2943440908615771, 0.13094669600284836, 0.33632633803133527, 0.28015064888114716, 0.15138936978503548, 0.38015360733978976, 0.3804572729846798, 0.17312538612527384, 0.07628191207665935, 0.1401213244929248, 0.02166455628070485, 0.10469259078708215, 0.06916803806162775, 0.02853655230935659, 0.05945850792906948, 0.09669191138637712, 0.05673340378231917, 0.24409005454243882, 0.24064707944819885, 0.14274458982234228, 0.2576802148143368, 0.2797999185300555, 0.18576335296547597, 0.23991655263315725, 0.2423796691469231, 0.14327171088626578, 0.6132687993971159, 0.6209884402643226, 0.5267668816765821, 0.6047623672261938, 0.5914040779855465, 0.5427100729759422, 0.60747365306711, 0.6048657494668408, 0.5342132049641253, 0.10717712223973486, 0.10223570970042128, 0.10183177467407334, 0.12014983960214509, 0.11406338871286092, 0.09282236810157374, 0.09221523756587247, 0.09305642862764985, 0.10040400727630971, 0.13507690341844758, 0.1717444956872527, 0.14603874106782988, 0.25144653478815515, 0.2361251890872219, 0.1897548406749031, 0.14300185890985873, 0.1845697977069325, 0.13069337540106085, 0.37252552937578143, 0.3521155760870516, 0.33516017826690436, 0.3748991282410141, 0.4097626737209977, 0.3351177611669095, 0.4607674177351544, 0.4533478491142059, 0.4408646971689554, 0.30585770402954937, 0.2784380417629798, 0.2129928599084061, 0.26660494180220695, 0.2922586282522409, 0.22006671789165344, 0.32267723913619983, 0.2819468398351834, 0.29173049433624687, 0.1885388683439615, 0.16756540753587068, 0.19976500899889382, 0.1761368384255384, 0.17061641141611472, 0.18333925923429795, 0.20354923403403713, 0.16056634931117564, 0.19551416626505147, 0.25819533164583686, 0.3645805304378198, 0.33311803019745123, 0.26736296481413424, 0.20847064534605886, 0.3825664653390002, 0.36253109443979614, 0.3678238992912649, 0.2101078824442313, 0.16591869390130654, 0.16799376965616908, 0.4163997515369515, 0.6197986917338676, 0.1604474731074893, 0.43306292445563843, 0.18389608686701286, 0.20083857982027153, 0.46528513515546943, 0.6918201082204953, 0.6713640901247956, 0.16002946315517352, 0.19974782636386057, 0.19837333865579243, 0.1683722196387022, 0.2093665852769897, 0.2064181457720502, 0.48038205663999567, 0.1850565446142044, 0.1883332871909701, 0.202964437349739, 0.18971697178122426, 0.18312728436188763, 0.18153569371738787, 0.18167389576748494, 0.21438718935731882, 0.18710660533496426, 0.07513827244000404, 0.07147730490345272, 0.07653450838925402, 0.07040381557026032, 0.07787705963048208, 0.08309485627618618, 0.07157449882782763, 0.07447375843244386, 0.09017370069906161]}, "mutation_prompt": null}
{"id": "ea86428f-0661-4054-9464-1c6966eca49b", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer combining evolutionary strategies with differential evolution and adaptive population dynamics for robust optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8882618092741813, 0.829182044780998, 0.8610499892064126, 0.8860672888600784, 0.8497892624077474, 0.8568544710138344, 0.8827839553377691, 0.8447332944770616, 0.8566070684950713, 0.8136255532868154, 0.7365055706409713, 0.7531697291868006, 0.800552865395084, 0.73954571840588, 0.7492828120372013, 0.8166446882528984, 0.760235123508034, 0.7586193024188106, 0.13783213059376176, 0.3468626938086081, 0.6039352394239013, 0.5403394278626681, 0.3868593530664918, 0.439146204247862, 0.5172031815989693, 0.3933832194614454, 0.501547223903948, 0.15671731366968122, 0.13947198605299094, 0.3742683441997391, 0.13587244849754931, 0.1331466841365031, 0.46208939290785644, 0.1587838554797063, 0.12343544019416441, 0.49699449656364114, 0.963978727658187, 0.977173733535758, 0.9807624472179383, 0.9699521028578815, 0.9841417337388083, 0.9787561683905639, 0.9788014501290754, 0.9473640827898129, 0.9714761082144242, 0.6746321929141335, 0.6235019242244924, 0.5945279322612524, 0.6910090259054971, 0.6106718722850978, 0.5650212132381787, 0.689207491869011, 0.6442234250575412, 0.543877043680057, 0.8476063130638523, 0.7999471967673868, 0.5787679066608846, 0.838824510188956, 0.8260262498485814, 0.7507964748172186, 0.8651675140818017, 0.8070031109094138, 0.6754739948500335, 0.6147647784141852, 0.4229391179598081, 0.21428535914283475, 0.12965886557991868, 0.5152964251861405, 0.28267494328250087, 0.25821885749668305, 0.5087009802422158, 0.3552145555804568, 0.11898021494747901, 0.3539063328767946, 0.1605005678151128, 0.16837396323295106, 0.5127307942442694, 0.3325267063023809, 0.27414568046285515, 0.49431350745791147, 0.3846755465250158, 0.5050459564357026, 0.4604003836681171, 0.1552595836134999, 0.49020287338840207, 0.4035899555275041, 0.1689480848010726, 0.5839168975564963, 0.543229142487669, 0.21106570916867728, 0.6647247008289272, 0.5908940568134999, 0.29425470324285463, 0.6278376630050826, 0.6134456061308942, 0.2241619720345721, 0.6660785792357446, 0.6522643138160658, 0.32799904770964416, 0.0902964133486368, 0.1562209582062336, 0.058257060442464925, 0.40496692005049095, 0.2758869290445706, 0.07362059717192349, 0.22197647915570073, 0.24662785389647257, 0.12430111133136179, 0.4546018961901098, 0.3824472674845073, 0.24718004979828323, 0.5295328064736091, 0.3971107050785766, 0.24665584618784386, 0.3542601268885882, 0.05611232785236531, 0.22048088299036517, 0.8016260441972363, 0.7234519616082478, 0.6413597488818221, 0.7898741758713639, 0.751930478578601, 0.6596184987667619, 0.8212238071918924, 0.7398801181862478, 0.6763925317259811, 0.12045573167821899, 0.11063953682944627, 0.11154599609955462, 0.09830150135406979, 0.09539403892802856, 0.09528609416819767, 0.09436164549388448, 0.11145109008158327, 0.0925654487465426, 0.2572110432393042, 0.14754692938299463, 0.19083463997692962, 0.1486426991642975, 0.1600763262440763, 0.1693597451956086, 0.17573809606978685, 0.19883908763919833, 0.13130091749729544, 0.5710459748680342, 0.5165488116844719, 0.4344742845260373, 0.5830106237936813, 0.4456955139442704, 0.4604099637260439, 0.625976616044059, 0.5833555720421328, 0.5113997675694357, 0.37711568701630427, 0.3312875182696915, 0.2605532844718407, 0.3829487624979654, 0.33490878495752874, 0.26382654051170007, 0.48147793471107403, 0.41587842215988213, 0.3189279646986095, 0.19811971996963995, 0.1912969982142141, 0.19368907780371736, 0.18572378550633306, 0.18912017390648062, 0.20302969260439307, 0.2162838419390335, 0.18333954260740404, 0.18821258339367508, 0.5763709809022803, 0.33401540419554154, 0.39523241889259186, 0.7117491544517767, 0.20632807258234553, 0.2154237898851411, 0.2821553451957334, 0.19597258617823832, 0.4476154762795336, 0.20209510796950936, 0.16362560254843428, 0.15045504449239255, 0.8451740998386034, 0.8064337687601139, 0.687948541978866, 0.8201113687969195, 0.15777106603551472, 0.5125783452934345, 0.2067346336377135, 0.8180824339586369, 0.5040373642304616, 0.8492972367999032, 0.20121043684208173, 0.199129969303394, 0.1538281572075041, 0.20518013637189403, 0.20340075168121674, 0.17026804202018286, 0.18272037475040892, 0.1822616484854157, 0.21358477907744222, 0.1934029092520535, 0.20341563423359943, 0.18425748503122907, 0.1930840221409098, 0.19160193588857577, 0.08321300819551347, 0.07772183880765315, 0.07375765783814581, 0.08548465904670632, 0.08115410705450321, 0.08134977688084633, 0.07774551428698873, 0.0754391923825497, 0.08300930480387614]}, "mutation_prompt": null}
{"id": "d3a49a47-029d-459c-86ee-edc432624525", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(2.5 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Slightly increased DE scaling factor\n        CR = 0.85  # Slightly increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.2)  # Adjusted adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 1.0)  # Adjusted adaptive CR range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Slightly earlier dynamic reduction trigger\n                new_population_size = max(int(self.initial_population_size * 0.5), 5)  # Ensure a minimum population\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedAdaptiveHybridOptimizer", "description": "An enhanced adaptive hybrid optimizer utilizing probabilistic adjustments and competitive evolution strategies for improved performance across diverse optimization tasks.", "configspace": "", "generation": 38, "fitness": 0.3258238209373024, "feedback": "The algorithm EnhancedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.713736537221491, 0.8395950411090716, 0.7618990690386681, 0.728137795474215, 0.8586923459284191, 0.7587681768277232, 0.7327531926501174, 0.8459363627594079, 0.7584443928059275, 0.578049607154463, 0.6983998383527577, 0.6233178809695785, 0.5780043868310596, 0.7222591965066751, 0.5848694026334706, 0.5502954827520998, 0.7162440242022481, 0.5967475952550145, 0.2918410770312183, 0.3114797839463639, 0.26318018848280755, 0.1903481643375904, 0.32722698370737124, 0.15061762707063775, 0.38573161817013135, 0.3246103024192938, 0.3237604697779993, 0.10934545958012076, 0.24357225413863803, 0.1360352466553002, 0.12836259825443086, 0.312328064896644, 0.17937954377660226, 0.1309867082232331, 0.14390636816610236, 0.1312760148100921, 0.9863590703676995, 0.9872799396340689, 0.9555369161042822, 0.9707014078075817, 0.9787141723830741, 0.9603640681580318, 0.955551296559904, 0.9442872751054211, 0.9722046159112432, 0.3933821481761439, 0.5085839493287594, 0.43358881198809573, 0.4104515886341201, 0.5445323084143743, 0.4065404374135466, 0.39192792989120695, 0.5192985661413352, 0.08719306381164593, 0.4979918545549301, 0.6728764176299384, 0.5772279527874249, 0.5079406935623199, 0.6964268183800508, 0.5259408036145858, 0.5109755669162557, 0.6899288420435963, 0.5571356412742178, 0.21611635257417272, 0.2789251612985547, 0.29005196573563186, 0.2529760205168232, 0.28094968251051244, 0.2376467537526803, 0.2419821683030534, 0.3489735100667728, 0.24500759325571475, 0.020714504258925626, 0.19207451964757116, 0.05084671875300051, 0.1870077318639538, 0.2528494793760129, 0.34803777720015905, 0.2538830073848427, 0.2883832915900155, 0.29715527802336095, 0.10403864118864714, 0.16756634608450527, 0.08784181762746335, 0.10619011033885473, 0.14426145180299876, 0.05430918861131773, 0.09469880333881064, 0.12080660340555538, 0.10164665429412612, 0.2694591253973546, 0.24542543228415148, 0.24625894182009755, 0.14399859028072226, 0.27542087823645023, 0.2356845173884331, 0.25679772235517107, 0.2753497983626134, 0.28245476258710867, 0.04568064879576672, 0.05957564964613171, 0.03489742157936748, 0.04943709290623011, 0.11692739381613415, 0.05844031478647971, 0.06714880746436391, 0.15352084714121428, 0.05366866295851991, 0.1812707739815126, 0.17451274771419034, 0.1837568701701614, 0.2069172876332006, 0.2516970855295251, 0.2047294050119206, 0.1874786255868709, 0.2237508691925425, 0.19658576498927616, 0.5594719874053484, 0.6161118852456358, 0.5887545761468013, 0.5558595470784921, 0.6252729345499147, 0.5552214766726762, 0.5472761482789888, 0.6046052154107127, 0.5139055209579205, 0.08584048041051029, 0.10140764301344729, 0.10715272204229698, 0.09073468468975465, 0.08496338427036532, 0.0959274280087542, 0.0887739545373617, 0.10765207358583939, 0.08228686835647936, 0.22924389364925934, 0.15686827174974838, 0.20701486626064414, 0.3306093135541214, 0.1664811106652796, 0.16966412980937762, 0.1403192648638193, 0.1367741970914509, 0.13706384304240293, 0.29744797670259826, 0.32858180546351823, 0.295829132762916, 0.31622632802610784, 0.37349444542642996, 0.3023451313854708, 0.3352998533823909, 0.4330786324612922, 0.3818809008435098, 0.21936439628550453, 0.2405945364379659, 0.24999204060931024, 0.20285831190123726, 0.26691984718990425, 0.23160895609202148, 0.25765052223294704, 0.2776699487916209, 0.24270301294052976, 0.1813227485002583, 0.17000203378840828, 0.19913159304304218, 0.19226161481803938, 0.18426104362666706, 0.16589933350718844, 0.17687585144713414, 0.2110591249229311, 0.20315879877510556, 0.28538318893052905, 0.19487079426149057, 0.18161698354867706, 0.1903591996247883, 0.24180534334949533, 0.18615848127582257, 0.19418830928158293, 0.20142221207883582, 0.22638751207608365, 0.1642354992100894, 0.17739786960599035, 0.7749194003450134, 0.5907292694159815, 0.6934376012221415, 0.7128384927540518, 0.48750521326429186, 0.4404754310901484, 0.45205861801339986, 0.5551252449679878, 0.19720907876147098, 0.4617618239550867, 0.18702112651595604, 0.1874676817684361, 0.5268593557167391, 0.20002906869991832, 0.1924878252183012, 0.20632010531064882, 0.20607624397320745, 0.19905533567950873, 0.1831662994783837, 0.17019150482442524, 0.18623906064478957, 0.17621081188522147, 0.1672400272037179, 0.18957245115787003, 0.1828429620445582, 0.0621068141526655, 0.07856845070903651, 0.076840537166743, 0.0656196735819935, 0.0875075292360642, 0.07274524998280818, 0.0778998728232364, 0.07387810457177058, 0.07047019143651245]}, "mutation_prompt": null}
{"id": "c0a15cc6-3a54-488d-af7a-b1ee9c59a4ac", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer combining evolutionary strategies with differential evolution and adaptive population dynamics for robust optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8882618092741813, 0.829182044780998, 0.8610499892064126, 0.8860672888600784, 0.8497892624077474, 0.8568544710138344, 0.8827839553377691, 0.8447332944770616, 0.8566070684950713, 0.8136255532868154, 0.7365055706409713, 0.7531697291868006, 0.800552865395084, 0.73954571840588, 0.7492828120372013, 0.8166446882528984, 0.760235123508034, 0.7586193024188106, 0.13783213059376176, 0.3468626938086081, 0.6039352394239013, 0.5403394278626681, 0.3868593530664918, 0.439146204247862, 0.5172031815989693, 0.3933832194614454, 0.501547223903948, 0.15671731366968122, 0.13947198605299094, 0.3742683441997391, 0.13587244849754931, 0.1331466841365031, 0.46208939290785644, 0.1587838554797063, 0.12343544019416441, 0.49699449656364114, 0.963978727658187, 0.977173733535758, 0.9807624472179383, 0.9699521028578815, 0.9841417337388083, 0.9787561683905639, 0.9788014501290754, 0.9473640827898129, 0.9714761082144242, 0.6746321929141335, 0.6235019242244924, 0.5945279322612524, 0.6910090259054971, 0.6106718722850978, 0.5650212132381787, 0.689207491869011, 0.6442234250575412, 0.543877043680057, 0.8476063130638523, 0.7999471967673868, 0.5787679066608846, 0.838824510188956, 0.8260262498485814, 0.7507964748172186, 0.8651675140818017, 0.8070031109094138, 0.6754739948500335, 0.6147647784141852, 0.4229391179598081, 0.21428535914283475, 0.12965886557991868, 0.5152964251861405, 0.28267494328250087, 0.25821885749668305, 0.5087009802422158, 0.3552145555804568, 0.11898021494747901, 0.3539063328767946, 0.1605005678151128, 0.16837396323295106, 0.5127307942442694, 0.3325267063023809, 0.27414568046285515, 0.49431350745791147, 0.3846755465250158, 0.5050459564357026, 0.4604003836681171, 0.1552595836134999, 0.49020287338840207, 0.4035899555275041, 0.1689480848010726, 0.5839168975564963, 0.543229142487669, 0.21106570916867728, 0.6647247008289272, 0.5908940568134999, 0.29425470324285463, 0.6278376630050826, 0.6134456061308942, 0.2241619720345721, 0.6660785792357446, 0.6522643138160658, 0.32799904770964416, 0.0902964133486368, 0.1562209582062336, 0.058257060442464925, 0.40496692005049095, 0.2758869290445706, 0.07362059717192349, 0.22197647915570073, 0.24662785389647257, 0.12430111133136179, 0.4546018961901098, 0.3824472674845073, 0.24718004979828323, 0.5295328064736091, 0.3971107050785766, 0.24665584618784386, 0.3542601268885882, 0.05611232785236531, 0.22048088299036517, 0.8016260441972363, 0.7234519616082478, 0.6413597488818221, 0.7898741758713639, 0.751930478578601, 0.6596184987667619, 0.8212238071918924, 0.7398801181862478, 0.6763925317259811, 0.12045573167821899, 0.11063953682944627, 0.11154599609955462, 0.09830150135406979, 0.09539403892802856, 0.09528609416819767, 0.09436164549388448, 0.11145109008158327, 0.0925654487465426, 0.2572110432393042, 0.14754692938299463, 0.19083463997692962, 0.1486426991642975, 0.1600763262440763, 0.1693597451956086, 0.17573809606978685, 0.19883908763919833, 0.13130091749729544, 0.5710459748680342, 0.5165488116844719, 0.4344742845260373, 0.5830106237936813, 0.4456955139442704, 0.4604099637260439, 0.625976616044059, 0.5833555720421328, 0.5113997675694357, 0.37711568701630427, 0.3312875182696915, 0.2605532844718407, 0.3829487624979654, 0.33490878495752874, 0.26382654051170007, 0.48147793471107403, 0.41587842215988213, 0.3189279646986095, 0.19811971996963995, 0.1912969982142141, 0.19368907780371736, 0.18572378550633306, 0.18912017390648062, 0.20302969260439307, 0.2162838419390335, 0.18333954260740404, 0.18821258339367508, 0.5763709809022803, 0.33401540419554154, 0.39523241889259186, 0.7117491544517767, 0.20632807258234553, 0.2154237898851411, 0.2821553451957334, 0.19597258617823832, 0.4476154762795336, 0.20209510796950936, 0.16362560254843428, 0.15045504449239255, 0.8451740998386034, 0.8064337687601139, 0.687948541978866, 0.8201113687969195, 0.15777106603551472, 0.5125783452934345, 0.2067346336377135, 0.8180824339586369, 0.5040373642304616, 0.8492972367999032, 0.20121043684208173, 0.199129969303394, 0.1538281572075041, 0.20518013637189403, 0.20340075168121674, 0.17026804202018286, 0.18272037475040892, 0.1822616484854157, 0.21358477907744222, 0.1934029092520535, 0.20341563423359943, 0.18425748503122907, 0.1930840221409098, 0.19160193588857577, 0.08321300819551347, 0.07772183880765315, 0.07375765783814581, 0.08548465904670632, 0.08115410705450321, 0.08134977688084633, 0.07774551428698873, 0.0754391923825497, 0.08300930480387614]}, "mutation_prompt": null}
{"id": "a9a3a392-e6a0-4919-b28a-537fc897d9da", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(2.5 * np.sqrt(dim))  # Increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Refined DE scaling factor\n        CR = 0.7  # Refined crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.5, 1.2)  # Adjusted adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.5, 0.9)  # Adjusted adaptive CR\n\n            # Stochastic population resizing\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * (0.5 + np.random.rand() * 0.2))  # Dynamic factor\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedAdaptiveHybridOptimizer", "description": "An enhanced adaptive hybrid optimizer incorporating stochastic population resizing and strategic mutation strategies for efficient exploration and exploitation.", "configspace": "", "generation": 40, "fitness": 0.30641813758003705, "feedback": "The algorithm EnhancedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8399859016755742, 0.6702283913886597, 0.6892544759261665, 0.8534045843244837, 0.6639986950255257, 0.7047341639640091, 0.8423679778033812, 0.7224026055288153, 0.7067935236215854, 0.737712772950593, 0.47625090309621987, 0.5357926390689515, 0.7398633740581227, 0.5066649779589245, 0.516884043373349, 0.7554039762287666, 0.5117478385310373, 0.5479575288296559, 0.3922165448601199, 0.29788303732465604, 0.3356885542730814, 0.15845280843985488, 0.251746089507237, 0.36543737907746165, 0.3389282086308789, 0.27657481403450723, 0.35097080730067487, 0.30982924578735216, 0.11934165051372725, 0.32925522774144544, 0.15232038040228868, 0.22604722785581244, 0.3330022872137911, 0.37354319230835176, 0.1617571441037844, 0.30501585902777273, 0.9692976598309396, 0.9731470975730645, 0.9810223952240399, 0.9660579502781651, 0.983665053361044, 0.9719698050424287, 0.9655740821363558, 0.9698252480756078, 0.9749185698770545, 0.5617046344218739, 0.26407101085559204, 0.305573258364951, 0.5620202370677836, 0.35872033414618265, 0.32876718347104683, 0.5357703412730582, 0.30956343344834736, 0.3006761206075189, 0.7899442344912578, 0.44569635438382005, 0.2909302737791143, 0.8015254538184867, 0.46811444616214803, 0.3576590571714522, 0.8122794833053881, 0.45346727291193833, 0.3705111586579859, 0.19462012461016298, 0.18348750327444385, 0.18823630515738332, 0.23585927538292573, 0.14378916426889432, 0.1529651816585883, 0.21033710100278036, 0.15691734689641212, 0.1598875691076651, 0.25080462249959845, 0.17008421431704246, 0.00936667005084435, 0.16997039160396565, 0.1333764077505497, 0.1634093638109516, 0.24383472970363995, 0.10426007538894988, 0.11552007056972502, 0.16114774764800566, 0.09653150529132637, 0.012824449833326979, 0.2062153172890453, 0.02382268915969632, 9.999999999998899e-05, 0.246773273819902, 0.0505206524060372, 0.032849820172413446, 0.3301086346177583, 0.15756360335574204, 0.10482653253019525, 0.358244215772469, 0.13747676504163586, 0.07185514429754436, 0.4251325378431119, 0.194548683236904, 0.10972124398960881, 0.10354279452118331, 0.03922979942672211, 0.013468220773568795, 0.15295577415134798, 0.05501255887486245, 0.0172777532406857, 0.13950286603571183, 0.07553324322906452, 0.027099294428791443, 0.24253903962431722, 0.13552216314656396, 0.11074767413505304, 0.24547307053610767, 0.1346854890654562, 0.1118463935872065, 0.23384287968960638, 0.14288720280645995, 0.09490803954336657, 0.5906099265158279, 0.49737704772482305, 0.4425566766862019, 0.5928911911800505, 0.4602032986712531, 0.47556990924157294, 0.657706791396034, 0.4830734208841878, 0.44873135374528084, 0.10986961747130386, 0.086354389525089, 0.07839638732189746, 0.11025699282613399, 0.08572483555404853, 0.08161239622388494, 0.10079869731884572, 0.08095891866058424, 0.08668025710497695, 0.13981553690616033, 0.15353311671393277, 0.19865856887527744, 0.12409914300413238, 0.15594147494178412, 0.13943305332951872, 0.15111864679234754, 0.13570002138882142, 0.12957083507070888, 0.3903710087904446, 0.3075074282781809, 0.26165336644173465, 0.38740381748865627, 0.2620037622209218, 0.22409775321772796, 0.47987843464689717, 0.3295282172822389, 0.28864065080506585, 0.26055187279934766, 0.1902789736034114, 0.1823366987782693, 0.3220955393297815, 0.2152046564753749, 0.16035831397109446, 0.33912555054850013, 0.23071633674971348, 0.1851614492800665, 0.2065550382815029, 0.1882827970683314, 0.17149591185960922, 0.1853254519044405, 0.17141210271124985, 0.17960082239970776, 0.18905797697664883, 0.20351374792038934, 0.17126322876707178, 0.2270543137533565, 0.18314377450516828, 0.1927304894163988, 0.40625333668386243, 0.18774472980641355, 0.19821826912514584, 0.21292530571793955, 0.31225637286048413, 0.19429297047372618, 0.20318553724406208, 0.1856248262339958, 0.4288437625437932, 0.8525845814969579, 0.44909188019675783, 0.33392969812994033, 0.18275886661227136, 0.4974748412147336, 0.16997908504302628, 0.16247732297415118, 0.45095797584137254, 0.1952861859804983, 0.7809097784132729, 0.15374969804980243, 0.21001236929428713, 0.20350657455771792, 0.6135241447526139, 0.20040285932475432, 0.18808714711711905, 0.18336493751838356, 0.20645537491749377, 0.19765892316412925, 0.18829700110104086, 0.17348779967667438, 0.1903906381821393, 0.18841028196975207, 0.18527178338254402, 0.0790899989390147, 0.06354383477741377, 0.06626063225404488, 0.07056544943549692, 0.06850927665895601, 0.08315109811943089, 0.07992649343233638, 0.07166961720286669, 0.07760029385301137]}, "mutation_prompt": null}
{"id": "3ec4b977-01ff-47ad-9beb-ca2f2dfc3ba4", "solution": "import numpy as np\n\nclass AdaptiveDynamicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(3.0 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Slightly increased DE scaling factor\n        CR = 0.85  # Slightly increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Slightly different adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.95)  # Slightly different adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Slightly different dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.7)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "AdaptiveDynamicOptimizer", "description": "A refined adaptive optimization strategy blending evolutionary tactics with dynamic mutation and crossover adjustments for enhanced performance.", "configspace": "", "generation": 41, "fitness": 0.38557307471243846, "feedback": "The algorithm AdaptiveDynamicOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7744674206331137, 0.8548168146405214, 0.8236193203909986, 0.8012738281992529, 0.8586232033937934, 0.8433484214183582, 0.7867362058410805, 0.8608189082466895, 0.825938413783768, 0.6833272091734128, 0.7606920704230486, 0.6922423257289125, 0.6809611609083928, 0.747891793097605, 0.6675877374948517, 0.6772645608508343, 0.7671350990436636, 0.7228800131998283, 0.3169630979041316, 0.3007641634330639, 0.2615639725489265, 0.13584033389182637, 0.25623952512531867, 0.3207272249893298, 0.21630955686660724, 0.2191373677841768, 0.38857951232262744, 0.2004335336728864, 0.1319227000525539, 0.14846415906744714, 0.26854765482735554, 0.14364723007951474, 0.1892095361350361, 0.199211624226161, 0.2860270874500932, 0.12937062244128827, 0.9787466816844184, 0.9782107393577023, 0.977716377122025, 0.9843562205495394, 0.9696421982149979, 0.9634068275521802, 0.9592512765076188, 0.9661331215713286, 0.9632385392559789, 0.49356244097727886, 0.6486888501575218, 0.5246384424276889, 0.4706495217035521, 0.6347430837351549, 0.5834582674673598, 0.5263935495664116, 0.6025357543124297, 0.08796317913925578, 0.6238849201929156, 0.7606295348672092, 0.6279115423382486, 0.6409905448866011, 0.8220958648218085, 0.7524081218540607, 0.6545205385847315, 0.8484040222417748, 0.667172931039433, 0.3521455154122315, 0.3068446509003676, 0.39095010277513176, 0.346637373576958, 0.4986348606971849, 0.4660340209383834, 0.40472630007916877, 0.5695141603021694, 0.48865628854903054, 0.021399831441203387, 0.3229117491454484, 0.31794886477279416, 0.34686455340776756, 0.43517663417486196, 0.3635748496500012, 0.3232495590033283, 0.3171725553021718, 0.33878201389279616, 0.23528670690477926, 0.3690605822556986, 0.24133189775259545, 0.20903796899160976, 0.2892515531295279, 0.2596652431772707, 0.2078738800158515, 0.33674379359037265, 0.2699099555178842, 0.3253921105772284, 0.5159754243382422, 0.4263196998643839, 0.376788035546997, 0.45315005649030826, 0.37624351656095767, 0.4779242249010427, 0.5201741438639398, 0.4970932727181733, 0.046379603653794566, 0.11697971274367869, 0.11969561427786357, 0.11696508255573712, 0.20304727675839318, 0.09333559056161844, 0.0631295771841407, 0.1784753656047815, 0.1371075802761501, 0.274734779348632, 0.3318251374111323, 0.2564766046845779, 0.2294775139556594, 0.3673258967604699, 0.2930989307720817, 0.21394798133164783, 0.28483842454098274, 0.25502204489722025, 0.6281741404377438, 0.7390805087750767, 0.6777966648134581, 0.574788401647067, 0.7165386931237467, 0.6993111686697822, 0.61238082466308, 0.7240673378098683, 0.682734412103077, 0.10398115711898392, 0.12192528024245297, 0.09908961194801724, 0.09813539395804927, 0.09581686829744596, 0.0889326725554298, 0.09353396584473872, 0.09497322072905212, 0.10845754578725586, 0.1646421739638021, 0.18117169134551747, 0.1344620631579324, 0.1389454638420763, 0.14308650054460959, 0.1685878779581531, 0.2008888639237102, 0.15157053384694175, 0.175012344736434, 0.3380113489487435, 0.47991797988641116, 0.37288906921573917, 0.3443022621558314, 0.41073266359066496, 0.37040339694091695, 0.42274572636080754, 0.49592519520948186, 0.4296554814496091, 0.24336105943429343, 0.3187916425196867, 0.2774028221958038, 0.28207933603454627, 0.31338124802336187, 0.2631457596669372, 0.2557284722868086, 0.43251182151359757, 0.27093458068935683, 0.18645681642507184, 0.1891868946177484, 0.19987956713998412, 0.17883088279030013, 0.1944428296393529, 0.20523386178069136, 0.17682279186623362, 0.18898895956776018, 0.19615283444424636, 0.3188990024047945, 0.2926849852643456, 0.3918602161394472, 0.41002852055871364, 0.19750501624343275, 0.1904783525847974, 0.2953465930473076, 0.33584234575749794, 0.2657396667724681, 0.7681030540542536, 0.16137800997074825, 0.746840844331776, 0.6302671430070695, 0.18245806983330604, 0.19036751644064354, 0.5245010103716463, 0.17866515561262242, 0.7660466547432353, 0.19706315233002858, 0.2033981379699028, 0.6414757285191179, 0.5636449227197825, 0.15405733815140643, 0.5561636619875461, 0.20784559640760258, 0.7019980055167974, 0.20949182157382207, 0.18670473756391726, 0.17704088703235743, 0.17116689828810971, 0.16120162772773894, 0.1906396234129336, 0.17311474473925026, 0.1892187342604288, 0.18124583762452917, 0.1839246347061284, 0.07751301899000662, 0.08372555899450651, 0.07657035152659941, 0.07727382390786264, 0.07771730646235064, 0.08162618132926414, 0.07573975749689366, 0.07371252659648331, 0.07325150972362715]}, "mutation_prompt": null}
{"id": "9376bc71-4b49-434a-83b0-790f5478f89b", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer combining evolutionary strategies with differential evolution and adaptive population dynamics for robust optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8882618092741813, 0.829182044780998, 0.8610499892064126, 0.8860672888600784, 0.8497892624077474, 0.8568544710138344, 0.8827839553377691, 0.8447332944770616, 0.8566070684950713, 0.8136255532868154, 0.7365055706409713, 0.7531697291868006, 0.800552865395084, 0.73954571840588, 0.7492828120372013, 0.8166446882528984, 0.760235123508034, 0.7586193024188106, 0.13783213059376176, 0.3468626938086081, 0.6039352394239013, 0.5403394278626681, 0.3868593530664918, 0.439146204247862, 0.5172031815989693, 0.3933832194614454, 0.501547223903948, 0.15671731366968122, 0.13947198605299094, 0.3742683441997391, 0.13587244849754931, 0.1331466841365031, 0.46208939290785644, 0.1587838554797063, 0.12343544019416441, 0.49699449656364114, 0.963978727658187, 0.977173733535758, 0.9807624472179383, 0.9699521028578815, 0.9841417337388083, 0.9787561683905639, 0.9788014501290754, 0.9473640827898129, 0.9714761082144242, 0.6746321929141335, 0.6235019242244924, 0.5945279322612524, 0.6910090259054971, 0.6106718722850978, 0.5650212132381787, 0.689207491869011, 0.6442234250575412, 0.543877043680057, 0.8476063130638523, 0.7999471967673868, 0.5787679066608846, 0.838824510188956, 0.8260262498485814, 0.7507964748172186, 0.8651675140818017, 0.8070031109094138, 0.6754739948500335, 0.6147647784141852, 0.4229391179598081, 0.21428535914283475, 0.12965886557991868, 0.5152964251861405, 0.28267494328250087, 0.25821885749668305, 0.5087009802422158, 0.3552145555804568, 0.11898021494747901, 0.3539063328767946, 0.1605005678151128, 0.16837396323295106, 0.5127307942442694, 0.3325267063023809, 0.27414568046285515, 0.49431350745791147, 0.3846755465250158, 0.5050459564357026, 0.4604003836681171, 0.1552595836134999, 0.49020287338840207, 0.4035899555275041, 0.1689480848010726, 0.5839168975564963, 0.543229142487669, 0.21106570916867728, 0.6647247008289272, 0.5908940568134999, 0.29425470324285463, 0.6278376630050826, 0.6134456061308942, 0.2241619720345721, 0.6660785792357446, 0.6522643138160658, 0.32799904770964416, 0.0902964133486368, 0.1562209582062336, 0.058257060442464925, 0.40496692005049095, 0.2758869290445706, 0.07362059717192349, 0.22197647915570073, 0.24662785389647257, 0.12430111133136179, 0.4546018961901098, 0.3824472674845073, 0.24718004979828323, 0.5295328064736091, 0.3971107050785766, 0.24665584618784386, 0.3542601268885882, 0.05611232785236531, 0.22048088299036517, 0.8016260441972363, 0.7234519616082478, 0.6413597488818221, 0.7898741758713639, 0.751930478578601, 0.6596184987667619, 0.8212238071918924, 0.7398801181862478, 0.6763925317259811, 0.12045573167821899, 0.11063953682944627, 0.11154599609955462, 0.09830150135406979, 0.09539403892802856, 0.09528609416819767, 0.09436164549388448, 0.11145109008158327, 0.0925654487465426, 0.2572110432393042, 0.14754692938299463, 0.19083463997692962, 0.1486426991642975, 0.1600763262440763, 0.1693597451956086, 0.17573809606978685, 0.19883908763919833, 0.13130091749729544, 0.5710459748680342, 0.5165488116844719, 0.4344742845260373, 0.5830106237936813, 0.4456955139442704, 0.4604099637260439, 0.625976616044059, 0.5833555720421328, 0.5113997675694357, 0.37711568701630427, 0.3312875182696915, 0.2605532844718407, 0.3829487624979654, 0.33490878495752874, 0.26382654051170007, 0.48147793471107403, 0.41587842215988213, 0.3189279646986095, 0.19811971996963995, 0.1912969982142141, 0.19368907780371736, 0.18572378550633306, 0.18912017390648062, 0.20302969260439307, 0.2162838419390335, 0.18333954260740404, 0.18821258339367508, 0.5763709809022803, 0.33401540419554154, 0.39523241889259186, 0.7117491544517767, 0.20632807258234553, 0.2154237898851411, 0.2821553451957334, 0.19597258617823832, 0.4476154762795336, 0.20209510796950936, 0.16362560254843428, 0.15045504449239255, 0.8451740998386034, 0.8064337687601139, 0.687948541978866, 0.8201113687969195, 0.15777106603551472, 0.5125783452934345, 0.2067346336377135, 0.8180824339586369, 0.5040373642304616, 0.8492972367999032, 0.20121043684208173, 0.199129969303394, 0.1538281572075041, 0.20518013637189403, 0.20340075168121674, 0.17026804202018286, 0.18272037475040892, 0.1822616484854157, 0.21358477907744222, 0.1934029092520535, 0.20341563423359943, 0.18425748503122907, 0.1930840221409098, 0.19160193588857577, 0.08321300819551347, 0.07772183880765315, 0.07375765783814581, 0.08548465904670632, 0.08115410705450321, 0.08134977688084633, 0.07774551428698873, 0.0754391923825497, 0.08300930480387614]}, "mutation_prompt": null}
{"id": "2bffcd7d-f161-4a8b-af37-7274c051e25c", "solution": "import numpy as np\n\nclass EnhancedProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(1.5 * np.sqrt(dim))  # Slightly reduced initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n\n        F = 0.9  # Slightly higher DE scaling factor\n        CR = 0.75  # Slightly reduced crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Stochastic tournament selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Tournament selection for mutation\n                candidates = np.random.choice(indices, 5, replace=False)\n                candidates_scores = self.scores[candidates]\n                winner = candidates[np.argmin(candidates_scores)]\n                other_candidates = np.setdiff1d(candidates, winner)\n                a, b = self.population[np.random.choice(other_candidates, 2, replace=False)]\n                mutant = np.clip(winner + F * (a - b), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Reinforced adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.5, 1.2)  # Expanded adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.5, 0.9)  # Expanded adaptive CR range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.8:  # Later dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedProbabilisticAdaptiveHybridOptimizer", "description": "An enhanced probabilistic adaptive hybrid optimizer using stochastic tournament selection and reinforced mutation dynamics for improved global search efficiency.", "configspace": "", "generation": 43, "fitness": 0.08999192612002896, "feedback": "The algorithm EnhancedProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.11.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.1454863921385744, 0.17356889916495477, 0.18639753531352699, 0.10226756020473782, 0.12291004129364813, 0.09697268483388999, 0.09326904102225231, 0.1617695550384366, 0.12210910486957749, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05707233595463512, 0.05230970189683193, 0.06796290089939427, 0.030962040347167763, 0.035817435187201374, 0.029646033263775462, 0.02875078666726627, 0.028669743755968424, 0.03393927624180393, 0.05610496110231922, 0.058586893427565734, 0.039015838083482746, 0.023777085740147585, 0.03559460447313634, 0.023736303302664963, 0.03911258035109111, 0.022221065146486807, 0.03453512213448595, 0.23140898146882438, 0.9702688702990478, 0.9721097438667722, 0.10604656352982489, 0.08838113730244623, 0.0948071581372929, 0.08858861661878059, 0.09920164573158274, 0.07690411064972669, 0.09695912135425822, 0.086905971329856, 0.059088327607559776, 9.999999999998899e-05, 0.07750651216139581, 0.03669140242406632, 0.0007876937622546265, 0.050770964517415806, 0.052883589697575784, 0.1210474611255713, 0.11794556081982721, 0.1251154161869772, 0.10881550090310665, 0.10484055966787797, 0.12027857860058433, 0.10829076419398864, 0.13129201181059946, 0.12024422099923016, 0.03429954251858325, 0.01690347547790061, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010322992893337712, 9.999999999998899e-05, 9.999999999998899e-05, 0.010315748360315569, 9.999999999998899e-05, 0.02760469944744215, 0.0029445323171545246, 9.999999999998899e-05, 0.09046195280868519, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01026737739419914, 0.048456419700408926, 0.03323738934913667, 0.05005478325313506, 0.029706300253138584, 0.03664241484462327, 0.04093080750911671, 0.004402476804149402, 0.011650592597085785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12042122765202967, 0.14631852509646393, 0.20676208350593706, 0.17287311115234283, 0.17258905108895028, 0.17852369005070745, 0.23920489346395657, 0.16569852410360586, 0.1695721764192678, 0.05801278966162937, 0.039372834070323215, 0.03375300901475309, 0.008365910929025944, 0.02390326533387266, 0.03621698113590499, 0.03905393283510239, 0.021239284209005893, 0.039974929655113955, 0.14233278362658397, 0.11392018497632195, 0.12764152575407028, 0.15666308404054308, 0.13173177601392438, 0.11419075081005381, 0.11658779957662335, 0.14462620900270817, 0.1472811976293077, 0.15847324159878629, 0.13325408644758796, 0.1556041940694065, 0.16702614619356715, 0.16039029128371607, 0.1612965869659596, 0.1712713657612559, 0.18261775797704527, 0.165743831945515, 0.08597578793564153, 0.12799643372789338, 0.09768774353745724, 0.13320311021203657, 0.15762900833046223, 0.12092422185046214, 0.10355344107389353, 0.12297868559406455, 0.1081166369508505, 0.16021205841228892, 0.15103830771611815, 0.17446010256177635, 0.1327902045068804, 0.13307839907894192, 0.1372383387101831, 0.1916106364876955, 0.16723683076792173, 0.14487121500400957, 0.15244278459422544, 0.1552200684536238, 0.12012048730235858, 0.13540001141278257, 0.11499872223983587, 0.14635524356791751, 0.13494410196373485, 0.1446036454193541, 0.11348561281291236, 0.1444060425869358, 0.12333708644643249, 0.14484335608609422, 0.1379760769932118, 0.1592042684678141, 0.1298876125878985, 0.1315935780938553, 0.14668773020952885, 0.1506963429357112, 0.13944335164348465, 0.10964694630205363, 0.13272021613412677, 0.0948030891301671, 0.17838713035269516, 0.10286997977058432, 0.18152817847081737, 0.22669259429056388, 0.15590631278133682, 0.16993673717232483, 0.1680367513407386, 0.18101159427236235, 0.17414074363490473, 0.16925791750747654, 0.18913920696116626, 0.17696571175123554, 0.1814547150925413, 0.1766726375996619, 0.04226817032780805, 0.048154598210204846, 0.05101504015157132, 0.06170321327345696, 0.055132042347161625, 0.03175108677330174, 0.05221080098336828, 0.05492465990012374, 0.06042213591736323]}, "mutation_prompt": null}
{"id": "4079b6b7-edea-4379-a236-29f5806b935b", "solution": "import numpy as np\n\nclass StochasticGradientInspiredHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(1.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # DE scaling factor\n        CR = 0.85  # Crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Gradient-inspired adjustment\n                direction = np.random.choice([-1, 1], self.dim)\n                gradient_adjustment = direction * (best_solution - self.population[i]) * 0.05\n                mutant = np.clip(mutant + gradient_adjustment, self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.2)  # Adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.9)  # Adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "StochasticGradientInspiredHybridOptimizer", "description": "Stochastic Gradient-Inspired Hybrid Optimizer utilizing probabilistically adjusted evolutionary dynamics with gradient-like adaptation for enhanced convergence.", "configspace": "", "generation": 44, "fitness": 0.31765396234974214, "feedback": "The algorithm StochasticGradientInspiredHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7795321027951352, 0.7481840815501968, 0.83050999476931, 0.7953480869230359, 0.7667033066482978, 0.8469380158060544, 0.7810505830905367, 0.764885203743678, 0.8133048528039873, 0.6001816664274199, 0.6469826029198498, 0.6945458338283013, 0.5984584111112161, 0.6314148383543788, 0.7141889180498022, 0.6146903977689139, 0.6374486708407738, 0.7498145725214427, 0.2798489510523514, 0.11271340763066728, 0.21070200426798347, 0.12511750151805012, 0.12301897844338894, 0.22302575839851346, 0.15659383796050186, 0.2531038580746541, 0.22645201136817383, 0.1262530169228545, 0.09235264334988458, 0.13363597714246955, 0.14963732834725474, 0.24285056408197547, 0.1137086020422714, 0.10772254736335052, 0.20664612207393995, 0.13124266965983622, 0.8831111320323093, 0.9100451254222011, 0.988810138399875, 0.9628631795870497, 0.9275187776659684, 0.9190750053034891, 0.8983991245769294, 0.9299687111363837, 0.9595138405835019, 0.5037361232179111, 0.480690677154886, 0.585470513516585, 0.48048524745427146, 0.49426789573155205, 0.5604078986127796, 0.47509447165185303, 0.5073952938337142, 0.5193851534322198, 0.5361143612447749, 0.6584442602511615, 0.7313068399953169, 0.5647869177789934, 0.6501325422554953, 0.7046192203590194, 0.5245804584500768, 0.5625454501666078, 0.6663522361344725, 0.20814561913877572, 0.32122795179110586, 0.27542391911695285, 0.22654095667563, 0.3142008244292537, 0.2631313661179354, 0.3196042689644163, 0.32522747382104666, 0.3628755795292492, 0.24385878532430239, 0.19460239841547233, 0.1332081372366154, 0.3834463069532501, 0.3279352317601223, 0.2799698100860748, 0.26909065760622586, 0.21560867721074606, 0.3529277643086828, 0.03773724631973252, 0.052669940151975236, 0.04103177183762741, 0.026717512974542612, 0.03921631187843655, 0.03005079690033363, 0.04306063531142501, 0.04277824129328489, 0.03440063256764192, 0.08898978009731096, 0.1015480881920926, 0.10597507678190343, 0.09465892472850979, 0.07276191969187662, 0.07506126462548834, 0.12374777360112788, 0.11472038443087385, 0.11569522030066581, 9.999999999998899e-05, 0.002409200332461836, 0.025697613319794477, 0.0031085883885825227, 0.013446475586062823, 0.00852919369167926, 0.027757409339143724, 0.02114064497737944, 0.024301250946469732, 0.17508946737690168, 0.1613370131927433, 0.18022252165761288, 0.16927889370877436, 0.16056040717953068, 0.19501048889447203, 0.14419292484441126, 0.1489452177840822, 0.16103027401024406, 0.5708276236379457, 0.5178183307831343, 0.5656511043934369, 0.5496807964292527, 0.5358335304999512, 0.5557483325350062, 0.5620784124733037, 0.54522280166977, 0.5735983143701596, 0.08173138238507616, 0.11198134775535695, 0.09277524859290276, 0.09232234450995946, 0.08133264767079673, 0.1303042125182048, 0.0930087946207736, 0.08482930172528735, 0.0965431479204677, 0.1460299071921769, 0.1450063019886142, 0.18910038118661587, 0.14787268640629625, 0.1478082016754947, 0.16203019252385198, 0.20083994581391673, 0.14570707520676474, 0.14666744106898644, 0.3492121227361219, 0.3776709291858453, 0.4412531990444546, 0.3580400056634566, 0.32506076907202164, 0.4019469061851141, 0.3915532496604779, 0.4396051805613185, 0.44848637379031875, 0.26451571247381767, 0.24608657040267523, 0.2581956881002696, 0.22521189411291365, 0.24692092442803626, 0.2650611649248854, 0.2677916040874737, 0.306427759434711, 0.2910883613433348, 0.17212216904527644, 0.208387064915862, 0.18185810786933576, 0.17559363065923206, 0.17923940667629978, 0.18248869499826836, 0.17112931544980836, 0.1780369142222964, 0.18086803778578764, 0.20748770813197948, 0.35174074705824876, 0.23765444689356496, 0.2375431684277588, 0.2942196268640278, 0.1820795600855566, 0.20174659426420627, 0.17944647576310835, 0.1941400410302695, 0.19569312025144048, 0.7511439341513975, 0.7342757154376701, 0.18138392975983986, 0.5974706065983064, 0.18250877879253513, 0.4195028794069403, 0.17540528046080528, 0.18246464715913757, 0.6163366481357712, 0.16343386386561742, 0.16601600698898544, 0.5964570411400452, 0.18187072939240034, 0.6475563606064004, 0.2085823282668634, 0.7239967027039187, 0.1514145237964889, 0.20221162259294578, 0.18316760777740115, 0.202713550935109, 0.1897607000562449, 0.1857798041232127, 0.18868141976914232, 0.1888045316614525, 0.17812049163822852, 0.17880038079942073, 0.06625785919105998, 0.0683802992022089, 0.07519742441544297, 0.06624361319622107, 0.0809980602241892, 0.07608527263573706, 0.0677042938011505, 0.07732293488422182, 0.07531961982379687]}, "mutation_prompt": null}
{"id": "0a61b1c2-e689-450c-ad82-74cf38ec5c74", "solution": "import numpy as np\n\nclass EnhancedStochasticAdaptiveOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(2.5 * np.sqrt(dim))  # Increased population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n\n        F = 0.9  # Adjusted DE scaling factor for more exploration\n        CR = 0.85  # Adjusted crossover probability for more uniform trials\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.6, 1.0)  # Increased variability in F\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.7, 0.95)  # Increased variability in CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedStochasticAdaptiveOptimizer", "description": "An enhanced adaptive optimizer with stochastic adjustments in mutation and crossover dynamics for better exploration and exploitation.", "configspace": "", "generation": 45, "fitness": 0.3561252504722524, "feedback": "The algorithm EnhancedStochasticAdaptiveOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.23.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8240598715083899, 0.7348961340043207, 0.72307325803645, 0.7967760659736783, 0.7616892347131693, 0.7780396563012569, 0.8073570987299475, 0.7477441059162602, 0.7458076185604536, 0.6619291515473575, 0.6093308589219959, 0.6047061105246299, 0.670274927148071, 0.60044332560453, 0.6061795007045521, 0.6759629475822144, 0.6102091845437443, 0.6033628499376366, 0.289924868383189, 0.19141877222554626, 0.14058394878260583, 0.3088962347187033, 0.22294963041941207, 0.14464459892213377, 0.134222401968506, 0.13433539526352123, 0.29064543168746493, 0.27393640838934674, 0.11543351411421043, 0.20733525559735355, 0.12440660990196084, 0.12802591747670555, 0.3119805467648086, 0.2712246864759331, 0.12624862160362083, 0.1510885035195113, 0.9756830554809168, 0.9869736178624019, 0.961599049987554, 0.9678918500008831, 0.9738509020515614, 0.9218315145900358, 0.9361221798046824, 0.9756579119450091, 0.9395477280684714, 0.5458043028981607, 0.4097657858622654, 0.4946835725444566, 0.514001064778211, 0.4912202788211393, 0.48758433104635857, 0.0878644935681061, 0.5006004637434125, 0.5062984580709188, 0.7608365329170432, 0.6041463794469929, 0.5310376097055518, 0.7301757533526261, 0.623523621582409, 0.5838695302079171, 0.7260094082211703, 0.6186606719622323, 0.6145156596768628, 0.4198042371146232, 0.354859237443227, 0.32685882884632567, 0.3642418835099004, 0.26006234006237583, 0.27482774168051116, 0.38572564297191725, 0.35747995194563087, 0.3356749747168887, 0.33058181175940415, 0.41440715496061464, 0.4316855560836469, 0.40866486307490546, 0.26220129553489935, 0.4112078304914617, 0.387049582230795, 0.3693626388756741, 0.28627335738254045, 0.3256126997366583, 0.19621316319465398, 0.30568392820000345, 0.2000906775055682, 0.1814248941670682, 0.26131863712306735, 0.340512380779167, 0.24443276883860898, 0.27035123460099464, 0.4663993029050334, 0.19388893341580038, 0.3692359707848508, 0.47184557519576475, 0.33569370649351704, 0.22655516020987976, 0.4931122186653406, 0.4019587584909027, 0.3374249300285155, 0.09394646836591403, 0.08143622992521449, 0.10019849990477869, 0.13594318408628092, 0.1404347235048754, 0.1387465333007747, 0.11687108358996812, 0.14261567165301003, 0.09991183595014586, 0.2922749288422286, 0.2193515357366177, 0.28108839686801435, 0.316354800759294, 0.2390320551721089, 0.28631746540765635, 0.29873555027486054, 0.2544343026335383, 0.26365547796477606, 0.66627569390395, 0.5957348298184562, 0.6509343569912989, 0.65100442386071, 0.593686987140756, 0.6190130504902228, 0.6712391657739825, 0.6086237417523309, 0.6008180977824101, 0.10487089926425563, 0.09674749382469239, 0.09436056431627071, 0.09112172970985688, 0.08180865925852632, 0.10732468579489851, 0.10941772484986034, 0.1181851300145994, 0.10580347362455755, 0.12450072951892122, 0.16375329296894892, 0.14003719374373336, 0.16042568306120097, 0.16634427333659407, 0.14506391520091289, 0.16027415828942082, 0.1791250385273162, 0.2101158275465541, 0.4251003043619377, 0.3291163514869856, 0.3298756739534682, 0.38728940708724524, 0.347080429724795, 0.3526587451027764, 0.4531731007403753, 0.40672160958306935, 0.4181874338156921, 0.2902709664157912, 0.2729917395624001, 0.23543886374829148, 0.320323044063039, 0.2654424733498859, 0.2470025633082361, 0.321943721676341, 0.2664516891329861, 0.311319489042595, 0.1856145064781325, 0.1720749277635809, 0.1982347666594494, 0.1883645312397504, 0.17315550477778396, 0.17931583659425487, 0.20347838830422782, 0.17579480561327232, 0.17931562720825656, 0.28919372695302814, 0.19565444061341475, 0.25850310127402665, 0.27129622399670184, 0.19121298240757, 0.4195840474819815, 0.42466703120212423, 0.2923132179985971, 0.18514551705642057, 0.1673910487931327, 0.7257474995554298, 0.16105866051211837, 0.645889506743395, 0.43572375177813016, 0.18108016480583433, 0.5236043428876445, 0.5221906954593978, 0.17303542369412117, 0.16541338083378776, 0.1930530929534381, 0.16276804512168042, 0.5642054683040962, 0.5188208161678829, 0.5179543398764594, 0.21039339830898585, 0.20722567186848373, 0.20916189956150333, 0.18877990191487237, 0.1858088244622048, 0.1908949773277564, 0.16633528399672337, 0.19339665721360344, 0.19572421024451414, 0.18479594053618498, 0.19423096588620914, 0.1829393610916421, 0.07309424967736, 0.07569322383722832, 0.08760211309576316, 0.07857676635850441, 0.07156147674371027, 0.07170170562523237, 0.07071675670843414, 0.07322201144922835, 0.07037327083677447]}, "mutation_prompt": null}
{"id": "aef3ac1b-e575-4386-992e-9df355b63129", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(1.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # New DE scaling factor\n        CR = 0.75  # New crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates with dynamic adjustment\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Adjusted adaptive F dynamics\n            CR = np.clip(CR * (1 + np.random.uniform(-0.05, 0.05)), 0.5, 0.9)  # Adjusted adaptive CR range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedAdaptiveHybridOptimizer", "description": "An enhanced probability-based optimizer integrating mutation adaptation with evolutionary and differential strategies for improved convergence.", "configspace": "", "generation": 46, "fitness": 0.3531773519987147, "feedback": "The algorithm EnhancedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8393356880884673, 0.8054121578894898, 0.8595878586146266, 0.8504689381127197, 0.8221252260601459, 0.842447186335113, 0.8532990028219489, 0.8296740937212183, 0.854019942408493, 0.7323221250250207, 0.6783288962681968, 0.7347461843455007, 0.703181753076572, 0.6949155993630263, 0.7319294406589913, 0.7329491728917055, 0.7156236233756399, 0.7250783574937629, 0.461285369005882, 0.3235686040170508, 0.4260357925172684, 0.4225301596620531, 0.3545146499741135, 0.4336356492454594, 0.4645214272245983, 0.37672900960165356, 0.4457519113472007, 0.39344812221064673, 0.3187582868341089, 0.15487648940375043, 0.3984531444979088, 0.13528804887119206, 0.43656373356863054, 0.3125777116305226, 0.36551861104119476, 0.3931218770034114, 0.9663539833372778, 0.9666011912512702, 0.9845697691583474, 0.9638944288140813, 0.970824823754328, 0.9784537859506911, 0.9944165577167411, 0.9769158198789054, 0.975814832866098, 0.5336823307335878, 0.49731448684479984, 0.5117737979495451, 0.5081663334302128, 0.4790652870783172, 0.5303429938947135, 0.5014530149341867, 0.5456322489817449, 0.4880960297224648, 0.6767672082794538, 0.6030170599206878, 0.5128918578968483, 0.6947919900265893, 0.7754158871562576, 0.5504619172852954, 0.6133669393484513, 0.8065192284657677, 0.6816935073752413, 0.23441538331449951, 0.2317450002372512, 0.3091721962586751, 0.2061944610758234, 0.24027272802669863, 0.24577698972907058, 0.18546173957029155, 0.24238959425627793, 0.2447403594688089, 0.24619415836643843, 0.23806588225126757, 0.19553555499219588, 0.23534063995119137, 0.20792289880927572, 0.2399814723447563, 0.20656417532582327, 0.21900361893146758, 0.24964018820014422, 0.07622333526183922, 0.16584724249232208, 0.07960230467657115, 0.07683909510509679, 0.10753876116632344, 0.05881067330335277, 0.08606347003531467, 0.14005965640862617, 0.07506187962392574, 0.22865161186167737, 0.2562352069527185, 0.19115041715047676, 0.16849190871795305, 0.29944203018947524, 0.15534679048199107, 0.25841019200050164, 0.3899246534942753, 0.2056004467961534, 0.020111835185327775, 0.07086984071951064, 0.06556592988960219, 0.05362211242552717, 0.10888788250940651, 0.04614300091265322, 0.06936494996775533, 0.048624438133192394, 0.07835503176562575, 0.18390018293442323, 0.2014269783129906, 0.18497120157463698, 0.20376644886107198, 0.21567843055383384, 0.21810898141898172, 0.16539639524941763, 0.18228214333942816, 0.17340435244353325, 0.5622646473738693, 0.584323073807485, 0.595427343061246, 0.5755214086357943, 0.5774588688549245, 0.584121329590033, 0.5505001808931231, 0.5265608210250897, 0.5977322422543982, 0.11012837285872445, 0.10517048151374842, 0.10182047460720822, 0.10005288976016524, 0.09503692244753148, 0.11562385009194964, 0.0875582146264946, 0.10451624977781271, 0.10620067289930069, 0.13720394034488237, 0.16335579373712894, 0.16790098552299149, 0.17036364167740226, 0.15552830784340044, 0.20856403334167872, 0.13111520548659517, 0.2091579486510815, 0.1564149606130273, 0.3581658640579489, 0.3615417649102277, 0.3651870935958401, 0.3729075062342291, 0.35961830915658677, 0.3521643077397488, 0.4652753343316556, 0.4261739434148136, 0.44070946162130276, 0.24911375724245022, 0.2620033209210043, 0.2859713644572256, 0.2628337144429994, 0.22770641834019878, 0.235866390432812, 0.2932633486707591, 0.27928692137810873, 0.28029950707915374, 0.19293481554961822, 0.18167285180910153, 0.17863486774799642, 0.20354767517661665, 0.16714835791872917, 0.17314867910863085, 0.18329025642865848, 0.21528588238451152, 0.2045439620739533, 0.3252575434589471, 0.3129504717878925, 0.49224868926237464, 0.40969711908820916, 0.3390957702224804, 0.39753022414969097, 0.33974251956335744, 0.33407293316222475, 0.33557951357404636, 0.16182543567871377, 0.19488944664520536, 0.5610545855646162, 0.6549520812305502, 0.18285419743447806, 0.1823385658633352, 0.5536365156308927, 0.185102833631951, 0.44770876150491723, 0.6362435189998586, 0.6906838203380394, 0.19931540578035745, 0.46294920694787, 0.19082605580346923, 0.18594480344200692, 0.15189831489038574, 0.20460544511569867, 0.20895880929317467, 0.18442281541863859, 0.19402310130661804, 0.20072431094436793, 0.17143658666159767, 0.18830581591911166, 0.1734890107624486, 0.1842076549610394, 0.18447086466911156, 0.17798703640997415, 0.07322506720747735, 0.08043250666474577, 0.10140482058519629, 0.0776031855905076, 0.07626286202584764, 0.0697096686620362, 0.07878988331142012, 0.08389964273649131, 0.08691406301437732]}, "mutation_prompt": null}
{"id": "5dcffc4a-b5b4-46fe-b2bb-89d5adad9694", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.5 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor for increased exploration\n        CR = 0.75  # Adjusted crossover probability to balance exploration and exploitation\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation with multi-strategy\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                if np.random.rand() < 0.5:\n                    mutant = a + F * (b - c)\n                else:\n                    mutant = a + F * (b - c) + np.random.normal(0, 0.1, self.dim)  # Gaussian perturbation\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer with multi-strategy mutation, utilizing Gaussian perturbations and adaptive population dynamics for enhanced robustness.", "configspace": "", "generation": 47, "fitness": 0.36019541763759166, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8392348961464, 0.7882292036083256, 0.8250559181192162, 0.8038842865951696, 0.8010144801839397, 0.8254303202485818, 0.8242553899684514, 0.8060259059028502, 0.833459861174229, 0.6252428265060397, 0.58290261711029, 0.6232581073396797, 0.6136639058052655, 0.6475261401392732, 0.6595720979507027, 0.6309081846243162, 0.6120369726493253, 0.631377522430941, 0.33413881108774524, 0.23405082794185483, 0.31663904063080806, 0.29009891847485303, 0.3300858727145385, 0.3857530886003757, 0.28865041470197006, 0.259791129984444, 0.3098939773778133, 0.14229533870151967, 0.2009077045031421, 0.20321393248612518, 0.1380322345954108, 0.1658221789610227, 0.1157194066934829, 0.17955970893131923, 0.21875018784315692, 0.1366994602481687, 0.970558415454672, 0.9886239857564428, 0.941178462867865, 0.9803990222240418, 0.978410984471479, 0.951192748521993, 0.9708023074489802, 0.9508152350726852, 0.935349961891104, 0.49634988755428777, 0.5113572333200187, 0.49752502804020104, 0.5361454185899216, 0.4794236905122563, 0.4976184721122128, 0.4375017897507504, 0.42841409498869176, 0.5516773372426984, 0.7477999483791027, 0.7402215242279754, 0.7106005107930247, 0.786682197018407, 0.7362187815307188, 0.7588725107313709, 0.837331057826816, 0.6999171073681592, 0.666704533243183, 0.3055354840287178, 0.18625656212568953, 0.27350713386887726, 0.28784787912023224, 0.19616785981807983, 0.23005333577208698, 0.22246569386605475, 0.26158095779229473, 0.20304948031331582, 0.13279735556135552, 0.2582173685263798, 0.21797129028735585, 0.20258652452491532, 0.23178766147100516, 0.21460071571582096, 0.26319679027204823, 0.31369453568888106, 0.2614654312233565, 0.20877255102668846, 0.13902479369835785, 0.13614128720869378, 0.1968624904300642, 0.14519947571553693, 0.1082348578216148, 0.2669206539098301, 0.1219387833122384, 0.1550796767791096, 0.3474778919198468, 0.2878696687224549, 0.2828530377597398, 0.38373815377405396, 0.22775888281314538, 0.222279798238317, 0.40631320596877296, 0.3320182763055666, 0.22144723298447389, 0.06792098965678783, 0.05737395248616228, 0.052603409842612026, 0.11415984507997967, 0.06349990584998721, 0.10718679434339395, 0.11671625708479083, 0.11047746832627603, 0.12852173681754087, 0.24280920568609454, 0.2096360509141102, 0.2124819721915614, 0.24998777080014611, 0.23160629888153372, 0.24987688651932238, 0.24424083267149377, 0.250944440319505, 0.1972620634796035, 0.6354434544470362, 0.5705753775041713, 0.6376323008057433, 0.6073820051056553, 0.552944726033348, 0.5772224392464551, 0.6166702092656091, 0.6202017175703087, 0.6193689407944598, 0.09945331124421042, 0.09955367504838264, 0.10400209884064193, 0.09280662688154984, 0.12789479906257406, 0.1032681074482763, 0.09098249938295377, 0.09947508731355514, 0.10565004224698626, 0.13857267922734662, 0.15113316990913084, 0.21641047414138126, 0.19011880966308614, 0.13300302804753028, 0.20524636073661828, 0.1847180291673064, 0.29720485567729416, 0.21279218039519743, 0.3742871402530049, 0.3694167878513781, 0.389662137513331, 0.37762416405350874, 0.3903439016626018, 0.4269661635262003, 0.43277456383513413, 0.40596294972394287, 0.4145433240482629, 0.2928632201906839, 0.2931935000226247, 0.306266774389771, 0.28066572456031313, 0.2991638283100655, 0.2729324970096041, 0.3372118568281923, 0.3409554753174654, 0.3300565744061874, 0.20648422717760007, 0.1880441061254684, 0.1949188303055227, 0.20311899675348277, 0.1948153937819045, 0.18956107519849696, 0.19463825241631916, 0.20223377474266058, 0.22578875481445115, 0.44174251795315767, 0.21332230026690524, 0.38238156846814775, 0.25018683870565384, 0.23502402043104065, 0.2741890726918852, 0.3759711065965523, 0.3857336640636797, 0.35438179368813394, 0.16259746056069102, 0.19858527946290572, 0.16309218207798493, 0.7984770416217336, 0.19558465719887763, 0.16000488247947964, 0.18370203272081076, 0.762026809173089, 0.6338545318929805, 0.622310500805382, 0.6902376286667395, 0.16818676555155543, 0.750967059784336, 0.6423917597444412, 0.5998986217144346, 0.20785655109956525, 0.1264528127498339, 0.7466169772762735, 0.19134412473229545, 0.20385115582870283, 0.19566239673345331, 0.18847223932212953, 0.19743153477786668, 0.1836624129552471, 0.18109915784040653, 0.18677029153684943, 0.1829866152801266, 0.08319238799444251, 0.08751909776541744, 0.09708541409148352, 0.07995683267272247, 0.08405249348149157, 0.08569122609431601, 0.07836925175500253, 0.08186324429007585, 0.09231111786083224]}, "mutation_prompt": null}
{"id": "b8ce9e68-830f-4944-bcf7-a7fe310b506b", "solution": "import numpy as np\n\nclass AdaptiveMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(2.5 * np.sqrt(dim))  # Tweaked initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.7  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.4, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.5, 0.9)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "AdaptiveMetaheuristicOptimizer", "description": "An innovative adaptive metaheuristic combining differential evolution and adaptive mutation with dynamic population control for enhanced optimization across diverse functions.", "configspace": "", "generation": 48, "fitness": 0.3609882314126966, "feedback": "The algorithm AdaptiveMetaheuristicOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8386819350183066, 0.8727638953236506, 0.819517460192494, 0.8314730590524286, 0.8786473693641363, 0.8543584807061402, 0.8295728485146696, 0.881256865542974, 0.8382526333149654, 0.7134048815648959, 0.7764417116513556, 0.6944485157281761, 0.7172032887574469, 0.7774903381659815, 0.7133128718008819, 0.7172465128658401, 0.7920884799160659, 0.7396011687742214, 0.4963336754131956, 0.5984582782124395, 0.4276856272909223, 0.5473199869678413, 0.5904075836135598, 0.4786671791813777, 0.4956161499680083, 0.5984271535898182, 0.426902973447986, 0.4246106874925385, 0.17062582452583808, 0.41321109944413925, 0.4454173636444302, 0.5233887915772819, 0.15528967361623003, 0.14765943487921507, 0.1646435019954764, 0.4471422335188123, 0.97030469230029, 0.9896535278131687, 0.9744799941025882, 0.9678282507936969, 0.9531938009617478, 0.9734828115683195, 0.9821121844415128, 0.94293618155199, 0.9769956446277359, 0.5056402977205471, 0.5946738579438535, 0.4938454697323782, 0.5259347002960377, 0.5718827903700519, 0.5518962709141826, 0.5012681996502933, 0.5701655561819547, 0.46697846145576516, 0.547919329431005, 0.6710129969308019, 0.6499950929738797, 0.5863160742573417, 0.6471011171833161, 0.5879906227504037, 0.6296924975556542, 0.6571739816499453, 0.7166231547061158, 0.2139233748289605, 0.19407245512941007, 0.21746308759353883, 0.18847417444410908, 0.18502276312931687, 0.32661235688851453, 0.2168070905418279, 0.3878577012455847, 0.19358599736641202, 0.047676214198398514, 0.18805675048553172, 0.1951209978801831, 0.20142450206990925, 0.19232715848035153, 0.23715641635433726, 0.16424717516123688, 0.1964661229363719, 0.34909626600230415, 0.14283602531500528, 0.08019587526772087, 0.06414982193417695, 0.025546259428484874, 0.02561732288469576, 0.11801652463177648, 0.06781911371662719, 0.18606149334969924, 0.05380806411646377, 0.10942848767111157, 0.31255763388387847, 0.22035065109190266, 0.13080517655211676, 0.181095073307729, 0.21614223844486058, 0.24377611799287502, 0.24336991960416965, 0.37342571684692394, 0.06483693272493274, 0.05951249901892719, 0.08139806449241838, 0.04797691372967605, 0.0915962496211623, 0.11620287485819958, 0.11915218190957144, 0.09646891759568366, 0.06731262409722871, 0.17843375425844876, 0.2862633797715156, 0.26871147759546554, 0.2423004138227951, 0.2570347096456065, 0.2381084484083832, 0.18659350256248863, 0.2331554842607103, 0.1891565266123756, 0.5880818341551864, 0.6862195221162508, 0.6120518037049816, 0.5651660429771956, 0.6162577164774796, 0.5781930228312337, 0.6198774878274075, 0.5987839952283981, 0.587850979171196, 0.1181517514582181, 0.11236207228827311, 0.12171216880136948, 0.09984599922552806, 0.09686040613462155, 0.10634830478048607, 0.09161539957906295, 0.10348367477894771, 0.0919775510223586, 0.19596300596068794, 0.16799302607444255, 0.13393137251169063, 0.1604058576341666, 0.14836686019025402, 0.22171751475379542, 0.14541151432606925, 0.16518144821872627, 0.13235410603698272, 0.3411341309029785, 0.4938138712111738, 0.40518032570165474, 0.374770700220731, 0.44851265983929767, 0.4607165850131498, 0.43241548125807916, 0.5062887205219837, 0.5214730255965422, 0.27534237848233556, 0.30098812122186, 0.2516367944948299, 0.24030850972575424, 0.29630681147238613, 0.30510830197731487, 0.33436128830922995, 0.34317913085165075, 0.32907822411669363, 0.1946399628299067, 0.19729457206508294, 0.2040598400189496, 0.20030003447968825, 0.18908402792108658, 0.2125875026564319, 0.18546016733341608, 0.1906828858090155, 0.20405069342258653, 0.21000064376364658, 0.21107394620003672, 0.46086906258121263, 0.3919228578406939, 0.5389927939790286, 0.49555027927801987, 0.4108570533050616, 0.6652787343065779, 0.5070053881623118, 0.16256423048087176, 0.6452329367384795, 0.170277907291293, 0.1790605534717562, 0.18547805159076503, 0.17890686161036706, 0.17668249797596491, 0.5339763306972374, 0.4932493631904914, 0.20045878048072996, 0.20209957706328263, 0.16049720138891244, 0.19615040985828902, 0.194908697305609, 0.19331537041956193, 0.1989933172575311, 0.49298608089412765, 0.20368331513927362, 0.17825199199320374, 0.1918799368375227, 0.20368329137010655, 0.18401989247240558, 0.1785557199362694, 0.1882418665580008, 0.19417706651660405, 0.1797287838880276, 0.18887440529157606, 0.07706656405709744, 0.0909294611638346, 0.09034688434186611, 0.08733131674093197, 0.08983341213071949, 0.08227165647506118, 0.07799011727948824, 0.08783704808107073, 0.07815297175829206]}, "mutation_prompt": null}
{"id": "a2f6a4fa-07ca-4641-80c5-19640732c68b", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(2.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Adjusted DE scaling factor\n        CR = 0.9  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 0.95)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.9)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.population_size * 0.7)\n                if new_population_size < self.population_size and new_population_size >= 5:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "An adaptive hybrid optimizer with probabilistic strategy adjustments, combining evolutionary dynamics with differential evolution for enhanced exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": 0.32636519006477466, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7780632389432, 0.8577377756493193, 0.774084598739779, 0.784858039134047, 0.8443903237408903, 0.8169880285023159, 0.7944674731989825, 0.8608129352963891, 0.799010787568661, 0.6610711030591137, 0.7116066412751225, 0.6704604216036267, 0.6545160960007017, 0.7145623630926364, 0.6601150633670889, 0.6519851217815165, 0.7288248612484509, 0.6627313032477048, 0.14137263129177824, 0.12446168656831047, 0.2558632197507552, 0.1707634416171977, 0.14593826364525142, 0.22921277765691717, 0.2103491355163042, 0.20765377474123858, 0.1455713861544531, 0.11187568918955171, 0.14161655986927402, 0.1377719821978164, 0.13782833327476873, 0.12748308932947272, 0.13403290837859383, 0.11454349592400759, 0.12415272492793372, 0.14079547265009074, 0.9557337615099977, 0.9446559412334463, 0.9478474022883001, 0.973065260773027, 0.9608224324041891, 0.9741324554144943, 0.9630534484670261, 0.9545385509870626, 0.9844515949410644, 0.40686024348616634, 0.4432756517105859, 0.3883549325546979, 0.4135236577932859, 0.48674210003380847, 0.5376459581175187, 0.4379897858123659, 0.5657664762470709, 0.396513333250054, 0.665098147289477, 0.7002182068978391, 0.32453165287002506, 0.6845812763369274, 0.7407432468902011, 0.6354781397670453, 0.5750662137167273, 0.7238939687056892, 0.7164761687233705, 0.22796899115476044, 0.3354508936545466, 0.18452454564051235, 0.19569571949220232, 0.29462684684574536, 0.23555599281566142, 0.1916017909540455, 0.30498575824324525, 0.33831345284174574, 0.17881456583420274, 0.1477959432870677, 0.05140461183476308, 0.18807111296246748, 0.292903884772038, 0.21062934471135364, 0.19858281024736124, 0.36797872372674245, 0.22536085743215906, 0.09300028275002847, 0.17283270768297443, 0.11355983234809719, 0.10617121607838431, 0.1979814928548369, 0.13812619607583887, 0.12483508692964584, 0.22279586417070318, 0.06489113743511865, 0.17292894910483503, 0.2826722258617054, 0.2285535470790806, 0.13121029972487974, 0.3365028275586125, 0.20868908686300014, 0.24807853113150513, 0.34883423212966014, 0.28197116573426684, 0.08857929111784468, 0.09547346582585248, 0.051400610021122284, 0.06306001406211614, 0.10105022392001595, 0.04036107392892441, 0.055040435636994345, 0.12991265247255956, 0.08084269545486855, 0.17492767385702368, 0.24270533130274996, 0.19175979924714748, 0.21099509026725338, 0.2814366636963055, 0.20037024931843428, 0.1809813123521843, 0.2736017748188134, 0.21123885007941012, 0.5153790176641531, 0.665357650366543, 0.515393314395165, 0.5407756449031904, 0.6225048359579446, 0.5618567845787339, 0.5662759425969431, 0.6234353981164785, 0.579256395226152, 0.0900690209077406, 0.12692061768506868, 0.09531680816923893, 0.10698518007639946, 0.10438288703154686, 0.09685545504928683, 0.09195214345384828, 0.12534585847411495, 0.1011234370102364, 0.14847686413242156, 0.13320120334402707, 0.18611604721854924, 0.14637077360575235, 0.14587889109221575, 0.1487149663906312, 0.13664293039245856, 0.15021048560377148, 0.17993108899641264, 0.32154160236078644, 0.4022380682589496, 0.35907782165439317, 0.35187099626534557, 0.3632556506216883, 0.3550815810818544, 0.36081895303710654, 0.3835251149180483, 0.37898095872427695, 0.23653052899945992, 0.29561087228131666, 0.2681627418732856, 0.26331192604456255, 0.2545927028569912, 0.25691558196995046, 0.26119573267390883, 0.3081028582878985, 0.28216660629401424, 0.1825083151240673, 0.19066258037429473, 0.18776620844155767, 0.19900318247216842, 0.1941989024053884, 0.17964719933626205, 0.18836497954693776, 0.2035589396855807, 0.2061800567212445, 0.19704438065862595, 0.39970282484666664, 0.2470348987462725, 0.20531768377790927, 0.20315828463811947, 0.1920479862233192, 0.23334261944634516, 0.2047440391557258, 0.22851044246314012, 0.16394004066583767, 0.16386131180461783, 0.17064367664304259, 0.18379645486495788, 0.671078946384224, 0.6919107103830942, 0.17076925581879077, 0.4156682153975735, 0.18303040354561417, 0.39049830893866244, 0.5959458443446486, 0.4795656255995473, 0.15397027629101634, 0.29184824198178794, 0.38550495325941925, 0.562289724339152, 0.15327373329387395, 0.21117828812560135, 0.1924917366039801, 0.17596620791237982, 0.18884725526911483, 0.1757781846621943, 0.18096862427477756, 0.18082435824760246, 0.1779683998735938, 0.19242615761357296, 0.19457673068672543, 0.07929220661652558, 0.08673571022428272, 0.07419454236381429, 0.072581125506328, 0.07901651227942907, 0.0731988868943374, 0.08093851437356658, 0.07917489764211516, 0.07435303486089384]}, "mutation_prompt": null}
{"id": "e56df20e-e404-4959-acde-654b3cec484a", "solution": "import numpy as np\n\nclass StochasticAdaptiveOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(1.5 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Slightly increased DE scaling factor\n        CR = 0.75  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.4, 1.2)  # Enhanced adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.65, 0.9)  # Enhanced adaptive CR range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Lowered dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "StochasticAdaptiveOptimizer", "description": "A stochastic adaptive optimizer integrating evolutionary strategies, differential evolution, and adaptive population mechanisms with refined selection probabilities and dynamic parameter tuning for efficient optimization.", "configspace": "", "generation": 50, "fitness": 0.3305317041470214, "feedback": "The algorithm StochasticAdaptiveOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7233301907457933, 0.7687356676285454, 0.7225254525777942, 0.7668848765880238, 0.7990571987067991, 0.7507236181176333, 0.7602723648131022, 0.7864159897733954, 0.7472278937255115, 0.6156011528936672, 0.677470797931051, 0.5874245865701091, 0.6079966801752912, 0.6479560678241169, 0.5830616812469315, 0.6495507683298336, 0.6611664313749279, 0.5904143998153009, 0.23758288055578214, 0.25591333930822313, 0.30173948525058214, 0.21489994407049262, 0.21257708400646957, 0.2841046590148958, 0.13873549276041286, 0.2543299096749073, 0.15232121444530944, 0.12440353181473218, 0.11659668877272211, 0.2161404716160099, 0.2502568145047862, 0.12650527560895242, 0.12991527359958732, 0.1384205991773937, 0.11808526741608671, 0.18386425890425018, 0.9782081066275498, 0.9620939386158281, 0.9808760185710259, 0.9599833180038072, 0.9706391437619987, 0.9683905950268378, 0.9449698300561069, 0.9729025985196045, 0.9736741538041828, 0.482966004956791, 0.4672315202848266, 0.4160162616326646, 0.4732664727419802, 0.5385672908859381, 0.4420835543135542, 0.08695712495670449, 0.5106904757685398, 0.39374503168112995, 0.6939017124091582, 0.6186716089031756, 0.6340108810020247, 0.20200822576351352, 0.6897445319156756, 0.6204432775756497, 0.5966565130061524, 0.6769865077726535, 0.5550428196767145, 0.25440007862852076, 0.3663549115704058, 0.1454896713265924, 0.19379801431762067, 0.37238952250131074, 0.21941358888010143, 0.17947221060875473, 0.34541045460275555, 0.1953951663051423, 0.01622712984451713, 0.01577805362842233, 0.33291439788172306, 0.22777510124010725, 0.3117725061146178, 0.2217274198748851, 0.2544272615879457, 0.26851461347490135, 0.17979245125655618, 0.17900892442889327, 0.21340799851993575, 0.14907569047414015, 0.19957092655121533, 0.18659344434203629, 0.1285983703666972, 0.20724769452171654, 0.2806980009801049, 0.10417296638115514, 0.2789619307046137, 0.3353249667943282, 0.2444289262358016, 0.25221580006820143, 0.32253352668374546, 0.25727173997944763, 0.35940982675040534, 0.3991997206322355, 0.31552221069363506, 0.05498415552155933, 0.11626584517335414, 0.06946350783946997, 0.0552394121258285, 0.14976195374205836, 0.07747564412613195, 0.06111207541689834, 0.15423187460292953, 0.05858173644327713, 0.2125307247134568, 0.23152860775547035, 0.20740106131641933, 0.25119857456718575, 0.30758934619125167, 0.24742460905601005, 0.23895985541539255, 0.2679336419028031, 0.195318032022746, 0.568857619804422, 0.6541916340867764, 0.5341544754879539, 0.6328885316109003, 0.6242848525393421, 0.47395998710009146, 0.5837202752972734, 0.6580012908421764, 0.5725327402870156, 0.0832160567315452, 0.08913400534081717, 0.08409686523945925, 0.09590152625670323, 0.1173417504016967, 0.08853777418091358, 0.08842578626463782, 0.10444391168604994, 0.10371207221365764, 0.20172551035949438, 0.14318050272893035, 0.15542467033691387, 0.16680429126373053, 0.1266400032540449, 0.13602052726536729, 0.24238913889191993, 0.17590322363102628, 0.20462877175026561, 0.357272743161237, 0.4119991223291589, 0.3797892715882647, 0.3598221648851794, 0.4031635463521466, 0.38471468125711517, 0.4376694176432149, 0.4924366179364911, 0.39570512738432007, 0.2474416932135679, 0.2777508780384128, 0.24881142836259207, 0.2582190356734989, 0.26777855065245626, 0.27105502332611897, 0.3188771884069841, 0.3446877951308611, 0.3215132775901397, 0.18097395127948535, 0.19303640510783948, 0.18276635897812044, 0.18094422282923472, 0.17450775075058778, 0.17782708329710661, 0.17637819878080085, 0.18781375750437723, 0.1905706957244564, 0.3338823891180881, 0.3057181401546605, 0.38124752864683387, 0.3470940970018356, 0.3911800525001019, 0.18344937479632495, 0.24773766957532184, 0.25403114893449896, 0.3147765306962187, 0.19993008110659638, 0.1669241479810054, 0.6665277001573489, 0.6647850392254462, 0.17890078626469474, 0.19477334796831036, 0.1732728117986937, 0.1620286578482446, 0.1765299794555194, 0.15993500791557946, 0.16272545571912234, 0.19572052595487432, 0.4424215314252067, 0.5234949146184005, 0.5127721586023934, 0.19479496660478568, 0.20457628638608616, 0.5598427615900121, 0.17330586929150327, 0.1933199474249665, 0.17612091783483697, 0.19188047535670472, 0.18545651055728973, 0.17838642694136908, 0.17758613515190136, 0.22869621874140178, 0.19529225724204602, 0.07810545615932774, 0.07511691824404731, 0.07174991565676447, 0.07242108680810722, 0.07882543151019106, 0.07466384047776842, 0.06986773833864268, 0.07743488145857313, 0.07966979021943188]}, "mutation_prompt": null}
{"id": "f054bea0-992a-4954-b4e6-33e5a778e437", "solution": "import numpy as np\n\nclass ProbabilisticDynamicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(1.5 * np.log(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.75  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.7)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticDynamicOptimizer", "description": "A probabilistic dynamic optimizer integrating adaptive differential evolution with self-organized population control for enhanced optimization.", "configspace": "", "generation": 51, "fitness": 0.3750707095054389, "feedback": "The algorithm ProbabilisticDynamicOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7699033651496858, 0.8033458696194734, 0.8402064749519367, 0.7942566548191887, 0.8094522812265232, 0.8491957029043457, 0.7602753493607247, 0.7816281106178982, 0.8367305929556854, 0.6215160507719839, 0.6688874354973082, 0.755117383206714, 0.5969814146149521, 0.7000353073174694, 0.7355410334496467, 0.6343189252217754, 0.6607398591098659, 0.7660758107138048, 0.3777013917174282, 0.24971603444206025, 0.4563672910595118, 0.379939528703784, 0.23785102287803017, 0.4401118085221606, 0.4202795777984394, 0.2720797334597723, 0.4096639844743527, 0.3434232258360256, 0.1346316788407177, 0.13333548747404678, 0.12494068907157907, 0.2317732857064193, 0.14932270966968297, 0.27972253978648987, 0.13016426916716717, 0.31375375328070343, 0.9749958588527289, 0.9784432629319793, 0.9717086155292664, 0.9874099156749274, 0.9735930346729293, 0.9688184264431899, 0.9799443869582234, 0.9647303661446883, 0.9357775590314721, 0.46530824732461384, 0.5392599074359823, 0.5640691816661904, 0.4614588700765876, 0.47167453597844256, 0.6052360906388139, 0.47517452271749594, 0.5163041750276414, 0.568491320851028, 0.5839777484759381, 0.6678894623355938, 0.6753493569858201, 0.5904474064301584, 0.6145154608483221, 0.7650970898922196, 0.6267678236722787, 0.6754134383407717, 0.732007111666221, 0.3396737980475105, 0.410091055280295, 0.3596763188840577, 0.4189388224291415, 0.36702462172709605, 0.27343468041544694, 0.4151132884001735, 0.3718498007610187, 0.3495292576424628, 0.3383012313160709, 0.009832051413147358, 0.357041878920734, 0.40644663760845456, 0.4144278734662714, 0.27365811784228067, 0.39741172931365387, 0.37316480013377007, 0.3298072932588738, 0.18439538502132768, 0.19741731865345935, 0.1557479226034153, 0.23193759599554042, 0.22548929204737078, 0.18251959757407699, 0.18657166255828606, 0.22134060126209243, 0.12340456783464215, 0.3846504329839652, 0.3724459844432463, 0.37427204392339763, 0.34880191066051536, 0.35327806909018666, 0.28075221163611763, 0.420556097521505, 0.4229194748011743, 0.3645650021311617, 0.06239620248313782, 0.10338153700220032, 0.11377568201243926, 0.12455983408116367, 0.06987325009804168, 0.12487469981076993, 0.11283829369121745, 0.10728127069273452, 0.12698949635710832, 0.2325031561267269, 0.23814541641772013, 0.2223027312795326, 0.2251846098478132, 0.26411970074317836, 0.26121630713142596, 0.2412310806567215, 0.2641644790180737, 0.23075843193381262, 0.5952946141505457, 0.6390856442144206, 0.6187458065443261, 0.599534833064814, 0.6724309222325899, 0.626827792914032, 0.5921525411165434, 0.6439634025279255, 0.6684728552264307, 0.10441249451913392, 0.10724327860850102, 0.10502123906571359, 0.08876520345389949, 0.10999237817121521, 0.10287034384659144, 0.08919931193856667, 0.09159312864690583, 0.09090143724893118, 0.16624789698743137, 0.18896312329266451, 0.17508515037774453, 0.19348937976077418, 0.18268653437811577, 0.22433642517793928, 0.20968185169778375, 0.23759010882408305, 0.15640134282294038, 0.36705045572104633, 0.3473467540039126, 0.40404529791536303, 0.3304238333695525, 0.3357103739151136, 0.39434392439928345, 0.35957353428028904, 0.3971315064111075, 0.47472501422349855, 0.24433853424496488, 0.2666302948653849, 0.2848626409484234, 0.23625534024271522, 0.24532793269465503, 0.271313057574488, 0.2765602236624264, 0.2890108113693092, 0.29035814785530434, 0.17797580798669155, 0.17081489162915042, 0.1842102802839538, 0.18809538725337827, 0.21523031937059733, 0.20174661307744157, 0.1969198127268752, 0.2109128831432998, 0.1952617799273374, 0.24187206660222238, 0.2014579639597044, 0.19304731897035854, 0.18973057054819287, 0.4858638098575525, 0.4593116342145056, 0.20036232465704074, 0.19087270237969134, 0.36777147376549646, 0.6171221054385161, 0.18351263681673202, 0.17241376021171295, 0.6772888244041724, 0.7331533831525111, 0.7239630713899254, 0.699991362341401, 0.5677821006250994, 0.634058638350289, 0.19447278477629149, 0.16776005466546162, 0.2038912721553705, 0.6310546421152575, 0.19703411444302987, 0.6013534423162077, 0.6664228851403731, 0.20888729701668995, 0.21150941301820536, 0.17954452539839316, 0.18431096532627367, 0.1867864662976091, 0.1717881987889246, 0.18452942555946616, 0.1858147067536977, 0.19605678626410283, 0.1787653794057984, 0.19463099179824317, 0.07547311128326983, 0.07258807475316353, 0.08724424248462126, 0.07276384786394607, 0.07938518672914396, 0.08167554805905763, 0.0735581864808813, 0.09753000425993741, 0.08876804144350248]}, "mutation_prompt": null}
{"id": "bd23d1db-1e2d-4b55-804e-cc1954596cc0", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 10 + int(3.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n\n        F = 0.9  # Adjusted DE scaling factor for initial exploration\n        CR = 0.75  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Modified adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)  # Modified adaptive CR range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Revised dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer leveraging evolutionary strategies, differential evolution, and dynamic learning rates for efficient black-box optimization.", "configspace": "", "generation": 52, "fitness": 0.4241743446626008, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8754661684748866, 0.8821674789022711, 0.8877876067664434, 0.8823618558171249, 0.8931023996920449, 0.8856823146525196, 0.8862151472087187, 0.8956773957102714, 0.8739779125506593, 0.8200961387831055, 0.8406299736929259, 0.8015940779615461, 0.8162938091436363, 0.8163662642245968, 0.8052412028330778, 0.8168423689332276, 0.8490261110915969, 0.8178536092673985, 0.6170837957217832, 0.44579327504328614, 0.17416489065713214, 0.5482502895986346, 0.17619862587641, 0.5366780974842887, 0.6060374262493129, 0.5220299201505287, 0.5581856397702798, 0.1701756267528266, 0.14638960184065541, 0.1688968384445434, 0.14272473256528506, 0.13490477335490392, 0.15126913964733535, 0.17006303409717238, 0.1559074621830101, 0.6074003990817023, 0.9809662469622956, 0.9794305506155995, 0.9792950318347206, 0.9837352613776774, 0.9866203208599494, 0.9833646211430485, 0.977081125205869, 0.9862249100411143, 0.9860601680194244, 0.7021598234080093, 0.7230748253949766, 0.6734411965803824, 0.6524990282199601, 0.7249190346091288, 0.6665209582151141, 0.6808494205586826, 0.7435624188866232, 0.6641951481922097, 0.8358049145786255, 0.8173915168802967, 0.7939049220796477, 0.8718759734616297, 0.8802856282283036, 0.7531323775689258, 0.7546750916097135, 0.8489226825044014, 0.8004729201355494, 0.2961202324317934, 0.40720590109856136, 0.4878029037349153, 0.23596901946520554, 0.5452474595068857, 0.2578627071069912, 0.49459828347187973, 0.3550039779175326, 0.45345134689387445, 0.26263987494996544, 0.05504972864083413, 0.4918248588495516, 0.43901624438043696, 0.5636092907461647, 0.5829778378512899, 0.3398987634570865, 0.09536434941269833, 0.5705073913451082, 0.0659504264523525, 0.4490563502650242, 0.09876348061914164, 0.027498280536964015, 0.43334914999860263, 0.19856933807497168, 0.3070852637056629, 0.1308892014109999, 0.2968577805418606, 0.38050292877177705, 0.3128646857952462, 0.3745044790334524, 0.2850649424432531, 0.13938499646980018, 0.38906607035541496, 0.4254471086970786, 0.608312195109181, 0.4623067410352636, 0.091748987081399, 0.1740532371271356, 0.19664756237000802, 0.10428505051526227, 0.20642944137477204, 0.14007336301139872, 0.0850385857035777, 0.196070827278242, 0.1265080821782898, 0.28940556028834286, 0.37244134119239125, 0.3254782369949024, 0.32086640080591833, 0.41480518586941406, 0.34755703757166256, 0.2868569328880335, 0.3540799500911753, 0.28245672750277784, 0.7569317879393866, 0.8099452313928475, 0.7351670406746097, 0.7010341767481574, 0.7550801930676173, 0.704525134819416, 0.6635111162129541, 0.7220633376543686, 0.6854463628112784, 0.09233558397516717, 0.09902746974404797, 0.08945993872470503, 0.09937478789603338, 0.10933917979688501, 0.12279801796731371, 0.10967909488014249, 0.11611231409265743, 0.10496639507483108, 0.14176245875412552, 0.11100015599320834, 0.15970208264243024, 0.1568253940491855, 0.25003870818217455, 0.17815128091622923, 0.1474490624933551, 0.19285842339485626, 0.14661344031261703, 0.4741849367253198, 0.6349591323289634, 0.3781874979602253, 0.3968343984251421, 0.5545845597915278, 0.43501582869664834, 0.47501711929911816, 0.5314349377537673, 0.4801099391682928, 0.3743226381393251, 0.3372672593643218, 0.2711679163515791, 0.2637409305969477, 0.31007268290470913, 0.29236445843991765, 0.39405985924493925, 0.39162304167328876, 0.38456759463673185, 0.2213496939263886, 0.23278242674943217, 0.18435449731145703, 0.19257812074640912, 0.17398899485803665, 0.18417959055909172, 0.186222569529777, 0.19244989048706984, 0.2106794396023991, 0.6624670395583352, 0.5637275032557725, 0.22085624878234467, 0.5688165479419061, 0.2283498718946002, 0.21897889359687728, 0.5645773227029035, 0.4678826212035586, 0.20802178171497976, 0.8262055109320913, 0.8652110209026099, 0.16813860921476498, 0.8565781637039372, 0.16719446326064968, 0.19862910214632734, 0.20594162219921563, 0.16614131190177217, 0.8206312036624415, 0.7170778618425881, 0.16938194208075452, 0.20434500885484919, 0.665048194202901, 0.20158634660819896, 0.2020364123561067, 0.1946456064172628, 0.19728326568141874, 0.19353137354335836, 0.18017666702330226, 0.16844174700865677, 0.17219576002147097, 0.18682036660319157, 0.17183743126936313, 0.19463177165255197, 0.18572753591170887, 0.2018365910837373, 0.17083295166600887, 0.07979573969065512, 0.08596298749081921, 0.07577399253306194, 0.06413036217370405, 0.08091022143822535, 0.07741618995388144, 0.07915876362489849, 0.07915510332065878, 0.08084366719336444]}, "mutation_prompt": null}
{"id": "3d0e08df-c741-48bf-838a-cf2beeb3c519", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(3.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.7  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.5, 1.2)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.55, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.7)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "An adaptive hybrid optimizer leveraging probabilistic selection and dynamic parameter tuning for efficient search and convergence.", "configspace": "", "generation": 53, "fitness": 0.34600818438398556, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7103573745275513, 0.8856095594653525, 0.8134970758430186, 0.7555472196225345, 0.8888468734874068, 0.8085183405527331, 0.7456711455633802, 0.8777494397151309, 0.8199515502424248, 0.5805743287225689, 0.812744029114125, 0.6338333618482546, 0.5876323100985694, 0.8082516254984423, 0.669052542563499, 0.5499551637317328, 0.7866678830112929, 0.6637919840057216, 0.32561288309499536, 0.5714826454310434, 0.41349814425158515, 0.1490826925446559, 0.16323473187428195, 0.37584611312042115, 0.31228560610410694, 0.5410220678733129, 0.39669166349172635, 0.2759076768953561, 0.586382456919222, 0.1530042699452583, 0.1931901269555203, 0.47322131234519915, 0.283096985027546, 0.2803117314811254, 0.15147278510631912, 0.15079853818602373, 0.987372030712081, 0.9808623728799403, 0.9760050992352761, 0.9720072277551248, 0.9890208577981194, 0.9837964672198296, 0.9780925971688006, 0.9725346802973434, 0.9792500445309369, 0.3646236386206816, 0.6364739202330677, 0.41229110200650676, 0.3545918937531626, 0.5726365154609062, 0.44377382942120314, 0.3877050809097289, 0.5906459712988558, 0.4677824589755345, 0.4949389493027778, 0.682250114780054, 0.4504101902040085, 0.6001126792894831, 0.757265271614091, 0.5776590169521449, 0.48033576113886833, 0.6966013579338215, 0.4778991912877275, 0.2571478565018913, 0.18421524742860906, 0.41297571109821807, 0.20535744758054086, 0.2935071901899895, 0.34442933619969696, 0.3230298569331572, 0.3712961738038383, 0.42245237145408565, 0.12050008945902535, 0.29392230010918063, 0.2666280025002655, 0.25214740257600676, 0.2885722728364337, 0.3337459281878924, 0.27134028879268957, 0.2104714158702874, 0.33619006962725584, 0.10009216144473299, 0.10204237169976638, 0.1520634014264277, 0.11467436427429023, 0.20077043541935624, 0.16091224392539294, 0.17038778290798473, 0.11806455714855979, 0.15873560323904334, 0.17470433945670572, 0.2130056924727206, 0.26796113544530553, 0.22910836410431845, 0.22667388951690237, 0.28520222394048067, 0.2798369310473585, 0.3576893144787575, 0.3199718153998209, 0.079083341634269, 0.058687880280492544, 0.1091213423371089, 0.04474191890433321, 0.08568966844531156, 0.0673144742122791, 0.07502654560445421, 0.11800055086744998, 0.0696061620289643, 0.1730850944239699, 0.21052071719513465, 0.1938491954625986, 0.23900420553816015, 0.25454474780577385, 0.19779289288801838, 0.18279835910268116, 0.1974823381230667, 0.21556928076680393, 0.49671580442312613, 0.6713354423197062, 0.6401313014373593, 0.5312925788989276, 0.6188268548306612, 0.6217851084275494, 0.5313022270250902, 0.6352511343234869, 0.6585357242085685, 0.09672305542080961, 0.09556352321445216, 0.10012312674806234, 0.08302063329062803, 0.09990205749288361, 0.11685849468756204, 0.0813160124121578, 0.09679369452033026, 0.10678671419216257, 0.1503338390839255, 0.14795561376206645, 0.1661305991556412, 0.21833896649941487, 0.17227295285919608, 0.19360156038722198, 0.14705831769842315, 0.14391825700963, 0.16542823998029998, 0.2779648994130156, 0.3995406478245326, 0.37462808699195693, 0.32283086565551233, 0.4032300234378602, 0.3208094866457717, 0.30810000898547407, 0.4914102881310727, 0.38133691181863516, 0.20717251023089378, 0.2900528662816426, 0.24420347319976243, 0.22254905406226366, 0.27509065006481226, 0.22379891025060727, 0.25561150447627357, 0.3081572051904433, 0.2530490279642722, 0.18851630291437804, 0.18023124247403188, 0.18587022113095486, 0.1779844095372517, 0.19678455849514231, 0.17122428000961276, 0.1716016395173665, 0.18795878048118175, 0.18982684235609915, 0.30503456982775057, 0.4674292397529892, 0.38628469396098, 0.33228354533341886, 0.3510309844273557, 0.20914324111802574, 0.1966510239117003, 0.2938602105468865, 0.2008356666363985, 0.17300862782508863, 0.1517474138746584, 0.168226904099684, 0.5223365537888198, 0.6642916919341677, 0.5806706245344344, 0.17037345587422892, 0.18496879489937068, 0.18378020476466472, 0.1573694994521384, 0.19726008794839267, 0.573055081357155, 0.19252059259596743, 0.19570973727509722, 0.5871797219607315, 0.1485446916462002, 0.7060187185195415, 0.19520064263837766, 0.18473211892172803, 0.19096725358945488, 0.19186153323238142, 0.20905527380405087, 0.18151550255798699, 0.1879163730251997, 0.19418230827203875, 0.1758181515630266, 0.1831946380294015, 0.07179321986359188, 0.0912005981003835, 0.06733362949286659, 0.07542317499576834, 0.07800348384356381, 0.07140784648252341, 0.07856475908704708, 0.07921781195775002, 0.08085053460834601]}, "mutation_prompt": null}
{"id": "0a870fab-3366-4869-92a6-632ce93b3077", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer combining evolutionary strategies with differential evolution and adaptive population dynamics for robust optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8882618092741813, 0.829182044780998, 0.8610499892064126, 0.8860672888600784, 0.8497892624077474, 0.8568544710138344, 0.8827839553377691, 0.8447332944770616, 0.8566070684950713, 0.8136255532868154, 0.7365055706409713, 0.7531697291868006, 0.800552865395084, 0.73954571840588, 0.7492828120372013, 0.8166446882528984, 0.760235123508034, 0.7586193024188106, 0.13783213059376176, 0.3468626938086081, 0.6039352394239013, 0.5403394278626681, 0.3868593530664918, 0.439146204247862, 0.5172031815989693, 0.3933832194614454, 0.501547223903948, 0.15671731366968122, 0.13947198605299094, 0.3742683441997391, 0.13587244849754931, 0.1331466841365031, 0.46208939290785644, 0.1587838554797063, 0.12343544019416441, 0.49699449656364114, 0.963978727658187, 0.977173733535758, 0.9807624472179383, 0.9699521028578815, 0.9841417337388083, 0.9787561683905639, 0.9788014501290754, 0.9473640827898129, 0.9714761082144242, 0.6746321929141335, 0.6235019242244924, 0.5945279322612524, 0.6910090259054971, 0.6106718722850978, 0.5650212132381787, 0.689207491869011, 0.6442234250575412, 0.543877043680057, 0.8476063130638523, 0.7999471967673868, 0.5787679066608846, 0.838824510188956, 0.8260262498485814, 0.7507964748172186, 0.8651675140818017, 0.8070031109094138, 0.6754739948500335, 0.6147647784141852, 0.4229391179598081, 0.21428535914283475, 0.12965886557991868, 0.5152964251861405, 0.28267494328250087, 0.25821885749668305, 0.5087009802422158, 0.3552145555804568, 0.11898021494747901, 0.3539063328767946, 0.1605005678151128, 0.16837396323295106, 0.5127307942442694, 0.3325267063023809, 0.27414568046285515, 0.49431350745791147, 0.3846755465250158, 0.5050459564357026, 0.4604003836681171, 0.1552595836134999, 0.49020287338840207, 0.4035899555275041, 0.1689480848010726, 0.5839168975564963, 0.543229142487669, 0.21106570916867728, 0.6647247008289272, 0.5908940568134999, 0.29425470324285463, 0.6278376630050826, 0.6134456061308942, 0.2241619720345721, 0.6660785792357446, 0.6522643138160658, 0.32799904770964416, 0.0902964133486368, 0.1562209582062336, 0.058257060442464925, 0.40496692005049095, 0.2758869290445706, 0.07362059717192349, 0.22197647915570073, 0.24662785389647257, 0.12430111133136179, 0.4546018961901098, 0.3824472674845073, 0.24718004979828323, 0.5295328064736091, 0.3971107050785766, 0.24665584618784386, 0.3542601268885882, 0.05611232785236531, 0.22048088299036517, 0.8016260441972363, 0.7234519616082478, 0.6413597488818221, 0.7898741758713639, 0.751930478578601, 0.6596184987667619, 0.8212238071918924, 0.7398801181862478, 0.6763925317259811, 0.12045573167821899, 0.11063953682944627, 0.11154599609955462, 0.09830150135406979, 0.09539403892802856, 0.09528609416819767, 0.09436164549388448, 0.11145109008158327, 0.0925654487465426, 0.2572110432393042, 0.14754692938299463, 0.19083463997692962, 0.1486426991642975, 0.1600763262440763, 0.1693597451956086, 0.17573809606978685, 0.19883908763919833, 0.13130091749729544, 0.5710459748680342, 0.5165488116844719, 0.4344742845260373, 0.5830106237936813, 0.4456955139442704, 0.4604099637260439, 0.625976616044059, 0.5833555720421328, 0.5113997675694357, 0.37711568701630427, 0.3312875182696915, 0.2605532844718407, 0.3829487624979654, 0.33490878495752874, 0.26382654051170007, 0.48147793471107403, 0.41587842215988213, 0.3189279646986095, 0.19811971996963995, 0.1912969982142141, 0.19368907780371736, 0.18572378550633306, 0.18912017390648062, 0.20302969260439307, 0.2162838419390335, 0.18333954260740404, 0.18821258339367508, 0.5763709809022803, 0.33401540419554154, 0.39523241889259186, 0.7117491544517767, 0.20632807258234553, 0.2154237898851411, 0.2821553451957334, 0.19597258617823832, 0.4476154762795336, 0.20209510796950936, 0.16362560254843428, 0.15045504449239255, 0.8451740998386034, 0.8064337687601139, 0.687948541978866, 0.8201113687969195, 0.15777106603551472, 0.5125783452934345, 0.2067346336377135, 0.8180824339586369, 0.5040373642304616, 0.8492972367999032, 0.20121043684208173, 0.199129969303394, 0.1538281572075041, 0.20518013637189403, 0.20340075168121674, 0.17026804202018286, 0.18272037475040892, 0.1822616484854157, 0.21358477907744222, 0.1934029092520535, 0.20341563423359943, 0.18425748503122907, 0.1930840221409098, 0.19160193588857577, 0.08321300819551347, 0.07772183880765315, 0.07375765783814581, 0.08548465904670632, 0.08115410705450321, 0.08134977688084633, 0.07774551428698873, 0.0754391923825497, 0.08300930480387614]}, "mutation_prompt": null}
{"id": "4fd8e0e6-f0d6-4a7d-81fa-2531116305f8", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer combining evolutionary strategies with differential evolution and adaptive population dynamics for robust optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8882618092741813, 0.829182044780998, 0.8610499892064126, 0.8860672888600784, 0.8497892624077474, 0.8568544710138344, 0.8827839553377691, 0.8447332944770616, 0.8566070684950713, 0.8136255532868154, 0.7365055706409713, 0.7531697291868006, 0.800552865395084, 0.73954571840588, 0.7492828120372013, 0.8166446882528984, 0.760235123508034, 0.7586193024188106, 0.13783213059376176, 0.3468626938086081, 0.6039352394239013, 0.5403394278626681, 0.3868593530664918, 0.439146204247862, 0.5172031815989693, 0.3933832194614454, 0.501547223903948, 0.15671731366968122, 0.13947198605299094, 0.3742683441997391, 0.13587244849754931, 0.1331466841365031, 0.46208939290785644, 0.1587838554797063, 0.12343544019416441, 0.49699449656364114, 0.963978727658187, 0.977173733535758, 0.9807624472179383, 0.9699521028578815, 0.9841417337388083, 0.9787561683905639, 0.9788014501290754, 0.9473640827898129, 0.9714761082144242, 0.6746321929141335, 0.6235019242244924, 0.5945279322612524, 0.6910090259054971, 0.6106718722850978, 0.5650212132381787, 0.689207491869011, 0.6442234250575412, 0.543877043680057, 0.8476063130638523, 0.7999471967673868, 0.5787679066608846, 0.838824510188956, 0.8260262498485814, 0.7507964748172186, 0.8651675140818017, 0.8070031109094138, 0.6754739948500335, 0.6147647784141852, 0.4229391179598081, 0.21428535914283475, 0.12965886557991868, 0.5152964251861405, 0.28267494328250087, 0.25821885749668305, 0.5087009802422158, 0.3552145555804568, 0.11898021494747901, 0.3539063328767946, 0.1605005678151128, 0.16837396323295106, 0.5127307942442694, 0.3325267063023809, 0.27414568046285515, 0.49431350745791147, 0.3846755465250158, 0.5050459564357026, 0.4604003836681171, 0.1552595836134999, 0.49020287338840207, 0.4035899555275041, 0.1689480848010726, 0.5839168975564963, 0.543229142487669, 0.21106570916867728, 0.6647247008289272, 0.5908940568134999, 0.29425470324285463, 0.6278376630050826, 0.6134456061308942, 0.2241619720345721, 0.6660785792357446, 0.6522643138160658, 0.32799904770964416, 0.0902964133486368, 0.1562209582062336, 0.058257060442464925, 0.40496692005049095, 0.2758869290445706, 0.07362059717192349, 0.22197647915570073, 0.24662785389647257, 0.12430111133136179, 0.4546018961901098, 0.3824472674845073, 0.24718004979828323, 0.5295328064736091, 0.3971107050785766, 0.24665584618784386, 0.3542601268885882, 0.05611232785236531, 0.22048088299036517, 0.8016260441972363, 0.7234519616082478, 0.6413597488818221, 0.7898741758713639, 0.751930478578601, 0.6596184987667619, 0.8212238071918924, 0.7398801181862478, 0.6763925317259811, 0.12045573167821899, 0.11063953682944627, 0.11154599609955462, 0.09830150135406979, 0.09539403892802856, 0.09528609416819767, 0.09436164549388448, 0.11145109008158327, 0.0925654487465426, 0.2572110432393042, 0.14754692938299463, 0.19083463997692962, 0.1486426991642975, 0.1600763262440763, 0.1693597451956086, 0.17573809606978685, 0.19883908763919833, 0.13130091749729544, 0.5710459748680342, 0.5165488116844719, 0.4344742845260373, 0.5830106237936813, 0.4456955139442704, 0.4604099637260439, 0.625976616044059, 0.5833555720421328, 0.5113997675694357, 0.37711568701630427, 0.3312875182696915, 0.2605532844718407, 0.3829487624979654, 0.33490878495752874, 0.26382654051170007, 0.48147793471107403, 0.41587842215988213, 0.3189279646986095, 0.19811971996963995, 0.1912969982142141, 0.19368907780371736, 0.18572378550633306, 0.18912017390648062, 0.20302969260439307, 0.2162838419390335, 0.18333954260740404, 0.18821258339367508, 0.5763709809022803, 0.33401540419554154, 0.39523241889259186, 0.7117491544517767, 0.20632807258234553, 0.2154237898851411, 0.2821553451957334, 0.19597258617823832, 0.4476154762795336, 0.20209510796950936, 0.16362560254843428, 0.15045504449239255, 0.8451740998386034, 0.8064337687601139, 0.687948541978866, 0.8201113687969195, 0.15777106603551472, 0.5125783452934345, 0.2067346336377135, 0.8180824339586369, 0.5040373642304616, 0.8492972367999032, 0.20121043684208173, 0.199129969303394, 0.1538281572075041, 0.20518013637189403, 0.20340075168121674, 0.17026804202018286, 0.18272037475040892, 0.1822616484854157, 0.21358477907744222, 0.1934029092520535, 0.20341563423359943, 0.18425748503122907, 0.1930840221409098, 0.19160193588857577, 0.08321300819551347, 0.07772183880765315, 0.07375765783814581, 0.08548465904670632, 0.08115410705450321, 0.08134977688084633, 0.07774551428698873, 0.0754391923825497, 0.08300930480387614]}, "mutation_prompt": null}
{"id": "11003b27-950f-4716-b785-9dd21d4deb13", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.5 * np.sqrt(dim))  # Adjusted initial population size for more diversity\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor for stronger mutation\n        CR = 0.75  # Adjusted crossover probability for balance\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.delete(indices, np.where(indices == i))\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.2)  # Enhanced adaptive F for diversity\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)  # Enhanced adaptive CR for stability\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.8:  # Adjusted dynamic reduction threshold for late-stage focus\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedAdaptiveHybridOptimizer", "description": "A diversity-enhanced adaptive hybrid optimizer combining evolutionary strategies with differential evolution and enhanced mutation for improved exploration and exploitation balance.", "configspace": "", "generation": 56, "fitness": 0.3265909229408029, "feedback": "The algorithm EnhancedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7337707935354525, 0.7388329765867574, 0.7876416317546677, 0.7702678503982415, 0.7314191770567896, 0.8170334482651196, 0.7601920643667731, 0.740971232027239, 0.8134661045240418, 0.6221055575250027, 0.5768578271981579, 0.6776008451193687, 0.6457469536146704, 0.5906163741465216, 0.6879508425671357, 0.6215789329939986, 0.5322848308348747, 0.6916825026041886, 0.13859876507258506, 0.23375528028187964, 0.3310498113175758, 0.1230349233330158, 0.2354298151767351, 0.29355104370291807, 0.11897411688040616, 0.11871249841682507, 0.2099255617511947, 0.12460726044215209, 0.23590029525184286, 0.27684496594547003, 0.1171498825082159, 0.13090422877111574, 0.13548547008512835, 0.12387499602500862, 0.12624143772275898, 0.29498299354923174, 0.9694370852904305, 0.9734336409260694, 0.9791098659637688, 0.9670981013361639, 0.9790341148631624, 0.9599430904732283, 0.9640788279158043, 0.9765477880777492, 0.9832290017167855, 0.48609244687151476, 0.41896368776339143, 0.4723550696856439, 0.4475456125748356, 0.3751450668957238, 0.4687700855141912, 0.4643725084560071, 0.40012136324766656, 0.5060948179988525, 0.6617950193036699, 0.47811746046569914, 0.6022598564433901, 0.664178572279121, 0.5927684875672199, 0.6537081615032171, 0.6731805012595982, 0.5854064116385, 0.6945427518353322, 0.2675699176877865, 0.2073775472422691, 0.2934828250800553, 0.3795033035041404, 0.21418260073717155, 0.345003484259896, 0.2968201810890493, 0.25682021836840463, 0.28668688938081, 0.02181653070599532, 0.009852944380806195, 0.05408100375197189, 0.32698905000572387, 0.2610296889029602, 0.254718280729501, 0.3286144200540173, 0.23597399081866244, 0.20558338845563318, 0.1793360929526685, 0.13901451686518662, 0.13849264360852598, 0.24391392618255336, 0.11381613029715631, 0.11607281373057632, 0.22624010906882963, 0.13944752695773932, 0.1264034052295736, 0.32649595453432556, 0.23256113781993515, 0.2293056172356679, 0.3060024148788286, 0.24368109310044284, 0.2730591023714991, 0.3929020325274398, 0.26623886417718645, 0.3075700522039687, 0.09736102074325503, 0.03095735971027247, 0.08043702347972537, 0.1381844843281793, 0.05660756554181712, 0.08641683783310361, 0.1034574639435305, 0.025778348970623144, 0.05780462077184312, 0.1888238286862407, 0.16866399503473872, 0.19763100828249947, 0.23221155039408936, 0.17277510192427947, 0.22722319332883567, 0.2186982447258683, 0.15410106902518006, 0.19870602020331374, 0.5645861730324422, 0.5343610433839592, 0.5796048127125859, 0.6079737307398969, 0.5447900285570029, 0.6167280291083135, 0.5571871900900771, 0.47259874619231, 0.5867118447452639, 0.1181620486634194, 0.08093070526261803, 0.08633002636843534, 0.09859584074393535, 0.10790818818449066, 0.09234802125155217, 0.08871760536534623, 0.0886651490359962, 0.09165376983987494, 0.11707590846818461, 0.20946294348973737, 0.15968341070185232, 0.2165419372622347, 0.2076050868227619, 0.17694210948624844, 0.17132409257319703, 0.2162686236073923, 0.16747675411160634, 0.31565784369959204, 0.28548227374892143, 0.3290610581224318, 0.34317769624948646, 0.29592048791524717, 0.3266240697633621, 0.40607573037528744, 0.3429146146272738, 0.4099468896242322, 0.23310009042259427, 0.20265912847858158, 0.24705775128569407, 0.23941582550523277, 0.21245608052393194, 0.2474092018548535, 0.23823664719240067, 0.2008747707967783, 0.2677558422154497, 0.18482814215374788, 0.1772113032416699, 0.1858811454756858, 0.17208648073900712, 0.17111500640411959, 0.1980224799851682, 0.20236661063941497, 0.18271887926874975, 0.17951088240410285, 0.20032288747383242, 0.2741442417870569, 0.20253437277581132, 0.19671730092881823, 0.186352500489535, 0.38750608888040905, 0.2091183607467837, 0.26156031679890235, 0.22158396418926252, 0.7686220020009297, 0.1645250364892854, 0.19256254432250475, 0.7383381501685777, 0.6283393021908292, 0.18155471681769098, 0.19672138898937863, 0.5879070474079059, 0.19109785255315737, 0.20080044224487448, 0.19818610824349625, 0.1675031195156913, 0.6538022009932145, 0.3571058652464302, 0.47921151826149555, 0.7555101208199827, 0.19541948987630098, 0.12587205936935897, 0.1849660093927089, 0.19470502934548617, 0.1927411184872413, 0.1673709953609095, 0.1535861477586108, 0.17874662921851248, 0.17842051522846125, 0.1640518314144398, 0.2022179840285221, 0.06808073175632001, 0.06544969634256181, 0.08356920600384166, 0.06944254815221174, 0.07466003106372476, 0.0764159632016812, 0.06824066032919907, 0.07149164706674294, 0.07989173392283577]}, "mutation_prompt": null}
{"id": "a1e8fc6f-daf1-4c6b-bb4d-7e0510cad7cd", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(1.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Initial DE scaling factor\n        CR = 0.7  # Initial crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedAdaptiveHybridOptimizer", "description": "An enhanced adaptive hybrid optimizer with probabilistic evolution and adaptive strategy refinement using dynamic population and mutation rate adjustments.", "configspace": "", "generation": 57, "fitness": 0.330569848832756, "feedback": "The algorithm EnhancedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7237509212886618, 0.7788825635151618, 0.7390397603267385, 0.7683684811063172, 0.7791013283571286, 0.7178990094621138, 0.7396322976173796, 0.7748388422243769, 0.7495282420621026, 0.5745829408810568, 0.5987887649601109, 0.5500703617978075, 0.5941575303390523, 0.5938639932578236, 0.5758040151371326, 0.5951222988899947, 0.6208758499516859, 0.5768182853436377, 0.29263834237303976, 0.11975659012004358, 0.32613067798447937, 0.2953822507487044, 0.21762124499433777, 0.31973810429923855, 0.11440367565255782, 0.20593100198004, 0.19301452246292528, 0.11827326571490993, 0.1481988597014502, 0.12973801711215183, 0.12493799026951624, 0.12907252934001612, 0.1142311478124528, 0.11668958529458162, 0.1510716531821763, 0.1276451701742548, 0.9733119704672211, 0.9735547701372645, 0.981150869686444, 0.9647967943972828, 0.9783730776616038, 0.9783157986058527, 0.9542935251340243, 0.9580419707326977, 0.9862497784544055, 0.42995255292583356, 0.4798637125616825, 0.44272148946510015, 0.46334003218762043, 0.4612727711245166, 0.4379417036219746, 0.42679913058650076, 0.5106076037167497, 0.42316926803870847, 0.5709979488410768, 0.6287561173043652, 0.47967947450504167, 0.5757094223535146, 0.6337673041707796, 0.4974614912564249, 0.6164122648323553, 0.6381507201051221, 0.5901656398712976, 0.2743112963897901, 0.3177856789656799, 0.21525265939803717, 0.34471108132766914, 0.31889085746926416, 0.2792772911134118, 0.32138210064887673, 0.3317655310552631, 0.2243390040722928, 0.009583685107738327, 0.1863621636017031, 0.2501177917659686, 0.3513756808478412, 0.2744152885590122, 0.21668140232964417, 0.25501171893342056, 0.2654229462397477, 0.19567626979357455, 0.16906041089287172, 0.19989808306340417, 0.06598991548061728, 0.17291403370674074, 0.15261652921562596, 0.09225226776447748, 0.1660261877844187, 0.19508606454932098, 0.16097423230860874, 0.32839117619054536, 0.3068045756548099, 0.19016023592162667, 0.2751338579315553, 0.2979807350855691, 0.20766504838443423, 0.3367078175962387, 0.322509332631983, 0.2888082997940036, 0.08688736077514136, 0.07889684963278631, 0.05855372175988627, 0.06902776519465492, 0.15232000385154587, 0.0869044690444769, 0.07366376681136588, 0.06955675322175359, 0.04844135688574902, 0.2110352340225473, 0.2184840702949491, 0.1843860018317457, 0.20368236888562363, 0.22200399188175024, 0.2115864453475086, 0.21093298397952098, 0.20999000143187996, 0.1850590425293367, 0.5887867759623471, 0.588716676398201, 0.5305653458021329, 0.5657358919812856, 0.6130141903041894, 0.5349993573277385, 0.5934152161908527, 0.5853406258095933, 0.5450123067670163, 0.10161512909739034, 0.0884659012423854, 0.0901687164886058, 0.08544480330128568, 0.1110917813920842, 0.12730191458398965, 0.0869802754115141, 0.0901999603335516, 0.09172498069837531, 0.5417762049634465, 0.14776091174081651, 0.13335926919477004, 0.13997662642463005, 0.2322474972970775, 0.15425588223666842, 0.1807903898535238, 0.13758800269108162, 0.2163103775874602, 0.32909144374378463, 0.3158319215930153, 0.31497469585430804, 0.31547076735579827, 0.2996677405660959, 0.3304198555810596, 0.3537948093390745, 0.3795216819842844, 0.3931750817548513, 0.2136537276463264, 0.24211975696376498, 0.22990125663690386, 0.22725668730821458, 0.24229417329002212, 0.21592889971323004, 0.2939444085731868, 0.28061083619433413, 0.23098576352679223, 0.20037694929218453, 0.18988326654890741, 0.17772597773705912, 0.17703309766488184, 0.20852305390948567, 0.17893444772377975, 0.19296307343826302, 0.17647873848873186, 0.18505440328359712, 0.25065204531236673, 0.3618207055019187, 0.31040006799280295, 0.1958184328464806, 0.19716826117775677, 0.18235601285741532, 0.2533143196577292, 0.331665363625945, 0.202331592241205, 0.6772593591373728, 0.5442016796655715, 0.7185339781302849, 0.6601710699511989, 0.6273398025189765, 0.17394771669665954, 0.4489728465564191, 0.1778406485312347, 0.49654798817493273, 0.4690735987647796, 0.5441391818148857, 0.2680992112301205, 0.1884950123547341, 0.18597547032054207, 0.19052670153360518, 0.19177789256586497, 0.6128456055140834, 0.20467799759252814, 0.19981703156133612, 0.20304185222156457, 0.22345353147437874, 0.18635591402680152, 0.18260269061704193, 0.20381772920107755, 0.20118749824790427, 0.17698932621963925, 0.1997818107378252, 0.07661740497082903, 0.07344730947166977, 0.0748278935382477, 0.07259643994764009, 0.07502711915930815, 0.07870419113933536, 0.06860475451413872, 0.07462865207407665, 0.07416135225247322]}, "mutation_prompt": null}
{"id": "808b1a83-2d33-4075-b995-f0486b9011d4", "solution": "import numpy as np\n\nclass StochasticElitismHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85\n        CR = 0.8\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i] or np.random.rand() < 0.1:  # Stochastic ranking\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)\n\n            if (self.evaluation_count / self.budget) > 0.6:  # Earlier dynamic reduction\n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    elite_indices = np.argsort(self.scores)[:new_population_size]  # Adaptive elitism\n                    self.population = self.population[elite_indices]\n                    self.scores = self.scores[elite_indices]\n                    self.population_size = new_population_size\n\n        return best_solution, best_score", "name": "StochasticElitismHybridOptimizer", "description": "Enhanced probabilistic hybrid optimizer using stochastic ranking and adaptive elitism for improved exploration-exploitation balance.", "configspace": "", "generation": 58, "fitness": 0.26977701137412863, "feedback": "The algorithm StochasticElitismHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8272950698699939, 0.8629892076218094, 0.7034766303067033, 0.8160084569911807, 0.805837279066422, 0.7773928091368462, 0.870645695701455, 0.752412219607731, 0.8386352238573755, 0.7395857511505043, 0.6393504839775588, 0.6859975550338222, 0.627849549188865, 0.7102459378780895, 0.7929197049009102, 0.5902417753172039, 0.6697374892497661, 0.5973762372286391, 0.1115775410032287, 0.1095419133835217, 0.10287607611576277, 0.12794476499185325, 0.08952699297562217, 0.10875478349919998, 0.12440493697521215, 0.11769411138212127, 0.10412602737605736, 0.10480314336657193, 0.08774049026859443, 0.09357245809178949, 0.07772176844642165, 0.09457179881191446, 0.10301414816716492, 0.1084586202595419, 0.09893329161062536, 0.11301726953251146, 0.9451653070960994, 0.9864446335327635, 0.9473311741231863, 0.9550731379819083, 0.9778177745753336, 0.9823299164749437, 0.9690983512438289, 0.9754789629204506, 0.9557677629224954, 0.3416687227431877, 0.35443960672610897, 0.22497250557294124, 0.25526594449696804, 0.3992724580013174, 0.4308562240964491, 0.4605151586032459, 0.2834542804845065, 0.3166701336139457, 0.3845244355740861, 0.48205514336141086, 0.279656929310251, 0.6288153141687205, 0.24377987541637636, 0.2406086320432289, 0.5473083101208864, 0.5176398621699523, 0.4068815635779506, 0.1629855562845618, 0.22959993668131373, 0.2336408717777696, 0.21473461995925158, 0.17940329382343934, 0.16396797184336231, 0.20240467373934845, 0.12649114959236518, 0.20130269736425066, 0.1304349203326992, 0.1490060754179664, 0.14311443759042142, 0.20930065755662086, 0.1282680204635579, 0.20197044164439448, 0.19313280574668767, 0.1836553109618846, 0.20197690229925058, 0.06664672277101713, 9.999999999998899e-05, 0.0008340469327484668, 0.028416441283064864, 0.00012012921972470725, 9.999999999998899e-05, 0.0032168413254257677, 0.007176391511602542, 0.01442570424104428, 0.09577083558749455, 0.07298703634215364, 0.057438012558027385, 0.21557997178393873, 0.14936040464784528, 0.11600069849573358, 0.30098839335329497, 0.10771836669593926, 0.0553619327380771, 0.11185404501658991, 0.026639479084623385, 0.05854515369821178, 0.04013279025657934, 0.019524089382218723, 0.023983435910948536, 0.05697340445282495, 0.011195964792904523, 0.046444779945196246, 0.1596868741826587, 0.13720711073631042, 0.1419881994743264, 0.17326859122123006, 0.16983308336927894, 0.10234584552708781, 0.1712704119002556, 0.16306573565321092, 0.1419472939588472, 0.44317316557444175, 0.5256090296463503, 0.45824596928428196, 0.46982981936872814, 0.5336324260764906, 0.5216179912023692, 0.4759843409293877, 0.5673252013500855, 0.5116975592799979, 0.07532183992700447, 0.09110191050033267, 0.10339169794985448, 0.1098088884934032, 0.09652965435765659, 0.10515137108126105, 0.09628886920675306, 0.10334805869236408, 0.09547218836018345, 0.16902063389816757, 0.17752776819962623, 0.14287262225414432, 0.1580731124959298, 0.14567588987838465, 0.1582390596680311, 0.12876160683278337, 0.2341866147486228, 0.13860290345712378, 0.43516355052819866, 0.3362986844194229, 0.3278015355780707, 0.37851186342156895, 0.24999331645916367, 0.3432936152519086, 0.43133705111757703, 0.2920584189545211, 0.40447169302261343, 0.2946821522069417, 0.22411462018479344, 0.20606048421438294, 0.23632902171374104, 0.16998606000479977, 0.13730047119530353, 0.23555441909397146, 0.24309378320372166, 0.29272723858106686, 0.17884585580047574, 0.17374435093549234, 0.19957363308442777, 0.19462874648882544, 0.17566426357092135, 0.18618906988598904, 0.1728118966403761, 0.1838331851583873, 0.18633037886576198, 0.18544873179811827, 0.19023410096955962, 0.1867762601355789, 0.18069261242002577, 0.2298579531531103, 0.18962990673210867, 0.1876628562473266, 0.17936840160100143, 0.18122535906235904, 0.6426025546000229, 0.13844242688808295, 0.17975080429540702, 0.1859473040763704, 0.19680166583922387, 0.1819919913729373, 0.1626251083175113, 0.1568658055695945, 0.1798772719039161, 0.16470030238375488, 0.1649852445770248, 0.18689563732460523, 0.19905244722274518, 0.18939564031295575, 0.16239274221987177, 0.1245892420924174, 0.12659570137864373, 0.20005890374054147, 0.18165235480712472, 0.171243593553139, 0.1736008831896092, 0.19796866480257813, 0.18126275337102338, 0.18511120800141323, 0.17147644908216608, 0.18781646077667968, 0.17828475054622817, 0.07579949611055348, 0.07963337915318769, 0.07909625275758192, 0.0817754786311099, 0.07138505427285602, 0.07156372468444971, 0.07845603154828173, 0.07010732513465046, 0.0715361734334381]}, "mutation_prompt": null}
{"id": "79b05096-665e-4797-ac9f-0e2e583dd5d2", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer combining evolutionary strategies with differential evolution and adaptive population dynamics for robust optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8882618092741813, 0.829182044780998, 0.8610499892064126, 0.8860672888600784, 0.8497892624077474, 0.8568544710138344, 0.8827839553377691, 0.8447332944770616, 0.8566070684950713, 0.8136255532868154, 0.7365055706409713, 0.7531697291868006, 0.800552865395084, 0.73954571840588, 0.7492828120372013, 0.8166446882528984, 0.760235123508034, 0.7586193024188106, 0.13783213059376176, 0.3468626938086081, 0.6039352394239013, 0.5403394278626681, 0.3868593530664918, 0.439146204247862, 0.5172031815989693, 0.3933832194614454, 0.501547223903948, 0.15671731366968122, 0.13947198605299094, 0.3742683441997391, 0.13587244849754931, 0.1331466841365031, 0.46208939290785644, 0.1587838554797063, 0.12343544019416441, 0.49699449656364114, 0.963978727658187, 0.977173733535758, 0.9807624472179383, 0.9699521028578815, 0.9841417337388083, 0.9787561683905639, 0.9788014501290754, 0.9473640827898129, 0.9714761082144242, 0.6746321929141335, 0.6235019242244924, 0.5945279322612524, 0.6910090259054971, 0.6106718722850978, 0.5650212132381787, 0.689207491869011, 0.6442234250575412, 0.543877043680057, 0.8476063130638523, 0.7999471967673868, 0.5787679066608846, 0.838824510188956, 0.8260262498485814, 0.7507964748172186, 0.8651675140818017, 0.8070031109094138, 0.6754739948500335, 0.6147647784141852, 0.4229391179598081, 0.21428535914283475, 0.12965886557991868, 0.5152964251861405, 0.28267494328250087, 0.25821885749668305, 0.5087009802422158, 0.3552145555804568, 0.11898021494747901, 0.3539063328767946, 0.1605005678151128, 0.16837396323295106, 0.5127307942442694, 0.3325267063023809, 0.27414568046285515, 0.49431350745791147, 0.3846755465250158, 0.5050459564357026, 0.4604003836681171, 0.1552595836134999, 0.49020287338840207, 0.4035899555275041, 0.1689480848010726, 0.5839168975564963, 0.543229142487669, 0.21106570916867728, 0.6647247008289272, 0.5908940568134999, 0.29425470324285463, 0.6278376630050826, 0.6134456061308942, 0.2241619720345721, 0.6660785792357446, 0.6522643138160658, 0.32799904770964416, 0.0902964133486368, 0.1562209582062336, 0.058257060442464925, 0.40496692005049095, 0.2758869290445706, 0.07362059717192349, 0.22197647915570073, 0.24662785389647257, 0.12430111133136179, 0.4546018961901098, 0.3824472674845073, 0.24718004979828323, 0.5295328064736091, 0.3971107050785766, 0.24665584618784386, 0.3542601268885882, 0.05611232785236531, 0.22048088299036517, 0.8016260441972363, 0.7234519616082478, 0.6413597488818221, 0.7898741758713639, 0.751930478578601, 0.6596184987667619, 0.8212238071918924, 0.7398801181862478, 0.6763925317259811, 0.12045573167821899, 0.11063953682944627, 0.11154599609955462, 0.09830150135406979, 0.09539403892802856, 0.09528609416819767, 0.09436164549388448, 0.11145109008158327, 0.0925654487465426, 0.2572110432393042, 0.14754692938299463, 0.19083463997692962, 0.1486426991642975, 0.1600763262440763, 0.1693597451956086, 0.17573809606978685, 0.19883908763919833, 0.13130091749729544, 0.5710459748680342, 0.5165488116844719, 0.4344742845260373, 0.5830106237936813, 0.4456955139442704, 0.4604099637260439, 0.625976616044059, 0.5833555720421328, 0.5113997675694357, 0.37711568701630427, 0.3312875182696915, 0.2605532844718407, 0.3829487624979654, 0.33490878495752874, 0.26382654051170007, 0.48147793471107403, 0.41587842215988213, 0.3189279646986095, 0.19811971996963995, 0.1912969982142141, 0.19368907780371736, 0.18572378550633306, 0.18912017390648062, 0.20302969260439307, 0.2162838419390335, 0.18333954260740404, 0.18821258339367508, 0.5763709809022803, 0.33401540419554154, 0.39523241889259186, 0.7117491544517767, 0.20632807258234553, 0.2154237898851411, 0.2821553451957334, 0.19597258617823832, 0.4476154762795336, 0.20209510796950936, 0.16362560254843428, 0.15045504449239255, 0.8451740998386034, 0.8064337687601139, 0.687948541978866, 0.8201113687969195, 0.15777106603551472, 0.5125783452934345, 0.2067346336377135, 0.8180824339586369, 0.5040373642304616, 0.8492972367999032, 0.20121043684208173, 0.199129969303394, 0.1538281572075041, 0.20518013637189403, 0.20340075168121674, 0.17026804202018286, 0.18272037475040892, 0.1822616484854157, 0.21358477907744222, 0.1934029092520535, 0.20341563423359943, 0.18425748503122907, 0.1930840221409098, 0.19160193588857577, 0.08321300819551347, 0.07772183880765315, 0.07375765783814581, 0.08548465904670632, 0.08115410705450321, 0.08134977688084633, 0.07774551428698873, 0.0754391923825497, 0.08300930480387614]}, "mutation_prompt": null}
{"id": "8c8ec7f9-2c86-49a3-9ea2-8033f33a7d2a", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  \n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  \n        CR = 0.8  \n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.4, 1.0)\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.6, 0.95) \n\n            if (self.evaluation_count / self.budget) > 0.5:  \n                new_population_size = int(self.initial_population_size * 0.5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer integrates evolutionary strategies with differential evolution and dynamic parameter tuning for enhanced performance.", "configspace": "", "generation": 60, "fitness": 0.3818000992706275, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8768557343044099, 0.8215347491051844, 0.8381527835363666, 0.8724299875170616, 0.8331089108266807, 0.8515726874397092, 0.8788681460820075, 0.8188351014046319, 0.8555358951716296, 0.8023837018092037, 0.7456991645697326, 0.7542433762955576, 0.7843418399284505, 0.7313190924714638, 0.7461192237686013, 0.8041892560581049, 0.7505980921766988, 0.7514464777342135, 0.25605714292410675, 0.1467881839840054, 0.5416510273439206, 0.6138559972346642, 0.25449291221411097, 0.4095791198746278, 0.22927317367698974, 0.14457799381772618, 0.3519044148691193, 0.14600325753752474, 0.1349265170626528, 0.2354996751330254, 0.1297455216244784, 0.2112352319006222, 0.1634089670117257, 0.13608533961351954, 0.1294261255621184, 0.2535553901338561, 0.964757470609795, 0.956704630439863, 0.9791034999612142, 0.9737747726517073, 0.9842141362040944, 0.9854348156082774, 0.9781386726918369, 0.9548122541804358, 0.9640297372699308, 0.34664454347714235, 0.5172228464651041, 0.5238966935949394, 0.49207538417411834, 0.54467110754545, 0.5826198572153164, 0.43494322741129043, 0.5911420287652474, 0.4736661394781607, 0.8547709872405429, 0.8191663496127486, 0.6487598170394506, 0.8538455782124923, 0.7708300917767175, 0.656024320190054, 0.8368720117853561, 0.7960633544608259, 0.7022616877398735, 0.2638084783398029, 0.26200602954756913, 0.17111301619626806, 0.15208542400741076, 0.16601750709529517, 0.1651679983880464, 0.2481684424205174, 0.3061306849242731, 0.15606108377723105, 0.15337205095388595, 0.009872473700569429, 0.18976827166002952, 0.22455859588327143, 0.35973495584670523, 0.2358078678565233, 0.21383183579274168, 0.2579334153160062, 0.255381855203031, 0.21166766255755043, 0.4702143142133667, 0.14531511239030825, 0.5119579218792654, 0.19570119956069054, 0.019993355208464347, 0.5371759923389133, 0.48444074522824987, 0.11436100794495374, 0.40710805739927136, 0.6009885611605839, 0.1538526114843327, 0.5287845838509808, 0.6757514664224562, 0.10111770646799123, 0.3951898414716436, 0.5347508642229248, 0.2360367620577387, 0.15657439153923258, 0.14682852960793136, 0.14178598336921566, 0.16791314861798168, 0.11315649865721067, 0.13578347675060576, 0.1690972532860926, 0.166455479864012, 0.09241145985157306, 0.2781136752041381, 0.36474683353133763, 0.23468881013726117, 0.41386212577935577, 0.43846966553779276, 0.29098115647560585, 0.3104334381493402, 0.33350940329113277, 0.20510458469984338, 0.8427210379854282, 0.7582350605982988, 0.6612628736947994, 0.7720854021320459, 0.7286482508646143, 0.542947353124926, 0.6686948773206014, 0.7564944541217655, 0.6048725332226894, 0.13232369917137343, 0.09673000622906058, 0.1096053995017996, 0.11060885619118621, 0.13054757212534218, 0.10411633512405571, 0.10526964764825608, 0.10578020638857566, 0.10942211324192508, 0.13712770220071602, 0.4666327939971703, 0.17189231527826998, 0.25503513863410743, 0.18856305798646822, 0.14848079991942964, 0.21377723300972096, 0.1784008634869666, 0.21703156483019725, 0.5428012831472315, 0.44383503528235946, 0.4111243266238249, 0.5370405409557564, 0.43172254575724167, 0.3896267428857012, 0.5622758772785851, 0.45848320628816785, 0.4883314050045897, 0.5847217372995238, 0.3182182464654586, 0.30869861519313013, 0.3827230893067808, 0.3743235209125896, 0.3520071006693042, 0.4354739251464169, 0.45133949942748364, 0.3881445493818635, 0.1972518465981058, 0.1858646701068567, 0.22835984827626143, 0.18392525193867792, 0.17700311906500898, 0.17449657161362497, 0.2089144063499433, 0.1933492979009379, 0.18854009899339963, 0.21326609508633843, 0.26814338517639913, 0.58827310251073, 0.22823778900731173, 0.5266585455828988, 0.22228657163847199, 0.23189334632286274, 0.2114375172258387, 0.6532375663135975, 0.16755384113783733, 0.1851359800587543, 0.16700186461773703, 0.18480627474837752, 0.7674925774039755, 0.18254911550063235, 0.5040620588892704, 0.1642245901564494, 0.23282603394572465, 0.20188979258099216, 0.16422379065727366, 0.20303381767307183, 0.20125501170136617, 0.12370927819749855, 0.19067952621309436, 0.15360216402262572, 0.19705491671194342, 0.5525210363054667, 0.18338854856248799, 0.17659111543209616, 0.18556582044765169, 0.18349232833301843, 0.17440948464091321, 0.18174074676138674, 0.21184003921732653, 0.1799768493123145, 0.17789576162309328, 0.08950957222997236, 0.07922391771763904, 0.08565977181394169, 0.09275106138140621, 0.08086846419148275, 0.08049504031563848, 0.08967722881304785, 0.07076930228074019, 0.07511739945721108]}, "mutation_prompt": null}
{"id": "f81ec683-6a1d-44e8-9acf-ca2d1fb2d95b", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.5 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Increased DE scaling factor for more exploration\n        CR = 0.75  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.0)  # Adjusted adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)  # Adjusted adaptive CR range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.65:  # Adjusted dynamic reduction threshold\n                new_population_size = max(int(self.initial_population_size * 0.7), 5)  # Ensure a minimum population size\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer that utilizes evolutionary strategies and differential evolution with dynamic population scaling and refined parameter adaptation for enhanced convergence.", "configspace": "", "generation": 61, "fitness": 0.3649510332049531, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7927711632622161, 0.7649778196921929, 0.8120390150703036, 0.8270158133548589, 0.8114594372589389, 0.8097908055597283, 0.8014670793680008, 0.7890489934702068, 0.8074559886590327, 0.6706731384601489, 0.6593997102645328, 0.6976139382495796, 0.6532444372109538, 0.6630640245644334, 0.7264306047464727, 0.6795001298237442, 0.6690765506165441, 0.6740828577559481, 0.3514041635977303, 0.2772198271916866, 0.4068843919874019, 0.15081466449131842, 0.29277713706403297, 0.29337531201119826, 0.23272992624633437, 0.269805383854395, 0.3114899343002382, 0.14277700019947936, 0.23311362399527014, 0.1866695022146524, 0.12567040039042732, 0.18983574141072612, 0.15205091309197594, 0.1296712823819065, 0.2838926051370979, 0.16877946771797137, 0.9844763266116158, 0.9605335125018717, 0.9929762797886219, 0.9730443761889691, 0.9776965940092064, 0.9744930872288086, 0.9771074961886849, 0.9737659120844245, 0.9752781656424211, 0.5321088579033069, 0.4919692914466147, 0.5419198668140273, 0.5077693684912759, 0.4709706095070968, 0.5210098325232269, 0.5201137379917291, 0.48385363054365194, 0.536665594399721, 0.6985535609827316, 0.6351868594253494, 0.6618311688382827, 0.7298743877822321, 0.6186103010254898, 0.5797474072977469, 0.6592153621890826, 0.6694578468560759, 0.6730024154033969, 0.29717621796735527, 0.385940939941256, 0.3476693310851542, 0.3486180355747722, 0.33590548614213644, 0.36312618516060435, 0.2975796488059179, 0.31436411404516007, 0.33988181458359, 0.05248923304163522, 0.016498543633912788, 0.3264712605568396, 0.2862387509244929, 0.2863169691422178, 0.2933677917268386, 0.3254251328802257, 0.2701808396694023, 0.41553367086294857, 0.29111271731027344, 0.20509882293649184, 0.22038640449526925, 0.22151902491572129, 0.2484159050013678, 0.21627109550693036, 0.2579503342289271, 0.14555619392014574, 0.20210080157360266, 0.3957657816124629, 0.3739509862347573, 0.3533477421263861, 0.3578685659942731, 0.28568436677723874, 0.31428247279341714, 0.48038725027111606, 0.4005313845625391, 0.366791569505873, 0.10383583403733754, 0.07888447368231877, 0.09138425440496867, 0.13341491190884613, 0.08269660475504659, 0.09893579189162738, 0.15769677684125294, 0.11885991736158175, 0.15133700752486579, 0.23766602689019722, 0.21700685517619045, 0.2319480544043796, 0.2589920013572049, 0.2666242529158941, 0.27233512981673735, 0.2187787409597931, 0.22314894311331668, 0.22559959726841772, 0.6149415829652749, 0.5893545552494279, 0.6477421587729872, 0.6423964584901256, 0.6297142730711981, 0.6311710374892413, 0.6304784604164217, 0.6025037426118194, 0.645032141707115, 0.09907130953759147, 0.10552063655623756, 0.09222459178704101, 0.10812573626282174, 0.10852962881500716, 0.09020072004980739, 0.08309471407412816, 0.08664978971928361, 0.0922306524577785, 0.14183416852273312, 0.16312903961132075, 0.13767004301134733, 0.16746497027685803, 0.1427816367597008, 0.16105394953519558, 0.2764319652706754, 0.21436355712964583, 0.14438843432605464, 0.34252082991189003, 0.34088800171246103, 0.37833829651782014, 0.3718324722571854, 0.34966130819051267, 0.38000200225773706, 0.40818099068740643, 0.4062766064934832, 0.44090998806674286, 0.24666499807759024, 0.26703489983169937, 0.2593760991507307, 0.24886350384870193, 0.25912511807956273, 0.29756405525332497, 0.30503328843606137, 0.2687363094538874, 0.2968768514187765, 0.1737612127914142, 0.1793804519740435, 0.18644614332131615, 0.19994259566335082, 0.18021273097202406, 0.18277032284593409, 0.18161216524999868, 0.18432765439664855, 0.19304201407720745, 0.32273490795618165, 0.21369213072410598, 0.4400229997628907, 0.2507987883834495, 0.22458834526530702, 0.198507050318516, 0.2098069604570626, 0.2354409346941686, 0.2215861238436886, 0.7700595223012147, 0.2470001548149363, 0.8046478222673832, 0.18290480504861906, 0.7611351417525527, 0.7266663119849683, 0.7926754753866586, 0.17674098859033205, 0.600390176046432, 0.623646909887902, 0.20006242801187346, 0.1885578605734941, 0.4448262237873172, 0.6847151098187934, 0.16041997095646365, 0.20488259183112756, 0.27611751593877665, 0.1254522040839796, 0.2000318919271057, 0.18944840233721338, 0.17743591450514307, 0.18061103063902517, 0.18962420782227662, 0.17006449160302217, 0.18057225686231815, 0.1937570372467039, 0.18433474553227513, 0.0738131778712342, 0.07014301635580722, 0.07015986934771734, 0.07435545730379667, 0.07792233420670869, 0.07487538565458995, 0.07027701084449944, 0.0708199223544973, 0.07736150579481271]}, "mutation_prompt": null}
{"id": "9f0ead31-df33-4b41-8ff1-6b7def41cc7f", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.07, 0.07), 0.6, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probability-based adaptive hybrid optimizer combining evolutionary strategies with differential evolution and adaptive population dynamics for robust optimization.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8882618092741813, 0.829182044780998, 0.8610499892064126, 0.8860672888600784, 0.8497892624077474, 0.8568544710138344, 0.8827839553377691, 0.8447332944770616, 0.8566070684950713, 0.8136255532868154, 0.7365055706409713, 0.7531697291868006, 0.800552865395084, 0.73954571840588, 0.7492828120372013, 0.8166446882528984, 0.760235123508034, 0.7586193024188106, 0.13783213059376176, 0.3468626938086081, 0.6039352394239013, 0.5403394278626681, 0.3868593530664918, 0.439146204247862, 0.5172031815989693, 0.3933832194614454, 0.501547223903948, 0.15671731366968122, 0.13947198605299094, 0.3742683441997391, 0.13587244849754931, 0.1331466841365031, 0.46208939290785644, 0.1587838554797063, 0.12343544019416441, 0.49699449656364114, 0.963978727658187, 0.977173733535758, 0.9807624472179383, 0.9699521028578815, 0.9841417337388083, 0.9787561683905639, 0.9788014501290754, 0.9473640827898129, 0.9714761082144242, 0.6746321929141335, 0.6235019242244924, 0.5945279322612524, 0.6910090259054971, 0.6106718722850978, 0.5650212132381787, 0.689207491869011, 0.6442234250575412, 0.543877043680057, 0.8476063130638523, 0.7999471967673868, 0.5787679066608846, 0.838824510188956, 0.8260262498485814, 0.7507964748172186, 0.8651675140818017, 0.8070031109094138, 0.6754739948500335, 0.6147647784141852, 0.4229391179598081, 0.21428535914283475, 0.12965886557991868, 0.5152964251861405, 0.28267494328250087, 0.25821885749668305, 0.5087009802422158, 0.3552145555804568, 0.11898021494747901, 0.3539063328767946, 0.1605005678151128, 0.16837396323295106, 0.5127307942442694, 0.3325267063023809, 0.27414568046285515, 0.49431350745791147, 0.3846755465250158, 0.5050459564357026, 0.4604003836681171, 0.1552595836134999, 0.49020287338840207, 0.4035899555275041, 0.1689480848010726, 0.5839168975564963, 0.543229142487669, 0.21106570916867728, 0.6647247008289272, 0.5908940568134999, 0.29425470324285463, 0.6278376630050826, 0.6134456061308942, 0.2241619720345721, 0.6660785792357446, 0.6522643138160658, 0.32799904770964416, 0.0902964133486368, 0.1562209582062336, 0.058257060442464925, 0.40496692005049095, 0.2758869290445706, 0.07362059717192349, 0.22197647915570073, 0.24662785389647257, 0.12430111133136179, 0.4546018961901098, 0.3824472674845073, 0.24718004979828323, 0.5295328064736091, 0.3971107050785766, 0.24665584618784386, 0.3542601268885882, 0.05611232785236531, 0.22048088299036517, 0.8016260441972363, 0.7234519616082478, 0.6413597488818221, 0.7898741758713639, 0.751930478578601, 0.6596184987667619, 0.8212238071918924, 0.7398801181862478, 0.6763925317259811, 0.12045573167821899, 0.11063953682944627, 0.11154599609955462, 0.09830150135406979, 0.09539403892802856, 0.09528609416819767, 0.09436164549388448, 0.11145109008158327, 0.0925654487465426, 0.2572110432393042, 0.14754692938299463, 0.19083463997692962, 0.1486426991642975, 0.1600763262440763, 0.1693597451956086, 0.17573809606978685, 0.19883908763919833, 0.13130091749729544, 0.5710459748680342, 0.5165488116844719, 0.4344742845260373, 0.5830106237936813, 0.4456955139442704, 0.4604099637260439, 0.625976616044059, 0.5833555720421328, 0.5113997675694357, 0.37711568701630427, 0.3312875182696915, 0.2605532844718407, 0.3829487624979654, 0.33490878495752874, 0.26382654051170007, 0.48147793471107403, 0.41587842215988213, 0.3189279646986095, 0.19811971996963995, 0.1912969982142141, 0.19368907780371736, 0.18572378550633306, 0.18912017390648062, 0.20302969260439307, 0.2162838419390335, 0.18333954260740404, 0.18821258339367508, 0.5763709809022803, 0.33401540419554154, 0.39523241889259186, 0.7117491544517767, 0.20632807258234553, 0.2154237898851411, 0.2821553451957334, 0.19597258617823832, 0.4476154762795336, 0.20209510796950936, 0.16362560254843428, 0.15045504449239255, 0.8451740998386034, 0.8064337687601139, 0.687948541978866, 0.8201113687969195, 0.15777106603551472, 0.5125783452934345, 0.2067346336377135, 0.8180824339586369, 0.5040373642304616, 0.8492972367999032, 0.20121043684208173, 0.199129969303394, 0.1538281572075041, 0.20518013637189403, 0.20340075168121674, 0.17026804202018286, 0.18272037475040892, 0.1822616484854157, 0.21358477907744222, 0.1934029092520535, 0.20341563423359943, 0.18425748503122907, 0.1930840221409098, 0.19160193588857577, 0.08321300819551347, 0.07772183880765315, 0.07375765783814581, 0.08548465904670632, 0.08115410705450321, 0.08134977688084633, 0.07774551428698873, 0.0754391923825497, 0.08300930480387614]}, "mutation_prompt": null}
{"id": "efb7dc9b-9d7e-4216-bb7f-5eca6ae16621", "solution": "import numpy as np\n\nclass RefinedStochasticHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(1.5 * np.sqrt(dim))  # Slightly larger initial population\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor for exploration\n        CR = 0.75  # Balanced crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation with stochastic differential dynamics\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (np.tanh(b - c)), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.4, 1.2)  # Adjust dynamic range for F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.65, 0.9)  # Adjust dynamic range for CR\n\n            # Dynamic population adjustment with resampling\n            if (self.evaluation_count / self.budget) > 0.6:  # Change reduction threshold\n                new_population_size = max(10, int(self.initial_population_size * 0.5))\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n                # Resampling strategy for diversity\n                if np.random.rand() < 0.2:\n                    resample_indices = np.random.choice(self.population_size, int(0.1 * self.population_size), replace=False)\n                    self.population[resample_indices] = np.random.uniform(self.bounds[0], self.bounds[1], (len(resample_indices), self.dim))\n                    self.scores[resample_indices] = np.inf\n\n        return best_solution, best_score", "name": "RefinedStochasticHybridOptimizer", "description": "A refined adaptive hybrid optimizer using stochastic differential mutation dynamics and population resampling for enhanced convergence.", "configspace": "", "generation": 63, "fitness": 0.3243827184741537, "feedback": "The algorithm RefinedStochasticHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.7425264242510199, 0.7207391344325054, 0.7009011638558373, 0.7258348675151323, 0.7429253910016461, 0.7094708525837513, 0.7180382632308929, 0.724671429346073, 0.7047901691575263, 0.5862132386487495, 0.5727001503093825, 0.5439971166459928, 0.559011914938381, 0.5750207555249378, 0.5213459481365752, 0.5523537950917917, 0.5865166013284855, 0.5429931640207797, 0.26031739265591425, 0.3004847458534571, 0.17285035862678122, 0.12696784029833252, 0.14431675610809014, 0.3210027609585183, 0.3491307454419712, 0.15019796036278765, 0.13307325875408205, 0.13616297942222066, 0.13376239686451463, 0.1273053383237024, 0.11970274839271311, 0.12128049077002956, 0.14258836505014538, 0.1898824233254034, 0.12042093756704986, 0.12889736757991777, 0.9438112747595456, 0.9560203508445756, 0.9228255832276959, 0.9555831363853047, 0.9489058669048445, 0.9436741932010153, 0.9333229273835796, 0.9358096598396375, 0.9200104076298389, 0.409609074941399, 0.4505040005760761, 0.35647684344956065, 0.453333397685974, 0.41083184380160076, 0.34907819666505224, 0.44413258825934643, 0.4294304750593172, 0.36122965737990675, 0.6685424133708107, 0.5459605985551872, 0.5394920358537674, 0.6739703577306403, 0.6845992263438622, 0.65326297383714, 0.629214384061924, 0.5981660472531412, 0.7198379279169023, 0.35886952523031346, 0.34088458874152217, 0.19922481771775935, 0.3188211210987967, 0.25651218610224624, 0.20036564189923844, 0.3651889060440575, 0.29410351088401776, 0.19849382831597173, 0.34340600018901746, 0.3244883655019939, 0.21336029073276308, 0.26162535437642687, 0.2676647561536648, 0.22454574241960001, 0.2044019544426724, 0.3419632794446651, 0.233702186296325, 0.03726511868748128, 0.04877050728494792, 0.012403155990110104, 0.15555621568088573, 0.10420760008902485, 0.08968787960728097, 0.05248742314506383, 0.0752206483783382, 0.0021423981133755765, 0.07870955871245222, 0.07113172190994188, 0.11409787469254329, 0.12253392306045918, 0.05140152179473645, 0.10499640206553995, 0.11548265659451151, 0.08223404367788423, 0.10582218941114918, 0.07979673977285107, 0.06763763865753458, 0.1034545832681717, 0.06414516141903481, 0.04705536047164116, 0.059628978828932144, 0.09201068285820879, 0.10731090881251348, 0.060972753232037435, 0.1945334638139986, 0.22709491561278583, 0.19846022795105334, 0.22967746156561508, 0.22988315796179037, 0.19804858285892113, 0.2251972146933705, 0.20120835302624585, 0.19786706674226284, 0.5601862946266621, 0.5736384963881624, 0.5431253853835678, 0.6005705697125857, 0.5649412571756152, 0.4972389748056285, 0.5844658074899607, 0.5651998640172589, 0.5303684136054616, 0.106413859910652, 0.10053057005240917, 0.10874379813337454, 0.11623478552068811, 0.11373114574292809, 0.0975435165214068, 0.10153833956525193, 0.09564536458270179, 0.10158372715144104, 0.3453619393378423, 0.16482569444463113, 0.22175147750397217, 0.19742153302179977, 0.18920966010262452, 0.1599594690709979, 0.20054857998700348, 0.18862214297454094, 0.16399880163960456, 0.3333864291208096, 0.34957137510739866, 0.35824534425738574, 0.36020610505249673, 0.33389010062103097, 0.3882749425285168, 0.3704657800209642, 0.36932561585890666, 0.3257576955581515, 0.2514798141852077, 0.2523186179534076, 0.2664280610094446, 0.24902612194576335, 0.26969144787966126, 0.24434725278199854, 0.2768636895436677, 0.266882193389525, 0.24920410919721203, 0.19991751822970405, 0.1995183476162956, 0.1872202729792466, 0.22920837814339634, 0.19731907443256802, 0.20397433746424343, 0.20245401554532005, 0.20327312112811546, 0.20327142584264346, 0.2381493337912961, 0.2759988056137612, 0.3208127014933613, 0.2743923304605609, 0.27306100768975416, 0.2364443670531039, 0.365593923871407, 0.19860124043102856, 0.34087355532651664, 0.18207256454550957, 0.20727479114913439, 0.7633904983782122, 0.8014809288545529, 0.6888300193223467, 0.7627821406973501, 0.6733778627626734, 0.7254435508431827, 0.1642287033149159, 0.7238578110023027, 0.20876503607105767, 0.6165348613759614, 0.14877374812112742, 0.19869073247261815, 0.20853162713003326, 0.16553361357802165, 0.659692260148641, 0.5785632242971579, 0.17887810655641423, 0.17830011811488256, 0.18639777115465372, 0.1735636926282439, 0.1846106816329004, 0.19927958675773239, 0.17754127593055835, 0.21308851159159725, 0.19351478460705274, 0.0776418146910588, 0.08102798789400822, 0.0775793409056631, 0.08396752845456246, 0.08242367204493672, 0.09635636390279434, 0.08533535163143446, 0.07753728121535752, 0.08116458971941642]}, "mutation_prompt": null}
{"id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.65:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.65)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer integrating evolutionary algorithms with adaptive learning and diversity maintenance for enhanced optimization.", "configspace": "", "generation": 64, "fitness": 0.44304095517412395, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "16154417-a605-4e0b-9a3e-a676022fa16a", "metadata": {"aucs": [0.8823432266353266, 0.839099354314307, 0.8627238126369267, 0.8793548614354979, 0.8462227367756081, 0.851221893140268, 0.8938113906903886, 0.8638731844080552, 0.8755250873579999, 0.8117078382543463, 0.7582066208739706, 0.759215026918387, 0.8019501898590244, 0.7584926872563975, 0.7544045339385308, 0.7997380697790564, 0.7857105222391862, 0.7614304834099749, 0.421804305417359, 0.40991703750234343, 0.36030982887845964, 0.40566167761481164, 0.2701301557172535, 0.39535421756905376, 0.39579036808079704, 0.3049726923064251, 0.3535612184754028, 0.15606852828585493, 0.2089091661534176, 0.45434070221774214, 0.14325000085102924, 0.14029371308252847, 0.1329748060305419, 0.16580712980347467, 0.1346571962537224, 0.3910277638284315, 0.9659629929430816, 0.9680202287119779, 0.9815722279654618, 0.9735554024925218, 0.9773021666198178, 0.9852799743134433, 0.9800664621736415, 0.9608941598107417, 0.9784506903519795, 0.6484441010605282, 0.6183931898779613, 0.6145926249216233, 0.6649291371793365, 0.6474046283610236, 0.6074896589110151, 0.6686387714206201, 0.6299397493088694, 0.6142037186786946, 0.8404257690405555, 0.8024932681389877, 0.7527873137014696, 0.875186864500428, 0.8323564345347864, 0.7651343332832377, 0.8655844250415201, 0.8222179589085233, 0.7771612300980015, 0.4263462531923371, 0.4569548835020735, 0.4173942823283574, 0.518734663622405, 0.4213183877915767, 0.2629124481476556, 0.516008669643263, 0.5400425720976236, 0.406692880245644, 0.20395070033033103, 0.11934463967252429, 0.3277461444351054, 0.727279543093857, 0.5021432619330677, 0.3945771660179149, 0.40704571149531976, 0.5425982925721025, 0.4894972182542122, 0.6438087860919925, 0.5738203265302759, 0.33456694203629744, 0.2760138033099583, 0.5692209036524079, 0.31309894860532217, 0.5705122855163822, 0.5694633660643671, 0.33190339790395185, 0.6459745720350152, 0.653757504767156, 0.3785620295102594, 0.7088756149546386, 0.6196263634362758, 0.36263585632695783, 0.7118295534760009, 0.6800986858817699, 0.5290965212979436, 0.1568368483304281, 0.2334121952925834, 0.09003297342228544, 0.22018080900498127, 0.46987836455680376, 0.2520505911213716, 0.23609036229968794, 0.19572668450684882, 0.09848921341541095, 0.5027618111289459, 0.40890232965218676, 0.31387419824873075, 0.4938278771709622, 0.4137976849782684, 0.32990989887961886, 0.5350361664464347, 0.4063280225453534, 0.3049374626581888, 0.8282036612975134, 0.7783039456669212, 0.7173444514083729, 0.8308911898335668, 0.7797523328148401, 0.7026842838860987, 0.8303271722079056, 0.7793801811572965, 0.7196358865964607, 0.09901607619929931, 0.09148746211806391, 0.10310325460072978, 0.09988147758629384, 0.1224889227014373, 0.11224378428062631, 0.11951830026253085, 0.09696686868552884, 0.11037076819459357, 0.17814608035073376, 0.16961025622286363, 0.14244975297086826, 0.15846322138129743, 0.1514373718644323, 0.18327511035222344, 0.18582013528724117, 0.19187950506620832, 0.18189739611860178, 0.5089511602445164, 0.5146154440934927, 0.5394057915171615, 0.5726524474031225, 0.467120667985498, 0.4484071349842387, 0.5788609062985959, 0.4962772783955094, 0.48065757940170617, 0.44664342739446683, 0.35066841603072374, 0.34667603755674237, 0.453790138392828, 0.39221073412056395, 0.3076526258425789, 0.445332785320972, 0.3899014479927221, 0.3113806084063321, 0.18961620768560417, 0.2052356218964696, 0.18150068225183136, 0.19548785022658544, 0.18287155119297527, 0.20153598527955796, 0.20959560342011607, 0.17507761853379367, 0.1973564782475763, 0.48752678662084004, 0.5462369746316271, 0.36065613582319034, 0.20361300748711453, 0.41593181529720713, 0.3992279798820295, 0.2189933429585087, 0.5414758673996679, 0.560774750825108, 0.1801828780071546, 0.8246751256241448, 0.15219649599453355, 0.1714955203788764, 0.20301418641593583, 0.7491596043169686, 0.7844756025997353, 0.17536561911488802, 0.6794310898923288, 0.16540624083272237, 0.20449692904063255, 0.20344892597815445, 0.2056432159380821, 0.20634863497953104, 0.19346228439783175, 0.1512750284282972, 0.20810232609366808, 0.1531881776955617, 0.1833812541894314, 0.1838668209507146, 0.18949719264934906, 0.18873081165075634, 0.18583042326171062, 0.198080421425749, 0.19196689216510987, 0.19464569819888033, 0.1873368726189123, 0.0863230428836056, 0.07490029564434497, 0.07662091831636808, 0.08270404577762425, 0.07561558627274922, 0.08910635539448453, 0.07660805020986206, 0.09029515532295862, 0.07759467102179929]}, "mutation_prompt": null}
{"id": "1d2725a8-c627-489b-b3ed-433a9b30143a", "solution": "import numpy as np\n\nclass EnhancedProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(3.0 * np.sqrt(dim))  # Modified initial population size for diversity\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Changed DE scaling factor for more exploration\n        CR = 0.85  # Changed crossover probability for more aggressive trials\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 1.2)  # Adjusted adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.75, 0.90)  # Narrower adaptive CR range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)  # Adjusted reduction scale\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedProbabilisticAdaptiveHybridOptimizer", "description": "An enhanced probabilistic adaptive hybrid optimizer combining evolutionary strategies and adaptive diversity control for superior convergence.", "configspace": "", "generation": 65, "fitness": 0.3736839838561173, "feedback": "The algorithm EnhancedProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.7170222174635131, 0.867558776136399, 0.8077274923041536, 0.7062365964728836, 0.8731135549907604, 0.8245294903049437, 0.7241815484410845, 0.8631246677142373, 0.7965831859277459, 0.5570289782206215, 0.7870237142190015, 0.6366493456754951, 0.5767654593956089, 0.7501552928565334, 0.6673502867165154, 0.5971133739109494, 0.7536832143041213, 0.6557194943258144, 0.24728278875381537, 0.13744202621976676, 0.2658210781129231, 0.2881172158218025, 0.3357390052985366, 0.35985091344555953, 0.36846308737808053, 0.2932369373647873, 0.3766778544862549, 0.11937269928965366, 0.14735318671809927, 0.20118681468522726, 0.24549465331283626, 0.15302838338976776, 0.16703803083389734, 0.13013647706171683, 0.15067093024524947, 0.22903835762127156, 0.9666908806594099, 0.9661332472136108, 0.9712332287721376, 0.9848585687029187, 0.9621547925870005, 0.9503368122814329, 0.9579560324889609, 0.9655695257342742, 0.9757265598643079, 0.4682584058255589, 0.6270042149029187, 0.5247000495436568, 0.47093763880863215, 0.5845425063532756, 0.4859706844075431, 0.4293081073331638, 0.620470930532059, 0.47352195986694146, 0.5638755310345505, 0.7909641033559176, 0.7317886175059337, 0.559965691554325, 0.817730733100299, 0.6306683323384833, 0.5794671786639716, 0.8432408482275451, 0.603487697934251, 0.3660007002405725, 0.37256776625757315, 0.4934844280905337, 0.3897264211227258, 0.35405503945846184, 0.4537350712798569, 0.37844537851600846, 0.33954234842852393, 0.35885459241524664, 0.015908427334057174, 0.37720321428397596, 0.009780305707715709, 0.35838324662878007, 0.4001803832606603, 0.37029068101218265, 0.34826815135863065, 0.49792154985659887, 0.2739661778660788, 0.21306632788592816, 0.3695642234606952, 0.20024498312000305, 0.1588866275824441, 0.3924679335956569, 0.2275856723533094, 0.16182439581344366, 0.35358227411709653, 0.2250194172137573, 0.3398452063373414, 0.4690637781103404, 0.39507047152302033, 0.3042551341444124, 0.4614288450029992, 0.31220278863397366, 0.273067445760768, 0.5100025806829664, 0.3642168882855352, 0.05936550360592441, 0.09571969132220692, 0.035872641172611464, 0.07402695375329893, 0.16809743025046486, 0.09876607026668494, 0.114616539889149, 0.24857744640562696, 0.11184052633811292, 0.24847835536320295, 0.3342963306852784, 0.2566625518669732, 0.2645934921535372, 0.31403551924034956, 0.23058542998344211, 0.2186253928306925, 0.3324619584212747, 0.2342427334763788, 0.6003448266503967, 0.726955952956552, 0.6372138599626487, 0.5926676317860178, 0.7650662712133622, 0.6294170169816968, 0.57184062141389, 0.7369828483332994, 0.6484760645160239, 0.09378199642688889, 0.12837295405687088, 0.11161613450404728, 0.08564767423320796, 0.1002494156623166, 0.09466537777072681, 0.09657154619468455, 0.12463739510027394, 0.1008095524567807, 0.3488791470618686, 0.14922724481173788, 0.25886704383307146, 0.18159245357684695, 0.13792570851687413, 0.155198596016338, 0.25661726686932085, 0.1864088152687967, 0.19860955556495152, 0.35625547398549784, 0.4263092841772075, 0.36344412596537445, 0.34371126317819256, 0.3647133569046428, 0.33737437266394577, 0.36174977884650483, 0.4983063803555856, 0.4542622154217737, 0.22380578748627455, 0.3246336050940839, 0.26695818144670913, 0.25980672473907707, 0.296307458944973, 0.24979873752265314, 0.28129738645201874, 0.37850466196952204, 0.2653015176963309, 0.17351918088044804, 0.17916364056671064, 0.1875740920640765, 0.18364705700178885, 0.1906050000249726, 0.17499845873232667, 0.16102433089420154, 0.19725401205244775, 0.2098873124478119, 0.1921199103110498, 0.1931298062715031, 0.20085393559298392, 0.3633511564109645, 0.4014174564001838, 0.39199151732121684, 0.393316003956365, 0.5254173379089802, 0.31974087161928455, 0.6961518761160439, 0.1784690531208034, 0.17750682957780994, 0.17391703647539758, 0.1769773309529732, 0.6199568128640309, 0.15534986220797142, 0.20513178805778065, 0.18743336102485053, 0.566745814507706, 0.7645079428329149, 0.6724312303060379, 0.15633252582403312, 0.2012156135348423, 0.6321980174245927, 0.20885892595782707, 0.20783736107735018, 0.7452055098182067, 0.17604549593417507, 0.18476927689514977, 0.20735025278560193, 0.1749271674441748, 0.18440009322384354, 0.17752101597925052, 0.1964997265188687, 0.18514888014432618, 0.18926197267662936, 0.07419584763353215, 0.09697636015062361, 0.06855427559922933, 0.07248453886585249, 0.08966020119769114, 0.07440807239129776, 0.06876728174376312, 0.07211971192308009, 0.07157563230609287]}, "mutation_prompt": null}
{"id": "11437771-bbcb-4bc9-b3e8-80f888e4d087", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85\n        CR = 0.8\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.5, 1.2)\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.6, 0.9)\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer with enhanced differential evolution and adaptive learning strategies for robust black-box optimization.", "configspace": "", "generation": 66, "fitness": 0.4071491042989556, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.8731462838654169, 0.8019071890413283, 0.8420466217027957, 0.8867089873340754, 0.8257596054980154, 0.8702143885715986, 0.875319159029157, 0.8277559160577119, 0.8437421708420589, 0.8170954452349128, 0.7271450821894749, 0.7591505368008795, 0.8010500691360466, 0.7124590694317892, 0.736425076256563, 0.792840391242399, 0.7147524557515144, 0.744588823109537, 0.3937995063569518, 0.34333093371658174, 0.46740842245099234, 0.42680298934141847, 0.38715640135857465, 0.48069355861274965, 0.48213407654132967, 0.40654014786063075, 0.5959645546090161, 0.1545965544695751, 0.12764990413502475, 0.40340435995278334, 0.2851866418916703, 0.132747754554834, 0.34585889838149786, 0.3198205234861321, 0.1333473293371057, 0.3664938992965511, 0.9802490916830902, 0.9692418415259602, 0.9833359731093174, 0.967333661454401, 0.9689617131286542, 0.975674957146253, 0.9730392392495762, 0.9665460298249479, 0.9689003135661544, 0.7032553788914402, 0.5361167887583221, 0.5524311231998371, 0.6686771438859416, 0.5310192276047461, 0.5806958685033495, 0.6395636300910216, 0.5327100251714316, 0.5527824448334628, 0.8226538023036889, 0.7588867798748508, 0.6062211227857337, 0.8011033367911672, 0.774816232306502, 0.7021227279981883, 0.8121184597395835, 0.7443449658078376, 0.7054843642289872, 0.29605097543829273, 0.3680531554602976, 0.3720987625657969, 0.5102141322934786, 0.3085195344161572, 0.27627541117392507, 0.20499515953180003, 0.3338700267788931, 0.24821022073441001, 0.28736892684240445, 0.009917999510766107, 0.17934547462641892, 0.2414452396618635, 0.25706561578026144, 0.31419598352993516, 0.20006619573570616, 0.12394772310595237, 0.21237569230665532, 0.35375555173608764, 0.26782355807897773, 0.2360248645118458, 0.4909842186188752, 0.2666581140717825, 0.1356293861578246, 0.45816801308847355, 0.2722000886675161, 0.21429220745508604, 0.5317587623053772, 0.33274233850785795, 0.3057807641650391, 0.5699685424202371, 0.33212104004672294, 0.28997585327641395, 0.5846480007851511, 0.3933942035303293, 0.37177425424181, 0.15643681179605284, 0.09703504462025847, 0.06194866646830721, 0.23146748142674534, 0.09623907305790813, 0.13275022832001282, 0.17462715969701315, 0.08525530574222462, 0.12498264658672142, 0.4258967895712088, 0.25476828407372054, 0.2503001246677785, 0.3742125328154764, 0.2979025184945573, 0.2590070210716653, 0.34692179352970576, 0.26200662093154437, 0.23507622490100688, 0.782698160557431, 0.6651363545639087, 0.6387463523957921, 0.7507559618142716, 0.6244858991071185, 0.6599495992198616, 0.7802507166956433, 0.6351812372484319, 0.623662094861968, 0.12366370169091623, 0.09684893896037117, 0.09814601123217903, 0.0938943844736565, 0.10494526436475704, 0.09390502786066768, 0.10308315442880334, 0.12202443214762915, 0.10058952347065497, 0.14675450076816798, 0.1661347971962518, 0.17660030577030972, 0.15109427150469146, 0.19276832207459615, 0.16913020377752797, 0.15744664130661534, 0.25507238947713395, 0.15250476944223268, 0.5156821169514179, 0.3754263256515078, 0.42290991045333814, 0.5521431389603492, 0.4127778124688316, 0.42894208218436947, 0.6127724265512848, 0.4618079223281407, 0.5319922484824062, 0.38030213878096797, 0.30238585579448785, 0.29997857668646755, 0.3281154097958413, 0.2517522460521171, 0.30799295707443497, 0.4539624721343182, 0.33611570727977313, 0.3750238556905341, 0.20986847862923907, 0.19278467796542664, 0.18203338365659882, 0.19198471038219778, 0.17488019394582133, 0.19632989933761813, 0.21201948097172285, 0.17444001502998852, 0.18447342888942708, 0.5742557085200647, 0.300691263623859, 0.3913592003737275, 0.3351319414787074, 0.2626884479387225, 0.41419684555163927, 0.5805822079742267, 0.3554764616924039, 0.46958394348113475, 0.6969693788747795, 0.15902887185958592, 0.18331084927866337, 0.17491048552624855, 0.8111247524379577, 0.4907387201278437, 0.8068975672884933, 0.20086879566016025, 0.5762848622076737, 0.8157518948633578, 0.20515888835451956, 0.6240972233938138, 0.5236519285985425, 0.19938519369186214, 0.19826441091243208, 0.20948758605730378, 0.20712218692694417, 0.5679050834040936, 0.19006684185700196, 0.17936975498442465, 0.1805573146633267, 0.1876956067132729, 0.15768042771273227, 0.18798101032819792, 0.181909104028112, 0.17840517181244397, 0.19146948216583815, 0.08284564928802995, 0.07450750122770677, 0.0736701467448907, 0.08112156305297247, 0.07450869227723544, 0.09307053290285472, 0.09168975510611632, 0.09085815882756965, 0.0756243363992426]}, "mutation_prompt": null}
{"id": "7c47d702-4645-4b9b-9a80-46c9d7c60b43", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(1.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor for more exploration\n        CR = 0.75  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.3, 0.3)), 0.4, 1.2)  # Broadened adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.6, 0.9)  # Broadened adaptive CR range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Slightly earlier reduction threshold\n                new_population_size = max(int(self.initial_population_size * 0.5), 5)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A hybrid optimizer combining adaptive differential evolution with stochastic learning and dynamic population management for robust optimization.", "configspace": "", "generation": 67, "fitness": 0.4210764661450391, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.26.", "error": "", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.8847177980770125, 0.8457766107183522, 0.8728566454475102, 0.8847500216908873, 0.8568229040873461, 0.8855396904088816, 0.9033080512764382, 0.8483467319593312, 0.8899075993337371, 0.7937198698033906, 0.7702927043848318, 0.7832658767558688, 0.7782761010954501, 0.7588716160429098, 0.8050568117711634, 0.793770022703858, 0.7620257793398008, 0.8022570233156034, 0.503795922977869, 0.4527882541022997, 0.46054138833136504, 0.5309705564252095, 0.4495221394175203, 0.35629207743158176, 0.49716785738351876, 0.373698273895987, 0.3961897122308121, 0.4931618869463783, 0.4064828462256973, 0.3635371193286585, 0.5637348387439792, 0.3795832869447954, 0.1575908047428688, 0.4702749632816481, 0.15578158654384866, 0.38338317964617785, 0.980445189448968, 0.9799087105384249, 0.968305120853205, 0.9659673471897751, 0.9755857545722614, 0.9629319360935085, 0.9944165577167411, 0.9596449471611102, 0.9653988359402336, 0.60371206948225, 0.6094274627218781, 0.6582934913826172, 0.6253673007471992, 0.618656065082396, 0.631838769893656, 0.5109155552918057, 0.08750398897588219, 0.47866403799896784, 0.7508970348149917, 0.782050654498141, 0.8087298092160654, 0.745327820258366, 0.7517399359387941, 0.8020557846893669, 0.6335669445553477, 0.8001424257571667, 0.7452867833711131, 0.26034916879157965, 0.3347810944210249, 0.4867690830730008, 0.2184389098053855, 0.2503175914835838, 0.52576409883142, 0.4795889363224747, 0.22480327090467378, 0.1789415292032389, 0.22611108126563373, 0.45175612170590285, 0.5747241165436205, 0.19670972820415034, 0.18075166156601374, 0.5114208152395775, 0.2842916423578591, 0.1977599408191354, 0.21543993120833338, 0.14584558224031008, 0.20617390541262715, 0.3165494466039529, 0.2212902426575145, 0.28592793513724424, 0.22612380356008288, 0.2071504197605425, 0.2640041488326308, 0.2793287248059453, 0.2698893185431389, 0.47574595618230675, 0.41484483100209313, 0.33035185119041977, 0.4031527735429158, 0.3757250811248387, 0.4837913575188171, 0.4076683268319946, 0.5190116246407677, 0.1201059096382856, 0.037687113345490464, 0.15458615689837663, 0.08813127685692324, 0.20404390985144738, 0.21248901309491763, 0.20999507640740944, 0.12643854188469617, 0.12943848497564958, 0.2864760658444966, 0.2952357034419195, 0.3288269127352088, 0.3201046188228145, 0.3420108018615501, 0.3589729719885095, 0.29408744205930915, 0.31093213317131174, 0.29559405606797895, 0.6564522045141654, 0.6755035370358993, 0.7899053446716506, 0.7069892816210401, 0.7066553139438734, 0.7484698603699815, 0.7257234977203046, 0.7084837897262259, 0.678228442063859, 0.11786120184876514, 0.11497883898432482, 0.11440504254582196, 0.15121224923284537, 0.10464776014078958, 0.14521831229076265, 0.11917963228538409, 0.09909180665851636, 0.11870984856575428, 0.17710002708709327, 0.12919924248559733, 0.15395562612114444, 0.3063516644602161, 0.33137257111486507, 0.1371486780385086, 0.15601687401838993, 0.3122812766642288, 0.15965178075558228, 0.4996711039910722, 0.4411346431851424, 0.47549883467069065, 0.488852529879634, 0.5192423295816451, 0.4962928412715193, 0.6044972765279999, 0.4970649152292136, 0.521418222893272, 0.3062407107927323, 0.3489312238185316, 0.3412983563801325, 0.3199449365236461, 0.3410789830844345, 0.3378290977360485, 0.4001528278266644, 0.38389726262730617, 0.4003481507999731, 0.22623801797449172, 0.20547363885658176, 0.19380517990809154, 0.1881821743735682, 0.19696116224414184, 0.2043195982102778, 0.2099837736095217, 0.17465866118388562, 0.18884504354752885, 0.23038857146061065, 0.23511274283865102, 0.4387888679477302, 0.4766522552535015, 0.5304751434594298, 0.5421949932091594, 0.6588924082955322, 0.5411392748214792, 0.2678396216165426, 0.17891811593925633, 0.15956215242454141, 0.8365565231185554, 0.7593819953398115, 0.18191381026727171, 0.7544499928277726, 0.7377905294604509, 0.1581240985105109, 0.18465053373773577, 0.6998738007757326, 0.20348349806888877, 0.6925542315833229, 0.20430388671845234, 0.19382876210995714, 0.6945411945273178, 0.20593884214857672, 0.20779591564888333, 0.19994804125529864, 0.1874950361655502, 0.18465181203616754, 0.18962269662498699, 0.17032511546887164, 0.19969541998374885, 0.20267934897390127, 0.19363725136648247, 0.18812757631073274, 0.1867863194403001, 0.08851682103594483, 0.08453551915091306, 0.0907456387642096, 0.08546007555462765, 0.0806313456665263, 0.07857302684219902, 0.08522444829906795, 0.07496222431910649, 0.09180287898293227]}, "mutation_prompt": null}
{"id": "49df1263-94d1-4fbf-8f62-b613ce9ad066", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(1.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.75  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.3)), 0.6, 1.2)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.02, 0.08), 0.7, 0.9)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.7)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer with enhanced learning and adaptive population size adjustment, integrating multiple strategies for improved performance.", "configspace": "", "generation": 68, "fitness": 0.23229313476748445, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.5493661004915589, 0.5304209444764878, 0.5216260439717224, 0.6026986195982327, 0.5925697538633319, 0.5441790819000889, 0.5667308829680509, 0.5887308012848043, 0.5427959071987507, 0.34577914284069644, 0.33243388894982784, 0.0681075794683964, 0.298786226653716, 0.3457330528984105, 0.3518543566792668, 0.33134079438180375, 0.015933856564755433, 0.3655271522324869, 0.08878432826228255, 0.10455426097313392, 0.13171379636246927, 0.11084123503640853, 0.0867547561613159, 0.10172627142577695, 0.07849847707808144, 0.09699319644968096, 0.09585275469506993, 0.08513437388347134, 0.08308592709961649, 0.07127277307069069, 0.08678397940176674, 0.08333898072121215, 0.10011709025127824, 0.07880613454958052, 0.0870791686679433, 0.10643083139349097, 0.9720540967891319, 0.9661897390128145, 0.976356156107764, 0.9757718185590509, 0.9628334669978089, 0.96483563330693, 0.9944165577167411, 0.9721954784775845, 0.9832730832095643, 0.26605430888261483, 0.21819419967632525, 0.2107678224914854, 0.2195239319868042, 0.23847514456965313, 0.2544817249306971, 0.27721367536303687, 0.27157000989199287, 0.2615133237514967, 0.2634203153633029, 0.44535847884477175, 0.33098237241304496, 0.3888867075579213, 0.35809036493082236, 0.36977579686737394, 0.24439800095399156, 0.500767615825045, 0.4523180998771067, 0.16899386728348276, 0.1685807160061571, 0.13185392440333743, 0.07249636606945331, 0.1306716179649713, 0.17149852566560841, 0.1551705683934439, 0.1833352348010756, 0.17445461208658875, 0.020882966735687347, 0.009949874455243646, 0.22886137646958693, 0.171210781354458, 0.16191452862113587, 0.12521375510926558, 0.15152504214377638, 0.12560757021646352, 0.16470230760798077, 0.07478329194925704, 0.035298699394114785, 0.07932894342356889, 0.000488926755256025, 0.0004542208198002884, 0.08555234465313644, 0.11231114128046338, 0.07763141566577447, 0.07662250142061389, 0.18382700590254164, 0.13677703863394708, 0.2246965899279143, 0.17041513320926083, 0.1831015933118859, 0.269433892791499, 0.21962851184399135, 0.24053484404264724, 0.21153079836420297, 0.016929284886302742, 0.020970906251042698, 0.02522709828963121, 0.022380548894176955, 0.002168240389374132, 0.01783307438023951, 0.04765542780482124, 0.02077121438662255, 0.002599785561083312, 0.11356566992893147, 0.10519561299939983, 0.12161949063048871, 0.11312833654856824, 0.12627893015547198, 0.1287516628153097, 0.11852455676883422, 0.09344603807008667, 0.11057291097058586, 0.4468511993502756, 0.4091206340650996, 0.4246371991569764, 0.43656901828202377, 0.17991559751616626, 0.438267770525525, 0.43186292263099746, 0.4654247145337298, 0.37643717394038523, 0.0824876291207578, 0.09457232341562738, 0.07935711324383743, 0.07028034219212209, 0.07118096931956919, 0.08415642730420281, 0.0775893542797168, 0.0681971772021559, 0.07224720435908327, 0.14140603038464705, 0.14421564214008775, 0.14189096547856495, 0.17610405907395432, 0.20568229018717643, 0.1702444373365115, 0.14034744368747432, 0.30931457463516987, 0.2083602592922258, 0.22284579724855025, 0.2535086780398811, 0.23565710688803698, 0.21528602204461078, 0.23114753718987058, 0.22261938815232374, 0.25284177112518813, 0.2346796450214319, 0.24273619279499048, 0.16042771320074367, 0.19316338707987035, 0.16850002877707082, 0.18469516280996667, 0.15988357170239942, 0.1545761028823125, 0.17257429177407901, 0.1973100744268378, 0.16958805301479662, 0.20989466492334719, 0.15359625383446673, 0.17337927976329015, 0.16208982990691223, 0.16726805371989617, 0.1759851787586869, 0.16892925197226794, 0.1675111178540568, 0.16427469076867418, 0.1877412896132049, 0.16936011195571665, 0.18964495279239102, 0.20604432865721578, 0.18089475238385555, 0.15915140768672154, 0.17430698267646116, 0.1713521724964867, 0.18560700250788154, 0.5357633003313533, 0.1673295531108484, 0.6693700787711703, 0.4215065245601438, 0.6229812152190752, 0.1816971056564176, 0.4769387514582587, 0.16987838085375584, 0.17644625794365343, 0.38789453127503637, 0.16513091645533695, 0.1824355426214036, 0.32466445878264927, 0.1694584084241162, 0.17318920158143392, 0.20245833014495596, 0.40603924043934325, 0.19739253960299008, 0.20421908788021936, 0.19223436511529057, 0.1813488726863276, 0.17865750946799963, 0.16364275606114354, 0.16513212141936706, 0.1640434496296802, 0.17614045516416976, 0.1545433608213278, 0.06280748847035267, 0.05220145448277835, 0.06496752941422823, 0.07084542875626998, 0.061991467480648876, 0.06027366960908698, 0.06127797036611882, 0.063403247308083, 0.062160454543957355]}, "mutation_prompt": null}
{"id": "c7bb9dec-c93d-4bf1-b928-7186855ffd90", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.65:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.65)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer integrating evolutionary algorithms with adaptive learning and diversity maintenance for enhanced optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.8823432266353266, 0.839099354314307, 0.8627238126369267, 0.8793548614354979, 0.8462227367756081, 0.851221893140268, 0.8938113906903886, 0.8638731844080552, 0.8755250873579999, 0.8117078382543463, 0.7582066208739706, 0.759215026918387, 0.8019501898590244, 0.7584926872563975, 0.7544045339385308, 0.7997380697790564, 0.7857105222391862, 0.7614304834099749, 0.421804305417359, 0.40991703750234343, 0.36030982887845964, 0.40566167761481164, 0.2701301557172535, 0.39535421756905376, 0.39579036808079704, 0.3049726923064251, 0.3535612184754028, 0.15606852828585493, 0.2089091661534176, 0.45434070221774214, 0.14325000085102924, 0.14029371308252847, 0.1329748060305419, 0.16580712980347467, 0.1346571962537224, 0.3910277638284315, 0.9659629929430816, 0.9680202287119779, 0.9815722279654618, 0.9735554024925218, 0.9773021666198178, 0.9852799743134433, 0.9800664621736415, 0.9608941598107417, 0.9784506903519795, 0.6484441010605282, 0.6183931898779613, 0.6145926249216233, 0.6649291371793365, 0.6474046283610236, 0.6074896589110151, 0.6686387714206201, 0.6299397493088694, 0.6142037186786946, 0.8404257690405555, 0.8024932681389877, 0.7527873137014696, 0.875186864500428, 0.8323564345347864, 0.7651343332832377, 0.8655844250415201, 0.8222179589085233, 0.7771612300980015, 0.4263462531923371, 0.4569548835020735, 0.4173942823283574, 0.518734663622405, 0.4213183877915767, 0.2629124481476556, 0.516008669643263, 0.5400425720976236, 0.406692880245644, 0.20395070033033103, 0.11934463967252429, 0.3277461444351054, 0.727279543093857, 0.5021432619330677, 0.3945771660179149, 0.40704571149531976, 0.5425982925721025, 0.4894972182542122, 0.6438087860919925, 0.5738203265302759, 0.33456694203629744, 0.2760138033099583, 0.5692209036524079, 0.31309894860532217, 0.5705122855163822, 0.5694633660643671, 0.33190339790395185, 0.6459745720350152, 0.653757504767156, 0.3785620295102594, 0.7088756149546386, 0.6196263634362758, 0.36263585632695783, 0.7118295534760009, 0.6800986858817699, 0.5290965212979436, 0.1568368483304281, 0.2334121952925834, 0.09003297342228544, 0.22018080900498127, 0.46987836455680376, 0.2520505911213716, 0.23609036229968794, 0.19572668450684882, 0.09848921341541095, 0.5027618111289459, 0.40890232965218676, 0.31387419824873075, 0.4938278771709622, 0.4137976849782684, 0.32990989887961886, 0.5350361664464347, 0.4063280225453534, 0.3049374626581888, 0.8282036612975134, 0.7783039456669212, 0.7173444514083729, 0.8308911898335668, 0.7797523328148401, 0.7026842838860987, 0.8303271722079056, 0.7793801811572965, 0.7196358865964607, 0.09901607619929931, 0.09148746211806391, 0.10310325460072978, 0.09988147758629384, 0.1224889227014373, 0.11224378428062631, 0.11951830026253085, 0.09696686868552884, 0.11037076819459357, 0.17814608035073376, 0.16961025622286363, 0.14244975297086826, 0.15846322138129743, 0.1514373718644323, 0.18327511035222344, 0.18582013528724117, 0.19187950506620832, 0.18189739611860178, 0.5089511602445164, 0.5146154440934927, 0.5394057915171615, 0.5726524474031225, 0.467120667985498, 0.4484071349842387, 0.5788609062985959, 0.4962772783955094, 0.48065757940170617, 0.44664342739446683, 0.35066841603072374, 0.34667603755674237, 0.453790138392828, 0.39221073412056395, 0.3076526258425789, 0.445332785320972, 0.3899014479927221, 0.3113806084063321, 0.18961620768560417, 0.2052356218964696, 0.18150068225183136, 0.19548785022658544, 0.18287155119297527, 0.20153598527955796, 0.20959560342011607, 0.17507761853379367, 0.1973564782475763, 0.48752678662084004, 0.5462369746316271, 0.36065613582319034, 0.20361300748711453, 0.41593181529720713, 0.3992279798820295, 0.2189933429585087, 0.5414758673996679, 0.560774750825108, 0.1801828780071546, 0.8246751256241448, 0.15219649599453355, 0.1714955203788764, 0.20301418641593583, 0.7491596043169686, 0.7844756025997353, 0.17536561911488802, 0.6794310898923288, 0.16540624083272237, 0.20449692904063255, 0.20344892597815445, 0.2056432159380821, 0.20634863497953104, 0.19346228439783175, 0.1512750284282972, 0.20810232609366808, 0.1531881776955617, 0.1833812541894314, 0.1838668209507146, 0.18949719264934906, 0.18873081165075634, 0.18583042326171062, 0.198080421425749, 0.19196689216510987, 0.19464569819888033, 0.1873368726189123, 0.0863230428836056, 0.07490029564434497, 0.07662091831636808, 0.08270404577762425, 0.07561558627274922, 0.08910635539448453, 0.07660805020986206, 0.09029515532295862, 0.07759467102179929]}, "mutation_prompt": null}
{"id": "401fe862-ed59-458c-b4f5-d96d512d261c", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.85  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.2, 0.2)), 0.5, 1.0)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.05, 0.05), 0.7, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.65:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.65)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer integrating evolutionary algorithms with adaptive learning and diversity maintenance for enhanced optimization.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.8823432266353266, 0.839099354314307, 0.8627238126369267, 0.8793548614354979, 0.8462227367756081, 0.851221893140268, 0.8938113906903886, 0.8638731844080552, 0.8755250873579999, 0.8117078382543463, 0.7582066208739706, 0.759215026918387, 0.8019501898590244, 0.7584926872563975, 0.7544045339385308, 0.7997380697790564, 0.7857105222391862, 0.7614304834099749, 0.421804305417359, 0.40991703750234343, 0.36030982887845964, 0.40566167761481164, 0.2701301557172535, 0.39535421756905376, 0.39579036808079704, 0.3049726923064251, 0.3535612184754028, 0.15606852828585493, 0.2089091661534176, 0.45434070221774214, 0.14325000085102924, 0.14029371308252847, 0.1329748060305419, 0.16580712980347467, 0.1346571962537224, 0.3910277638284315, 0.9659629929430816, 0.9680202287119779, 0.9815722279654618, 0.9735554024925218, 0.9773021666198178, 0.9852799743134433, 0.9800664621736415, 0.9608941598107417, 0.9784506903519795, 0.6484441010605282, 0.6183931898779613, 0.6145926249216233, 0.6649291371793365, 0.6474046283610236, 0.6074896589110151, 0.6686387714206201, 0.6299397493088694, 0.6142037186786946, 0.8404257690405555, 0.8024932681389877, 0.7527873137014696, 0.875186864500428, 0.8323564345347864, 0.7651343332832377, 0.8655844250415201, 0.8222179589085233, 0.7771612300980015, 0.4263462531923371, 0.4569548835020735, 0.4173942823283574, 0.518734663622405, 0.4213183877915767, 0.2629124481476556, 0.516008669643263, 0.5400425720976236, 0.406692880245644, 0.20395070033033103, 0.11934463967252429, 0.3277461444351054, 0.727279543093857, 0.5021432619330677, 0.3945771660179149, 0.40704571149531976, 0.5425982925721025, 0.4894972182542122, 0.6438087860919925, 0.5738203265302759, 0.33456694203629744, 0.2760138033099583, 0.5692209036524079, 0.31309894860532217, 0.5705122855163822, 0.5694633660643671, 0.33190339790395185, 0.6459745720350152, 0.653757504767156, 0.3785620295102594, 0.7088756149546386, 0.6196263634362758, 0.36263585632695783, 0.7118295534760009, 0.6800986858817699, 0.5290965212979436, 0.1568368483304281, 0.2334121952925834, 0.09003297342228544, 0.22018080900498127, 0.46987836455680376, 0.2520505911213716, 0.23609036229968794, 0.19572668450684882, 0.09848921341541095, 0.5027618111289459, 0.40890232965218676, 0.31387419824873075, 0.4938278771709622, 0.4137976849782684, 0.32990989887961886, 0.5350361664464347, 0.4063280225453534, 0.3049374626581888, 0.8282036612975134, 0.7783039456669212, 0.7173444514083729, 0.8308911898335668, 0.7797523328148401, 0.7026842838860987, 0.8303271722079056, 0.7793801811572965, 0.7196358865964607, 0.09901607619929931, 0.09148746211806391, 0.10310325460072978, 0.09988147758629384, 0.1224889227014373, 0.11224378428062631, 0.11951830026253085, 0.09696686868552884, 0.11037076819459357, 0.17814608035073376, 0.16961025622286363, 0.14244975297086826, 0.15846322138129743, 0.1514373718644323, 0.18327511035222344, 0.18582013528724117, 0.19187950506620832, 0.18189739611860178, 0.5089511602445164, 0.5146154440934927, 0.5394057915171615, 0.5726524474031225, 0.467120667985498, 0.4484071349842387, 0.5788609062985959, 0.4962772783955094, 0.48065757940170617, 0.44664342739446683, 0.35066841603072374, 0.34667603755674237, 0.453790138392828, 0.39221073412056395, 0.3076526258425789, 0.445332785320972, 0.3899014479927221, 0.3113806084063321, 0.18961620768560417, 0.2052356218964696, 0.18150068225183136, 0.19548785022658544, 0.18287155119297527, 0.20153598527955796, 0.20959560342011607, 0.17507761853379367, 0.1973564782475763, 0.48752678662084004, 0.5462369746316271, 0.36065613582319034, 0.20361300748711453, 0.41593181529720713, 0.3992279798820295, 0.2189933429585087, 0.5414758673996679, 0.560774750825108, 0.1801828780071546, 0.8246751256241448, 0.15219649599453355, 0.1714955203788764, 0.20301418641593583, 0.7491596043169686, 0.7844756025997353, 0.17536561911488802, 0.6794310898923288, 0.16540624083272237, 0.20449692904063255, 0.20344892597815445, 0.2056432159380821, 0.20634863497953104, 0.19346228439783175, 0.1512750284282972, 0.20810232609366808, 0.1531881776955617, 0.1833812541894314, 0.1838668209507146, 0.18949719264934906, 0.18873081165075634, 0.18583042326171062, 0.198080421425749, 0.19196689216510987, 0.19464569819888033, 0.1873368726189123, 0.0863230428836056, 0.07490029564434497, 0.07662091831636808, 0.08270404577762425, 0.07561558627274922, 0.08910635539448453, 0.07660805020986206, 0.09029515532295862, 0.07759467102179929]}, "mutation_prompt": null}
{"id": "2e024016-5492-462b-8f0c-b3e5bc4db57f", "solution": "import numpy as np\n\nclass ProbabilisticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(1.5 * np.sqrt(dim))  # Modified initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.7  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.4, 1.2)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.6, 1.0)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticAdaptiveHybridOptimizer", "description": "A probabilistic adaptive hybrid optimizer that integrates evolutionary algorithms with enhanced adaptive techniques and dynamic population control for improved optimization performance.", "configspace": "", "generation": 71, "fitness": 0.3164728795197278, "feedback": "The algorithm ProbabilisticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.7034157532531458, 0.7298735855937206, 0.6811741802324021, 0.7134896922484476, 0.7776391207698207, 0.6963629784069236, 0.6942048090943213, 0.7369094980678774, 0.6750109037420826, 0.5184595306640185, 0.583499565379732, 0.517213918662866, 0.536916127046707, 0.5835321394778556, 0.5271530851428903, 0.01674606826051206, 0.6100248882657826, 0.5516277338468139, 0.1229578530868568, 0.16281096349474922, 0.1609621145982998, 0.15526408831049754, 0.16721731043885224, 0.11330425953930734, 0.11958924750671662, 0.13403818283827473, 0.14529548525054814, 0.17646995252685538, 0.18318653976844246, 0.11754555063764838, 0.13090948754625642, 0.1111896731347708, 0.17268893430008136, 0.1079815926432075, 0.1099529015968137, 0.10880069691711391, 0.9688428135382621, 0.9685046346817566, 0.9648975537222624, 0.965541870623826, 0.9578356127313821, 0.990070574989791, 0.9753354503643951, 0.9696816370355172, 0.9823693904510739, 0.058297823713744035, 0.4269313724650351, 0.3839454563871142, 0.40308496702117425, 0.3981424058221983, 0.3878028164608135, 0.39407372272660923, 0.453454152915054, 0.3851826959614951, 0.5690136415117073, 0.6163036950852793, 0.5295659985893217, 0.5936897629704974, 0.59549184395404, 0.5409752107275896, 0.566491325543044, 0.6370879167960981, 0.5393901961556637, 0.23951043560870777, 0.41960974202685386, 0.19539003741726102, 0.27081916840637765, 0.2728408456196153, 0.2475886457534946, 0.24475211767931238, 0.35787220308332013, 0.23469536689568238, 0.009890335829305319, 0.2199838845232963, 0.3045954307973062, 0.23797718508785382, 0.23881585759483004, 0.22846263412606826, 0.3607887760010844, 0.25966859031445466, 0.21358067435201344, 0.19348272247192588, 0.3411740741688052, 0.16396262383791949, 0.23122229272622108, 0.2888233030930317, 0.15984656736883385, 0.1723011842443659, 0.23563717416401186, 0.17776371420740777, 0.32468632609745296, 0.335619002301745, 0.27764937953013014, 0.2704167803795541, 0.37076551682921954, 0.28993474148019305, 0.3484820576759773, 0.4277423970281058, 0.3489802227262988, 0.058477858513282466, 0.1322008542478652, 0.11502038432763106, 0.1379460071305877, 0.19343240086100122, 0.06729166395889408, 0.10314405659629189, 0.10846830266034957, 0.09066026532380689, 0.1770751085553507, 0.2654469200943268, 0.17438455641800843, 0.2061061250511006, 0.2717468224098184, 0.21394936175451496, 0.20767780013871429, 0.24156654964008306, 0.1945737571879217, 0.5457801632530184, 0.6157468810999184, 0.534559271049992, 0.5531610082321969, 0.620819023838307, 0.5233315830326283, 0.510694807408673, 0.6053551989818386, 0.49984254201376255, 0.10713945099974731, 0.08461295252384426, 0.091619763704475, 0.09235915648415627, 0.09378369006698672, 0.07972836190025956, 0.09599091532627813, 0.09776436891859552, 0.0812651628019394, 0.3846706210956159, 0.19067569562199138, 0.16571857116831357, 0.14260431121030614, 0.1541295842942071, 0.1552211523849364, 0.15487778868202018, 0.1397502830913372, 0.14720361186998887, 0.34233626939494344, 0.408457631027455, 0.3055908116823043, 0.333121687427837, 0.3615244108291137, 0.2968575843591653, 0.36248729191710927, 0.43468193568473845, 0.35915004847810605, 0.25311054542934697, 0.2792119682920021, 0.21100668083865992, 0.2805713914447555, 0.25751461808597353, 0.23870502031250818, 0.25190124900124267, 0.30891823618976055, 0.25460281150852193, 0.18306548342245887, 0.18662528795092903, 0.18773588716376577, 0.17329787021656862, 0.175949234943778, 0.17928049792059186, 0.18607475160394493, 0.18523634517606058, 0.18844189192599248, 0.19125076487524195, 0.32668494012270877, 0.2543220007828547, 0.21498027773384498, 0.3087793099462023, 0.1828586605520479, 0.19050504523428424, 0.2702680384770392, 0.19243389806284872, 0.1641574843225837, 0.6230219979647684, 0.7559301440270754, 0.1844205489243309, 0.625224398620418, 0.17513052464646595, 0.7513179701850179, 0.5308471483992032, 0.1799038516019429, 0.16208159072563122, 0.19719546734381765, 0.19618387742126775, 0.15035617781662336, 0.2550460108927939, 0.6170847866155358, 0.19393933071819136, 0.20006342462279159, 0.20486945031364767, 0.1940637378330028, 0.18524856852914295, 0.1772317506375033, 0.1838743591673354, 0.19978880282354972, 0.19633339225516733, 0.18561538864041993, 0.18413148758171893, 0.19667648315685238, 0.07741562682697167, 0.0778409799598192, 0.06512775986739938, 0.08272083603946723, 0.07389376829992433, 0.07300901676685556, 0.06802150774854476, 0.07014903904488823, 0.06435522529696958]}, "mutation_prompt": null}
{"id": "4cf1c4ff-b402-4cdc-aea4-bba7c7d402ca", "solution": "import numpy as np\n\nclass EnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(2.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Refined DE scaling factor\n        CR = 0.85  # Refined crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.25, 0.25)), 0.6, 1.0)  # Enhanced adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.75, 0.95)  # Enhanced adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.7:  # Refined dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedHybridOptimizer", "description": "An enhanced hybrid optimizer utilizing probabilistic differential evolution with adaptive parameters and dynamic population management for efficient optimization.", "configspace": "", "generation": 72, "fitness": 0.3403096674395772, "feedback": "The algorithm EnhancedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.8203184881917384, 0.7304231516075927, 0.7373960731074822, 0.7943700726261761, 0.7565601885742856, 0.768588594866564, 0.8084526670408279, 0.7255482083713332, 0.7479672049380721, 0.675588623127167, 0.5706003458062028, 0.5836890222353073, 0.674297307383257, 0.5556630614711763, 0.5828962223123114, 0.6837225024201352, 0.5656253475909663, 0.6000381220576494, 0.1485304006272563, 0.13234082443313533, 0.10665790685812992, 0.12493382839426992, 0.11147754688214795, 0.11531788900185924, 0.19371604495885508, 0.10876119310389898, 0.13281914997981037, 0.11243757871558824, 0.10727490921478533, 0.10230100923935659, 0.14954492420479237, 0.121620682098173, 0.11338574761286668, 0.11710530906577166, 0.10740438144745645, 0.12815360816233146, 0.9756418793694388, 0.9869736359860574, 0.9385915896556267, 0.9512544359054518, 0.9795875591812431, 0.9465972503507494, 0.9606693752233743, 0.975618750329685, 0.9483644977866106, 0.46448331809589605, 0.3768437785257681, 0.3689406069637233, 0.5098357929182445, 0.3875224005246345, 0.3746755736453784, 0.4854760162729541, 0.4240233172087583, 0.40978945302467373, 0.6965080115522323, 0.6403446938033507, 0.5706995401723409, 0.8105743159415865, 0.5965047976107403, 0.5780707039495765, 0.7226358181016356, 0.5682294859897445, 0.6782237098375162, 0.4339678429210758, 0.3459863025483303, 0.3077595894266768, 0.39758957573591047, 0.29639549885707983, 0.31981711154260595, 0.4100100300282442, 0.29936905367682076, 0.2775118082235617, 0.3552041204962776, 0.40479051145369405, 0.14205175235250023, 0.39316265516427584, 0.3399920780342778, 0.2814603821529148, 0.3626746706995899, 0.3135312176720686, 0.3196317984728202, 0.2829321461792724, 0.21734801831322748, 0.19661692055948043, 0.36715219106354435, 0.16499187953585404, 0.17267840635556708, 0.333868134387291, 0.2075217727169586, 0.18362014824170847, 0.47883594521336437, 0.345158705186675, 0.31874762676567847, 0.4629496138631133, 0.31332492729932426, 0.26318955335392225, 0.44800700217820444, 0.3792079067962242, 0.36259281576485547, 0.07373346517567847, 0.06686160634287885, 0.058032058817417465, 0.09493290706434343, 0.11657254216985546, 0.044496147422506294, 0.16104228364274897, 0.08802978795450522, 0.08960710598282418, 0.2822487119277879, 0.20696893071299172, 0.2238057629635487, 0.29361530820332105, 0.23596885423081027, 0.22111807654145854, 0.2652390160250381, 0.22014011752726914, 0.2020452232016251, 0.6358360607133132, 0.5831469904226361, 0.5864696973710406, 0.6564381980965974, 0.5953008888351192, 0.5941176440925457, 0.6633561178850923, 0.5717756311498042, 0.5999961199626809, 0.11347170733219591, 0.09658811449037241, 0.08331973418328964, 0.10587666084042446, 0.08550665708657945, 0.0995891310257575, 0.09632104644659356, 0.0794390068553501, 0.08691893215941382, 0.1448723541471656, 0.20156385983857772, 0.23937043749489761, 0.23064470894678468, 0.20435504602248444, 0.1476467358949498, 0.1989813969065387, 0.33203729284229166, 0.19147678723835293, 0.3649499420072688, 0.31899296692019086, 0.3167330354449225, 0.3831737650205429, 0.29033321397267076, 0.31485406053618203, 0.406683492876327, 0.37562614631960856, 0.34533081966009693, 0.24873739841098041, 0.24640247683013572, 0.2571677386359583, 0.2599125894905585, 0.22112301525674172, 0.22498171338118778, 0.2936416651395435, 0.27078193410005647, 0.26189697413660584, 0.18318670305705476, 0.20234416862057858, 0.17453931754771657, 0.18183126822779894, 0.17536646886049345, 0.16828414697349692, 0.20497190253920894, 0.17987955899157881, 0.20168392416567582, 0.1914468560269441, 0.19456262036793814, 0.194158425721507, 0.29281970794567713, 0.3006624167805809, 0.1857949876246917, 0.272957288400674, 0.24095849448509843, 0.2062121298775771, 0.788572784272116, 0.6344969936886002, 0.16929412488469953, 0.18159540778672523, 0.6552686368891779, 0.39602944999383594, 0.6029789102366723, 0.17903004096951414, 0.4608176518513377, 0.6258543104017129, 0.20178254553617092, 0.16166129067759816, 0.198566343501408, 0.2825913388425787, 0.1955874952519263, 0.20936032193816623, 0.20383019752611886, 0.2089204664354053, 0.17551223572455, 0.18240929177670573, 0.19081614632715216, 0.1995234226129261, 0.18936984996041506, 0.1919470671013872, 0.18018762658443144, 0.19311378233372933, 0.21402343568221538, 0.08085570643079276, 0.07738826336257132, 0.07785266424849091, 0.07032883724943062, 0.06737427799395335, 0.06689801054542155, 0.08499659970612505, 0.0712139258756852, 0.07312235531888112]}, "mutation_prompt": null}
{"id": "91e62f0c-9afa-429a-9ddf-408f7dfc5a40", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(1.5 * np.sqrt(dim))  # Adjusted initial population size for diversity\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor for exploration\n        CR = 0.75  # Adjusted crossover probability for better exploration-exploitation balance\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.3, 0.3)), 0.4, 1.2)  # Wider adaptive F range for diversity\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.6, 0.9)  # Wider adaptive CR range for flexibility\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n            # Random strategy adaptation\n            if np.random.rand() < 0.1:  # Probability to change strategy slightly\n                F = np.clip(F + np.random.uniform(-0.05, 0.05), 0.5, 1.0)\n                CR = np.clip(CR + np.random.uniform(-0.02, 0.02), 0.7, 0.92)\n\n        return best_solution, best_score", "name": "EnhancedAdaptiveHybridOptimizer", "description": "An enhanced hybrid optimizer using adaptive differential evolution with dynamic strategy adjustments and stochastic parameter tuning to improve convergence.", "configspace": "", "generation": 73, "fitness": 0.37778325350571124, "feedback": "The algorithm EnhancedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.7777622200829317, 0.8034544810315708, 0.8608580762120517, 0.7933599282689564, 0.8117079834324014, 0.8743876525411115, 0.7871229556348351, 0.8167026936072291, 0.8705077656735889, 0.6469510088038346, 0.7119238115552182, 0.7486304209220687, 0.6378800957293482, 0.6823998232706101, 0.7691605275417739, 0.6388465123490473, 0.6917506675165657, 0.74651957476305, 0.2456192923204431, 0.3541131420595801, 0.4519412563648244, 0.27503276763710005, 0.4024326013258168, 0.4431261140278895, 0.31587214578956824, 0.36775379071350667, 0.5102650169549275, 0.12698152497719617, 0.1296055781769604, 0.3383064594103936, 0.2267856751116588, 0.25687352793998697, 0.14603495097970953, 0.1306862442725778, 0.3452001133826156, 0.34469318566458884, 0.9709070257150715, 0.970123609143642, 0.9619525937721137, 0.9653154844998765, 0.9812645415085085, 0.9657874482729096, 0.9733657676336623, 0.9855905150973753, 0.9768900527114399, 0.46375421632489267, 0.5379941682532612, 0.5736718882922462, 0.46348752961885686, 0.5697262751350225, 0.5767630418224162, 0.4205930204215369, 0.5895591820028837, 0.5504784632668, 0.7167775182257736, 0.7480867117421178, 0.6083759258145748, 0.7367633360916783, 0.6900805833324704, 0.7253091155746034, 0.6808341000585172, 0.7408623889772659, 0.7469715893585271, 0.2621196240408461, 0.3782480980494263, 0.2957756870195325, 0.43999688874240805, 0.24439446107539187, 0.34625340900386126, 0.4198235619457764, 0.19887876550357464, 0.36049904338057537, 0.05025818718171193, 0.009852674057082345, 0.299924657372555, 0.4385948529454119, 0.2642908742528659, 0.37617751706545877, 0.19432212474746846, 0.3026059797738806, 0.3787953349382981, 0.17942742325581496, 0.2804040226726614, 0.1671810978557836, 0.19119999641122354, 0.2097764085292112, 0.15888838344789724, 0.23212382651134855, 0.206705225813272, 0.2160984383037592, 0.3854445304333691, 0.32903722989470885, 0.29188608772554114, 0.2925553562900578, 0.293786989428075, 0.2800157322472485, 0.3994298057657125, 0.45713651394377686, 0.4045349309304862, 0.07957969794655584, 0.16797803927414334, 0.043259949764035466, 0.12729046207114092, 0.15900944303979847, 0.11459599989338154, 0.07941638610281365, 0.16253344992843832, 0.17775727111980522, 0.22742664765517284, 0.24068771706266023, 0.29159357995973345, 0.2457682165068521, 0.2961929401244161, 0.32287181134721543, 0.24121270288281826, 0.27329915365035196, 0.2770089252258431, 0.6433233789193427, 0.67748747325788, 0.6995037545027597, 0.5633854285891009, 0.6738918552968869, 0.7188981061479662, 0.6011489750730383, 0.6260437878473217, 0.7064839015932135, 0.09599982710140864, 0.11567066221251521, 0.10887481522643772, 0.10819110652574238, 0.10109166955382465, 0.10964512660262904, 0.08788155186842594, 0.09636354043106854, 0.10956204850263873, 0.17921250960725088, 0.13703342152699238, 0.15282061245042788, 0.2418521202792594, 0.1420513647229602, 0.18601228219005383, 0.19295093795651452, 0.231728227431921, 0.14982961846799503, 0.38878253029694265, 0.4266189182289196, 0.4598840365516558, 0.3865190136149206, 0.4078709602304338, 0.4400760593692423, 0.4731810462268846, 0.46162294863496345, 0.5322454396520857, 0.2685366781045887, 0.30506865854551457, 0.3363944233150411, 0.3153250112899003, 0.2765000863551278, 0.26135129352501985, 0.329665151084114, 0.3409151503527784, 0.34133583496736897, 0.17985315707687755, 0.1830530660666072, 0.18658709632009862, 0.21239479659944183, 0.19762678957607827, 0.18830923081684758, 0.18603096720306667, 0.1956123095041974, 0.25174166116573105, 0.38751572245784194, 0.43238706369342694, 0.21016769671678148, 0.22504625377951548, 0.20692589103397496, 0.4375577187835832, 0.19265228410057367, 0.1854701288822469, 0.5027875835794361, 0.553611910305136, 0.16222249883676343, 0.7139388904129989, 0.18421713250399452, 0.1868258765250178, 0.6054340809667136, 0.5617563805637011, 0.4989978243776225, 0.5601061506472603, 0.6516590238926774, 0.16627930421813197, 0.34822556257551907, 0.45927588064891656, 0.2039154303334536, 0.20078164452540537, 0.20368103112310187, 0.2691927606757625, 0.20367625531430533, 0.17827661127908123, 0.18949130364506095, 0.17714871024328238, 0.17877789020767576, 0.19268945672487903, 0.18944192054312858, 0.18494196582334133, 0.1917722477393523, 0.18187447219169606, 0.07090451634202677, 0.08794748724512502, 0.0878326416044718, 0.07232660760942089, 0.07488019798843903, 0.07619666785492551, 0.06481629016787516, 0.07441700962150866, 0.08663654754362016]}, "mutation_prompt": null}
{"id": "01b4a615-a87d-46cb-bfa2-12b433c920bc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 30 + int(2.5 * np.sqrt(dim))  # Slightly larger initial population\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Fine-tuned DE scaling factor\n        CR = 0.85  # Fine-tuned crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 1.0)  # Further refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.04, 0.04), 0.75, 0.95)  # Further refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedAdaptiveOptimizer", "description": "An enhanced adaptive optimizer that refines evolutionary strategies with adaptive mutation, crossover, and dynamic population management for improved exploration and exploitation.", "configspace": "", "generation": 74, "fitness": 0.3435385696130686, "feedback": "The algorithm EnhancedAdaptiveOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.7946813775704129, 0.7121538242663559, 0.746864981345398, 0.8265219733463086, 0.7305516812554289, 0.7673044482028667, 0.8270102087740104, 0.7357407819871272, 0.7186304019085864, 0.6860362625494281, 0.5465209042408662, 0.5661885033076113, 0.6840552861762628, 0.5518376902960573, 0.6099943787862308, 0.6482767700380223, 0.5260336567888311, 0.5829771620219533, 0.154018591231187, 0.1086886615022804, 0.12757720645734172, 0.1571738430938494, 0.12159737970435747, 0.11094965474081198, 0.15748313856305995, 0.11357349501297664, 0.17937743682657925, 0.13358912592439032, 0.11628786497381027, 0.1111307424055693, 0.10869761929978361, 0.09676211810221791, 0.11043047703798603, 0.11362968132825568, 0.11308422722899847, 0.10767623678930283, 0.9741258677789562, 0.9591060775861774, 0.9496620203863053, 0.9529607035135953, 0.976233746066822, 0.9701774661355792, 0.8987805275215927, 0.9893914839924921, 0.9644738742106221, 0.5133823822098161, 0.38489565293192085, 0.3960953683097721, 0.49831626433263054, 0.37446325983109385, 0.3811658555505226, 0.5174166561446436, 0.4005538773526499, 0.3970083096388026, 0.7495773850017471, 0.5992985088688731, 0.4506790523939569, 0.7662418953156092, 0.6287404483200802, 0.6285418651048019, 0.7961605186938687, 0.5974308720930515, 0.5932999927904068, 0.4119662313072171, 0.34809852682276354, 0.3175187439030791, 0.4116171412973958, 0.2850667249443598, 0.27238445640495856, 0.3558410946387479, 0.32753826958673293, 0.31452645547718805, 0.3835501172653005, 0.20406641782493462, 0.2773005911872577, 0.41124709347322075, 0.3226121801360117, 0.28880887849569603, 0.3430663595436363, 0.24561501215341475, 0.2982082358645435, 0.40603084487667507, 0.17227507917598905, 0.1558861154856258, 0.34809787229968825, 0.18288243026314388, 0.1713333264058129, 0.3251407714735437, 0.17589711908904282, 0.17989086790067665, 0.43717914808271785, 0.2986123565095149, 0.2530674682250901, 0.483772300715, 0.30356358941329076, 0.23217495014770984, 0.5663319253707317, 0.3422909352604383, 0.3348124303083161, 0.0655907566662125, 0.06804233686779337, 0.04519827419501543, 0.18451821043650818, 0.1038326875410146, 0.07141794783524003, 0.15198836733763932, 0.08320632695654351, 0.07226854769539803, 0.30837215638694637, 0.2144317212253798, 0.19945106397404866, 0.31257163677065714, 0.24064149750401476, 0.22051287084606008, 0.2841659174108856, 0.19633060552056003, 0.20179538330975622, 0.6601516912050815, 0.576453312495219, 0.5800280781832654, 0.6728856195751334, 0.609155169605126, 0.5846182004700358, 0.6717193485593156, 0.5656557380495346, 0.5851652110736326, 0.10968409508058408, 0.09307153861040096, 0.09934654066708459, 0.10404211829222243, 0.08415080768620375, 0.08508048765987897, 0.10145195730237933, 0.08929641356479001, 0.08131273268030514, 0.18087966084449003, 0.25918553535340894, 0.1539531594550574, 0.17699182020530702, 0.2701267592588288, 0.15391902678492042, 0.1606839418549676, 0.16445524219605379, 0.170939966989463, 0.40451282760507634, 0.3237664327961668, 0.31141188766010064, 0.38784068397043303, 0.28605034081673986, 0.31250296035865543, 0.4197936735664005, 0.33227641029465116, 0.32835156937466914, 0.2940391896646596, 0.2333901203065296, 0.24788672472101592, 0.28871182288034325, 0.2102679165985416, 0.2301229721271013, 0.3114329781257603, 0.2832389075695231, 0.25845676315675126, 0.22708933153516442, 0.19306155918670231, 0.1901749402772871, 0.19360310947373138, 0.1829697865317479, 0.2104584912490054, 0.17985809698596855, 0.16426005688167866, 0.18787347896337314, 0.24819703710791274, 0.2017438080880697, 0.18951997327950287, 0.2995200872570315, 0.26009313756821517, 0.1888413515738041, 0.19567046098830965, 0.18388788826475044, 0.20988954280339434, 0.7657522236957645, 0.1702225761950642, 0.5226727794069312, 0.19027004587520735, 0.626144507316622, 0.47164265607028677, 0.7074648407449764, 0.5033662261960914, 0.185474965208542, 0.7426077750971413, 0.20504227529270935, 0.1994301089632352, 0.6536336499348958, 0.58142423094156, 0.4471767392050062, 0.20880787905698184, 0.20094474243245108, 0.2066568918158963, 0.19025461155851398, 0.19232229089563357, 0.18705689358112088, 0.19554387011956165, 0.17647590776373634, 0.1722920085453825, 0.19332308521613673, 0.1784704075670519, 0.1854225395925133, 0.08370275899898627, 0.07376953003997877, 0.07195684141690417, 0.09218172819579817, 0.0787901840020242, 0.07320111929376161, 0.08020630758782277, 0.08669672858426836, 0.06486252173274065]}, "mutation_prompt": null}
{"id": "88237b5b-0229-46a5-8120-fb2800728544", "solution": "import numpy as np\n\nclass RefinedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 25 + int(2.5 * np.sqrt(dim))  # Slightly increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Modified DE scaling factor\n        CR = 0.75  # Modified crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 1.2)  # Adjusted adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.04, 0.04), 0.6, 0.9)  # Adjusted adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.7:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.7)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "RefinedAdaptiveHybridOptimizer", "description": "An adaptive hybrid optimizer leveraging dynamic mutation strategies and population sizing for robust black box optimization.", "configspace": "", "generation": 75, "fitness": 0.30248180059072205, "feedback": "The algorithm RefinedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.759840888383906, 0.8354180006839823, 0.7672813075019916, 0.7664672083218016, 0.8506713406417883, 0.7654296136661516, 0.7758461871451692, 0.853552790313578, 0.7558062406384416, 0.6308479409831524, 0.7312293094002523, 0.6139464147104146, 0.6201058596458091, 0.7308284396420475, 0.597114142122368, 0.6394388986063411, 0.7011194118517058, 0.6039691898113159, 0.2588695424458719, 0.3494455706128605, 0.2555167316846284, 0.21349960942370938, 0.34161317898088883, 0.3039785656944628, 0.3064432250954918, 0.3232482962441372, 0.2721441735141794, 0.1760390842367091, 0.3465390590356524, 0.22093018765899886, 0.22076420008975606, 0.3637894308563382, 0.2093758063400002, 0.2083506953315346, 0.23901857232606738, 0.15617479191246963, 0.9736248277926289, 0.9896535278131687, 0.9637076293001894, 0.9762152338205967, 0.9527670970963292, 0.9815226977807492, 0.9809408596129925, 0.9809424854118111, 0.9728995476051517, 0.3756261439714007, 0.42418677789711745, 0.358850679917462, 0.3446107675239628, 0.4823846482053161, 0.35748577588551633, 0.3504469898541158, 0.4749071026758286, 0.08705131804555499, 0.44790034743744767, 0.455856168371763, 0.4491535828869686, 0.34116388042094636, 0.6604598051858621, 0.4742464225416143, 0.6489849659166929, 0.643623134790548, 0.47892089237244895, 0.17616681403214662, 0.20467184524841198, 0.1458366614996477, 0.17999605017923226, 0.25994739197053607, 0.16642468742064798, 0.19395374388380748, 0.242988748161045, 0.20409109872820097, 0.27090606426980335, 0.15730551141220317, 0.17652682758271965, 0.19929468163442277, 0.25692141188677975, 0.18875106848936418, 0.17495230839962128, 0.19918968064498999, 0.16840199984215454, 0.016973568776119774, 0.07450869098661028, 0.03552477489653849, 0.059165131362666434, 0.07746939762882088, 0.017822079143317793, 0.025278228151260018, 0.0911690649943313, 0.025431728392617314, 0.13879987583461317, 0.15585442765752755, 0.13007899934314937, 0.07070802937691911, 0.17303714637864964, 0.11799160079578708, 0.12031839696488, 0.21179805291474263, 0.19415750138035692, 9.999999999998899e-05, 0.060591046958861305, 0.003104619454620705, 0.011700680742107172, 0.039356800550299886, 0.02866910174425752, 0.013073417830369527, 0.08077684148011688, 0.012545355340411901, 0.1270847000872113, 0.1541914035848162, 0.13304143988478223, 0.1372616824462488, 0.20547373516041378, 0.17434856064251492, 0.14181944982593742, 0.16734593179041535, 0.12598444938755915, 0.4736761419007145, 0.5409103920687215, 0.47293064629000914, 0.4573490637291747, 0.5698113839149421, 0.4972661461739678, 0.5051345839766772, 0.5419201799532909, 0.5080950648438805, 0.09334030230444645, 0.100923216307927, 0.08027939131987438, 0.07754693959653247, 0.09173260371798664, 0.0899569014978635, 0.08564028901718723, 0.1080406243624098, 0.08733798937797588, 0.14058988321082833, 0.1443277540575999, 0.16903939754555997, 0.1492329855715947, 0.15232531435327323, 0.21080247332585444, 0.132768779086599, 0.16948528829830523, 0.16236430318777006, 0.284061946936497, 0.34309847928810233, 0.29564399658393603, 0.2693261701452908, 0.3115091668959914, 0.29667407676565216, 0.3260630184882596, 0.3989009175212529, 0.3226741587640767, 0.2146030128371671, 0.22439486861687175, 0.19549753633322242, 0.1604444123864125, 0.21644920803107148, 0.1823482792436193, 0.19232637286518883, 0.25254145904813396, 0.21843114543103648, 0.17522645752417754, 0.17641012547536428, 0.16761946044091214, 0.1825723216999262, 0.20342874310790815, 0.20965857741565708, 0.18024327219621805, 0.23240971013767853, 0.20106162637730252, 0.19905674034664222, 0.20849068304222518, 0.17935067776624058, 0.232202220735222, 0.2738536615950814, 0.1902917183457178, 0.18398821679641963, 0.2804405953597501, 0.19915647649184165, 0.48486137738332713, 0.41973616982353124, 0.6563692555357648, 0.690128469047848, 0.6214017363789365, 0.17839799322913819, 0.38670302460073347, 0.18666501405382951, 0.23180668583098274, 0.44085289860286314, 0.19675125876631672, 0.2023466139229797, 0.1904380911976209, 0.49246608765963296, 0.19622250948225206, 0.531191634225042, 0.20567078301069064, 0.20557163136830803, 0.18156395023692462, 0.17910283028562513, 0.18561508772876323, 0.17779658454052838, 0.19290779017947812, 0.20404608074620623, 0.18320928386696478, 0.18639517271031614, 0.16120996651906883, 0.07772288357209378, 0.0723918726675995, 0.06715798844949039, 0.06632908042147223, 0.08475853052428461, 0.07472372370396951, 0.06781068110015842, 0.0768906548936209, 0.07390825843881121]}, "mutation_prompt": null}
{"id": "f1404c2a-6821-48a7-8a40-fd9c675a664d", "solution": "import numpy as np\n\nclass EnhancedProbabilisticAdaptiveOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.9  # Adjusted DE scaling factor\n        CR = 0.9  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.25, 0.25)), 0.4, 1.2)\n            CR = np.clip(CR + np.random.uniform(-0.1, 0.1), 0.6, 1.0)\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.75:\n                new_population_size = max(4, int(self.initial_population_size * 0.5))\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedProbabilisticAdaptiveOptimizer", "description": "A hybrid optimizer that combines differential evolution with dynamic adaptation of strategy parameters and population size to efficiently explore and exploit the search space.", "configspace": "", "generation": 76, "fitness": 0.4111789853161064, "feedback": "The algorithm EnhancedProbabilisticAdaptiveOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.8468459370356223, 0.8431938806443033, 0.8558413678698882, 0.8769448311081711, 0.8531825294486403, 0.8769129120771242, 0.8955640840784143, 0.8423905493869358, 0.8755098425577903, 0.8441846625468834, 0.7849472923419905, 0.7621026249325749, 0.8030103441055589, 0.7725146493153026, 0.7663406625877951, 0.8333684620945101, 0.7854681803150005, 0.7636674923294827, 0.45228449371138535, 0.18748070100442227, 0.4951535456124768, 0.4479292280089273, 0.37759800906575514, 0.46504075954631374, 0.15830319876283083, 0.1522398258174792, 0.5153362035297164, 0.11819618443695257, 0.18370182179082195, 0.42345846418546795, 0.15825446486342132, 0.11554366452747877, 0.4591908595655487, 0.15567825245338063, 0.1361836519051256, 0.38463976913399944, 0.9557812999341722, 0.9338132409518759, 0.9748638697513837, 0.9663882682298266, 0.9495029432263453, 0.9787126713206913, 0.9748329562867554, 0.9673860529206041, 0.982215896102962, 0.6159736656919232, 0.5557068418747774, 0.6688618656914548, 0.4161493950382391, 0.6567290962241914, 0.6369829931736435, 0.3965923577461109, 0.5225199332560204, 0.6091243252236911, 0.8651796230632429, 0.836844285310957, 0.7357841065007811, 0.8991202455535038, 0.8158230057139773, 0.7837650341025647, 0.8929179499101415, 0.82174806329591, 0.7822462621635269, 0.1557226889823864, 0.2644435678093232, 0.32320065679614085, 0.13126992494232348, 0.4629218822083302, 0.27166538196370704, 0.19748622625667134, 0.6005280001242279, 0.4608308823770667, 0.11855495343030487, 0.05425168099502209, 0.12399719223497518, 0.1740276186440598, 0.204700841190671, 0.2782783816863629, 0.19323601552748526, 0.6316351229084403, 0.3903474196194824, 0.26668441420561884, 0.6016290535938293, 0.30425868372682596, 0.1942938601043589, 0.6046126819041615, 0.19988055028382523, 0.08071520785440756, 0.5996500947970245, 0.3176692794569914, 0.28517754335070367, 0.543757397760716, 0.3034746471714824, 0.16843818867125282, 0.4598306239605515, 0.36615830748257727, 0.5122975430982586, 0.25888769844584125, 0.46464795768868195, 0.2567401937635342, 0.09068163466615353, 0.15933858190273298, 0.1824688989331662, 0.3968849417931273, 0.1820467505407697, 0.20216114747565428, 0.17259196655341713, 0.13269055645064276, 0.4139684058970845, 0.3445931347015757, 0.28815352908878944, 0.23569115296866794, 0.46120277859778935, 0.31058153414908174, 0.2252714290010096, 0.41139534831364155, 0.2710442701318422, 0.7246831196652872, 0.7808453787464178, 0.6990756538941172, 0.6535644904413384, 0.7432882321527104, 0.7284883385121168, 0.7241093998677393, 0.774567974720966, 0.713677029521063, 0.15883328256158658, 0.10931864684306714, 0.10732657414180069, 0.12150099431257899, 0.10270317335594081, 0.11850390492402807, 0.10992308764971714, 0.10432843152451843, 0.12203080654467846, 0.1474650024029408, 0.16106987538537465, 0.1564757363839544, 0.13819108701215277, 0.24226463285676314, 0.18985752103491427, 0.20220903723352834, 0.11174054579409476, 0.14230116242832813, 0.6392358624135561, 0.5501962507613362, 0.4959982409086737, 0.6443808246632218, 0.3336731035018955, 0.49945256049026887, 0.49571591255579606, 0.6443360252005952, 0.5531350290621189, 0.45673824561314336, 0.4552840233247841, 0.3326688432794245, 0.5011486056321443, 0.41401148384223785, 0.3265220367961176, 0.49165603896290677, 0.4557250229422398, 0.3480670007052553, 0.19014054767314548, 0.17376733018948964, 0.21008002953143057, 0.19134571937256162, 0.19253214754960568, 0.19852064688407223, 0.21507257523857282, 0.18250021053918775, 0.20946486770541595, 0.7027738856411558, 0.4604567333222451, 0.22769220315121774, 0.5715331386334515, 0.4896409813169924, 0.5237581858034264, 0.7466110624559211, 0.22840373463697938, 0.5083177442911101, 0.2046722671388448, 0.16858039945155467, 0.15950131292732805, 0.1845839070331008, 0.1625442746542627, 0.18500991931403765, 0.8963380638843201, 0.17286821049985335, 0.7277434321469292, 0.2066144170249784, 0.20396303621847023, 0.16527312931812044, 0.20467803106627158, 0.20334305899717564, 0.2071638566780174, 0.20723704893871997, 0.2095210716684549, 0.20379778460873632, 0.1739795831593639, 0.18646849983862523, 0.20630045580778755, 0.21277254393212963, 0.17923319437661123, 0.17961877177032093, 0.19353828207466905, 0.19002500101082032, 0.18284904922180034, 0.07256744475711585, 0.07442741413030363, 0.07350924589064778, 0.09558120395490188, 0.0752932592528619, 0.08359922998540537, 0.0747640438984063, 0.08454176035821914, 0.08282057164686141]}, "mutation_prompt": null}
{"id": "b1344768-6457-42ae-b54e-c0ea5e00b91e", "solution": "import numpy as np\n\nclass StochasticAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.75  # Adjusted DE scaling factor\n        CR = 0.85  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.1, 0.1)), 0.6, 0.9)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.02, 0.02), 0.8, 0.9)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.5:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.7)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "StochasticAdaptiveHybridOptimizer", "description": "A stochastic adaptive hybrid optimizer integrating differential evolution and probabilistic adaptive mechanisms to enhance optimization efficiency across diverse problem spaces.", "configspace": "", "generation": 77, "fitness": 0.4465082143656684, "feedback": "The algorithm StochasticAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "1d605406-5606-45c4-9556-a5c3fc6b1abd", "metadata": {"aucs": [0.8761206877496901, 0.8369691881035672, 0.8819046487921716, 0.8914417006045077, 0.8431625546271984, 0.8938035463658413, 0.8952939958647765, 0.854056707123909, 0.8629385739380008, 0.811046900291571, 0.7226262255363196, 0.795108680583289, 0.7804693191599625, 0.7319061518727878, 0.7744909900061617, 0.77465546369788, 0.7322263013681006, 0.8051770954080733, 0.5293096228451437, 0.45753679896482913, 0.14873447853060662, 0.3440689311338391, 0.1379939922759963, 0.1625012379925671, 0.48991159767568937, 0.14716550501739367, 0.13457455460150503, 0.13896188972365708, 0.1462717843522785, 0.13339580598024026, 0.4142687805872146, 0.1434248220262625, 0.13902275644701767, 0.2661067896369338, 0.12502422030747506, 0.1379148721429756, 0.9674586966336366, 0.9879692999991273, 0.9045406761707413, 0.9775906221232786, 0.9879828055381724, 0.9846816388919266, 0.9786385257235967, 0.9683155953666889, 0.9772094158964211, 0.6641567656627687, 0.6398516342792708, 0.6640451138954238, 0.6779286039954993, 0.6348948537570045, 0.6961252225551188, 0.6819338399195305, 0.6229458529615466, 0.6834113803898114, 0.7553066372182906, 0.7905127243063649, 0.7818872864313211, 0.8817377929329275, 0.7168974751524524, 0.8823702336058344, 0.7679719870616926, 0.7651289885158798, 0.8660264334676296, 0.5168179869118346, 0.5239770641768344, 0.6930115990295496, 0.6404056446865478, 0.4293172723603045, 0.6074590509401846, 0.5228679150283402, 0.5100299125115504, 0.5544528093913317, 0.01624866519422996, 0.01635625519657735, 0.016453055608418254, 0.5651166491238879, 0.49645078139494225, 0.6716651452231253, 0.538597653701478, 0.5517949743242736, 0.43975345097978014, 0.3923186090765728, 0.3962969804031444, 0.5481966320661584, 0.49794492987423244, 0.4108901294599102, 0.5894446245055518, 0.48483570788822805, 0.33569522932501106, 0.61144840366829, 0.650999350567387, 0.42291209073985403, 0.6053742104428663, 0.4928244534553836, 0.5685448800722179, 0.6284128800825779, 0.6639703517613404, 0.6035594521862877, 0.6886549246959957, 0.25438336345835155, 0.16726783395900802, 0.11144904361587415, 0.25891206745957507, 0.18452861365702078, 0.4092973861453092, 0.31131646984990946, 0.2504035318644695, 0.23760177353525325, 0.37660788930531586, 0.3303398973351739, 0.3861671156241787, 0.44422167112504285, 0.31723398508142087, 0.451189992038715, 0.3459161043407194, 0.37007575839582707, 0.3912509510850999, 0.7512828136212194, 0.6520456721342262, 0.8017747279828198, 0.7382502162151359, 0.7319824987935541, 0.7948039819480155, 0.7922699882144767, 0.7420720922084354, 0.7530369483031016, 0.11965669708913973, 0.09793422453402223, 0.13075361986101874, 0.1119206337273656, 0.09256308070242869, 0.1368378351184072, 0.11591234141183016, 0.1369598178315402, 0.09855673774477869, 0.14285809124093973, 0.16685925016782766, 0.1691575780606248, 0.16746743056116042, 0.14860182657801557, 0.1718887045262638, 0.18599374192086626, 0.2831512899501353, 0.13126467778766182, 0.4907252573406111, 0.4712045455595517, 0.5480451036857336, 0.5246978070304493, 0.41929538537193933, 0.5658350260142324, 0.6194262059252482, 0.5366320729553202, 0.6160680695741934, 0.29377646041470384, 0.358878603157059, 0.3877588957678325, 0.3747819915574696, 0.3759117408205014, 0.44219925620634437, 0.48806432498759633, 0.3721566399400239, 0.41533697870398745, 0.1852464899177454, 0.18764744265117994, 0.2067958642646086, 0.1917472099028057, 0.1845396478639384, 0.1781336833991639, 0.20357923207088602, 0.21086095022608264, 0.20199831679662583, 0.22349047363018903, 0.1979904078758039, 0.5345214378486239, 0.2091085832879639, 0.5681174444489443, 0.21679634787775648, 0.4624224031478583, 0.47251196274022134, 0.34579070140039336, 0.17822207877922502, 0.16312538977241298, 0.15375364969305316, 0.8003322553316482, 0.8648874711487735, 0.8907092679551795, 0.8277423733024867, 0.18303263131562042, 0.16646509150395217, 0.16879591773707203, 0.20841722015047748, 0.8588207746274752, 0.20204538438438924, 0.16389493783802012, 0.20765723687341686, 0.7806963768082156, 0.12602222837934063, 0.1972500271509593, 0.18056537014533403, 0.1776833739759499, 0.17840593139053473, 0.17952379373490457, 0.18270867955843673, 0.16197069341749726, 0.18625985854502936, 0.18069402834983905, 0.1712272525847668, 0.06976509512131501, 0.07412552079777213, 0.08422147538824343, 0.08669303405152984, 0.0753987392017812, 0.0691468489610253, 0.07830829852423371, 0.07883287475624423, 0.07205319141175537]}, "mutation_prompt": null}
{"id": "27d5998d-4999-41a5-a09c-bb1ceb654259", "solution": "import numpy as np\n\nclass EnhancedStochasticHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(3.5 * np.sqrt(dim))  # Increased initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n\n        F = 0.8  # Modified DE scaling factor\n        CR = 0.9  # Modified crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 1.0)  # Expanded adaptive F range\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Expanded adaptive CR range\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.4:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedStochasticHybridOptimizer", "description": "An enhanced hybrid optimizer combining differential evolution with adaptive learning rates and probabilistic mechanisms for improved convergence in diverse optimization landscapes.", "configspace": "", "generation": 78, "fitness": 0.4281118350530342, "feedback": "The algorithm EnhancedStochasticHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "b1344768-6457-42ae-b54e-c0ea5e00b91e", "metadata": {"aucs": [0.776744437717849, 0.7765759747449608, 0.8503878876861878, 0.776730116974383, 0.805707693733518, 0.8515279444110035, 0.7719282363332878, 0.8152187137059563, 0.8336948581869981, 0.6410261341536887, 0.6942070842777048, 0.7498169821762153, 0.6437821067200009, 0.704676014054876, 0.7526805559389229, 0.6590144987964424, 0.6830140128859334, 0.7585282372331752, 0.29920255352514213, 0.42214040591926527, 0.14235055029777266, 0.18231051269911147, 0.44218018575027784, 0.19892155998066907, 0.22701225519671753, 0.13519613301419575, 0.17866042154718453, 0.12856515208691344, 0.14411841411468418, 0.1397715100499296, 0.28633934892435364, 0.29932480360244085, 0.12339252475519302, 0.10962019491290032, 0.26354557599240447, 0.1368134969001208, 0.9608742089759224, 0.9669662403784289, 0.9276403091608183, 0.9737549888213547, 0.9801410828031543, 0.9539417147987099, 0.9776075728449943, 0.9404637962739069, 0.979206974307787, 0.5698881258853736, 0.5221784339214858, 0.6462131236173838, 0.5326164803585911, 0.571466478781494, 0.6552224607885934, 0.5660909488166247, 0.6147346862849226, 0.645093550692349, 0.7416646882866331, 0.7840816902293364, 0.8343631674788697, 0.7345411541592131, 0.8211945172189995, 0.8487297137169239, 0.6883048664546254, 0.7668816552787877, 0.8364304641436774, 0.37691184398804933, 0.5257695489937361, 0.44334478609390904, 0.4820503517623773, 0.5375525468317797, 0.42349372077823155, 0.47099249845138325, 0.486076361543633, 0.34289677738740754, 0.4993097491066343, 0.46803282213551434, 0.12396686591957917, 0.42647450179270385, 0.5214274762054134, 0.5624844038543899, 0.5281548398191145, 0.5148885447146347, 0.4193427915122151, 0.48004988566405693, 0.5104504069312186, 0.5410761603725172, 0.4253904022776247, 0.4685191114143278, 0.5160231810550119, 0.479684059387964, 0.4906700418319687, 0.5285498548520339, 0.6001967167617864, 0.5071842504783186, 0.6676457673886746, 0.46805292405609056, 0.46937064027951414, 0.6499811250537229, 0.6027067588110999, 0.6126991925184582, 0.6708186232015143, 0.15672606189838245, 0.12294345983989041, 0.08307156622535261, 0.3413667561756637, 0.23685620107688155, 0.2756041926687821, 0.20564305705671138, 0.10627660938204353, 0.1614027362198701, 0.32615846966875295, 0.35116467055326794, 0.3834654696276778, 0.37978758152115144, 0.3980123778919811, 0.554211835444136, 0.29469408745615244, 0.3093137253998911, 0.43551505720053596, 0.6372758060514563, 0.7150763479818042, 0.7758987958551802, 0.7261182080488586, 0.7195618752055373, 0.7249866639278331, 0.7110044388900536, 0.6977399886498834, 0.7734233516367316, 0.10202498411601224, 0.09401771361731626, 0.09341639035231819, 0.0935475624525417, 0.1352640659430262, 0.12011697848760505, 0.09504927364049198, 0.0951102103834417, 0.1069626635728893, 0.19691672355291778, 0.1898615072689226, 0.14025789258180743, 0.49228717065465266, 0.1963685856334113, 0.12985060462792752, 0.14273992751972797, 0.21912729106593065, 0.1691248675186947, 0.41102273417536006, 0.45691440963652363, 0.545859383153399, 0.4409864777781942, 0.40986332279150484, 0.5295322934645396, 0.42451963273738424, 0.4326673345269917, 0.5016414343435189, 0.3421415137914572, 0.33738363446987074, 0.41228628652779553, 0.2776522507030934, 0.34622823568208383, 0.36818654404565565, 0.33923728676359866, 0.3645007144083928, 0.43490392594797145, 0.17856999683893915, 0.20320685421901186, 0.20966441934234803, 0.21095640608397115, 0.19421820291849556, 0.19303974299881788, 0.20115524015336073, 0.18853579293980505, 0.2063911390520461, 0.2087068528033713, 0.2171225600668979, 0.44224547885657184, 0.22145648493528192, 0.49144674287403733, 0.21915134422057436, 0.212803770282887, 0.4919226454022976, 0.2092468917789283, 0.7655468757722801, 0.7815157280780161, 0.8862656309416819, 0.19786065108089812, 0.18459305723516772, 0.8034984245570269, 0.18216006670500318, 0.18590630642453565, 0.7102932987362187, 0.7028214506834254, 0.20418879397121803, 0.8236516088688646, 0.1983064115947769, 0.19833588162730453, 0.16231351314867626, 0.20139868701708896, 0.1270226294150456, 0.2072218788901692, 0.17711429450837224, 0.19160239099595266, 0.1888448995716414, 0.17894028782477256, 0.17647394093771984, 0.18737924315706045, 0.17683394552541143, 0.17398366140999255, 0.2075467681534825, 0.07077565090197058, 0.0840344726825113, 0.08930717517062581, 0.06888551377320129, 0.07985766973514952, 0.08030414463498836, 0.07724401839255568, 0.08746075097809425, 0.07469514638946861]}, "mutation_prompt": null}
{"id": "70db754f-4b97-492d-8491-de2c3a900d2d", "solution": "import numpy as np\n\nclass RefinedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.7  # Adjusted DE scaling factor\n        CR = 0.9  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.05, 0.05)), 0.5, 0.9)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.01, 0.01), 0.85, 0.95)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "RefinedAdaptiveHybridOptimizer", "description": "A refined adaptive hybrid optimizer that leverages dynamic population scaling with differential evolution and strategy adaptation for enhanced convergence on diverse optimization tasks.", "configspace": "", "generation": 79, "fitness": 0.43626580395208187, "feedback": "The algorithm RefinedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "b1344768-6457-42ae-b54e-c0ea5e00b91e", "metadata": {"aucs": [0.7939993124705214, 0.8042223343754146, 0.8646342696177519, 0.831060116638189, 0.7823988733050833, 0.8589344990953272, 0.809852200462544, 0.7962493448039483, 0.8711214342361153, 0.6840935685744826, 0.6699386007978099, 0.7379630990486671, 0.7020607636851778, 0.6579762243157883, 0.7744199605110579, 0.7006299917389731, 0.662882213469555, 0.7459130300353183, 0.3009363005197363, 0.43251346158738047, 0.1398864508236255, 0.14103180915255709, 0.1411926090355795, 0.12549055688117383, 0.13198124112780063, 0.1421158075815392, 0.3370702221748567, 0.12097329897098275, 0.33068356156610357, 0.16171602793524942, 0.14554337867690215, 0.12648736543057004, 0.10413062504536519, 0.10032804805611417, 0.1951466542462238, 0.14320353446392908, 0.9622250267774797, 0.9519749448556682, 0.9773562406935942, 0.972863859047199, 0.9599017000515824, 0.9754013102448454, 0.9810712542631984, 0.9516078983674968, 0.9517774043875319, 0.6257776426709574, 0.5459032351231319, 0.614356038057554, 0.5188412199578643, 0.5694814602965435, 0.6329080215607409, 0.5671985415586684, 0.5502244331376782, 0.6526237373558078, 0.7708837425389732, 0.7729104653560454, 0.7940914510250151, 0.7659442421591033, 0.8331541476285138, 0.803399841114715, 0.7877850853809134, 0.7891533356712419, 0.8188981977394576, 0.5844808383035542, 0.5585750520543531, 0.5505805916920736, 0.5815545314745674, 0.45724638554186203, 0.5932694279044748, 0.5260703261371866, 0.512205619521312, 0.6148992071051053, 0.6823804692109225, 0.12615632636715202, 0.5667262215232796, 0.5672476460406501, 0.5245323927429519, 0.2998845776723833, 0.460248119428745, 0.5291467309057929, 0.5749619722085348, 0.4102809816579295, 0.4909233583443301, 0.578037394725585, 0.5838896573453445, 0.492013570642419, 0.5352857573167749, 0.5476063469133037, 0.5396677218101182, 0.5536709270282976, 0.6468672236356805, 0.6581544880972989, 0.6228913641890781, 0.6679123197720805, 0.6202696581149618, 0.6496315886947965, 0.6520558097700391, 0.5841909429560488, 0.6524664022056739, 0.14848646601171933, 0.0952200277055717, 0.2651086679830805, 0.4200620609205915, 0.34499421390254037, 0.14973393818130531, 0.2754162523321062, 0.13843772657922016, 0.20366784185962938, 0.4107302776913375, 0.3350589406197795, 0.45973938432914707, 0.4522962528875045, 0.4314150203523477, 0.47748670265055304, 0.48679436050757063, 0.40307520305773237, 0.4595802542617433, 0.7539180050318994, 0.7222464250437424, 0.7809032030303544, 0.7531626097234605, 0.7241128844856037, 0.7581701379412487, 0.7284531552923739, 0.7283832850648394, 0.7615389788764763, 0.10081612916766902, 0.13184823625101894, 0.09873602274239401, 0.11115155956025813, 0.09971538882717801, 0.09600818893579566, 0.09880579672296175, 0.12110033203346682, 0.10598878334562045, 0.179132606420622, 0.14119594527230106, 0.13318443665780944, 0.12778900750554056, 0.2533726353276937, 0.14762228180046444, 0.1340040892982508, 0.1853345401608406, 0.17680417044499663, 0.44131941792676366, 0.4487097771430678, 0.5060740360399028, 0.46952382186356956, 0.41023442843769153, 0.4916081495393845, 0.5366992224635716, 0.44386401191008085, 0.525182912896693, 0.3226703113999252, 0.3397589485954702, 0.3935967469556637, 0.3354551333534166, 0.3288925319458381, 0.37229415893822626, 0.4274117449308611, 0.3820201675282068, 0.3701741760832583, 0.20371135320710232, 0.19820503579862792, 0.18473605994254017, 0.19942944497704962, 0.18909569200917054, 0.18608612401522973, 0.20177578640153837, 0.18171823767310524, 0.1957627444049126, 0.35817181703430556, 0.3263724378841435, 0.2037344458802126, 0.4472732904008744, 0.3571150753757113, 0.19260203863789715, 0.21164574632521493, 0.20032104915843985, 0.1998291376727186, 0.7751980178130625, 0.16862669623918447, 0.16984022053993708, 0.8209458666427372, 0.19353472990628173, 0.19438397994252454, 0.1642905621171783, 0.19313328836891075, 0.18683130801335157, 0.803977932448004, 0.21066529743574747, 0.7559280040590906, 0.7754770720252495, 0.7961789068645823, 0.19650100644466517, 0.19756053366783388, 0.2101099085588456, 0.18555484087516905, 0.1707773560668, 0.17325855207027763, 0.18711999388628264, 0.18859193762380932, 0.18928293687151376, 0.19958268605529528, 0.18628358394216415, 0.19007108084661128, 0.17692435997646228, 0.083364059338361, 0.07826753595211045, 0.08486678769093181, 0.08438347542763913, 0.07405049088783511, 0.08345493080557986, 0.0765161902550413, 0.08012999780000651, 0.07139466810824813]}, "mutation_prompt": null}
{"id": "95229cdc-910c-4b6c-bcb2-fffcf1af58b0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.5 * np.sqrt(dim))  # Modified initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.7  # Modified DE scaling factor\n        CR = 0.8  # Modified crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c) + np.random.normal(0, 0.1, size=self.dim), self.bounds[0], self.bounds[1])  # Added Gaussian noise\n                # Crossover\n                crossover_points = np.random.rand(self.dim) < CR\n                trial = np.where(crossover_points, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.05, 0.05)), 0.65, 0.85)  # Adjusted adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.01, 0.01), 0.75, 0.9)  # Adjusted adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.4:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "EnhancedAdaptiveDE", "description": "An enhanced adaptive differential evolution algorithm with dynamic population control and refined mutation strategies for improved convergence.", "configspace": "", "generation": 80, "fitness": 0.23832776101786907, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "b1344768-6457-42ae-b54e-c0ea5e00b91e", "metadata": {"aucs": [0.46625431722790334, 0.44980980005865767, 0.4739313191199336, 0.47483772459871876, 0.4887713440622614, 0.5033655171994345, 0.4838619137268909, 0.4764294791144381, 0.4745451392144002, 0.09916505114297103, 0.09803717605314854, 0.11530095264732754, 0.1257816447018979, 0.11722207930121187, 0.1290555158586585, 0.12529718817299818, 0.09478878411427427, 0.11270031176440842, 0.1366644991430368, 0.10444501037812748, 0.1438720500396965, 0.13386786657753058, 0.11713707865236322, 0.13722317384424565, 0.13505120050795227, 0.12452355619580613, 0.12420321926435773, 0.10391601584293819, 0.10943029147155825, 0.11053949708065247, 0.115598735740015, 0.13126719754593674, 0.11461826018036358, 0.10607073630033137, 0.11827543797719531, 0.11213608447590451, 0.9455327622028391, 0.9748566584827824, 0.9521359138792238, 0.9614416591489077, 0.9684091825835139, 0.978964695958369, 0.9571801816849617, 0.9663217755271746, 0.9715105091640576, 0.2952432166541965, 0.31654884052879073, 0.3103836547913109, 0.28819375024875293, 0.2980503459971594, 0.33013119050006434, 0.3036297337722226, 0.2956411376882635, 0.31068698316213506, 0.5373626318784184, 0.3458566701068222, 0.4026937948194811, 0.45126508156925305, 0.561906961755624, 0.3660201546828129, 0.3392490686101606, 0.5117069685081396, 0.44884135770242606, 0.16967980657044757, 0.18981579951909366, 0.1691367291527366, 0.21086133537544416, 0.18049870946124447, 0.16799109226726583, 0.19076086737820375, 0.18426039796344384, 0.1607488410065192, 0.1869706483062682, 0.17748509078933272, 0.15691521798327956, 0.1709915535780696, 0.18943248382516642, 0.17647683447201268, 0.18376293327888416, 0.1681918111841496, 0.16895940137189358, 0.04657078768839873, 0.05089555391804157, 0.0247916351923142, 0.01899775477525545, 0.026622769036900862, 0.02068854885551119, 0.040479266208167775, 0.020227299062829496, 0.029888228838206854, 0.10183036085253261, 0.1024264765217735, 0.10861865712600194, 0.08699633892585734, 0.08406562952509178, 0.091524858888686, 0.08588567980168937, 0.11373368392032868, 0.1068639923094401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0965005213721315, 0.10281065282442292, 0.11223472061727113, 0.1311402132278794, 0.1101964949151979, 0.10510134369853918, 0.10540890992516905, 0.10831294027577609, 0.10558690790553615, 0.41339315128601006, 0.43491679165141517, 0.4121455506329694, 0.4091353297621222, 0.40845792842453144, 0.4051900724697436, 0.42242270324169906, 0.4109726277369373, 0.4294609272342832, 0.08882394737806554, 0.08639059057024057, 0.09194706066885028, 0.10387561146941593, 0.09403940301716995, 0.08364374817381726, 0.08843863252762263, 0.09124646667386405, 0.09355093956440019, 0.1560468967392915, 0.16845929422841255, 0.1937610636855066, 0.1512186357320685, 0.16690129231502981, 0.1776115202927787, 0.1891586731775997, 0.1445405200911709, 0.1659389348486926, 0.29720250229888423, 0.2928994590170382, 0.2852944617582741, 0.29085104594644295, 0.28106076195658347, 0.3084720623628441, 0.2880556089997497, 0.30688896267687205, 0.29923593291239503, 0.23627554713448495, 0.2124199106335316, 0.23043134426203027, 0.20400136709018724, 0.21460087643514147, 0.21791443943427113, 0.23583734821618085, 0.2281379479170078, 0.22800441118859294, 0.18869750245554073, 0.19026959886796124, 0.1978910092401568, 0.19421890578959922, 0.20766367080139836, 0.18659819733205318, 0.17580290900598594, 0.18975242811723014, 0.19091007296896145, 0.22965301386863368, 0.20174063889015392, 0.19313711750087237, 0.21651300831861486, 0.18453068189618804, 0.18693193384070117, 0.19462992139823299, 0.19982039788858497, 0.1981521555013227, 0.6631942734166045, 0.6347005743105684, 0.6821710317254024, 0.5216156515167809, 0.19018405846876607, 0.1627515207012601, 0.5648054020268767, 0.18001614215154804, 0.6411986516646191, 0.5167981770592428, 0.20337354998400692, 0.21694135520531677, 0.4159828362197082, 0.20027655653142706, 0.20315198847630578, 0.20642706585940418, 0.2100832353980494, 0.2087476826653294, 0.17907522297683498, 0.18572465750981826, 0.1757573129275981, 0.18528080999325336, 0.181342249219832, 0.17573595136372477, 0.17650154905407567, 0.19512223789960925, 0.19530600130440112, 0.08847801614781581, 0.08061306495720166, 0.07903772354505145, 0.0811131672693115, 0.08382513576856077, 0.07517878733521488, 0.08607564113104704, 0.0767554286211849, 0.06926837133973496]}, "mutation_prompt": null}
{"id": "55b77be8-6fe6-4b4c-ba02-48cbc1e1be55", "solution": "import numpy as np\n\nclass RefinedStochasticHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 20 + int(2.5 * np.sqrt(dim))  # Adjusted initial population size\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Adjusted DE scaling factor\n        CR = 0.8  # Adjusted crossover probability\n\n        while self.evaluation_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            # Evolutionary selection and differential evolution operation\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                # Mutation\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                # Selection\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            # Adaptive mutation and crossover rates\n            F = np.clip(F * (1 + np.random.uniform(-0.05, 0.05)), 0.7, 0.9)  # Refined adaptive F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.75, 0.9)  # Refined adaptive CR\n\n            # Dynamic population adjustment\n            if (self.evaluation_count / self.budget) > 0.6:  # Adjusted dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.65)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "RefinedStochasticHybridOptimizer", "description": "A refined stochastic hybrid optimizer combining adaptive differential evolution and probabilistic selection mechanisms for enhanced performance on diverse optimization tasks.", "configspace": "", "generation": 81, "fitness": 0.39179615403863655, "feedback": "The algorithm RefinedStochasticHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "b1344768-6457-42ae-b54e-c0ea5e00b91e", "metadata": {"aucs": [0.7911437181785347, 0.7967713860876415, 0.820286997146065, 0.780915913341015, 0.799067877406716, 0.8335484253956715, 0.7890431578027387, 0.8042569422403445, 0.8331893734320699, 0.6937242865349901, 0.6852805332543661, 0.6896081584210312, 0.7100808252771169, 0.6647873193392984, 0.7288029931908653, 0.668985640277687, 0.667170339535161, 0.6878412509343785, 0.13208241864833947, 0.18180835986917687, 0.14614427694139887, 0.404966980797815, 0.3276841545263851, 0.32589502105167856, 0.1212807813846366, 0.20588159255159488, 0.16149050623753958, 0.2287965370566618, 0.10798578657795699, 0.2944958231686361, 0.1408035050724442, 0.14749697261919992, 0.1300638799418775, 0.13652943390171146, 0.11262137452272658, 0.1995970300666503, 0.9788057894926973, 0.9666292442717961, 0.9920974871489813, 0.9499433675148006, 0.9644462099401481, 0.975534614080992, 0.9731218711933581, 0.9847786137322854, 0.9705187086888356, 0.5316707507520172, 0.521839210159787, 0.5751223202079573, 0.5372783199325977, 0.5100898747412688, 0.5637414097364419, 0.5368017613807698, 0.5107935027050425, 0.5524376584887607, 0.6764465293676768, 0.7498914640591481, 0.6777709818080511, 0.7402453759121649, 0.7601556987939452, 0.672038092799668, 0.6843458900847791, 0.7035511272324859, 0.6919718235016399, 0.4178718429717502, 0.48567115241565784, 0.48733629392349054, 0.41553165621170696, 0.4538356274978721, 0.4260987781968515, 0.4320886533915965, 0.4159135213218026, 0.4073737967037575, 0.5406612719753914, 0.009875168032819404, 0.4285119379272063, 0.43884742755878037, 0.45968884325974857, 0.3819187043765818, 0.37966735441225397, 0.39488036900197565, 0.3830780558073187, 0.31966681088425075, 0.28733410833686834, 0.27996341716653583, 0.2557379863761824, 0.34292760259512245, 0.2891276812957041, 0.3514485751968929, 0.3123605762166015, 0.34620151834277835, 0.47009511679063265, 0.436935658993175, 0.4323049421043672, 0.5348476310893276, 0.4371931292231632, 0.35328679958886955, 0.4798814742180292, 0.503680251295404, 0.4884797646867649, 0.14207223217552523, 0.14121572756748468, 0.07828091275452753, 0.21195071983622282, 0.21666477110111915, 0.1795255335512751, 0.1559997858792942, 0.11356513445536309, 0.10001691815559532, 0.27145800468773795, 0.24534304082938763, 0.25148012031528755, 0.3393519514568063, 0.2887572204776818, 0.27697724608090235, 0.27076737057419575, 0.26730794194971863, 0.2920700362959008, 0.6827919753092193, 0.6799362093983918, 0.7076650441422601, 0.688042726328148, 0.6848946229599631, 0.6399232452002999, 0.6960843209833923, 0.6563239045309973, 0.6621669928249367, 0.08390707390109187, 0.1012064912177213, 0.11713831613103287, 0.08285673416158712, 0.08881541703137541, 0.09357209192484783, 0.10362477450672125, 0.08530491149706554, 0.09616881970510271, 0.13675475611360288, 0.2369492679832903, 0.15281358289458746, 0.1546183801319525, 0.184118835126603, 0.20070045198373188, 0.13985098087273784, 0.1936004102067186, 0.16308920956889483, 0.3708843460310248, 0.3416287459108567, 0.3473141905559298, 0.37783235154005135, 0.3272424968755626, 0.39774836687773973, 0.4522152323857074, 0.39858666324547076, 0.48896092529934954, 0.27344791352904196, 0.2591902677138622, 0.3109651908651836, 0.2660733199902978, 0.28464463643465543, 0.2639549587561003, 0.3055662352636589, 0.28539567243636577, 0.2811350792589278, 0.19823734126532067, 0.17499290745506135, 0.18591199657553725, 0.1778258029526436, 0.16365841457863628, 0.1938763941737609, 0.22922204804248913, 0.18389096912517755, 0.1894252556404603, 0.2211614139312802, 0.40214495272792106, 0.19458395809218754, 0.260323626029765, 0.4193486403198491, 0.43589972394518006, 0.42349090178360327, 0.356087507188243, 0.3179415726465249, 0.8581129182538925, 0.15422482916488678, 0.7788906534883387, 0.699502602040468, 0.1809394574809935, 0.622014260754977, 0.18197430005763304, 0.6869038144916841, 0.7051760231757302, 0.2075539751506852, 0.16473635023034827, 0.19464117692024963, 0.5952950231704266, 0.15756997655465999, 0.6236290674262925, 0.20088617968186873, 0.767212770971355, 0.20379341736094658, 0.17035966711221595, 0.1775499323147649, 0.20999350048908672, 0.19077289963002608, 0.1738566115377389, 0.1880945923416235, 0.17719176583863538, 0.17487969822752525, 0.18437526243210822, 0.06343988384361055, 0.07810642410917934, 0.0851645675108823, 0.07490477904877701, 0.09354562087659635, 0.07887523399781371, 0.08254468427826434, 0.06899308554059502, 0.07320926276944106]}, "mutation_prompt": null}
{"id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 82, "fitness": 0.46046118104514944, "feedback": "The algorithm ProbabilisticEnhancedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.29.", "error": "", "parent_id": "b1344768-6457-42ae-b54e-c0ea5e00b91e", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "6150a1f4-62a5-4b86-bed7-a3aae4d6dd74", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "76e51729-2439-4d21-a4c4-e19d9447c87c", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "d6815545-69e7-4265-8c8f-b19f93f873bc", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "7801582d-080d-4f21-961c-66880017fa43", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "93bcf9b2-de68-43cf-8f90-8387ddb53cef", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "7618d8d1-e299-4872-85cb-ddaef3f04822", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "3aa2bc2a-42e3-4d08-a21e-b83513925e3a", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "242b4d93-92ab-425b-8563-f0dbdbf2f8f8", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "7a9679b1-ea1e-40f8-b3bd-f304dabc070d", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "55b17ffc-504c-47d2-a360-44b460b86963", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "d80724e6-a4f3-4927-8bf6-ce5ac472d51c", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "c99df941-cd30-48a8-b761-497c1979e114", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "6a6e76fb-8f4e-45f4-82e5-fd032a9c569d", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "e043bd36-7b30-4c7e-a920-8c94b43b7d54", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "e7c3b883-3374-4d5e-9e05-15e21b3dead9", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "3daabd32-1d87-445c-ab08-bc0cf32571b9", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
{"id": "9ea81eda-8538-407a-9201-464653805a83", "solution": "import numpy as np\n\nclass ProbabilisticEnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 15 + int(3.0 * np.sqrt(dim))\n        self.population_size = self.initial_population_size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.scores = np.full(self.population_size, np.inf)\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        best_solution = None\n        best_score = np.inf\n        \n        F = 0.8  # Slightly increased DE scaling factor\n        CR = 0.9  # Increased crossover probability\n\n        while self.evaluation_count < self.budget:\n            for i in range(self.population_size):\n                if self.scores[i] == np.inf:\n                    self.scores[i] = func(self.population[i])\n                    self.evaluation_count += 1\n                    if self.scores[i] < best_score:\n                        best_score = self.scores[i]\n                        best_solution = self.population[i].copy()\n\n            indices = np.arange(self.population_size)\n            np.random.shuffle(indices)\n            for i in indices:\n                if self.evaluation_count >= self.budget:\n                    break\n                candidates = np.setdiff1d(indices, i)\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.bounds[0], self.bounds[1])\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, self.population[i])\n                trial_score = func(trial)\n                self.evaluation_count += 1\n                if trial_score < self.scores[i]:\n                    self.population[i] = trial\n                    self.scores[i] = trial_score\n                    if trial_score < best_score:\n                        best_score = trial_score\n                        best_solution = trial\n\n            F = np.clip(F * (1 + np.random.uniform(-0.15, 0.15)), 0.6, 0.9)  # More adaptive range for F\n            CR = np.clip(CR + np.random.uniform(-0.03, 0.03), 0.85, 0.95)  # Broadened adaptive CR\n\n            if (self.evaluation_count / self.budget) > 0.4:  # Earlier dynamic reduction threshold\n                new_population_size = int(self.initial_population_size * 0.6)\n                if new_population_size < self.population_size:\n                    self.population_size = new_population_size\n                    self.population = self.population[:self.population_size]\n                    self.scores = self.scores[:self.population_size]\n\n        return best_solution, best_score", "name": "ProbabilisticEnhancedHybridOptimizer", "description": "A probabilistically enhanced hybrid optimizer utilizing adaptive differential evolution with dynamic rates and population adjustments to effectively navigate diverse optimization landscapes.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "04d76ebc-2fee-46f5-8ab4-08911ffadae5", "metadata": {"aucs": [0.8888530155914875, 0.8541305766034266, 0.8898598394817386, 0.8764690948520266, 0.8476232401358532, 0.8862916400600847, 0.8899103450133774, 0.8609071399240957, 0.8942225644423998, 0.8016845145227649, 0.7727893386383309, 0.7939942844428238, 0.7766889010806236, 0.7681635505118827, 0.8041765640776581, 0.809589829569535, 0.7520351611384095, 0.7941515608939221, 0.12871608197842976, 0.14328386885625044, 0.15864605552872912, 0.16837798126411474, 0.4589620185076889, 0.1361000480490676, 0.4156432593662215, 0.13500093038707406, 0.1496024423225848, 0.14018295729421193, 0.15124243566059337, 0.13238084587218202, 0.11089439705774151, 0.15011308842701687, 0.4802318664310796, 0.13352437610162493, 0.13055434607120586, 0.12196575681652488, 0.9665208398479266, 0.9918165579337355, 0.9268960184179678, 0.9492219266657554, 0.9735203675746341, 0.9655483141204081, 0.976310262078421, 0.9631547019472642, 0.9641786807348833, 0.7131844670125771, 0.7110602092164241, 0.7317390475980842, 0.6703318797722531, 0.7072096443948181, 0.6321196635384687, 0.7231685931393098, 0.647130049009834, 0.7098301203128163, 0.8307741598065028, 0.8170686087979528, 0.9056110651443041, 0.8268458287121326, 0.7955216495782208, 0.878442697374435, 0.8581301803762351, 0.8274430947300471, 0.8801951902284486, 0.3088888263451811, 0.5947032658156697, 0.3971376150407635, 0.6697771453117709, 0.5253225638062482, 0.6086145097116271, 0.5773159446701652, 0.30627340042175144, 0.556299373062113, 0.12174457797044891, 0.010112180045105723, 0.17589295925581794, 0.5024730196120235, 0.6062671936815092, 0.6551127477101946, 0.3167317633870719, 0.3736185610172347, 0.2539153147615776, 0.5334509881688925, 0.4408779686293728, 0.45447832690435175, 0.6275660374266159, 0.4315239484606329, 0.5050910733177003, 0.7025666317744286, 0.48473812636039615, 0.6417992655016066, 0.6133928148699811, 0.6376984704775851, 0.788598738502673, 0.7081186852031615, 0.5514004970409568, 0.4076314214611131, 0.655596754369864, 0.5374317237787104, 0.7597044229539948, 0.12029581554464874, 0.11019017174991041, 0.13337249657732642, 0.34048760286025403, 0.28973241661686966, 0.5276319721314666, 0.32654497748278966, 0.18724568130387687, 0.2719050574812012, 0.4531367554315472, 0.4410264626971073, 0.6092283492059066, 0.48934489532791736, 0.38468558564391797, 0.49637236383217287, 0.42763587112391566, 0.3786697682800231, 0.4697406617783281, 0.7759600184237072, 0.7945636823214055, 0.8645773894112196, 0.835920161913517, 0.794608425423118, 0.8380166796300281, 0.7799769333227222, 0.6748076641685206, 0.8309801399020902, 0.13007168718217055, 0.10706578275189382, 0.12763998066459104, 0.12954321236177513, 0.09709578372108296, 0.10064502289282684, 0.10919432986848243, 0.12089595616303428, 0.1349057968578532, 0.2510624048705111, 0.12125969733143882, 0.2449692589916611, 0.2024662387257531, 0.20664171984281976, 0.1211812997729923, 0.1924106743757218, 0.12659277190702467, 0.16479016290765247, 0.5407917469413837, 0.4899110875217404, 0.4304397759570098, 0.5570712768301442, 0.38695548204773167, 0.5406376366762425, 0.6382080574482554, 0.449208285508067, 0.5703741266454099, 0.3711923949244589, 0.4041656862210212, 0.34780753975414813, 0.41743168667017727, 0.31723882258564606, 0.4405095270248859, 0.5838975660347798, 0.4037199775251472, 0.42555077516379436, 0.2088953287360208, 0.17144636632786636, 0.19167323599726216, 0.19903123430935243, 0.19294924086160548, 0.18383960542615263, 0.1812652736252347, 0.20544100299782853, 0.19615049842297838, 0.1913179279704328, 0.5319564786073114, 0.6138717716984603, 0.6014972639409488, 0.6481917549060151, 0.22552674997079536, 0.5470409270277607, 0.19459778382042792, 0.21246110073907598, 0.18027112696028613, 0.2003482909679466, 0.8539956517130691, 0.1868177535049167, 0.18607288611738182, 0.17748346442451124, 0.8589030596154796, 0.18172525290151276, 0.8530962155971535, 0.155150791484699, 0.20790648399850675, 0.8723303918407068, 0.7882773355678354, 0.7871756276997209, 0.21195249886547818, 0.7163902367744668, 0.21002297140544213, 0.2125573369313799, 0.18032175935424077, 0.18048350127675383, 0.2543455109161812, 0.2004656666480189, 0.1738708344293729, 0.20932790615618402, 0.18629639841076473, 0.18368865298074055, 0.16480898515496922, 0.081418164921095, 0.08628553325146182, 0.09019753471194669, 0.09091666915155405, 0.07770577892965669, 0.08266045553753687, 0.08609288675094973, 0.07010072357629216, 0.0809913977187422]}, "mutation_prompt": null}
