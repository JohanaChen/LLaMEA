{"id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2599322832821957, "feedback": "The algorithm HybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "fa0b3725-80ed-43ea-b912-b7b2dc273977", "solution": "import numpy as np\n\nclass AdvancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(120, self.budget // 8)  # Slightly larger population\n        self.inertia = 0.7  # Increased inertia for more exploration\n        self.c1, self.c2 = 1.2, 1.7  # Adjusted cognitive and social components\n        self.F = 0.9  # Higher differential weight\n        self.CR = 0.85  # Modified crossover rate\n        self.num_subpopulations = 3  # Introducing multi-population strategy\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adaptive parameter tuning\n            if evaluations % (self.pop_size * self.num_subpopulations) == 0:\n                self.inertia = max(0.4, self.inertia - 0.1)\n                self.F = max(0.5, self.F - 0.1)\n                self.CR = min(0.95, self.CR + 0.02)\n\n        return global_best, global_best_score", "name": "AdvancedHybridSwarmOptimizer", "description": "Advanced hybrid swarm algorithm incorporating multi-population strategies and adaptive parameter tuning for enhanced exploration and convergence.", "configspace": "", "generation": 1, "fitness": 0.1834482046174596, "feedback": "The algorithm AdvancedHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.3311220915741928, 0.3464386175715386, 0.33618036497245196, 0.3878920219132709, 0.38151266255465, 0.3561408320473577, 0.3675586685624963, 0.38118469931561316, 0.35094692558440743, 0.05325116426454535, 0.060569789810265284, 0.043598170752875975, 0.05302619509873019, 0.05149601131673043, 0.037447526362462846, 0.0648830289689375, 0.046071255097018704, 0.042893135727573695, 0.08954494350068398, 0.09132882299304423, 0.08551735185714204, 0.07889674453109252, 0.09379479466070384, 0.09821428062383586, 0.09286727936768091, 0.09083643009020048, 0.08177711492451978, 0.059321566169741935, 0.07594336938739166, 0.06989840807678338, 0.07729947440410634, 0.06288031868984012, 0.07200442798235285, 0.07878998806360138, 0.07782352826573291, 0.06708649760981811, 0.9834575258660194, 0.9844147198125358, 0.9815009022706009, 0.9762996378224544, 0.9785023584689385, 0.981610392292057, 0.9851730011903091, 0.9783767381492027, 0.981678048381154, 0.1697648117311017, 0.19810635184460457, 0.18229474793340628, 0.17694174077763458, 0.16411338092734018, 0.17072957215876727, 0.17539973901806716, 0.185451449467528, 0.20852128035409134, 0.2506671200323488, 0.2375296092616136, 0.22424045562157846, 0.26706980979156536, 0.26580749012797467, 0.25281832574247576, 0.28215514624282856, 0.26595380477130615, 0.2466035540997611, 0.09631467749991751, 0.09943933470633526, 0.1325872169660095, 0.10860208253497072, 0.10700805435471106, 0.11062103011037738, 0.11474531101876806, 0.0945048991343247, 0.12288473455991245, 0.11551050573700139, 0.046709206824328664, 0.08948564099454637, 0.08658183495307004, 0.13188400095645592, 0.11830707500634707, 0.11474499031892815, 0.1012276570307733, 0.0794190856225594, 0.005992749212153314, 0.0025008252144420595, 0.0015825024571080037, 0.03427758779943435, 0.0028426105325326523, 0.010598758088965932, 9.999999999998899e-05, 0.005444166224581548, 0.031742132488846386, 0.07558421875771293, 0.09106746028337787, 0.10086596260949843, 0.09601331248900424, 0.05983176653506783, 0.08291263106206348, 0.10776384063441236, 0.08937556200553465, 0.09136131856771668, 0.000921090966604976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000367119488766221, 0.04831296645230032, 0.05616001667962667, 0.05739064688297624, 0.04937459771593189, 0.07679391099768218, 0.07575428103379178, 0.07118117982726091, 0.05974211464699186, 0.07365588580962557, 0.3122051322953251, 0.3236911788589203, 0.3160522181450631, 0.3351967306007111, 0.34365009597938334, 0.3586015592665155, 0.3202618964063947, 0.3252839674905129, 0.3370302170453957, 0.0881724743629202, 0.08622494588940466, 0.08622830652800417, 0.09850064562201355, 0.08196568359316991, 0.0768899025536266, 0.08237993778079655, 0.08647656681559379, 0.08349599621762538, 0.12753502799641359, 0.14795101640528863, 0.17549102933116978, 0.15543854546033797, 0.18621729552454247, 0.14580617812709296, 0.18593621317645292, 0.15763740313232377, 0.12670093029155627, 0.23702062196041163, 0.2195656494423469, 0.2454047982141757, 0.22947122494844696, 0.2342686181198712, 0.24154739490875343, 0.24075640353710703, 0.2506635156764603, 0.2442993536897624, 0.15219063567151048, 0.18147997816871797, 0.1889813463241028, 0.1987668144767495, 0.1907140577695251, 0.16187265235926807, 0.16767377402312755, 0.1762784164483372, 0.17271924878475786, 0.2026028170197537, 0.19053531453836414, 0.18757432024299492, 0.19060682245890803, 0.17889331170002465, 0.17460755327119426, 0.20630971482564797, 0.1838783838243221, 0.19865264213099743, 0.16773650307704102, 0.16452660130372065, 0.18582554847719168, 0.17394318443049994, 0.18130127583548095, 0.17681049482859656, 0.17343015107996085, 0.17994187835616016, 0.1705705438934243, 0.1634355375100367, 0.16431646941696287, 0.19992959662993848, 0.2977242882219704, 0.1847213939987009, 0.249029382473683, 0.16436487740963335, 0.1495518789191932, 0.40538345114737595, 0.33792381464575816, 0.16728028138582618, 0.27011832380297807, 0.3238572832604978, 0.16186085407847417, 0.19581935488795954, 0.1111433385437498, 0.12409121647608923, 0.2065089836031767, 0.19020520343914726, 0.18508145041461732, 0.18254046328617002, 0.20556483859984787, 0.18750941081922423, 0.1857363260027367, 0.1869473006083865, 0.1811865628496444, 0.19860041252900096, 0.07119609600078836, 0.06819659357871988, 0.08224192828930266, 0.06294398943577961, 0.07186240056597293, 0.09653492669468722, 0.06282722529534635, 0.06720835887761623, 0.0669169523140043]}, "mutation_prompt": null}
{"id": "5447215b-5f84-434b-88ed-57c55e44ab33", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "810e7bc8-1263-4137-82c4-534a6184177b", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "9a785702-2a55-42c6-94a1-b4502e2dd524", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 12)\n        self.inertia = 0.7\n        self.c1, self.c2 = 1.4, 1.6\n        self.F = np.random.uniform(0.5, 0.9)\n        self.CR = 0.8\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Enhanced Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(b + self.F * (c - a), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced hybrid swarm algorithm with adaptive parameter tuning and a novel mutation mechanism for improved convergence and solution accuracy.", "configspace": "", "generation": 4, "fitness": 0.21489142078078402, "feedback": "The algorithm EnhancedHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.4107274587794193, 0.40025007499294973, 0.4121796711481004, 0.4256481099491476, 0.47903427406426025, 0.4733168335770712, 0.42173641964263875, 0.44255125974868303, 0.45211733302824675, 0.0867850304956802, 0.08045673724736191, 0.11438578767667329, 0.10188127226648702, 0.10140928218710965, 0.07037407537684937, 0.0831287526332668, 0.09933143304313474, 0.1081316333917055, 0.09498982502944364, 0.10466097103640026, 0.12307265959152158, 0.097512829479526, 0.12462821958673409, 0.0988558983225033, 0.08922915078945826, 0.08725408872457352, 0.1139228171588389, 0.08057508726801099, 0.0740967619913907, 0.07985897586684187, 0.08246406778214166, 0.07234746266017245, 0.08093094255032995, 0.08059229415227342, 0.09888814155444703, 0.07185183200080103, 0.9869132873743575, 0.9736476213476616, 0.9804307104946334, 0.983635148674651, 0.9776327574247797, 0.9873722976087408, 0.9832978886848095, 0.9810214190639399, 0.9818254228096444, 0.192708561031681, 0.23441804040647407, 0.24603465187715035, 0.2199392236629516, 0.22999543379854193, 0.24994875821729645, 0.2248294724692963, 0.24527071875722462, 0.24030015535793736, 0.2769734275242408, 0.38764963334564984, 0.3993820717818246, 0.31700628287619514, 0.527653642202528, 0.34971062146034415, 0.33446656899137384, 0.4174558968784674, 0.48051055106534935, 0.1393646052224241, 0.10503224397672162, 0.10723719335281767, 0.1383993968330507, 0.09936230469051066, 0.14296416236229792, 0.12278352573949947, 0.07587132221430637, 0.1459312784394191, 0.11986165663588477, 0.12666392021639183, 0.18444195597750546, 0.10131033152692748, 0.13702268123700978, 0.13514825526564678, 0.11403806762636703, 0.11980344355505401, 0.15219690879739178, 9.999999999998899e-05, 0.028514858082401395, 0.0417186771160033, 0.002300261941626358, 0.0227166313887035, 0.013234990156284931, 0.002070312190624257, 0.0001704263453652377, 0.0048578907085587986, 0.061799507407084286, 0.07519158631309653, 0.17562771742591687, 0.06615467992030777, 0.053069900637115475, 0.08932450620138299, 0.08794411015174697, 0.07223923583514547, 0.11216911753327607, 0.01012760787493483, 0.0016473593361213679, 0.00948464165774654, 0.0014350200472706964, 0.00022454058965526436, 9.999999999998899e-05, 0.0054589619048869276, 0.01861084455524009, 0.03170786916706514, 0.0889999502560489, 0.10590581348646266, 0.08329412495924116, 0.09508278650436408, 0.08588370121618705, 0.09570597821742999, 0.08459089484125348, 0.1046962543184401, 0.12057818436257617, 0.3843919021493831, 0.3696112321156244, 0.38361879605796245, 0.3697028384328621, 0.38805940824706564, 0.40214056997266734, 0.36058824242449805, 0.3492556063184692, 0.4123246385672482, 0.0916416901754108, 0.09405413783203453, 0.13106599039026345, 0.09206342074540608, 0.08778822220434612, 0.0975432826318875, 0.1013136194926052, 0.09438349648544753, 0.09221198262321728, 0.13262158798441304, 0.18969653362230876, 0.14183061231732585, 0.1874147172840731, 0.15460441941757763, 0.15833372207199203, 0.15029675041108825, 0.1421930686119557, 0.1677062245042149, 0.25218050934254466, 0.28103584255694825, 0.2695055851081323, 0.2538972445250274, 0.2674526361356667, 0.27336674830181296, 0.2756733938087176, 0.2839376059279296, 0.26979588267971566, 0.20213927588068004, 0.19231585317202693, 0.2076051621848154, 0.21443438881736432, 0.1847692692165207, 0.20162775670781907, 0.1852604692889307, 0.2123024923953546, 0.22786196020140026, 0.1914686230586965, 0.20550070945777577, 0.1933902927982919, 0.1909280475837476, 0.2223371247798165, 0.2398502920422152, 0.18688596934539337, 0.22143916182840007, 0.2031848417231742, 0.1863158169144301, 0.1858654902930682, 0.1873614544082035, 0.17403646994318756, 0.18490319702766356, 0.1805996110313679, 0.16808938150440478, 0.17440904491485654, 0.1962801897270363, 0.622009219594907, 0.14811986094821272, 0.19031568402404864, 0.18726128998104807, 0.6075518736375951, 0.1633759187326136, 0.1855566181347862, 0.17178701116555495, 0.47134862761981966, 0.20231380084018724, 0.4017437584251622, 0.16598722228554474, 0.40731236297186346, 0.4751372412186142, 0.1130070419582968, 0.3700573255812043, 0.488209894974141, 0.2030878661796578, 0.1840688961656154, 0.2024492153541101, 0.18823098048246634, 0.19508516004796084, 0.19488933544693132, 0.19055951801966764, 0.18499311680973296, 0.18931139314204382, 0.18375396032906666, 0.06858961529628849, 0.0754707773998805, 0.08389079882192074, 0.08062399355139716, 0.0707764044413145, 0.07572933375584523, 0.08897513192746831, 0.08530604881936799, 0.07581615653980278]}, "mutation_prompt": null}
{"id": "c9dff3e1-6807-48cd-885c-f5a02bdb4efe", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "c489a47f-5c1f-40a2-a4ed-5af9bcc86639", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "4a1f94b0-094a-44f7-a9b0-c702b4005f7b", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "d1c81255-0373-4833-9e46-6c3fd2792f34", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "0b61a7de-6637-4131-acf8-32500a54e27c", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "c41962a6-4148-4de1-924a-2897792c67fa", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "e59a0b2c-fbb1-4d88-a96d-68c5d53a4cea", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "4075d99b-b5f7-4a4e-9bce-426423c04c02", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "c8e254fc-70f7-4b7f-abb7-bbe5d878e292", "solution": "import numpy as np\n\nclass AdaptiveHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.7  # Changed inertia for better exploration\n        self.c1, self.c2 = 1.2, 1.8  # Adjusted cognitive and social factors\n        self.F = 0.9  # Increased differential weight for stronger mutation\n        self.CR = 0.8  # Reduced crossover rate for more exploitation\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "AdaptiveHybridSwarmOptimizer", "description": "Adaptive Hybrid Swarm Algorithm that dynamically adjusts learning factors for improved convergence in diverse optimization landscapes.", "configspace": "", "generation": 13, "fitness": 0.19798621489311524, "feedback": "The algorithm AdaptiveHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.39284206516813924, 0.3882648939384433, 0.35604128221586895, 0.4200538265231738, 0.41216646876743623, 0.4253838003376048, 0.3865238111658441, 0.41285883933772816, 0.3993060232665112, 0.049676349126531516, 0.08434810414700356, 0.03272732226700481, 0.08184259463332888, 0.07200240806115799, 0.02928957926270792, 0.08088315839831883, 0.09194284202876002, 0.07378052649725775, 0.07875690435388938, 0.0850224038121229, 0.09104669852086955, 0.09133882363817536, 0.11115681778539743, 0.08233105737409385, 0.09284819419733814, 0.10610387627628826, 0.09996835386358749, 0.06964827068739743, 0.0803992107697652, 0.0819528202598494, 0.07681440017591445, 0.07885507814612325, 0.07379471481406019, 0.0791240964025881, 0.06485921201342648, 0.09433354912817338, 0.9825045762094717, 0.9832663737693038, 0.982706555081968, 0.9789120252309378, 0.9795202321367669, 0.9774081208141465, 0.9803597437046767, 0.9806440122127821, 0.9783357916129465, 0.21353381091193413, 0.20191628047097454, 0.2019758280921864, 0.19865030703994202, 0.22001542442567368, 0.23235947556792458, 0.19979467626410763, 0.21625363591811764, 0.2027549870758102, 0.2715109316020635, 0.3577526884562523, 0.3459639893739903, 0.3590506066386835, 0.27478210830103234, 0.19151035058547639, 0.333264487214449, 0.2670578063348207, 0.3611046631231528, 0.1168027851646346, 0.10348495104888311, 0.11629374120013636, 0.119525177542536, 0.08464491882156655, 0.11785255760397229, 0.10214835728693594, 0.1193612170662891, 0.12324347611540465, 0.11408525003039793, 0.09939884584413672, 0.13462577008045973, 0.09781777140454273, 0.14172386037988038, 0.11801098182358949, 0.14707185122547473, 0.1236647929648168, 0.1301499876563832, 0.023162027624881953, 0.006544978310562888, 0.02040707447005674, 0.0002499224260030797, 9.999999999998899e-05, 0.0008426040999304218, 0.000928096724550409, 0.007790600515060198, 0.005374181893924135, 0.09099588617665044, 0.04027813040403294, 0.10201195838181665, 0.09101406344140739, 0.06840962461296185, 0.025020406174495302, 0.06904006087061954, 0.08190675278426729, 0.07999426889769434, 0.0015714470554012427, 0.0010896246256983932, 0.0027575334244295258, 0.01168065109798122, 9.999999999998899e-05, 0.009009238594527402, 0.0006095931338628846, 0.002812560574533607, 9.999999999998899e-05, 0.07839017547200933, 0.06791147815069432, 0.07281509794542074, 0.08170899229898754, 0.08219060488021335, 0.08312448910185544, 0.07191249652846887, 0.07533200708080057, 0.08441026549918518, 0.36442098731369243, 0.35952616678017923, 0.3746759589576405, 0.3664648621987695, 0.3473949377105855, 0.3805153035413057, 0.32841613351218846, 0.3459311639187791, 0.34554636604671674, 0.09398367560082721, 0.08138753780388563, 0.09064470468226282, 0.09065692750490817, 0.09983644092706712, 0.09667313845962877, 0.0835097987648532, 0.08560266184758425, 0.07319500641593712, 0.1258293946837904, 0.15735351277808274, 0.16875524079666115, 0.16566522242596926, 0.17204204345477625, 0.1550978671070974, 0.21726825492837076, 0.12706466071651534, 0.15358347380122017, 0.24523726987545824, 0.24926382214146314, 0.24614657853211463, 0.2651813726382364, 0.24753503222720008, 0.26499719594214177, 0.2619452776795582, 0.2663812124487097, 0.2603478767636177, 0.1854987325432378, 0.19189634267061817, 0.18217586184511625, 0.18123241951238134, 0.19355380844813674, 0.19689773358036855, 0.20898251154172753, 0.21038540258715155, 0.19624623604007763, 0.18059409839526053, 0.1904677227112661, 0.19646072032838924, 0.18593246137318464, 0.16966146646085745, 0.19703816626497783, 0.17202769678165386, 0.19559460187345135, 0.19490119783740445, 0.18702180853369665, 0.1842731739333432, 0.19044082609086888, 0.167154514924867, 0.17900728727409254, 0.16257262642533166, 0.16520621534025082, 0.1743499903790824, 0.18798185504667664, 0.4055683405003496, 0.2061894187258646, 0.5343568064982616, 0.16230502053489704, 0.19179772636085324, 0.15771527187026113, 0.40897686058370575, 0.18005391449080455, 0.16080115339650636, 0.3924572020905063, 0.19575271628049873, 0.17170636365265568, 0.19938689054282388, 0.3715825882862267, 0.36322153232569243, 0.20012558970182626, 0.20133925432870858, 0.4310951783889744, 0.18121995111535671, 0.17275967257327796, 0.19296866391895418, 0.17820491261572913, 0.18543144130796918, 0.17959528680439962, 0.20305652583783917, 0.1749499642888539, 0.18113190406187474, 0.06596001291019293, 0.07288820844397703, 0.07814019125775651, 0.06213023948014107, 0.06508523380572495, 0.06590221668383456, 0.07980540369023326, 0.08445200269250652, 0.06857514512909424]}, "mutation_prompt": null}
{"id": "f2cc11b8-6c64-4d46-af51-39ffd7e99906", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "e8ffc18b-872b-4c12-b236-5886b77731de", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "440c4d90-d315-4c10-b37d-1b9e9358775b", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "4a836c53-509c-47c6-b3ef-9de4823402f3", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "e05cc1df-c9c2-4ce7-a632-975b8c96e35a", "solution": "import numpy as np\n\nclass RefinedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.7  # Adjusted for better exploration\n        self.c1, self.c2 = 1.4, 1.7  # Fine-tuned learning factors\n        self.F = 0.9  # Increased differential weight\n        self.CR = 0.95  # Higher crossover rate to incorporate more diverse mutations\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            adaptive_inertia = 0.9 - (0.5 * evaluations / self.budget)  # Adaptive inertia factor\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (adaptive_inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover with adaptive F\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    adaptive_F = 0.8 + 0.2 * (evaluations / self.budget)  # Adaptive differential weight\n                    mutant = np.clip(a + adaptive_F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "RefinedHybridSwarmOptimizer", "description": "A refined hybrid algorithm integrating adaptive control parameters and mutation strategies to enhance convergence and robustness in diverse optimization landscapes.", "configspace": "", "generation": 18, "fitness": 0.1754530213885273, "feedback": "The algorithm RefinedHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.2967466100822982, 0.2949621096357202, 0.29387248887876116, 0.33892796903932754, 0.35399936294444523, 0.3528271699103088, 0.3397351653324403, 0.3172121728412477, 0.33356100150798695, 0.03382349370386617, 0.04117832113052122, 0.03924095649536996, 0.035374640347509145, 0.02759715146540309, 0.030195129159481082, 0.03405769862868002, 0.04653406133892113, 0.03870985337486055, 0.0791335644804041, 0.06872029560001225, 0.080590086525552, 0.08431131628414246, 0.07787634634802165, 0.08025968331193145, 0.07899677802109584, 0.07673246442248749, 0.08297314415455692, 0.05676595524900152, 0.06809967471753176, 0.07405858726710579, 0.06637815018660076, 0.06867154919647145, 0.06947692559708862, 0.0575821530536994, 0.06344417494961185, 0.06258017601214849, 0.9798126152642326, 0.9887626621807973, 0.9837514725375233, 0.9742251836590656, 0.980256014043897, 0.9846888728017127, 0.9857920483584716, 0.985911022197648, 0.9854120973483834, 0.15376290475481913, 0.1567801521214638, 0.15954621290997306, 0.18108250029800788, 0.15426966342473802, 0.15835379815748896, 0.15120577608433727, 0.14592231273845702, 0.1542011225200266, 0.27385575496345815, 0.2880254520401804, 0.3045379405534624, 0.28815550116695854, 0.2546446858388981, 0.2190489998820785, 0.20844788890036947, 0.23461303847683335, 0.2622249227005631, 0.0879387077554622, 0.0739504398595181, 0.09837066257184213, 0.0790321400910603, 0.0810318876451005, 0.09880050923202943, 0.09400638754238422, 0.09473615685446735, 0.10357886546429107, 0.10022734126336341, 0.09465553953131511, 0.07158758759609629, 0.08086770493271866, 0.08335249675538214, 0.10784801209816197, 0.06449876645948827, 0.07626788946356189, 0.07262855513930866, 0.012937154415843866, 0.004122255345290982, 0.008086844046218955, 0.014040998192507148, 0.0593640560816604, 0.019598344041050986, 0.009411229300460566, 0.002939982153667753, 0.004707965425025051, 0.0736289244705347, 0.06626872620066682, 0.05429497472303679, 0.05195945124509238, 0.08657740889909415, 0.060918205176692775, 0.07791173852016076, 0.04650841457211352, 0.04857169620625701, 9.999999999998899e-05, 0.0006765482828577918, 0.0016665911214797102, 9.999999999998899e-05, 0.0009095849015453572, 0.0005591533107457414, 9.999999999998899e-05, 0.0014977296513024596, 0.0012199882329086975, 0.055992128888192716, 0.06609291260678163, 0.05974898545284557, 0.06021191124725134, 0.0550597526354919, 0.05802036810893063, 0.05559793745069186, 0.05031644839187499, 0.058919777822258546, 0.31338575964952586, 0.3055906023336685, 0.3118889933729032, 0.3206150623232864, 0.2883187112701464, 0.32486964930387474, 0.2925826248554033, 0.2982607075783442, 0.3163597940029744, 0.07684844123787538, 0.0856716956088378, 0.07680593900238186, 0.07875455331610104, 0.08618722795464595, 0.06989426410340405, 0.07309617040237248, 0.06539375868348052, 0.08040840101396118, 0.14689532289107776, 0.14202161453626105, 0.13567179198771195, 0.1624603849205669, 0.14287071920100936, 0.1369744124834671, 0.17996536629287985, 0.12968097618469654, 0.13384344870178233, 0.21165138394872085, 0.2238930413497534, 0.2305161558539386, 0.23034932821673704, 0.22728891860346878, 0.2131887356243749, 0.22831808985341873, 0.22825516369300736, 0.23451419084552894, 0.15694581770045057, 0.16533360229426652, 0.16940759544536887, 0.1563059725597583, 0.15627513270055515, 0.18349155304562514, 0.17410063330128156, 0.15362013043189926, 0.16543939621145654, 0.17317328094267126, 0.16305257335642398, 0.19714307104761042, 0.17425315014498632, 0.1587606525901607, 0.17246586761028704, 0.17365744330483335, 0.17169238849867685, 0.20256314803122, 0.16788419083580886, 0.16645010878685573, 0.16271976397188137, 0.1613181901889753, 0.17744313077073148, 0.17022401511160057, 0.15189648676516587, 0.16000066251238987, 0.16753793307836073, 0.16647155617100962, 0.4157526480026381, 0.4422325678369794, 0.3077825564290927, 0.1714716332717493, 0.15870605296531282, 0.3259010259259789, 0.14803935688152925, 0.17755011808966226, 0.2812277304333396, 0.1633679191453724, 0.17854791156593108, 0.32047473778014335, 0.16465743818495793, 0.30908684110322626, 0.18531158017647675, 0.20383775878914934, 0.20121251998913026, 0.1810224089674909, 0.18027940235395146, 0.1778803870068132, 0.17426139078524283, 0.20608872931721312, 0.18578442979979826, 0.18576539233922074, 0.18875754665109812, 0.19120078643410643, 0.0644747609027021, 0.06909257992189377, 0.06499242515323422, 0.07353200027647455, 0.06541448264220218, 0.08029503647797687, 0.06383380410390582, 0.06553808369361214, 0.06704489341785336]}, "mutation_prompt": null}
{"id": "1255c3ef-7ae8-429f-98df-ed2d6187a237", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "0098dd92-c554-469d-9f57-edd9331293de", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.9\n        self.CR = 0.8\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            inertia = self.inertia_max - ((self.inertia_max - self.inertia_min) * evaluations / self.budget)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Adaptive Differential Evolution Mutation and Crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), lb, ub)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                trial_score = func(trial)\n                evaluations += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best[i] = trial\n                    personal_best_scores[i] = trial_score\n\n                    if trial_score < global_best_score:\n                        global_best = trial\n                        global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "AdaptiveSwarmOptimizer", "description": "Enhanced bio-inspired optimizer integrating adaptive inertia and mutation strategies for improved convergence and diversity.", "configspace": "", "generation": 20, "fitness": 0.17726990997214867, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.325342914092828, 0.3393276051951958, 0.3284545979100072, 0.36035348228088415, 0.35237263260038176, 0.38450787417841814, 0.3518388112701386, 0.33187885092851266, 0.35735594005605154, 0.05723726206025226, 0.04704303780890717, 0.05638111124934875, 0.04602173286279865, 0.045749927986741046, 0.043344141348885534, 0.07330880712644139, 0.05996439195020542, 0.05493118456393131, 0.08223247761029218, 0.08165547859802569, 0.0760933728319918, 0.07554451167800491, 0.08670683089342235, 0.09964396753353266, 0.09065469981956686, 0.09701890019937853, 0.0842605602873151, 0.06729345469888581, 0.0673500983108628, 0.06590570455245237, 0.09879561251455338, 0.06520495092347556, 0.06528242473065238, 0.060904514615455096, 0.065066077946073, 0.06816611941515416, 0.9729650092267814, 0.9839171829347041, 0.9746719248638894, 0.9741774135518525, 0.9813886782011125, 0.9800227416647609, 0.9794404165198143, 0.9852050538067292, 0.9802469185324711, 0.18373047422937538, 0.190719596288628, 0.16600911465786616, 0.17747128573240256, 0.1587101807748813, 0.17922390819248135, 0.16495378355374601, 0.17601565002852348, 0.1804222673123539, 0.21716839943791333, 0.2186449040248143, 0.2302480718438431, 0.37231434371372074, 0.22947948637474325, 0.25388908609987904, 0.23345684820637325, 0.25814933606316703, 0.2997943133420885, 0.09686565075195719, 0.10353451091997756, 0.08403544175118183, 0.08117901105434977, 0.09116240733644587, 0.09221314286824223, 0.100639194498223, 0.06697533356549557, 0.07999143047980584, 0.09877863888777993, 0.0435457412928929, 0.08295409576941037, 0.0743165353146098, 0.08346422868441383, 0.10570004825187174, 0.09708202850748293, 0.0847402180306388, 0.0762235127929336, 0.00926559896242618, 0.01211100544555499, 0.0031797656688830056, 0.013223940382058541, 9.999999999998899e-05, 0.002653537494581526, 0.0025689754228688244, 0.007053836128062874, 0.038113023315323846, 0.07473067884290341, 0.06530173972165798, 0.09697504795319656, 0.08103712092102977, 0.06754010492482743, 0.058023424567190895, 0.05848512689280161, 0.06715832906867403, 0.05752102205850129, 0.0019463827428347624, 0.0008884375341003947, 0.003995687057282149, 0.0014800622429503862, 0.0026907511764040493, 0.00047141948361006936, 0.000645508142618878, 9.999999999998899e-05, 0.001105959712313087, 0.05145182595761255, 0.05651070037618644, 0.05762308964562357, 0.08760668605876076, 0.059088825974068615, 0.06519636103013016, 0.05480635798111089, 0.07036032250109436, 0.056357719314921506, 0.29578318741759446, 0.3047807774807657, 0.3139903547601143, 0.3407279197942745, 0.30552627876573146, 0.3077080232562718, 0.2895789819472795, 0.3114295861862316, 0.30734260445674166, 0.07965014219455657, 0.07820453280414219, 0.07684687998390616, 0.0662587980129381, 0.06877150933956055, 0.06867908664487643, 0.08042765393356754, 0.1094834706772454, 0.08408255962071709, 0.1717101023897598, 0.15162531548863922, 0.1372026673014336, 0.14783645374146437, 0.14135875039117218, 0.14121221583826138, 0.1465415453873662, 0.13381054748749777, 0.1465784738593484, 0.22256191524663738, 0.2297995260343796, 0.2238069063313386, 0.21182105587538358, 0.2096599793455134, 0.22533565414689216, 0.23701986242716533, 0.2386516956936664, 0.2368002408898897, 0.1736216074996002, 0.1650111799985461, 0.16729309122212632, 0.1522503807432366, 0.16644553278904461, 0.1529135802321483, 0.17299708895906063, 0.18051187642367095, 0.18773367265833207, 0.17031284925957713, 0.17245518511604574, 0.1754869081938416, 0.17608705068631902, 0.1755752638613861, 0.16358707519907545, 0.19216071079978458, 0.19945013586929672, 0.18172523560786435, 0.1741712361115746, 0.16713863502156312, 0.1660104658811128, 0.1762474477230579, 0.16525810813081243, 0.16347538790587257, 0.16979194290345734, 0.15996884968460456, 0.17514214177772447, 0.1352276632182069, 0.3625373646657456, 0.3414866709066644, 0.15472595281947632, 0.2991658818156674, 0.14715739548925488, 0.3183606104769354, 0.15976837422878876, 0.1786641939006779, 0.16439737304147506, 0.1631907333363699, 0.1855234794690439, 0.32412357291952143, 0.16810566768218027, 0.1691526631112189, 0.19689245369060282, 0.31284943580547264, 0.19300790642384036, 0.18701207303335243, 0.1819729905944686, 0.18029208040367772, 0.18323489472946808, 0.18663241440103961, 0.18377694181769466, 0.18311907241332093, 0.19620020805553917, 0.17701993276696848, 0.07177288294432005, 0.07093818965069076, 0.0662523895162227, 0.07700287932003014, 0.0648191080700552, 0.07283539556328267, 0.06607308178675575, 0.06686432975482837, 0.068316403482374]}, "mutation_prompt": null}
{"id": "9c600235-b312-4900-a27c-08d9d0d13795", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "d6288263-84bf-4a99-9c13-64c4ee3d8a36", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "51d10d85-c414-4ce6-a062-9ea460ae76c0", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "77b2e93e-bcc9-4f6d-aacd-5bff95e78654", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia_min, self.inertia_max = 0.2, 0.9\n        self.c1_start, self.c1_end = 2.5, 1.0\n        self.c2_start, self.c2_end = 0.5, 2.0\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            w = self.inertia_max - (self.inertia_max - self.inertia_min) * (evaluations / self.budget)\n            c1 = self.c1_start - (self.c1_start - self.c1_end) * (evaluations / self.budget)\n            c2 = self.c2_start + (self.c2_end - self.c2_start) * (evaluations / self.budget)\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (w * velocities[i] +\n                                 c1 * r1 * (personal_best[i] - pop[i]) +\n                                 c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                pop[i] = np.clip(pop[i], lb, ub)\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced hybrid swarm optimizer incorporating adaptive learning factors and constrained bounds handling for improved performance across diverse optimization functions.", "configspace": "", "generation": 24, "fitness": 0.19452638974947045, "feedback": "The algorithm EnhancedHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.3381510821561031, 0.3578976381054584, 0.34835586655837303, 0.399705213722919, 0.4031647924165064, 0.38878861124211217, 0.39316856177239556, 0.38805665538204026, 0.3674747423415823, 0.1046350319372108, 0.0982353748650836, 0.09638759934410812, 0.0917215201674233, 0.07737788734832463, 0.09133216822579338, 0.09088109052394977, 0.08707602344375265, 0.08376824121623117, 0.09466313288017758, 0.08501846561937276, 0.083060791433622, 0.08933412756382964, 0.07938950774562947, 0.08899346275861686, 0.07440335028779121, 0.08004672241052702, 0.08326119483189176, 0.06816753527658947, 0.06305045824725075, 0.0638917657675977, 0.08211380941210644, 0.07067336589056017, 0.07441725893213913, 0.06709586426603653, 0.06571546384988347, 0.07060479917818574, 0.9534618845355558, 0.9830946315415159, 0.9436777122666716, 0.9600857017672726, 0.9608472770728479, 0.9600249438223897, 0.9669742431971508, 0.958017075639579, 0.9419489055007432, 0.1910104347414121, 0.19466550661608495, 0.18247558681481402, 0.17917867452839742, 0.18053978331578546, 0.18254058574088572, 0.20184277748669255, 0.20270859597294189, 0.19124091136689436, 0.3289401463894214, 0.3544938114566566, 0.3578484851844883, 0.43284168615137486, 0.3379917783411843, 0.3550197863677723, 0.3578507690331414, 0.3917138910621537, 0.34355658385968646, 0.097878456586731, 0.09457513697075759, 0.09652300638273004, 0.10194563441738391, 0.09587923251532415, 0.1032652048440672, 0.09038413960931502, 0.07475773752711523, 0.10414479586911984, 0.0896999115732291, 0.08746088314941058, 0.09183472048676833, 0.09521539925436895, 0.09112181981833423, 0.10988352267688772, 0.07240586230700607, 0.08548454403497507, 0.10293410238622125, 0.048345769408112416, 0.025056644452340127, 0.018634448858234065, 0.04198664920438444, 0.02025895616684359, 0.0429607778486506, 0.02716226937362931, 0.02005760742675844, 0.031004695440524643, 0.1300485364791839, 0.13828219867840252, 0.09993675779919398, 0.0622422281715066, 0.09471439924628577, 0.09815283312144407, 0.12843410023284962, 0.11414773043368509, 0.11605509648359857, 0.021051791332556635, 0.01582766562846194, 0.014637544593425034, 0.013894016800989673, 0.012009220921709862, 0.010815088765441572, 0.014514260532735523, 0.01703432330378596, 0.02705735578284041, 0.08282744391339203, 0.07562613146529273, 0.0815101505724517, 0.07015835494619571, 0.08323629125003063, 0.08607124263656007, 0.09940833103686875, 0.08569956356918651, 0.08672647000544076, 0.3375360025178795, 0.3377040530543757, 0.32865776837261196, 0.3357783483876434, 0.3316604409537437, 0.3333748525843413, 0.33456477700234155, 0.3195389582193524, 0.3206548233179667, 0.08755650969883833, 0.07476039442363525, 0.08509472906724624, 0.09483572236061866, 0.0813669332372241, 0.08576063943634671, 0.07960342919732433, 0.07617807304524993, 0.07030237842038367, 0.144825674535072, 0.12732652988240134, 0.13514497929320546, 0.13999202490115237, 0.14230323050140958, 0.15221896529113732, 0.14709477934192616, 0.13831226119258577, 0.14166005968510997, 0.23565046445554494, 0.23759663755310578, 0.24172515871363842, 0.23794741683800236, 0.2357253720022714, 0.22743608091166112, 0.2659115981202599, 0.25644856498591306, 0.2399975343599713, 0.1771738663765029, 0.17150079327818746, 0.1837556529521388, 0.1580279333621284, 0.1959790583705625, 0.1633906219652903, 0.18552098582400678, 0.2003972627080649, 0.17641466227150027, 0.17156260135514112, 0.18074700908214125, 0.17927869774613447, 0.1784859318123767, 0.18130209127574648, 0.1873969501924737, 0.1772165310384547, 0.18255315781165837, 0.18732294638078206, 0.1555902654672473, 0.17140385407372083, 0.17374966740784892, 0.1587337024031178, 0.19475334014099066, 0.16515987979911007, 0.1695122181604698, 0.19084148974676696, 0.22079172152677207, 0.4070791361681836, 0.4128092036218759, 0.39831096966734225, 0.15130030787639503, 0.34657131897291016, 0.15456778020028816, 0.17293505804592768, 0.32627713005619485, 0.17879745637174327, 0.30923897708501946, 0.1764882354453312, 0.16487452702560446, 0.35941888687548484, 0.1672482599915076, 0.25834473825954996, 0.19951975603754246, 0.24545306438634895, 0.3288005030768595, 0.1747936189685383, 0.18645152051565217, 0.18281430214376937, 0.18158381491903874, 0.17767190780810993, 0.17817496800760524, 0.17453939261167217, 0.1854497451782513, 0.17826703722709736, 0.0664484504847942, 0.06573893481548798, 0.06346886220248893, 0.06919203520445316, 0.06644177635567794, 0.07085757568604967, 0.06689978163495691, 0.07281946612925294, 0.07159022525035885]}, "mutation_prompt": null}
{"id": "4809cc44-2275-4713-84eb-33b53586a84f", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "83526a5a-f12e-4b6c-af24-3ea82538f4f9", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.7  # Adjusted inertia for better balance\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.7 + 0.3 * np.random.rand()  # Adaptive crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))  # Reduced velocity range\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i] + 0.01 * np.random.normal(size=self.dim)  # Added stochastic perturbation\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced adaptive hybrid swarm algorithm integrating stochastic velocity adjustment and adaptive crossover for improved exploration and exploitation.", "configspace": "", "generation": 26, "fitness": 0.19250209935885523, "feedback": "The algorithm EnhancedHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.3514732446607777, 0.3867556137718038, 0.3863773985114146, 0.39436617139787156, 0.3950254331725631, 0.38463970007494075, 0.3553255825217082, 0.3735417393917806, 0.3711463072826381, 0.03310794975854858, 0.04852367793905765, 0.03559732276316807, 0.03757201229548246, 0.03283184672580752, 0.03360947901836864, 0.04029673510781506, 0.05632178438861535, 0.043224102012489274, 0.07262498008313267, 0.10243207430544987, 0.08372346654618046, 0.06440601817331426, 0.0888025445900954, 0.0818578801670099, 0.09367647213645214, 0.09262288707004374, 0.09009839308319756, 0.08000002770416337, 0.0771000823654926, 0.07288435217807365, 0.07265264788609094, 0.07741812197502163, 0.07287641188514049, 0.0743657848801389, 0.09230900301084166, 0.07998580936102606, 0.9856892892060185, 0.9764706236497075, 0.9829001164310545, 0.9821429863605985, 0.9792883026077024, 0.9856283030474818, 0.9725985941058134, 0.983616463624389, 0.9730149695272592, 0.19788079729557573, 0.20469307369162548, 0.21246097095721828, 0.1846902805476358, 0.19558874980774632, 0.17462779409306406, 0.1932683192426764, 0.2114326773639088, 0.19760798524509027, 0.256911402387515, 0.24772364227448274, 0.24077116579005553, 0.25928663717413525, 0.26844453428484516, 0.2856595975241889, 0.23818849229159533, 0.28248897579820564, 0.24612471032922678, 0.1223072786411743, 0.11614530193065531, 0.1473255924278647, 0.10988459075961199, 0.11949735659365068, 0.12061416889679966, 0.1282483181563635, 0.11218704558145964, 0.12025559176441714, 0.11872061284821689, 0.13454851002546508, 0.11733754278635011, 0.13192932040990413, 0.12962451497508776, 0.10207503756410219, 0.10728640476156948, 0.08907097312192969, 0.10494491377317805, 9.999999999998899e-05, 0.013802906633178846, 0.00524901873941741, 9.999999999998899e-05, 0.008152981520989533, 0.0012239391172083058, 0.012886751316561251, 0.005197951890699715, 9.999999999998899e-05, 0.054093864532959945, 0.07351887795213463, 0.05587155196194893, 0.0734962323374535, 0.0592520265691906, 0.07860026451377267, 0.04860228942049638, 0.09346261151119795, 0.06974441070428039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004377360420297238, 0.0009893854865055118, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060557045471240745, 0.08006923812565836, 0.07112679743361328, 0.0773666301795849, 0.08815515354475811, 0.10010883151000793, 0.050491910982300214, 0.0726688865152435, 0.07651534173114327, 0.34240091309572473, 0.33055753324484016, 0.3665287998479364, 0.34788866152329023, 0.35141554614996007, 0.3373930573570839, 0.3475982496284258, 0.35318830707675575, 0.3475479881229707, 0.0890116608677346, 0.0888404309089652, 0.09451229086283963, 0.10828831389997162, 0.08863494035431796, 0.08415004568659001, 0.0796565214510252, 0.094874925499561, 0.09467589922938746, 0.16115111200100074, 0.1624185382834643, 0.16281555459115993, 0.1575277759031678, 0.19999272196513218, 0.1554485986231866, 0.13986895561783297, 0.15679039358751745, 0.14274743097642206, 0.26123890692752394, 0.24805194393277585, 0.23419644390937355, 0.23219928199708784, 0.24351487761915003, 0.2517906482942882, 0.25420023537775216, 0.26550604480085804, 0.25431166444160513, 0.17315010014264876, 0.20150267942391964, 0.18041630433482114, 0.17442365524616088, 0.162681277510473, 0.18812792511114396, 0.16111214738315371, 0.16509071670323394, 0.1892993034302718, 0.19397726168505036, 0.1758962171409605, 0.1867156942696765, 0.16855429983622328, 0.19185663387654628, 0.17779770144078388, 0.17999205869620272, 0.18260393895792149, 0.23674018164059396, 0.1780756619058146, 0.16361329350026266, 0.23073753303083044, 0.17054187212558336, 0.1725845118210667, 0.1886151768553308, 0.170119141940675, 0.17633364507488258, 0.18515803469901881, 0.4951731213567211, 0.16446467551926958, 0.4114165626951124, 0.15796905494449653, 0.4665707800448411, 0.36833821266813893, 0.18437668485948688, 0.4357545781652047, 0.16968793679225858, 0.3177845501299208, 0.18908237731944155, 0.24767797853671647, 0.18663154214484956, 0.40788442248867807, 0.15632163312835567, 0.3468817719789429, 0.20535751641407518, 0.18628431533382483, 0.17256916044470727, 0.1811111428275286, 0.19302137788788665, 0.181891909370414, 0.17793385016057783, 0.1826605490073392, 0.20162109149181506, 0.1748629495285231, 0.17704277797162593, 0.0693404059567927, 0.07518898850355071, 0.0656864340094706, 0.0785239850674665, 0.0680470942540029, 0.080760702071625, 0.08326278238651719, 0.07497766876023326, 0.07028284785822125]}, "mutation_prompt": null}
{"id": "3f0bfbda-23d4-44a3-8c9b-28058877f26d", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "ce57867e-7959-4ab1-907d-beae0150e67a", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "60899fd7-8650-4637-bcf6-52cdc43ab42e", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "8718b08f-2599-4a65-99c1-4af3c35a4cb6", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "568b5361-e718-4620-8e6b-5a3b710e0a0a", "solution": "import numpy as np\n\nclass EnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.7  # Adjusted inertia for better balance between exploration and exploitation\n        self.c1, self.c2 = 1.3, 1.7  # Tweaked cognitive and social coefficients\n        self.F = np.random.uniform(0.5, 1.0)  # Adaptive scaling factor for mutation\n        self.CR = 0.8  # Crossover probability slightly reduced for diversity\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Adaptive Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "EnhancedHybridOptimizer", "description": "Enhanced hybrid algorithm integrating swarm intelligence with adaptive differential evolution techniques for improved convergence and robustness.", "configspace": "", "generation": 31, "fitness": 0.20758641942106767, "feedback": "The algorithm EnhancedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.3838890499055079, 0.4042703665230031, 0.41319921484714817, 0.42555791414309974, 0.44678301384293184, 0.44735667431428616, 0.41492753320793363, 0.4272899855107266, 0.4408283046752577, 0.07692275338347698, 0.08668793434770727, 0.10345246585634671, 0.08662474679813748, 0.10010010777154765, 0.11840954150716876, 0.08108600730346516, 0.10078549066911568, 0.043682506447368374, 0.08368857623111015, 0.08758380955033296, 0.09022255734855444, 0.08614438063264318, 0.10749458548854096, 0.08752008997734262, 0.07801203275264545, 0.10023406417955705, 0.10819001700652897, 0.08391364743246832, 0.06966703514445594, 0.08284956967379387, 0.09243161567609226, 0.08140417944278322, 0.08596322449594174, 0.07710930798949234, 0.08232931141980082, 0.08492932326849112, 0.9833475949063859, 0.9642165064545507, 0.9820938956208443, 0.9805762924712351, 0.9809849132714328, 0.9764954352352837, 0.9822267809010521, 0.9837469947615533, 0.9780898620591458, 0.212675362878184, 0.22906326245845532, 0.2585582467852421, 0.21227848569825725, 0.2235209546727911, 0.24142844620068582, 0.22299849632159174, 0.1981148162865164, 0.23933039133617595, 0.27488487716029864, 0.26207486505513367, 0.30589744442394096, 0.3881409215362275, 0.37890888271137335, 0.2710297319245848, 0.34496547392664256, 0.46061951849536864, 0.3207342187876365, 0.12989392200845196, 0.1847204240001039, 0.15429729280448823, 0.1258882616374154, 0.13557854718855522, 0.11122188977919412, 0.14312045328231815, 0.1402047528770265, 0.15442736753503217, 0.09574397522938072, 0.15666399079630322, 0.13298237416424996, 0.13061369934467004, 0.11557979854669642, 0.1299275856689872, 0.1239048952042825, 0.10131535770005395, 0.12366061787825111, 0.0023090388043277565, 0.01750454861947981, 0.025403047253216404, 0.0039634069952516615, 0.0028735416504563904, 0.013987593541666343, 9.999999999998899e-05, 0.03141188554863816, 0.002891138660514714, 0.1194004234848911, 0.05809821561547501, 0.07792450949946705, 0.1291246075638519, 0.07384123525525776, 0.1367153315419073, 0.08777327871673446, 0.097120892297341, 0.09037600371097232, 0.0105506613923122, 9.999999999998899e-05, 0.005604297307184036, 0.0029353128088132063, 9.999999999998899e-05, 0.009063488353173832, 0.008596146506262614, 0.009228728598404401, 0.004114982974958603, 0.09987139861086858, 0.09032770211254049, 0.09698952530478433, 0.08516842526574286, 0.10802475991087845, 0.09111946124713899, 0.10388169505573519, 0.11002057306686897, 0.06967422319698813, 0.3666962561983421, 0.3759710163628003, 0.387789741054934, 0.3764859418696439, 0.3813592420764824, 0.4102461901929557, 0.36676445688535475, 0.36457530883870226, 0.3821602636915301, 0.08443727477264307, 0.1030894024153235, 0.10329300132083985, 0.1046860191876463, 0.09685185497002569, 0.09707630465767414, 0.10420808057385, 0.08498285609575118, 0.10345127759392181, 0.1899821584907777, 0.1931613826723697, 0.20423025486144353, 0.18395936326098195, 0.16578977427249697, 0.1601166405574015, 0.2401781292368964, 0.2152088526484497, 0.14153031005327632, 0.25850079803922643, 0.25294775160729954, 0.2558454502621217, 0.24799755763742137, 0.23971893542622957, 0.26012597819633665, 0.26098389222282903, 0.27216409619411663, 0.29014200522421385, 0.1946820049587431, 0.20078494661456703, 0.2249491490351505, 0.2089635346895372, 0.2044822485060126, 0.16665275522880396, 0.18078532830022487, 0.2031650239061531, 0.21232585560092654, 0.19292931335394836, 0.1897321990096753, 0.21991576540431346, 0.1863277002805659, 0.19009710524262013, 0.17227778207040556, 0.19982990032664383, 0.20479930669274837, 0.19261274167878784, 0.17642555671129645, 0.2070943137563358, 0.18329129832892244, 0.17366185626394148, 0.189941192724438, 0.19741008211550126, 0.17964168446950823, 0.181618638105429, 0.20083829217543603, 0.5847693849909883, 0.17464097272030776, 0.19471581745504696, 0.1815638831453057, 0.1736453569477402, 0.16143014063628947, 0.18670673448476904, 0.5792128985415592, 0.2044691989201387, 0.12516584379823126, 0.4785651608832465, 0.19925744586015037, 0.12410499407380815, 0.19848953040511452, 0.1827460775037939, 0.15007268822762942, 0.46265170553640533, 0.20891746534226063, 0.1757009490611665, 0.18103712120583348, 0.1848008857215213, 0.18480583863113753, 0.1840063587718661, 0.17947917853203488, 0.19267090637615092, 0.2002864995364273, 0.19671141048617258, 0.07335520905769577, 0.09348465950373697, 0.07691764053100336, 0.07621197298727533, 0.0802683324391672, 0.07440137047627382, 0.0939201493527344, 0.08693041812179014, 0.076130102289939]}, "mutation_prompt": null}
{"id": "a2b164fd-c785-4c7d-817d-d9b5f0419bb5", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "2767e798-3def-4c40-afe9-29424851d4cd", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "43c633c9-dbfd-49a2-9387-dc28cbbcfaf6", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "a001892a-7db2-421f-9105-05dd87efaefb", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "7401c9f4-d7af-4902-b17f-ddd089cc531a", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "03dcd365-5e7f-47c9-bdcd-40112d81e73b", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "6fec139c-0895-454e-8527-e716204acf61", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "7076f4cd-4fa4-4e03-a2f6-c1d2eefe0736", "solution": "import numpy as np\n\nclass EnhancedSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.7  # Adjusted for more exploration\n        self.c1, self.c2 = 1.4, 1.4  # Reduced to promote balanced convergence\n        self.F = 0.9  # Increased for stronger differential mutation\n        self.CR = 0.8  # Slightly reduced to encourage diversity\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia for adaptation\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)\n\n        return global_best, global_best_score", "name": "EnhancedSwarmOptimizer", "description": "Enhanced adaptive swarm algorithm using dynamic parameter tuning and localized search to refine global and local exploration.", "configspace": "", "generation": 39, "fitness": 0.24449878241691553, "feedback": "The algorithm EnhancedSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.4791455517083433, 0.5058296996162506, 0.5293935525212952, 0.524140288431411, 0.5193835344746778, 0.5163906738577808, 0.5027643152604455, 0.5090328030846023, 0.5143734791651611, 0.18660086853211966, 0.18872362041066992, 0.20291757018331014, 0.18426582523824586, 0.18816695317416876, 0.1877209029825624, 0.18666647292552452, 0.18945473825306303, 0.17906986516976353, 0.09421414277932749, 0.11410952291371301, 0.11595270771776944, 0.09738907571000632, 0.10786029471083425, 0.11626908144315495, 0.10877350638962657, 0.1056244567412239, 0.10629777980918065, 0.08275159421508593, 0.08063629390745974, 0.08581762137120041, 0.08775595032438799, 0.08588014925977427, 0.1040530759937528, 0.08510031912710203, 0.08457601078717358, 0.09986838907367235, 0.976929363162021, 0.9818106264783855, 0.9800533384054184, 0.9783732962602095, 0.9794702820128988, 0.9778684115050208, 0.9782559803088701, 0.974756150370856, 0.9779959686901134, 0.26210265586158943, 0.23743045521078843, 0.2769397919225165, 0.28833981879139714, 0.27874090392956263, 0.2783724991459603, 0.2872397127912615, 0.26300011328881756, 0.2894271955736716, 0.5807568936016907, 0.5421375718749852, 0.5391878930283556, 0.5719364204483715, 0.4674563048679974, 0.549789193093602, 0.5421143763703458, 0.41141888889294576, 0.49729171888098067, 0.185354768687382, 0.1621207279844662, 0.16197393814891659, 0.19029313331938436, 0.1084209363931985, 0.17543531121800282, 0.16615155909285717, 0.10876291509223612, 0.17735524971305017, 0.1472037969066463, 0.1737836805382258, 0.14666160043647503, 0.2261903081396638, 0.13527689908967933, 0.19037045691183418, 0.17278626345465764, 0.1768107602985145, 0.1567580532910151, 0.047573406193613166, 0.02963203514350332, 0.07125524577571885, 0.009276520726745785, 0.014990320873422336, 0.03892591604787554, 0.040535180686596894, 0.0583893240561576, 0.05547773398735867, 0.10072567294654888, 0.10375581164921477, 0.13793828695321386, 0.11233855857996855, 0.0687651716377945, 0.05822207914733246, 0.12777909628673823, 0.10500050297611474, 0.1213706003332119, 0.018435191040820587, 0.017684868209839943, 0.03839571022587229, 0.05047966152250538, 0.031828371948875445, 0.04412769233078728, 0.051261153363369116, 0.04223751104502804, 0.038792215778309935, 0.11250738577827746, 0.10875857207097217, 0.11710242120059389, 0.10963956784854911, 0.12274436107249875, 0.14965332390950392, 0.10511347185218878, 0.118760834639828, 0.12829255028634634, 0.4424425884832792, 0.42176560586053957, 0.4186129132014693, 0.4121628548130938, 0.4268796735267957, 0.44048404049788437, 0.4247012185619399, 0.4058620960859227, 0.445462616803306, 0.11345776971759802, 0.08896584563394883, 0.08697902490167086, 0.09284242598178627, 0.09445222671073972, 0.10730355617637743, 0.09865556395243857, 0.08313481186476879, 0.08832977487438942, 0.1418605170251741, 0.14556918407193875, 0.14914907553944345, 0.16923565880997526, 0.156569370711094, 0.15763474078094897, 0.14425122026721582, 0.1414204365934787, 0.18637835395511249, 0.2990917640533516, 0.301830939834407, 0.2785557387676382, 0.2871115541848156, 0.25629124626336164, 0.2824234745430956, 0.3123896075465997, 0.2987713287491378, 0.3186561656100454, 0.2399112262022819, 0.21632257002991973, 0.2235653246654875, 0.23891529647733767, 0.21460827715767572, 0.22304907130787055, 0.23586598882599918, 0.23165204429945208, 0.1702826306287043, 0.18347389622278965, 0.18442768961863532, 0.2100588969790791, 0.18953348234947376, 0.20325886979520624, 0.20770046434650835, 0.1969993815259783, 0.18811761661751703, 0.19498619957168506, 0.23844403981867457, 0.2667259308322987, 0.1873315747661881, 0.1956632060571728, 0.2066993972888317, 0.20832156454137063, 0.19193731575767847, 0.19409932461183377, 0.18924881620935818, 0.6227105084385945, 0.19518502772448865, 0.643850785826688, 0.16164358754579966, 0.1890890406809992, 0.595359269405944, 0.18889699484868572, 0.15905181621865871, 0.5803468001695204, 0.5627505233920778, 0.16639760934040537, 0.16377451220404293, 0.5339671874928356, 0.45412923172430664, 0.5299003288629633, 0.3209269025335115, 0.20027259716476697, 0.11208509881926942, 0.1789135375950549, 0.18721479630642068, 0.1887974500624816, 0.1837210124126467, 0.1739083373762369, 0.1911255551277805, 0.18957400362531274, 0.18228571799529214, 0.19895981723410583, 0.0795117383486511, 0.08004593788717462, 0.0791207251633026, 0.08722635925104005, 0.07659975197370983, 0.07964487238960793, 0.07473829865370185, 0.07025479991110517, 0.0832281880128003]}, "mutation_prompt": null}
{"id": "19727238-fdfc-467a-858e-74060d7ec30c", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "b85e0286-9f4c-4724-98e2-7cab9dab10e0", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "3ca698be-37f6-4b3d-bda0-3e83cc6fd704", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "c452b349-d5b0-4dcd-853f-25c957d8b43d", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "f86c1f7f-2f12-4d8e-83b1-e7364bdbd319", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "c3cf4bcd-c934-4655-90eb-8571ee9fe1c7", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "465a7e83-4abb-4965-9b6c-58e553a349cf", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "c88c09da-4ed6-4581-a832-eb05af922591", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "9f1202ff-a960-41c7-8cbe-ba49feda9a62", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "cc19ec63-7d79-4c22-9418-d1e9ec61983d", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "90411a9d-5612-427b-b0ad-612750abe69b", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "8999508f-d5ea-4b72-9837-effafa41298f", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "3f3c60e8-5638-4af5-9f25-a400626474e2", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "abc60a08-18c9-4c9a-b203-1591edf3936f", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.7  # Increased for diverse motion\n        self.c1, self.c2 = 1.4, 1.6  # Slightly varied for balanced exploration/exploitation\n        self.F = 0.7  # Fine-tuned scaling factor\n        self.CR = 0.8  # Lowered crossover rate for stability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                self.inertia = 0.5 + 0.2 * np.random.rand()  # Adaptive inertia\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced hybrid swarm algorithm leveraging adaptive inertia and crossover rates for improved convergence in diverse optimization landscapes.", "configspace": "", "generation": 53, "fitness": 0.2591388389588144, "feedback": "The algorithm EnhancedHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.526390259664671, 0.5209924040686701, 0.5161037141304918, 0.5575684957517045, 0.5638075050249042, 0.5614077615551756, 0.5316646638472584, 0.5402298842074145, 0.517484743633279, 0.2206095872888243, 0.1844109711521753, 0.19505373914869484, 0.19001357388095996, 0.1782625276022498, 0.20548148811453482, 0.20676169488392904, 0.19829452145988147, 0.1882105055406217, 0.10714923284962785, 0.10215911988948012, 0.12060404274954417, 0.09185411126355014, 0.11242358377565309, 0.09906087183599976, 0.11674032870198936, 0.10954445287591574, 0.10136676657432186, 0.09649431464860458, 0.10193361185108574, 0.09511746817253752, 0.1009701112350112, 0.09393556641892742, 0.09744651583427799, 0.11741413539569856, 0.10068111087714082, 0.09083988745402372, 0.9739638105369262, 0.9843214989867974, 0.9796996989154372, 0.976009480572146, 0.9746941990420209, 0.9795050622376223, 0.9819095053861578, 0.9788084425928827, 0.9818786647166411, 0.28399058528620424, 0.2663985571540116, 0.30264069839815144, 0.2802600501296809, 0.28675714962214593, 0.288202269058358, 0.2958600354818225, 0.3149350047419891, 0.308387499259119, 0.5014933211131518, 0.5600392499483344, 0.5299911161909565, 0.5085901021593189, 0.5635105277624299, 0.6079110963151255, 0.6061059256856427, 0.6137727326872786, 0.6103594420383711, 0.18393828645174404, 0.18775015164059605, 0.1757957069213213, 0.17807070650600632, 0.13835986061914995, 0.22411611536333187, 0.19049378355505298, 0.19565674866146332, 0.18235081458221924, 0.11812552702828072, 0.11942108352819902, 0.17794065867444553, 0.17205372329821056, 0.16969201151303892, 0.2572940522206313, 0.18195871927070262, 0.1532330521591735, 0.18957013299121261, 0.08610378948550224, 0.03855957773279328, 9.999999999998899e-05, 0.07884776117471193, 0.055145637959231664, 0.07989769045323647, 0.07610020861791367, 0.06312313490434374, 0.006017593209535099, 0.1883713046988309, 0.13951365464136312, 0.1826878253404669, 0.13272250741305547, 0.11129426562793998, 0.13167628988951396, 0.1351762188198602, 0.18126370748965936, 0.1578337473071637, 0.0327944007701515, 0.029132316745660858, 0.015038432378821742, 0.06644166099987947, 0.03315833668696799, 0.026765237517182294, 0.05250887821925987, 0.032286811361376566, 0.05232958173955338, 0.11821429422765672, 0.1189882478101204, 0.13302045414179176, 0.146609135375671, 0.15548120750157013, 0.1459534201206325, 0.12656828553237232, 0.13077825146106137, 0.1389948816075619, 0.44031718467438075, 0.4248511852124284, 0.43420008565267176, 0.45152568134301996, 0.4376166571917385, 0.4504470098533153, 0.4637920220782614, 0.45068643725763324, 0.45728139523718414, 0.0988156123926266, 0.10493765727409532, 0.11751122838921058, 0.1017959881074697, 0.10137435688891361, 0.09925607997173325, 0.11802421423977916, 0.09939934758922808, 0.10339566762756291, 0.15784639997148353, 0.20362026769306973, 0.22755931340164048, 0.19718438951096484, 0.21273289408192975, 0.2024570016062851, 0.13195118393916472, 0.1935014335827212, 0.1587419966609699, 0.2855662823505094, 0.30224962781310605, 0.32224110881563905, 0.3160056649196942, 0.2890534508247582, 0.3018059212872374, 0.3154432704263218, 0.3217016615208742, 0.3135986067715265, 0.21805800294026456, 0.22399429949316696, 0.22919769913709376, 0.23460862305780839, 0.24594864370178038, 0.2579994303504749, 0.2547466208920447, 0.24736510311494186, 0.2164131746712249, 0.22314674726295436, 0.1918967840086232, 0.20732826214379296, 0.2181026657721421, 0.18674802372053112, 0.19411421210240132, 0.1960123490123319, 0.2059579999629002, 0.2012970280525238, 0.20017321962687096, 0.19396085998921775, 0.20060512275622555, 0.2885713666331736, 0.21258705359798447, 0.20184168482115772, 0.1963786898596882, 0.22110810263886338, 0.1817345234498713, 0.6274715016716781, 0.17857200283546648, 0.6917629197401738, 0.17894574781416228, 0.19178558041751725, 0.16400576613782292, 0.6248155777774168, 0.15448378938450313, 0.6733811538873766, 0.541721893846347, 0.16878176553510127, 0.20125630239779402, 0.5885538321753129, 0.5311408138565208, 0.16502641896362458, 0.15756006364922248, 0.2048530946913536, 0.6302143787655444, 0.1937455920165898, 0.17528763687975513, 0.20119222939395076, 0.195193604122337, 0.18869939971225247, 0.195722387749922, 0.18748290274838242, 0.19348570114102315, 0.18346572338420275, 0.0791641061097551, 0.08668373762325643, 0.0801690782718455, 0.08432962712615333, 0.08366434662742628, 0.08564609208407059, 0.07941125440180707, 0.07640072183351154, 0.0777290080767793]}, "mutation_prompt": null}
{"id": "dee58f55-dbfa-45b5-8a60-71d7209c1579", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.6  # Modified inertia for better balance\n        self.c1, self.c2 = 1.4, 1.6  # Adjusted cognitive and social coefficients\n        self.F = 0.9  # Increased differential weight for stronger mutation\n        self.CR = 0.8  # Reduced crossover rate for selective exploration\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Adaptive Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced hybrid algorithm integrating particle swarm optimization with adaptive differential evolution for improved convergence dynamics.", "configspace": "", "generation": 54, "fitness": 0.2327716477031294, "feedback": "The algorithm EnhancedHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.4940439791205731, 0.4420983771781207, 0.48280309238854724, 0.5112855918870907, 0.5187234600642483, 0.5215177531265378, 0.4836259032992548, 0.48698359055157014, 0.4750068949971964, 0.12105957197247241, 0.15263320925303103, 0.15949857230280395, 0.13188394998866237, 0.1285282651135663, 0.13934257557676732, 0.14969131386150858, 0.13472472684737458, 0.16110714897255207, 0.0999965147236358, 0.1015950222786296, 0.10816110914195032, 0.09147183784017887, 0.08977411218255693, 0.09743191039388743, 0.09151158556174, 0.08693272627966109, 0.10537270305484614, 0.0734265107814368, 0.08501331544962265, 0.08894788896341377, 0.08687347877074447, 0.09339728355595711, 0.09692473815050184, 0.1005606350658067, 0.0859491537582584, 0.08427828161767736, 0.9825069571831818, 0.9819413704128738, 0.977487452955287, 0.9784468968094566, 0.9772001863329642, 0.977942339371313, 0.9784278377972362, 0.9803563021096322, 0.9740851177948054, 0.2725344255527472, 0.2387789418794085, 0.24445618857980977, 0.23915755577497688, 0.2672928338718418, 0.26221577558674003, 0.2561041063822017, 0.2603568091965113, 0.24361566819062286, 0.49899375068884744, 0.437590947810338, 0.4435984958256266, 0.4511209213500911, 0.5852210316045284, 0.5513722924731794, 0.43602526785392337, 0.5099567509805243, 0.5452867357408946, 0.18794284306173215, 0.13626312125853912, 0.16814551648000142, 0.16350166180173642, 0.15132952239612973, 0.17275140572550918, 0.1706362409949732, 0.13801271822695182, 0.17453295229629506, 0.17380701892410455, 0.09443935786601321, 0.11835424834628627, 0.1795168336541172, 0.10137423330976292, 0.13670723486810743, 0.11468454826935481, 0.14578667078191354, 0.1709897293562197, 0.03662168344783934, 0.014822291394636755, 0.018347884114795154, 0.016196158465913157, 0.0006134615275390498, 0.010107342673925435, 0.005375543537562089, 0.03589906325238712, 0.03770235028840785, 0.06134512443224671, 0.08324246695163962, 0.10579663530108463, 0.038939885263575835, 0.10276783697562442, 0.10093691611973521, 0.11561526828383462, 0.08833829827710438, 0.12442031178186153, 0.02281352104173695, 0.011548786163156355, 0.007220114595243965, 0.02432568676732716, 0.022275514428835796, 0.016131681674716902, 0.02362914399747329, 0.03596727446230996, 0.019053244713449602, 0.12179857054960597, 0.10760832597040626, 0.12021978302094016, 0.12975254834798366, 0.11520608132847121, 0.12094184223983961, 0.11915209899462165, 0.12147427007641687, 0.13982089079779758, 0.41358429716505296, 0.39854714796972335, 0.415525890008393, 0.43027751213637233, 0.4006960210985757, 0.45714540990852737, 0.42106619089615205, 0.3798996965596021, 0.4298686350639658, 0.09844835511926009, 0.08980970118178755, 0.11503965480554057, 0.08256946359627348, 0.08741193235518896, 0.12241190892226173, 0.08788278215646117, 0.11154319255515088, 0.09707115754853479, 0.1539671460614238, 0.14359189731368094, 0.1968399440790144, 0.1493343970327542, 0.17968747086680537, 0.16182086595297318, 0.22327881479179246, 0.14668974408148683, 0.18606378216262554, 0.29747757114244455, 0.27632472912189343, 0.2984751479886083, 0.2825689729534656, 0.2742795913908631, 0.27970468483011446, 0.2986756782983506, 0.31163412895606124, 0.2887883448343561, 0.20092719667357728, 0.21331409926555145, 0.24090642522160843, 0.19501440711446116, 0.22571043112810618, 0.211142609717775, 0.2423522142845821, 0.2324562950942478, 0.24889564953865106, 0.20100162387245524, 0.21973098883200815, 0.18635132378346975, 0.2213558759756873, 0.19425552320277273, 0.21339523235387048, 0.1952809872767537, 0.1796600349519546, 0.18925301288585528, 0.18480929571557803, 0.17829300836671025, 0.18021365799450195, 0.1967110516634284, 0.18944273006990142, 0.18252057614728012, 0.19311482380500633, 0.17106412571936258, 0.205853385842787, 0.1800197459378292, 0.17911274945978717, 0.7217621034024164, 0.16239060488342616, 0.19235233414293829, 0.16530557955818492, 0.41285275263857113, 0.1647788511912518, 0.14804029566051358, 0.5290596901795023, 0.4000637532856042, 0.16399794810518875, 0.500990798551189, 0.43125125116382423, 0.5408862288323175, 0.20759842026462483, 0.20284307454548667, 0.43722448305720596, 0.18668861902622724, 0.17712840208627334, 0.18435732066906307, 0.1862325327038179, 0.17982488779031425, 0.1849276767889062, 0.17679146742211682, 0.19354131368272176, 0.18014805369905496, 0.08557318926369462, 0.08156121999872012, 0.07559447529586827, 0.07812664052224605, 0.08256375445510766, 0.08217591926905188, 0.07631672128214739, 0.08010706818290547, 0.07640402641462984]}, "mutation_prompt": null}
{"id": "5b529886-a086-48b8-8fa3-fcd9a71728f1", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "2a1d2dd2-b253-43c1-bf89-0215ad698ef7", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.9  # Adaptive inertia\n        self.c1, self.c2 = 2.0, 2.0  # Adaptive cognitive and social coefficients\n        self.F = 0.5 + np.random.rand() * 0.3  # Randomized differential weight\n        self.CR = 0.8 + np.random.rand() * 0.2  # Randomized crossover rate\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Adaptive inertia weight\n                inertia_weight = 0.9 - ((0.9 - 0.4) * (evaluations / self.budget))\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Enhanced hybrid swarm algorithm leveraging adaptive parameters and local search intensification for improved convergence.", "configspace": "", "generation": 56, "fitness": 0.16192248027530134, "feedback": "The algorithm HybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.26201797899398194, 0.2843033644748909, 0.295469370659012, 0.3080109536527239, 0.30497979508011275, 0.3488507814832945, 0.30343920174242844, 0.29154318028443027, 0.29702867934694077, 0.014362956706232, 0.0077274682515467985, 0.035599862189789944, 0.0018026342651413785, 0.006022946518276839, 0.010258832249475547, 0.010314908721564042, 0.010168631129912842, 0.02970595857791758, 0.06229643127015938, 0.06635814573935384, 0.06946710989162552, 0.05739796974685196, 0.069733835046769, 0.07218722951669732, 0.06172701865423902, 0.07182458683570969, 0.06658456095110599, 0.048746120077016175, 0.05132370148715504, 0.05761770162049129, 0.04371334994950071, 0.05230685220394893, 0.06602574778411763, 0.056270251063057164, 0.05795604626060047, 0.06088742956081683, 0.9859284601267334, 0.9890374195518266, 0.9826122565715685, 0.9574833252259508, 0.9858172616237059, 0.9854008407957615, 0.969224172750092, 0.9856367797375738, 0.9853863439853946, 0.13782075309077357, 0.13533004458750242, 0.1571735609007856, 0.14676366286021114, 0.11463624262792926, 0.16229476536612442, 0.1497886985223419, 0.1561667126475793, 0.14713137931273845, 0.17335587165908894, 0.17931111813576894, 0.19471174684959747, 0.19055236863929026, 0.18263204490528373, 0.19769669742356466, 0.18280050051841412, 0.21168719834814775, 0.2193220013818532, 0.06737484762679413, 0.07259450967629488, 0.0674706572747149, 0.05666645855142416, 0.0658103241919038, 0.08329872558965612, 0.08060356846995742, 0.09521299879139244, 0.07785433481586757, 0.0757334014320824, 0.04332057748603224, 0.07109086481034887, 0.03646077025169614, 0.050926233436982105, 0.06783534996039509, 0.046863490385467776, 0.03974802469032568, 0.07665728566123053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06251803259715594, 0.05861086342236943, 0.05990244838328307, 0.08251295605438336, 0.08276784345638133, 0.051140817492475565, 0.08496329117294177, 0.053206519294626164, 0.052382627172078866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017362311127384622, 0.03938685285589383, 0.04099637070712836, 0.06015657421643916, 0.03944625934923984, 0.03858858047583458, 0.04093163789521481, 0.02835013758579885, 0.0346884430790485, 0.0586443361042146, 0.2568277467355201, 0.2788700527846958, 0.2928710146506559, 0.2957278395740095, 0.26590781217158965, 0.30256077614831545, 0.2485958862210399, 0.2668854679551699, 0.30434327622977575, 0.08472581587615591, 0.08055952940161748, 0.07121397236464055, 0.06320598130906963, 0.06443727861811388, 0.0667782403201369, 0.06637626753684966, 0.07859783790405617, 0.06873049996337666, 0.15034797099259378, 0.13728589856662654, 0.1763901657111988, 0.15658568185183408, 0.1559400756408853, 0.13708942495903087, 0.12787607125649014, 0.17459479983543946, 0.15108659926740697, 0.2053019531184267, 0.2130279019179706, 0.20458415361257554, 0.19055104219905006, 0.19925807287425634, 0.20027691868954078, 0.19123177069366415, 0.21385063200315702, 0.23553566123297143, 0.1453740202893098, 0.1534535643715571, 0.15651445481239512, 0.138506896592701, 0.13216871431515798, 0.162784057904663, 0.15389660870522748, 0.16184182116072932, 0.16315521973401248, 0.17306153648182188, 0.1496222155558493, 0.19895604361748243, 0.1741592146654546, 0.15797169002314637, 0.19300862223979698, 0.172554706736594, 0.15077618121099934, 0.18069702276170718, 0.15692750528596622, 0.1583217958749894, 0.1728011755392267, 0.1641152790320788, 0.16269168315188942, 0.16945581144834287, 0.17687279323974214, 0.15802931299056378, 0.16196859002207364, 0.30256721351355487, 0.15168815063942342, 0.22233570186760265, 0.2366215704918292, 0.15251500972497456, 0.2964164592547277, 0.2328658341154869, 0.16596188982002846, 0.17725819845680002, 0.15919761108976105, 0.26803338663898346, 0.23105816718167094, 0.16371930991881778, 0.18241053443201272, 0.22400923876188994, 0.18597324097952916, 0.31044689414218096, 0.30144054378863205, 0.19524113151777422, 0.18748960578584006, 0.18828812402047646, 0.19113790300820888, 0.18577896855616904, 0.19031575935219203, 0.18889360985912185, 0.18521182245385892, 0.19100820498989146, 0.06495458812007404, 0.062253703177011954, 0.07581798199666501, 0.07534792453002515, 0.0674124101858471, 0.06734442794426099, 0.061270057811070755, 0.05985640583046792, 0.06751046189454357]}, "mutation_prompt": null}
{"id": "ee23ee20-8f1d-4f4b-a104-1ada9d797cc1", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "49b46177-412d-4a9e-a8a3-b204358131ca", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.7  # Updated inertia for more cohesive movement\n        self.c1, self.c2 = 1.4, 1.6  # Slightly adjusted cognitive and social coefficients\n        self.F = 0.7  # Updated mutation factor for DE\n        self.CR = 0.8  # Slightly lower crossover rate to encourage more exploration\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Enhanced Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced hybrid swarm algorithm combining cohesive PSO dynamics with adaptive DE to balance exploration and exploitation.", "configspace": "", "generation": 58, "fitness": 0.21135753868401552, "feedback": "The algorithm EnhancedHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.40724804779331214, 0.39658365836961507, 0.4234192912352044, 0.44753845470068576, 0.4305216933032765, 0.43721480270195645, 0.43690870969073436, 0.40238070072383025, 0.4163756799255802, 0.050349976704300525, 0.08815255326498406, 0.07189717464804235, 0.0578262136557367, 0.0988373772160378, 0.1132171323493707, 0.06372027589285756, 0.028248757933951096, 0.1048726528830719, 0.1009117943964275, 0.09309530026408086, 0.10950281583926735, 0.08943221427031989, 0.08104240561298115, 0.08277927574033106, 0.09274832948949985, 0.08209417501502214, 0.09768164673542412, 0.09399134197343806, 0.08953916069456513, 0.08956593743526897, 0.08252776876338208, 0.07876991928598587, 0.0887992781002187, 0.10715325839846979, 0.07958737636070179, 0.08548841121634854, 0.9781731014055838, 0.9856702167657304, 0.9768177784838322, 0.9780915824212781, 0.9784544010001939, 0.9779539345986681, 0.9781299789654181, 0.9802269467762786, 0.976215308900436, 0.22552612574954978, 0.21196608482746693, 0.21219782929351327, 0.21389346726398495, 0.23368233206778388, 0.2402233232315839, 0.24056132262908358, 0.24885592204385476, 0.25915738104022135, 0.46352706917642994, 0.4285295844192195, 0.3640461294779771, 0.2451665689806336, 0.2924073236030271, 0.3309499618161593, 0.29362107497179013, 0.4299172912654955, 0.40869837933119046, 0.09774392316220615, 0.13490620753451132, 0.12436682578394431, 0.10939889424895632, 0.11960116415099331, 0.09909287323066762, 0.13593840386193645, 0.12632377510896053, 0.142986393408726, 0.08973354336480466, 0.14447119142684894, 0.1628740568339221, 0.1559703465125145, 0.13718785268419997, 0.1473675300433568, 0.10156345792171084, 0.16131758795732165, 0.14460742609949173, 0.02389893778292229, 0.022036608432929428, 0.00387661393247396, 0.03807596880876085, 0.019117342418036753, 0.013702650280572937, 0.003982511218680651, 0.001444889126774429, 0.013074127907992672, 0.1174929433059324, 0.0849121966605928, 0.1058462360845317, 0.02527461534555675, 0.08409878091175194, 0.09925233179792448, 0.11673439822992937, 0.0833960942370301, 0.0862037705514962, 0.007963160892052068, 0.001982435535460181, 0.002608613164656659, 0.0006664839076675477, 0.0030865648640927557, 0.006273571565555858, 0.030907793095065972, 9.999999999998899e-05, 0.002437208607791397, 0.08332394290871148, 0.07931931360723354, 0.08204747951201863, 0.08652778421442875, 0.09296340990652496, 0.10757988210028302, 0.0997720155014673, 0.06815478883534232, 0.06265953821217041, 0.3644462835652297, 0.38462501923896797, 0.37854549785012015, 0.38290940691066755, 0.3969620125986141, 0.3702452669441262, 0.3611912643359788, 0.35048162636880975, 0.3767379093970967, 0.09231147342229029, 0.09547556124574363, 0.08715966079103532, 0.09067581365570987, 0.10427550191294721, 0.08874216127909273, 0.08189060567983086, 0.08813803088292338, 0.08089850435391766, 0.15456385485552893, 0.1546115253386895, 0.18114444133174246, 0.15147111005714997, 0.16171581787142297, 0.129087800015946, 0.14883041873033287, 0.1560628213141737, 0.1396383751072957, 0.26425848339642877, 0.26453184995493206, 0.27466712332072507, 0.26734494014038424, 0.2529645845358809, 0.27434457492314734, 0.27112985086670016, 0.2705768239828641, 0.2698974286495823, 0.1764007976305687, 0.20645568078626264, 0.1533973749475579, 0.186929319214026, 0.19649469743054926, 0.18086943523315435, 0.22315738706830346, 0.21754356241214812, 0.21670753847607982, 0.20160077567338885, 0.19212962287963387, 0.19943381315217057, 0.20622127184830485, 0.1816022944254092, 0.19495511444028657, 0.18625259548309991, 0.19935893323315035, 0.19563453949349674, 0.18900010948701018, 0.19309892351379254, 0.19335227869768545, 0.1742936246217418, 0.18411828233204885, 0.18022875263219795, 0.20570246212715815, 0.18177521986092793, 0.18180240024655792, 0.46654088888123957, 0.18427031219937762, 0.16346637054163782, 0.5269892774438759, 0.18798185869678574, 0.16693554047849635, 0.19217398912969363, 0.30978365689580023, 0.4126127431256368, 0.42258181303137576, 0.16847488168965408, 0.4340684938788779, 0.4408441538034549, 0.39985213819625864, 0.48095238555674025, 0.14880553120778173, 0.2010672070924976, 0.43039302879496943, 0.19097310507010312, 0.19868658105727566, 0.18430257692119822, 0.19275764580259858, 0.17396000333301287, 0.19733822969709258, 0.190960435088129, 0.1899288425861978, 0.1815091440437041, 0.08215901108993362, 0.07379847563991482, 0.08758551868630604, 0.07630143335346862, 0.07859027859291035, 0.07099995662095626, 0.08523925418279721, 0.0722515470305507, 0.0780913742441619]}, "mutation_prompt": null}
{"id": "3cbdb245-c1b5-491c-9dfb-1d937d6b2437", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "d6a681df-da03-4407-b4b9-fb7c48986945", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "ee7dc12e-f1fd-4d6e-acba-2ad80b020e47", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "db205a68-723b-4183-a700-efa0421c6581", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "5954273f-db45-413b-a948-bb7f148179a1", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "03612130-6d67-4c64-8ab2-e92ca6b9e954", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "43cdef39-fc2a-4756-b08f-b42656436b57", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 12)  # Slightly reduced population size for efficiency\n        self.inertia = 0.7  # Increased inertia for better exploration\n        self.c1, self.c2 = 1.7, 1.7  # Slightly higher cognitive and social coefficients\n        self.F = 0.9  # Increased mutation factor for diverse solutions\n        self.CR = 0.7  # Lower crossover rate for more distinct offspring\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Adaptive Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    crossover_mask = np.random.rand(self.dim) < self.CR\n                    trial = np.where(crossover_mask, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Update inertia to balance exploration and exploitation\n            self.inertia = 0.4 + 0.3 * (1 - (evaluations / self.budget))\n        \n        return global_best, global_best_score", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced hybrid swarm optimizer with adaptive parameters and enhanced differential mutation for improved global search.", "configspace": "", "generation": 65, "fitness": 0.22731620928284627, "feedback": "The algorithm EnhancedHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.45463486632652117, 0.45698720944272786, 0.44214534898597846, 0.5137384579178015, 0.502340550806718, 0.5041594429965119, 0.49393288567201166, 0.4851133962848245, 0.4742699761171426, 0.18476123036782233, 0.16561683862005427, 0.19848040652975107, 0.15769107341191757, 0.15885149392648068, 0.122775931800012, 0.1619022755314138, 0.16130920815278604, 0.14425105683775052, 0.09851339571461759, 0.09678966165568326, 0.09133397432154067, 0.0888887874473383, 0.09873116395628401, 0.0881681441624389, 0.10665480565853502, 0.10364574825843886, 0.11150775825665238, 0.08123557734078435, 0.0805443099862101, 0.09401135206806688, 0.09519007621162068, 0.07689718413449886, 0.07692250062497896, 0.09183242122548141, 0.08957097398434166, 0.08180112902002001, 0.9850815433321338, 0.9824954023852854, 0.9841513471633587, 0.9819066292490009, 0.9828443478139501, 0.981023367112088, 0.9852963729271365, 0.9862279078023324, 0.9766158170732734, 0.22428012442759548, 0.21835061976538395, 0.2298356145399686, 0.24086257407943135, 0.22027339493062736, 0.23178765332083962, 0.24786545248988912, 0.23471406459575095, 0.22227758168561884, 0.37187023857260426, 0.4120947115938869, 0.4377453030154216, 0.45452960950375565, 0.46108472152114777, 0.5550424893368455, 0.41661116734579196, 0.4094891037283569, 0.3970091381081824, 0.1508501928160555, 0.10228276272732362, 0.1202351349498153, 0.13715175086739395, 0.1338885475172874, 0.11593180548803617, 0.137631332712996, 0.12410130637950845, 0.1479645273150143, 0.15357398465154037, 0.1036858557714293, 0.1575678328025344, 0.13473021392943796, 0.12363017364189344, 0.11064620354200383, 0.14889250395260445, 0.12969481318039366, 0.1441378944255779, 9.999999999998899e-05, 0.020987863116649574, 9.999999999998899e-05, 0.026346122981644626, 0.00018669132613580164, 0.000711744843175488, 0.02121263258334216, 0.009013972765559042, 0.00010009667066224193, 0.07714475762112327, 0.10083881646933046, 0.08140371051315964, 0.0978440139023673, 0.08611001860957368, 0.0321125421792785, 0.10438302166674862, 0.06768876550751579, 0.12346701060947285, 0.014123149000481283, 0.010792802176855187, 0.01998621255818156, 0.016236784252277703, 0.020961146613303616, 0.026054447615631027, 0.036326969238549056, 0.028891572878651295, 0.02942254906113395, 0.10206795244812927, 0.08661856900497156, 0.0986167427289043, 0.100587943966166, 0.09356547727505682, 0.09614880000941028, 0.09070861982952616, 0.10288533132360445, 0.12011938751660722, 0.3877188057500094, 0.3847400809758882, 0.3757466040046443, 0.4049823131684126, 0.4024964634831928, 0.40462490793535555, 0.44636156140307737, 0.3846641366589586, 0.3930099247971792, 0.10155485063789471, 0.08350641138556547, 0.0919790091612327, 0.10713141479451949, 0.09144537680781706, 0.09250188407644122, 0.10360030363397399, 0.08123912328435912, 0.08351612336679703, 0.199666226411092, 0.1419565731751914, 0.1619727897129467, 0.16689016789690936, 0.153786576304347, 0.16376602078222535, 0.15631959040829024, 0.14399764081237065, 0.1649740978510672, 0.26571346719136035, 0.27000962166966, 0.2823651887680929, 0.27101481460801546, 0.26389552764550417, 0.2715808245736768, 0.3038790769385077, 0.3005946239563526, 0.2779930191091904, 0.19581222274136545, 0.20588860716930502, 0.22364056976185454, 0.14638519703669461, 0.1906877291261605, 0.21962318151218885, 0.22779426297751093, 0.21172285333029972, 0.23296007762615423, 0.19539644506960552, 0.1839021619246216, 0.18312968160672394, 0.1920885315302313, 0.1824958169576757, 0.191166163569093, 0.20765327845156267, 0.19002174100257896, 0.17514822846986866, 0.2828919712424256, 0.1805850093162622, 0.18127956600709205, 0.211271215097397, 0.17955403278487703, 0.1762975000268172, 0.17953672718342606, 0.20042966662242845, 0.18164170991884165, 0.6451665631601805, 0.16957411414869672, 0.5714004729041937, 0.4036393425201644, 0.5137108929727026, 0.45306818886525313, 0.5276769855279857, 0.16672661024395308, 0.16950484020190537, 0.39184247776220904, 0.2022191751053629, 0.3579052139036176, 0.4023827468891208, 0.16249768711883994, 0.5144189877295553, 0.4090054270886001, 0.19636539391821128, 0.2061579382187072, 0.1830802954859495, 0.17869199628229582, 0.20168889467241757, 0.18860146375704112, 0.17367240160662167, 0.17715985451689376, 0.18334210002980011, 0.18401773599546023, 0.18035117104952947, 0.07139341259048615, 0.07096200037101719, 0.08383822969194865, 0.07976150906836244, 0.08503145101883369, 0.07581279504394478, 0.0820845875600722, 0.07167980636107807, 0.06863916380115875]}, "mutation_prompt": null}
{"id": "10b45f08-5544-4398-bb85-f8f408232f74", "solution": "import numpy as np\n\nclass HybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)\n        self.inertia = 0.5\n        self.c1, self.c2 = 1.5, 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best, global_best_score", "name": "HybridSwarmOptimizer", "description": "Novel hybrid swarm-based algorithm combining particle swarm optimization with differential evolution for adaptive exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.5034185905256456, 0.5025202248740308, 0.5024829550445011, 0.5202205337363183, 0.5496642143187997, 0.5697940995117752, 0.525089622115071, 0.5043592769569194, 0.5103602917692025, 0.19867131272839622, 0.2167624073205522, 0.17696052232720316, 0.17627887867009218, 0.19520897926622793, 0.19958228760291008, 0.1698679591453398, 0.19322525468601348, 0.19281722609643415, 0.09737182636564556, 0.112665964213565, 0.09247790746225515, 0.10945160591200309, 0.1393315134200318, 0.11062642652091292, 0.11347061528726421, 0.12227334631182607, 0.10602289341669824, 0.1027196512502917, 0.10233975701301568, 0.10397497036976167, 0.08643833195184703, 0.09488873349379556, 0.09943871120922887, 0.09380433254558285, 0.09853210872786855, 0.09448148653462618, 0.9725432894107097, 0.9865372937604376, 0.9615652725903092, 0.9546995830670126, 0.9779107377553888, 0.9848244306859802, 0.9853431119501455, 0.9805502229762535, 0.9794553721707022, 0.27742643434635506, 0.29272013693739307, 0.27047922921579093, 0.2791283415660748, 0.2969887538327536, 0.29277129452482054, 0.30786390387875684, 0.3089971939910895, 0.29967256633594386, 0.5707228591702295, 0.6676611429501587, 0.518025063539011, 0.5828278294187459, 0.6280172131016236, 0.5759351155773516, 0.6658084562806563, 0.5802056382359502, 0.5541449828469324, 0.20741033958057564, 0.1798082138086322, 0.19319520046456373, 0.21234343150213308, 0.1199318268638534, 0.21603684969380432, 0.18040047463941178, 0.15986643248634136, 0.2556413969629773, 0.21580142337383446, 0.19591517926667779, 0.226643317439715, 0.19923714260602698, 0.1814493079013496, 0.19246997335944338, 0.19607952755855995, 0.16634286483927174, 0.1206966880557897, 0.06687959648062247, 0.10391115003037088, 0.069675190019452, 0.029022454551117516, 0.05990719491977636, 0.02763452071548056, 0.027652092543995033, 0.0615924993682071, 0.031808790360812744, 0.24218088734104326, 0.1989514561074982, 0.22480327899506602, 0.17886475314830064, 0.16830094278095498, 0.1409061306664049, 0.1775266346891885, 0.23607120502749368, 0.1775289203197049, 0.049549636361103544, 0.021587266438482633, 0.05881576167039859, 0.06215047496550774, 0.04021936007782756, 0.033331207075436575, 0.04893215691692421, 0.025650989312697825, 0.02906379724563779, 0.15310536240415162, 0.15275327748471879, 0.1438897652268334, 0.14865980607127782, 0.15279737202608945, 0.14094888451470322, 0.157980723728128, 0.14506450271576687, 0.12517597864960206, 0.4463125224463167, 0.46623074520103536, 0.4361999072782544, 0.47203009625686143, 0.4759871348992616, 0.4566435675813264, 0.45267823959803055, 0.43946074057488804, 0.4491272388820813, 0.10836896495273995, 0.11426600422721567, 0.09377287961572311, 0.10777431942528293, 0.103707966710618, 0.12291812011340153, 0.0874749692781468, 0.09739143213689017, 0.11434771872106742, 0.1686130594666715, 0.15426572815467365, 0.22561089816599011, 0.18170341163807202, 0.23354626524856825, 0.1656758738676739, 0.23294295869728499, 0.13514839921829558, 0.13060803360122486, 0.2912119596380438, 0.30224841568608685, 0.3139310286697108, 0.2992055035010075, 0.31155753028783073, 0.31106348235194314, 0.32300102712282397, 0.3290505698925117, 0.30930458381358517, 0.2353033619410836, 0.21336892424650078, 0.25371638149930675, 0.23892890580223158, 0.23604076542755204, 0.2361850152136009, 0.23062633911275388, 0.24822073532176603, 0.23236759788454864, 0.1883542983545774, 0.18746089700110302, 0.1863079555695326, 0.20287683120735978, 0.20173757206937404, 0.2166784511505121, 0.19665165394097428, 0.1925454468644503, 0.22959860128082266, 0.2160662116474107, 0.18088793086834198, 0.17750006092777715, 0.18477958113603932, 0.19730259392871052, 0.20033418332991937, 0.20180523184690446, 0.1836075682233903, 0.1984976382669129, 0.1798064683167233, 0.1811667293405661, 0.17847356104508183, 0.16269358957637303, 0.17677665737370662, 0.16388155200050736, 0.6613627383058688, 0.565808226366926, 0.16313502286754078, 0.5824784897198761, 0.20739192799384554, 0.19457936943721377, 0.5636576233735153, 0.4353707520336938, 0.5534358886985646, 0.14985833612504396, 0.5541287217148394, 0.5483409530269681, 0.19239196310530637, 0.19716929315646037, 0.1856592239113093, 0.1922852851530743, 0.18873542379348296, 0.17317944609266356, 0.1980574450355358, 0.19775781394818093, 0.17921136949669758, 0.07929446381289218, 0.0778654573961991, 0.0743226130435174, 0.08666854445247141, 0.0783070557151988, 0.07967945780235763, 0.07780875403736554, 0.07836476030046036, 0.08255228022767425]}, "mutation_prompt": null}
{"id": "4eab168d-7803-420e-9c09-2cdc57703923", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(80, self.budget // 12)  # Adjusted population size\n        self.inertia = np.random.uniform(0.4, 0.9)  # Adaptive inertia weight\n        self.c1, self.c2 = 1.2, 1.8  # Adjusted cognitive and social coefficients\n        self.F = 0.7 + np.random.rand() * 0.3  # Dynamic scaling factor for mutation\n        self.CR = 0.8  # Adjusted crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F\n            self.inertia = max(0.4, self.inertia - 0.01)\n            self.F = 0.6 + np.random.rand() * 0.4\n\n        return global_best, global_best_score", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced hybrid swarm-based optimizer incorporating adaptive velocity control and dynamic differential evolution parameters for improved convergence.", "configspace": "", "generation": 67, "fitness": 0.35330863270267954, "feedback": "The algorithm EnhancedHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "a9c35f9b-44c2-4225-a68c-83887ee68f77", "metadata": {"aucs": [0.7208315592957542, 0.7491287565569309, 0.7323552318058668, 0.7403134541431451, 0.7413304287103316, 0.738290740312081, 0.7222988983278784, 0.7377234581901118, 0.7422594705364337, 0.4870296447767619, 0.5069605457681263, 0.4908620985037222, 0.4766113494502241, 0.49165369864024744, 0.4914579919597032, 0.45322407245344043, 0.5017665138971856, 0.4432211901252838, 0.12803768699561702, 0.12726369249291036, 0.13751084473516695, 0.15158078894099014, 0.1411384147299981, 0.1347919494141957, 0.1319639660489964, 0.15432696571667948, 0.10954257259015066, 0.10815591404074965, 0.11812691824032995, 0.10121673414321375, 0.11401484670278628, 0.10291683156234666, 0.11073057246999285, 0.10246024363231632, 0.10001740673970838, 0.12154413032029499, 0.9865373249221993, 0.987462710873987, 0.9886700651301056, 0.9765829331226731, 0.981561907018887, 0.9874184519664047, 0.9866574773676288, 0.9850634640038474, 0.9825840835221077, 0.4513803066164265, 0.46553673462893264, 0.442506825091426, 0.48125616114859204, 0.5051927118206925, 0.4612982230655812, 0.47755649159840496, 0.5000960907248015, 0.46951659449103045, 0.2115537854578715, 0.7400356539686294, 0.7154525432822778, 0.7348725767924743, 0.7344698222644624, 0.7550772692893208, 0.7072140858690088, 0.7740623951723983, 0.764783132965529, 0.3573697419116524, 0.3580032739458302, 0.32728174001642374, 0.3860465370555577, 0.12230224285586211, 0.34619179034544867, 0.31822869073607396, 0.3432008349040927, 0.11961625695352018, 0.3896587058597346, 0.1949821199462296, 0.3951958574472446, 0.3458860835739813, 0.39801804288200815, 0.4015363459544412, 0.372269231278765, 0.39480479791577294, 0.3398716251367976, 0.20732864972534848, 0.18802451022078293, 0.19720749356399503, 0.21331932192348246, 0.03303478181097397, 0.1808530323152303, 0.28958105936787626, 0.29338263161120093, 0.03379699104268441, 0.3352582049856281, 0.2730005781440269, 0.24230921360288415, 0.3795173884586427, 0.21449147453687056, 0.29480219465665547, 0.2757949309590283, 0.3733015882992863, 0.3301793270716896, 0.06714683968290924, 0.058505235159466595, 0.05380289385084247, 0.21624899312146928, 0.12282247454379447, 0.08408813650485736, 0.1754603245750601, 0.06907999918070895, 0.20718843167683576, 0.24793309476370984, 0.22658291448419543, 0.241578205291065, 0.2406038448770519, 0.24427880696497217, 0.2444468164159419, 0.20500132286812967, 0.23330755654785051, 0.24724859361307094, 0.5876889817317654, 0.6039116924975777, 0.6011056769328336, 0.6008433505386258, 0.6046133369277924, 0.588779960330984, 0.6037458994936804, 0.6220038720644555, 0.5901457977698414, 0.10333223939896052, 0.09804618024477041, 0.13084101996913033, 0.1319673387518273, 0.08982296740954865, 0.1309852262423259, 0.09554627583113673, 0.13662952699208164, 0.14250162480551443, 0.17351729787651637, 0.1920521704734799, 0.4422407657972024, 0.25729990589864704, 0.20845826172858828, 0.2488135745974821, 0.5567046550195291, 0.20335993738273306, 0.42248162298279235, 0.4317232552542378, 0.43658721749870355, 0.39682189543557034, 0.4183855624853884, 0.4371998902496921, 0.4414400289614595, 0.41099053439537203, 0.46264950258232707, 0.45830055495220523, 0.3416955070521517, 0.26775781454835845, 0.2365999276407259, 0.3425321805512914, 0.33068223415357656, 0.34231073314859106, 0.32707712127706867, 0.3811308928202207, 0.34254760257588124, 0.21134866590379353, 0.22155842125453984, 0.20727663549286768, 0.1845096818167592, 0.19496232921407464, 0.20944824155451902, 0.195629843104426, 0.2152019563607228, 0.20339695828664994, 0.23623113995443357, 0.19954294850191479, 0.49663495798819224, 0.22857254670852856, 0.19122859257747682, 0.2258468568198353, 0.21034877806347285, 0.474542020604646, 0.19109044154153365, 0.14345782026720422, 0.16499404413226826, 0.15766571285347653, 0.17596637337131849, 0.6651006945476856, 0.16873109041678125, 0.7875549737391616, 0.7851544645982492, 0.16699133370113595, 0.2062868641894452, 0.7422862550958368, 0.7612876911373054, 0.16505126901903355, 0.20767638120399423, 0.6677673432950282, 0.16184668540889047, 0.7829740473536799, 0.7164863289681511, 0.199105408215964, 0.19428521093033946, 0.20008247265694468, 0.23456111448369843, 0.18014109478311324, 0.19292433666953468, 0.17883394710762768, 0.1949127935213344, 0.1953516998154632, 0.08461945005811611, 0.09225048200489983, 0.09260771116136579, 0.08831137752489127, 0.08143515940410873, 0.07971019530201717, 0.08469234694887551, 0.08616439679074595, 0.08812228179704595]}, "mutation_prompt": null}
{"id": "15db6b91-9d51-4c42-9987-6c10f0b962ba", "solution": "import numpy as np\n\nclass QuantumInspiredHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)  # Increased population size for better diversity\n        self.inertia = np.random.uniform(0.5, 0.9)  # Narrower adaptive inertia range\n        self.c1, self.c2 = 1.5, 1.5  # Balanced cognitive and social coefficients\n        self.F = 0.5 + np.random.rand() * 0.5  # Expanded range for dynamic scaling factor\n        self.CR = 0.9  # Increased crossover probability for higher exploration\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Quantum-inspired Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F\n            self.inertia = max(0.5, self.inertia - 0.01)\n            self.F = 0.5 + np.random.rand() * 0.5\n\n        return global_best, global_best_score", "name": "QuantumInspiredHybridOptimizer", "description": "Quantum-inspired adaptive hybrid optimizer utilizing quantum superposition principles for enhanced exploration and convergence.", "configspace": "", "generation": 68, "fitness": 0.26388526011487884, "feedback": "The algorithm QuantumInspiredHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.5069635411526467, 0.5298695977865022, 0.5204666564817935, 0.5444438319313547, 0.5483674799166489, 0.5507614466317206, 0.5258006573240509, 0.5563047626951632, 0.5451397265526745, 0.1845460599985871, 0.20558192649414864, 0.2204326562358424, 0.19287329508148587, 0.22349524534764154, 0.21692737317655486, 0.2029793730338746, 0.22480088286698596, 0.20011931449867093, 0.12366149132227511, 0.11118676783837766, 0.10168502843718141, 0.12749823755399325, 0.10628868177376793, 0.10052715298698334, 0.09479847722057766, 0.1021201297668084, 0.10494096221648253, 0.08005043648619026, 0.08517751335555712, 0.11187826197690176, 0.08707829167429848, 0.08608410565503977, 0.08945905927885034, 0.09318599417013373, 0.08748991866950706, 0.09085878062630492, 0.9810034436816862, 0.9848833967800946, 0.9842741249570944, 0.9756804003182324, 0.9784700777262747, 0.9849149334695334, 0.9759789731965313, 0.9803114944175806, 0.977209588267718, 0.29363527168362447, 0.31218163671109, 0.3227596773856949, 0.25823885353594134, 0.29923357996642996, 0.3076025768056313, 0.29874671332794744, 0.34399645982081106, 0.2907326897233379, 0.6103548506268499, 0.6457763387076536, 0.621522850044282, 0.562510564917847, 0.6341711728143247, 0.5900018961841015, 0.5702112931120187, 0.6559056053847081, 0.6154726856017309, 0.19311094795303374, 0.20698450009271285, 0.15999455611379731, 0.22585778699699954, 0.1100512271338463, 0.17861037611188002, 0.15210993968044295, 0.2140878533099989, 0.2007541814400392, 0.1737090310977616, 0.23812848527519437, 0.2256658069876083, 0.2176781484436876, 0.24841925183993252, 0.21296725952361462, 0.12094543515000111, 0.1693268135428938, 0.21856095840731593, 0.0789864559788862, 0.04043079651187398, 0.15143146534327168, 0.02528246967971315, 0.10198581669549678, 0.07048228937206602, 0.09804216514036068, 0.10424321921948698, 0.11962110528022107, 0.23441645317940318, 0.2666727338288002, 0.21210040178284584, 0.14644681690059602, 0.12668539504635934, 0.1409351242833018, 0.2039424034637647, 0.2013702683433961, 0.1538211170043502, 0.05802223758819769, 0.026380529706152234, 0.021744872125437187, 0.04754881382714482, 0.07344986464560099, 0.02715765961339678, 0.06078571473471017, 0.07370602487628242, 0.07587575835975735, 0.16024610275850248, 0.15142077494980732, 0.1316049297347256, 0.14035902248048915, 0.1467072701099298, 0.1576448201364521, 0.14456929305384858, 0.15119767073106505, 0.14506023130895296, 0.4589891793173042, 0.4634376730510905, 0.47302898613567546, 0.4777764915089521, 0.4535667055483864, 0.4655800939374398, 0.4470440255777204, 0.4626795034773956, 0.4597956049232448, 0.12067311201080122, 0.11244429006035539, 0.1118795369080493, 0.10328923105059618, 0.09569105557942825, 0.11274165628611066, 0.1100562314287652, 0.11600157548296486, 0.11862618619739129, 0.1395442637113803, 0.12350929162022983, 0.1473664770412746, 0.13530279763944764, 0.16769846905779395, 0.17056359501626828, 0.18728090573240808, 0.14930443103959534, 0.15482145512914025, 0.30866382689823535, 0.3075854925159781, 0.3217245636919559, 0.3136937568426311, 0.30110837649117894, 0.3128031117706088, 0.3116899621606998, 0.30268418384343354, 0.3339536369748338, 0.23480501988104718, 0.24984646662987253, 0.26049246766607803, 0.23634997885397646, 0.2219589571830487, 0.24231821580810042, 0.24173399784993366, 0.2720570158398887, 0.25142913323087324, 0.19519972678168018, 0.17485542500330287, 0.18953312014831492, 0.18678781264514788, 0.19338126944758183, 0.2077652135564324, 0.20899585312463187, 0.1968833788467409, 0.18096643558817915, 0.2054735617236748, 0.26694672101503647, 0.18489059775617156, 0.20300794018670343, 0.19573526361541294, 0.1805695916339518, 0.23044903429855623, 0.2020855470447831, 0.228963019865969, 0.18212965697865835, 0.14328865179769623, 0.18073220437999082, 0.16276945183977354, 0.18762782904838726, 0.6757708571085805, 0.6111824420342435, 0.17383705441211517, 0.1868584848180419, 0.1645856396833879, 0.5629069080488738, 0.6121303347292876, 0.5108024489946439, 0.2007550411435305, 0.57221549755753, 0.19738135154446945, 0.5548034801857757, 0.20120383541403153, 0.19007237348307204, 0.206148143316344, 0.17564276538665058, 0.18280343173993874, 0.18138543286330366, 0.1937410339799971, 0.18402526167277566, 0.19984991836249177, 0.18492489883396346, 0.07338967156234544, 0.080117272170389, 0.08312677687425352, 0.07673036797651056, 0.07873140685785385, 0.10623851282560792, 0.0845886581383335, 0.07753002471250114, 0.0861436491748675]}, "mutation_prompt": null}
{"id": "f930bba5-1ae6-4217-ab08-4365021fc614", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(80, self.budget // 12)  # Adjusted population size\n        self.inertia = np.random.uniform(0.4, 0.9)  # Adaptive inertia weight\n        self.c1, self.c2 = 1.2, 1.8  # Adjusted cognitive and social coefficients\n        self.F = 0.7 + np.random.rand() * 0.3  # Dynamic scaling factor for mutation\n        self.CR = 0.8  # Adjusted crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F\n            self.inertia = max(0.4, self.inertia - 0.01)\n            self.F = 0.6 + np.random.rand() * 0.4\n\n        return global_best, global_best_score", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced hybrid swarm-based optimizer incorporating adaptive velocity control and dynamic differential evolution parameters for improved convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.7208315592957542, 0.7491287565569309, 0.7323552318058668, 0.7403134541431451, 0.7413304287103316, 0.738290740312081, 0.7222988983278784, 0.7377234581901118, 0.7422594705364337, 0.4870296447767619, 0.5069605457681263, 0.4908620985037222, 0.4766113494502241, 0.49165369864024744, 0.4914579919597032, 0.45322407245344043, 0.5017665138971856, 0.4432211901252838, 0.12803768699561702, 0.12726369249291036, 0.13751084473516695, 0.15158078894099014, 0.1411384147299981, 0.1347919494141957, 0.1319639660489964, 0.15432696571667948, 0.10954257259015066, 0.10815591404074965, 0.11812691824032995, 0.10121673414321375, 0.11401484670278628, 0.10291683156234666, 0.11073057246999285, 0.10246024363231632, 0.10001740673970838, 0.12154413032029499, 0.9865373249221993, 0.987462710873987, 0.9886700651301056, 0.9765829331226731, 0.981561907018887, 0.9874184519664047, 0.9866574773676288, 0.9850634640038474, 0.9825840835221077, 0.4513803066164265, 0.46553673462893264, 0.442506825091426, 0.48125616114859204, 0.5051927118206925, 0.4612982230655812, 0.47755649159840496, 0.5000960907248015, 0.46951659449103045, 0.2115537854578715, 0.7400356539686294, 0.7154525432822778, 0.7348725767924743, 0.7344698222644624, 0.7550772692893208, 0.7072140858690088, 0.7740623951723983, 0.764783132965529, 0.3573697419116524, 0.3580032739458302, 0.32728174001642374, 0.3860465370555577, 0.12230224285586211, 0.34619179034544867, 0.31822869073607396, 0.3432008349040927, 0.11961625695352018, 0.3896587058597346, 0.1949821199462296, 0.3951958574472446, 0.3458860835739813, 0.39801804288200815, 0.4015363459544412, 0.372269231278765, 0.39480479791577294, 0.3398716251367976, 0.20732864972534848, 0.18802451022078293, 0.19720749356399503, 0.21331932192348246, 0.03303478181097397, 0.1808530323152303, 0.28958105936787626, 0.29338263161120093, 0.03379699104268441, 0.3352582049856281, 0.2730005781440269, 0.24230921360288415, 0.3795173884586427, 0.21449147453687056, 0.29480219465665547, 0.2757949309590283, 0.3733015882992863, 0.3301793270716896, 0.06714683968290924, 0.058505235159466595, 0.05380289385084247, 0.21624899312146928, 0.12282247454379447, 0.08408813650485736, 0.1754603245750601, 0.06907999918070895, 0.20718843167683576, 0.24793309476370984, 0.22658291448419543, 0.241578205291065, 0.2406038448770519, 0.24427880696497217, 0.2444468164159419, 0.20500132286812967, 0.23330755654785051, 0.24724859361307094, 0.5876889817317654, 0.6039116924975777, 0.6011056769328336, 0.6008433505386258, 0.6046133369277924, 0.588779960330984, 0.6037458994936804, 0.6220038720644555, 0.5901457977698414, 0.10333223939896052, 0.09804618024477041, 0.13084101996913033, 0.1319673387518273, 0.08982296740954865, 0.1309852262423259, 0.09554627583113673, 0.13662952699208164, 0.14250162480551443, 0.17351729787651637, 0.1920521704734799, 0.4422407657972024, 0.25729990589864704, 0.20845826172858828, 0.2488135745974821, 0.5567046550195291, 0.20335993738273306, 0.42248162298279235, 0.4317232552542378, 0.43658721749870355, 0.39682189543557034, 0.4183855624853884, 0.4371998902496921, 0.4414400289614595, 0.41099053439537203, 0.46264950258232707, 0.45830055495220523, 0.3416955070521517, 0.26775781454835845, 0.2365999276407259, 0.3425321805512914, 0.33068223415357656, 0.34231073314859106, 0.32707712127706867, 0.3811308928202207, 0.34254760257588124, 0.21134866590379353, 0.22155842125453984, 0.20727663549286768, 0.1845096818167592, 0.19496232921407464, 0.20944824155451902, 0.195629843104426, 0.2152019563607228, 0.20339695828664994, 0.23623113995443357, 0.19954294850191479, 0.49663495798819224, 0.22857254670852856, 0.19122859257747682, 0.2258468568198353, 0.21034877806347285, 0.474542020604646, 0.19109044154153365, 0.14345782026720422, 0.16499404413226826, 0.15766571285347653, 0.17596637337131849, 0.6651006945476856, 0.16873109041678125, 0.7875549737391616, 0.7851544645982492, 0.16699133370113595, 0.2062868641894452, 0.7422862550958368, 0.7612876911373054, 0.16505126901903355, 0.20767638120399423, 0.6677673432950282, 0.16184668540889047, 0.7829740473536799, 0.7164863289681511, 0.199105408215964, 0.19428521093033946, 0.20008247265694468, 0.23456111448369843, 0.18014109478311324, 0.19292433666953468, 0.17883394710762768, 0.1949127935213344, 0.1953516998154632, 0.08461945005811611, 0.09225048200489983, 0.09260771116136579, 0.08831137752489127, 0.08143515940410873, 0.07971019530201717, 0.08469234694887551, 0.08616439679074595, 0.08812228179704595]}, "mutation_prompt": null}
{"id": "ae800b1e-b3a3-4bcb-b71e-374e2d238cfb", "solution": "import numpy as np\n\nclass QuantumAdaptiveOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(70, self.budget // 10)  # Adjusted population size\n        self.inertia = np.random.uniform(0.3, 0.8)  # Adaptive inertia weight\n        self.c1, self.c2 = 1.5, 1.7  # Adjusted cognitive and social coefficients\n        self.F = 0.6 + np.random.rand() * 0.2  # Dynamic scaling factor for mutation\n        self.CR = 0.9  # Adjusted crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Quantum-inspired Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    phi = np.random.uniform(-1, 1, self.dim)\n                    mutant = np.clip(a + self.F * (b - c) + phi * (global_best - a), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F\n            self.inertia = max(0.3, self.inertia - 0.01)\n            self.F = 0.5 + np.random.rand() * 0.3\n\n        return global_best, global_best_score", "name": "QuantumAdaptiveOptimizer", "description": "Adaptive multi-strategy optimizer integrating quantum-inspired exploration and adaptive local refinement for enhanced convergence.", "configspace": "", "generation": 70, "fitness": 0.3294118671781808, "feedback": "The algorithm QuantumAdaptiveOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.746954604072418, 0.7627706428472649, 0.7443370335162043, 0.7603685736394318, 0.7648257779006722, 0.7513449898450989, 0.7329168439100754, 0.7758355461963757, 0.7530906606755625, 0.5287259917855607, 0.5230766562789788, 0.5421528783891424, 0.5331749721269865, 0.5618866595367843, 0.5307621555461128, 0.5224462094550408, 0.540822186688652, 0.43304420005413635, 0.14027119788004516, 0.11983219394696665, 0.14603124087140373, 0.13598251350200352, 0.13686888430315902, 0.15871542539191796, 0.11286167697162597, 0.12609434763721328, 0.13208550020176213, 0.13557387774834428, 0.097369385179912, 0.11047075160667064, 0.10550503967089409, 0.09613801492604235, 0.13076367299775593, 0.10573083803529915, 0.10050513039397069, 0.11064842595825575, 0.9891900209698078, 0.9890701443114327, 0.9898352993007009, 0.9814920431144062, 0.9856774220044545, 0.9878432433821437, 0.9776868144507528, 0.9883471824434793, 0.9827292448306343, 0.44770809561991165, 0.5318563635004885, 0.48361041111020053, 0.5130267075640442, 0.49592016636551306, 0.503250021792812, 0.4669456042127478, 0.49368500936512205, 0.5212276889114439, 0.7407556817015033, 0.7550177924392156, 0.7302335833480298, 0.20795764296611063, 0.7660860430037437, 0.743351677637129, 0.7212649404496595, 0.7379945146782916, 0.7391576897522202, 0.32552175234175107, 0.3396923018580432, 0.3978672610147168, 0.28444909099368054, 0.31838317895152546, 0.12282912291790493, 0.3243867927041264, 0.2735652664908286, 0.36419331311033043, 0.2726350152622441, 0.30313476295630193, 0.34547979240839055, 0.3325734648269506, 0.35186063966655234, 0.3017746953891265, 0.12260994632243405, 0.3314072801886194, 0.3761894345207356, 0.0692532544185076, 0.05947413333360396, 0.07854743304142808, 0.14813829367836406, 0.0021818373818308645, 0.15427003736688316, 0.007939678094704639, 0.0030888450424853, 0.06562455657449406, 0.05641078880119765, 0.13278498479792555, 0.12691837147336738, 0.14207475888158938, 0.09733634822401638, 0.09721903659128506, 0.0565677321146375, 0.14058101610976648, 0.07630002343052678, 0.03088881237583918, 0.09939478305406446, 0.05028273406077499, 0.06972077892962392, 0.062183642828045005, 0.06324792563205794, 0.09056091359181484, 0.18143868924575346, 0.06049849911933636, 0.16781748725831835, 0.2124419708246974, 0.16947263087209907, 0.19534717177041372, 0.20774717616947913, 0.210381830372126, 0.1856054211975089, 0.16224397127883172, 0.2410412371057351, 0.5434501428803311, 0.5702174996777227, 0.5491587940147746, 0.5531404103431982, 0.5533657423483372, 0.5489570918587553, 0.5659383607662558, 0.5650541904752236, 0.5754913404543062, 0.08174765368104275, 0.10097637089302902, 0.09021511428190065, 0.08518563591278416, 0.13674905671627224, 0.11796354490999961, 0.14016116917873955, 0.13482599243147253, 0.13863666574294653, 0.1890860526640873, 0.5516208401770263, 0.2992611906888817, 0.161327524025067, 0.21457939936296444, 0.2820691533345948, 0.21857463236632246, 0.1601909362205799, 0.22556168476546679, 0.45351876405503644, 0.434244145547134, 0.4063595485564505, 0.4120174157877535, 0.3904862851876809, 0.4333430566869624, 0.4573284091293829, 0.44268578857546204, 0.44923232837766214, 0.22526771800986634, 0.3238126472363876, 0.25416316977512876, 0.2035175405209272, 0.17999328112598523, 0.3053775923052926, 0.20465538029700403, 0.36311510558618765, 0.3867541011876797, 0.20467126915244305, 0.2229652070414352, 0.2155840952850997, 0.2120789205377157, 0.23598228923793685, 0.2196973792793595, 0.21300641138855247, 0.190715025712773, 0.25354812549591543, 0.5504137543196439, 0.19401299212412837, 0.21666801285496673, 0.2312739549287418, 0.17810645728921704, 0.1997528363355131, 0.20737221803908878, 0.6373166889748088, 0.2020333470446899, 0.18016775012711883, 0.15132422417699476, 0.18134054466711091, 0.16361754996976818, 0.20734481029333807, 0.16937184684819917, 0.167866308681903, 0.7825873279608717, 0.8219210056961498, 0.7599926181002422, 0.7499024267734813, 0.7367671751325113, 0.20323795272290712, 0.209170997084276, 0.16553905091123522, 0.2096984709442994, 0.7995786673533807, 0.1274095169446584, 0.1847024534430557, 0.1815091063926353, 0.18806554426926203, 0.18040061524519535, 0.18902957798433828, 0.19082496044309594, 0.18663123613945376, 0.18436193232769915, 0.17868301210920068, 0.09523853200067456, 0.07783681021110112, 0.08792215942344517, 0.08306490957031565, 0.08495630491257966, 0.09668089446036887, 0.0841100257461821, 0.09770899029529068, 0.08533488208147777]}, "mutation_prompt": null}
{"id": "4128e887-966c-458a-a29d-60485bee51dd", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)  # Adjusted population size\n        self.inertia = np.random.uniform(0.5, 0.9)  # Adaptive inertia weight\n        self.c1, self.c2 = 1.5, 2.0  # Adjusted cognitive and social coefficients\n        self.F = 0.7 + np.random.rand() * 0.3  # Dynamic scaling factor for mutation\n        self.CR = 0.9  # Adjusted crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Chaotic map based mutation and crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    chaotic_map = np.sin(np.pi * np.random.rand(self.dim))\n                    mutant = np.clip(a + self.F * (b - c) * chaotic_map, lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F\n            self.inertia = max(0.5, self.inertia - 0.02)\n            self.F = 0.5 + np.random.rand() * 0.4\n\n        return global_best, global_best_score", "name": "AdaptiveMultiStrategyOptimizer", "description": "Adaptive multi-strategy optimizer leveraging chaotic maps and adaptive parameter tuning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 71, "fitness": 0.25555751682620936, "feedback": "The algorithm AdaptiveMultiStrategyOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.5498468057744987, 0.5715357507618295, 0.5612765747847785, 0.5942347161523283, 0.589987417410774, 0.5819201421516271, 0.5717657843239456, 0.6051288773746815, 0.5499382846835775, 0.1946299032558918, 0.26992302236304366, 0.2195690950303839, 0.23313921594855425, 0.25984365958121824, 0.17008937119781364, 0.22692718806996304, 0.23369403103362063, 0.22404960419505937, 0.1049320543851181, 0.1216350698285773, 0.10240978530911182, 0.13338217248979523, 0.13873375610778915, 0.10695640566253006, 0.1313956835464951, 0.11373099894446026, 0.12404774850817935, 0.10026191399441264, 0.11519319649262783, 0.10106773428217852, 0.08836006984884115, 0.09729188457511095, 0.09865837294622393, 0.09171987795854986, 0.08859191799248622, 0.0977154034715082, 0.9838926142532934, 0.9854670609124949, 0.9781279994404294, 0.9762178470937081, 0.9832646719384077, 0.9838748398611814, 0.9810482311051208, 0.9813222747682517, 0.9746275938756808, 0.3157330328114949, 0.31292476895253374, 0.2950457213842679, 0.29395319492206917, 0.2983383942221124, 0.2884073899057532, 0.28512847041405653, 0.34295135492456763, 0.3124928430323556, 0.4546624569113653, 0.23087134270686216, 0.5686965003901534, 0.6392374450645074, 0.5954741484117703, 0.5640967733699404, 0.6198818492440636, 0.6654644046122107, 0.6806904292563023, 0.16401189619821688, 0.20128140284427232, 0.15604287055687005, 0.18207655341755524, 0.24418944419198052, 0.14465805139205679, 0.18141334181359758, 0.20626824501341956, 0.183806289644595, 0.20683018573782042, 0.1003503935275536, 0.12102372682910134, 0.19237303733998, 0.16380030561136394, 0.22937639622211414, 0.18770275470332975, 0.2275627328669726, 0.16130295349481172, 0.03313751766953088, 0.06607030860693919, 9.999999999998899e-05, 0.024646409841660666, 0.020349141120696523, 0.0037851386247587104, 0.0018177577345933615, 0.007344870394710101, 0.023429138957561935, 0.06683436622092742, 0.07732109114174113, 0.08246764391895955, 0.08049062954014408, 0.05239314741669987, 0.11670008516383545, 0.07266011339744638, 0.0946444510783967, 0.06305486255383852, 0.02098822350149676, 0.034228181540127633, 0.06206265831408797, 0.04833370490089506, 0.027468005133475693, 0.05204245823799414, 0.034786818870644276, 0.10111556472155203, 0.0502810921421456, 0.15654319572976916, 0.12887198755847917, 0.1604427185160997, 0.16789644557153915, 0.1480357783487236, 0.14293009114332267, 0.07099594757145655, 0.08247682649189991, 0.09321549861547429, 0.4580076151401209, 0.44902209177197117, 0.4240612537198588, 0.46041714221005825, 0.4566884711453032, 0.4847501739220016, 0.4671353712885883, 0.48087916701869404, 0.4606847686770513, 0.11726669543173285, 0.10615006346501632, 0.10760930247922973, 0.10020588355949678, 0.11516537032366925, 0.11338355173244596, 0.09083348540969349, 0.11632486155413424, 0.14954325093978948, 0.20250350604264933, 0.246764916452069, 0.17455388402081806, 0.19749331719678076, 0.1674687959354203, 0.24075648487897128, 0.1681914819060819, 0.16410913054745047, 0.22811259067298206, 0.3074510067196268, 0.3190968964342311, 0.2980099621337573, 0.29387495576689204, 0.32341934940139816, 0.32422554752022326, 0.3158854538205528, 0.3285997971103948, 0.34481919997204236, 0.24721635626876748, 0.2760143616577737, 0.21189643523694068, 0.2306797914909755, 0.19293381154803213, 0.18222124656861904, 0.17799658927363493, 0.2459874259178778, 0.2215464386343936, 0.17882338075501103, 0.1907590730021419, 0.20527381698000258, 0.18880706733054653, 0.1899620673262592, 0.17952625957125679, 0.22538933450998533, 0.18859844339295773, 0.21125131401119268, 0.18587767639187947, 0.2012164269668698, 0.19084534633576133, 0.24255629915356458, 0.1949799366152084, 0.19380113768390284, 0.3043651793163449, 0.19321054039704078, 0.1960331255204757, 0.18506706764608538, 0.14500003277373652, 0.18382767264331046, 0.1629227721945512, 0.6186653306955032, 0.7123143164268344, 0.7395665320490217, 0.1738387497233238, 0.1768371961515186, 0.16782966485095563, 0.16373516239324015, 0.6037991385662447, 0.1517329451897207, 0.20007084122432472, 0.16525310557792783, 0.5352911644895497, 0.5961087080515464, 0.12636553266115624, 0.19007237348307204, 0.17699232570025836, 0.18468004218463563, 0.18527424871406217, 0.1897496914358464, 0.18085411641348725, 0.1790317275010217, 0.19081456453960188, 0.17625558965307542, 0.08691584623285287, 0.0832360930934607, 0.07904999722210593, 0.09118898675007281, 0.10127295467840902, 0.10404111091967605, 0.09108844298333352, 0.08266816298366408, 0.08826815256564535]}, "mutation_prompt": null}
{"id": "db21f25d-6f8e-4bc3-81bf-6591610141bf", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)  # Adjusted population size\n        self.inertia = np.random.uniform(0.5, 0.9)  # Adaptive inertia weight\n        self.c1, self.c2 = 1.5, 2.0  # Enhanced cognitive and social coefficients\n        self.F = 0.8 + np.random.rand() * 0.4  # More dynamic scaling factor\n        self.CR = 0.9  # Increased crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Hybrid Mutation Strategy: Differential Evolution and Gaussian\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    gaussian_noise = np.random.normal(0, 0.1, self.dim)\n                    hybrid_mutant = np.clip(mutant + gaussian_noise, lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, hybrid_mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adaptive adjustment of inertia and F for exploration-exploitation balance\n            self.inertia = max(0.4, self.inertia - 0.02 * (1 - evaluations / self.budget))\n            self.F = 0.7 + np.random.rand() * 0.3\n\n        return global_best, global_best_score", "name": "AdaptiveMultiStrategyOptimizer", "description": "Adaptive multi-strategy optimizer leveraging self-adaptive velocity, hybrid mutation strategies, and adaptive learning rates for enhanced exploration and exploitation.", "configspace": "", "generation": 72, "fitness": 0.20843246752478975, "feedback": "The algorithm AdaptiveMultiStrategyOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.38814451958414886, 0.38115408858464883, 0.42211395441373933, 0.4122409085243548, 0.39744664858743994, 0.39972413430883647, 0.3786995419175164, 0.40574866680348287, 0.4108353913850873, 0.03203316428634295, 0.06092104778249252, 0.04747114168917144, 0.03712626355142712, 0.04016026251764249, 0.03471979349720333, 0.0607560970551182, 0.03768388675432832, 0.04824592166562125, 0.08981381198863514, 0.1029775267364994, 0.09921296577951177, 0.08859672113258732, 0.09746923384577422, 0.10905577769657049, 0.11458968682382897, 0.09954813294130416, 0.08920013551655426, 0.07944354214112193, 0.09481735163109173, 0.07901393276721791, 0.07731521311269385, 0.08243624173934261, 0.07675427502436394, 0.07904334712289418, 0.09069790859951388, 0.08568335911672731, 0.9759188301992134, 0.978292595749053, 0.974762188985548, 0.9823945773190262, 0.9711399293542694, 0.97931182578223, 0.9608813717587738, 0.9684785385457124, 0.9703060599178108, 0.2289272069029079, 0.21537816864807047, 0.23105150648476203, 0.22331671553928667, 0.22772152025524084, 0.22622876632040234, 0.20658030287689622, 0.24427910716591372, 0.21645328209859493, 0.29907205420858185, 0.3199885265682184, 0.2797456218804476, 0.41454895967723693, 0.2852482279655377, 0.3054674683854677, 0.28314254478846357, 0.2776507724887013, 0.2924191747179038, 0.11889090655959311, 0.12857609851824892, 0.13006632253624573, 0.13921896252610078, 0.13389074095469444, 0.13641178576939383, 0.13134784049457937, 0.1300452934356774, 0.12253270695987084, 0.10634204034550054, 0.1059450448971131, 0.13741149821412857, 0.1424920934148649, 0.13437315052312937, 0.13015660531986084, 0.11152028859378893, 0.14395999172247598, 0.14964146976447068, 0.02606501696446417, 9.999999999998899e-05, 0.018382407648943055, 0.011476897542280873, 9.999999999998899e-05, 0.01838014828119372, 0.008697719047946362, 0.000944850308005285, 0.011052099489801903, 0.10166188532333109, 0.11430086586874932, 0.1276700862823591, 0.1338583494737502, 0.062070172938398005, 0.1163126345407598, 0.11536511800052918, 0.10032123872689258, 0.07563550312253742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08044861023130434, 0.09328013428581394, 0.09305050370507306, 0.09469397876789842, 0.10015808667753157, 0.08828680676102285, 0.09600936692330475, 0.08303900379615492, 0.072758913037831, 0.33974956294098324, 0.3510896076068708, 0.35653015868515725, 0.3593041162749945, 0.3646262075959774, 0.3742290791472135, 0.3728417250817203, 0.34344710791906186, 0.378669694703233, 0.10331257112380987, 0.08116648356635392, 0.08825825158537193, 0.09638179378712541, 0.09137404655589365, 0.11450050872905826, 0.08592648244555023, 0.09058247556192633, 0.11838862229088631, 0.17107869755486316, 0.19010130690144977, 0.22621521787166188, 0.14766266652219273, 0.16660717029819372, 0.1421320342113862, 0.19906393962677993, 0.14486745570284676, 0.12669875428788768, 0.2539044254005042, 0.2679370763611638, 0.2578694124537315, 0.24824110170330838, 0.25100174575621126, 0.2613880068948602, 0.25797065026370425, 0.2674095654599684, 0.25863460037947505, 0.20689730649122817, 0.1966674842550451, 0.20165318663955367, 0.16394047540214762, 0.2023771556055186, 0.19861203204998623, 0.18727531645306228, 0.19395326783572253, 0.20127824275756834, 0.2100420354103577, 0.17902755334270626, 0.17844817791249656, 0.21235601269409765, 0.21290875651522978, 0.19165382091575156, 0.18959657534504193, 0.19401970013787306, 0.19937549457479953, 0.17166981575014073, 0.17475036005215605, 0.16923921414607934, 0.18338963878156567, 0.18170122497813568, 0.17643659179012616, 0.17737168466204734, 0.17875741754953123, 0.1662061565004862, 0.47025323289158594, 0.15010549274112583, 0.5685533986643821, 0.16359090909716156, 0.5008070116741496, 0.1919230265875378, 0.522663860868769, 0.45797530440325585, 0.4942036512164465, 0.16408194843811363, 0.16085247890221765, 0.4904652276451238, 0.15724644726951242, 0.31873721914915254, 0.4195135543839623, 0.19400838849624968, 0.42351559275006345, 0.3853690131443134, 0.19007237348307204, 0.17999127489978983, 0.19595055261502126, 0.17438010516930902, 0.19156170937525507, 0.18217930610073552, 0.18993244917782548, 0.18559942963060116, 0.18296539015249458, 0.07536850859755018, 0.07339371881902335, 0.10589210132871396, 0.08467134928005093, 0.06646795809207873, 0.08588394667663157, 0.07619923750976199, 0.0772723094586194, 0.07355480536038084]}, "mutation_prompt": null}
{"id": "02620c39-c5e3-414e-b69e-2cfe7558cd75", "solution": "import numpy as np\n\nclass SynergisticParticleDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)  # Adjusted population size\n        self.inertia = np.random.uniform(0.5, 0.9)  # Adaptive inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # Balanced cognitive and social coefficients\n        self.F = np.random.uniform(0.5, 0.9)  # Self-adaptive scaling factor for mutation\n        self.CR = np.random.uniform(0.7, 0.9)  # Self-adaptive crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.5, self.inertia - 0.02)\n            self.F = 0.5 + np.random.rand() * 0.4\n            self.CR = 0.7 + np.random.rand() * 0.3\n\n        return global_best, global_best_score", "name": "SynergisticParticleDifferentialEvolution", "description": "Synergistic Particle-Differential Evolution (SPDE) combining adaptive inertia, self-adaptive mutation, and crossover for robust convergence.", "configspace": "", "generation": 73, "fitness": 0.2818201352452496, "feedback": "The algorithm SynergisticParticleDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.5572483334648595, 0.6104133044754916, 0.5862523412611516, 0.6121690231446923, 0.6104063716124899, 0.6328035711848374, 0.5664334977534611, 0.551566219092843, 0.5778139327831595, 0.21083007702365508, 0.26250354633168915, 0.2482158294723188, 0.23239883870626377, 0.22949948476583293, 0.2516128532460149, 0.21865283632843757, 0.2624117078930387, 0.23130690474759152, 0.17009524663553133, 0.12828478142078326, 0.11706850937781621, 0.12030532032491281, 0.12330791594702861, 0.10408217304291212, 0.11930243020360665, 0.1154363702865161, 0.10745714153980102, 0.09717745383598064, 0.08673365186847681, 0.09478940335969988, 0.10313115608210277, 0.10165258909708641, 0.09213031445289921, 0.10474306094075059, 0.09324862814942858, 0.1051000939784863, 0.9854396413796769, 0.9763749073047696, 0.9806469645896714, 0.9851636645353163, 0.9753396211101085, 0.9701505319747192, 0.9764468291786635, 0.9784498850934218, 0.9812806512594114, 0.3561394733905401, 0.3216488698054999, 0.3345975429562208, 0.31471187478115725, 0.31922247049073715, 0.3427012982677231, 0.3445169023211969, 0.3444840067938345, 0.3572813023914134, 0.6138986795394029, 0.6285656228037293, 0.6202772769534051, 0.6247769596139914, 0.6147952974874277, 0.6077794487652954, 0.5995858145312096, 0.6470328586931897, 0.6882168818938343, 0.21631104345816454, 0.21228599128712777, 0.21097436269946868, 0.11604439307409653, 0.2569842961151676, 0.21224479198564716, 0.21329547395927007, 0.28039128778009503, 0.17626625233022164, 0.21186267581917095, 0.24707332385489011, 0.20594560229469738, 0.15728078959098313, 0.20401990110561385, 0.24837897318961877, 0.2545071368054339, 0.1993505762997635, 0.21261196114951686, 0.1317526052202489, 0.10509715598746638, 0.1413999195364104, 0.05295469584140189, 0.018993343592015877, 0.07294883290489784, 0.08735113962996333, 0.12267311197581166, 0.13757130010113816, 0.2231035064467345, 0.2089034615690314, 0.1703632431138825, 0.18780147282688475, 0.14981594754966188, 0.13001292712264279, 0.24567507424314328, 0.18502634729302958, 0.2042075926587419, 0.022958135474885788, 0.09250005257740379, 0.034075975961177396, 0.0590534138828831, 0.06933476608898859, 0.06397142285211121, 0.07358552501193405, 0.09801913372967175, 0.04382182393041201, 0.16354448309814795, 0.1725953824609644, 0.16511633837526174, 0.17757985481412086, 0.18087009204725824, 0.17533080767109555, 0.17631470944854533, 0.14002757748216232, 0.16170670816376242, 0.48250802105236457, 0.4776808484690841, 0.49503602059447926, 0.49287285266982694, 0.5149958162197128, 0.5029353824532098, 0.4815971246120878, 0.486108365834255, 0.5171349727506952, 0.09097267744973347, 0.242651333112486, 0.11854297324974017, 0.10510645488929693, 0.10577637544501872, 0.11208860358865991, 0.11925427194386307, 0.12479317144412505, 0.13979478980167337, 0.149191068889441, 0.20743000430548986, 0.16345788705249853, 0.1923199852881009, 0.2910110552744388, 0.22705570393852315, 0.1732910356000562, 0.1601880632970809, 0.1700227670919654, 0.3162189489535835, 0.33663188250161846, 0.31197313862215503, 0.3281504348542671, 0.3286287843221718, 0.3260920698021572, 0.33254415883918187, 0.3268672078681787, 0.3369950392614375, 0.2585781070684967, 0.2574809887223801, 0.23353884561136196, 0.24659210387271768, 0.26531861330135564, 0.26537281547022795, 0.2848396675717816, 0.27578322686858414, 0.2837294730595681, 0.19417546061346558, 0.194529397879742, 0.20179151807365192, 0.1989132668376068, 0.19581902512885208, 0.22114917693361125, 0.23730769901362414, 0.21947155360536164, 0.19772768559610554, 0.19750689642031738, 0.18119372980794346, 0.18064529089843895, 0.203399051673811, 0.33906077285438796, 0.1958331834333128, 0.21296701205765867, 0.19962869534144534, 0.2004912411140467, 0.17070674395312668, 0.19233456555290807, 0.6976114427707092, 0.19325135533421411, 0.16370181921975457, 0.1666616668627745, 0.17104972076899772, 0.20084738031526939, 0.19843273872116385, 0.6167835161354434, 0.6586359043190464, 0.6714917108812528, 0.1642227728246427, 0.6597797000877024, 0.20757910750161368, 0.6551314451022964, 0.6246073443405762, 0.15432179460036533, 0.1842983764255236, 0.19070944123349487, 0.18538420678149548, 0.19296880811641026, 0.1778709356154492, 0.1838520483013898, 0.19490162898978458, 0.18532205532010182, 0.19601244529383044, 0.08406162008096618, 0.09255531217317425, 0.09592866317413229, 0.08014816050219065, 0.07682769201336193, 0.08365580549864626, 0.08438122368201151, 0.08838467648846726, 0.08997468859905677]}, "mutation_prompt": null}
{"id": "26537daf-4f89-4c0a-94d4-6d0306e78f5c", "solution": "import numpy as np\n\nclass NovelHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)  # Increased population size\n        self.inertia = np.random.uniform(0.5, 0.9)  # Adaptive inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # Balanced cognitive and social coefficients\n        self.F = 0.8 + np.random.rand() * 0.2  # Dynamic scaling factor for mutation\n        self.CR = 0.9  # Slightly higher crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover with Stochastic Perturbation\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    perturbation = np.random.normal(scale=0.1, size=self.dim)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant + perturbation, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F\n            self.inertia = max(0.5, self.inertia - 0.01)\n            self.F = 0.7 + np.random.rand() * 0.3\n\n        return global_best, global_best_score", "name": "NovelHybridSwarmOptimizer", "description": "Novel hybrid swarm optimizer using adaptive velocity control, dynamic DE parameters, and stochastic perturbation for robust convergence.", "configspace": "", "generation": 74, "fitness": 0.20593917875381396, "feedback": "The algorithm NovelHybridSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.3653942340890859, 0.3960524403585527, 0.3826302500355063, 0.41171202798780004, 0.42017102483149316, 0.40930406506605277, 0.39301920405189017, 0.4023531842966249, 0.39238729598030697, 0.05970737495228018, 0.06129949828729808, 0.041330785180209384, 0.027523971696880478, 0.03409716203489277, 0.053978359918529506, 0.032377597307151174, 0.052104614607767163, 0.04813503379151607, 0.10004890814317202, 0.09929159026665946, 0.11031210358011956, 0.07722113150183285, 0.09952701146248566, 0.09532754897550677, 0.08916270147526706, 0.09790027249651123, 0.10296578014111546, 0.07687856957593797, 0.08836714538174051, 0.08493738768788184, 0.08572365542401517, 0.0906068489597579, 0.07419396205773066, 0.07838272887530129, 0.09083535775641927, 0.08047587161407666, 0.9741550693244446, 0.968697765554141, 0.9738191894311822, 0.9581523670158012, 0.9639651654411464, 0.9793035442348963, 0.9541562408499713, 0.9611977349973198, 0.9690400645760213, 0.23795594081023608, 0.24488548184872672, 0.234659220838631, 0.22326951556464114, 0.24509920952344655, 0.22851050123270733, 0.23693066686451358, 0.24800122134983849, 0.22555669396576505, 0.2862411728951061, 0.29026715982769735, 0.37775832353559213, 0.42078656335937736, 0.3481727122106222, 0.34568889629012656, 0.2774953312420273, 0.3010727356474223, 0.36101802078304746, 0.15187966075322346, 0.11833075646955227, 0.12292542953980756, 0.11752309335816813, 0.13065059092739817, 0.13068163095880192, 0.13949685692940728, 0.13391406985694354, 0.15449842847433992, 0.10398049987410452, 0.13040983538939366, 0.13959108057381653, 0.15262121681193164, 0.13792817808472413, 0.12713864722118995, 0.13416758897379188, 0.1316066933963992, 0.14180825411075493, 0.0017948566033987312, 0.009402533465908913, 0.013981422618363992, 0.011917322717002965, 0.011327095636214257, 0.015799614583074106, 0.009757299066470493, 0.021242756714568878, 0.016208670011342297, 0.11863383152808804, 0.12075440456235775, 0.11027881841055154, 0.10800469766956777, 0.10794749013945915, 0.12539591088477042, 0.11424470980224155, 0.12509946332365707, 0.09778017914707793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08129610190262848, 0.08463072950634465, 0.08481595106347084, 0.0803282758163556, 0.08693982370961728, 0.08143407153127968, 0.07487667829706846, 0.07955457174016956, 0.0856653482048223, 0.3544183468255705, 0.3617756291472405, 0.3636249165227945, 0.3550116268860757, 0.3752372556505924, 0.3645412289821427, 0.3522670913055985, 0.3551517368524121, 0.3866077979341861, 0.09621277957026575, 0.09956884116235631, 0.09777427889562951, 0.09318955331114775, 0.08259204154313682, 0.10372809163104024, 0.08536545833862164, 0.104553858161055, 0.11059760656211814, 0.17828237771250677, 0.14999221261193163, 0.14455310442906788, 0.15508029528560197, 0.18588331963404392, 0.1319630655269468, 0.1320004921116632, 0.1812490919547749, 0.18163989739495812, 0.26351277837739184, 0.2664088301584099, 0.26339519926686317, 0.2580661963281251, 0.26094007167938205, 0.251300055543795, 0.2610877125341101, 0.27272847442357584, 0.2590879930434409, 0.19620501544621927, 0.20757824579993533, 0.2016557368201417, 0.19452555110571068, 0.20970689242796492, 0.19668138574599292, 0.19889708761601554, 0.2038077965099666, 0.2046630842434305, 0.18438310225190802, 0.2095487638156487, 0.20060287338631555, 0.1850560437666665, 0.1795960487258189, 0.1922588868936601, 0.19881511504057425, 0.20580390159513862, 0.1985768616459349, 0.17919108530192318, 0.19846526643382068, 0.18049551880371562, 0.18635778027593786, 0.19136750351811083, 0.19251224801725908, 0.17927120336823432, 0.18521003842805994, 0.17556832338632888, 0.41307891541808284, 0.15989584210427932, 0.5116015879993592, 0.15894545778282154, 0.4900839895220124, 0.19165278466641378, 0.4899823153766948, 0.16869451031839666, 0.1916943657810093, 0.1633650898044976, 0.1625289805242386, 0.4695838334097251, 0.162581817653476, 0.1974929806922373, 0.18965991314881803, 0.3769787920139054, 0.5292837157167224, 0.12529413554949675, 0.1909701458628027, 0.1854269261287056, 0.19640893108639323, 0.17310579845639096, 0.19545178477207914, 0.18678303307457356, 0.1777578170936296, 0.19660059098112315, 0.19649878801230514, 0.07678119560939667, 0.08954193437035118, 0.08272173996082843, 0.08184899435800286, 0.084495178003127, 0.08896121590710249, 0.07593391554016293, 0.0876189008258541, 0.06660767620635266]}, "mutation_prompt": null}
{"id": "e780fce4-e4ed-426e-8d44-011fb87942ef", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategySwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(70, self.budget // 10)  # Adjusted population size with slight reduction\n        self.base_inertia = np.random.uniform(0.3, 0.8)  # Lowered base adaptive inertia\n        self.c1, self.c2 = 1.4, 1.6  # Modified cognitive and social coefficients for more balance\n        self.F_base = 0.5  # Base scaling factor for mutation\n        self.CR = 0.9  # Higher crossover probability for more aggressive mixing\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))  # Adjusted velocity range\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                inertia_adaptive = self.base_inertia + 0.5 * (global_best_score - personal_best_scores[i]) / (1 + abs(global_best_score))\n                velocities[i] = (inertia_adaptive * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F_base * (b - c) * np.random.rand(), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            if evaluations % (self.pop_size * 2) == 0:  # Periodic adaptation\n                self.base_inertia = max(0.3, self.base_inertia - 0.02)\n                self.F_base = 0.5 + np.random.rand() * 0.4\n\n        return global_best, global_best_score", "name": "AdaptiveMultiStrategySwarmOptimizer", "description": "Adaptive Multi-Strategy Swarm Optimizer integrating stochastic control and self-adaptive mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 75, "fitness": 0.2509433393469927, "feedback": "The algorithm AdaptiveMultiStrategySwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.28.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.7542262096185681, 0.7897927890800949, 0.7829552810079393, 0.7674228148156831, 0.7911708416366953, 0.810197606284277, 0.753688351966625, 0.7824676664018257, 0.8044593516681903, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14619829179349086, 0.16739484241025804, 0.1601885326307192, 0.11462266994294312, 0.12099019398178223, 0.1499493728604968, 0.11715329694180132, 0.1549310211106424, 0.1505488259193537, 0.11022271364431868, 0.0952069502583407, 0.13328688352886997, 0.07194844469234762, 0.10906860213243141, 0.1249709328802171, 0.09547941669865545, 0.13136938214183413, 0.1180649932776694, 0.9905160720436749, 0.9759612163880521, 0.9766960364047953, 0.9706735684041932, 0.970534509273296, 0.9801595232712419, 0.9815846393258097, 0.9895140862339515, 0.9780366157910649, 0.1530563869683228, 0.15441618967941884, 0.16306394445975436, 0.1452907785901012, 0.25399248121804274, 0.2940981516671002, 0.10208479615788602, 0.14250214799376426, 0.1715233661170772, 0.22468225753060989, 0.8222344125835677, 0.2240731698119005, 0.26746129027189547, 0.2696142438246141, 0.7680104612808447, 0.20225168860588127, 0.18114624058501416, 0.17367629430493037, 0.005518183457743353, 0.04328905037427999, 0.0707291340626871, 0.0154031702115488, 9.999999999998899e-05, 0.09645436585300338, 0.033368560851270934, 0.006722657493362205, 0.012793317481567978, 0.013638095469687195, 0.06229208625261984, 0.02677201903539639, 0.021789902268730788, 0.027586872523395867, 0.024629634329977446, 0.018887641869583804, 0.033995217873189376, 0.021386613902301344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04528673757205093, 0.01993925909254035, 0.029598658275262313, 0.008203089394482777, 0.0049011208729993205, 0.042671059018771884, 0.01989404415963858, 0.02205752606555711, 0.03282012714359295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3423642846449363, 0.2628987779572436, 0.2982534202538569, 0.01242969681440631, 0.024662950837552322, 0.014107985971319015, 0.18159095256264624, 0.27112890815497237, 0.0716014064402507, 0.6770906877202978, 0.7150348314558282, 0.6912502456764285, 0.6813073155741249, 0.7224541009697748, 0.7277475356689358, 0.6563742174581721, 0.7223715865710123, 0.6980453860293576, 0.1062834277368705, 0.12955860798948693, 0.1289746867871039, 0.08686661939099849, 0.13960851069561864, 0.11485274001806323, 0.060917753985957224, 0.03675066316003972, 0.05379013112822972, 0.1869074168546595, 0.12256526818400693, 0.19163045640079124, 0.5945526100835699, 0.30480117293324216, 0.5936647988133115, 0.6339765163379594, 0.19180492008221384, 0.6596458403907616, 0.4713903055019607, 0.5238685826967806, 0.5094068618046295, 0.4716585470472391, 0.4593364128836098, 0.5350853416646342, 0.4818514027360885, 0.47411391418616033, 0.5047027726460025, 0.09004534759723393, 0.2527159253633766, 0.10302110744513271, 0.40009313335645647, 0.250488593665418, 0.2325307880105214, 0.3714489320207398, 0.36214085190745016, 0.43129106338757206, 0.2154658263999173, 0.208230696890622, 0.21297545149748232, 0.2091363683184586, 0.2710516563527414, 0.2260743477145294, 0.2113245624265716, 0.22726933275745886, 0.24540342078701727, 0.15208386206262026, 9.999999999998899e-05, 0.11972081437251614, 0.20263764810005125, 0.16981142033615249, 0.1866476789513074, 0.15995822465215515, 0.12211119060227194, 0.12306775686489713, 0.17173572631903533, 0.15639685195616404, 0.15846934352988606, 0.14375195767976512, 0.1659363133442695, 0.1457424539762493, 0.12122414891913436, 0.17208888593510274, 0.8769684056656597, 0.774256872607892, 0.8428336308081249, 0.8475098046442264, 0.20730461914912335, 0.16703838635418522, 0.2109615796332971, 0.20793748587486693, 0.15503175000191916, 0.09436014989917152, 0.20198160999731396, 0.1831719424298791, 0.19488732387031427, 0.1903599762338869, 0.2022510242438661, 0.19404707260185972, 0.18930083709233936, 0.1751622314104163, 0.2050351193975497, 0.10121080980837904, 0.13271276988044478, 0.07567234870225803, 0.09706096497787553, 0.14080111683204177, 0.10765220398493236, 0.12364170042223455, 0.09167222711885659, 0.08320608588800549]}, "mutation_prompt": null}
{"id": "e459ce7c-777b-4179-a275-850a1834dbb4", "solution": "import numpy as np\n\nclass QuantumInspiredSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(80, self.budget // 12)\n        self.inertia = np.random.uniform(0.5, 0.9)\n        self.c1, self.c2 = 1.5, 2.0\n        self.F = 0.6 + np.random.rand() * 0.4\n        self.CR = 0.9\n        self.quantum_delta = 0.1\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]) +\n                                 self.quantum_delta * np.random.randn(self.dim))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.5, self.inertia - 0.02)\n            self.F = 0.5 + np.random.rand() * 0.5\n\n        return global_best, global_best_score", "name": "QuantumInspiredSwarmOptimizer", "description": "Adaptive Quantum-inspired Swarm Algorithm utilizing dynamic perturbation strategies and crossover enhancements for robust optimization.", "configspace": "", "generation": 76, "fitness": 0.18909009969092896, "feedback": "The algorithm QuantumInspiredSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.3675582782579321, 0.35443606940090056, 0.3450100671264372, 0.357793061434322, 0.35722448712617383, 0.35983321803037704, 0.3597744381123622, 0.36647407815684463, 0.3545549859946614, 0.01674842072527427, 0.0156530989514998, 0.00675428891938612, 0.014586441928264637, 0.009025500193229674, 0.005736339058488693, 0.01845799027649886, 0.04185738433517128, 0.005063709537493355, 0.08951955744063722, 0.0898965631997749, 0.09615174363682932, 0.08265835870856209, 0.08825215639394357, 0.0998840818868173, 0.10081605930522819, 0.08599283884493036, 0.09144035088560543, 0.07918097823860248, 0.07249547124106792, 0.07171462254120886, 0.07146498338640284, 0.07803486652073499, 0.09698051743297731, 0.07762129055113509, 0.08174772435436772, 0.07449864580166521, 0.9882022659601181, 0.9910605729916475, 0.989084605705501, 0.9688464457292151, 0.9907147059130816, 0.9891716811736334, 0.9824614207798305, 0.9907315283803154, 0.9828203271672065, 0.2098835144741955, 0.2009053485652864, 0.2182794952936341, 0.19677066964757528, 0.20821337654434036, 0.20937668261596043, 0.1933941055728795, 0.22721330982225074, 0.20006290148884198, 0.26559312434346805, 0.2845971178776321, 0.29099606085426755, 0.327328816389716, 0.2783472904116411, 0.2647311366840991, 0.2509916572439227, 0.2876342672964284, 0.26320833541000443, 0.13127480848548967, 0.11847368840593486, 0.11485499130972654, 0.11032592071659242, 0.12673447682291594, 0.11717660698808119, 0.1120438046651614, 0.10351256013802557, 0.12488076450911156, 0.12386265766867177, 0.09092898001665073, 0.0972280365446333, 0.1264959684466217, 0.13228023677475698, 0.13548488924451252, 0.13199111867296198, 0.10612767404068069, 0.12632361443147289, 9.999999999998899e-05, 0.025123084245656346, 0.0003631869160697354, 0.0020270348023230245, 0.02612132085619867, 0.01062148098564053, 0.019341729429776522, 9.999999999998899e-05, 9.999999999998899e-05, 0.039640045238578336, 0.12076564704155335, 0.06150178359776348, 0.15257950737733994, 0.060746923428473765, 0.10935491836403366, 0.10141197875978247, 0.09765151850019416, 0.09153495596467487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06611885312564669, 0.06961958656658285, 0.06809218947815077, 0.062397691626430385, 0.08356585036803243, 0.06926539521315722, 0.07901536669960263, 0.07834781192411933, 0.06497059822544471, 0.3384418856294681, 0.3541089958573057, 0.3357801499858891, 0.3538269273668925, 0.3407189068334209, 0.34913061025149594, 0.35396560981940606, 0.3331678374248678, 0.3446851106005149, 0.09680714871670515, 0.0987470574205287, 0.08878760105133665, 0.09551936974306408, 0.07914284758514456, 0.10135068288403182, 0.07538023878905531, 0.07725789399098848, 0.09029727884693761, 0.14617773328764816, 0.20188650183046852, 0.16114160262110322, 0.14572075814953733, 0.1698918430616021, 0.14124199909861979, 0.15526540413795342, 0.16239317838869283, 0.14122987103296236, 0.2411253996457965, 0.2559647782631643, 0.2421070007579138, 0.23817794748403376, 0.23776168135193088, 0.25187422045744023, 0.25451755362911255, 0.2615019880178049, 0.2665528769579184, 0.18566893183721978, 0.18888360200056953, 0.17588095549723115, 0.16457937491929153, 0.1830257493146401, 0.1849647153789168, 0.14939546533297166, 0.198408740125537, 0.1806158330321307, 0.17594483116559967, 0.20325586598142886, 0.19283648135637999, 0.21164261192053135, 0.19193313948572643, 0.20999681694129768, 0.21001557505766566, 0.1929611663617845, 0.1923497283656046, 0.18110604705821687, 0.1684502841481157, 0.16862694062196315, 0.18395105926324773, 0.19496311219270568, 0.19543943372616368, 0.1754608602291493, 0.17960831947925582, 0.1787197442526547, 0.1517440599296891, 0.16120628879438959, 0.1632330041988196, 0.16284009986147108, 0.16283793323579154, 0.1888660270070852, 0.4843145969852297, 0.19264902789023441, 0.44032649512062194, 0.19639297331476602, 0.16606547720065212, 0.3997080254835639, 0.19565928951473266, 0.19741503618435774, 0.16260166831281386, 0.14564210277315381, 0.3743044051931993, 0.12425627340261891, 0.19452297389405704, 0.1845542428123702, 0.17510214310983097, 0.17840709360993567, 0.17852523344757376, 0.1821365463051975, 0.18891589692892663, 0.17815329942863156, 0.17931879102339776, 0.08185364209295787, 0.08188799222844778, 0.07850260168047007, 0.0707428905190467, 0.0758035738256625, 0.07637673589419336, 0.0698202872281034, 0.09238505228572325, 0.07916318761645691]}, "mutation_prompt": null}
{"id": "e17b57dc-ba06-4a6f-849c-41bca0237543", "solution": "import numpy as np\n\nclass ProbabilisticMultiVelocityOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, self.budget // 10)  # Increased population size\n        self.inertia = np.random.uniform(0.3, 0.8)  # Broadened adaptive inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # Balanced cognitive and social coefficients\n        self.F = 0.5 + np.random.rand() * 0.5  # Enhanced dynamic scaling factor\n        self.CR = 0.9  # Increased crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F\n            self.inertia = max(0.3, self.inertia - 0.02)  # Faster inertia reduction\n            self.F = 0.5 + np.random.rand() * 0.5  # Wider adjustment range for F\n\n        return global_best, global_best_score", "name": "ProbabilisticMultiVelocityOptimizer", "description": "Improved hybrid optimizer leveraging a probabilistic multi-velocity update strategy and adaptive crossover mechanics for enhanced exploration and exploitation balance.", "configspace": "", "generation": 77, "fitness": 0.33103015206614994, "feedback": "The algorithm ProbabilisticMultiVelocityOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.6853491290017789, 0.6778470417935083, 0.667565041996486, 0.6725016349950552, 0.698541780036867, 0.6896405736470783, 0.6682743078590041, 0.6639868563574727, 0.6486140350718379, 0.3549502246610615, 0.36021900966947407, 0.36471628197451933, 0.345105540304704, 0.3621670806038103, 0.3705995263182297, 0.3533542243753408, 0.3371551093272035, 0.3735116806761102, 0.14481086450499292, 0.11618896424112846, 0.14251036388288485, 0.09548507166054987, 0.13584908079273195, 0.22805968308744962, 0.11415814564941373, 0.14551662583747293, 0.12694902417564957, 0.09511614704009275, 0.0913005332267367, 0.09877150271788959, 0.11840287464992594, 0.10917482907965115, 0.09987466542515178, 0.0896412555145717, 0.12160585793936829, 0.09460850573219881, 0.9810316923315348, 0.9848043986766627, 0.9849184178183882, 0.9726018104030991, 0.9784774192654266, 0.9848445767332556, 0.9818549332643104, 0.9803388087753404, 0.976343533321873, 0.39341196388664246, 0.4209406918673515, 0.41511730233962085, 0.38610561891647244, 0.4077981319652221, 0.4214627209642159, 0.3743585696226118, 0.41685944056401236, 0.41297546033321697, 0.7020443820742421, 0.7052084276686083, 0.7023647869968547, 0.6453904080482507, 0.7116557444719853, 0.6434565158031578, 0.7326409086926657, 0.7401696831308365, 0.7151142460143296, 0.24341411541091695, 0.3082781696481719, 0.31687309173719225, 0.10761622709909102, 0.35649434092950416, 0.34250629334668603, 0.28203506757459096, 0.2852573219098049, 0.3160666081788246, 0.3608279054733622, 0.3276758369518128, 0.25823915894799754, 0.3388893898320956, 0.30360624720221563, 0.19653375750186408, 0.33085539710085377, 0.2806198960004126, 0.3410277032701009, 0.26496555256270526, 0.27925364457080504, 0.1618986921567086, 0.17958894008892878, 0.23945066546119032, 0.20306837588873972, 0.2073923106537875, 0.23727035721053258, 0.22323824686745375, 0.33735912207806074, 0.36695459754852633, 0.3110649073835666, 0.3206665008655323, 0.351872107192704, 0.3284987947024647, 0.30953489790007394, 0.3448413292931456, 0.3104948530148556, 0.15302599421773688, 0.11616736806553818, 0.04827648753576741, 0.1295429448216877, 0.1220355713906951, 0.1308347731636722, 0.07603447163658261, 0.08571224845123493, 0.14509621405115736, 0.21065997574052175, 0.24415560473509512, 0.25489028733921404, 0.20971633036658366, 0.23890741860931852, 0.23169730972464886, 0.19093095544673877, 0.22728223420523586, 0.2092932202579404, 0.5503038976237149, 0.5668602812336226, 0.5599650105135908, 0.5666221670475358, 0.5615051092159975, 0.5705046858293887, 0.5392615347696563, 0.5674147003189437, 0.5663168218563648, 0.0821883413307527, 0.12347147994500629, 0.1305036531869247, 0.22822122952767965, 0.144284243054832, 0.10417814638920697, 0.14800121234550534, 0.14191079697056685, 0.14679250305388303, 0.1392489467408945, 0.4558934024996847, 0.35217438522996014, 0.1858825376383869, 0.2577248139821814, 0.14925646309911222, 0.30139274894142554, 0.3157154838012096, 0.1734940603238181, 0.3851068743460536, 0.3572146171841838, 0.3774765139134568, 0.3589930552614996, 0.3716607872481027, 0.3529737261213015, 0.39683328747480495, 0.3853686652851529, 0.4093921244574662, 0.2932596614534858, 0.2863115787870384, 0.304820542832428, 0.284158088875333, 0.3040802396632546, 0.28798485637577664, 0.2960854827846633, 0.30696546681125114, 0.3371827405792056, 0.2058856173473652, 0.21424072624288792, 0.19674184293484787, 0.20772287277048285, 0.21188695378349587, 0.1948450686363422, 0.20825173042655687, 0.2025492031946492, 0.2208195618115174, 0.21547395591693608, 0.3832562801127276, 0.205131649469399, 0.21564892611780972, 0.19927559676211393, 0.31280014420784585, 0.19093634992704878, 0.21096152452175798, 0.19871149194504367, 0.2078467150953892, 0.14524845931238195, 0.1832452282168564, 0.16421339743249597, 0.6661760890145179, 0.6792010831836417, 0.6988879727755759, 0.17625595348041823, 0.19382972053415692, 0.16697322817424942, 0.112128498423535, 0.6873207575246918, 0.7016766700807237, 0.20622798807392195, 0.6882864204774197, 0.20415299375341844, 0.7758637141441824, 0.1259837802829623, 0.19007237348307204, 0.19938942429352347, 0.1773007050649903, 0.19107088078344192, 0.17415603844769179, 0.1695915893726918, 0.19686710604462154, 0.18414224316449113, 0.18025309117604937, 0.07851660041003328, 0.08756910507558058, 0.08547797557838999, 0.0835322343490914, 0.11546902171408968, 0.10631610210150289, 0.08069892664802703, 0.08508463740999028, 0.08048615804519743]}, "mutation_prompt": null}
{"id": "1c7e226a-2f63-4e8b-9957-356e98ab34c5", "solution": "import numpy as np\n\nclass AdaptiveDualStrategyOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(90, self.budget // 10)  # Adjusted population size\n        self.inertia = np.random.uniform(0.5, 0.95)  # Enhanced adaptive inertia weight\n        self.c1, self.c2 = 1.5, 1.7  # Refined cognitive and social coefficients\n        self.F1 = 0.6 + np.random.rand() * 0.2  # Dynamic scaling factor for mutation\n        self.F2 = 0.8 + np.random.rand() * 0.2  # Additional scaling factor\n        self.CR = 0.9  # Higher crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Dual-strategy Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant1 = np.clip(a + self.F1 * (b - c), lb, ub)\n                    mutant2 = np.clip(b + self.F2 * (c - a), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < 0.5, mutant1, mutant2)\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia\n            self.inertia = max(0.5, self.inertia - 0.005)\n\n        return global_best, global_best_score", "name": "AdaptiveDualStrategyOptimizer", "description": "Adaptive dual-strategy optimizer integrating self-adaptive differential operators and momentum-guided search for enhanced exploration-exploitation balance.", "configspace": "", "generation": 78, "fitness": 0.21806691462812855, "feedback": "The algorithm AdaptiveDualStrategyOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.42368681134935127, 0.45914702734958446, 0.44901751629150566, 0.434930064316878, 0.4722479897550118, 0.4786893325591408, 0.43656259228030314, 0.4676929283967973, 0.5286758284154143, 0.12885257808722783, 0.13456564542160177, 0.16226665918705874, 0.12382244386943309, 0.13748006038704275, 0.16919356812141617, 0.12318575574217228, 0.1549404251655031, 0.17882047150333258, 0.0872361779587596, 0.10288803682540948, 0.14821375784821433, 0.09633311070129091, 0.10152060732541213, 0.08907699172886185, 0.10133395721994587, 0.09600353732125622, 0.10061863028289297, 0.07745798276106541, 0.08653392028124762, 0.07917058439364477, 0.0678805227498871, 0.08273457755869218, 0.07907764347453683, 0.07095050370049483, 0.08190017510676695, 0.07804784272106613, 0.9846779687285543, 0.9787240382341824, 0.9816126693825765, 0.9738700249541787, 0.9791765589678373, 0.9801484710768618, 0.9841288384191342, 0.9731327427178057, 0.9825416003802171, 0.24436007999146103, 0.25186125049067665, 0.2368258207302686, 0.222634990715755, 0.24121376097424352, 0.28696381809933014, 0.2392002679947831, 0.24804078557040354, 0.2760301054829495, 0.3515841299389093, 0.48137690296456703, 0.4966447057945941, 0.4009706389486274, 0.5150341023311227, 0.20113469660229244, 0.4407912400279388, 0.4934351463108505, 0.4878493078626408, 0.12246001569229248, 0.14409693268722257, 0.15679518385016522, 0.13293464893652696, 0.13859022009480337, 0.10923270772094351, 0.14483126942436142, 0.13473552335256045, 0.17128407605351714, 0.10520665339783697, 0.1303503566877089, 0.1368159545975859, 0.11715086924014195, 0.1393086949821043, 0.14106576739627397, 0.11850260842402427, 0.16404127672014313, 0.1400676952843256, 0.006454459932502488, 0.011215977380408582, 0.013819154497986541, 0.0296028685299925, 0.012383911443034745, 0.003918896436719499, 0.0006214582300752003, 0.002186106930966214, 0.040159637931184045, 0.07204323545535973, 0.14091599694374746, 0.07623801122534135, 0.09850631675351573, 0.05728711248048657, 0.027167061474092535, 0.06276538514202823, 0.06755884826706893, 0.09313262033741943, 0.012455103902169862, 0.022978723753035002, 0.01642639330850959, 0.0073544559375055, 0.0421552263263153, 0.03196244558743566, 0.020939660867600685, 0.032587174035839994, 0.03438838698765412, 0.09387873882099318, 0.10748023035720511, 0.09470055544862188, 0.0909477451710834, 0.08432622470148321, 0.13694397321959273, 0.101553029039261, 0.09358694866031925, 0.10794049144211071, 0.37357802835855836, 0.38643999026203824, 0.39043140649436314, 0.4001821644628828, 0.4008006956101112, 0.40548280403347337, 0.37959434465273645, 0.40621183032483643, 0.3998747655495901, 0.08689849566099295, 0.09092004398770204, 0.09847093482933755, 0.09598745712462964, 0.09911173961019704, 0.10346514430361253, 0.09367264279639953, 0.08611464922150813, 0.11569638111598202, 0.16484599046431792, 0.17852063929588402, 0.18319014642654818, 0.1611729353696565, 0.170291648563749, 0.25070015468360207, 0.13052628929689924, 0.19087895004368416, 0.19003952236941823, 0.25602886184723406, 0.2931353068299166, 0.2919262389196835, 0.26284046407198036, 0.26464222687687533, 0.28865844271524954, 0.2825867552687399, 0.2818710370885753, 0.2788549705172475, 0.18980759277299386, 0.22564179894249747, 0.2019199422694653, 0.202596874988194, 0.17396617453790464, 0.22197822844963022, 0.2227128724988352, 0.18369105591194212, 0.22280074342951206, 0.19227424784537028, 0.19526844992700976, 0.18779059093554273, 0.1788751251198999, 0.18043615744175767, 0.18975347722086344, 0.19521029877565077, 0.197693219692873, 0.19214952681557818, 0.18707701563312817, 0.17076314894988176, 0.2192874979164633, 0.17497682162925599, 0.18448338656476804, 0.17988345534642536, 0.20009787347669916, 0.17462845903573287, 0.17376105386417695, 0.16891257985512542, 0.17926326202819476, 0.17463397942888115, 0.17934591098383612, 0.15664221121164612, 0.16559375310459035, 0.16853141181233022, 0.13454999589938, 0.5649256351446588, 0.35031364659362985, 0.40995529207880566, 0.46542026965865724, 0.2999661496123971, 0.4859019387057575, 0.11023114313646742, 0.2072326065467126, 0.14869589040058995, 0.16105481036047353, 0.1740787628495396, 0.19811755900376216, 0.18578580872519213, 0.21632600867690055, 0.18017846583437802, 0.20121234245007114, 0.1861544455030607, 0.18045835976405833, 0.17925729559326842, 0.06474402800753631, 0.07358334348767881, 0.08885170821322697, 0.08306542778476755, 0.07697865127732184, 0.07218472153503785, 0.06960670253749413, 0.08588292054193136, 0.08087338893596097]}, "mutation_prompt": null}
{"id": "d4d1bba1-997f-4bfd-ad3a-6265e3829831", "solution": "import numpy as np\n\nclass AdaptiveGeneticSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(80, self.budget // 15)  # Adjusted population size\n        self.inertia = np.random.uniform(0.5, 0.9)  # Adaptive inertia weight\n        self.c1, self.c2 = 1.5, 2.0  # Updated cognitive and social coefficients\n        self.F = 0.5 + np.random.rand() * 0.5  # Dynamic scaling factor for mutation\n        self.CR = 0.9  # Adjusted crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Genetic Algorithm Crossover and Mutation\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n            \n            # Dynamic adjustment of inertia and F\n            self.inertia = max(0.5, self.inertia - 0.01)\n            self.F = 0.5 + np.random.rand() * 0.5\n\n        return global_best, global_best_score", "name": "AdaptiveGeneticSwarmOptimizer", "description": "Adaptive Genetic Swarm Optimizer combining swarm intelligence and genetic algorithms with dynamic parameter tuning for enhanced exploration and exploitation.", "configspace": "", "generation": 79, "fitness": 0.2508795024842924, "feedback": "The algorithm AdaptiveGeneticSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.5159785603999086, 0.5112510345504437, 0.5099862173718296, 0.5320851763472514, 0.5813475142069877, 0.5474053308670843, 0.4888784269743933, 0.5466692004013647, 0.5281000708846944, 0.16529919300447038, 0.21039751763765313, 0.19152736872783516, 0.19413009142820503, 0.18695253684979307, 0.18540414572675, 0.20947839283864178, 0.1201797355717028, 0.21532669289661677, 0.11062614852243824, 0.09190166918983544, 0.1145349983043048, 0.13077434436031832, 0.111930910690896, 0.09629499794725949, 0.10530157937921791, 0.10930754223790862, 0.11907908426065716, 0.08337237749700577, 0.08829097211256542, 0.07389166735182318, 0.08875784849160595, 0.09907526029242475, 0.07574102422518503, 0.0811381412004415, 0.09046560719227215, 0.083329685891539, 0.9877050215451076, 0.9896642273682745, 0.9868661637259094, 0.9844396122485793, 0.987314062485678, 0.9848640554563817, 0.9821511842464589, 0.9794160791936138, 0.9782185257012127, 0.3087577200601387, 0.2739869908564806, 0.22685354944923386, 0.28910110310990167, 0.2709631229405626, 0.2907369116706816, 0.24469348061392648, 0.25978340890246043, 0.2812770734570186, 0.550420230146963, 0.4851984479747392, 0.5450092939924162, 0.5541966396039162, 0.5217135143741513, 0.6320563681413827, 0.5587443197074838, 0.5359897062264584, 0.5311152196010444, 0.22778150677053532, 0.1999008249745795, 0.16090599626933855, 0.15149074960864584, 0.24925013854541134, 0.10221475366870092, 0.2007948284791955, 0.1869253617594332, 0.17688725692926022, 0.17729586426528676, 0.16483666219915138, 0.15604812964487624, 0.19002368008141612, 0.17682987190130206, 0.18917955606266434, 0.20116503010623255, 0.1942835701463449, 0.16846213125688303, 0.05192382737501178, 0.0671498630151427, 0.11556930159687817, 0.06498344781012166, 0.028587468419220774, 9.999999999998899e-05, 0.10912829934723522, 0.004050717510038715, 0.0464505512198089, 0.15679933251837896, 0.19843040030950243, 0.15743443593797146, 0.1594874312889074, 0.08601168928021075, 0.07347681708249476, 0.17836819405030424, 0.12428369151728569, 0.1877763801778738, 0.03263726034062797, 0.060370089359991996, 0.0352374370494023, 0.04882025775175847, 0.0421164718639242, 0.04152087940664784, 0.02078611574403255, 0.046046305066795856, 0.05379245418200429, 0.12809985497816256, 0.148585208521003, 0.14262003041224003, 0.15363140439339573, 0.16475320920611958, 0.1878906580348525, 0.15695471890030988, 0.1493051166374456, 0.1623408421337419, 0.4521774166254039, 0.4336296434022644, 0.44999702543439135, 0.4448409749832033, 0.4491669460512141, 0.46940979218422085, 0.43690120637689955, 0.4247642142719743, 0.4614584148494164, 0.10957114763071318, 0.09236250544548097, 0.1112779506755851, 0.10392560366663561, 0.11612226831921657, 0.09552293636618014, 0.10035107722671144, 0.09108069239034944, 0.09088289671388061, 0.18737315642743257, 0.37942521185040645, 0.30890386154496463, 0.15533285694991195, 0.20984662519938446, 0.13291895910403195, 0.15918024870342629, 0.18475982046536832, 0.14881498769779933, 0.3034456276300205, 0.30433285998202875, 0.29815811514881674, 0.2926010358255634, 0.2907781634718801, 0.270580513598622, 0.30094504930789434, 0.29935520023172735, 0.3228617455441657, 0.22683653669722215, 0.19929881751895395, 0.24063900290729356, 0.2571156653339757, 0.2155279433213897, 0.23422834762380007, 0.23485090566348377, 0.25955816872825155, 0.24942168698678446, 0.19057319231034087, 0.18914446920234118, 0.22068108858644608, 0.18818628436134266, 0.18983856931343512, 0.19836829712334614, 0.17602774064186455, 0.20494901207792982, 0.20467073938745628, 0.26977966274079956, 0.2130744820651257, 0.1900486915567845, 0.2053278295541474, 0.19371713751884623, 0.2101724170598066, 0.19014390218533983, 0.1884977454130874, 0.20596763903926774, 0.1512593666741492, 0.16285263498851077, 0.19199569179708442, 0.18311945660508133, 0.16327806681374912, 0.17009496690286763, 0.17906864880404738, 0.1655649783700297, 0.6966750019019042, 0.5546592813903444, 0.6004767312404555, 0.16044922244024218, 0.19214882072348605, 0.5914298060150627, 0.16211751698006904, 0.20830588560262053, 0.6376490493873787, 0.12492460168707853, 0.19007237348307204, 0.17576717601071867, 0.18279578554221743, 0.18128181895305284, 0.20229122375283515, 0.1929464711731107, 0.17163012335751449, 0.19207715402995962, 0.1818972877214332, 0.07111083979149913, 0.08742522542859299, 0.07058900695632497, 0.0781260405571993, 0.08228375126649667, 0.09310795800723959, 0.0773070672545022, 0.07275001173785278, 0.08549759330172435]}, "mutation_prompt": null}
{"id": "7d8b9dd4-2de5-4711-b50e-334dff168864", "solution": "import numpy as np\n\nclass DualPhaseHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(60, self.budget // 15)  # Adjusted population size\n        self.inertia = np.random.uniform(0.5, 0.8)  # Adaptive inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # Balanced cognitive and social coefficients\n        self.F = 0.5 + np.random.rand() * 0.4  # Dynamic scaling factor for mutation\n        self.CR = 0.9  # High crossover probability for exploratory search\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] = np.clip(pop[i] + velocities[i], lb, ub)\n\n                # Genetic-inspired Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F\n            self.inertia = max(0.5, self.inertia - 0.005)\n            self.F = 0.5 + np.random.rand() * 0.4\n\n        return global_best, global_best_score", "name": "DualPhaseHybridOptimizer", "description": "A novel dual-phase hybrid optimizer that combines adaptive swarm intelligence with stochastic perturbation-enhanced genetic operations for robust convergence.", "configspace": "", "generation": 80, "fitness": 0.348621072903426, "feedback": "The algorithm DualPhaseHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.720912664441903, 0.698407679917754, 0.7187112313650637, 0.709387111870962, 0.708892376228067, 0.7424738923388512, 0.7202510821174322, 0.7340453386550025, 0.7154553088914782, 0.41977316364454964, 0.45474078857264544, 0.44535927014370813, 0.3639061971863349, 0.45313334881716383, 0.47521150987043204, 0.4619120382934794, 0.43114354607415517, 0.46179442424061845, 0.1318538791312036, 0.14035098739759555, 0.12384580717620541, 0.12764414862947793, 0.13465728882341432, 0.1394637616890939, 0.1280138485291551, 0.14042310726917184, 0.12260065348189075, 0.10740682047097927, 0.11617412857132425, 0.09559749691336183, 0.12428630882850067, 0.10170403767207847, 0.09705089696735247, 0.08682387906126554, 0.09152136934926236, 0.11671173753280217, 0.9882584083575942, 0.9911188242435321, 0.9858333974417153, 0.9848446279458253, 0.9903649546160505, 0.9920563419497462, 0.984079250592115, 0.9889681923158736, 0.9889719694284025, 0.5002300832422938, 0.5068122496669101, 0.45610874761100684, 0.4772605561789607, 0.46093916235269317, 0.4809914583214904, 0.47731193875178624, 0.4863654905272199, 0.445799825886415, 0.7593945419663184, 0.7491923153471718, 0.7813863127187848, 0.7452344175216836, 0.7264473395563806, 0.7451533261695725, 0.7370141710816948, 0.7832614161904132, 0.736253838293194, 0.35712171245173463, 0.4021903602074087, 0.39509475732889043, 0.32968487971642757, 0.1252237904012099, 0.3353720044150723, 0.35885065355640144, 0.12246122226334832, 0.32430350857319623, 0.37154241131670374, 0.29242056786449233, 0.4034274068264353, 0.3294258214506204, 0.39027183908303265, 0.3752519316083398, 0.3486838544404084, 0.3003687675883232, 0.3700566918369905, 0.22346634926898912, 0.24758963930659028, 0.21067783942199259, 0.218182669300081, 0.1483592799718081, 0.3308076969623025, 0.23284596347302333, 0.28588955952614936, 0.08552391529419967, 0.385431756622141, 0.36638649474373, 0.38535918866217533, 0.41911240970797836, 0.26007688670842344, 0.30125792087469994, 0.38777028384144574, 0.3824964193413103, 0.3566289484446221, 0.1669779048047425, 0.08328186181947017, 0.06082038894234465, 0.20104235098233203, 0.16356607222910768, 0.12997590975439466, 0.13844038601877107, 0.14273848013884594, 0.19032890740989872, 0.2785290793608346, 0.25663147214504645, 0.2738042021018655, 0.26537815801479514, 0.29436935944626896, 0.26301475424114407, 0.2677000612692154, 0.2646632903635231, 0.2603842995037491, 0.6156196680729403, 0.6354405846213804, 0.6266534710995382, 0.6340417496917043, 0.6165064557014768, 0.6551254923771932, 0.5893294807261227, 0.6264805874152226, 0.644838749025374, 0.11203092101664536, 0.12863016095667157, 0.11865890830260761, 0.12580019678413523, 0.15036754573266953, 0.15250147605072562, 0.12613920092950648, 0.11554622366796408, 0.14707280073140538, 0.24420307247788475, 0.17505592128381853, 0.2621093240583644, 0.1299515985460855, 0.22718481262011714, 0.1652880518154588, 0.16219030355842357, 0.2469149517880469, 0.31218584329262467, 0.40613622232274516, 0.4548551030528366, 0.4150851518084745, 0.41409584294477053, 0.3927120522605422, 0.41602136632208964, 0.40860525981233276, 0.43332160148274357, 0.4346534618372123, 0.3004601775479482, 0.32805850420544835, 0.3101425089600782, 0.35770281184765085, 0.3389162838540647, 0.31559949287906, 0.3539818762544169, 0.350155103658091, 0.33257564944509443, 0.19615863698479985, 0.20635632558610184, 0.2111398153591506, 0.19546444596031065, 0.19994575208854293, 0.19334539571868636, 0.21316706680022257, 0.1871223875991953, 0.19756934469487974, 0.19465814232704803, 0.21372477871764417, 0.19326244009928373, 0.20846993849772455, 0.22213523895368914, 0.21408064386045444, 0.19265585170317356, 0.23655768565200308, 0.19858641144631206, 0.17048386359713952, 0.20479038452697662, 0.8009896913929443, 0.17340985496339012, 0.1855342004425391, 0.169281593600334, 0.19349549652721876, 0.1575560987486666, 0.8266679705960114, 0.20361274173349586, 0.16656800524584903, 0.16496524691716963, 0.16637648210650946, 0.2073315478518517, 0.7750566704164261, 0.20916557731958552, 0.7911437264761325, 0.7121474263969106, 0.18547478246749838, 0.1899234018277749, 0.1832850360385414, 0.1883590671790858, 0.18770952641156857, 0.16489010143821214, 0.19012902591020442, 0.1963730055784666, 0.18254301504293602, 0.10338124877905452, 0.08759515295313236, 0.08509923617736093, 0.08306109565581266, 0.10639922711924887, 0.07804591657126114, 0.08343154825546939, 0.07607283260819875, 0.09589899399248314]}, "mutation_prompt": null}
{"id": "d64ec0ba-f73b-407d-bdfe-765e1a537644", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(80, self.budget // 12)  # Adjusted population size\n        self.inertia = np.random.uniform(0.4, 0.9)  # Adaptive inertia weight\n        self.c1, self.c2 = 1.2, 1.8  # Adjusted cognitive and social coefficients\n        self.F = 0.7 + np.random.rand() * 0.3  # Dynamic scaling factor for mutation\n        self.CR = 0.8  # Adjusted crossover probability\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F\n            self.inertia = max(0.4, self.inertia - 0.01)\n            self.F = 0.6 + np.random.rand() * 0.4\n\n        return global_best, global_best_score", "name": "EnhancedHybridSwarmOptimizer", "description": "Enhanced hybrid swarm-based optimizer incorporating adaptive velocity control and dynamic differential evolution parameters for improved convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.7208315592957542, 0.7491287565569309, 0.7323552318058668, 0.7403134541431451, 0.7413304287103316, 0.738290740312081, 0.7222988983278784, 0.7377234581901118, 0.7422594705364337, 0.4870296447767619, 0.5069605457681263, 0.4908620985037222, 0.4766113494502241, 0.49165369864024744, 0.4914579919597032, 0.45322407245344043, 0.5017665138971856, 0.4432211901252838, 0.12803768699561702, 0.12726369249291036, 0.13751084473516695, 0.15158078894099014, 0.1411384147299981, 0.1347919494141957, 0.1319639660489964, 0.15432696571667948, 0.10954257259015066, 0.10815591404074965, 0.11812691824032995, 0.10121673414321375, 0.11401484670278628, 0.10291683156234666, 0.11073057246999285, 0.10246024363231632, 0.10001740673970838, 0.12154413032029499, 0.9865373249221993, 0.987462710873987, 0.9886700651301056, 0.9765829331226731, 0.981561907018887, 0.9874184519664047, 0.9866574773676288, 0.9850634640038474, 0.9825840835221077, 0.4513803066164265, 0.46553673462893264, 0.442506825091426, 0.48125616114859204, 0.5051927118206925, 0.4612982230655812, 0.47755649159840496, 0.5000960907248015, 0.46951659449103045, 0.2115537854578715, 0.7400356539686294, 0.7154525432822778, 0.7348725767924743, 0.7344698222644624, 0.7550772692893208, 0.7072140858690088, 0.7740623951723983, 0.764783132965529, 0.3573697419116524, 0.3580032739458302, 0.32728174001642374, 0.3860465370555577, 0.12230224285586211, 0.34619179034544867, 0.31822869073607396, 0.3432008349040927, 0.11961625695352018, 0.3896587058597346, 0.1949821199462296, 0.3951958574472446, 0.3458860835739813, 0.39801804288200815, 0.4015363459544412, 0.372269231278765, 0.39480479791577294, 0.3398716251367976, 0.20732864972534848, 0.18802451022078293, 0.19720749356399503, 0.21331932192348246, 0.03303478181097397, 0.1808530323152303, 0.28958105936787626, 0.29338263161120093, 0.03379699104268441, 0.3352582049856281, 0.2730005781440269, 0.24230921360288415, 0.3795173884586427, 0.21449147453687056, 0.29480219465665547, 0.2757949309590283, 0.3733015882992863, 0.3301793270716896, 0.06714683968290924, 0.058505235159466595, 0.05380289385084247, 0.21624899312146928, 0.12282247454379447, 0.08408813650485736, 0.1754603245750601, 0.06907999918070895, 0.20718843167683576, 0.24793309476370984, 0.22658291448419543, 0.241578205291065, 0.2406038448770519, 0.24427880696497217, 0.2444468164159419, 0.20500132286812967, 0.23330755654785051, 0.24724859361307094, 0.5876889817317654, 0.6039116924975777, 0.6011056769328336, 0.6008433505386258, 0.6046133369277924, 0.588779960330984, 0.6037458994936804, 0.6220038720644555, 0.5901457977698414, 0.10333223939896052, 0.09804618024477041, 0.13084101996913033, 0.1319673387518273, 0.08982296740954865, 0.1309852262423259, 0.09554627583113673, 0.13662952699208164, 0.14250162480551443, 0.17351729787651637, 0.1920521704734799, 0.4422407657972024, 0.25729990589864704, 0.20845826172858828, 0.2488135745974821, 0.5567046550195291, 0.20335993738273306, 0.42248162298279235, 0.4317232552542378, 0.43658721749870355, 0.39682189543557034, 0.4183855624853884, 0.4371998902496921, 0.4414400289614595, 0.41099053439537203, 0.46264950258232707, 0.45830055495220523, 0.3416955070521517, 0.26775781454835845, 0.2365999276407259, 0.3425321805512914, 0.33068223415357656, 0.34231073314859106, 0.32707712127706867, 0.3811308928202207, 0.34254760257588124, 0.21134866590379353, 0.22155842125453984, 0.20727663549286768, 0.1845096818167592, 0.19496232921407464, 0.20944824155451902, 0.195629843104426, 0.2152019563607228, 0.20339695828664994, 0.23623113995443357, 0.19954294850191479, 0.49663495798819224, 0.22857254670852856, 0.19122859257747682, 0.2258468568198353, 0.21034877806347285, 0.474542020604646, 0.19109044154153365, 0.14345782026720422, 0.16499404413226826, 0.15766571285347653, 0.17596637337131849, 0.6651006945476856, 0.16873109041678125, 0.7875549737391616, 0.7851544645982492, 0.16699133370113595, 0.2062868641894452, 0.7422862550958368, 0.7612876911373054, 0.16505126901903355, 0.20767638120399423, 0.6677673432950282, 0.16184668540889047, 0.7829740473536799, 0.7164863289681511, 0.199105408215964, 0.19428521093033946, 0.20008247265694468, 0.23456111448369843, 0.18014109478311324, 0.19292433666953468, 0.17883394710762768, 0.1949127935213344, 0.1953516998154632, 0.08461945005811611, 0.09225048200489983, 0.09260771116136579, 0.08831137752489127, 0.08143515940410873, 0.07971019530201717, 0.08469234694887551, 0.08616439679074595, 0.08812228179704595]}, "mutation_prompt": null}
{"id": "51094cca-13d4-4e79-adad-33f4256318ba", "solution": "import numpy as np\n\nclass SynergisticSwarmDifferentialOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(60, self.budget // 15)  # Adjusted population size\n        self.inertia = np.random.uniform(0.5, 0.9)  # Adaptive inertia weight\n        self.c1, self.c2 = 1.5, 1.5  # Balanced cognitive and social coefficients\n        self.F = 0.6 + np.random.rand() * 0.4  # Dynamic scaling factor for mutation\n        self.CR = 0.9  # Increased crossover probability for better exploration\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F\n            self.inertia = max(0.5, self.inertia - 0.01)\n            self.F = 0.5 + np.random.rand() * 0.5\n\n        return global_best, global_best_score", "name": "SynergisticSwarmDifferentialOptimizer", "description": "Synergistic optimization approach blending adaptive particle swarm dynamics with enhanced differential evolution for robust convergence.", "configspace": "", "generation": 82, "fitness": 0.3570353354554155, "feedback": "The algorithm SynergisticSwarmDifferentialOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.23.", "error": "", "parent_id": "4eab168d-7803-420e-9c09-2cdc57703923", "metadata": {"aucs": [0.7211554521641341, 0.6969432630298936, 0.6992068596058985, 0.7205718373158997, 0.7331249771649161, 0.7068027311546782, 0.6958442770264286, 0.7089034651098622, 0.7312545472664198, 0.42347157034535743, 0.4470357624647787, 0.4228183533397284, 0.434868154552812, 0.4261461625003553, 0.3899592747846473, 0.4646050428517766, 0.43721006365125437, 0.4781084078248431, 0.11397713804106169, 0.12916626584070823, 0.14053940859486014, 0.14027402044274218, 0.13275353643558796, 0.14267623889741698, 0.1428166276813625, 0.15136492163982707, 0.11570900022475927, 0.10403002337091216, 0.09692757071210434, 0.12234657091726209, 0.10158424140710398, 0.10531944504935031, 0.11592265704320903, 0.12843939365645196, 0.13700271029595457, 0.10189182076115944, 0.98817354005776, 0.9911203771251368, 0.985845775818038, 0.9860517086437028, 0.9903907934561507, 0.9920583227621592, 0.9841618805810266, 0.9889826338890773, 0.9880950616213772, 0.456669603711945, 0.47540134382679966, 0.4771192911672445, 0.4408657544670548, 0.4750266423596511, 0.45291070595589034, 0.4723332661845463, 0.47738639425305696, 0.4482387925677682, 0.7097137104268159, 0.7141167702578322, 0.7778522186617821, 0.7227284303565671, 0.7492790468225858, 0.7489584744746851, 0.7187258549577706, 0.7613474466505421, 0.77937757476895, 0.3477053814096336, 0.35591496907612385, 0.410267073663936, 0.33265513953848436, 0.38205715088387127, 0.32279495011519943, 0.4084431569726654, 0.4152074994847078, 0.4443734437233027, 0.37732415782385076, 0.3490726358129683, 0.364473302069641, 0.35823643194650956, 0.36656125789931315, 0.29690616816202764, 0.2971754061190819, 0.34931260333440306, 0.38946651909225594, 0.21642859592577424, 0.24581622270012649, 0.22443848387545728, 0.35023558575029246, 0.15790658453828854, 0.15550017318878873, 0.31390161661335036, 0.29581758695256755, 0.32530837470503704, 0.37828596909455947, 0.38385109489679103, 0.3883124297094175, 0.3311330468303586, 0.3661410467569861, 0.4109597731474822, 0.3620729988877288, 0.39884790852583496, 0.31100973789930086, 0.04421911760633779, 0.18836371013330389, 0.05588593414211662, 0.13140521737763267, 0.16605168245676472, 0.18055568929057064, 0.2080693127150457, 0.117981957995558, 0.06692836186040607, 0.2574188395435535, 0.25028091346006653, 0.24800616137787035, 0.2521115672980575, 0.27715725001005265, 0.2838184702344865, 0.27453070589743145, 0.23057413665194482, 0.2597994901205105, 0.6188192191845342, 0.5880034804796903, 0.590904534548435, 0.5913643742412887, 0.6153532285760259, 0.6245443927069247, 0.5797652926868628, 0.6319709694763667, 0.6150096295570727, 0.11244286013893579, 0.12070599934485238, 0.11067233314744573, 0.1390673229902457, 0.3477206310933404, 0.1220136113705832, 0.1372528140507837, 0.13161038132226477, 0.11189780656317994, 0.2795431208462822, 0.46828064703144023, 0.13845993270706836, 0.339976233720062, 0.2476952816437703, 0.1993905630148356, 0.23550876722211456, 0.27628244996812756, 0.16417077599591012, 0.3911515593889874, 0.37927870767037986, 0.4025616155850904, 0.3973204900227706, 0.38830438386163957, 0.43052895977371575, 0.40659956082516846, 0.43219147720770223, 0.441347587577266, 0.3138554774560456, 0.3217214620832788, 0.23695175298599547, 0.3219464705748122, 0.3090107353748316, 0.334406524520535, 0.3332474275093895, 0.334865318026735, 0.3246518793245424, 0.21548426116443697, 0.19206272851166983, 0.22602445681142913, 0.1971972442271308, 0.19245254925551547, 0.20022765562578038, 0.2058873980259932, 0.21810024063430633, 0.23180819797889363, 0.2138482647904867, 0.23856441427873565, 0.19566938551852997, 0.2344823957494011, 0.19462184230765311, 0.20890928894176508, 0.453330464490185, 0.21049760514984472, 0.34234993456035856, 0.15015713232228223, 0.20631033429857448, 0.20700662806407677, 0.7297415688459101, 0.18491053322907558, 0.1694468582173133, 0.19359357851565484, 0.1936048805817927, 0.7964515338379855, 0.20344010466914608, 0.20519313999531164, 0.20084755647803398, 0.16306119338971836, 0.2066728523981125, 0.7306975452307485, 0.7574802788741322, 0.7563063781487852, 0.7448102657388891, 0.2030728652018009, 0.17427655812810228, 0.17967158466149125, 0.18088814708560252, 0.19691687334820407, 0.18378225433218864, 0.20085105823902927, 0.18595077106867153, 0.2235759628102042, 0.10382545643923691, 0.07966297472312889, 0.08423028112732622, 0.0864258553888898, 0.07949767873270741, 0.0965567596998631, 0.0867388574030925, 0.08767495181850937, 0.08563862961746294]}, "mutation_prompt": null}
{"id": "4eb4f27d-62f1-4395-a875-38f17e2a4952", "solution": "import numpy as np\n\nclass SynergisticSwarmDifferentialOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(60, self.budget // 20)  # Adjusted population size for broader exploration\n        self.inertia = np.random.uniform(0.6, 1.0)  # Adaptive inertia weight for chaotic dynamics\n        self.c1, self.c2 = 1.2, 1.7  # Tweaked cognitive and social coefficients for better balance\n        self.F = 0.5 + np.random.rand() * 0.5  # Broader range for scaling factor to enhance mutation\n        self.CR = 0.8  # Adjusted crossover probability for diversity\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F with chaotic modulation\n            self.inertia = max(0.4, self.inertia * 0.99)\n            self.F = 0.4 + np.random.rand() * 0.6\n\n        return global_best, global_best_score", "name": "SynergisticSwarmDifferentialOptimizer", "description": "Hybrid adaptive optimization algorithm combining chaotic particle swarm dynamics with tuned differential evolution for enhanced robustness and adaptability.", "configspace": "", "generation": 83, "fitness": 0.37316666823671923, "feedback": "The algorithm SynergisticSwarmDifferentialOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "51094cca-13d4-4e79-adad-33f4256318ba", "metadata": {"aucs": [0.7306037113104092, 0.7618929686535548, 0.741136312826254, 0.7617914571162699, 0.7766710120482248, 0.7708028857085787, 0.7399152189010214, 0.7724526471001703, 0.7591403034066864, 0.5738679584030271, 0.5790966918543823, 0.495142913404914, 0.4655112322224857, 0.5220011393703503, 0.5850255187440799, 0.5489211318279394, 0.591399908550521, 0.5694794884556146, 0.0917860688651192, 0.1317732041190609, 0.15315444285363933, 0.12471972266054221, 0.16885787578890066, 0.12694530246819613, 0.12089153229454008, 0.13396329479502378, 0.4856988832597655, 0.10135566045312461, 0.10272349931884783, 0.1525774095266108, 0.09553500779321289, 0.14220819925797845, 0.12731162371126903, 0.1217117005590379, 0.12340339137606682, 0.09706097350014575, 0.9891560740641634, 0.990937940769773, 0.987786612289828, 0.9892694044611345, 0.9919728907914145, 0.9930763813554498, 0.9825930193557958, 0.9919746237692817, 0.9840678313919412, 0.5660714867468808, 0.5819850927921961, 0.5714497938850885, 0.5614421844000306, 0.5807755319280717, 0.53129836746785, 0.5448511576672904, 0.585385690188799, 0.5594620566080228, 0.7422481418611402, 0.21748535545246805, 0.7351309057852661, 0.7624410516315849, 0.7775474270719154, 0.7366746981114666, 0.7453872533615955, 0.7744252594590508, 0.23103233813146906, 0.37257157903520643, 0.5405013611705796, 0.11388374138387825, 0.4099964772987088, 0.5137851293774032, 0.12199867948842169, 0.43295974331848996, 0.45186867269064446, 0.1155804966250995, 0.4439607095894704, 0.4437067312035884, 0.47039020464987913, 0.4248037396407842, 0.46510993522046884, 0.4847548296554197, 0.4643401168769832, 0.5080532491467191, 0.4347424718338725, 0.2896604095113615, 0.21790903462639977, 0.3710805319941639, 0.3148386532874934, 0.06470671616658386, 0.1853915689307427, 0.0040106950568313815, 0.09673401765531531, 0.40131775110899726, 0.43847024987074557, 0.4020661114106293, 0.23471189432632467, 0.24520485145315984, 0.21640577460613508, 0.4578861186177965, 0.3913480273691271, 0.4658750358818, 0.5156835339478247, 0.05335468437556501, 0.14958861957141611, 0.062304076914986406, 0.19017615901757512, 0.10657806450194274, 0.12454094133423277, 0.14672513031242884, 0.13404287505140022, 0.09253326369263082, 0.2656144245568819, 0.27776674982621563, 0.29521086564285104, 0.2947836124207929, 0.33293160826662194, 0.3397866428120868, 0.24987999285046802, 0.2725049513075569, 0.20295275685406344, 0.6452218653764978, 0.6653371786027751, 0.6515553975118907, 0.6453061551498176, 0.6696795314097111, 0.6704685806783784, 0.6489444230050536, 0.6701173302890103, 0.6580670148231054, 0.12788277601537978, 0.1560474595399426, 0.12166815772200767, 0.09924556816546681, 0.16113420707320258, 0.10892257749465095, 0.10626944728781196, 0.16680617551487542, 0.1487286686759317, 0.19438564132145453, 0.3609622768123171, 0.3851346283881738, 0.13937545492136738, 0.21812022711558443, 0.23554115199079417, 0.2986440610441804, 0.2384119224027147, 0.14753344418218728, 0.47688583745706237, 0.4021470236025466, 0.2975174737050741, 0.44997309489365467, 0.5206396439178127, 0.41310965348545325, 0.5029666168109228, 0.49861408725866163, 0.5241476086454471, 0.3256888611321418, 0.2797270492184952, 0.23997873480258924, 0.35332295016250137, 0.34534490219723446, 0.2941309190536401, 0.38629307869100216, 0.40849097633613896, 0.3780816724279612, 0.24405469550436254, 0.2103921312040714, 0.21656610593974723, 0.21001389992462138, 0.1910000538832205, 0.19577847711513396, 0.20387989682193242, 0.20429723285397117, 0.20434339148351133, 0.18258334194088444, 0.21485972125188557, 0.18256795458466546, 0.21602766615607183, 0.21455814069728618, 0.20465043616238532, 0.1951460294213826, 0.6069425710621663, 0.20762643575998307, 0.13871685140638546, 0.2074103783299509, 0.8338010153402009, 0.8054094228629463, 0.1636239827746684, 0.16959651601793557, 0.16481677463548527, 0.16160053853491407, 0.8072644067102641, 0.11096106040978648, 0.16533982846071393, 0.7745127483546046, 0.16579473103972342, 0.766150051564323, 0.7836255836212453, 0.16431481152254057, 0.7936376188665047, 0.1276308759736181, 0.1791874373122384, 0.1786186394839051, 0.18335871706566653, 0.1974320904561475, 0.20675379951852668, 0.22476609587990193, 0.18403149146554865, 0.18932476244614316, 0.19758731427031384, 0.0880005289612118, 0.10514918195452194, 0.08141693586859633, 0.09838004648881049, 0.08812367054901626, 0.11578091836296767, 0.08747806855274287, 0.08866402712661181, 0.09383660222147006]}, "mutation_prompt": null}
{"id": "587a930f-bc6c-46a9-b24e-c52681362380", "solution": "import numpy as np\n\nclass SynergisticSwarmDifferentialOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(60, self.budget // 20)  # Adjusted population size for broader exploration\n        self.inertia = np.random.uniform(0.6, 1.0)  # Adaptive inertia weight for chaotic dynamics\n        self.c1, self.c2 = 1.2, 1.7  # Tweaked cognitive and social coefficients for better balance\n        self.F = 0.5 + np.random.rand() * 0.5  # Broader range for scaling factor to enhance mutation\n        self.CR = 0.8  # Adjusted crossover probability for diversity\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F with chaotic modulation\n            self.inertia = max(0.4, self.inertia * 0.99)\n            self.F = 0.4 + np.random.rand() * 0.6\n\n        return global_best, global_best_score", "name": "SynergisticSwarmDifferentialOptimizer", "description": "Hybrid adaptive optimization algorithm combining chaotic particle swarm dynamics with tuned differential evolution for enhanced robustness and adaptability.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb4f27d-62f1-4395-a875-38f17e2a4952", "metadata": {"aucs": [0.7306037113104092, 0.7618929686535548, 0.741136312826254, 0.7617914571162699, 0.7766710120482248, 0.7708028857085787, 0.7399152189010214, 0.7724526471001703, 0.7591403034066864, 0.5738679584030271, 0.5790966918543823, 0.495142913404914, 0.4655112322224857, 0.5220011393703503, 0.5850255187440799, 0.5489211318279394, 0.591399908550521, 0.5694794884556146, 0.0917860688651192, 0.1317732041190609, 0.15315444285363933, 0.12471972266054221, 0.16885787578890066, 0.12694530246819613, 0.12089153229454008, 0.13396329479502378, 0.4856988832597655, 0.10135566045312461, 0.10272349931884783, 0.1525774095266108, 0.09553500779321289, 0.14220819925797845, 0.12731162371126903, 0.1217117005590379, 0.12340339137606682, 0.09706097350014575, 0.9891560740641634, 0.990937940769773, 0.987786612289828, 0.9892694044611345, 0.9919728907914145, 0.9930763813554498, 0.9825930193557958, 0.9919746237692817, 0.9840678313919412, 0.5660714867468808, 0.5819850927921961, 0.5714497938850885, 0.5614421844000306, 0.5807755319280717, 0.53129836746785, 0.5448511576672904, 0.585385690188799, 0.5594620566080228, 0.7422481418611402, 0.21748535545246805, 0.7351309057852661, 0.7624410516315849, 0.7775474270719154, 0.7366746981114666, 0.7453872533615955, 0.7744252594590508, 0.23103233813146906, 0.37257157903520643, 0.5405013611705796, 0.11388374138387825, 0.4099964772987088, 0.5137851293774032, 0.12199867948842169, 0.43295974331848996, 0.45186867269064446, 0.1155804966250995, 0.4439607095894704, 0.4437067312035884, 0.47039020464987913, 0.4248037396407842, 0.46510993522046884, 0.4847548296554197, 0.4643401168769832, 0.5080532491467191, 0.4347424718338725, 0.2896604095113615, 0.21790903462639977, 0.3710805319941639, 0.3148386532874934, 0.06470671616658386, 0.1853915689307427, 0.0040106950568313815, 0.09673401765531531, 0.40131775110899726, 0.43847024987074557, 0.4020661114106293, 0.23471189432632467, 0.24520485145315984, 0.21640577460613508, 0.4578861186177965, 0.3913480273691271, 0.4658750358818, 0.5156835339478247, 0.05335468437556501, 0.14958861957141611, 0.062304076914986406, 0.19017615901757512, 0.10657806450194274, 0.12454094133423277, 0.14672513031242884, 0.13404287505140022, 0.09253326369263082, 0.2656144245568819, 0.27776674982621563, 0.29521086564285104, 0.2947836124207929, 0.33293160826662194, 0.3397866428120868, 0.24987999285046802, 0.2725049513075569, 0.20295275685406344, 0.6452218653764978, 0.6653371786027751, 0.6515553975118907, 0.6453061551498176, 0.6696795314097111, 0.6704685806783784, 0.6489444230050536, 0.6701173302890103, 0.6580670148231054, 0.12788277601537978, 0.1560474595399426, 0.12166815772200767, 0.09924556816546681, 0.16113420707320258, 0.10892257749465095, 0.10626944728781196, 0.16680617551487542, 0.1487286686759317, 0.19438564132145453, 0.3609622768123171, 0.3851346283881738, 0.13937545492136738, 0.21812022711558443, 0.23554115199079417, 0.2986440610441804, 0.2384119224027147, 0.14753344418218728, 0.47688583745706237, 0.4021470236025466, 0.2975174737050741, 0.44997309489365467, 0.5206396439178127, 0.41310965348545325, 0.5029666168109228, 0.49861408725866163, 0.5241476086454471, 0.3256888611321418, 0.2797270492184952, 0.23997873480258924, 0.35332295016250137, 0.34534490219723446, 0.2941309190536401, 0.38629307869100216, 0.40849097633613896, 0.3780816724279612, 0.24405469550436254, 0.2103921312040714, 0.21656610593974723, 0.21001389992462138, 0.1910000538832205, 0.19577847711513396, 0.20387989682193242, 0.20429723285397117, 0.20434339148351133, 0.18258334194088444, 0.21485972125188557, 0.18256795458466546, 0.21602766615607183, 0.21455814069728618, 0.20465043616238532, 0.1951460294213826, 0.6069425710621663, 0.20762643575998307, 0.13871685140638546, 0.2074103783299509, 0.8338010153402009, 0.8054094228629463, 0.1636239827746684, 0.16959651601793557, 0.16481677463548527, 0.16160053853491407, 0.8072644067102641, 0.11096106040978648, 0.16533982846071393, 0.7745127483546046, 0.16579473103972342, 0.766150051564323, 0.7836255836212453, 0.16431481152254057, 0.7936376188665047, 0.1276308759736181, 0.1791874373122384, 0.1786186394839051, 0.18335871706566653, 0.1974320904561475, 0.20675379951852668, 0.22476609587990193, 0.18403149146554865, 0.18932476244614316, 0.19758731427031384, 0.0880005289612118, 0.10514918195452194, 0.08141693586859633, 0.09838004648881049, 0.08812367054901626, 0.11578091836296767, 0.08747806855274287, 0.08866402712661181, 0.09383660222147006]}, "mutation_prompt": null}
{"id": "13cf2ed0-a4de-4f18-9424-52766e2a831f", "solution": "import numpy as np\n\nclass SynergisticSwarmDifferentialOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(60, self.budget // 20)  # Adjusted population size for broader exploration\n        self.inertia = np.random.uniform(0.6, 1.0)  # Adaptive inertia weight for chaotic dynamics\n        self.c1, self.c2 = 1.2, 1.7  # Tweaked cognitive and social coefficients for better balance\n        self.F = 0.5 + np.random.rand() * 0.5  # Broader range for scaling factor to enhance mutation\n        self.CR = 0.8  # Adjusted crossover probability for diversity\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F with chaotic modulation\n            self.inertia = max(0.4, self.inertia * 0.99)\n            self.F = 0.4 + np.random.rand() * 0.6\n\n        return global_best, global_best_score", "name": "SynergisticSwarmDifferentialOptimizer", "description": "Hybrid adaptive optimization algorithm combining chaotic particle swarm dynamics with tuned differential evolution for enhanced robustness and adaptability.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb4f27d-62f1-4395-a875-38f17e2a4952", "metadata": {"aucs": [0.7306037113104092, 0.7618929686535548, 0.741136312826254, 0.7617914571162699, 0.7766710120482248, 0.7708028857085787, 0.7399152189010214, 0.7724526471001703, 0.7591403034066864, 0.5738679584030271, 0.5790966918543823, 0.495142913404914, 0.4655112322224857, 0.5220011393703503, 0.5850255187440799, 0.5489211318279394, 0.591399908550521, 0.5694794884556146, 0.0917860688651192, 0.1317732041190609, 0.15315444285363933, 0.12471972266054221, 0.16885787578890066, 0.12694530246819613, 0.12089153229454008, 0.13396329479502378, 0.4856988832597655, 0.10135566045312461, 0.10272349931884783, 0.1525774095266108, 0.09553500779321289, 0.14220819925797845, 0.12731162371126903, 0.1217117005590379, 0.12340339137606682, 0.09706097350014575, 0.9891560740641634, 0.990937940769773, 0.987786612289828, 0.9892694044611345, 0.9919728907914145, 0.9930763813554498, 0.9825930193557958, 0.9919746237692817, 0.9840678313919412, 0.5660714867468808, 0.5819850927921961, 0.5714497938850885, 0.5614421844000306, 0.5807755319280717, 0.53129836746785, 0.5448511576672904, 0.585385690188799, 0.5594620566080228, 0.7422481418611402, 0.21748535545246805, 0.7351309057852661, 0.7624410516315849, 0.7775474270719154, 0.7366746981114666, 0.7453872533615955, 0.7744252594590508, 0.23103233813146906, 0.37257157903520643, 0.5405013611705796, 0.11388374138387825, 0.4099964772987088, 0.5137851293774032, 0.12199867948842169, 0.43295974331848996, 0.45186867269064446, 0.1155804966250995, 0.4439607095894704, 0.4437067312035884, 0.47039020464987913, 0.4248037396407842, 0.46510993522046884, 0.4847548296554197, 0.4643401168769832, 0.5080532491467191, 0.4347424718338725, 0.2896604095113615, 0.21790903462639977, 0.3710805319941639, 0.3148386532874934, 0.06470671616658386, 0.1853915689307427, 0.0040106950568313815, 0.09673401765531531, 0.40131775110899726, 0.43847024987074557, 0.4020661114106293, 0.23471189432632467, 0.24520485145315984, 0.21640577460613508, 0.4578861186177965, 0.3913480273691271, 0.4658750358818, 0.5156835339478247, 0.05335468437556501, 0.14958861957141611, 0.062304076914986406, 0.19017615901757512, 0.10657806450194274, 0.12454094133423277, 0.14672513031242884, 0.13404287505140022, 0.09253326369263082, 0.2656144245568819, 0.27776674982621563, 0.29521086564285104, 0.2947836124207929, 0.33293160826662194, 0.3397866428120868, 0.24987999285046802, 0.2725049513075569, 0.20295275685406344, 0.6452218653764978, 0.6653371786027751, 0.6515553975118907, 0.6453061551498176, 0.6696795314097111, 0.6704685806783784, 0.6489444230050536, 0.6701173302890103, 0.6580670148231054, 0.12788277601537978, 0.1560474595399426, 0.12166815772200767, 0.09924556816546681, 0.16113420707320258, 0.10892257749465095, 0.10626944728781196, 0.16680617551487542, 0.1487286686759317, 0.19438564132145453, 0.3609622768123171, 0.3851346283881738, 0.13937545492136738, 0.21812022711558443, 0.23554115199079417, 0.2986440610441804, 0.2384119224027147, 0.14753344418218728, 0.47688583745706237, 0.4021470236025466, 0.2975174737050741, 0.44997309489365467, 0.5206396439178127, 0.41310965348545325, 0.5029666168109228, 0.49861408725866163, 0.5241476086454471, 0.3256888611321418, 0.2797270492184952, 0.23997873480258924, 0.35332295016250137, 0.34534490219723446, 0.2941309190536401, 0.38629307869100216, 0.40849097633613896, 0.3780816724279612, 0.24405469550436254, 0.2103921312040714, 0.21656610593974723, 0.21001389992462138, 0.1910000538832205, 0.19577847711513396, 0.20387989682193242, 0.20429723285397117, 0.20434339148351133, 0.18258334194088444, 0.21485972125188557, 0.18256795458466546, 0.21602766615607183, 0.21455814069728618, 0.20465043616238532, 0.1951460294213826, 0.6069425710621663, 0.20762643575998307, 0.13871685140638546, 0.2074103783299509, 0.8338010153402009, 0.8054094228629463, 0.1636239827746684, 0.16959651601793557, 0.16481677463548527, 0.16160053853491407, 0.8072644067102641, 0.11096106040978648, 0.16533982846071393, 0.7745127483546046, 0.16579473103972342, 0.766150051564323, 0.7836255836212453, 0.16431481152254057, 0.7936376188665047, 0.1276308759736181, 0.1791874373122384, 0.1786186394839051, 0.18335871706566653, 0.1974320904561475, 0.20675379951852668, 0.22476609587990193, 0.18403149146554865, 0.18932476244614316, 0.19758731427031384, 0.0880005289612118, 0.10514918195452194, 0.08141693586859633, 0.09838004648881049, 0.08812367054901626, 0.11578091836296767, 0.08747806855274287, 0.08866402712661181, 0.09383660222147006]}, "mutation_prompt": null}
{"id": "a43013af-b553-4eca-b755-d49e86c97167", "solution": "import numpy as np\n\nclass SynergisticSwarmDifferentialOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(60, self.budget // 20)  # Adjusted population size for broader exploration\n        self.inertia = np.random.uniform(0.6, 1.0)  # Adaptive inertia weight for chaotic dynamics\n        self.c1, self.c2 = 1.2, 1.7  # Tweaked cognitive and social coefficients for better balance\n        self.F = 0.5 + np.random.rand() * 0.5  # Broader range for scaling factor to enhance mutation\n        self.CR = 0.8  # Adjusted crossover probability for diversity\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                # Differential Evolution Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic adjustment of inertia and F with chaotic modulation\n            self.inertia = max(0.4, self.inertia * 0.99)\n            self.F = 0.4 + np.random.rand() * 0.6\n\n        return global_best, global_best_score", "name": "SynergisticSwarmDifferentialOptimizer", "description": "Hybrid adaptive optimization algorithm combining chaotic particle swarm dynamics with tuned differential evolution for enhanced robustness and adaptability.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4eb4f27d-62f1-4395-a875-38f17e2a4952", "metadata": {"aucs": [0.7306037113104092, 0.7618929686535548, 0.741136312826254, 0.7617914571162699, 0.7766710120482248, 0.7708028857085787, 0.7399152189010214, 0.7724526471001703, 0.7591403034066864, 0.5738679584030271, 0.5790966918543823, 0.495142913404914, 0.4655112322224857, 0.5220011393703503, 0.5850255187440799, 0.5489211318279394, 0.591399908550521, 0.5694794884556146, 0.0917860688651192, 0.1317732041190609, 0.15315444285363933, 0.12471972266054221, 0.16885787578890066, 0.12694530246819613, 0.12089153229454008, 0.13396329479502378, 0.4856988832597655, 0.10135566045312461, 0.10272349931884783, 0.1525774095266108, 0.09553500779321289, 0.14220819925797845, 0.12731162371126903, 0.1217117005590379, 0.12340339137606682, 0.09706097350014575, 0.9891560740641634, 0.990937940769773, 0.987786612289828, 0.9892694044611345, 0.9919728907914145, 0.9930763813554498, 0.9825930193557958, 0.9919746237692817, 0.9840678313919412, 0.5660714867468808, 0.5819850927921961, 0.5714497938850885, 0.5614421844000306, 0.5807755319280717, 0.53129836746785, 0.5448511576672904, 0.585385690188799, 0.5594620566080228, 0.7422481418611402, 0.21748535545246805, 0.7351309057852661, 0.7624410516315849, 0.7775474270719154, 0.7366746981114666, 0.7453872533615955, 0.7744252594590508, 0.23103233813146906, 0.37257157903520643, 0.5405013611705796, 0.11388374138387825, 0.4099964772987088, 0.5137851293774032, 0.12199867948842169, 0.43295974331848996, 0.45186867269064446, 0.1155804966250995, 0.4439607095894704, 0.4437067312035884, 0.47039020464987913, 0.4248037396407842, 0.46510993522046884, 0.4847548296554197, 0.4643401168769832, 0.5080532491467191, 0.4347424718338725, 0.2896604095113615, 0.21790903462639977, 0.3710805319941639, 0.3148386532874934, 0.06470671616658386, 0.1853915689307427, 0.0040106950568313815, 0.09673401765531531, 0.40131775110899726, 0.43847024987074557, 0.4020661114106293, 0.23471189432632467, 0.24520485145315984, 0.21640577460613508, 0.4578861186177965, 0.3913480273691271, 0.4658750358818, 0.5156835339478247, 0.05335468437556501, 0.14958861957141611, 0.062304076914986406, 0.19017615901757512, 0.10657806450194274, 0.12454094133423277, 0.14672513031242884, 0.13404287505140022, 0.09253326369263082, 0.2656144245568819, 0.27776674982621563, 0.29521086564285104, 0.2947836124207929, 0.33293160826662194, 0.3397866428120868, 0.24987999285046802, 0.2725049513075569, 0.20295275685406344, 0.6452218653764978, 0.6653371786027751, 0.6515553975118907, 0.6453061551498176, 0.6696795314097111, 0.6704685806783784, 0.6489444230050536, 0.6701173302890103, 0.6580670148231054, 0.12788277601537978, 0.1560474595399426, 0.12166815772200767, 0.09924556816546681, 0.16113420707320258, 0.10892257749465095, 0.10626944728781196, 0.16680617551487542, 0.1487286686759317, 0.19438564132145453, 0.3609622768123171, 0.3851346283881738, 0.13937545492136738, 0.21812022711558443, 0.23554115199079417, 0.2986440610441804, 0.2384119224027147, 0.14753344418218728, 0.47688583745706237, 0.4021470236025466, 0.2975174737050741, 0.44997309489365467, 0.5206396439178127, 0.41310965348545325, 0.5029666168109228, 0.49861408725866163, 0.5241476086454471, 0.3256888611321418, 0.2797270492184952, 0.23997873480258924, 0.35332295016250137, 0.34534490219723446, 0.2941309190536401, 0.38629307869100216, 0.40849097633613896, 0.3780816724279612, 0.24405469550436254, 0.2103921312040714, 0.21656610593974723, 0.21001389992462138, 0.1910000538832205, 0.19577847711513396, 0.20387989682193242, 0.20429723285397117, 0.20434339148351133, 0.18258334194088444, 0.21485972125188557, 0.18256795458466546, 0.21602766615607183, 0.21455814069728618, 0.20465043616238532, 0.1951460294213826, 0.6069425710621663, 0.20762643575998307, 0.13871685140638546, 0.2074103783299509, 0.8338010153402009, 0.8054094228629463, 0.1636239827746684, 0.16959651601793557, 0.16481677463548527, 0.16160053853491407, 0.8072644067102641, 0.11096106040978648, 0.16533982846071393, 0.7745127483546046, 0.16579473103972342, 0.766150051564323, 0.7836255836212453, 0.16431481152254057, 0.7936376188665047, 0.1276308759736181, 0.1791874373122384, 0.1786186394839051, 0.18335871706566653, 0.1974320904561475, 0.20675379951852668, 0.22476609587990193, 0.18403149146554865, 0.18932476244614316, 0.19758731427031384, 0.0880005289612118, 0.10514918195452194, 0.08141693586859633, 0.09838004648881049, 0.08812367054901626, 0.11578091836296767, 0.08747806855274287, 0.08866402712661181, 0.09383660222147006]}, "mutation_prompt": null}
{"id": "76fe9842-89fa-4347-91ae-1032a3bdcd99", "solution": "import numpy as np\n\nclass ChaoticHarmonyEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(60, self.budget // 20)\n        self.inertia = np.random.uniform(0.5, 1.2)\n        self.c1, self.c2 = 1.3, 1.6\n        self.F = 0.4 + np.random.rand() * 0.6\n        self.CR = 0.85\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.6, 0.6, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.3, self.inertia * 0.97)\n            self.F = 0.3 + np.random.rand() * 0.7\n\n        return global_best, global_best_score", "name": "ChaoticHarmonyEvolutionaryOptimizer", "description": "Chaotic harmony evolutionary algorithm synergizing adaptive swarm dynamics with dynamic differential strategies for diverse exploration and convergence.", "configspace": "", "generation": 87, "fitness": 0.4197033605289929, "feedback": "The algorithm ChaoticHarmonyEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "4eb4f27d-62f1-4395-a875-38f17e2a4952", "metadata": {"aucs": [0.8139688652221723, 0.8148324262202522, 0.8105888925094678, 0.8127881849985823, 0.8084114670416541, 0.814511735509941, 0.8034679509555896, 0.804438378603608, 0.8086809437819981, 0.6549728998114996, 0.6445783855407184, 0.6253336897769456, 0.5940718776211695, 0.6538028585860971, 0.6243687028613288, 0.6592501113101625, 0.6655451622480166, 0.6415610465513886, 0.1251012734466561, 0.17099825487669928, 0.17274556964834809, 0.11291587861993635, 0.12289156437868753, 0.14471730873315414, 0.119518187543037, 0.16513836287770445, 0.14964890698521305, 0.12869276832549315, 0.11472613252394293, 0.0993384146482369, 0.10724255060748766, 0.1323151187711905, 0.1420850405966395, 0.12913592452140077, 0.12310205548484554, 0.11850691625397192, 0.9870998406636305, 0.9868634111506139, 0.989154777114257, 0.9865777858034502, 0.9905492723056399, 0.9930724126976869, 0.9884765164077111, 0.9860758202547473, 0.9860667066652465, 0.6520361288827907, 0.6188686760283781, 0.622784557182084, 0.6405227153339594, 0.6449360929301098, 0.6493785849616628, 0.6481433950472704, 0.645677245800373, 0.66716799737669, 0.3606749148556476, 0.8087189927653224, 0.8062720134745524, 0.7929163084111579, 0.16037086410251045, 0.8349896907718077, 0.8115233970444126, 0.824408647085993, 0.23181427617328276, 0.59717997019218, 0.5254742853971863, 0.5991389180036635, 0.5591169556045839, 0.4478037921230289, 0.4909286569512119, 0.4840863351336867, 0.528721692359273, 0.6406589683143865, 0.45818783345745884, 0.5767355766261526, 0.12419480575211861, 0.5547157913130661, 0.12850448974544648, 0.5614008570993063, 0.5498387377918477, 0.5902986047720526, 0.4767563013999484, 0.19736526668687615, 0.43950024615092376, 0.3880832296063649, 0.5159911526220785, 0.2632676808868293, 0.46943637653401316, 0.5288171192589399, 0.49603105747498855, 0.509371462630435, 0.5718844269354832, 0.5524524970907794, 0.6015404746682358, 0.5753535288761982, 0.5769097256155573, 0.5358474607578976, 0.6006722844249368, 0.5651035539293889, 0.6064423983671636, 0.29983959568180163, 0.08437202700759372, 0.11779185520582991, 0.302730376054444, 0.32632460557552745, 0.14031499357182642, 0.20764597017212705, 0.11818600943464175, 0.10892539716885363, 0.37504140784507134, 0.41310911334717015, 0.3983730326204591, 0.4158407516351921, 0.4140757111614035, 0.4101354004856482, 0.36971905250297554, 0.4105164956151388, 0.31419575810846856, 0.762690845539195, 0.7336934474435971, 0.7453334027594747, 0.7293300564398029, 0.7540795374311148, 0.747804933868413, 0.7239630188371979, 0.748402840920916, 0.7509756148906584, 0.12299230005285622, 0.11046143133328512, 0.14531970594344434, 0.08671099761236456, 0.13122972138018418, 0.12772631905458443, 0.14372144317031366, 0.13042407447571291, 0.11720879750862423, 0.1428712507374832, 0.25981256885098614, 0.5406330459252982, 0.593358868085383, 0.2686379945663302, 0.6451417715780832, 0.15994951464519724, 0.2635972752405201, 0.19543626275274972, 0.5962982321645974, 0.5345452375936937, 0.5344792779480325, 0.5900133782638735, 0.5808000601315322, 0.5550407696717259, 0.5912026325027098, 0.596241621543113, 0.5101429415034352, 0.3267172469180738, 0.2530257163570445, 0.22749461267119142, 0.48738656901797506, 0.4465206926513603, 0.5007451693460472, 0.20513239840149478, 0.4009847838130931, 0.2891895075548948, 0.21316567900400207, 0.20564006972353654, 0.19684063044565137, 0.19318882054017683, 0.22101854268602117, 0.2041909907614674, 0.24487544068735823, 0.23471470916926918, 0.18847762904501042, 0.20192049861702022, 0.21816083587631718, 0.20232578583213112, 0.20845590384848933, 0.24214002331584839, 0.2050596553846301, 0.2134699912560304, 0.2126441998988745, 0.2143431588285768, 0.14558163442367933, 0.1846351652996937, 0.18226701068206663, 0.8332291450521543, 0.18648256495136772, 0.16838429699621882, 0.1661685165351271, 0.13070275548542543, 0.16867763952944226, 0.8039963593134414, 0.20526354034043592, 0.8429724769584417, 0.11219477407455758, 0.20773653961053284, 0.8032429202426492, 0.2091708073735541, 0.839539893167666, 0.12782280109602218, 0.17783169089592976, 0.21624165326856226, 0.19322247271653892, 0.1826612774364016, 0.18387183663007955, 0.17989326245345505, 0.1966088378152655, 0.18975269625358582, 0.18938894251641436, 0.0978263711313141, 0.08542899647770175, 0.09306547985432168, 0.08920176437338634, 0.09091722586732409, 0.12125686602348285, 0.07684720437845227, 0.09143253357242942, 0.09022255041518967]}, "mutation_prompt": null}
{"id": "430f240f-bc1f-4010-ab04-4eb3b69dbfee", "solution": "import numpy as np\n\nclass ChaoticHarmonyEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(60, self.budget // 20)\n        self.inertia = np.random.uniform(0.5, 1.2)\n        self.c1, self.c2 = 1.3, 1.6\n        self.F = 0.4 + np.random.rand() * 0.6\n        self.CR = 0.85\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.6, 0.6, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.3, self.inertia * 0.97)\n            self.F = 0.3 + np.random.rand() * 0.7\n\n        return global_best, global_best_score", "name": "ChaoticHarmonyEvolutionaryOptimizer", "description": "Chaotic harmony evolutionary algorithm synergizing adaptive swarm dynamics with dynamic differential strategies for diverse exploration and convergence.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "76fe9842-89fa-4347-91ae-1032a3bdcd99", "metadata": {"aucs": [0.8139688652221723, 0.8148324262202522, 0.8105888925094678, 0.8127881849985823, 0.8084114670416541, 0.814511735509941, 0.8034679509555896, 0.804438378603608, 0.8086809437819981, 0.6549728998114996, 0.6445783855407184, 0.6253336897769456, 0.5940718776211695, 0.6538028585860971, 0.6243687028613288, 0.6592501113101625, 0.6655451622480166, 0.6415610465513886, 0.1251012734466561, 0.17099825487669928, 0.17274556964834809, 0.11291587861993635, 0.12289156437868753, 0.14471730873315414, 0.119518187543037, 0.16513836287770445, 0.14964890698521305, 0.12869276832549315, 0.11472613252394293, 0.0993384146482369, 0.10724255060748766, 0.1323151187711905, 0.1420850405966395, 0.12913592452140077, 0.12310205548484554, 0.11850691625397192, 0.9870998406636305, 0.9868634111506139, 0.989154777114257, 0.9865777858034502, 0.9905492723056399, 0.9930724126976869, 0.9884765164077111, 0.9860758202547473, 0.9860667066652465, 0.6520361288827907, 0.6188686760283781, 0.622784557182084, 0.6405227153339594, 0.6449360929301098, 0.6493785849616628, 0.6481433950472704, 0.645677245800373, 0.66716799737669, 0.3606749148556476, 0.8087189927653224, 0.8062720134745524, 0.7929163084111579, 0.16037086410251045, 0.8349896907718077, 0.8115233970444126, 0.824408647085993, 0.23181427617328276, 0.59717997019218, 0.5254742853971863, 0.5991389180036635, 0.5591169556045839, 0.4478037921230289, 0.4909286569512119, 0.4840863351336867, 0.528721692359273, 0.6406589683143865, 0.45818783345745884, 0.5767355766261526, 0.12419480575211861, 0.5547157913130661, 0.12850448974544648, 0.5614008570993063, 0.5498387377918477, 0.5902986047720526, 0.4767563013999484, 0.19736526668687615, 0.43950024615092376, 0.3880832296063649, 0.5159911526220785, 0.2632676808868293, 0.46943637653401316, 0.5288171192589399, 0.49603105747498855, 0.509371462630435, 0.5718844269354832, 0.5524524970907794, 0.6015404746682358, 0.5753535288761982, 0.5769097256155573, 0.5358474607578976, 0.6006722844249368, 0.5651035539293889, 0.6064423983671636, 0.29983959568180163, 0.08437202700759372, 0.11779185520582991, 0.302730376054444, 0.32632460557552745, 0.14031499357182642, 0.20764597017212705, 0.11818600943464175, 0.10892539716885363, 0.37504140784507134, 0.41310911334717015, 0.3983730326204591, 0.4158407516351921, 0.4140757111614035, 0.4101354004856482, 0.36971905250297554, 0.4105164956151388, 0.31419575810846856, 0.762690845539195, 0.7336934474435971, 0.7453334027594747, 0.7293300564398029, 0.7540795374311148, 0.747804933868413, 0.7239630188371979, 0.748402840920916, 0.7509756148906584, 0.12299230005285622, 0.11046143133328512, 0.14531970594344434, 0.08671099761236456, 0.13122972138018418, 0.12772631905458443, 0.14372144317031366, 0.13042407447571291, 0.11720879750862423, 0.1428712507374832, 0.25981256885098614, 0.5406330459252982, 0.593358868085383, 0.2686379945663302, 0.6451417715780832, 0.15994951464519724, 0.2635972752405201, 0.19543626275274972, 0.5962982321645974, 0.5345452375936937, 0.5344792779480325, 0.5900133782638735, 0.5808000601315322, 0.5550407696717259, 0.5912026325027098, 0.596241621543113, 0.5101429415034352, 0.3267172469180738, 0.2530257163570445, 0.22749461267119142, 0.48738656901797506, 0.4465206926513603, 0.5007451693460472, 0.20513239840149478, 0.4009847838130931, 0.2891895075548948, 0.21316567900400207, 0.20564006972353654, 0.19684063044565137, 0.19318882054017683, 0.22101854268602117, 0.2041909907614674, 0.24487544068735823, 0.23471470916926918, 0.18847762904501042, 0.20192049861702022, 0.21816083587631718, 0.20232578583213112, 0.20845590384848933, 0.24214002331584839, 0.2050596553846301, 0.2134699912560304, 0.2126441998988745, 0.2143431588285768, 0.14558163442367933, 0.1846351652996937, 0.18226701068206663, 0.8332291450521543, 0.18648256495136772, 0.16838429699621882, 0.1661685165351271, 0.13070275548542543, 0.16867763952944226, 0.8039963593134414, 0.20526354034043592, 0.8429724769584417, 0.11219477407455758, 0.20773653961053284, 0.8032429202426492, 0.2091708073735541, 0.839539893167666, 0.12782280109602218, 0.17783169089592976, 0.21624165326856226, 0.19322247271653892, 0.1826612774364016, 0.18387183663007955, 0.17989326245345505, 0.1966088378152655, 0.18975269625358582, 0.18938894251641436, 0.0978263711313141, 0.08542899647770175, 0.09306547985432168, 0.08920176437338634, 0.09091722586732409, 0.12125686602348285, 0.07684720437845227, 0.09143253357242942, 0.09022255041518967]}, "mutation_prompt": null}
{"id": "bd881f9f-9ff1-4437-be59-6418eb874d79", "solution": "import numpy as np\n\nclass DynamicSynergyEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(70, self.budget // 25)\n        self.inertia = np.random.uniform(0.4, 1.1)\n        self.c1, self.c2 = 1.2, 1.8\n        self.F = 0.5 + np.random.rand() * 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.2, self.inertia * 0.95)\n            self.F = 0.4 + np.random.rand() * 0.6\n\n        return global_best, global_best_score", "name": "DynamicSynergyEvolutionaryOptimizer", "description": "Dynamic Synergy Evolutionary Optimizer enhancing adaptive swarm behavior with strategic perturbations for robust exploration and exploitation.", "configspace": "", "generation": 89, "fitness": 0.42874451598855357, "feedback": "The algorithm DynamicSynergyEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "76fe9842-89fa-4347-91ae-1032a3bdcd99", "metadata": {"aucs": [0.7933741487074131, 0.7979081934413744, 0.7973117006337692, 0.7984760913805191, 0.7984402425241109, 0.8039745272076319, 0.8016570585017028, 0.7923078614836039, 0.8064031974055335, 0.5935978337314263, 0.6193937904890753, 0.5846742636293353, 0.5993773863016677, 0.6175928061359426, 0.6116795195144575, 0.6315426592425377, 0.5989243516711747, 0.6046643699767862, 0.11172348684695732, 0.17515518649133432, 0.1027141888544284, 0.14072610462697688, 0.1313524128404404, 0.12138067667382735, 0.11603284612770348, 0.13113785795926902, 0.1305903501647595, 0.10068254863381276, 0.11136388860023871, 0.12016511544978947, 0.09514363446347796, 0.1033297328263576, 0.1258819738611161, 0.13172253409418777, 0.10999369285626437, 0.13031474752607686, 0.9825618700350721, 0.9908710354844412, 0.985752213562569, 0.9784000127305351, 0.9904494421747045, 0.9871318065560919, 0.9810661809277389, 0.9911861912610761, 0.9867720031353787, 0.6085741394893726, 0.6364929941059814, 0.5996314821877577, 0.6183451774726643, 0.6013826036207071, 0.6324975339663055, 0.6036924378035775, 0.5946834317235024, 0.5902531163635392, 0.8172515617562365, 0.8262006254357432, 0.7956834191520815, 0.8486250199778065, 0.8125775350062242, 0.26588249253914875, 0.8121175610746915, 0.833003750586472, 0.7775174235701622, 0.5567144020999975, 0.6384228236534398, 0.48173296798511933, 0.6044111563787957, 0.12721014132613218, 0.4783055198360885, 0.4812860561215485, 0.65200794004622, 0.5572321576963888, 0.46733065330360823, 0.5273053919629401, 0.4295335000703865, 0.6052182600714736, 0.4956898189426606, 0.5613890202219474, 0.4714345408235815, 0.4868736071604801, 0.12594354880904934, 0.5599393181812008, 0.5131081273264747, 0.5223061371798676, 0.5556690829481418, 0.44253929590973495, 0.4317636069669476, 0.25884050432170946, 0.5047016720188269, 0.4188784345111659, 0.5574248766262462, 0.591651461020972, 0.6329939177702657, 0.6128155390260084, 0.5698419509242018, 0.5622007608032947, 0.636662871030519, 0.6257241204776984, 0.5722813932825491, 0.08687333904831196, 0.058867666691637344, 0.3152823775953282, 0.4675128868465298, 0.12341891361126378, 0.17443019707409602, 0.1309770879902904, 0.128068828756019, 0.1143496201512606, 0.40550754377977205, 0.37261126498400743, 0.3448504295455115, 0.41607477435723417, 0.41326954936211857, 0.3946454249601071, 0.40387777280766257, 0.31607531990053206, 0.39587954004962067, 0.7259498965564631, 0.7358471192095671, 0.7326809377169334, 0.7415288713870332, 0.7371473039180891, 0.7061446547907428, 0.7358385640402165, 0.7539916151302016, 0.7490523244387106, 0.0898303562731273, 0.14515368260742745, 0.1261776732403116, 0.12250051842225052, 0.09586034394765064, 0.1231744515434069, 0.09184629204878147, 0.10370095337578711, 0.08655846315951599, 0.24542376548278622, 0.18355125482022894, 0.49576036776535526, 0.3557875268752556, 0.5930457569465764, 0.19013200842201017, 0.25785750903146454, 0.19854815455644126, 0.264672139114806, 0.5229385005808057, 0.5137508419036813, 0.548311899021689, 0.5450930071765355, 0.5282886612594608, 0.4884576537999058, 0.5673051252114056, 0.5927511881564044, 0.5471453909328485, 0.4156461161667493, 0.256269483741312, 0.2952175498409063, 0.2612842584531092, 0.32061790137671853, 0.43192263711762957, 0.4484848661156623, 0.40912639503411197, 0.44364596176886484, 0.23356669751019787, 0.22441904637841725, 0.21831795951996535, 0.18406625395563847, 0.18475811506228834, 0.2094319926764081, 0.21516730835538878, 0.22801870067332752, 0.20330732020843745, 0.21336414881525878, 0.20723403423439746, 0.20192896033642738, 0.21613414029627087, 0.17915170184085671, 0.2229870204442227, 0.21624306358951095, 0.2153213164758987, 0.23482686178805678, 0.8382872981392648, 0.15325888444081726, 0.20447320032864968, 0.8081505799248827, 0.166036269854425, 0.16908268235612067, 0.16201120246583656, 0.19532759501774977, 0.8346233241465569, 0.8488752133585797, 0.8459845071204234, 0.8291151237625533, 0.11157033011397621, 0.20831718599181992, 0.8079964122587231, 0.1633934080350964, 0.8511698979634016, 0.12726843323453663, 0.175990903305571, 0.1739100223375022, 0.19421028530026352, 0.18550157464370354, 0.1820629797979897, 0.20849639218374294, 0.1890146327789557, 0.18665715285632933, 0.18673230063368995, 0.09401026389588385, 0.08610266389157528, 0.10507206114303647, 0.09644229145783834, 0.12015757637044333, 0.13106623182000443, 0.08011180920545902, 0.08840759948146681, 0.09839142234914122]}, "mutation_prompt": null}
{"id": "6e09b388-8f41-4830-b64d-d2a569cf3d06", "solution": "import numpy as np\n\nclass DynamicSynergyEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(70, self.budget // 25)\n        self.inertia = np.random.uniform(0.4, 1.1)\n        self.c1, self.c2 = 1.2, 1.8\n        self.F = 0.5 + np.random.rand() * 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.2, self.inertia * 0.95)\n            self.F = 0.4 + np.random.rand() * 0.6\n\n        return global_best, global_best_score", "name": "DynamicSynergyEvolutionaryOptimizer", "description": "Dynamic Synergy Evolutionary Optimizer enhancing adaptive swarm behavior with strategic perturbations for robust exploration and exploitation.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd881f9f-9ff1-4437-be59-6418eb874d79", "metadata": {"aucs": [0.7933741487074131, 0.7979081934413744, 0.7973117006337692, 0.7984760913805191, 0.7984402425241109, 0.8039745272076319, 0.8016570585017028, 0.7923078614836039, 0.8064031974055335, 0.5935978337314263, 0.6193937904890753, 0.5846742636293353, 0.5993773863016677, 0.6175928061359426, 0.6116795195144575, 0.6315426592425377, 0.5989243516711747, 0.6046643699767862, 0.11172348684695732, 0.17515518649133432, 0.1027141888544284, 0.14072610462697688, 0.1313524128404404, 0.12138067667382735, 0.11603284612770348, 0.13113785795926902, 0.1305903501647595, 0.10068254863381276, 0.11136388860023871, 0.12016511544978947, 0.09514363446347796, 0.1033297328263576, 0.1258819738611161, 0.13172253409418777, 0.10999369285626437, 0.13031474752607686, 0.9825618700350721, 0.9908710354844412, 0.985752213562569, 0.9784000127305351, 0.9904494421747045, 0.9871318065560919, 0.9810661809277389, 0.9911861912610761, 0.9867720031353787, 0.6085741394893726, 0.6364929941059814, 0.5996314821877577, 0.6183451774726643, 0.6013826036207071, 0.6324975339663055, 0.6036924378035775, 0.5946834317235024, 0.5902531163635392, 0.8172515617562365, 0.8262006254357432, 0.7956834191520815, 0.8486250199778065, 0.8125775350062242, 0.26588249253914875, 0.8121175610746915, 0.833003750586472, 0.7775174235701622, 0.5567144020999975, 0.6384228236534398, 0.48173296798511933, 0.6044111563787957, 0.12721014132613218, 0.4783055198360885, 0.4812860561215485, 0.65200794004622, 0.5572321576963888, 0.46733065330360823, 0.5273053919629401, 0.4295335000703865, 0.6052182600714736, 0.4956898189426606, 0.5613890202219474, 0.4714345408235815, 0.4868736071604801, 0.12594354880904934, 0.5599393181812008, 0.5131081273264747, 0.5223061371798676, 0.5556690829481418, 0.44253929590973495, 0.4317636069669476, 0.25884050432170946, 0.5047016720188269, 0.4188784345111659, 0.5574248766262462, 0.591651461020972, 0.6329939177702657, 0.6128155390260084, 0.5698419509242018, 0.5622007608032947, 0.636662871030519, 0.6257241204776984, 0.5722813932825491, 0.08687333904831196, 0.058867666691637344, 0.3152823775953282, 0.4675128868465298, 0.12341891361126378, 0.17443019707409602, 0.1309770879902904, 0.128068828756019, 0.1143496201512606, 0.40550754377977205, 0.37261126498400743, 0.3448504295455115, 0.41607477435723417, 0.41326954936211857, 0.3946454249601071, 0.40387777280766257, 0.31607531990053206, 0.39587954004962067, 0.7259498965564631, 0.7358471192095671, 0.7326809377169334, 0.7415288713870332, 0.7371473039180891, 0.7061446547907428, 0.7358385640402165, 0.7539916151302016, 0.7490523244387106, 0.0898303562731273, 0.14515368260742745, 0.1261776732403116, 0.12250051842225052, 0.09586034394765064, 0.1231744515434069, 0.09184629204878147, 0.10370095337578711, 0.08655846315951599, 0.24542376548278622, 0.18355125482022894, 0.49576036776535526, 0.3557875268752556, 0.5930457569465764, 0.19013200842201017, 0.25785750903146454, 0.19854815455644126, 0.264672139114806, 0.5229385005808057, 0.5137508419036813, 0.548311899021689, 0.5450930071765355, 0.5282886612594608, 0.4884576537999058, 0.5673051252114056, 0.5927511881564044, 0.5471453909328485, 0.4156461161667493, 0.256269483741312, 0.2952175498409063, 0.2612842584531092, 0.32061790137671853, 0.43192263711762957, 0.4484848661156623, 0.40912639503411197, 0.44364596176886484, 0.23356669751019787, 0.22441904637841725, 0.21831795951996535, 0.18406625395563847, 0.18475811506228834, 0.2094319926764081, 0.21516730835538878, 0.22801870067332752, 0.20330732020843745, 0.21336414881525878, 0.20723403423439746, 0.20192896033642738, 0.21613414029627087, 0.17915170184085671, 0.2229870204442227, 0.21624306358951095, 0.2153213164758987, 0.23482686178805678, 0.8382872981392648, 0.15325888444081726, 0.20447320032864968, 0.8081505799248827, 0.166036269854425, 0.16908268235612067, 0.16201120246583656, 0.19532759501774977, 0.8346233241465569, 0.8488752133585797, 0.8459845071204234, 0.8291151237625533, 0.11157033011397621, 0.20831718599181992, 0.8079964122587231, 0.1633934080350964, 0.8511698979634016, 0.12726843323453663, 0.175990903305571, 0.1739100223375022, 0.19421028530026352, 0.18550157464370354, 0.1820629797979897, 0.20849639218374294, 0.1890146327789557, 0.18665715285632933, 0.18673230063368995, 0.09401026389588385, 0.08610266389157528, 0.10507206114303647, 0.09644229145783834, 0.12015757637044333, 0.13106623182000443, 0.08011180920545902, 0.08840759948146681, 0.09839142234914122]}, "mutation_prompt": null}
{"id": "f9e24a2d-c2a6-43bc-896c-f0cc4fcfb7a9", "solution": "import numpy as np\n\nclass QuantumAdaptiveCoevolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(80, self.budget // 20)\n        self.inertia = np.random.uniform(0.5, 1.0)\n        self.c1, self.c2 = 1.5, 1.7\n        self.F = 0.6 + np.random.rand() * 0.4\n        self.CR = 0.85\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.6, 0.6, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.1, self.inertia * 0.9)\n            self.F = 0.5 + np.random.rand() * 0.5\n\n        return global_best, global_best_score", "name": "QuantumAdaptiveCoevolutionaryOptimizer", "description": "Quantum-inspired Adaptive Coevolutionary Algorithm utilizing quantum superposition principles for enhanced exploration and adaptive coevolution for dynamic exploitation.", "configspace": "", "generation": 91, "fitness": 0.357816055643642, "feedback": "The algorithm QuantumAdaptiveCoevolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "bd881f9f-9ff1-4437-be59-6418eb874d79", "metadata": {"aucs": [0.7245252148218422, 0.7502345702580475, 0.7569416117640113, 0.7564067526120317, 0.7566099642859492, 0.7510174718553988, 0.7448056289432764, 0.7322388628630669, 0.7463514324267182, 0.518256603941438, 0.5421167518333092, 0.5147996682823397, 0.5430784013566092, 0.5305348680772033, 0.528992980634565, 0.5213938082818421, 0.5568512636897016, 0.5479166682800067, 0.2553293652247045, 0.12307563957601397, 0.12723198406094638, 0.13382238206483255, 0.13704562245992835, 0.13229706859857793, 0.1639706311105532, 0.1410640631183121, 0.11125852032047512, 0.09342907303525749, 0.10089274542978766, 0.10310318114987638, 0.11349485536942994, 0.1079475664447549, 0.10141044120334208, 0.10535761791039344, 0.12637196239315074, 0.11655878227206307, 0.9882311245902927, 0.9902339209685547, 0.9890407210358607, 0.9819953938221593, 0.9818663083998976, 0.9870463151225015, 0.9824088025888109, 0.9814604366897225, 0.9834558455808763, 0.4776365959868063, 0.4771346322141993, 0.49487859866780126, 0.4385818919776393, 0.4482988371896043, 0.5167786151846749, 0.4614481658881523, 0.5138877934496803, 0.5006305606053707, 0.7358576982321943, 0.7264146194595259, 0.6759512523024198, 0.20489493689714655, 0.7487841386268026, 0.7925720960282234, 0.7594886292980112, 0.762660137954955, 0.7640945776623574, 0.3604388388122749, 0.38390532379852627, 0.3408271412535545, 0.3069732272754838, 0.34226959214159447, 0.46854332988668057, 0.29749584765730996, 0.11881003025488679, 0.12462349378985405, 0.3419587134273805, 0.23717891762942322, 0.4437755652423848, 0.432791441044441, 0.3491372624741562, 0.3634405396969774, 0.4464331787280795, 0.12635241052377755, 0.3994190897227724, 0.23578447517560563, 0.17406988188705963, 0.33606461865477755, 0.22825860250973595, 0.2377037735779547, 0.27893150667333944, 0.2750757671883961, 0.20766195724072423, 0.23382211739738246, 0.2592398977404794, 0.33400230549465293, 0.4014438612417933, 0.3607085610522488, 0.33649185551774197, 0.35366329089691495, 0.4463901794852817, 0.4071366524902902, 0.41096680379900785, 0.06135250254225344, 0.0825157999054974, 0.05578685776664005, 0.15172228614900063, 0.09674883365867304, 0.18583679895746308, 0.12009876427456945, 0.0963083077257022, 0.10382192370609011, 0.24456702279814646, 0.2798682377410373, 0.2786362707200215, 0.27464074518445747, 0.2548608642145287, 0.2636429696561131, 0.26277248075797466, 0.2788736205254341, 0.26060668605099313, 0.6098543764972354, 0.5906510380313338, 0.6304362162865251, 0.6452617191034339, 0.6677175791850303, 0.6723361376134322, 0.6167605582088209, 0.6414373404001933, 0.6202266528442584, 0.12727285762988105, 0.14088360637576114, 0.10951881257180507, 0.12233913753240044, 0.12479421048970396, 0.1067497684638472, 0.13686204469281438, 0.15504084161724108, 0.12270443510638962, 0.39122376250902335, 0.182842660917369, 0.17154250817561023, 0.3909401322339029, 0.19087835465578762, 0.18297689626216118, 0.1593386771456291, 0.13268530113934707, 0.27336160871919946, 0.25986824830990707, 0.4518706004942923, 0.41202446256206704, 0.45246788172796903, 0.40342926510678623, 0.43446322115831515, 0.44211075228733976, 0.46126396491098764, 0.43312673205184393, 0.2953453283892996, 0.33278816007286005, 0.32629974477874335, 0.3295853856517236, 0.3369651877411618, 0.34795891833449, 0.3696723078106714, 0.3582504328042805, 0.39322877987599036, 0.20586723226641457, 0.21621022799438727, 0.2227624559810767, 0.19772198968401866, 0.20675101660158857, 0.22267657353749948, 0.2031729025039518, 0.20778327383435713, 0.21389075788786793, 0.2104563193158463, 0.21225060635404702, 0.19929099707492293, 0.1877047925169043, 0.23394942372922756, 0.19650543047991942, 0.19322081905242416, 0.22818535423217956, 0.23938305798140724, 0.1512524404971184, 0.16410459734139438, 0.8210256026675969, 0.1917702702787658, 0.19502001897496946, 0.16836434233060005, 0.7583670087092542, 0.1620313887968463, 0.825238858570541, 0.7243370285371618, 0.20296852047167646, 0.7978265347538711, 0.16227923476492156, 0.20642454854372905, 0.16535132917395767, 0.6877970621964793, 0.8187428836737568, 0.126558636547348, 0.19007237348307204, 0.20121196994027846, 0.1877975929490744, 0.19282158706077257, 0.18886762335066964, 0.18819319362873954, 0.17970617755807727, 0.17704320529800466, 0.18866326175116177, 0.08987782895528651, 0.0889636656924696, 0.08875401078834233, 0.07519126975514012, 0.07798751628291067, 0.08536980622350543, 0.08963731884590087, 0.09050994830643777, 0.08608182673040488]}, "mutation_prompt": null}
{"id": "1a2babca-8c9d-43d4-998b-c37d54c5e491", "solution": "import numpy as np\n\nclass AdaptiveQuantumHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(80, self.budget // 20)  # Slightly increased population size\n        self.inertia = np.random.uniform(0.6, 1.2)  # Adjusted inertia range for exploration\n        self.c1, self.c2 = 1.5, 1.5  # Balanced convergence and exploration\n        self.F = 0.6 + np.random.rand() * 0.4  # Focused differential weight\n        self.CR = 0.85  # Slightly reduced crossover rate for diversity\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.7, 0.7, (self.pop_size, self.dim))  # Increased initial velocity range\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    quantum_factor = np.random.uniform(-1, 1, self.dim)  # Quantum-inspired factor\n                    mutant = np.clip(a + self.F * (b - c) + quantum_factor, lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.3, self.inertia * 0.92)  # Adjusted inertia decay\n            self.F = 0.5 + np.random.rand() * 0.5  # Dynamic adjustment of F\n\n        return global_best, global_best_score", "name": "AdaptiveQuantumHybridOptimizer", "description": "Adaptive Quantum-Inspired Hybrid Optimizer combining quantum-inspired probability amplitudes with adaptive mutation strategies for enhanced exploration-exploitation trade-off.", "configspace": "", "generation": 92, "fitness": 0.18581429298653543, "feedback": "The algorithm AdaptiveQuantumHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "bd881f9f-9ff1-4437-be59-6418eb874d79", "metadata": {"aucs": [0.3465707887907008, 0.3513868020655726, 0.3255105387169853, 0.32261769835404697, 0.3481601987912736, 0.3408093571149877, 0.3580167619940595, 0.31906390400719564, 0.3277323892257107, 0.01253519612778331, 0.039027098293632156, 0.025163671107969687, 0.04547013512668696, 0.0298941016947758, 0.027786438582019346, 0.03076119610022865, 0.011557506610480828, 0.04139587296205249, 0.09729251805791406, 0.09281447715011759, 0.08873714952551559, 0.09580143617301218, 0.08654981862187472, 0.10340773556142124, 0.0981375107240905, 0.11388059014962204, 0.09792123816959553, 0.08989593858278822, 0.08874415921924939, 0.07822273983275974, 0.08178331521192739, 0.09664337234595044, 0.09885469586417317, 0.07705709053126397, 0.0805940392797434, 0.07510608800239393, 0.9849961224677001, 0.9897711258795674, 0.9854329777125181, 0.9638150782088957, 0.9877349722056241, 0.9860038023669343, 0.9761864713878112, 0.9900299483909277, 0.9755373735761238, 0.2112145904904037, 0.20154227783402057, 0.1951462659696388, 0.21009824181947068, 0.19759130526436142, 0.20386135281136875, 0.19385071081351912, 0.18498546873141675, 0.17638347175349733, 0.21892169261863126, 0.25997180390120345, 0.24299788258055388, 0.27853462020358044, 0.21317499371658932, 0.2538810733052146, 0.22008469528062002, 0.24169053045376765, 0.2627704115649986, 0.12503898123080803, 0.11448816190165456, 0.11358614724282212, 0.1235265364163981, 0.10455533384844207, 0.08594250630669753, 0.11988605017534826, 0.10191025960580902, 0.10851475554034418, 0.10131773171160252, 0.11422204063439889, 0.11467464150105766, 0.10720621991973334, 0.1048029324853369, 0.10401205626161658, 0.11381079318615683, 0.1110066301363255, 0.11548165749329764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005714000157957755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10500288531390067, 0.12952109745857565, 0.08114570020084921, 0.058611278805026035, 0.01830777107342385, 0.052070211494881224, 0.062049681603592366, 0.06428414234865465, 0.06004704291139318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04832709109622224, 0.059238821372444184, 0.04401479230468808, 0.06970703618874363, 0.05186203323889782, 0.06013125390755303, 0.06664803186446622, 0.06431351025349452, 0.055639162271567844, 0.31547922991053645, 0.30698424837761673, 0.31920817225919085, 0.3304217882704831, 0.33674233889410166, 0.33011042292709036, 0.32145111435596796, 0.3216094378988651, 0.344652780764105, 0.09468221071112692, 0.08802489475726472, 0.105858256782703, 0.084206181906756, 0.0952115043052818, 0.09053915726852446, 0.09612771595424585, 0.09349306560865556, 0.10113083295527125, 0.13827885655161376, 0.12310587620470304, 0.14269961432594713, 0.18543551953071902, 0.1515257758953822, 0.1533564847321517, 0.14313881424556096, 0.207624487422282, 0.14189477847509602, 0.2421768575533857, 0.25545481956690297, 0.24145009796681738, 0.22972954101575105, 0.24620972946017972, 0.24733423355202722, 0.2302176686287436, 0.23348592716505623, 0.238321483994961, 0.17080301256931218, 0.19113322787771914, 0.17994740027009937, 0.16280904716040845, 0.17668787396290864, 0.16779500930950797, 0.1466741593592591, 0.1788355564505293, 0.1744935717976287, 0.18347278377466858, 0.19742725434872377, 0.21825164424231835, 0.1841097634036406, 0.2033708487117567, 0.19128302875828063, 0.211703193684616, 0.20534477772390158, 0.20012019401715375, 0.17114064102117077, 0.2006088270415114, 0.16856292461486777, 0.18095351991001707, 0.18960996522263596, 0.18525528460841334, 0.17823801830849884, 0.18142882391927118, 0.18197436625626906, 0.12441921753990737, 0.1494064236482795, 0.1764300830459875, 0.16317383308581535, 0.1651039008714622, 0.16667431142256262, 0.46210449083416894, 0.16291603225445983, 0.42532123822237833, 0.19965246243568502, 0.41611404664355955, 0.22594498105444938, 0.33989945207107297, 0.19910116559363955, 0.163631206409647, 0.15978780418087712, 0.4046059996013235, 0.40674563292492694, 0.19468325674306908, 0.18504780117694353, 0.18211845643380808, 0.18492230736767357, 0.19081441395361665, 0.18801242851425248, 0.1821053178578459, 0.17492470245407243, 0.1948397605501213, 0.0845290719446744, 0.07681944948362529, 0.07619228508251796, 0.07899057781476071, 0.08365675402094896, 0.0997312269731565, 0.07361278310762209, 0.09247858610553994, 0.07853537570433322]}, "mutation_prompt": null}
{"id": "d07a5901-5244-4484-af73-c6a504b060b3", "solution": "import numpy as np\n\nclass DynamicSynergyEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(70, self.budget // 25)\n        self.inertia = np.random.uniform(0.4, 1.1)\n        self.c1, self.c2 = 1.2, 1.8\n        self.F = 0.5 + np.random.rand() * 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.2, self.inertia * 0.95)\n            self.F = 0.4 + np.random.rand() * 0.6\n\n        return global_best, global_best_score", "name": "DynamicSynergyEvolutionaryOptimizer", "description": "Dynamic Synergy Evolutionary Optimizer enhancing adaptive swarm behavior with strategic perturbations for robust exploration and exploitation.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd881f9f-9ff1-4437-be59-6418eb874d79", "metadata": {"aucs": [0.7933741487074131, 0.7979081934413744, 0.7973117006337692, 0.7984760913805191, 0.7984402425241109, 0.8039745272076319, 0.8016570585017028, 0.7923078614836039, 0.8064031974055335, 0.5935978337314263, 0.6193937904890753, 0.5846742636293353, 0.5993773863016677, 0.6175928061359426, 0.6116795195144575, 0.6315426592425377, 0.5989243516711747, 0.6046643699767862, 0.11172348684695732, 0.17515518649133432, 0.1027141888544284, 0.14072610462697688, 0.1313524128404404, 0.12138067667382735, 0.11603284612770348, 0.13113785795926902, 0.1305903501647595, 0.10068254863381276, 0.11136388860023871, 0.12016511544978947, 0.09514363446347796, 0.1033297328263576, 0.1258819738611161, 0.13172253409418777, 0.10999369285626437, 0.13031474752607686, 0.9825618700350721, 0.9908710354844412, 0.985752213562569, 0.9784000127305351, 0.9904494421747045, 0.9871318065560919, 0.9810661809277389, 0.9911861912610761, 0.9867720031353787, 0.6085741394893726, 0.6364929941059814, 0.5996314821877577, 0.6183451774726643, 0.6013826036207071, 0.6324975339663055, 0.6036924378035775, 0.5946834317235024, 0.5902531163635392, 0.8172515617562365, 0.8262006254357432, 0.7956834191520815, 0.8486250199778065, 0.8125775350062242, 0.26588249253914875, 0.8121175610746915, 0.833003750586472, 0.7775174235701622, 0.5567144020999975, 0.6384228236534398, 0.48173296798511933, 0.6044111563787957, 0.12721014132613218, 0.4783055198360885, 0.4812860561215485, 0.65200794004622, 0.5572321576963888, 0.46733065330360823, 0.5273053919629401, 0.4295335000703865, 0.6052182600714736, 0.4956898189426606, 0.5613890202219474, 0.4714345408235815, 0.4868736071604801, 0.12594354880904934, 0.5599393181812008, 0.5131081273264747, 0.5223061371798676, 0.5556690829481418, 0.44253929590973495, 0.4317636069669476, 0.25884050432170946, 0.5047016720188269, 0.4188784345111659, 0.5574248766262462, 0.591651461020972, 0.6329939177702657, 0.6128155390260084, 0.5698419509242018, 0.5622007608032947, 0.636662871030519, 0.6257241204776984, 0.5722813932825491, 0.08687333904831196, 0.058867666691637344, 0.3152823775953282, 0.4675128868465298, 0.12341891361126378, 0.17443019707409602, 0.1309770879902904, 0.128068828756019, 0.1143496201512606, 0.40550754377977205, 0.37261126498400743, 0.3448504295455115, 0.41607477435723417, 0.41326954936211857, 0.3946454249601071, 0.40387777280766257, 0.31607531990053206, 0.39587954004962067, 0.7259498965564631, 0.7358471192095671, 0.7326809377169334, 0.7415288713870332, 0.7371473039180891, 0.7061446547907428, 0.7358385640402165, 0.7539916151302016, 0.7490523244387106, 0.0898303562731273, 0.14515368260742745, 0.1261776732403116, 0.12250051842225052, 0.09586034394765064, 0.1231744515434069, 0.09184629204878147, 0.10370095337578711, 0.08655846315951599, 0.24542376548278622, 0.18355125482022894, 0.49576036776535526, 0.3557875268752556, 0.5930457569465764, 0.19013200842201017, 0.25785750903146454, 0.19854815455644126, 0.264672139114806, 0.5229385005808057, 0.5137508419036813, 0.548311899021689, 0.5450930071765355, 0.5282886612594608, 0.4884576537999058, 0.5673051252114056, 0.5927511881564044, 0.5471453909328485, 0.4156461161667493, 0.256269483741312, 0.2952175498409063, 0.2612842584531092, 0.32061790137671853, 0.43192263711762957, 0.4484848661156623, 0.40912639503411197, 0.44364596176886484, 0.23356669751019787, 0.22441904637841725, 0.21831795951996535, 0.18406625395563847, 0.18475811506228834, 0.2094319926764081, 0.21516730835538878, 0.22801870067332752, 0.20330732020843745, 0.21336414881525878, 0.20723403423439746, 0.20192896033642738, 0.21613414029627087, 0.17915170184085671, 0.2229870204442227, 0.21624306358951095, 0.2153213164758987, 0.23482686178805678, 0.8382872981392648, 0.15325888444081726, 0.20447320032864968, 0.8081505799248827, 0.166036269854425, 0.16908268235612067, 0.16201120246583656, 0.19532759501774977, 0.8346233241465569, 0.8488752133585797, 0.8459845071204234, 0.8291151237625533, 0.11157033011397621, 0.20831718599181992, 0.8079964122587231, 0.1633934080350964, 0.8511698979634016, 0.12726843323453663, 0.175990903305571, 0.1739100223375022, 0.19421028530026352, 0.18550157464370354, 0.1820629797979897, 0.20849639218374294, 0.1890146327789557, 0.18665715285632933, 0.18673230063368995, 0.09401026389588385, 0.08610266389157528, 0.10507206114303647, 0.09644229145783834, 0.12015757637044333, 0.13106623182000443, 0.08011180920545902, 0.08840759948146681, 0.09839142234914122]}, "mutation_prompt": null}
{"id": "dff51e6f-00bf-4f2d-ab47-48d8d98ae022", "solution": "import numpy as np\n\nclass DynamicSynergyEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(70, self.budget // 25)\n        self.inertia = np.random.uniform(0.4, 1.1)\n        self.c1, self.c2 = 1.2, 1.8\n        self.F = 0.5 + np.random.rand() * 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]))\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.2, self.inertia * 0.95)\n            self.F = 0.4 + np.random.rand() * 0.6\n\n        return global_best, global_best_score", "name": "DynamicSynergyEvolutionaryOptimizer", "description": "Dynamic Synergy Evolutionary Optimizer enhancing adaptive swarm behavior with strategic perturbations for robust exploration and exploitation.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd881f9f-9ff1-4437-be59-6418eb874d79", "metadata": {"aucs": [0.7933741487074131, 0.7979081934413744, 0.7973117006337692, 0.7984760913805191, 0.7984402425241109, 0.8039745272076319, 0.8016570585017028, 0.7923078614836039, 0.8064031974055335, 0.5935978337314263, 0.6193937904890753, 0.5846742636293353, 0.5993773863016677, 0.6175928061359426, 0.6116795195144575, 0.6315426592425377, 0.5989243516711747, 0.6046643699767862, 0.11172348684695732, 0.17515518649133432, 0.1027141888544284, 0.14072610462697688, 0.1313524128404404, 0.12138067667382735, 0.11603284612770348, 0.13113785795926902, 0.1305903501647595, 0.10068254863381276, 0.11136388860023871, 0.12016511544978947, 0.09514363446347796, 0.1033297328263576, 0.1258819738611161, 0.13172253409418777, 0.10999369285626437, 0.13031474752607686, 0.9825618700350721, 0.9908710354844412, 0.985752213562569, 0.9784000127305351, 0.9904494421747045, 0.9871318065560919, 0.9810661809277389, 0.9911861912610761, 0.9867720031353787, 0.6085741394893726, 0.6364929941059814, 0.5996314821877577, 0.6183451774726643, 0.6013826036207071, 0.6324975339663055, 0.6036924378035775, 0.5946834317235024, 0.5902531163635392, 0.8172515617562365, 0.8262006254357432, 0.7956834191520815, 0.8486250199778065, 0.8125775350062242, 0.26588249253914875, 0.8121175610746915, 0.833003750586472, 0.7775174235701622, 0.5567144020999975, 0.6384228236534398, 0.48173296798511933, 0.6044111563787957, 0.12721014132613218, 0.4783055198360885, 0.4812860561215485, 0.65200794004622, 0.5572321576963888, 0.46733065330360823, 0.5273053919629401, 0.4295335000703865, 0.6052182600714736, 0.4956898189426606, 0.5613890202219474, 0.4714345408235815, 0.4868736071604801, 0.12594354880904934, 0.5599393181812008, 0.5131081273264747, 0.5223061371798676, 0.5556690829481418, 0.44253929590973495, 0.4317636069669476, 0.25884050432170946, 0.5047016720188269, 0.4188784345111659, 0.5574248766262462, 0.591651461020972, 0.6329939177702657, 0.6128155390260084, 0.5698419509242018, 0.5622007608032947, 0.636662871030519, 0.6257241204776984, 0.5722813932825491, 0.08687333904831196, 0.058867666691637344, 0.3152823775953282, 0.4675128868465298, 0.12341891361126378, 0.17443019707409602, 0.1309770879902904, 0.128068828756019, 0.1143496201512606, 0.40550754377977205, 0.37261126498400743, 0.3448504295455115, 0.41607477435723417, 0.41326954936211857, 0.3946454249601071, 0.40387777280766257, 0.31607531990053206, 0.39587954004962067, 0.7259498965564631, 0.7358471192095671, 0.7326809377169334, 0.7415288713870332, 0.7371473039180891, 0.7061446547907428, 0.7358385640402165, 0.7539916151302016, 0.7490523244387106, 0.0898303562731273, 0.14515368260742745, 0.1261776732403116, 0.12250051842225052, 0.09586034394765064, 0.1231744515434069, 0.09184629204878147, 0.10370095337578711, 0.08655846315951599, 0.24542376548278622, 0.18355125482022894, 0.49576036776535526, 0.3557875268752556, 0.5930457569465764, 0.19013200842201017, 0.25785750903146454, 0.19854815455644126, 0.264672139114806, 0.5229385005808057, 0.5137508419036813, 0.548311899021689, 0.5450930071765355, 0.5282886612594608, 0.4884576537999058, 0.5673051252114056, 0.5927511881564044, 0.5471453909328485, 0.4156461161667493, 0.256269483741312, 0.2952175498409063, 0.2612842584531092, 0.32061790137671853, 0.43192263711762957, 0.4484848661156623, 0.40912639503411197, 0.44364596176886484, 0.23356669751019787, 0.22441904637841725, 0.21831795951996535, 0.18406625395563847, 0.18475811506228834, 0.2094319926764081, 0.21516730835538878, 0.22801870067332752, 0.20330732020843745, 0.21336414881525878, 0.20723403423439746, 0.20192896033642738, 0.21613414029627087, 0.17915170184085671, 0.2229870204442227, 0.21624306358951095, 0.2153213164758987, 0.23482686178805678, 0.8382872981392648, 0.15325888444081726, 0.20447320032864968, 0.8081505799248827, 0.166036269854425, 0.16908268235612067, 0.16201120246583656, 0.19532759501774977, 0.8346233241465569, 0.8488752133585797, 0.8459845071204234, 0.8291151237625533, 0.11157033011397621, 0.20831718599181992, 0.8079964122587231, 0.1633934080350964, 0.8511698979634016, 0.12726843323453663, 0.175990903305571, 0.1739100223375022, 0.19421028530026352, 0.18550157464370354, 0.1820629797979897, 0.20849639218374294, 0.1890146327789557, 0.18665715285632933, 0.18673230063368995, 0.09401026389588385, 0.08610266389157528, 0.10507206114303647, 0.09644229145783834, 0.12015757637044333, 0.13106623182000443, 0.08011180920545902, 0.08840759948146681, 0.09839142234914122]}, "mutation_prompt": null}
{"id": "332ab163-2de1-4ac7-a2f3-1eb66fdd976f", "solution": "import numpy as np\n\nclass AdaptiveStrategyHarmonicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(60, self.budget // 30)  # Adjusted population size\n        self.inertia = np.random.uniform(0.3, 1.0)  # Adjusted inertia bounds\n        self.c1, self.c2 = 1.4, 1.7  # Modified cognitive and social coefficients\n        self.F = 0.5 + np.random.rand() * 0.3  # Modified mutation factor range\n        self.CR = 0.8  # Adjusted crossover rate\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            harmonic_factor = np.sin(np.pi * evaluations / self.budget)  # Introduced harmonic factor\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]) * harmonic_factor)\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.2, self.inertia * 0.9)  # Adjusted inertia decay\n            self.F = 0.3 + np.random.rand() * 0.6  # Adjusted mutation factor range\n\n        return global_best, global_best_score", "name": "AdaptiveStrategyHarmonicOptimizer", "description": "Adaptive Strategy Harmonic Optimizer utilizing dynamic phase transitions for enhanced convergence through harmonic balance exploration and adaptation.", "configspace": "", "generation": 95, "fitness": 0.4492849534539823, "feedback": "The algorithm AdaptiveStrategyHarmonicOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.26.", "error": "", "parent_id": "bd881f9f-9ff1-4437-be59-6418eb874d79", "metadata": {"aucs": [0.8249099317534818, 0.8341536985298641, 0.8243887110962133, 0.8293130598921877, 0.8242459367292333, 0.8215232703676523, 0.8157241667997257, 0.8269474538507637, 0.8235697562904369, 0.7139156069675439, 0.7099703221974669, 0.691969534626131, 0.7030804331820946, 0.6955629860429409, 0.702006500927334, 0.7040645009743358, 0.7093058685943961, 0.6856112329459245, 0.13765795746189013, 0.10864234748380663, 0.5215533329115448, 0.16359521607116678, 0.14264942545867765, 0.14279064516060358, 0.13204214238336176, 0.145327200587114, 0.12097432644256911, 0.12151127232242487, 0.10599681365691827, 0.10167280135759671, 0.09894570193398344, 0.10419369217384467, 0.12999854493184015, 0.09728518818987086, 0.1008455251956295, 0.10997926715133022, 0.9524066172231009, 0.9685008733238115, 0.9293158312579713, 0.978966917652324, 0.9077640429730336, 0.9385514949538912, 0.9550270148875109, 0.9347133181265329, 0.9157028686887148, 0.6577354047403726, 0.6808658833620949, 0.6642224137550929, 0.6671267370572608, 0.6667092628796123, 0.663735464378122, 0.6632783633020713, 0.6750222284825049, 0.6646620538978323, 0.8105592038012406, 0.8051250260714529, 0.7772176232667503, 0.8272165238579938, 0.8304940990596639, 0.8227214700523, 0.8007342291996522, 0.820957955858765, 0.8159482425781965, 0.5300490366274588, 0.5181878603007692, 0.47363059096103877, 0.5325748704674147, 0.6094873334173896, 0.12579079275669847, 0.4735553300298875, 0.49909280767802044, 0.4411322921360121, 0.4435986094398787, 0.377940770578586, 0.49150222211814887, 0.5444578711193867, 0.6445468199925939, 0.524381676603579, 0.12336019872367343, 0.4589274758531533, 0.5124214423245683, 0.42785751038426934, 0.3438885598941178, 0.49685752640089054, 0.4655075287037185, 0.3740146809731497, 0.4809386478306106, 0.47378304296060336, 0.35409024666866384, 0.4238080943991882, 0.5959730584801828, 0.6297674622334859, 0.589254408873372, 0.503277103829426, 0.5745284167392408, 0.5472938642350806, 0.6061811879994621, 0.6162498619161548, 0.6144486801210404, 0.06333958764839476, 0.11671151320019013, 0.23283770639915125, 0.24897972968533677, 0.22267457108333055, 0.37110587712906207, 0.192365495775772, 0.3181304984068092, 0.2719752046033467, 0.3120414018317328, 0.30848871667876054, 0.3366483956081374, 0.37282626116097384, 0.34851049483160135, 0.314184486970955, 0.2858535504807457, 0.23610121657237382, 0.28875677443283343, 0.7041786340962406, 0.7413817573388557, 0.7185970987119802, 0.7378916793336898, 0.7315008607339073, 0.7416916952357657, 0.7029657717076488, 0.7554066089160381, 0.729549855034376, 0.5528875028518574, 0.1329183832075962, 0.14626452106199028, 0.13690158324091461, 0.14785154313375937, 0.10434758144512746, 0.12851065097655245, 0.12993483018466556, 0.5349941857378162, 0.4868687890187655, 0.3652628600269223, 0.16487120680348366, 0.26379793671678187, 0.25117967055807444, 0.514126253790156, 0.24507828519775232, 0.48900973112367385, 0.19985247771400227, 0.5222568522563259, 0.42198103868571357, 0.5417422345078637, 0.4564453637604994, 0.6357819715465198, 0.49292364153628354, 0.3984892228267993, 0.619506134806427, 0.6247209474044595, 0.36430303154703136, 0.28640625268431275, 0.3563516951513803, 0.4584639306197834, 0.37284655235113573, 0.3033587221772771, 0.4838548613532112, 0.3183561701452131, 0.26216799801651336, 0.20519837028226395, 0.23822067734858587, 0.22329522431350945, 0.2121141942455973, 0.20725507082352423, 0.21806229095188778, 0.2597531602114517, 0.21379958709752522, 0.21400013876017987, 0.2159322407748977, 0.21344988474729087, 0.21464135669212114, 0.5739927784487315, 0.23491086080181411, 0.2098230235316465, 0.18527453459186605, 0.19513437311026416, 0.20850347581402018, 0.1783522703396575, 0.19297637101659948, 0.1921081824042482, 0.1801238345609918, 0.7879155378401237, 0.8044321442585292, 0.7658732230629675, 0.8396307792263147, 0.8177474507921894, 0.7647238016076041, 0.7763374067399651, 0.7518594724141221, 0.7605021058454231, 0.20256340668785855, 0.7607076553994155, 0.7370757941164039, 0.2090806057311092, 0.7230392002669159, 0.1769732577851335, 0.18568449178809543, 0.18820984992086764, 0.17489846016998378, 0.18969609153642453, 0.18891031394906588, 0.19648967293745223, 0.18503267044703042, 0.18372640767029158, 0.09194913477425581, 0.0895640066401433, 0.08442056436082257, 0.08480552853941714, 0.09231699173604957, 0.09564138473585349, 0.09120815496710444, 0.08291404196111796, 0.09182495840811677]}, "mutation_prompt": null}
{"id": "5f388440-cc90-4217-b81d-fb154164d244", "solution": "import numpy as np\n\nclass QuantumInspiredAdaptiveHarmonicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(80, self.budget // 25)  # Increased population size\n        self.inertia = np.random.uniform(0.4, 0.9)  # Narrowed inertia bounds\n        self.c1, self.c2 = 1.5, 1.5  # Balanced cognitive and social coefficients\n        self.F = 0.4 + np.random.rand() * 0.4  # Mutation factor range refinement\n        self.CR = 0.7  # Crossover rate adjustment\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.6, 0.6, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            harmonic_factor = np.cos(np.pi * evaluations / (2 * self.budget))  # Altered harmonic factor\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                phase_shift = np.random.choice([-1, 1]) * harmonic_factor  # Quantum-inspired phase shift\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]) * phase_shift)\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.3, self.inertia * 0.95)  # Adjusted inertia decay\n            self.F = 0.4 + np.random.rand() * 0.3  # Further refined mutation factor range\n\n        return global_best, global_best_score", "name": "QuantumInspiredAdaptiveHarmonicOptimizer", "description": "Quantum-Inspired Adaptive Harmonic Optimizer integrates quantum-inspired decision metrics for enhanced exploration with harmonic balance for convergence and diversity.", "configspace": "", "generation": 96, "fitness": 0.21696822648731545, "feedback": "The algorithm QuantumInspiredAdaptiveHarmonicOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "332ab163-2de1-4ac7-a2f3-1eb66fdd976f", "metadata": {"aucs": [0.45022392803776545, 0.484093283568644, 0.4628411593339673, 0.5051984707013639, 0.5142387274608244, 0.5445695965565871, 0.5347541193054735, 0.4852989895658717, 0.5343462611846898, 0.1969822735726, 0.21329606841827764, 0.22370404389791676, 0.1702766304619563, 0.18691824084212516, 0.194769887451252, 0.18768434107959953, 0.21464352183877478, 0.20549961134222172, 0.08450496093999538, 0.09187599642861055, 0.08995262553348404, 0.08544433409482843, 0.09258295430158137, 0.0900401101417343, 0.09006809370629087, 0.1038631355579982, 0.09296840523303418, 0.08178474169354977, 0.08954510346106492, 0.08792928980512826, 0.07871849472497872, 0.08059410396184463, 0.07764946429128616, 0.07791677362609406, 0.08067876312740263, 0.08692830103911742, 0.9827340211945885, 0.9775492561178715, 0.982631281930906, 0.9648512513915313, 0.9789611702966295, 0.9816030447854276, 0.9712779351874663, 0.97884262371297, 0.9826492925344905, 0.20717013698246944, 0.24011587254930944, 0.2242222208279261, 0.22010341578180126, 0.2476103258179433, 0.24249272041934034, 0.20193741638473306, 0.24599140528947505, 0.22491305576063036, 0.32738911611001775, 0.21614577751512365, 0.4703426374478532, 0.2592735005032002, 0.2967794044508846, 0.2918544279123142, 0.3308500831596397, 0.3084351914967183, 0.42621883872118016, 0.13706450682619054, 0.1282986396794149, 0.1243861075814564, 0.14193911088366562, 0.13566150119840292, 0.12367893862850488, 0.11531743619851809, 0.1402407280531619, 0.12831134129363686, 0.12887388861331894, 0.1472407086335744, 0.13511716010747876, 0.14878706664760044, 0.15516128504201954, 0.12364386833595109, 0.09752185739643005, 0.10504820193066533, 0.1344446067287257, 0.007204928121280485, 0.007423875149153547, 0.007256288987895321, 0.004846534785330592, 0.008062772144863284, 0.0077187151637539975, 9.999999999998899e-05, 9.999999999998899e-05, 0.03495542536590479, 0.03828274764207784, 0.04490991470256245, 0.08019263715404301, 0.08046106817885879, 0.06231114182782782, 0.08570305885660223, 0.04911519405825915, 0.05319758297254251, 0.0536975665362277, 0.013908179309649715, 0.0015610717727184698, 0.012714957477721556, 0.019281505465657434, 0.030173072087192443, 0.025347586371460618, 0.008819668661514513, 0.014818635824823123, 0.004637660482964212, 0.0772822935751164, 0.08497104307730785, 0.09816070002369637, 0.09534280166288078, 0.11615659241061471, 0.09905143695457608, 0.06346937580723111, 0.06806768125726381, 0.056765617267814594, 0.3981497534410985, 0.39662431158957046, 0.37941717397694497, 0.4250684946509774, 0.4154506026928344, 0.40057350165639805, 0.4067254003169849, 0.4088294301863623, 0.4065102041530513, 0.09419211262774041, 0.08031431887107976, 0.09400069194173666, 0.07869427347727975, 0.08311907536076157, 0.08228123094850837, 0.07933004771451246, 0.08754258481928612, 0.08279013509413669, 0.234232948878066, 0.16162323964916936, 0.1631306937117757, 0.151997163908015, 0.16476293778912443, 0.13783109785380587, 0.14751515768772827, 0.13761329848073023, 0.14298661515089406, 0.2653517364318838, 0.282704414956255, 0.28864164937400627, 0.25521825780425034, 0.26578965670506227, 0.27181860391592183, 0.285649634929, 0.2774956697769332, 0.26809064594262577, 0.2186359225562018, 0.19775825061526098, 0.2079422250492271, 0.1909012043835363, 0.22934341127462454, 0.1915442592321932, 0.2006241151661271, 0.20483690797895915, 0.1920476576636606, 0.1746279253480727, 0.2118388258810282, 0.20891198178405945, 0.18081481307386404, 0.17915536008339517, 0.17508922346774858, 0.1771327657115518, 0.1792969067305772, 0.18921640662148598, 0.17813282102592165, 0.2217652624536749, 0.20592159053231673, 0.1886490648883966, 0.18169780479548836, 0.1853418973244566, 0.18342050566889756, 0.18643794028465988, 0.20062877203690854, 0.1683533141132879, 0.14878824239442734, 0.19934299162415314, 0.15683492783684583, 0.18408145212665883, 0.5379092663606337, 0.19559968381533277, 0.6039950183774506, 0.3015511115268249, 0.3191422773660787, 0.16065054130404333, 0.3964348640137799, 0.2782111678980974, 0.29773547803466693, 0.43949906168113284, 0.20210399595485706, 0.4184844418090632, 0.4323276138156281, 0.19040670260821846, 0.18256600894587371, 0.1894755051357041, 0.1707581197391117, 0.19516519861827186, 0.18263238996193165, 0.1964465296246225, 0.19446258209592637, 0.1901432891004904, 0.077586826226958, 0.07283876178175597, 0.0734336233130729, 0.07034770163901727, 0.08661873768560713, 0.06119456300479853, 0.07460859096161898, 0.07524399443176755, 0.07424524274914834]}, "mutation_prompt": null}
{"id": "048af06a-f34f-45aa-b36a-2c3960828485", "solution": "import numpy as np\n\nclass HarmonicAdaptiveEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, self.budget // 25)  # Adjusted population size\n        self.inertia = np.random.uniform(0.4, 0.9)  # Adjusted inertia bounds\n        self.c1, self.c2 = 1.5, 1.5  # Modified cognitive and social coefficients\n        self.F = 0.6 + np.random.rand() * 0.2  # Modified mutation factor range\n        self.CR = 0.7  # Adjusted crossover rate\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.6, 0.6, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            harmonic_factor = np.cos(np.pi * evaluations / self.budget)  # Modified harmonic factor\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]) * harmonic_factor)\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.1, self.inertia * 0.95)  # Adjusted inertia decay\n            self.F = 0.4 + np.random.rand() * 0.5  # Adjusted mutation factor range\n\n        return global_best, global_best_score", "name": "HarmonicAdaptiveEvolutionaryAlgorithm", "description": "Harmonic Adaptive Evolutionary Algorithm utilizing stochastic phase transitions and adaptive inertia for optimized convergence through harmonic exploration and evolution.", "configspace": "", "generation": 97, "fitness": 0.35504654164681987, "feedback": "The algorithm HarmonicAdaptiveEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "332ab163-2de1-4ac7-a2f3-1eb66fdd976f", "metadata": {"aucs": [0.8904284592197043, 0.894187065511857, 0.8876697559752539, 0.8873335603833856, 0.8870344677772144, 0.8944512271331511, 0.8824314779182175, 0.8964595555185227, 0.8830653397174587, 0.7841210386522336, 0.8034594236241455, 0.7808371308201152, 0.7842616264142684, 0.796280947131611, 0.7844742982278421, 0.7750001860302532, 0.7902074697812224, 0.787831207397387, 0.7279542277384581, 0.1798234121369553, 0.15507427368855298, 0.15163003838103772, 0.10813489514615848, 0.13814904227733527, 0.1399066545351969, 0.11335306804140799, 0.15006978271503524, 0.13020261688839474, 0.14946780806115278, 0.12212582055545573, 0.16541754228219652, 0.10787162503017955, 0.12798721315332495, 0.13452192439919874, 0.10422138962027916, 0.09592047407435655, 0.989318771111479, 0.9924563627381247, 0.9841811881032317, 0.9881742261496063, 0.9864354437566171, 0.9889487173963347, 0.9870065086843677, 0.9857870170244813, 0.9834367894207384, 0.7034125164689196, 0.7710890728537789, 0.692154040342226, 0.7108131304679839, 0.714350817238588, 0.7121427214886642, 0.6265031080453538, 0.6348959072983142, 0.6576589028970539, 0.23336584345015343, 0.8240928591146451, 0.22554176158448547, 0.27231280032190486, 0.1936985411675467, 0.277863575692999, 0.878158969990341, 0.8970588421336221, 0.8409118681469907, 0.19849215387585328, 0.2076603880863992, 0.27058566068183154, 0.13135827080799123, 0.2010705694695648, 0.2183152419269121, 0.1904199767016126, 0.30509110288764907, 0.36193792122039614, 0.2255457434451087, 0.21729095266931298, 0.25549800303989467, 0.217219751983591, 0.20737778771207083, 0.1921914461811095, 0.2481335053729149, 0.1336610213507945, 0.26206823951729463, 0.07420156197518613, 0.08257629570722491, 0.0857402828075623, 0.19217415004329863, 0.03976631685146981, 0.13720033389165343, 0.013623291724635611, 0.10641140378009717, 0.11881133644767794, 0.2751133160550455, 0.33480252717286085, 0.3049701265290953, 0.2542879833284968, 0.2508190607617473, 0.14280196613754048, 0.33275460829242665, 0.1527777791220879, 0.22718235968239164, 0.06203791559744409, 0.24433001453220837, 0.11502179383946698, 0.07934158609009778, 0.0788852812366082, 0.0787813740994967, 0.07985482996718352, 0.11581735434274565, 0.08453834220259193, 0.1719945164477451, 0.248383196091556, 0.11275140869370204, 0.252758647723637, 0.21769942389571617, 0.26905132072074045, 0.1282631351733342, 0.08220569305587344, 0.12781235961461201, 0.6392437052789153, 0.6811534819419278, 0.6351290552885533, 0.6324306771794281, 0.6170339950322637, 0.6497834955859128, 0.6714575286455118, 0.6554597911085018, 0.6563342915724704, 0.18059177369893464, 0.12617329886887874, 0.14021733800625913, 0.12870966158387165, 0.11845293092031484, 0.11469081007699655, 0.1227899786946296, 0.13188895757917085, 0.13256933484742783, 0.5597719152318543, 0.31483007593439694, 0.2637781465277621, 0.2228922479772697, 0.1977144099208512, 0.19453395982805277, 0.27358904988181976, 0.26602930031588834, 0.130571713091297, 0.3342063602135842, 0.649231390611416, 0.32456281776148466, 0.5742478628987873, 0.40464434692939844, 0.6486854308828601, 0.5790189766325193, 0.6315193419280483, 0.6128654437700306, 0.22729547099758962, 0.2799269443923631, 0.37967593205617745, 0.31754423834873813, 0.2740954319807606, 0.2810845111257585, 0.36305043775336154, 0.25500489062520104, 0.3368940558904806, 0.2183914108029943, 0.21238117958550995, 0.1906277259044158, 0.20545977664684334, 0.213034664445523, 0.20633082005164138, 0.1981317561274467, 0.2412986554320612, 0.20930429536722495, 0.19257220600222424, 0.2090294583977801, 0.2488113973483158, 0.19610196882667053, 0.19016004755063187, 0.21084297933204166, 0.20814544368936427, 0.2194340855982565, 0.19216987159522492, 0.17115607093806307, 0.21129649660859506, 0.18824212558680953, 0.1646558424342811, 0.9109065918731823, 0.17031765835573276, 0.16820567017942134, 0.16657850627111925, 0.16857660460856838, 0.1119035940223253, 0.16898177794190472, 0.9024261256560673, 0.16832427832806696, 0.21003304325804473, 0.8458365249532729, 0.1679158856435824, 0.8877245342034619, 0.16661563250026679, 0.20254653685800772, 0.19573918854882455, 0.1827822013197452, 0.17594154547409457, 0.17169424856929216, 0.18324094995847495, 0.18166548684766115, 0.17093690366008119, 0.17577790031621043, 0.09916875053933805, 0.0920595631351151, 0.07652245943429703, 0.09691631204033224, 0.09053428959496301, 0.12223240757267084, 0.08437031926997574, 0.08704714278927872, 0.09498029468744129]}, "mutation_prompt": null}
{"id": "4a982f93-c835-4fa6-9a25-9650c935bd1c", "solution": "import numpy as np\n\nclass LuminousHarmonyOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(60, self.budget // 25)  # Adjusted population size\n        self.inertia = np.random.uniform(0.4, 0.9)  # Adjusted inertia bounds\n        self.c1, self.c2 = 1.5, 1.8  # Modified cognitive and social coefficients\n        self.F = 0.4 + np.random.rand() * 0.4  # Modified mutation factor range\n        self.CR = 0.9  # Adjusted crossover rate\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            harmonic_factor = np.cos(np.pi * evaluations / self.budget)  # Modified harmonic factor\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                luminosity_factor = 0.5 * (1 + np.cos(2 * np.pi * evaluations / self.budget))  # Introduced luminosity factor\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]) * harmonic_factor * luminosity_factor)\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.2, self.inertia * 0.95)  # Adjusted inertia decay\n            self.F = 0.4 + np.random.rand() * 0.5  # Adjusted mutation factor range\n\n        return global_best, global_best_score", "name": "LuminousHarmonyOptimizer", "description": "Luminous Harmony Optimizer integrates dynamic harmonic phase transitions and adaptive luminosity for enhanced exploration and convergence.", "configspace": "", "generation": 98, "fitness": 0.348378010164443, "feedback": "The algorithm LuminousHarmonyOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "332ab163-2de1-4ac7-a2f3-1eb66fdd976f", "metadata": {"aucs": [0.7924803270985549, 0.7963032575906273, 0.8205551547179875, 0.8009338226706287, 0.8149259071772637, 0.8159113606914982, 0.8027715303109282, 0.8023525262921406, 0.8005473784450219, 0.48827466373144857, 0.498383355629771, 0.5496319311274136, 0.4088603336871949, 0.39599487121772403, 0.4982345619574118, 0.5297882713087017, 0.42792379807318826, 0.457260987984219, 0.16015366057266478, 0.16103281290980376, 0.10523622859505577, 0.14897464442051478, 0.1298995792102987, 0.12280938352542448, 0.14299417756161836, 0.11122836735207386, 0.13573431546374282, 0.11985548509611399, 0.10192024230880248, 0.13071536837424336, 0.12325987306228303, 0.10483502837930736, 0.12209264981062318, 0.10827353022378516, 0.13621003267266407, 0.1066486217195658, 0.9907685543435834, 0.9911276795071965, 0.988509392592919, 0.9884442377603745, 0.9902993591116604, 0.992056594116758, 0.9843661942677944, 0.9871707671813411, 0.9890070430054072, 0.46243947021165166, 0.4812481911987897, 0.4409691039029787, 0.4419128798918629, 0.4399300005233382, 0.4111641583730793, 0.4013895979103116, 0.4423360274572705, 0.4375528251309959, 0.8180960671206385, 0.8386492291901438, 0.8289332810326565, 0.8554732297816187, 0.20796449291438146, 0.8220431019513259, 0.830233433366392, 0.8362983867060635, 0.8388999188195592, 0.40009597680589015, 0.2602926004126349, 0.24592184401205852, 0.16192117816575824, 0.34982434485704217, 0.19272067200987197, 0.26072461105758726, 0.3750426865717553, 0.2294693938567739, 0.21614394518802948, 0.28861282997719273, 0.2560193558885838, 0.2178619172528331, 0.28957112094312787, 0.19795416334140103, 0.26977015005942895, 0.25150834236144726, 0.160729441034819, 0.15042016997432006, 0.27259815520405806, 0.28213365011624814, 0.13622141651547048, 0.15339217218541468, 0.2533540436610088, 0.1367765721351607, 0.2518402508950044, 0.277910815249405, 0.40477093112193585, 0.4121391811534617, 0.4142923648317348, 0.33802018126610767, 0.33198141130308556, 0.34354080360826933, 0.4083539513434914, 0.39138359700206693, 0.4013164907295691, 0.06217546007111541, 0.1017013858823217, 0.14360005705743406, 0.11961747311085202, 0.17595833467114408, 0.236028892255843, 0.15773805474283598, 0.17161829432787068, 0.22593422623695691, 0.2688241229540699, 0.2749759626729925, 0.26419652230617385, 0.262138685367142, 0.2603358416919719, 0.23979364203747633, 0.19518777291912937, 0.25854903598923407, 0.27046222704633427, 0.635104513471026, 0.6640416617875916, 0.6592585121808868, 0.6399153794153363, 0.6256118092637651, 0.636126667321048, 0.6585884605116634, 0.6852223354735845, 0.6238730204275433, 0.1309811623379712, 0.15140089641554444, 0.13878764087947637, 0.1298762568198255, 0.1039480514834562, 0.12090612058444716, 0.134591648274219, 0.1356939374834446, 0.14398747195477102, 0.19312920005924727, 0.17370389321813695, 0.1508559308121885, 0.17153187026344585, 0.21289689335965, 0.1391768795782704, 0.1556251780349176, 0.14388066302341518, 0.3226826471209865, 0.38847188097792473, 0.4190260356958183, 0.37963993706900023, 0.41999359786394386, 0.3939476545563114, 0.42352994310400105, 0.4376642938087658, 0.4397620795764684, 0.40385266507587714, 0.3029745820731512, 0.31896722345155604, 0.2844937935402936, 0.20571886264030503, 0.32438412541740436, 0.33361912943499394, 0.35486546324602863, 0.37353252919705127, 0.3450154577234722, 0.19228514243902783, 0.19595620208152176, 0.22933363882091706, 0.20841681647699506, 0.20895433595104163, 0.23403921526745386, 0.23808426573584962, 0.2417474321112726, 0.20773590922108154, 0.23359519523417926, 0.18759779646760977, 0.21039603500851567, 0.23936769183810347, 0.2371302927721094, 0.22082765823538308, 0.21632794063105787, 0.22840077748411336, 0.18867664861013378, 0.17685599981048128, 0.20553889571720152, 0.1841217714834098, 0.17715441577890834, 0.1856757128386437, 0.1703877974806699, 0.8271589938383244, 0.16008748266462047, 0.8807489263535497, 0.11113696441752419, 0.8241582442932932, 0.8586434605958997, 0.16625222422146835, 0.20953400432928126, 0.1672643809017742, 0.165954286072295, 0.8729539660782242, 0.1277150391724554, 0.18563019527002333, 0.1929875288474745, 0.19916258226349837, 0.192523877024798, 0.1773097936376815, 0.18029086686500517, 0.181961733278042, 0.17405743889106562, 0.1805150664113827, 0.08884759854941726, 0.08597747111456266, 0.08627193661145338, 0.08019139579194468, 0.08931387379941502, 0.10865166234898915, 0.08072677191551847, 0.07472518559500008, 0.08567371908843491]}, "mutation_prompt": null}
{"id": "3191370f-1458-4c4c-9027-dceeae51be8c", "solution": "import numpy as np\n\nclass EnhancedDynamicHarmonicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(80, self.budget // 20)  # Increased population size\n        self.inertia = np.random.uniform(0.4, 0.9)  # Narrowed and increased inertia bounds\n        self.c1, self.c2 = 1.5, 1.5  # Equalized cognitive and social coefficients\n        self.F = 0.4 + np.random.rand() * 0.4  # Adjusted mutation factor range\n        self.CR = 0.9  # Increased crossover rate\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        pop = np.random.uniform(lb, ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-0.4, 0.4, (self.pop_size, self.dim))\n        personal_best = pop.copy()\n        personal_best_scores = np.array([func(ind) for ind in personal_best])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = personal_best[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            harmonic_factor = np.cos(np.pi * evaluations / self.budget)  # Changed to cosine harmonic factor\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.c1 * r1 * (personal_best[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best - pop[i]) * harmonic_factor)\n                pop[i] += velocities[i]\n                np.clip(pop[i], lb, ub, out=pop[i])\n\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                    mutant = np.clip(a + self.F * (b - c), lb, ub)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, pop[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best[i] = trial\n                        personal_best_scores[i] = trial_score\n\n                        if trial_score < global_best_score:\n                            global_best = trial\n                            global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n            self.inertia = max(0.3, self.inertia * 0.95)  # Slightly slower inertia decay\n            self.F = 0.35 + np.random.rand() * 0.5  # Refined mutation factor range\n\n        return global_best, global_best_score", "name": "EnhancedDynamicHarmonicOptimizer", "description": "Enhanced Dynamic Harmonic Optimizer leveraging sinusoidal oscillations for adaptive exploration with improved parameter dynamics.", "configspace": "", "generation": 99, "fitness": 0.3142113426960985, "feedback": "The algorithm EnhancedDynamicHarmonicOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "332ab163-2de1-4ac7-a2f3-1eb66fdd976f", "metadata": {"aucs": [0.7092443514564035, 0.6930138452866434, 0.6922662548207594, 0.6855949747824817, 0.7051195429445984, 0.743255481511495, 0.6997397069444276, 0.6953230036060007, 0.6929441094411055, 0.3154526288984404, 0.35047209102144383, 0.3153249667580902, 0.2540698786455756, 0.37818901042891406, 0.3600593318642187, 0.3394137164149822, 0.2797941601129048, 0.31993247378084744, 0.1288929059074797, 0.11405266579533013, 0.10432465371699817, 0.10719103495479576, 0.1522772879711798, 0.11746417430423484, 0.13494741514331088, 0.1433813458442168, 0.11459151925393274, 0.0996802293677641, 0.10531032031546605, 0.10515278919975668, 0.10233421243643337, 0.10366208325736859, 0.10240581412397165, 0.10502213201757837, 0.12417101040700196, 0.10778819459982936, 0.9865900708644815, 0.9887205321893456, 0.9865325131041918, 0.9769940406585718, 0.9798345091649111, 0.9817153968981159, 0.9691172033348611, 0.9839706140393827, 0.9733234626908571, 0.3899071275290942, 0.39740681613357376, 0.41512038635804527, 0.355152999136075, 0.38307823198746527, 0.3831431929798207, 0.3705335850437229, 0.36083712094466025, 0.369443156450291, 0.7916619549260617, 0.8072521336310636, 0.791940752705527, 0.8093959168728833, 0.7868697995815221, 0.8307303301357039, 0.7655991200855081, 0.7869785175575232, 0.23093147651833545, 0.22126616153486123, 0.20860289898239248, 0.23054548158405774, 0.16061244606991698, 0.2248199974259515, 0.2743391237100432, 0.21507592535998088, 0.191261591494724, 0.1219359409762446, 0.20175728246360902, 0.12156804597480331, 0.1602721237344198, 0.2945530519316085, 0.20190266766820275, 0.25489467821308676, 0.3196278183027018, 0.16616096611191133, 0.23716914269226586, 0.1502586495681162, 0.23213738787723226, 0.15193915101210964, 0.24826945773018538, 0.05590449613191628, 0.17628041104495096, 0.10108568107190563, 0.21519340979921286, 0.20224553568438508, 0.2715490941577485, 0.3367832536930748, 0.3475844338875318, 0.35815044015374464, 0.2796988078032583, 0.32510763214111116, 0.3123601307709146, 0.2871970508392132, 0.2719218343389468, 0.08681061289794345, 0.04638884369557328, 0.17714420850297086, 0.08657472821164758, 0.09295412030502337, 0.13373367418523707, 0.11295519617091143, 0.09066915366709649, 0.09246334877801365, 0.20337452470148254, 0.20702757399870886, 0.20377454500137449, 0.22306218752926021, 0.22600574985931565, 0.22521693267626353, 0.21433047773223912, 0.21844457726363375, 0.19921353303815703, 0.5444307683950365, 0.5974614252112651, 0.5775601975902678, 0.5758181042001269, 0.5705984307657267, 0.6020934800767187, 0.5586887594176543, 0.5603683717526973, 0.559022637141771, 0.15321644078850272, 0.09424006611943747, 0.12471339397227843, 0.13879023006383306, 0.15092986041788314, 0.1191455755951083, 0.10325970045239119, 0.10034461573734355, 0.130054538746173, 0.2082830413065362, 0.12762086251154814, 0.20582508131012767, 0.2046145980160794, 0.18000061057700367, 0.1912086357612488, 0.26014544098061887, 0.13954403620203615, 0.29160857672615925, 0.3553199646580304, 0.3657860552857932, 0.36254613929842894, 0.35694604324120305, 0.375369035815474, 0.38061225600016524, 0.39639864877195774, 0.39569160869783626, 0.3864399261155804, 0.2822978344865431, 0.3045863055264143, 0.29978111158511844, 0.2645845348344018, 0.27358018870803424, 0.25460773714696283, 0.21716577684951222, 0.29328548010407385, 0.3109948343442538, 0.19544531161452938, 0.20909428971465605, 0.22421613844658594, 0.22329120343042663, 0.2205512789289119, 0.21857549639196427, 0.2079654536739145, 0.24623260362330024, 0.20134618356533873, 0.23210720201866064, 0.24364335109206503, 0.22427625914658111, 0.22648275933541095, 0.2170810179209186, 0.20774216891066155, 0.20889447633736768, 0.3062862661039052, 0.2213713482313685, 0.16833582518245316, 0.16473767705930042, 0.8488607070137105, 0.19412476507821708, 0.16622698824721538, 0.1704595627422506, 0.8192649643310422, 0.19723027937596305, 0.16706692953837898, 0.12668332213295308, 0.7974668281212629, 0.8257737350974206, 0.1633085483527802, 0.20755465351753022, 0.16777737138325433, 0.16420538096893722, 0.8323002652112301, 0.12741782978308525, 0.19007237348307204, 0.19143682389640215, 0.18487516733616183, 0.17911408226941117, 0.1777494189286768, 0.19218290418514128, 0.18405395809405845, 0.18716503784147331, 0.18531322873627498, 0.0743038891031842, 0.091514571533999, 0.08229068149008911, 0.09171940449017857, 0.07951263610436254, 0.09950080262158811, 0.08595272721467662, 0.08448515420475611, 0.09461128888608505]}, "mutation_prompt": null}
