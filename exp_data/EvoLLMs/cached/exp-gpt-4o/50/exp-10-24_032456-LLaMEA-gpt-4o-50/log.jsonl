{"id": "65751647-304c-4283-9366-11795df73cbe", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.prob_crossover = 0.9\n        self.F = 0.8  # Differential weight\n        self.current_evaluations = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            # Differential Evolution Mutation\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Simulated Annealing Acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (1 + self.current_evaluations / self.budget))\n                \n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution\n\n# Example of instantiation and usage:\n\n# optimizer = HybridDESA(budget=2000, dim=10)\n# best_solution = optimizer(my_black_box_function)", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.242077439773715, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.18.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3115982640089564, 0.3474792190483905, 0.3647617529501658, 0.33925083128049627, 0.3384643683973415, 0.3155378802583336, 0.317134041217196, 0.30870925348044653, 0.3466085506549459, 0.3315085210379788, 0.30737084076659094, 0.30847323705542573, 0.3020173226560168, 0.3170175956086084, 0.29173509383164453, 0.2937237007273781, 0.3286264546592076, 0.29378205149186, 0.1507536102119864, 0.3283328785599964, 0.17120098500675596, 0.1699013872332389, 0.11453299893805413, 0.1362244950883711, 0.15983054034539768, 0.16594258795170136, 0.16095968257431248, 0.14760131097363338, 0.10539949868034437, 0.12078679027752182, 0.10925071637355122, 0.11909098753208236, 0.15739986715076537, 0.13445675490092412, 0.0964937278249326, 0.11404934979850345, 0.9906709462597262, 0.942929571839025, 0.9925217099109233, 0.9825100668781767, 0.9597952119034575, 0.9573604535918411, 0.9803146284411793, 0.9679767192453211, 0.9864518751177727, 0.2729951406891943, 0.25048443618037963, 0.26664432480505484, 0.14840190403204156, 0.2647199482003355, 0.28192854893960084, 0.2635164684759195, 0.2556081924577981, 0.2898482122424112, 0.2923658557105556, 0.33582495493394604, 0.29928924216588915, 0.346775571809096, 0.3747484660909681, 0.33045096152870146, 0.3450144788729508, 0.29917746845887006, 0.33566542477976713, 0.2530682989187779, 0.30565174508195614, 0.2787520813573394, 0.2940028647417948, 0.28550284320592245, 0.28173393042960837, 0.2650160493536341, 0.22748905702543565, 0.24922930175123614, 0.30470152728458755, 0.27211395178574205, 0.12462647250509074, 0.2558038875445503, 0.29333155112797904, 0.26437578107287873, 0.27409332267016184, 0.23620819067003762, 0.2143415428094151, 0.292313557745028, 0.08577998662990305, 0.06445061952769904, 0.012492465135699238, 0.16240787340883978, 0.014429859133903156, 0.24269726050872253, 0.04944036798898921, 0.17657097506750652, 0.3380868976200426, 0.24665902737614687, 0.13636277331984925, 0.10278768852995368, 0.20763740025132937, 0.04189009411560929, 0.3238195073771106, 0.29186663835265203, 0.03137031968312454, 0.15010761795871097, 0.18791089595174304, 9.999999999998899e-05, 0.15602751921809743, 0.16090880928015883, 9.999999999998899e-05, 0.18965615832797122, 0.24098417640291991, 0.17191524550583492, 0.22433357182946534, 0.2061597581172646, 0.21306178963760736, 0.22418867788508146, 0.20942902741994673, 0.2144286269075919, 0.21771750452456406, 0.20719171493569788, 0.22050182079455694, 0.29723820320026983, 0.34404029125959446, 0.30987268828029635, 0.3101162442574409, 0.2825223976972471, 0.33232690282408617, 0.3000019866005599, 0.2937702412637484, 0.3232766697577918, 0.1592840109554602, 0.15831975198301484, 0.08727897368747706, 0.12847371643901329, 0.1042981414084666, 0.1303489626301425, 0.13110504475094653, 0.11001037237319211, 0.08846921306019251, 0.11157100283040033, 0.1438494490114992, 0.13381565197863388, 0.2824087477106044, 0.2809928920289859, 0.1328775011979615, 0.14648195942118403, 0.14979059313911058, 0.12784495901350734, 0.2533046341577666, 0.23984994138720217, 0.2434812337924307, 0.2439211607733358, 0.2511029686260118, 0.24751947426783916, 0.24146863810278618, 0.2460034013024297, 0.22675816961933526, 0.24765724252969912, 0.2230361223473043, 0.24718691607744692, 0.2213140545463903, 0.24798071436956148, 0.25662186759202155, 0.2246833019602924, 0.22486846572617158, 0.22802801387319693, 0.19228747533793267, 0.23138193625790582, 0.1879221174108655, 0.1938522126455856, 0.18207500869294257, 0.200674339776023, 0.13980931275234876, 0.1803203483056941, 0.20783937827204646, 0.19146257585238136, 0.1808236517173405, 0.17385830478454245, 0.1776301948866258, 0.18120692354577284, 0.18245983120769937, 0.17860929553233562, 0.18817066446025743, 0.17762930336776062, 0.18282505683768868, 0.15593264025695974, 0.15410207420832667, 0.4804161843116719, 0.19450481929042107, 0.4423905268392566, 0.4714431656222742, 0.12577296275874883, 0.1841018359918496, 0.1702471640088683, 0.11223213354050166, 0.11599706632944795, 0.20506131821064078, 0.16743005820970902, 0.20088738419014296, 0.1940166328808739, 0.1663554350224684, 0.15608853966385627, 0.1963276763121392, 0.175754584819366, 0.1716437051283245, 0.16701220420985408, 0.18483320917476853, 0.15014157123001237, 0.1445753836995065, 0.18228026740924275, 0.16798321481609235, 0.0654686867362041, 0.06329778541308384, 0.06941436737025908, 0.06781511097962833, 0.08513692317393196, 0.08641065233981826, 0.06746939615437308, 0.07881973878614101, 0.08552519265844172]}, "mutation_prompt": null}
{"id": "bae63a8d-682b-452d-8229-65a16cdb306a", "solution": "import numpy as np\n\nclass HybridDESAAC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.prob_crossover = 0.9\n        self.F = 0.8  # Differential weight\n        self.current_evaluations = 0\n        self.adaptive_rate = 0.2  # Adaptive adjustment factor\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            # Adaptively adjust crossover probability\n            self.prob_crossover = max(0.1, self.prob_crossover - self.adaptive_rate * (self.current_evaluations / self.budget))\n            \n            # Differential Evolution Mutation\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Simulated Annealing Acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (1 + self.current_evaluations / self.budget))\n                \n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution\n\n# Example of instantiation and usage:\n\n# optimizer = HybridDESAAC(budget=2000, dim=10)\n# best_solution = optimizer(my_black_box_function)", "name": "HybridDESAAC", "description": "A novel hybrid algorithm integrating Differential Evolution with Simulated Annealing and Adaptive Crossover for improved global search and local refinement.", "configspace": "", "generation": 1, "fitness": 0.2053970318764542, "feedback": "The algorithm HybridDESAAC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "65751647-304c-4283-9366-11795df73cbe", "metadata": {"aucs": [0.34267124519407044, 0.3235601308293794, 0.3144177452589958, 0.3353829375867211, 0.30648485808943404, 0.2895048242610184, 0.3046524041900357, 0.2957603793516641, 0.328841311218356, 0.3112777125460915, 0.27709002629117374, 0.30646661801531994, 0.2812004115673159, 0.2925928885963155, 0.2975305403946449, 0.2876829965516223, 0.3093668395162028, 0.30031031328066893, 0.17351374287565047, 0.15376800278384584, 0.2554843135891335, 0.17498457012723534, 0.17551499305683482, 0.23471622945198156, 0.2643855105554427, 0.1814389699455391, 0.1829927746690334, 0.1561035649497431, 0.16346009723864185, 0.16495021108033692, 0.11600688290992878, 0.22314173857017572, 0.17252718298542846, 0.13370753934209223, 0.17290652695141395, 0.1415352771139473, 0.973138537400886, 0.9681597459807405, 0.9925217099109233, 0.9726449072105613, 0.9695464653929451, 0.9741026261610615, 0.9749376985298529, 0.9739046373943216, 0.9841429093480369, 0.25485889333489486, 0.22892921819055345, 0.23768154792949703, 0.22643422331233642, 0.2294167017456361, 0.23669456208219752, 0.20373722088138224, 0.23167242959050194, 0.24333569701733027, 0.27156434221422054, 0.23421913706429498, 0.3415227854326115, 0.25639933019443284, 0.3076482355708855, 0.2651874053166332, 0.2575088733992258, 0.2936448998096465, 0.26437853612596673, 0.1505919130171538, 0.1738416409111585, 0.16229234432707929, 0.18674979193489438, 0.16662105907138736, 0.1591890263969924, 0.152046302174071, 0.21695831727808668, 0.15626665510099425, 0.18109071933524168, 0.054622442162966744, 0.022119150376821328, 0.1963672756834599, 0.16848073450254564, 0.14307178456897052, 0.17377327021167444, 0.12875362696888681, 0.14560046213513056, 0.036574275070179074, 9.999999999998899e-05, 9.999999999998899e-05, 0.007061653172940718, 9.999999999998899e-05, 9.999999999998899e-05, 0.002696492796410932, 9.999999999998899e-05, 9.999999999998899e-05, 0.038480708565186816, 0.11705887097599676, 0.09115000322846989, 0.08542759536192968, 0.0025794763978541635, 0.028659508933606914, 0.08656354964420043, 0.10806357034509506, 0.03130452608704726, 0.05019707098954773, 0.0012030266670739476, 0.019395637241953367, 0.0007184445470455048, 9.999999999998899e-05, 9.999999999998899e-05, 0.018106977004033076, 0.062063150195621364, 0.0011295131781599022, 0.09785128039215618, 0.0912552670726684, 0.1278616538263927, 0.1083992993245505, 0.11467213637012774, 0.09310352068595107, 0.09558021834755515, 0.1285092647310384, 0.11765889526456852, 0.3522858997433357, 0.31379300499546203, 0.3245826864457577, 0.3027400761738831, 0.3197242239578546, 0.2680670408461824, 0.2887555497879465, 0.27118153755995145, 0.2846822728850197, 0.09360197280081484, 0.13874100425749403, 0.10383346851487762, 0.08691064253594682, 0.09569002997932985, 0.12273121524089148, 0.1064470098260335, 0.13546797978021163, 0.10202162636357648, 0.1487806372909345, 0.11834988404663349, 0.14532428110950646, 0.14148889025268985, 0.16953145076865495, 0.16425341452362796, 0.13685668684068408, 0.12930804373008964, 0.1258183486114831, 0.23615248827543334, 0.2191891757328458, 0.2424409708643701, 0.22439818588301896, 0.23667692867125456, 0.21211207172157576, 0.22736673734157486, 0.24241418577321006, 0.2495095482335944, 0.1809175304229751, 0.2047275775377536, 0.18961194618381427, 0.1707404365541506, 0.21269164595282286, 0.1939732023725752, 0.17382887535139957, 0.229433060639753, 0.19896000803381053, 0.19057283624813492, 0.1835271740723623, 0.1714362517997906, 0.17648780332200653, 0.16973321398704977, 0.19533189601081813, 0.2163495566532806, 0.18066221829987406, 0.17550621538719857, 0.18771798147086038, 0.20724675528083214, 0.1976084423883071, 0.19190841702062822, 0.20330676291473782, 0.17742204521372917, 0.19739149160247382, 0.1808802897995213, 0.1773719817128554, 0.18221078262474155, 0.21027826329816246, 0.11296635893982021, 0.12832577491650576, 0.20251988697626033, 0.3494163844088839, 0.1366528603698871, 0.16577303225606743, 0.1624558793984825, 0.21074097925486124, 0.2020128745357328, 0.11588316840116908, 0.1096833219743596, 0.2518449469013, 0.17202772529305543, 0.2094741884845155, 0.15376896686341202, 0.15519971299708157, 0.18830003367814174, 0.17824874421084314, 0.16925975230537826, 0.1755941488730639, 0.173159555733975, 0.15014157123001237, 0.1770876648678923, 0.19302263513086226, 0.1788475086316803, 0.09370953975985918, 0.06659233038696644, 0.08388139984317844, 0.07427686814853751, 0.07973987509999425, 0.07748625386273111, 0.08255172063963745, 0.08440479199398865, 0.0752169053719095]}, "mutation_prompt": null}
{"id": "bd9c7900-1b87-4b15-bf25-56491869af79", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.prob_crossover = 0.9\n        self.F = 0.8  # Differential weight\n        self.current_evaluations = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            # Differential Evolution Mutation\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n                \n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Simulated Annealing Acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (1 + self.current_evaluations / self.budget))\n                \n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution\n\n# Example of instantiation and usage:\n\n# optimizer = HybridDESA(budget=2000, dim=10)\n# best_solution = optimizer(my_black_box_function)", "name": "HybridDESA", "description": "A hybrid Differential Evolution and Simulated Annealing algorithm for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65751647-304c-4283-9366-11795df73cbe", "metadata": {"aucs": [0.3115982640089564, 0.3474792190483905, 0.3647617529501658, 0.33925083128049627, 0.3384643683973415, 0.3155378802583336, 0.317134041217196, 0.30870925348044653, 0.3466085506549459, 0.3315085210379788, 0.30737084076659094, 0.30847323705542573, 0.3020173226560168, 0.3170175956086084, 0.29173509383164453, 0.2937237007273781, 0.3286264546592076, 0.29378205149186, 0.1507536102119864, 0.3283328785599964, 0.17120098500675596, 0.1699013872332389, 0.11453299893805413, 0.1362244950883711, 0.15983054034539768, 0.16594258795170136, 0.16095968257431248, 0.14760131097363338, 0.10539949868034437, 0.12078679027752182, 0.10925071637355122, 0.11909098753208236, 0.15739986715076537, 0.13445675490092412, 0.0964937278249326, 0.11404934979850345, 0.9906709462597262, 0.942929571839025, 0.9925217099109233, 0.9825100668781767, 0.9597952119034575, 0.9573604535918411, 0.9803146284411793, 0.9679767192453211, 0.9864518751177727, 0.2729951406891943, 0.25048443618037963, 0.26664432480505484, 0.14840190403204156, 0.2647199482003355, 0.28192854893960084, 0.2635164684759195, 0.2556081924577981, 0.2898482122424112, 0.2923658557105556, 0.33582495493394604, 0.29928924216588915, 0.346775571809096, 0.3747484660909681, 0.33045096152870146, 0.3450144788729508, 0.29917746845887006, 0.33566542477976713, 0.2530682989187779, 0.30565174508195614, 0.2787520813573394, 0.2940028647417948, 0.28550284320592245, 0.28173393042960837, 0.2650160493536341, 0.22748905702543565, 0.24922930175123614, 0.30470152728458755, 0.27211395178574205, 0.12462647250509074, 0.2558038875445503, 0.29333155112797904, 0.26437578107287873, 0.27409332267016184, 0.23620819067003762, 0.2143415428094151, 0.292313557745028, 0.08577998662990305, 0.06445061952769904, 0.012492465135699238, 0.16240787340883978, 0.014429859133903156, 0.24269726050872253, 0.04944036798898921, 0.17657097506750652, 0.3380868976200426, 0.24665902737614687, 0.13636277331984925, 0.10278768852995368, 0.20763740025132937, 0.04189009411560929, 0.3238195073771106, 0.29186663835265203, 0.03137031968312454, 0.15010761795871097, 0.18791089595174304, 9.999999999998899e-05, 0.15602751921809743, 0.16090880928015883, 9.999999999998899e-05, 0.18965615832797122, 0.24098417640291991, 0.17191524550583492, 0.22433357182946534, 0.2061597581172646, 0.21306178963760736, 0.22418867788508146, 0.20942902741994673, 0.2144286269075919, 0.21771750452456406, 0.20719171493569788, 0.22050182079455694, 0.29723820320026983, 0.34404029125959446, 0.30987268828029635, 0.3101162442574409, 0.2825223976972471, 0.33232690282408617, 0.3000019866005599, 0.2937702412637484, 0.3232766697577918, 0.1592840109554602, 0.15831975198301484, 0.08727897368747706, 0.12847371643901329, 0.1042981414084666, 0.1303489626301425, 0.13110504475094653, 0.11001037237319211, 0.08846921306019251, 0.11157100283040033, 0.1438494490114992, 0.13381565197863388, 0.2824087477106044, 0.2809928920289859, 0.1328775011979615, 0.14648195942118403, 0.14979059313911058, 0.12784495901350734, 0.2533046341577666, 0.23984994138720217, 0.2434812337924307, 0.2439211607733358, 0.2511029686260118, 0.24751947426783916, 0.24146863810278618, 0.2460034013024297, 0.22675816961933526, 0.24765724252969912, 0.2230361223473043, 0.24718691607744692, 0.2213140545463903, 0.24798071436956148, 0.25662186759202155, 0.2246833019602924, 0.22486846572617158, 0.22802801387319693, 0.19228747533793267, 0.23138193625790582, 0.1879221174108655, 0.1938522126455856, 0.18207500869294257, 0.200674339776023, 0.13980931275234876, 0.1803203483056941, 0.20783937827204646, 0.19146257585238136, 0.1808236517173405, 0.17385830478454245, 0.1776301948866258, 0.18120692354577284, 0.18245983120769937, 0.17860929553233562, 0.18817066446025743, 0.17762930336776062, 0.18282505683768868, 0.15593264025695974, 0.15410207420832667, 0.4804161843116719, 0.19450481929042107, 0.4423905268392566, 0.4714431656222742, 0.12577296275874883, 0.1841018359918496, 0.1702471640088683, 0.11223213354050166, 0.11599706632944795, 0.20506131821064078, 0.16743005820970902, 0.20088738419014296, 0.1940166328808739, 0.1663554350224684, 0.15608853966385627, 0.1963276763121392, 0.175754584819366, 0.1716437051283245, 0.16701220420985408, 0.18483320917476853, 0.15014157123001237, 0.1445753836995065, 0.18228026740924275, 0.16798321481609235, 0.0654686867362041, 0.06329778541308384, 0.06941436737025908, 0.06781511097962833, 0.08513692317393196, 0.08641065233981826, 0.06746939615437308, 0.07881973878614101, 0.08552519265844172]}, "mutation_prompt": null}
{"id": "f6633b6d-8adf-4e3f-a50d-b266575438c4", "solution": "import numpy as np\n\nclass HybridDEASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.prob_crossover = 0.9\n        self.F = 0.8  # Differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n\n    def __call__(self, func):\n        # Initialize population with evaluation\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Select indices for mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial solution and calculate acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                # Adaptive simulated annealing acceptance\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                # Adaptive temperature schedule\n                self.temperature *= 0.99\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution\n\n# Example of instantiation and usage:\n\n# optimizer = HybridDEASA(budget=2000, dim=10)\n# best_solution = optimizer(my_black_box_function)", "name": "HybridDEASA", "description": "A synergy of Differential Evolution with Adaptive Simulated Annealing for dynamic exploration-exploitation balance in optimization.", "configspace": "", "generation": 3, "fitness": 0.40234357235487167, "feedback": "The algorithm HybridDEASA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.31.", "error": "", "parent_id": "65751647-304c-4283-9366-11795df73cbe", "metadata": {"aucs": [0.9048941760814811, 0.9159971820858779, 0.9185073093578443, 0.9160105573254462, 0.9181458675060415, 0.8924878256256377, 0.9143943712899354, 0.91182038422012, 0.17557691717029844, 0.8595849935551951, 0.8736601127619976, 0.878716102738663, 0.8809508901463649, 0.8628798316994561, 0.861277527926544, 0.8793759319240837, 0.8945867456539307, 0.8483508281519704, 0.18275047793259647, 0.15375887126495713, 0.06917037965591322, 0.1628350151699819, 0.177640859431335, 0.15852649586249645, 0.14070133329324996, 0.142028389865532, 0.15995805287966125, 0.10900827356091247, 0.11968722715505997, 0.12008011331552804, 0.13903079863422896, 0.15666117684425118, 0.693909460497117, 0.12619221403909175, 0.1391917792180788, 0.15267261417969635, 0.9906793203305603, 0.9865386267336724, 0.9925217099109233, 0.9621818279154466, 0.9702818499472428, 0.956824118199513, 0.9843140188643227, 0.9736616244875693, 0.9827593218889598, 0.7955895208728666, 0.8035732221321922, 0.8152266926849971, 0.14989724105789415, 0.8021116550206293, 0.1521897064708292, 0.7697043534668826, 0.7602998820571558, 0.7812767239463106, 0.5324726383017302, 0.39481218059254297, 0.3188733063975172, 0.8994160191838193, 0.8989259326160526, 0.8997775653390799, 0.9233116166521368, 0.9094555581915064, 0.7504487391773712, 0.29008677678221795, 0.5566613584280183, 0.5793361990527167, 0.545094199058203, 0.6411448425531703, 0.5542893557251998, 0.758919980677266, 0.13608643012500887, 0.28298821906933724, 0.5823593565330332, 0.28816893496829354, 0.12479967610668863, 0.6821849184567887, 0.6149792665726117, 0.6071684800755218, 0.6728449591555945, 0.3999295023984548, 0.13314861543208867, 0.48021307115704726, 0.07528123582844926, 0.07066557007902707, 0.023110637546623236, 0.11096173637493734, 0.3395091406787244, 0.038181744970564035, 0.032654840165407206, 0.27683050504578954, 0.37025860583625936, 0.18049452084619078, 0.15312940603448, 0.19329188051751645, 0.22305966624463003, 0.07890228969134427, 0.17660849526872313, 0.7050649549046947, 0.03138469063571825, 0.16823991033559527, 0.2074313952835224, 9.999999999998899e-05, 0.1397002613711933, 0.3432208623543844, 9.999999999998899e-05, 0.19450946137311387, 0.28884169901949186, 0.21767911616032976, 0.3542469807208082, 0.38475140368388205, 0.41216077946683105, 0.4160386973509602, 0.40814677848316927, 0.4737774928590326, 0.3774446242543008, 0.3698792051279395, 0.2753951437808252, 0.6710544029909242, 0.84830384079048, 0.735716052389256, 0.6336501799966363, 0.6919465396407272, 0.5780355076389647, 0.6567834060861839, 0.6899152058091409, 0.8730608924886809, 0.09197821133585671, 0.09445861951691004, 0.6941513836591923, 0.1103805594550682, 0.0862709911436299, 0.14810541588235193, 0.14690919851704387, 0.07233001215173229, 0.12163466599292772, 0.1241916784551631, 0.12794313045430405, 0.12843553113490547, 0.11052476588866533, 0.7046456754196129, 0.13645222057872453, 0.16010554873979577, 0.11458659977564434, 0.18227406157913917, 0.44671685452599974, 0.3628105662078863, 0.3745070723671847, 0.42769123077506355, 0.6033179826575692, 0.7272825318771451, 0.5285599199069209, 0.2946034522919623, 0.4741325840574625, 0.34011207488190554, 0.33146080678819234, 0.39465557531357176, 0.21372755371782926, 0.565042828010449, 0.21464169559341673, 0.4015602182612745, 0.4027362327148416, 0.4445585453664287, 0.18367856860394804, 0.22005502032473434, 0.19013939422552228, 0.18324631052724794, 0.16922371641172307, 0.1786344541512217, 0.24160806172498173, 0.17072516406805716, 0.16123567454956644, 0.35623713333132057, 0.7717325148558946, 0.8130523892470607, 0.18917796352973104, 0.19747486785115065, 0.21987325323571072, 0.19549832185810012, 0.807488907871923, 0.20724667611032077, 0.18704252981026948, 0.16274093419261604, 0.15452567263710681, 0.9251354839429693, 0.18570024180067568, 0.8984982731063463, 0.8926606767497776, 0.1467690733580299, 0.1723012803479127, 0.2127948076577202, 0.11242052677083103, 0.11611533914707028, 0.21064951829831358, 0.16735567022885245, 0.2112783292585253, 0.21334602035782402, 0.15637186888537058, 0.15641066959786365, 0.19981159588126463, 0.16206759240688084, 0.19157912788877152, 0.166799977524566, 0.16174106602406357, 0.15014157123001237, 0.16487551760314068, 0.23655361560447008, 0.1658753504071674, 0.08434155283753098, 0.08405067253330611, 0.05799424105193973, 0.06664491494260072, 0.06612666997639993, 0.07847995787087036, 0.07508026380628763, 0.08353548313480519, 0.0805011913931285]}, "mutation_prompt": null}
{"id": "e5ee962c-62b9-4bf6-94f5-2db311beae74", "solution": "import numpy as np\n\nclass EnhancedHybridDEASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.prob_crossover = 0.9\n        self.F = 0.7  # Slightly modified differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n\n    def __call__(self, func):\n        # Initialize population with evaluation\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Select indices for mutation with dynamic neighborhood\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                neighbors = np.random.choice(indices, 5, replace=False)\n                a, b, c = np.random.choice(neighbors, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial solution and calculate acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                # Adaptive simulated annealing acceptance\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                # Adaptive temperature schedule with more aggressive cooling\n                self.temperature *= 0.98\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASA", "description": "Combines Differential Evolution and Adaptive Simulated Annealing with dynamic neighborhood search for enhanced exploration and exploitation in optimization.", "configspace": "", "generation": 4, "fitness": 0.36638520054726664, "feedback": "The algorithm EnhancedHybridDEASA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.31.", "error": "", "parent_id": "f6633b6d-8adf-4e3f-a50d-b266575438c4", "metadata": {"aucs": [0.9318408690300415, 0.9250502059611868, 0.9238452889649255, 0.9107803312819172, 0.20769433296263917, 0.9383385246259673, 0.9453967122405319, 0.9289213412022055, 0.9356748928518643, 0.04461184980973176, 0.890697707754635, 0.8746845150310533, 0.8473672496765751, 0.8877571124853815, 0.8373115094343127, 0.062355879327518404, 0.8850168494944797, 0.8609083936737049, 0.13011045207326988, 0.2451980010580842, 0.16649187846647473, 0.12021133123325034, 0.12762539391955308, 0.1527072375493762, 0.18388431942151928, 0.16075217023563548, 0.18352816184815035, 0.7569873359654207, 0.09651999711862536, 0.144384112388117, 0.12199297258822661, 0.12366531881046927, 0.12604596519784717, 0.10902907584360089, 0.13647100550375413, 0.1401208154410739, 0.9744486140485213, 0.9753564712087881, 0.9827067351284869, 0.9700105379786429, 0.9932260223662936, 0.97998489916292, 0.951730134128351, 0.9569016460057971, 0.9807666833574232, 0.8382900345234263, 0.8092198481033952, 0.7869706856272536, 0.8479045345661138, 0.15051150342006114, 0.7530740733845587, 0.5985528345902025, 0.8334450382002435, 0.7812819812728283, 0.8889634078781784, 0.6239606002786475, 0.3761386914432855, 0.1998301244234073, 0.9345392261154464, 0.9298140551045052, 0.8210581800152321, 0.8210432192303092, 0.8489804403607539, 0.24149903641560044, 0.19064788889082407, 0.23719414611306355, 0.2796129662293054, 0.33652487002159337, 0.1591413252637185, 0.16338303331323445, 0.2657663466825636, 0.28950006300904274, 0.17798678805341728, 0.1319964260936084, 0.1949463723790793, 0.1456836888046782, 0.1301370877492546, 0.19513789871392273, 0.20916126437177007, 0.33636644261263315, 0.21843149897242042, 0.034519096984640396, 0.14641229140936773, 0.1420751543695471, 0.20432742070132826, 9.999999999998899e-05, 0.04586642033101651, 0.06791964512270188, 0.0619552720051153, 0.0735220796234789, 0.2941054670197808, 0.05705734431518972, 0.12380464575567907, 0.06838455627403472, 0.10123552452294626, 0.12406518195720195, 0.4078676821783841, 0.3238850051304265, 0.12584553799983966, 0.17442403338757595, 0.057135005518431536, 0.05954197527295779, 0.37748347780714864, 0.1235172805049276, 0.08624798207790352, 0.07657871001309746, 0.15955709055101652, 0.10617922083120501, 0.24991351961370434, 0.2510029918350606, 0.19689883536999297, 0.34278767662803644, 0.37985972538294044, 0.3511274325973335, 0.33389951357301906, 0.08468510834850296, 0.11522290852750794, 0.6830042774797247, 0.5374568068963121, 0.6169800848961078, 0.5574002535500986, 0.5578086598954646, 0.6170585350700348, 0.7426334661427743, 0.5982208832675462, 0.6522632286143866, 0.11209177631427969, 0.18481475977546902, 0.0878871646549666, 0.13039373017293365, 0.1570160949265058, 0.09906592588836627, 0.10345347687936934, 0.07092027959697167, 0.12064935201005877, 0.1982371291347086, 0.16376132207379246, 0.14251519109782074, 0.12423052120492972, 0.19966003370743102, 0.1464049997067357, 0.11619431326958585, 0.1429204970250394, 0.18200681692828546, 0.7891433790540661, 0.3764610938947177, 0.7353291767332416, 0.5403480582547138, 0.5842046498072007, 0.43031320133772255, 0.5979421005427012, 0.3908056050244313, 0.7236232066594119, 0.34856253015403016, 0.25956355279336063, 0.5144998542733593, 0.3929734405399552, 0.36101304892831754, 0.29455792568506944, 0.2358617417569453, 0.4084707191165361, 0.49832414869274655, 0.1930687772320161, 0.20079832354689164, 0.18179926199647134, 0.18881498308431177, 0.19291567020797928, 0.18175519655360295, 0.15541061937765643, 0.1999067919830816, 0.18577270224288778, 0.245304974463183, 0.21830264471835092, 0.8307211234762917, 0.24046361631848767, 0.19790208608262705, 0.8207297821707962, 0.2209362641198509, 0.7869713890679244, 0.19271953123589836, 0.18618741640738945, 0.9028460539137175, 0.15411143856502074, 0.8925344984372066, 0.16639591438696444, 0.1793038608113353, 0.15361226541293693, 0.20569942229872573, 0.9075711545676408, 0.160664544925743, 0.2116528881369104, 0.8797638073623678, 0.16859195642625602, 0.4982316857470812, 0.09829816794890234, 0.21363336653854437, 0.16824504708036292, 0.157309460841614, 0.16761341050593814, 0.16066969815568277, 0.1781097027217633, 0.18472198707702536, 0.2175279402496556, 0.1933190420583214, 0.1809703483590861, 0.18203496912875095, 0.17447658053113502, 0.06754250317095234, 0.0868419228549494, 0.07846732652421784, 0.08965514148792486, 0.08435448403217993, 0.0801048331235037, 0.0867235944625705, 0.07536989523145365, 0.07988894779426703]}, "mutation_prompt": null}
{"id": "0fd28e09-cd5d-456f-a08d-43b82bb15173", "solution": "import numpy as np\n\nclass HybridDEASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.prob_crossover = 0.9\n        self.F = 0.8  # Differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n\n    def __call__(self, func):\n        # Initialize population with evaluation\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Select indices for mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial solution and calculate acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                # Adaptive simulated annealing acceptance\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                # Adaptive temperature schedule\n                self.temperature *= 0.99\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution\n\n# Example of instantiation and usage:\n\n# optimizer = HybridDEASA(budget=2000, dim=10)\n# best_solution = optimizer(my_black_box_function)", "name": "HybridDEASA", "description": "A synergy of Differential Evolution with Adaptive Simulated Annealing for dynamic exploration-exploitation balance in optimization.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f6633b6d-8adf-4e3f-a50d-b266575438c4", "metadata": {"aucs": [0.9048941760814811, 0.9159971820858779, 0.9185073093578443, 0.9160105573254462, 0.9181458675060415, 0.8924878256256377, 0.9143943712899354, 0.91182038422012, 0.17557691717029844, 0.8595849935551951, 0.8736601127619976, 0.878716102738663, 0.8809508901463649, 0.8628798316994561, 0.861277527926544, 0.8793759319240837, 0.8945867456539307, 0.8483508281519704, 0.18275047793259647, 0.15375887126495713, 0.06917037965591322, 0.1628350151699819, 0.177640859431335, 0.15852649586249645, 0.14070133329324996, 0.142028389865532, 0.15995805287966125, 0.10900827356091247, 0.11968722715505997, 0.12008011331552804, 0.13903079863422896, 0.15666117684425118, 0.693909460497117, 0.12619221403909175, 0.1391917792180788, 0.15267261417969635, 0.9906793203305603, 0.9865386267336724, 0.9925217099109233, 0.9621818279154466, 0.9702818499472428, 0.956824118199513, 0.9843140188643227, 0.9736616244875693, 0.9827593218889598, 0.7955895208728666, 0.8035732221321922, 0.8152266926849971, 0.14989724105789415, 0.8021116550206293, 0.1521897064708292, 0.7697043534668826, 0.7602998820571558, 0.7812767239463106, 0.5324726383017302, 0.39481218059254297, 0.3188733063975172, 0.8994160191838193, 0.8989259326160526, 0.8997775653390799, 0.9233116166521368, 0.9094555581915064, 0.7504487391773712, 0.29008677678221795, 0.5566613584280183, 0.5793361990527167, 0.545094199058203, 0.6411448425531703, 0.5542893557251998, 0.758919980677266, 0.13608643012500887, 0.28298821906933724, 0.5823593565330332, 0.28816893496829354, 0.12479967610668863, 0.6821849184567887, 0.6149792665726117, 0.6071684800755218, 0.6728449591555945, 0.3999295023984548, 0.13314861543208867, 0.48021307115704726, 0.07528123582844926, 0.07066557007902707, 0.023110637546623236, 0.11096173637493734, 0.3395091406787244, 0.038181744970564035, 0.032654840165407206, 0.27683050504578954, 0.37025860583625936, 0.18049452084619078, 0.15312940603448, 0.19329188051751645, 0.22305966624463003, 0.07890228969134427, 0.17660849526872313, 0.7050649549046947, 0.03138469063571825, 0.16823991033559527, 0.2074313952835224, 9.999999999998899e-05, 0.1397002613711933, 0.3432208623543844, 9.999999999998899e-05, 0.19450946137311387, 0.28884169901949186, 0.21767911616032976, 0.3542469807208082, 0.38475140368388205, 0.41216077946683105, 0.4160386973509602, 0.40814677848316927, 0.4737774928590326, 0.3774446242543008, 0.3698792051279395, 0.2753951437808252, 0.6710544029909242, 0.84830384079048, 0.735716052389256, 0.6336501799966363, 0.6919465396407272, 0.5780355076389647, 0.6567834060861839, 0.6899152058091409, 0.8730608924886809, 0.09197821133585671, 0.09445861951691004, 0.6941513836591923, 0.1103805594550682, 0.0862709911436299, 0.14810541588235193, 0.14690919851704387, 0.07233001215173229, 0.12163466599292772, 0.1241916784551631, 0.12794313045430405, 0.12843553113490547, 0.11052476588866533, 0.7046456754196129, 0.13645222057872453, 0.16010554873979577, 0.11458659977564434, 0.18227406157913917, 0.44671685452599974, 0.3628105662078863, 0.3745070723671847, 0.42769123077506355, 0.6033179826575692, 0.7272825318771451, 0.5285599199069209, 0.2946034522919623, 0.4741325840574625, 0.34011207488190554, 0.33146080678819234, 0.39465557531357176, 0.21372755371782926, 0.565042828010449, 0.21464169559341673, 0.4015602182612745, 0.4027362327148416, 0.4445585453664287, 0.18367856860394804, 0.22005502032473434, 0.19013939422552228, 0.18324631052724794, 0.16922371641172307, 0.1786344541512217, 0.24160806172498173, 0.17072516406805716, 0.16123567454956644, 0.35623713333132057, 0.7717325148558946, 0.8130523892470607, 0.18917796352973104, 0.19747486785115065, 0.21987325323571072, 0.19549832185810012, 0.807488907871923, 0.20724667611032077, 0.18704252981026948, 0.16274093419261604, 0.15452567263710681, 0.9251354839429693, 0.18570024180067568, 0.8984982731063463, 0.8926606767497776, 0.1467690733580299, 0.1723012803479127, 0.2127948076577202, 0.11242052677083103, 0.11611533914707028, 0.21064951829831358, 0.16735567022885245, 0.2112783292585253, 0.21334602035782402, 0.15637186888537058, 0.15641066959786365, 0.19981159588126463, 0.16206759240688084, 0.19157912788877152, 0.166799977524566, 0.16174106602406357, 0.15014157123001237, 0.16487551760314068, 0.23655361560447008, 0.1658753504071674, 0.08434155283753098, 0.08405067253330611, 0.05799424105193973, 0.06664491494260072, 0.06612666997639993, 0.07847995787087036, 0.07508026380628763, 0.08353548313480519, 0.0805011913931285]}, "mutation_prompt": null}
{"id": "178cbc80-392b-4d68-83fa-a79dcfc76726", "solution": "import numpy as np\n\nclass HybridPSOASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.omega = 0.5  # Inertia weight\n        self.phi_p = 0.5  # Cognitive parameter\n        self.phi_g = 0.5  # Social parameter\n        self.current_evaluations = 0\n        self.temperature = 1.0\n\n    def __call__(self, func):\n        # Initialize population and velocities\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        velocities = np.random.uniform(\n            -1, 1, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        personal_best = population.copy()\n        personal_best_fitness = fitness.copy()\n        best_idx = np.argmin(fitness)\n        global_best = population[best_idx]\n        global_best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Update velocity\n                velocities[i] = (\n                    self.omega * velocities[i]\n                    + self.phi_p * np.random.rand(self.dim) * (personal_best[i] - population[i])\n                    + self.phi_g * np.random.rand(self.dim) * (global_best - population[i])\n                )\n                # Update position\n                population[i] = population[i] + velocities[i]\n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                trial_fitness = func(population[i])\n                self.current_evaluations += 1\n\n                # Adaptive simulated annealing acceptance\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                # Adaptive temperature schedule\n                self.temperature *= 0.99\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    fitness[i] = trial_fitness\n                    if trial_fitness < personal_best_fitness[i]:\n                        personal_best[i] = population[i]\n                        personal_best_fitness[i] = trial_fitness\n\n                    if trial_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = trial_fitness\n\n        return global_best\n\n# Example of instantiation and usage:\n\n# optimizer = HybridPSOASA(budget=2000, dim=10)\n# best_solution = optimizer(my_black_box_function)", "name": "HybridPSOASA", "description": "A hybrid of Particle Swarm Optimization and Adaptive Simulated Annealing for efficient global and local search capability.", "configspace": "", "generation": 6, "fitness": 0.11131359780871473, "feedback": "The algorithm HybridPSOASA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "f6633b6d-8adf-4e3f-a50d-b266575438c4", "metadata": {"aucs": [0.3634934265297869, 0.30990266961711843, 0.22351098718080498, 0.18825317537251463, 0.19792494795573923, 0.3228327315006303, 0.21028127551193987, 0.3731665960607843, 0.14149608564086924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07581080536720186, 0.09514196043202172, 0.035355705852921915, 0.08434612665906549, 0.06261366439817051, 0.08391068462074724, 0.0507235345840209, 0.05367123721346456, 0.06357884546824955, 0.07759549952420453, 0.07405788497728483, 0.05029388245862154, 0.09032633202438023, 0.046470577522857104, 0.07112512330879306, 0.07211635147470696, 0.057160007799870294, 0.040527431923270685, 0.08678742540962736, 0.07986218601821093, 0.08088204041219926, 0.07003148420569782, 0.08368476334967179, 0.06270329817219011, 0.06283770660230037, 0.08978532787127658, 0.06232063271755506, 0.12202367678784976, 0.02031426647420631, 9.999999999998899e-05, 0.11213292428310417, 0.0896560159823202, 0.08824307120096897, 0.06024007716937407, 0.07423783254256888, 0.02823276869210256, 0.15854490407144972, 0.08013166265521376, 0.10466177829769618, 0.17559931846656363, 0.04055163128114769, 0.09679266402541731, 0.049995118774878944, 0.17894246234908173, 0.06278370865580951, 0.14803460424352466, 0.19202269824319806, 9.999999999998899e-05, 0.11897679204229716, 0.07561758777807881, 0.012949628165922489, 0.010340766930760248, 0.06158936220515521, 0.13318395421729712, 0.18115309889786269, 9.999999999998899e-05, 0.09324664770080182, 0.012105925745140134, 0.13801385473933891, 0.025916615173716462, 0.15666122219136813, 0.20523143614105477, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07464568912363778, 0.031824459394898086, 0.06400960019003399, 0.06734038108229157, 0.006400034404317578, 0.05395622200353978, 0.09645365734048339, 0.0127229940029574, 0.033393947172798866, 0.14924009372442593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11799495984684161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020865756208903408, 0.07198134966246039, 0.04142473978838612, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26468522293868246, 0.28224826272639825, 0.33070845465652843, 0.13820716785862386, 0.2870623692814658, 0.21027803172551196, 0.22087254025639358, 0.34802670314809603, 0.36700408571054444, 0.042981419762612494, 0.05154231458983827, 0.03964556626148075, 0.07042801252340236, 0.1164101649935777, 0.12788786177341682, 0.051877051097953375, 0.11465093994570563, 0.07089424144182399, 0.20236058874195362, 0.1361144862036272, 0.1866360506707886, 0.15576501291404088, 0.18821040707142145, 0.19611199910988697, 0.1746817467420616, 0.10974711504851187, 0.1269599108571352, 0.1411033126144181, 0.2148918461125634, 0.13736521454451633, 0.1708655742032883, 0.20206380704284044, 0.13893383756948952, 0.14867447198597472, 0.18198418496506352, 0.10185552261853115, 0.07652344939101463, 0.14874032012590832, 0.12262396561036637, 0.1285133792636367, 0.1444267602279926, 0.11690405280476301, 0.0769804373394416, 0.1836333090290827, 0.07766177156283904, 0.2513264919289522, 0.182433495040898, 0.18208092445819002, 0.2640089203688736, 0.18094158491520151, 0.24128086064026122, 0.2542257388504876, 0.15323718624987737, 0.16795097004573833, 0.1883377005526593, 0.20662280458776772, 0.1655130464474236, 0.18982214627331462, 0.18291345293558092, 0.1928813043641765, 0.20028210839352045, 0.20311506149771963, 0.15231908028321361, 0.1768969462456873, 0.1869827619956156, 0.1545131752853628, 0.24336365885953093, 0.19712923259523074, 0.3022684707158326, 0.13448590985741116, 0.11518954436647821, 0.16892737264265378, 0.17268276403674676, 0.16729279653152862, 0.09125638448104312, 0.16487905792068125, 0.11476293221713041, 0.09750824033894201, 0.1045465249862022, 0.09719117387524367, 0.166983383951551, 0.17574585939641507, 0.19010111258114837, 0.20733037293608858, 0.18894952493121953, 0.2045864277247178, 0.18261987839363147, 0.17224021426449543, 0.164835136728822, 0.18920429570749198, 0.0996750768090604, 0.078158633172012, 0.08673399738161769, 0.1249745659578464, 0.08319139609185044, 0.03548454087788211, 0.05135761814870343, 0.058799334427952266, 0.059388611541472125]}, "mutation_prompt": null}
{"id": "5a88f310-3c2e-4ef7-a260-4890ebdeaf4f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.current_evaluations = 0\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Differential weight\n        self.prob_crossover = 0.7  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize PSO\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        velocities = np.random.uniform(\n            -1, 1, (self.population_size, self.dim)\n        )\n        \n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        personal_best_positions = np.copy(population)\n        personal_best_fitness = np.copy(fitness)\n        best_idx = np.argmin(fitness)\n        global_best_position = population[best_idx]\n        global_best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Update velocities and positions\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (\n                    self.w * velocities[i]\n                    + self.c1 * r1 * (personal_best_positions[i] - population[i])\n                    + self.c2 * r2 * (global_best_position - population[i])\n                )\n                population[i] = np.clip(population[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_fitness = func(population[i])\n                self.current_evaluations += 1\n\n                # Update personal and global bests\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_fitness[i] = new_fitness\n\n                if new_fitness < global_best_fitness:\n                    global_best_position = population[i]\n                    global_best_fitness = new_fitness\n\n                # Hybrid with Differential Evolution\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                if trial_fitness < new_fitness:\n                    population[i] = trial\n                    new_fitness = trial_fitness\n\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_fitness[i] = new_fitness\n\n                if new_fitness < global_best_fitness:\n                    global_best_position = population[i]\n                    global_best_fitness = new_fitness\n\n        return global_best_position", "name": "HybridPSODE", "description": "Hybridized Particle Swarm Optimization with Differential Evolution for enhanced global and local search dynamics.", "configspace": "", "generation": 7, "fitness": 0.30025164188685727, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "f6633b6d-8adf-4e3f-a50d-b266575438c4", "metadata": {"aucs": [0.9421440782873615, 0.9362090907227257, 0.9262906578933282, 0.9374377751349329, 0.9316219191875921, 0.9254743782621039, 0.9361851626016774, 0.9334187566447338, 0.9150202640850007, 0.8283008464949086, 0.833272639484623, 0.8576843046192602, 0.8331223938981662, 0.8537805182647196, 0.8503510308611868, 0.06064521564338543, 0.8698963616053899, 0.8673362398253068, 0.1399466246482236, 0.15039999954275318, 0.13771015388162144, 0.14540687398547847, 0.07272049511529999, 0.15596006551847874, 0.13455356700021237, 0.14224501208379492, 0.14001579640327733, 0.10027002915656213, 0.14126518088629347, 0.11582749635008327, 0.16925437487023431, 0.12225357275102999, 0.10526128499220067, 0.11467620744266382, 0.023625783657046262, 0.1520389917397138, 0.9917700620002459, 0.9937611021949492, 0.9931074208954647, 0.9934349420908491, 0.9924343298023336, 0.9919428138085407, 0.992660499022468, 0.9920927155862267, 0.989703095747246, 0.5617747474302948, 0.5368262670181303, 0.6641327251088154, 0.5769059395357263, 0.4975122887606891, 0.1505840041751062, 0.590507784484926, 0.08932237908485352, 0.6235095785103768, 0.17305443370539175, 0.17045393162992772, 0.7676535015687729, 0.21393995039905145, 0.19328693426862187, 0.20537344288497417, 0.06834062324352219, 0.1949176335538768, 0.18693249631819386, 0.2793968238936967, 0.12730126150825294, 0.2840644859427055, 0.1356141215198533, 0.1355922300825898, 0.3092860833860186, 0.303394139850087, 0.1364850853659777, 0.2965938704010478, 0.3476862544996038, 0.292346477287325, 0.22479870714262673, 9.999999999998899e-05, 0.3001489208243051, 0.332116834666051, 0.30794912067122204, 0.166719456063391, 0.3141665493523965, 0.08633303222155642, 9.999999999998899e-05, 0.08223334378529978, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028827530448782834, 0.008858799920310245, 0.006108641570600204, 0.0026718552749600555, 0.10059839812635163, 0.04150569081038302, 0.13485294684460336, 0.02439921753092944, 0.011628142308643286, 0.017516556828185426, 0.06970373860013335, 0.018994257163410633, 0.02796753843621136, 0.05360480665982681, 0.039377349039898535, 0.0795740814501511, 0.1358995359061479, 0.0841981191186636, 0.0972642711127395, 0.10646455749873207, 0.10563273648099802, 0.1411339268518137, 0.13127182584940167, 0.04585338944088668, 0.10346423707823049, 0.2307057419606341, 0.1410645916503681, 0.0066947076046115495, 0.08613961551120941, 0.10711663299367502, 0.25736699287560993, 0.5496959954891832, 0.6515387610375813, 0.5560643494518117, 0.5862312718221125, 0.5910663965600609, 0.20974997884128166, 0.5858853406580773, 0.5951179111458631, 0.6589129715897373, 0.0868409116719453, 0.1162625215046228, 0.11288737529837745, 0.16083558062743708, 0.12045595402363773, 0.11401213361527385, 0.10016182085040748, 0.11827216792550188, 0.09423807177130517, 0.2030883891097225, 0.1435864705221045, 0.20099099795667918, 0.14271738956087066, 0.3670058804599745, 0.18921157644864184, 0.1402653681748396, 0.16484244447118346, 0.18737616712179483, 0.44541422198729963, 0.28231260704507444, 0.3759716948422379, 0.29796074637521375, 0.6026173056610971, 0.47387446353394147, 0.509507742804405, 0.5451421569493666, 0.5261660064915771, 0.2014167216311865, 0.21774305870635502, 0.23068118363600854, 0.27907166743171985, 0.32346773433663034, 0.3057779879336565, 0.3863580630125927, 0.28507227055885265, 0.29376870936575405, 0.20249015014643412, 0.18169105080920567, 0.18182980809846572, 0.16653490619825584, 0.20783791103456506, 0.1993645060151774, 0.19710106999736254, 0.18634147163776216, 0.18042173710540432, 0.19126261102050135, 0.2193068908582061, 0.2505417134804675, 0.22630832466457318, 0.2013654226671634, 0.23682052958397626, 0.2450643730915374, 0.20178085411780078, 0.18108745129845705, 0.17259539227093812, 0.1748993147770045, 0.2004267298554111, 0.9524808445908928, 0.20145796578544728, 0.20113623489215382, 0.1674149707837017, 0.12282606463076395, 0.19837702036592142, 0.12734165489414062, 0.21377867074720502, 0.07348150137733989, 0.21274169888428252, 0.21249983948561557, 0.21287135310682226, 0.18937089947373242, 0.1681378364404933, 0.8743900619671252, 0.20278647292362095, 0.1953221463732333, 0.19184856872385425, 0.18340821020574039, 0.18608929298536392, 0.20259413129521675, 0.1688501054151782, 0.18716316323762683, 0.17762169083892154, 0.08101885633172934, 0.06694141734774761, 0.0793030753251256, 0.0987439435116827, 0.0738040627834069, 0.06784491578316154, 0.08678654561802035, 0.09255965183374792, 0.06794978048232847]}, "mutation_prompt": null}
{"id": "cfb4cc74-4b74-4f65-8ac7-023c6737911e", "solution": "import numpy as np\n\nclass EnhancedHybridDEASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.prob_crossover = 0.9\n        self.F = 0.8  # Differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.05  # New parameter for diversity\n\n    def __call__(self, func):\n        # Initialize population with evaluation\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Select indices for mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Introduce diversity-preserving strategy\n                if np.random.rand() < self.diversity_factor:\n                    mutant = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n                # Perform crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial solution and calculate acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                # Adaptive simulated annealing acceptance\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                # Adaptive temperature schedule\n                self.temperature *= 0.98  # Slightly faster cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASA", "description": "An enhanced synergy of Differential Evolution with Adaptive Simulated Annealing and a diversity-preserving strategy for improved global search capabilities in optimization.", "configspace": "", "generation": 8, "fitness": 0.4065344025725732, "feedback": "The algorithm EnhancedHybridDEASA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.31.", "error": "", "parent_id": "f6633b6d-8adf-4e3f-a50d-b266575438c4", "metadata": {"aucs": [0.8999800609517401, 0.9262897159833394, 0.9124481948509509, 0.9210708232519138, 0.9157205981550058, 0.916100950453221, 0.9230574030960274, 0.9104111815159639, 0.8993370727538851, 0.8206305957715523, 0.8567567351550656, 0.843126154871109, 0.851797886439749, 0.8665864181150917, 0.8585187688990142, 0.854719824019782, 0.873719971701769, 0.8609485904942517, 0.15572397245587966, 0.0739765337545043, 0.12941516847230872, 0.18442015257040323, 0.1635150396080186, 0.18542850516080056, 0.16904291005100036, 0.12856690976990426, 0.16241041978909976, 0.1773560584174636, 0.16137994769302555, 0.15096757310899067, 0.14853982175884484, 0.17087751542927776, 0.601678632363765, 0.15241240745213813, 0.15548871471191594, 0.12458892785617715, 0.9836800764708484, 0.9664470943626883, 0.9733240392529335, 0.988517465060903, 0.9711233789244988, 0.9743820616926278, 0.975537945964438, 0.9672326660958787, 0.9820972493274531, 0.7845922999374552, 0.7644109534815517, 0.7696683185829862, 0.7819857223191675, 0.7661380927099164, 0.7841652795010916, 0.7474029985088002, 0.8017337358143872, 0.08021929135887984, 0.8888800232990458, 0.3353504473253983, 0.9046381518929836, 0.37017338285177837, 0.9193561652852169, 0.8662970074862202, 0.8201284795967791, 0.5089612243619428, 0.8892195804298428, 0.1333041063813758, 0.6930329110824738, 0.4559108031898751, 0.2897427782098184, 0.6636945122091282, 0.6849124796313032, 0.13307178831400435, 0.6698844330432778, 0.5152605002080897, 0.010060284373434314, 0.00977011583314602, 0.1252576662887861, 0.7339542793495781, 0.7510326639658351, 0.5766766979128539, 0.6957929686212796, 0.7010695169317227, 0.6214427405177088, 0.20408666061391623, 0.15174155714904414, 0.16957282046124822, 0.05706529958655704, 0.15512969099394702, 0.09432331529938087, 0.2745225133979904, 0.552902563666941, 0.08029383698032067, 0.25324461725656777, 0.0698967110275982, 0.1092658167543592, 0.2641723568161326, 0.06869035851487515, 0.08466166976621337, 0.5121803183817096, 0.17026414640631538, 0.3529114951818213, 0.19751855320663614, 0.22951977805699297, 0.18883415465775777, 0.16708551444888764, 0.23601661010065267, 0.1662663751799328, 0.15493540144516338, 0.2933576336460856, 0.1447259467287999, 0.34508217838847965, 0.43073452313283134, 0.41796149846176345, 0.36304433753109877, 0.46498672496537397, 9.999999999998899e-05, 0.2734358232748617, 0.3487949595440878, 0.3715904347988761, 0.7182022596847888, 0.7457821541028234, 0.8341155853407084, 0.6985478373952453, 0.7352294834199488, 0.5842239866539786, 0.6139043871244726, 0.8654413149561959, 0.6749590342143852, 0.09860116897165572, 0.08870110295566647, 0.12590989944876874, 0.11155474484520256, 0.1431631032342946, 0.06845421723720158, 0.0918491735203022, 0.08794116656575557, 0.0743713627026511, 0.2581814049023329, 0.10014517262996392, 0.14269975174670058, 0.13799928573934306, 0.22113038750200453, 0.7851751003505831, 0.147257894661315, 0.18402693146760063, 0.11836066110813259, 0.6675246178667983, 0.6874540153951718, 0.5325728757536456, 0.5542423308794331, 0.7064587814048742, 0.6725191443118139, 0.49864506890844773, 0.3694391526006423, 0.5324261496576509, 0.3923270861373319, 0.4899241206031282, 0.22673273544993588, 0.2954530227676152, 0.33433318529721723, 0.30133488083562177, 0.2782333371347978, 0.5624312160174836, 0.3816259856178482, 0.19957507016607934, 0.18085196263208514, 0.17943952097433324, 0.18124405207579142, 0.19287947352659807, 0.19554626508758988, 0.19117482327230506, 0.16647794167959618, 0.1835567197857656, 0.2006634508455014, 0.2190888665922902, 0.17530209518581996, 0.1965255942684555, 0.20865664160474295, 0.8028813574435508, 0.24833164574247535, 0.22056587009402528, 0.22227997839769564, 0.22450901301029513, 0.8999370746416104, 0.48007973029826634, 0.1815315228164901, 0.18872993913168346, 0.18661978759712972, 0.17075684731040275, 0.8592442355855525, 0.8858100464237312, 0.13286409339233307, 0.20907706175028917, 0.16740322047382383, 0.3836617622541998, 0.2101334248718265, 0.1853263119320977, 0.21153253014302453, 0.1858239033409692, 0.11267005882805337, 0.16861142390736183, 0.18366379435686475, 0.18462614691617296, 0.18032472770177377, 0.15755311896902435, 0.19216610391830757, 0.16329690509920636, 0.1885810211848864, 0.1796388608609344, 0.05395995107418261, 0.06399327338356431, 0.09447056630453532, 0.07632273514661903, 0.08011110799850463, 0.08104874573958787, 0.07080357927117198, 0.08735233679663812, 0.06908765406292372]}, "mutation_prompt": null}
{"id": "05ceaddc-b65d-4fe1-a88c-953149ba3827", "solution": "import numpy as np\n\nclass RefinedHybridDEASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.prob_crossover = 0.9\n        self.F = 0.9  # Adjusted differential weight for better step size\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.05\n        self.dynamic_factor = 0.2  # New parameter for dynamic mutation\n\n    def __call__(self, func):\n        # Initialize population with evaluation\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Select indices for mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant + self.dynamic_factor * np.random.randn(self.dim), self.lower_bound, self.upper_bound)\n\n                # Introduce diversity-preserving strategy\n                if np.random.rand() < self.diversity_factor:\n                    mutant = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n                # Perform crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial solution and calculate acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                # Adaptive temperature schedule\n                self.temperature *= 0.97  # Adjusted slightly faster cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASA", "description": "A refined hybrid of Differential Evolution with Adaptive Simulated Annealing incorporating a dynamic mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 9, "fitness": 0.2201891750837456, "feedback": "The algorithm RefinedHybridDEASA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "cfb4cc74-4b74-4f65-8ac7-023c6737911e", "metadata": {"aucs": [0.3995922107927774, 0.42240248022159366, 0.41769885297656806, 0.4278122107488357, 0.4389437101601652, 0.4136245522779518, 0.4105412760466216, 0.4400616886591775, 0.42437038303432006, 0.062100303806714274, 0.06847819301873792, 0.06194945470059954, 0.06567071946535574, 0.04854813071185382, 0.0322359750603729, 0.08819731228839933, 0.14032613425735763, 0.062129310293797646, 0.10066697137168634, 0.10649767210807515, 0.10537191367724552, 0.1050590034854465, 0.11460056027938592, 0.13381432397077753, 0.09454354590867298, 0.0998798073514594, 0.1189961394587764, 0.09681562448911485, 0.09575972529848509, 0.10217958749630529, 0.08982547289964771, 0.09428579418722638, 0.09273468910718696, 0.08904486661850819, 0.0851406478019131, 0.10118270923041328, 0.9571926969142961, 0.9953358365737579, 0.9938260055859287, 0.9791743139247412, 0.9712107686889471, 0.9787618160224485, 0.9562670642757354, 0.977537984712826, 0.9744533495936177, 0.2624563768299105, 0.26704191076456474, 0.2568973293334902, 0.2824532233720326, 0.25540881393147075, 0.2646599457447927, 0.2982378112331038, 0.3175880716953524, 0.27112029596397835, 0.3291557613655961, 0.3137244280665795, 0.34341604328906294, 0.3331466085609671, 0.2956586348958551, 0.3368335126954868, 0.3273630700576138, 0.3091550169829482, 0.3247339372680018, 0.18241469452524406, 0.1418977026752013, 0.15951776259880335, 0.16375530759658052, 0.17259397762149054, 0.156145117185287, 0.16242810458072288, 0.15483658351894758, 0.15854171326088384, 0.13297538609264936, 0.10566540927326074, 0.1523230344302159, 0.15972357983454422, 0.14007152006447465, 0.14549833243475407, 0.15197757794194056, 0.16318548176646674, 0.1688194706257513, 0.008783193319760518, 0.0027352889796719015, 0.00276914208156831, 0.01687550618482314, 9.999999999998899e-05, 0.017035517911886178, 0.021522967561918627, 0.0011149537199922621, 0.017354372243135407, 0.10981807706926205, 0.06293960222198924, 0.1326191558184171, 0.09451603254152874, 0.08564752674235099, 0.07826918988431208, 0.1322478832123668, 0.11867720824090533, 0.09204025958720563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09291816657831042, 0.08601238360550778, 0.0953056133962904, 0.11130101499013922, 0.0935665450322305, 0.10438079853004767, 0.08239551608053641, 0.09765848515546915, 0.0825853837920324, 0.3764765870567084, 0.41228014587395856, 0.3958561895955858, 0.38259301067287144, 0.3975726057618235, 0.3954057379650321, 0.41971621113049107, 0.37198159686094545, 0.37631561414278636, 0.10133968425516071, 0.09566963996798405, 0.0829119098057357, 0.09215180358857744, 0.11427519147099696, 0.09554601357174874, 0.08242216181334683, 0.09779788768054765, 0.07652614465935204, 0.1794076841558201, 0.1464343001416335, 0.17262470982966371, 0.22990824004522725, 0.20224838944222479, 0.23052922772523665, 0.2535675038343228, 0.17569029912787937, 0.23384574888845, 0.2824603341601376, 0.26205760011706203, 0.2761288099037964, 0.2809480352147973, 0.27486523673128427, 0.275593694419765, 0.2685126868535035, 0.2792006384804461, 0.2709551140272193, 0.19823894670523146, 0.21265275080881785, 0.20245661190788655, 0.20674120355995973, 0.2056664936277003, 0.21838695131072794, 0.21123480728390898, 0.2137725097012544, 0.22492415481229588, 0.19026235989681783, 0.18363084411416042, 0.19697652459676385, 0.1763480076385069, 0.19490983544966056, 0.209778503607725, 0.18510016868408008, 0.19935906366081857, 0.20049052914665222, 0.200214374093878, 0.18199124538361022, 0.19697406304663345, 0.21248755487419002, 0.17676345638905566, 0.1933551872427779, 0.18940784252063436, 0.19229795902840507, 0.1834506564345071, 0.6286044320205677, 0.5811866507682419, 0.1839117912814927, 0.18504166812791578, 0.2082951693499535, 0.5283266242863509, 0.6502402464394125, 0.20456321456347937, 0.19493415057259256, 0.4987835920835343, 0.5086610530040361, 0.20721365028224814, 0.4368379472416323, 0.20281177548093476, 0.20520079583676976, 0.11264944111353037, 0.5110305252200642, 0.1557637101338154, 0.19407892618148503, 0.1856914712677712, 0.18102756739998338, 0.18107465127992195, 0.17624069081453764, 0.18056495324586797, 0.1848802815014421, 0.18533082102117837, 0.17767311605561242, 0.06515178252417686, 0.06923308405362061, 0.07412367823436761, 0.07748814884490385, 0.07667702261218312, 0.06917498464401817, 0.08057147601426784, 0.07230211100200212, 0.06747849697285002]}, "mutation_prompt": null}
{"id": "d2e4f70c-f1c2-406f-8a3a-ebe1b61e574d", "solution": "import numpy as np\n\nclass EnhancedHybridDEASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.prob_crossover = 0.9\n        self.F = 0.8  # Differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.05  # New parameter for diversity\n\n    def __call__(self, func):\n        # Initialize population with evaluation\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Select indices for mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Introduce diversity-preserving strategy\n                if np.random.rand() < self.diversity_factor:\n                    mutant = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n                # Perform crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial solution and calculate acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                # Adaptive simulated annealing acceptance\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                # Adaptive temperature schedule\n                self.temperature *= 0.98  # Slightly faster cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASA", "description": "An enhanced synergy of Differential Evolution with Adaptive Simulated Annealing and a diversity-preserving strategy for improved global search capabilities in optimization.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cfb4cc74-4b74-4f65-8ac7-023c6737911e", "metadata": {"aucs": [0.8999800609517401, 0.9262897159833394, 0.9124481948509509, 0.9210708232519138, 0.9157205981550058, 0.916100950453221, 0.9230574030960274, 0.9104111815159639, 0.8993370727538851, 0.8206305957715523, 0.8567567351550656, 0.843126154871109, 0.851797886439749, 0.8665864181150917, 0.8585187688990142, 0.854719824019782, 0.873719971701769, 0.8609485904942517, 0.15572397245587966, 0.0739765337545043, 0.12941516847230872, 0.18442015257040323, 0.1635150396080186, 0.18542850516080056, 0.16904291005100036, 0.12856690976990426, 0.16241041978909976, 0.1773560584174636, 0.16137994769302555, 0.15096757310899067, 0.14853982175884484, 0.17087751542927776, 0.601678632363765, 0.15241240745213813, 0.15548871471191594, 0.12458892785617715, 0.9836800764708484, 0.9664470943626883, 0.9733240392529335, 0.988517465060903, 0.9711233789244988, 0.9743820616926278, 0.975537945964438, 0.9672326660958787, 0.9820972493274531, 0.7845922999374552, 0.7644109534815517, 0.7696683185829862, 0.7819857223191675, 0.7661380927099164, 0.7841652795010916, 0.7474029985088002, 0.8017337358143872, 0.08021929135887984, 0.8888800232990458, 0.3353504473253983, 0.9046381518929836, 0.37017338285177837, 0.9193561652852169, 0.8662970074862202, 0.8201284795967791, 0.5089612243619428, 0.8892195804298428, 0.1333041063813758, 0.6930329110824738, 0.4559108031898751, 0.2897427782098184, 0.6636945122091282, 0.6849124796313032, 0.13307178831400435, 0.6698844330432778, 0.5152605002080897, 0.010060284373434314, 0.00977011583314602, 0.1252576662887861, 0.7339542793495781, 0.7510326639658351, 0.5766766979128539, 0.6957929686212796, 0.7010695169317227, 0.6214427405177088, 0.20408666061391623, 0.15174155714904414, 0.16957282046124822, 0.05706529958655704, 0.15512969099394702, 0.09432331529938087, 0.2745225133979904, 0.552902563666941, 0.08029383698032067, 0.25324461725656777, 0.0698967110275982, 0.1092658167543592, 0.2641723568161326, 0.06869035851487515, 0.08466166976621337, 0.5121803183817096, 0.17026414640631538, 0.3529114951818213, 0.19751855320663614, 0.22951977805699297, 0.18883415465775777, 0.16708551444888764, 0.23601661010065267, 0.1662663751799328, 0.15493540144516338, 0.2933576336460856, 0.1447259467287999, 0.34508217838847965, 0.43073452313283134, 0.41796149846176345, 0.36304433753109877, 0.46498672496537397, 9.999999999998899e-05, 0.2734358232748617, 0.3487949595440878, 0.3715904347988761, 0.7182022596847888, 0.7457821541028234, 0.8341155853407084, 0.6985478373952453, 0.7352294834199488, 0.5842239866539786, 0.6139043871244726, 0.8654413149561959, 0.6749590342143852, 0.09860116897165572, 0.08870110295566647, 0.12590989944876874, 0.11155474484520256, 0.1431631032342946, 0.06845421723720158, 0.0918491735203022, 0.08794116656575557, 0.0743713627026511, 0.2581814049023329, 0.10014517262996392, 0.14269975174670058, 0.13799928573934306, 0.22113038750200453, 0.7851751003505831, 0.147257894661315, 0.18402693146760063, 0.11836066110813259, 0.6675246178667983, 0.6874540153951718, 0.5325728757536456, 0.5542423308794331, 0.7064587814048742, 0.6725191443118139, 0.49864506890844773, 0.3694391526006423, 0.5324261496576509, 0.3923270861373319, 0.4899241206031282, 0.22673273544993588, 0.2954530227676152, 0.33433318529721723, 0.30133488083562177, 0.2782333371347978, 0.5624312160174836, 0.3816259856178482, 0.19957507016607934, 0.18085196263208514, 0.17943952097433324, 0.18124405207579142, 0.19287947352659807, 0.19554626508758988, 0.19117482327230506, 0.16647794167959618, 0.1835567197857656, 0.2006634508455014, 0.2190888665922902, 0.17530209518581996, 0.1965255942684555, 0.20865664160474295, 0.8028813574435508, 0.24833164574247535, 0.22056587009402528, 0.22227997839769564, 0.22450901301029513, 0.8999370746416104, 0.48007973029826634, 0.1815315228164901, 0.18872993913168346, 0.18661978759712972, 0.17075684731040275, 0.8592442355855525, 0.8858100464237312, 0.13286409339233307, 0.20907706175028917, 0.16740322047382383, 0.3836617622541998, 0.2101334248718265, 0.1853263119320977, 0.21153253014302453, 0.1858239033409692, 0.11267005882805337, 0.16861142390736183, 0.18366379435686475, 0.18462614691617296, 0.18032472770177377, 0.15755311896902435, 0.19216610391830757, 0.16329690509920636, 0.1885810211848864, 0.1796388608609344, 0.05395995107418261, 0.06399327338356431, 0.09447056630453532, 0.07632273514661903, 0.08011110799850463, 0.08104874573958787, 0.07080357927117198, 0.08735233679663812, 0.06908765406292372]}, "mutation_prompt": null}
{"id": "827a1926-60b8-4e7e-ac36-c3dad51a09c2", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.prob_crossover = 0.9\n        self.F = 0.8  # Differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.1  # Increased diversity for exploration\n\n    def __call__(self, func):\n        # Initialize population with evaluation\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Select indices for mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Introduce dynamic diversity-preserving strategy\n                if np.random.rand() < self.diversity_factor:\n                    mutant = np.random.normal(0, 1, self.dim) * (self.upper_bound - self.lower_bound) / 10 + population[i]\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial solution and calculate acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                # Adaptive simulated annealing acceptance\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                # Adaptive temperature schedule\n                self.temperature *= 0.97  # Adjusted cooling rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV2", "description": "A novel synergy of Differential Evolution with Adaptive Simulated Annealing and a dynamic diversity-preserving strategy for enhanced global search efficiency in optimization.", "configspace": "", "generation": 11, "fitness": 0.4330958258451023, "feedback": "The algorithm EnhancedHybridDEASAV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.31.", "error": "", "parent_id": "cfb4cc74-4b74-4f65-8ac7-023c6737911e", "metadata": {"aucs": [0.9027797545765006, 0.9237598917484271, 0.9292535188910809, 0.9141346488547141, 0.9202297217978775, 0.8950677590785538, 0.9302915774964977, 0.9179514889499233, 0.916858885065648, 0.8461010910738282, 0.843886138163539, 0.8249340864938844, 0.8160306222791487, 0.8677969051084784, 0.8654822363867563, 0.8590823045591818, 0.8451381731069546, 0.8493826142116112, 0.17762148159592084, 0.14045750606717833, 0.12274182238483777, 0.15360449049404945, 0.18035024265940391, 0.15329385508394533, 0.17830647452170956, 0.1260916398234383, 0.14376469047599783, 0.11742193517614419, 0.11474911788467979, 0.1370902633111104, 0.7027998078507133, 0.12430336208816539, 0.1321289369846822, 0.15360509129808708, 0.11310565105704229, 0.11163697430013142, 0.989287707742147, 0.9679793975862421, 0.9721081093731293, 0.9863018849097249, 0.9888091067846374, 0.9785475632113373, 0.9756142576142642, 0.9901323957759549, 0.9821732391840428, 0.7745097270023129, 0.7741524023731535, 0.7953177971455974, 0.7675493872364738, 0.8064936636266921, 0.7913726495890524, 0.7514817321369053, 0.7764291750391423, 0.6802256428758571, 0.9033651641026594, 0.5532535987783089, 0.9170259844404857, 0.646717205005393, 0.8999454314016969, 0.7794182231042353, 0.8577282771049827, 0.8152752857754221, 0.9114544404444268, 0.2727300783781379, 0.34642018813508635, 0.20503408355074615, 0.6728020201075473, 0.13002226110098603, 0.7342596114672677, 0.6686165458956883, 0.7762201818880141, 0.7782257897050368, 0.053605151100914905, 0.44972289004350097, 0.6353803334075457, 0.710708550660482, 0.2775107477682034, 0.6016375366420459, 0.6957226625088747, 0.34873964859899975, 0.4414539269477966, 9.999999999998899e-05, 0.14899920356422058, 0.3246007765483828, 0.14856031100230083, 0.09287431258962875, 0.06222822039289455, 0.20592958726045385, 0.1781571356095003, 0.08512320753687996, 0.356030782574115, 0.23212676507697616, 0.32736969878206246, 0.22909528771763166, 0.2593401736136922, 0.379491077375381, 0.36202016786253166, 0.2283720374732895, 0.6414109822615486, 0.11498240719475017, 0.0378930500905722, 0.11123899779396795, 0.3471716233299852, 0.27650430440968443, 0.08349171201765604, 0.30412545173041805, 0.14223461375853108, 0.24587182010231, 0.3478019043900119, 0.4072462289567269, 0.4483657803678873, 0.3226652404205217, 0.5358865290548476, 0.6171587164192507, 0.255038912604837, 0.2953091492295157, 0.45187354913002287, 0.7799916385758534, 0.7399412969564023, 0.7409454237289819, 0.6710731661198464, 0.5549937185654337, 0.8055568500654553, 0.591628541322147, 0.6134146803458453, 0.792345068350883, 0.10321153483340606, 0.10222155546297274, 0.08282092098392402, 0.09187600303620147, 0.09571007384961072, 0.12140074629941022, 0.15578687962145343, 0.12834599174348127, 0.12213565835553963, 0.24051960938814665, 0.14836809325722988, 0.20079673338676407, 0.15659066372947184, 0.26949244187121646, 0.16373334657725247, 0.1586414204512837, 0.1568001229339483, 0.15013514927688376, 0.49588610510190256, 0.6624402053997236, 0.5164050801149569, 0.5535718221849597, 0.3330971594157308, 0.6453038477310777, 0.4710798952907128, 0.6635014559003476, 0.7306906714988888, 0.3296069771449551, 0.4651700622147338, 0.3949378322217605, 0.42456320144644655, 0.47454894176294915, 0.46448179337040696, 0.3554158807152332, 0.48737013784231153, 0.21219616198225988, 0.2260285139294803, 0.1746544653756258, 0.1951699489153257, 0.26040590147296283, 0.19787857821961385, 0.20125081160977132, 0.16839536515000253, 0.17424125943076052, 0.18010660867760475, 0.7145745000119632, 0.19727368234170262, 0.17901162790834335, 0.24618989766764177, 0.22372017385796716, 0.2054710001631489, 0.24646743812646177, 0.23314770147232844, 0.24449254553796718, 0.18790685349848935, 0.209500978045416, 0.1893196608601233, 0.20075537350676909, 0.1886813118604973, 0.8994354661878105, 0.16618007979099747, 0.9210064188433676, 0.8879178714836987, 0.8355702709722073, 0.32323264820742126, 0.771916618819039, 0.8134950880825951, 0.9247689378959998, 0.2044657058205347, 0.21201724486253448, 0.15521902071041638, 0.8891387592486347, 0.17475207231953394, 0.17810636215527853, 0.16433060699190705, 0.1930035203159418, 0.18877650369784238, 0.16460147367930456, 0.18135875589872008, 0.1719239354249945, 0.17934753914831802, 0.09602100947103065, 0.0774600057022109, 0.07482870268428399, 0.08514459378436456, 0.0722800646645424, 0.0695753517497466, 0.07213233762433868, 0.06870196525761985, 0.07919455656451024]}, "mutation_prompt": null}
{"id": "2ce4836a-c3eb-46cd-bd81-0fc9ddcb8d7e", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * dim)\n        self.prob_crossover = 0.7 + 0.3 * np.random.rand()  # Adaptive crossover probability\n        self.F = 0.9  # Differential weight, slightly increased for exploration\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.2  # Further increased diversity for exploration\n\n    def __call__(self, func):\n        # Initialize population with evaluation\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Select indices for mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Introduce dynamic diversity-preserving strategy\n                if np.random.rand() < self.diversity_factor:\n                    mutant = np.random.normal(0, 1, self.dim) * (self.upper_bound - self.lower_bound) / 5 + population[i]\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial solution and calculate acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                # Adaptive simulated annealing acceptance\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                # Adaptive temperature schedule\n                self.temperature *= 0.95  # Further adjusted cooling rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV3", "description": "A novel integration of Differential Evolution with a dynamic diversity-preserving strategy and adaptive crossover rates for improved exploration and exploitation balance in global optimization.", "configspace": "", "generation": 12, "fitness": 0.4112486158104956, "feedback": "The algorithm EnhancedHybridDEASAV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "827a1926-60b8-4e7e-ac36-c3dad51a09c2", "metadata": {"aucs": [0.8711294665217614, 0.8701947397808542, 0.8505234924216833, 0.8639765205586667, 0.8603571247491308, 0.8651852712990247, 0.8680167235739912, 0.890221362502233, 0.8734653970704667, 0.7675163184013937, 0.7696036910051959, 0.775731542413879, 0.8048690982112063, 0.7944602340406723, 0.8158858606268219, 0.7811559983168082, 0.06024329186533928, 0.7891943075555956, 0.5378997177354262, 0.6532187945325197, 0.5688768333014104, 0.12150493632917803, 0.18784452591303258, 0.6527262396832364, 0.17504828401207229, 0.1538192011112195, 0.15836169677758793, 0.6431192860108987, 0.16789871418140223, 0.15335169149850658, 0.1687371627916, 0.11870764706925097, 0.12362218340617914, 0.12062513043679013, 0.44670708676657045, 0.17929384775574853, 0.9709219141799482, 0.9834165694380999, 0.9815758367022247, 0.977793586359895, 0.988677690396859, 0.9845898675594247, 0.9811472174311647, 0.9887365909379785, 0.9789352038984697, 0.654042787674777, 0.6842534865654564, 0.6792952665955416, 0.6247061384175147, 0.652266202251528, 0.6267240813149606, 0.6393631858166996, 0.7129586639473222, 0.7075265614964527, 0.6780316877276673, 0.6745315264848175, 0.7050825208452018, 0.9187361841525159, 0.7419772448021414, 0.8190403368227934, 0.7278566987165205, 0.8967796195368047, 0.7667214746789153, 0.5834200354396752, 0.3950085629050457, 0.5591292599824733, 0.474638074348133, 0.6251043042505362, 0.37943340291202954, 0.7015228982247652, 0.41183382287085546, 0.5176059640824979, 0.4953646726512083, 0.047035405657841145, 0.5766032413390998, 0.6799105754849135, 0.4513907989043924, 0.5409592359680171, 0.5136172013298266, 0.575499153228016, 0.5752774045942115, 0.08881237704761535, 0.21150958080357063, 0.2712176949417696, 0.08590179508949003, 0.00026440218808654325, 0.3814367978647216, 0.11892605864632988, 0.19077574722527602, 0.08882494931209473, 0.2408839598119321, 0.19014910832043164, 0.22048879640644103, 0.251123214578719, 0.3911148161281348, 0.22286671145618253, 0.5373132050314394, 0.49589724621115705, 0.22940297967687429, 0.12167786489949395, 0.1329673419309172, 0.11712957537697943, 0.21079821394947562, 0.09602158365099966, 0.35834991698610863, 0.13887639369779847, 0.16363178899975261, 0.193372390113711, 0.2991029558408931, 0.33839513123805887, 0.3422371347445007, 0.3957891708635044, 0.48824906370109766, 0.41701792636671653, 0.30561416203848446, 0.3096155564196946, 0.2857902658785766, 0.7422110830749171, 0.7295380714959947, 0.6676576861467647, 0.5974457596258477, 0.7411398307663948, 0.6782631698510705, 0.6791954617514497, 0.6927947469535023, 0.6808711812889856, 0.14180750842147194, 0.12120128494856708, 0.14228976780434954, 0.09525095627401947, 0.09263202000488469, 0.11126223928847301, 0.1120492977699945, 0.10507092956967168, 0.09276976715572527, 0.23903948853796408, 0.1927200808241517, 0.3142161310335073, 0.16102665367429458, 0.25170655234260475, 0.22660845841891064, 0.29028131941718616, 0.15736097375897895, 0.21439101668849347, 0.3855444438768685, 0.4263836236705896, 0.4550806427752113, 0.42974893547304693, 0.5022772492160916, 0.3527615022796544, 0.43254568610156485, 0.5424226907447267, 0.5791498951617667, 0.26535989262392723, 0.35864768790357515, 0.2676985401930859, 0.355714243559196, 0.293185240476351, 0.2407615566447, 0.28136144329830615, 0.3669078639848552, 0.38155261863843526, 0.18303304246183194, 0.20824388950365524, 0.20264104065509492, 0.19517188970539312, 0.18749227580409333, 0.18274436669491556, 0.24059517670187647, 0.17887739936682934, 0.18820408568465052, 0.22990983975204904, 0.5923688566532948, 0.1918491924265826, 0.6724004754054316, 0.22731788806942033, 0.20744010992249462, 0.186274768059706, 0.2166937522157112, 0.2047330503692124, 0.15191310544815717, 0.16535719933361237, 0.8629848117820476, 0.19231030910226388, 0.8630879346335162, 0.17400240139329892, 0.18109713230065272, 0.762448062508641, 0.8895933501143325, 0.16911209503250324, 0.2053529453823567, 0.21103835225605894, 0.20796478038306543, 0.8218163105342937, 0.2052446554648618, 0.15592548742662982, 0.19982150620246286, 0.15246952320016594, 0.17046949681536805, 0.17394303380870735, 0.18160000675842825, 0.18999744512155126, 0.19306186314363227, 0.1789342530006508, 0.17962347082515884, 0.1713474070909251, 0.1717731512216062, 0.06886039057152216, 0.07110422245455306, 0.09291275686427103, 0.08346082159096191, 0.06590941407435125, 0.07208476452891333, 0.07168721559629943, 0.07841008497920898, 0.07540350457002243]}, "mutation_prompt": null}
{"id": "1578d2ca-2958-4fab-b6aa-0365fde45815", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Slightly larger population size\n        self.prob_crossover = 0.85  # Slightly reduced crossover probability\n        self.F = 0.9  # Increased differential weight for more aggressive mutation\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.15  # Further increased diversity for enhanced exploration\n\n    def __call__(self, func):\n        # Initialize population with evaluation\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Select indices for mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Introduce dynamic neighborhood exploration\n                if np.random.rand() < self.diversity_factor:\n                    local_mask = np.random.rand(self.dim) < 0.5\n                    mutant[local_mask] = np.random.uniform(self.lower_bound, self.upper_bound, size=self.dim)[local_mask]\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial solution and calculate acceptance\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                # Adaptive simulated annealing acceptance\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                # Adaptive temperature schedule\n                self.temperature *= 0.95  # More aggressive cooling rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV3", "description": "An enhanced hybrid approach integrating Differential Evolution, Adaptive Simulated Annealing, and dynamic neighborhood exploration to improve global optimization efficiency.", "configspace": "", "generation": 13, "fitness": 0.4207701918058885, "feedback": "The algorithm EnhancedHybridDEASAV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "827a1926-60b8-4e7e-ac36-c3dad51a09c2", "metadata": {"aucs": [0.8523620549898536, 0.8726896997820499, 0.866931390523942, 0.8759341297680729, 0.8899351952367319, 0.8923730892003799, 0.8850301985410276, 0.8852380617174115, 0.8794877672372059, 0.7809374537138464, 0.7772635465082609, 0.7805928927024378, 0.7489200645467209, 0.7977117064241297, 0.7928108592228978, 0.8157645145173527, 0.7725900644338566, 0.7932837482646583, 0.14572324774701317, 0.19014222560691874, 0.5413749013253903, 0.4865088484892822, 0.48396622587444604, 0.6217682321291897, 0.2398045889946725, 0.6308293168112664, 0.65867767821039, 0.11716121567131099, 0.14245198756765676, 0.5505022377957385, 0.1742012694454892, 0.1668160876312118, 0.2164041926165673, 0.1452239627363877, 0.16858109864396842, 0.1570850233235055, 0.9899590291189035, 0.9731196020267847, 0.9816286748587755, 0.9703965671442014, 0.9832366716395223, 0.9855952606520125, 0.9777694913878067, 0.9782465637719423, 0.9722882238440189, 0.7090690571158691, 0.6664680313330855, 0.11526360170859085, 0.7268902016872028, 0.6496812380981608, 0.6302038353804253, 0.676050722117446, 0.638607089519583, 0.7059661300332936, 0.8039286788352412, 0.8079367751290876, 0.8559782226459259, 0.7831456016303913, 0.8529633852341121, 0.8751291865308233, 0.8119861767425413, 0.8026924756502287, 0.7220135299190101, 0.5225213673079256, 0.5866708978019157, 0.6197453463101903, 0.4594817061835861, 0.5595659661985136, 0.49835602958533276, 0.5475652204627337, 0.502377992127553, 0.5750321194236097, 0.04321013327016243, 0.5851946127928703, 0.1213904423665213, 0.619249097424486, 0.5355676091793784, 0.3988237729715368, 0.5080945465362305, 0.4949131552354573, 0.6009391068910603, 0.26623214177566057, 0.0674814113997323, 0.07220751120665314, 0.19366221393497818, 0.3401489260878068, 0.21710203697089991, 0.4168396033446672, 0.2234585061650245, 0.13866610572557092, 0.3048467746831981, 0.2759406258536736, 0.3107376595013355, 0.26844203186502225, 0.5008146860415882, 0.18832182746749537, 0.5058363948579183, 0.6207565779846714, 0.6417255949282081, 0.11098303536326914, 0.20356161973128428, 0.09889076691725462, 0.12767761137881461, 0.2651768030362559, 0.2982388297812866, 0.25289803603426586, 0.16791302446031586, 0.09880387638140897, 0.31600374160750466, 0.40086176807678353, 0.3920042591863482, 0.4021207040700975, 0.4223141147825419, 0.3420859199993067, 0.3343378202004367, 0.37251590909531573, 0.25178008609259894, 0.6441117173875246, 0.7572839944303642, 0.7742355574056188, 0.6408544855117806, 0.6624735500012733, 0.6612335082422764, 0.638151859321258, 0.6936527869348932, 0.7249529074069601, 0.1257439818975581, 0.11206826546085535, 0.12586927889153432, 0.1372502965563237, 0.1035759081019112, 0.07787352236627654, 0.111448285673178, 0.1261628998616665, 0.143870036065457, 0.19055997544943926, 0.15299337137144575, 0.1676548242219429, 0.18220098104821814, 0.19288554858163098, 0.2141726997946184, 0.186370863775711, 0.14509113655618222, 0.1433688790901495, 0.4486824351524894, 0.4356720618255858, 0.4382388885106929, 0.41889863595745047, 0.5114332824944645, 0.48166968358468965, 0.4582008299451148, 0.5019494807206486, 0.4876445723456012, 0.23015924927412534, 0.258625239630329, 0.3775713459945761, 0.4433430228965429, 0.24919679989516352, 0.3285260490706632, 0.4187499530791329, 0.3448681404225369, 0.32541877724182044, 0.17321235946252744, 0.1882697690569448, 0.17706311833690436, 0.17076858504146986, 0.19511502633138678, 0.18267897417642154, 0.18212483844593985, 0.1820361734467768, 0.1930428032247059, 0.5995091868302447, 0.21137208383230577, 0.6714667242542061, 0.19121696535228672, 0.2187657786738868, 0.20050278944551625, 0.2307339116942264, 0.6122837110297354, 0.6682787299905458, 0.7021905895672613, 0.18453060401050192, 0.15193872403428, 0.18548167360354262, 0.1955637544680302, 0.17522853264544325, 0.1768192218686927, 0.18535685087222087, 0.7706983062607514, 0.16564632453666595, 0.16822077647316125, 0.1684983958469164, 0.8389084552050527, 0.20536142415404612, 0.16652470484681248, 0.7901240330526933, 0.20261200042494643, 0.21083111180471903, 0.18731976881740953, 0.18836354399957866, 0.1710633990939434, 0.18917430766834686, 0.16842518743164325, 0.20776493556039632, 0.166747873655809, 0.18327222810527632, 0.17055577188132154, 0.07678823442286398, 0.08109468768373351, 0.07848299419014859, 0.10342684067227814, 0.0735799475262422, 0.06668272983724888, 0.08089790900761751, 0.07107970735269487, 0.10032430165143413]}, "mutation_prompt": null}
{"id": "d0c3a309-494c-48b0-9835-dc6586e66819", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Increased population for more exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.9  # Adjusted differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.15  # Further enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.05\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= 0.95  # Adjusted cooling rate for more gradual cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV3", "description": "A synergistic blend of Differential Evolution with Adaptive Simulated Annealing and Stochastic Direction Sampling for robust and diverse search.", "configspace": "", "generation": 14, "fitness": 0.43583939551105383, "feedback": "The algorithm EnhancedHybridDEASAV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.28.", "error": "", "parent_id": "827a1926-60b8-4e7e-ac36-c3dad51a09c2", "metadata": {"aucs": [0.8915578414639792, 0.8749057164601318, 0.9034536097823035, 0.8572161284359818, 0.8601558234074886, 0.8950593877460477, 0.8752809958017177, 0.8642731806582868, 0.8901684144520716, 0.781694282103375, 0.7982342182383781, 0.7776945774166675, 0.7688841044934589, 0.10259548248631223, 0.771359078373982, 0.7797069896767903, 0.7721020956734529, 0.7882867866782479, 0.15612500814112895, 0.18036123831762085, 0.1497372559518626, 0.5356630083619751, 0.1251469051538615, 0.6136264390366497, 0.17219552197877497, 0.1593735637816489, 0.6393405851846748, 0.6294709500548807, 0.10284984424230448, 0.1594795894973835, 0.6083899374404363, 0.1426094739660121, 0.16602829946067, 0.17095355759877584, 0.5663889979443997, 0.4232396429319777, 0.9778579568255544, 0.9835293612197981, 0.9937497418984048, 0.9831620854544164, 0.9737464331888959, 0.9916334141129828, 0.9907218012423429, 0.9713061756969057, 0.9774993045953397, 0.6167437422267985, 0.6535330348140409, 0.6785246509370078, 0.7235024063698523, 0.6809420348855633, 0.664053050111532, 0.6607639479300802, 0.6638860334512999, 0.6927019269555519, 0.8324680501242536, 0.8275882818838602, 0.7874619101885987, 0.8210061121127987, 0.7982290048893543, 0.36819645925827327, 0.8503091034996346, 0.8024715199471453, 0.8317214884076909, 0.5529826155011501, 0.6569184315560266, 0.6249802063199588, 0.5812159287707603, 0.4966283424226382, 0.6130320341547761, 0.6322442891928315, 0.6383995409283555, 0.13163966544666417, 0.6363503944130389, 0.12472775682812243, 0.4543234337581151, 0.5567000034420844, 0.5838217059163249, 0.5823238024050913, 0.595652684132115, 0.5867718623743046, 0.5858435118526575, 0.19678955353061267, 0.15515973220290258, 0.22742804592451127, 0.058796480058041944, 0.2417729544973798, 0.09219590652838783, 0.17235215569186935, 0.2756768961600876, 0.4228134827342047, 0.4416559754430245, 0.36649880084794373, 0.27919244469679283, 0.3458570669670237, 0.18610900711526868, 0.3181751660386022, 0.4262680790338216, 0.32420081893195984, 0.28931660754314226, 0.13395819234862116, 0.22455292955740103, 0.2998841004077234, 0.18852071501856882, 0.1784778210986251, 0.3019848429411073, 0.14714918166629087, 0.19150594599517223, 0.130534498913222, 0.2838359939812741, 0.4162967823650797, 0.3581573912985965, 0.3455678156063975, 0.3865752332573289, 0.4498240004664864, 0.257417996883025, 0.3000956614190844, 0.39397340731275154, 0.7670035189630978, 0.7570264147564303, 0.8239811007393295, 0.6403758096002374, 0.7393233846362142, 0.7867068441007863, 0.7227417544505779, 0.6787857437752871, 0.6857896149463252, 0.0878004608618167, 0.08596143593939887, 0.11944598787738958, 0.12676260311564402, 0.09045040084152045, 0.13274383792357602, 0.1428625917553189, 0.1463010514230062, 0.10617929006328863, 0.31060997213965824, 0.19367988282275705, 0.20087477212077554, 0.4993673143434566, 0.2747423860792493, 0.34448995721812403, 0.24139786101703553, 0.204993696094521, 0.17230513300494876, 0.44114705738207016, 0.44671765425236376, 0.4766142048688813, 0.5723139504940913, 0.443186826403018, 0.3721162686755096, 0.5233992917293189, 0.5218932770712841, 0.4134354482815181, 0.29774929592795174, 0.30557478686592854, 0.36210313721401477, 0.3707923726115354, 0.3840783388819766, 0.27172168952583664, 0.417100298553458, 0.370776997082352, 0.3617318278955173, 0.19719790446817675, 0.1793311406449709, 0.1871838147260393, 0.19501556870810266, 0.182824478340035, 0.2034823249763391, 0.22231094292094322, 0.21219373606825853, 0.17804445816307524, 0.48541140621438195, 0.2059534746012649, 0.21557160409541298, 0.6150114602080448, 0.22611063495631412, 0.199131286835727, 0.22035506401833005, 0.2153711109761801, 0.21918075748322252, 0.16547688929030369, 0.830427020253427, 0.20778461695937422, 0.19843153127110214, 0.19783528835769693, 0.8860554199346026, 0.16161806622898056, 0.8764463498871807, 0.8687198577851076, 0.16857082065245266, 0.21017109939475154, 0.16841995550292543, 0.8237535383199359, 0.20543600060275058, 0.8013774662819605, 0.8604357906186869, 0.8601398099097635, 0.2108124915975712, 0.18420140279903663, 0.17441055954294205, 0.19360021418392526, 0.1815046052467757, 0.17485863704868843, 0.1782381902644038, 0.2478991221703345, 0.18734769795034012, 0.19863478710580562, 0.09038427604993782, 0.07168634304922794, 0.07811463201354307, 0.09356507853550833, 0.07449408687302217, 0.07293951888275374, 0.08905247507190306, 0.08347988876735968, 0.07610373073330579]}, "mutation_prompt": null}
{"id": "9f543cf6-c8c3-47e4-8ce5-fb86264d9308", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 8 + int(0.8 * dim)  # Adjusted population for dimensional scalability\n        self.prob_crossover = 0.9  # Slightly increased crossover probability\n        self.F = 0.8  # Adjusted differential weight for diverse mutation\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.1  # Fine-tuned diversity factor\n        self.mutation_rate = 0.05  # Added mutation rate for dynamic exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant += direction * (self.upper_bound - self.lower_bound) * self.mutation_rate\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= 0.92  # Further adjusted cooling rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV4", "description": "An enhanced evolutionary algorithm combining Differential Evolution with Simulated Annealing and dynamic mutation strategy for improved exploration and exploitation.", "configspace": "", "generation": 15, "fitness": 0.4232164101829251, "feedback": "The algorithm EnhancedHybridDEASAV4 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.31.", "error": "", "parent_id": "d0c3a309-494c-48b0-9835-dc6586e66819", "metadata": {"aucs": [0.914983546983918, 0.9212138133333996, 0.9287538644939417, 0.9217229443211002, 0.9309830397649848, 0.9177990223242684, 0.908504111419143, 0.9094542709570068, 0.9283054435453812, 0.8383389410966442, 0.8574213575045103, 0.835778529560388, 0.8539738218617401, 0.8654215843645443, 0.8625536107814936, 0.8592143875086687, 0.842326466272893, 0.8522862275215656, 0.12733562965705292, 0.13224709002657387, 0.5579997930421711, 0.15625563236391904, 0.14726653054474226, 0.14060953775775598, 0.14091077835766896, 0.15282031072916702, 0.1334750305504665, 0.11505128109731833, 0.18414843483967802, 0.16972015443181698, 0.10648892456019343, 0.13788827343253252, 0.13924470733812633, 0.1156287137165678, 0.13224925736448856, 0.10516621625864975, 0.986431472197065, 0.9811327549730084, 0.9908078909333508, 0.9821643742613259, 0.9641407539280514, 0.9798011491206761, 0.9530889071826047, 0.9751535927985865, 0.9857965330330921, 0.7548240057640113, 0.7471568224479838, 0.8139001116348263, 0.7657745953576783, 0.7540871688121101, 0.7765700412453223, 0.7875199988624789, 0.8027962549909718, 0.7999569375872567, 0.8016999378659216, 0.8646676140342462, 0.8393674551308976, 0.9132444617884711, 0.8716131827852276, 0.9188686333483977, 0.8448442810554876, 0.8345703045028144, 0.8439105103534468, 0.7432022934368716, 0.5141828890674244, 0.6008471118865004, 0.35918656265176907, 0.13207650912405877, 0.4041435070100272, 0.4680807413186764, 0.43053253295495997, 0.6163833000130962, 0.6870550398449027, 0.10166538623588672, 0.6599957502215754, 0.27073739656559137, 0.21768847006296999, 0.6066192906046298, 0.3168527952835942, 0.5870871707790697, 0.13239584020392015, 0.10624726019602271, 0.1843108413589123, 0.32328844710201865, 0.12576010852901331, 0.20654633691151525, 0.09945110382570788, 0.01697910396368074, 0.19199745075596342, 0.159398138150337, 0.2869847640596236, 0.3423572253726761, 0.7148903568894935, 0.19571266601538384, 0.32138659743328557, 0.08777063248349404, 0.20519919716292845, 0.34988662747423893, 0.34973286788530344, 0.10131167539597774, 0.10825051217483961, 0.21876143351901645, 0.1364512904818197, 0.1410543091909714, 0.19698063261094922, 0.11400882408478796, 0.15793957383185586, 0.15448063765940934, 0.2851450355826942, 0.3231903960939623, 0.3823643516979527, 0.4421149482452632, 0.548896797368724, 0.45212014108826204, 0.3431256371589174, 0.408308279856339, 0.37621340098927436, 0.6669350591949907, 0.6025653767816259, 0.6615400203409725, 0.7399723427465651, 0.7226173782845333, 0.65520149220631, 0.7634736695881895, 0.5785359813314974, 0.6556168788414537, 0.0823354704005631, 0.14054111941705338, 0.15289700700954634, 0.14721464838714182, 0.13471768940058393, 0.1341545831806954, 0.1267358146778761, 0.10771218338400923, 0.1568874151064088, 0.2814051314296867, 0.1564409255329713, 0.13392503915217713, 0.15509331644517788, 0.2618064530416383, 0.2121332121536167, 0.16779243184705173, 0.7058283435241236, 0.28292208167465915, 0.6837427095514308, 0.4339859050527147, 0.48911440665780115, 0.6022955786642386, 0.663251799309462, 0.340420048450083, 0.5162147670187764, 0.6837204634295786, 0.45551958357304445, 0.24770907752671867, 0.2733564272928788, 0.4060636553732635, 0.2201152277941878, 0.32333479336483795, 0.3440389834354144, 0.39203286620670075, 0.4025573874798142, 0.485751672754691, 0.17560930132029295, 0.20217989265978564, 0.20228450579746193, 0.2312210294505388, 0.22183458751738083, 0.20677085207781742, 0.17403582153089736, 0.18678906151521435, 0.19451200245674927, 0.20787518195582733, 0.7210957168542489, 0.2137783434347018, 0.20270197822691916, 0.2045762902233158, 0.2425832351366506, 0.24189350925477848, 0.19236237143464763, 0.5739219662430789, 0.8750305106133782, 0.9296537446306219, 0.1535736744928965, 0.9321051660633203, 0.16786214513631226, 0.9284841618526173, 0.16184862631242847, 0.15768492049876737, 0.1714154743879882, 0.16670342251984605, 0.11329606610315335, 0.2077346216424003, 0.2107036615320711, 0.20836816523129587, 0.9063965187266321, 0.11281834749100539, 0.21182241999560425, 0.9310877073684983, 0.24248949160482958, 0.16889655045997098, 0.1994298930846914, 0.18309485162094785, 0.16237500854341558, 0.16033979766613082, 0.1709014097290965, 0.17555614815099885, 0.17747833392132073, 0.06235166909458001, 0.08313434763266925, 0.08876211753941166, 0.0839809329500365, 0.08519141975588407, 0.0775365113665879, 0.07739167654155665, 0.0650412504037966, 0.07317055419406637]}, "mutation_prompt": null}
{"id": "5c899fc2-7d2b-48c1-9216-5cb8fc5493b3", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Increased population for more exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.9  # Adjusted differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.15  # Further enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.05\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= 0.95  # Adjusted cooling rate for more gradual cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV3", "description": "A synergistic blend of Differential Evolution with Adaptive Simulated Annealing and Stochastic Direction Sampling for robust and diverse search.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0c3a309-494c-48b0-9835-dc6586e66819", "metadata": {"aucs": [0.8915578414639792, 0.8749057164601318, 0.9034536097823035, 0.8572161284359818, 0.8601558234074886, 0.8950593877460477, 0.8752809958017177, 0.8642731806582868, 0.8901684144520716, 0.781694282103375, 0.7982342182383781, 0.7776945774166675, 0.7688841044934589, 0.10259548248631223, 0.771359078373982, 0.7797069896767903, 0.7721020956734529, 0.7882867866782479, 0.15612500814112895, 0.18036123831762085, 0.1497372559518626, 0.5356630083619751, 0.1251469051538615, 0.6136264390366497, 0.17219552197877497, 0.1593735637816489, 0.6393405851846748, 0.6294709500548807, 0.10284984424230448, 0.1594795894973835, 0.6083899374404363, 0.1426094739660121, 0.16602829946067, 0.17095355759877584, 0.5663889979443997, 0.4232396429319777, 0.9778579568255544, 0.9835293612197981, 0.9937497418984048, 0.9831620854544164, 0.9737464331888959, 0.9916334141129828, 0.9907218012423429, 0.9713061756969057, 0.9774993045953397, 0.6167437422267985, 0.6535330348140409, 0.6785246509370078, 0.7235024063698523, 0.6809420348855633, 0.664053050111532, 0.6607639479300802, 0.6638860334512999, 0.6927019269555519, 0.8324680501242536, 0.8275882818838602, 0.7874619101885987, 0.8210061121127987, 0.7982290048893543, 0.36819645925827327, 0.8503091034996346, 0.8024715199471453, 0.8317214884076909, 0.5529826155011501, 0.6569184315560266, 0.6249802063199588, 0.5812159287707603, 0.4966283424226382, 0.6130320341547761, 0.6322442891928315, 0.6383995409283555, 0.13163966544666417, 0.6363503944130389, 0.12472775682812243, 0.4543234337581151, 0.5567000034420844, 0.5838217059163249, 0.5823238024050913, 0.595652684132115, 0.5867718623743046, 0.5858435118526575, 0.19678955353061267, 0.15515973220290258, 0.22742804592451127, 0.058796480058041944, 0.2417729544973798, 0.09219590652838783, 0.17235215569186935, 0.2756768961600876, 0.4228134827342047, 0.4416559754430245, 0.36649880084794373, 0.27919244469679283, 0.3458570669670237, 0.18610900711526868, 0.3181751660386022, 0.4262680790338216, 0.32420081893195984, 0.28931660754314226, 0.13395819234862116, 0.22455292955740103, 0.2998841004077234, 0.18852071501856882, 0.1784778210986251, 0.3019848429411073, 0.14714918166629087, 0.19150594599517223, 0.130534498913222, 0.2838359939812741, 0.4162967823650797, 0.3581573912985965, 0.3455678156063975, 0.3865752332573289, 0.4498240004664864, 0.257417996883025, 0.3000956614190844, 0.39397340731275154, 0.7670035189630978, 0.7570264147564303, 0.8239811007393295, 0.6403758096002374, 0.7393233846362142, 0.7867068441007863, 0.7227417544505779, 0.6787857437752871, 0.6857896149463252, 0.0878004608618167, 0.08596143593939887, 0.11944598787738958, 0.12676260311564402, 0.09045040084152045, 0.13274383792357602, 0.1428625917553189, 0.1463010514230062, 0.10617929006328863, 0.31060997213965824, 0.19367988282275705, 0.20087477212077554, 0.4993673143434566, 0.2747423860792493, 0.34448995721812403, 0.24139786101703553, 0.204993696094521, 0.17230513300494876, 0.44114705738207016, 0.44671765425236376, 0.4766142048688813, 0.5723139504940913, 0.443186826403018, 0.3721162686755096, 0.5233992917293189, 0.5218932770712841, 0.4134354482815181, 0.29774929592795174, 0.30557478686592854, 0.36210313721401477, 0.3707923726115354, 0.3840783388819766, 0.27172168952583664, 0.417100298553458, 0.370776997082352, 0.3617318278955173, 0.19719790446817675, 0.1793311406449709, 0.1871838147260393, 0.19501556870810266, 0.182824478340035, 0.2034823249763391, 0.22231094292094322, 0.21219373606825853, 0.17804445816307524, 0.48541140621438195, 0.2059534746012649, 0.21557160409541298, 0.6150114602080448, 0.22611063495631412, 0.199131286835727, 0.22035506401833005, 0.2153711109761801, 0.21918075748322252, 0.16547688929030369, 0.830427020253427, 0.20778461695937422, 0.19843153127110214, 0.19783528835769693, 0.8860554199346026, 0.16161806622898056, 0.8764463498871807, 0.8687198577851076, 0.16857082065245266, 0.21017109939475154, 0.16841995550292543, 0.8237535383199359, 0.20543600060275058, 0.8013774662819605, 0.8604357906186869, 0.8601398099097635, 0.2108124915975712, 0.18420140279903663, 0.17441055954294205, 0.19360021418392526, 0.1815046052467757, 0.17485863704868843, 0.1782381902644038, 0.2478991221703345, 0.18734769795034012, 0.19863478710580562, 0.09038427604993782, 0.07168634304922794, 0.07811463201354307, 0.09356507853550833, 0.07449408687302217, 0.07293951888275374, 0.08905247507190306, 0.08347988876735968, 0.07610373073330579]}, "mutation_prompt": null}
{"id": "2016f465-9a54-4a0f-8236-106f9a33da12", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Increased population for more exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.9  # Adjusted differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.15  # Further enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.05\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= 0.95  # Adjusted cooling rate for more gradual cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV3", "description": "A synergistic blend of Differential Evolution with Adaptive Simulated Annealing and Stochastic Direction Sampling for robust and diverse search.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0c3a309-494c-48b0-9835-dc6586e66819", "metadata": {"aucs": [0.8915578414639792, 0.8749057164601318, 0.9034536097823035, 0.8572161284359818, 0.8601558234074886, 0.8950593877460477, 0.8752809958017177, 0.8642731806582868, 0.8901684144520716, 0.781694282103375, 0.7982342182383781, 0.7776945774166675, 0.7688841044934589, 0.10259548248631223, 0.771359078373982, 0.7797069896767903, 0.7721020956734529, 0.7882867866782479, 0.15612500814112895, 0.18036123831762085, 0.1497372559518626, 0.5356630083619751, 0.1251469051538615, 0.6136264390366497, 0.17219552197877497, 0.1593735637816489, 0.6393405851846748, 0.6294709500548807, 0.10284984424230448, 0.1594795894973835, 0.6083899374404363, 0.1426094739660121, 0.16602829946067, 0.17095355759877584, 0.5663889979443997, 0.4232396429319777, 0.9778579568255544, 0.9835293612197981, 0.9937497418984048, 0.9831620854544164, 0.9737464331888959, 0.9916334141129828, 0.9907218012423429, 0.9713061756969057, 0.9774993045953397, 0.6167437422267985, 0.6535330348140409, 0.6785246509370078, 0.7235024063698523, 0.6809420348855633, 0.664053050111532, 0.6607639479300802, 0.6638860334512999, 0.6927019269555519, 0.8324680501242536, 0.8275882818838602, 0.7874619101885987, 0.8210061121127987, 0.7982290048893543, 0.36819645925827327, 0.8503091034996346, 0.8024715199471453, 0.8317214884076909, 0.5529826155011501, 0.6569184315560266, 0.6249802063199588, 0.5812159287707603, 0.4966283424226382, 0.6130320341547761, 0.6322442891928315, 0.6383995409283555, 0.13163966544666417, 0.6363503944130389, 0.12472775682812243, 0.4543234337581151, 0.5567000034420844, 0.5838217059163249, 0.5823238024050913, 0.595652684132115, 0.5867718623743046, 0.5858435118526575, 0.19678955353061267, 0.15515973220290258, 0.22742804592451127, 0.058796480058041944, 0.2417729544973798, 0.09219590652838783, 0.17235215569186935, 0.2756768961600876, 0.4228134827342047, 0.4416559754430245, 0.36649880084794373, 0.27919244469679283, 0.3458570669670237, 0.18610900711526868, 0.3181751660386022, 0.4262680790338216, 0.32420081893195984, 0.28931660754314226, 0.13395819234862116, 0.22455292955740103, 0.2998841004077234, 0.18852071501856882, 0.1784778210986251, 0.3019848429411073, 0.14714918166629087, 0.19150594599517223, 0.130534498913222, 0.2838359939812741, 0.4162967823650797, 0.3581573912985965, 0.3455678156063975, 0.3865752332573289, 0.4498240004664864, 0.257417996883025, 0.3000956614190844, 0.39397340731275154, 0.7670035189630978, 0.7570264147564303, 0.8239811007393295, 0.6403758096002374, 0.7393233846362142, 0.7867068441007863, 0.7227417544505779, 0.6787857437752871, 0.6857896149463252, 0.0878004608618167, 0.08596143593939887, 0.11944598787738958, 0.12676260311564402, 0.09045040084152045, 0.13274383792357602, 0.1428625917553189, 0.1463010514230062, 0.10617929006328863, 0.31060997213965824, 0.19367988282275705, 0.20087477212077554, 0.4993673143434566, 0.2747423860792493, 0.34448995721812403, 0.24139786101703553, 0.204993696094521, 0.17230513300494876, 0.44114705738207016, 0.44671765425236376, 0.4766142048688813, 0.5723139504940913, 0.443186826403018, 0.3721162686755096, 0.5233992917293189, 0.5218932770712841, 0.4134354482815181, 0.29774929592795174, 0.30557478686592854, 0.36210313721401477, 0.3707923726115354, 0.3840783388819766, 0.27172168952583664, 0.417100298553458, 0.370776997082352, 0.3617318278955173, 0.19719790446817675, 0.1793311406449709, 0.1871838147260393, 0.19501556870810266, 0.182824478340035, 0.2034823249763391, 0.22231094292094322, 0.21219373606825853, 0.17804445816307524, 0.48541140621438195, 0.2059534746012649, 0.21557160409541298, 0.6150114602080448, 0.22611063495631412, 0.199131286835727, 0.22035506401833005, 0.2153711109761801, 0.21918075748322252, 0.16547688929030369, 0.830427020253427, 0.20778461695937422, 0.19843153127110214, 0.19783528835769693, 0.8860554199346026, 0.16161806622898056, 0.8764463498871807, 0.8687198577851076, 0.16857082065245266, 0.21017109939475154, 0.16841995550292543, 0.8237535383199359, 0.20543600060275058, 0.8013774662819605, 0.8604357906186869, 0.8601398099097635, 0.2108124915975712, 0.18420140279903663, 0.17441055954294205, 0.19360021418392526, 0.1815046052467757, 0.17485863704868843, 0.1782381902644038, 0.2478991221703345, 0.18734769795034012, 0.19863478710580562, 0.09038427604993782, 0.07168634304922794, 0.07811463201354307, 0.09356507853550833, 0.07449408687302217, 0.07293951888275374, 0.08905247507190306, 0.08347988876735968, 0.07610373073330579]}, "mutation_prompt": null}
{"id": "d7c88464-6aeb-4fc7-bf60-9a616422ffc5", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Increased population for more exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.9  # Adjusted differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.15  # Further enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.05\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= 0.95  # Adjusted cooling rate for more gradual cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV3", "description": "A synergistic blend of Differential Evolution with Adaptive Simulated Annealing and Stochastic Direction Sampling for robust and diverse search.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0c3a309-494c-48b0-9835-dc6586e66819", "metadata": {"aucs": [0.8915578414639792, 0.8749057164601318, 0.9034536097823035, 0.8572161284359818, 0.8601558234074886, 0.8950593877460477, 0.8752809958017177, 0.8642731806582868, 0.8901684144520716, 0.781694282103375, 0.7982342182383781, 0.7776945774166675, 0.7688841044934589, 0.10259548248631223, 0.771359078373982, 0.7797069896767903, 0.7721020956734529, 0.7882867866782479, 0.15612500814112895, 0.18036123831762085, 0.1497372559518626, 0.5356630083619751, 0.1251469051538615, 0.6136264390366497, 0.17219552197877497, 0.1593735637816489, 0.6393405851846748, 0.6294709500548807, 0.10284984424230448, 0.1594795894973835, 0.6083899374404363, 0.1426094739660121, 0.16602829946067, 0.17095355759877584, 0.5663889979443997, 0.4232396429319777, 0.9778579568255544, 0.9835293612197981, 0.9937497418984048, 0.9831620854544164, 0.9737464331888959, 0.9916334141129828, 0.9907218012423429, 0.9713061756969057, 0.9774993045953397, 0.6167437422267985, 0.6535330348140409, 0.6785246509370078, 0.7235024063698523, 0.6809420348855633, 0.664053050111532, 0.6607639479300802, 0.6638860334512999, 0.6927019269555519, 0.8324680501242536, 0.8275882818838602, 0.7874619101885987, 0.8210061121127987, 0.7982290048893543, 0.36819645925827327, 0.8503091034996346, 0.8024715199471453, 0.8317214884076909, 0.5529826155011501, 0.6569184315560266, 0.6249802063199588, 0.5812159287707603, 0.4966283424226382, 0.6130320341547761, 0.6322442891928315, 0.6383995409283555, 0.13163966544666417, 0.6363503944130389, 0.12472775682812243, 0.4543234337581151, 0.5567000034420844, 0.5838217059163249, 0.5823238024050913, 0.595652684132115, 0.5867718623743046, 0.5858435118526575, 0.19678955353061267, 0.15515973220290258, 0.22742804592451127, 0.058796480058041944, 0.2417729544973798, 0.09219590652838783, 0.17235215569186935, 0.2756768961600876, 0.4228134827342047, 0.4416559754430245, 0.36649880084794373, 0.27919244469679283, 0.3458570669670237, 0.18610900711526868, 0.3181751660386022, 0.4262680790338216, 0.32420081893195984, 0.28931660754314226, 0.13395819234862116, 0.22455292955740103, 0.2998841004077234, 0.18852071501856882, 0.1784778210986251, 0.3019848429411073, 0.14714918166629087, 0.19150594599517223, 0.130534498913222, 0.2838359939812741, 0.4162967823650797, 0.3581573912985965, 0.3455678156063975, 0.3865752332573289, 0.4498240004664864, 0.257417996883025, 0.3000956614190844, 0.39397340731275154, 0.7670035189630978, 0.7570264147564303, 0.8239811007393295, 0.6403758096002374, 0.7393233846362142, 0.7867068441007863, 0.7227417544505779, 0.6787857437752871, 0.6857896149463252, 0.0878004608618167, 0.08596143593939887, 0.11944598787738958, 0.12676260311564402, 0.09045040084152045, 0.13274383792357602, 0.1428625917553189, 0.1463010514230062, 0.10617929006328863, 0.31060997213965824, 0.19367988282275705, 0.20087477212077554, 0.4993673143434566, 0.2747423860792493, 0.34448995721812403, 0.24139786101703553, 0.204993696094521, 0.17230513300494876, 0.44114705738207016, 0.44671765425236376, 0.4766142048688813, 0.5723139504940913, 0.443186826403018, 0.3721162686755096, 0.5233992917293189, 0.5218932770712841, 0.4134354482815181, 0.29774929592795174, 0.30557478686592854, 0.36210313721401477, 0.3707923726115354, 0.3840783388819766, 0.27172168952583664, 0.417100298553458, 0.370776997082352, 0.3617318278955173, 0.19719790446817675, 0.1793311406449709, 0.1871838147260393, 0.19501556870810266, 0.182824478340035, 0.2034823249763391, 0.22231094292094322, 0.21219373606825853, 0.17804445816307524, 0.48541140621438195, 0.2059534746012649, 0.21557160409541298, 0.6150114602080448, 0.22611063495631412, 0.199131286835727, 0.22035506401833005, 0.2153711109761801, 0.21918075748322252, 0.16547688929030369, 0.830427020253427, 0.20778461695937422, 0.19843153127110214, 0.19783528835769693, 0.8860554199346026, 0.16161806622898056, 0.8764463498871807, 0.8687198577851076, 0.16857082065245266, 0.21017109939475154, 0.16841995550292543, 0.8237535383199359, 0.20543600060275058, 0.8013774662819605, 0.8604357906186869, 0.8601398099097635, 0.2108124915975712, 0.18420140279903663, 0.17441055954294205, 0.19360021418392526, 0.1815046052467757, 0.17485863704868843, 0.1782381902644038, 0.2478991221703345, 0.18734769795034012, 0.19863478710580562, 0.09038427604993782, 0.07168634304922794, 0.07811463201354307, 0.09356507853550833, 0.07449408687302217, 0.07293951888275374, 0.08905247507190306, 0.08347988876735968, 0.07610373073330579]}, "mutation_prompt": null}
{"id": "d8c6f9e8-d844-4a53-864e-3dfd874277d3", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Increased population for more exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.9  # Adjusted differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.15  # Further enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.05\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= 0.95  # Adjusted cooling rate for more gradual cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV3", "description": "A synergistic blend of Differential Evolution with Adaptive Simulated Annealing and Stochastic Direction Sampling for robust and diverse search.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0c3a309-494c-48b0-9835-dc6586e66819", "metadata": {"aucs": [0.8915578414639792, 0.8749057164601318, 0.9034536097823035, 0.8572161284359818, 0.8601558234074886, 0.8950593877460477, 0.8752809958017177, 0.8642731806582868, 0.8901684144520716, 0.781694282103375, 0.7982342182383781, 0.7776945774166675, 0.7688841044934589, 0.10259548248631223, 0.771359078373982, 0.7797069896767903, 0.7721020956734529, 0.7882867866782479, 0.15612500814112895, 0.18036123831762085, 0.1497372559518626, 0.5356630083619751, 0.1251469051538615, 0.6136264390366497, 0.17219552197877497, 0.1593735637816489, 0.6393405851846748, 0.6294709500548807, 0.10284984424230448, 0.1594795894973835, 0.6083899374404363, 0.1426094739660121, 0.16602829946067, 0.17095355759877584, 0.5663889979443997, 0.4232396429319777, 0.9778579568255544, 0.9835293612197981, 0.9937497418984048, 0.9831620854544164, 0.9737464331888959, 0.9916334141129828, 0.9907218012423429, 0.9713061756969057, 0.9774993045953397, 0.6167437422267985, 0.6535330348140409, 0.6785246509370078, 0.7235024063698523, 0.6809420348855633, 0.664053050111532, 0.6607639479300802, 0.6638860334512999, 0.6927019269555519, 0.8324680501242536, 0.8275882818838602, 0.7874619101885987, 0.8210061121127987, 0.7982290048893543, 0.36819645925827327, 0.8503091034996346, 0.8024715199471453, 0.8317214884076909, 0.5529826155011501, 0.6569184315560266, 0.6249802063199588, 0.5812159287707603, 0.4966283424226382, 0.6130320341547761, 0.6322442891928315, 0.6383995409283555, 0.13163966544666417, 0.6363503944130389, 0.12472775682812243, 0.4543234337581151, 0.5567000034420844, 0.5838217059163249, 0.5823238024050913, 0.595652684132115, 0.5867718623743046, 0.5858435118526575, 0.19678955353061267, 0.15515973220290258, 0.22742804592451127, 0.058796480058041944, 0.2417729544973798, 0.09219590652838783, 0.17235215569186935, 0.2756768961600876, 0.4228134827342047, 0.4416559754430245, 0.36649880084794373, 0.27919244469679283, 0.3458570669670237, 0.18610900711526868, 0.3181751660386022, 0.4262680790338216, 0.32420081893195984, 0.28931660754314226, 0.13395819234862116, 0.22455292955740103, 0.2998841004077234, 0.18852071501856882, 0.1784778210986251, 0.3019848429411073, 0.14714918166629087, 0.19150594599517223, 0.130534498913222, 0.2838359939812741, 0.4162967823650797, 0.3581573912985965, 0.3455678156063975, 0.3865752332573289, 0.4498240004664864, 0.257417996883025, 0.3000956614190844, 0.39397340731275154, 0.7670035189630978, 0.7570264147564303, 0.8239811007393295, 0.6403758096002374, 0.7393233846362142, 0.7867068441007863, 0.7227417544505779, 0.6787857437752871, 0.6857896149463252, 0.0878004608618167, 0.08596143593939887, 0.11944598787738958, 0.12676260311564402, 0.09045040084152045, 0.13274383792357602, 0.1428625917553189, 0.1463010514230062, 0.10617929006328863, 0.31060997213965824, 0.19367988282275705, 0.20087477212077554, 0.4993673143434566, 0.2747423860792493, 0.34448995721812403, 0.24139786101703553, 0.204993696094521, 0.17230513300494876, 0.44114705738207016, 0.44671765425236376, 0.4766142048688813, 0.5723139504940913, 0.443186826403018, 0.3721162686755096, 0.5233992917293189, 0.5218932770712841, 0.4134354482815181, 0.29774929592795174, 0.30557478686592854, 0.36210313721401477, 0.3707923726115354, 0.3840783388819766, 0.27172168952583664, 0.417100298553458, 0.370776997082352, 0.3617318278955173, 0.19719790446817675, 0.1793311406449709, 0.1871838147260393, 0.19501556870810266, 0.182824478340035, 0.2034823249763391, 0.22231094292094322, 0.21219373606825853, 0.17804445816307524, 0.48541140621438195, 0.2059534746012649, 0.21557160409541298, 0.6150114602080448, 0.22611063495631412, 0.199131286835727, 0.22035506401833005, 0.2153711109761801, 0.21918075748322252, 0.16547688929030369, 0.830427020253427, 0.20778461695937422, 0.19843153127110214, 0.19783528835769693, 0.8860554199346026, 0.16161806622898056, 0.8764463498871807, 0.8687198577851076, 0.16857082065245266, 0.21017109939475154, 0.16841995550292543, 0.8237535383199359, 0.20543600060275058, 0.8013774662819605, 0.8604357906186869, 0.8601398099097635, 0.2108124915975712, 0.18420140279903663, 0.17441055954294205, 0.19360021418392526, 0.1815046052467757, 0.17485863704868843, 0.1782381902644038, 0.2478991221703345, 0.18734769795034012, 0.19863478710580562, 0.09038427604993782, 0.07168634304922794, 0.07811463201354307, 0.09356507853550833, 0.07449408687302217, 0.07293951888275374, 0.08905247507190306, 0.08347988876735968, 0.07610373073330579]}, "mutation_prompt": null}
{"id": "30cf2223-0172-4e38-b86b-7683ccaed279", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Increased population for more exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.9  # Adjusted differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.15  # Further enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.05\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= 0.95  # Adjusted cooling rate for more gradual cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV3", "description": "A synergistic blend of Differential Evolution with Adaptive Simulated Annealing and Stochastic Direction Sampling for robust and diverse search.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0c3a309-494c-48b0-9835-dc6586e66819", "metadata": {"aucs": [0.8915578414639792, 0.8749057164601318, 0.9034536097823035, 0.8572161284359818, 0.8601558234074886, 0.8950593877460477, 0.8752809958017177, 0.8642731806582868, 0.8901684144520716, 0.781694282103375, 0.7982342182383781, 0.7776945774166675, 0.7688841044934589, 0.10259548248631223, 0.771359078373982, 0.7797069896767903, 0.7721020956734529, 0.7882867866782479, 0.15612500814112895, 0.18036123831762085, 0.1497372559518626, 0.5356630083619751, 0.1251469051538615, 0.6136264390366497, 0.17219552197877497, 0.1593735637816489, 0.6393405851846748, 0.6294709500548807, 0.10284984424230448, 0.1594795894973835, 0.6083899374404363, 0.1426094739660121, 0.16602829946067, 0.17095355759877584, 0.5663889979443997, 0.4232396429319777, 0.9778579568255544, 0.9835293612197981, 0.9937497418984048, 0.9831620854544164, 0.9737464331888959, 0.9916334141129828, 0.9907218012423429, 0.9713061756969057, 0.9774993045953397, 0.6167437422267985, 0.6535330348140409, 0.6785246509370078, 0.7235024063698523, 0.6809420348855633, 0.664053050111532, 0.6607639479300802, 0.6638860334512999, 0.6927019269555519, 0.8324680501242536, 0.8275882818838602, 0.7874619101885987, 0.8210061121127987, 0.7982290048893543, 0.36819645925827327, 0.8503091034996346, 0.8024715199471453, 0.8317214884076909, 0.5529826155011501, 0.6569184315560266, 0.6249802063199588, 0.5812159287707603, 0.4966283424226382, 0.6130320341547761, 0.6322442891928315, 0.6383995409283555, 0.13163966544666417, 0.6363503944130389, 0.12472775682812243, 0.4543234337581151, 0.5567000034420844, 0.5838217059163249, 0.5823238024050913, 0.595652684132115, 0.5867718623743046, 0.5858435118526575, 0.19678955353061267, 0.15515973220290258, 0.22742804592451127, 0.058796480058041944, 0.2417729544973798, 0.09219590652838783, 0.17235215569186935, 0.2756768961600876, 0.4228134827342047, 0.4416559754430245, 0.36649880084794373, 0.27919244469679283, 0.3458570669670237, 0.18610900711526868, 0.3181751660386022, 0.4262680790338216, 0.32420081893195984, 0.28931660754314226, 0.13395819234862116, 0.22455292955740103, 0.2998841004077234, 0.18852071501856882, 0.1784778210986251, 0.3019848429411073, 0.14714918166629087, 0.19150594599517223, 0.130534498913222, 0.2838359939812741, 0.4162967823650797, 0.3581573912985965, 0.3455678156063975, 0.3865752332573289, 0.4498240004664864, 0.257417996883025, 0.3000956614190844, 0.39397340731275154, 0.7670035189630978, 0.7570264147564303, 0.8239811007393295, 0.6403758096002374, 0.7393233846362142, 0.7867068441007863, 0.7227417544505779, 0.6787857437752871, 0.6857896149463252, 0.0878004608618167, 0.08596143593939887, 0.11944598787738958, 0.12676260311564402, 0.09045040084152045, 0.13274383792357602, 0.1428625917553189, 0.1463010514230062, 0.10617929006328863, 0.31060997213965824, 0.19367988282275705, 0.20087477212077554, 0.4993673143434566, 0.2747423860792493, 0.34448995721812403, 0.24139786101703553, 0.204993696094521, 0.17230513300494876, 0.44114705738207016, 0.44671765425236376, 0.4766142048688813, 0.5723139504940913, 0.443186826403018, 0.3721162686755096, 0.5233992917293189, 0.5218932770712841, 0.4134354482815181, 0.29774929592795174, 0.30557478686592854, 0.36210313721401477, 0.3707923726115354, 0.3840783388819766, 0.27172168952583664, 0.417100298553458, 0.370776997082352, 0.3617318278955173, 0.19719790446817675, 0.1793311406449709, 0.1871838147260393, 0.19501556870810266, 0.182824478340035, 0.2034823249763391, 0.22231094292094322, 0.21219373606825853, 0.17804445816307524, 0.48541140621438195, 0.2059534746012649, 0.21557160409541298, 0.6150114602080448, 0.22611063495631412, 0.199131286835727, 0.22035506401833005, 0.2153711109761801, 0.21918075748322252, 0.16547688929030369, 0.830427020253427, 0.20778461695937422, 0.19843153127110214, 0.19783528835769693, 0.8860554199346026, 0.16161806622898056, 0.8764463498871807, 0.8687198577851076, 0.16857082065245266, 0.21017109939475154, 0.16841995550292543, 0.8237535383199359, 0.20543600060275058, 0.8013774662819605, 0.8604357906186869, 0.8601398099097635, 0.2108124915975712, 0.18420140279903663, 0.17441055954294205, 0.19360021418392526, 0.1815046052467757, 0.17485863704868843, 0.1782381902644038, 0.2478991221703345, 0.18734769795034012, 0.19863478710580562, 0.09038427604993782, 0.07168634304922794, 0.07811463201354307, 0.09356507853550833, 0.07449408687302217, 0.07293951888275374, 0.08905247507190306, 0.08347988876735968, 0.07610373073330579]}, "mutation_prompt": null}
{"id": "818bb30d-97e0-4e3a-a868-7703f187e3c5", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Increased population for more exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.9  # Adjusted differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.15  # Further enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.05\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= 0.95  # Adjusted cooling rate for more gradual cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV3", "description": "A synergistic blend of Differential Evolution with Adaptive Simulated Annealing and Stochastic Direction Sampling for robust and diverse search.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0c3a309-494c-48b0-9835-dc6586e66819", "metadata": {"aucs": [0.8915578414639792, 0.8749057164601318, 0.9034536097823035, 0.8572161284359818, 0.8601558234074886, 0.8950593877460477, 0.8752809958017177, 0.8642731806582868, 0.8901684144520716, 0.781694282103375, 0.7982342182383781, 0.7776945774166675, 0.7688841044934589, 0.10259548248631223, 0.771359078373982, 0.7797069896767903, 0.7721020956734529, 0.7882867866782479, 0.15612500814112895, 0.18036123831762085, 0.1497372559518626, 0.5356630083619751, 0.1251469051538615, 0.6136264390366497, 0.17219552197877497, 0.1593735637816489, 0.6393405851846748, 0.6294709500548807, 0.10284984424230448, 0.1594795894973835, 0.6083899374404363, 0.1426094739660121, 0.16602829946067, 0.17095355759877584, 0.5663889979443997, 0.4232396429319777, 0.9778579568255544, 0.9835293612197981, 0.9937497418984048, 0.9831620854544164, 0.9737464331888959, 0.9916334141129828, 0.9907218012423429, 0.9713061756969057, 0.9774993045953397, 0.6167437422267985, 0.6535330348140409, 0.6785246509370078, 0.7235024063698523, 0.6809420348855633, 0.664053050111532, 0.6607639479300802, 0.6638860334512999, 0.6927019269555519, 0.8324680501242536, 0.8275882818838602, 0.7874619101885987, 0.8210061121127987, 0.7982290048893543, 0.36819645925827327, 0.8503091034996346, 0.8024715199471453, 0.8317214884076909, 0.5529826155011501, 0.6569184315560266, 0.6249802063199588, 0.5812159287707603, 0.4966283424226382, 0.6130320341547761, 0.6322442891928315, 0.6383995409283555, 0.13163966544666417, 0.6363503944130389, 0.12472775682812243, 0.4543234337581151, 0.5567000034420844, 0.5838217059163249, 0.5823238024050913, 0.595652684132115, 0.5867718623743046, 0.5858435118526575, 0.19678955353061267, 0.15515973220290258, 0.22742804592451127, 0.058796480058041944, 0.2417729544973798, 0.09219590652838783, 0.17235215569186935, 0.2756768961600876, 0.4228134827342047, 0.4416559754430245, 0.36649880084794373, 0.27919244469679283, 0.3458570669670237, 0.18610900711526868, 0.3181751660386022, 0.4262680790338216, 0.32420081893195984, 0.28931660754314226, 0.13395819234862116, 0.22455292955740103, 0.2998841004077234, 0.18852071501856882, 0.1784778210986251, 0.3019848429411073, 0.14714918166629087, 0.19150594599517223, 0.130534498913222, 0.2838359939812741, 0.4162967823650797, 0.3581573912985965, 0.3455678156063975, 0.3865752332573289, 0.4498240004664864, 0.257417996883025, 0.3000956614190844, 0.39397340731275154, 0.7670035189630978, 0.7570264147564303, 0.8239811007393295, 0.6403758096002374, 0.7393233846362142, 0.7867068441007863, 0.7227417544505779, 0.6787857437752871, 0.6857896149463252, 0.0878004608618167, 0.08596143593939887, 0.11944598787738958, 0.12676260311564402, 0.09045040084152045, 0.13274383792357602, 0.1428625917553189, 0.1463010514230062, 0.10617929006328863, 0.31060997213965824, 0.19367988282275705, 0.20087477212077554, 0.4993673143434566, 0.2747423860792493, 0.34448995721812403, 0.24139786101703553, 0.204993696094521, 0.17230513300494876, 0.44114705738207016, 0.44671765425236376, 0.4766142048688813, 0.5723139504940913, 0.443186826403018, 0.3721162686755096, 0.5233992917293189, 0.5218932770712841, 0.4134354482815181, 0.29774929592795174, 0.30557478686592854, 0.36210313721401477, 0.3707923726115354, 0.3840783388819766, 0.27172168952583664, 0.417100298553458, 0.370776997082352, 0.3617318278955173, 0.19719790446817675, 0.1793311406449709, 0.1871838147260393, 0.19501556870810266, 0.182824478340035, 0.2034823249763391, 0.22231094292094322, 0.21219373606825853, 0.17804445816307524, 0.48541140621438195, 0.2059534746012649, 0.21557160409541298, 0.6150114602080448, 0.22611063495631412, 0.199131286835727, 0.22035506401833005, 0.2153711109761801, 0.21918075748322252, 0.16547688929030369, 0.830427020253427, 0.20778461695937422, 0.19843153127110214, 0.19783528835769693, 0.8860554199346026, 0.16161806622898056, 0.8764463498871807, 0.8687198577851076, 0.16857082065245266, 0.21017109939475154, 0.16841995550292543, 0.8237535383199359, 0.20543600060275058, 0.8013774662819605, 0.8604357906186869, 0.8601398099097635, 0.2108124915975712, 0.18420140279903663, 0.17441055954294205, 0.19360021418392526, 0.1815046052467757, 0.17485863704868843, 0.1782381902644038, 0.2478991221703345, 0.18734769795034012, 0.19863478710580562, 0.09038427604993782, 0.07168634304922794, 0.07811463201354307, 0.09356507853550833, 0.07449408687302217, 0.07293951888275374, 0.08905247507190306, 0.08347988876735968, 0.07610373073330579]}, "mutation_prompt": null}
{"id": "ab59aafb-4cdb-48fa-ab08-3b633cd5bd63", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Increased population for more exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.9  # Adjusted differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0\n        self.diversity_factor = 0.15  # Further enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.05\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= 0.95  # Adjusted cooling rate for more gradual cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV3", "description": "A synergistic blend of Differential Evolution with Adaptive Simulated Annealing and Stochastic Direction Sampling for robust and diverse search.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0c3a309-494c-48b0-9835-dc6586e66819", "metadata": {"aucs": [0.8915578414639792, 0.8749057164601318, 0.9034536097823035, 0.8572161284359818, 0.8601558234074886, 0.8950593877460477, 0.8752809958017177, 0.8642731806582868, 0.8901684144520716, 0.781694282103375, 0.7982342182383781, 0.7776945774166675, 0.7688841044934589, 0.10259548248631223, 0.771359078373982, 0.7797069896767903, 0.7721020956734529, 0.7882867866782479, 0.15612500814112895, 0.18036123831762085, 0.1497372559518626, 0.5356630083619751, 0.1251469051538615, 0.6136264390366497, 0.17219552197877497, 0.1593735637816489, 0.6393405851846748, 0.6294709500548807, 0.10284984424230448, 0.1594795894973835, 0.6083899374404363, 0.1426094739660121, 0.16602829946067, 0.17095355759877584, 0.5663889979443997, 0.4232396429319777, 0.9778579568255544, 0.9835293612197981, 0.9937497418984048, 0.9831620854544164, 0.9737464331888959, 0.9916334141129828, 0.9907218012423429, 0.9713061756969057, 0.9774993045953397, 0.6167437422267985, 0.6535330348140409, 0.6785246509370078, 0.7235024063698523, 0.6809420348855633, 0.664053050111532, 0.6607639479300802, 0.6638860334512999, 0.6927019269555519, 0.8324680501242536, 0.8275882818838602, 0.7874619101885987, 0.8210061121127987, 0.7982290048893543, 0.36819645925827327, 0.8503091034996346, 0.8024715199471453, 0.8317214884076909, 0.5529826155011501, 0.6569184315560266, 0.6249802063199588, 0.5812159287707603, 0.4966283424226382, 0.6130320341547761, 0.6322442891928315, 0.6383995409283555, 0.13163966544666417, 0.6363503944130389, 0.12472775682812243, 0.4543234337581151, 0.5567000034420844, 0.5838217059163249, 0.5823238024050913, 0.595652684132115, 0.5867718623743046, 0.5858435118526575, 0.19678955353061267, 0.15515973220290258, 0.22742804592451127, 0.058796480058041944, 0.2417729544973798, 0.09219590652838783, 0.17235215569186935, 0.2756768961600876, 0.4228134827342047, 0.4416559754430245, 0.36649880084794373, 0.27919244469679283, 0.3458570669670237, 0.18610900711526868, 0.3181751660386022, 0.4262680790338216, 0.32420081893195984, 0.28931660754314226, 0.13395819234862116, 0.22455292955740103, 0.2998841004077234, 0.18852071501856882, 0.1784778210986251, 0.3019848429411073, 0.14714918166629087, 0.19150594599517223, 0.130534498913222, 0.2838359939812741, 0.4162967823650797, 0.3581573912985965, 0.3455678156063975, 0.3865752332573289, 0.4498240004664864, 0.257417996883025, 0.3000956614190844, 0.39397340731275154, 0.7670035189630978, 0.7570264147564303, 0.8239811007393295, 0.6403758096002374, 0.7393233846362142, 0.7867068441007863, 0.7227417544505779, 0.6787857437752871, 0.6857896149463252, 0.0878004608618167, 0.08596143593939887, 0.11944598787738958, 0.12676260311564402, 0.09045040084152045, 0.13274383792357602, 0.1428625917553189, 0.1463010514230062, 0.10617929006328863, 0.31060997213965824, 0.19367988282275705, 0.20087477212077554, 0.4993673143434566, 0.2747423860792493, 0.34448995721812403, 0.24139786101703553, 0.204993696094521, 0.17230513300494876, 0.44114705738207016, 0.44671765425236376, 0.4766142048688813, 0.5723139504940913, 0.443186826403018, 0.3721162686755096, 0.5233992917293189, 0.5218932770712841, 0.4134354482815181, 0.29774929592795174, 0.30557478686592854, 0.36210313721401477, 0.3707923726115354, 0.3840783388819766, 0.27172168952583664, 0.417100298553458, 0.370776997082352, 0.3617318278955173, 0.19719790446817675, 0.1793311406449709, 0.1871838147260393, 0.19501556870810266, 0.182824478340035, 0.2034823249763391, 0.22231094292094322, 0.21219373606825853, 0.17804445816307524, 0.48541140621438195, 0.2059534746012649, 0.21557160409541298, 0.6150114602080448, 0.22611063495631412, 0.199131286835727, 0.22035506401833005, 0.2153711109761801, 0.21918075748322252, 0.16547688929030369, 0.830427020253427, 0.20778461695937422, 0.19843153127110214, 0.19783528835769693, 0.8860554199346026, 0.16161806622898056, 0.8764463498871807, 0.8687198577851076, 0.16857082065245266, 0.21017109939475154, 0.16841995550292543, 0.8237535383199359, 0.20543600060275058, 0.8013774662819605, 0.8604357906186869, 0.8601398099097635, 0.2108124915975712, 0.18420140279903663, 0.17441055954294205, 0.19360021418392526, 0.1815046052467757, 0.17485863704868843, 0.1782381902644038, 0.2478991221703345, 0.18734769795034012, 0.19863478710580562, 0.09038427604993782, 0.07168634304922794, 0.07811463201354307, 0.09356507853550833, 0.07449408687302217, 0.07293951888275374, 0.08905247507190306, 0.08347988876735968, 0.07610373073330579]}, "mutation_prompt": null}
{"id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 23, "fitness": 0.4673190248094298, "feedback": "The algorithm RefinedHybridDEASAV4 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.28.", "error": "", "parent_id": "d0c3a309-494c-48b0-9835-dc6586e66819", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "923f2049-d6e5-470b-b014-0c4217ff40a2", "solution": "import numpy as np\n\nclass ImprovedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Increased base population size for diversity\n        self.prob_crossover = 0.85  # Slightly reduced crossover probability for stability\n        self.F = 0.7  # Further reduced differential weight for controlled exploration\n        self.current_evaluations = 0\n        self.initial_temperature = 2.0  # Higher initial temperature for better annealing\n        self.temperature = self.initial_temperature\n        self.cooling_rate = 0.95  # Slower cooling for sustained exploration\n        self.diversity_factor = 0.25  # Enhanced diversity injection\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature = self.initial_temperature * (self.cooling_rate ** (self.current_evaluations / self.budget))  # Dynamic cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "ImprovedHybridDEASAV5", "description": "An improved hybrid optimization algorithm integrating Adaptive Differential Evolution with Enhanced Simulated Annealing and Dynamic Population Adjustment for superior convergence and solution diversity.", "configspace": "", "generation": 24, "fitness": 0.23100464780653188, "feedback": "The algorithm ImprovedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.17.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.30714603851305666, 0.28565326344023834, 0.3154161678991634, 0.29901148078225626, 0.36660193064669566, 0.2960731950105403, 0.2886213447769552, 0.2920809613777915, 0.29841221068578716, 0.2591034522838803, 0.27164594823459975, 0.2877424461965692, 0.2676522486047397, 0.31075999089269757, 0.2660248189736325, 0.25919775201921536, 0.27393955682431825, 0.28402391739595745, 0.10593717837660388, 0.16025045690307194, 0.17963828871385035, 0.12722615877079846, 0.10997074730910772, 0.15354180059198974, 0.11559654381998263, 0.10509559971085414, 0.10949428873388256, 0.10711766818020674, 0.1091814612523977, 0.11746070070470938, 0.11874783249889442, 0.1330098164336252, 0.12183206909380295, 0.12617165137533726, 0.12462045649267062, 0.10547142808113608, 0.9656625618651641, 0.9526846945729781, 0.965566446111656, 0.9774954734515238, 0.9377033014625356, 0.9627993871671651, 0.9721562052432496, 0.9472531550323378, 0.9698040984497499, 0.2437391217025946, 0.23124636178687807, 0.22187383959057938, 0.2739878238513701, 0.22399803936856566, 0.22212822484861228, 0.2227017850008498, 0.2597498613075526, 0.21793205571735497, 0.2881706780373635, 0.2312511898668107, 0.24163432595151058, 0.27776656799919053, 0.2812354090965825, 0.2598606690968245, 0.2496285548424455, 0.25482220878162143, 0.2634762137055843, 0.20201275666147445, 0.19506359877658752, 0.18319813928997797, 0.20509303383325583, 0.1837983026307125, 0.2023487373481644, 0.22524336818933643, 0.1922528359495873, 0.2166718898998652, 0.21095192503362492, 0.05309728850442641, 0.18562692647322743, 0.22209683637248845, 0.1971817344542942, 0.2259281849719732, 0.211404973424283, 0.22082609401086162, 0.20103933425194498, 0.21422808663018011, 0.25437299010058667, 0.20638436801478788, 0.23217542440704575, 0.18912631595406315, 0.21565784416500078, 0.19090080952890964, 0.21691831001415374, 0.2014628450454229, 0.26618239888155415, 0.24537881778913107, 0.24225658374004455, 0.25744182535428506, 0.24229922287579297, 0.2503029000445568, 0.26040992841490684, 0.27122676566290715, 0.25229717599511925, 0.08605723561690615, 0.09042478453690617, 0.08364278581160911, 0.14786186512335953, 0.12594574522802815, 0.1617324324660545, 0.11630087846524662, 0.12476988720697924, 0.09027852898681299, 0.17146562528487463, 0.1841202467812697, 0.1692456199494261, 0.17805142110001093, 0.1597494352738802, 0.1599422843275934, 0.17321452948923943, 0.1835682921894105, 0.1655721601074872, 0.26731018039133314, 0.30597073774018757, 0.314127542605402, 0.30959059085773843, 0.2625913627340559, 0.26382981631462754, 0.2714705767094129, 0.27600128590707607, 0.2611397600551698, 0.09083289334835243, 0.10265972884030639, 0.09865754050143116, 0.1150712709431504, 0.09148156173586208, 0.09231224856737807, 0.09299033506246612, 0.1492970533251835, 0.0919982533701168, 0.22742590358313086, 0.14367987295372275, 0.16956912474780161, 0.18905745272421626, 0.15466665418445757, 0.1573812494034843, 0.1469676776025477, 0.14368501298946756, 0.16533508757835402, 0.21621726257146878, 0.2217767083654627, 0.22109741454724463, 0.21552373274532377, 0.2192541021269413, 0.22096639698572285, 0.22282689224907093, 0.2138261677636193, 0.21473047995735173, 0.19072125475671486, 0.20155754425945815, 0.19127924211170766, 0.19666337250129085, 0.19100299931155673, 0.19454725374194048, 0.2028923981838855, 0.19078151083288286, 0.19717271775220502, 0.20274001740662095, 0.1971186722662659, 0.2076023752392061, 0.1840548167567384, 0.21092820290778447, 0.18794601647699338, 0.19134239987945234, 0.18554379900272255, 0.2002776110342016, 0.17639865558007872, 0.18379945430556788, 0.17748675385125445, 0.17979094599048806, 0.17317416631551563, 0.17942726180457813, 0.18508166006031257, 0.18325250966482176, 0.1838948142333412, 0.1882397025123994, 0.16378569913637786, 0.37904982137610466, 0.4456482623875434, 0.1798172890032823, 0.16462619685587, 0.170736821837025, 0.368495630520686, 0.3571259151930699, 0.39083322526421993, 0.2010565592964465, 0.3751161439227447, 0.20250898036064935, 0.17838700265205476, 0.30980085235965626, 0.11413977836327271, 0.15360645165051068, 0.2091041478083182, 0.18665606622497388, 0.18810107321801972, 0.18092420062939907, 0.1869262814242043, 0.17999415558083165, 0.17796502562489347, 0.20018636678534973, 0.19907727385332663, 0.18628150941135746, 0.07868015297175113, 0.07776700498021705, 0.06925513149204254, 0.08154040667028983, 0.08130502891889468, 0.06478905164830828, 0.0838286295124584, 0.08729620499626001, 0.075952067302548]}, "mutation_prompt": null}
{"id": "a29285d9-d419-492c-a6a8-219e3a13fb7b", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.3 * dim)  # Adjusted population size for exploration\n        self.prob_crossover = 0.85  # Modified crossover probability\n        self.F = 0.9  # Increased differential weight for broader search\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature\n        self.cooling_rate = 0.95  # Slower cooling for sustained exploration\n        self.diversity_factor = 0.25  # Enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.uniform(-1, 1, self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / max(self.temperature, 1e-9))\n\n                self.temperature *= self.cooling_rate  # Adaptive cooling rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV5", "description": "A refined hybrid algorithm integrating Stochastic Perturbations and Adaptive Cooling in DE and SA for enhanced exploration and convergence.", "configspace": "", "generation": 25, "fitness": 0.3334756921071384, "feedback": "The algorithm RefinedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7806248441159552, 0.7702433623218873, 0.7807138069095383, 0.7789065782103569, 0.765982512865732, 0.7663351156865237, 0.7754806376100112, 0.7643977835927525, 0.779607298202593, 0.5847309997315479, 0.6109125833214983, 0.5725874607314023, 0.5810150857530076, 0.5711826633217266, 0.5692094626037283, 0.5630009596754955, 0.19050684892689151, 0.6215232423998578, 0.18747212213243525, 0.15359666573593278, 0.20374238043899762, 0.19947493818126083, 0.2542941848855338, 0.13996621550773292, 0.1791965906784262, 0.17146671252771484, 0.2244614636350819, 0.12739656776164543, 0.13731766134533685, 0.10280383087600453, 0.11161394072665809, 0.1862766791341457, 0.14218189170350892, 0.15637730967070984, 0.1379673317347766, 0.2293150143996009, 0.9652752145968253, 0.987361546175695, 0.954997342469103, 0.9764795985466784, 0.9872941388434336, 0.9658916240762033, 0.972356303630989, 0.9880205479987424, 0.9679690981469096, 0.40572874822261995, 0.3828191921943539, 0.391241965600833, 0.41827021827343713, 0.46022676860887146, 0.3908380959735033, 0.45019025822020153, 0.4174003386691708, 0.3452920713630341, 0.630587456335184, 0.6742481811036942, 0.67815036796575, 0.6124488710219359, 0.7119743240990584, 0.6037479583629202, 0.5870830220148662, 0.6548628657798534, 0.7199503479801128, 0.33192107464363285, 0.2906790503658797, 0.27491399386514515, 0.2750517673268371, 0.2634601037777675, 0.24831369464811104, 0.22881205698089613, 0.3376887954381399, 0.30799801822501893, 0.2903223301237481, 0.28076371236298725, 0.3528653605419726, 0.29617337595116455, 0.24599364687872238, 0.3016674029973788, 0.3060189439397967, 0.2999145861769148, 0.3040718930192837, 0.21442950306999897, 0.16180001676077194, 0.15525818641880762, 0.19169185861294114, 0.14076986834606176, 0.19108081484636552, 0.16678218314463722, 0.14599801257772727, 0.12562802156646635, 0.33664752829540834, 0.27022872781259566, 0.31136479664913363, 0.27728360651546313, 0.29733643333452264, 0.34237266964922564, 0.36445295383253284, 0.36689075042073005, 0.3513794093209571, 0.050910430670273454, 0.08869936598621841, 0.08715243402088635, 0.05647587491162853, 0.09780700213260496, 0.1270695898836739, 0.08404317158535723, 0.03749228750793243, 0.021217625948545926, 0.22673908435407097, 0.18658447038485315, 0.2032679029914607, 0.21452330172337974, 0.2305230530955279, 0.23144332924945987, 0.19466194808356507, 0.18104639160714886, 0.19800205298882323, 0.5314480163914801, 0.5321934614122242, 0.5892504850611111, 0.5808610821825266, 0.5660476131031917, 0.5539006057871037, 0.593648498310375, 0.5612034393128174, 0.5923192516902874, 0.09479553872809998, 0.09372608516346137, 0.10703974565252605, 0.10611558691047851, 0.09641973281584992, 0.08677752857822618, 0.07789034420691254, 0.09034327504859718, 0.08462122839532715, 0.24037782676936437, 0.1652582539806, 0.17893055470332742, 0.2436719439747006, 0.14934927596183956, 0.17518453759156005, 0.24369599080829007, 0.16297953007818067, 0.14507165569351133, 0.28327456972180765, 0.3128114872831297, 0.29340679708929307, 0.2961724532204063, 0.3065081186575074, 0.3479971811102164, 0.34737429772921924, 0.3492095847366612, 0.3320903307991345, 0.23741705815043423, 0.24731820511456926, 0.20210807729606373, 0.237547362047122, 0.23623173612010961, 0.21917927393569536, 0.21951455059227953, 0.24439270543943403, 0.24380909388869476, 0.19767187730554092, 0.17922244323151515, 0.17465499041318822, 0.1842947369370912, 0.18802259592480264, 0.2120593734830002, 0.17766892581231264, 0.17774120098925272, 0.20167000525194667, 0.27926213604795813, 0.28030743427390414, 0.20540945992191484, 0.26440021602566244, 0.17601501728251256, 0.18079171141415395, 0.28826754425283385, 0.28320477633892505, 0.21556509075980035, 0.16262962088153, 0.6733994489407831, 0.7674861387421732, 0.44077664376280123, 0.19377518097399238, 0.709514390141189, 0.6104579186449067, 0.5423015572607821, 0.18659178545810684, 0.20813670350650615, 0.2031130316420795, 0.7374862948662091, 0.44688284627452846, 0.20161967110207601, 0.20066752752856643, 0.2107166707659085, 0.7467347416650028, 0.6780183352267029, 0.20733112826354394, 0.1786487364104713, 0.1733110055218905, 0.18220124012701922, 0.16670369322208878, 0.18127858099086314, 0.2040865291142333, 0.18586937427662642, 0.18072845918588498, 0.06634443766880371, 0.06987874759684487, 0.07461083041330097, 0.07087055094915629, 0.08073673939445558, 0.07119257869092177, 0.06706792807606488, 0.06657248729778964, 0.07902075475488213]}, "mutation_prompt": null}
{"id": "ee108496-98ad-42a7-8e5d-f77f60c37ed9", "solution": "import numpy as np\n\nclass EnhancedHybridDEACSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted population size for enhanced exploration\n        self.prob_crossover = 0.85  # Balanced crossover probability for exploitation\n        self.F = 0.9  # Adaptive differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.0  # Adjusted initial temperature\n        self.cooling_rate = 0.95  # Refined cooling rate for controlled annealing\n        self.diversity_factor = 0.3  # Enhanced diversity factor\n        self.chaos_factor = 0.5  # Introduced chaos factor for exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                if np.random.rand() < self.chaos_factor:\n                    trial += 0.1 * (np.random.rand(self.dim) - 0.5)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Adjusted cooling rate dynamically\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEACSA", "description": "An enhanced hybrid strategy combining Adaptive Differential Evolution with Dynamic Simulated Annealing, augmented by incorporating chaos-driven exploration and adaptive mutation for optimized convergence and diversity.", "configspace": "", "generation": 26, "fitness": 0.2747783133600738, "feedback": "The algorithm EnhancedHybridDEACSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.6552850663842757, 0.6136434246108489, 0.6320499501307262, 0.6544292044252731, 0.6876915445795897, 0.6179718848389313, 0.6259152262138876, 0.655758703389687, 0.6272283725659291, 0.3123226902186983, 0.30226214467511003, 0.29146900487576066, 0.2855199960027136, 0.29466870145651336, 0.2618480612505334, 0.2971425438595372, 0.25826461747048457, 0.3104410575097527, 0.11317736712588411, 0.15248192250882597, 0.14831398390452089, 0.1313837259263977, 0.13097612453041896, 0.1473253041466427, 0.12053380739915154, 0.11185909094795043, 0.12907917174319572, 0.13031143272874357, 0.11504321294055952, 0.11717237723216045, 0.10946650878843234, 0.1150421764309012, 0.11260370242053996, 0.11017232333435478, 0.117189595517879, 0.11824625417399981, 0.9508225033483104, 0.9704110452996489, 0.9565501273277865, 0.9791845639643116, 0.9448853059359914, 0.9344204701382158, 0.9564065205659593, 0.9420777048833063, 0.9581081419649605, 0.32440740995414297, 0.32956532911847514, 0.3426785294185345, 0.3116855032824084, 0.30417949470206507, 0.30791704890899585, 0.3516580406366744, 0.3331347760631468, 0.33467428536844923, 0.5341425381050681, 0.6222691522444803, 0.4966238947118997, 0.6144523474255698, 0.6568265975854368, 0.6813596155995796, 0.5395092233024276, 0.6216337173088895, 0.6190634826673611, 0.2503074286657839, 0.15956624013620968, 0.23415447635110054, 0.20017977703652634, 0.16708606470070297, 0.21277370775138504, 0.21497125414750273, 0.21462055509675027, 0.22006822672661297, 0.16492407095149697, 0.20014324665242855, 0.21112848930949457, 0.23043324008069588, 0.19907592565756693, 0.22629052259157467, 0.18487661010623702, 0.16187854162562376, 0.21248414298660634, 0.1107108318495178, 0.08043094851981991, 0.10768231266483086, 0.13358089410605212, 0.06839801384084909, 0.054757542221909206, 0.07366599249735195, 0.06545107761632085, 0.05324721987397896, 0.19040859281550726, 0.16019160503942398, 0.21365796617302846, 0.17337434407861751, 0.16450120200927887, 0.17620167234360828, 0.18188939837928164, 0.2178194393585673, 0.1980708141669193, 0.005957304566888699, 0.026089043302107928, 0.02839960952378806, 0.020760238987962643, 0.027753173441884438, 0.019956749062607693, 0.031040792100098913, 0.030160090035646125, 0.05228883146304375, 0.15189177019654032, 0.14525054899169643, 0.15493114599858526, 0.14150972282785645, 0.1492647966724211, 0.16719506129939998, 0.13774494045709362, 0.133696144735875, 0.1306904279167025, 0.4806670094817931, 0.48335752783075736, 0.4814814321527763, 0.48341802783935195, 0.47851273006203476, 0.47365965897946183, 0.4992541867531355, 0.5006572287197342, 0.46557956035199655, 0.08908047177591982, 0.09756369071457882, 0.08631915810838275, 0.08647464295998852, 0.09355585619289086, 0.10368624686469663, 0.09898196897359735, 0.08716140824368246, 0.08251164614233075, 0.34898000468704926, 0.2376870583916625, 0.15061530030938086, 0.22665831662361358, 0.16059562027189567, 0.1486116648257888, 0.21768799624873958, 0.2523541828888207, 0.17718869532939951, 0.27667091970005886, 0.2833642893630678, 0.2815195009331163, 0.28378488393049306, 0.3005080015120992, 0.29999724288312557, 0.2997988876846369, 0.3112946589167649, 0.3081523764221541, 0.21970718641918197, 0.22495558177447195, 0.22523381719465863, 0.2110032538300266, 0.21794992861153195, 0.18688959271535388, 0.24270614366583032, 0.2246595283101075, 0.24400442003909484, 0.17942159323070572, 0.2035545282447011, 0.19584896819033593, 0.18006626174823437, 0.1866754549959725, 0.17224932062026965, 0.2012470301006919, 0.19766132086727628, 0.1877146877487863, 0.22915080795051335, 0.17781054256721507, 0.1908822193287305, 0.18877533659290324, 0.19147686428844513, 0.1772678620685738, 0.1903108592891095, 0.18654063112113062, 0.2046830089325692, 0.18063756409357978, 0.17902321442021074, 0.6100842872981893, 0.542876884510197, 0.1817344585551427, 0.6913619813441284, 0.1826711735195078, 0.18912825740469308, 0.5885250264905673, 0.5222341341247247, 0.5434452545592987, 0.4883100810541432, 0.20058054961190275, 0.4614881959762326, 0.5414944278629166, 0.20661609841635664, 0.2084542055015891, 0.12782518505939933, 0.18317148540192818, 0.1760506141393895, 0.186484481448691, 0.20426358669187572, 0.19187825413479564, 0.17010442090511202, 0.1873489808451202, 0.1788421457784498, 0.17533763153623572, 0.08873054774971645, 0.08603713989997663, 0.07773957515981145, 0.0754590468359998, 0.07096883038191792, 0.07829107870658714, 0.07131792403557868, 0.07861024130428851, 0.07262949170201705]}, "mutation_prompt": null}
{"id": "20b2c938-8dcf-4af3-925a-0eb947b8d6d9", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "d1b7a1bd-9577-45c9-ac9e-79f0f2806eb4", "solution": "import numpy as np\n\nclass AdaptiveHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.3 * dim)  # Adjusted population size for better initial diversity\n        self.prob_crossover = 0.85  # Balanced crossover probability\n        self.F = 0.9  # Increased differential weight for stronger mutation influence\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for broader exploration\n        self.cooling_rate = 0.95  # Slower cooling rate for gradual annealing\n        self.diversity_factor = 0.25  # Enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Gradual cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "AdaptiveHybridDEASAV5", "description": "A dynamically adaptive hybrid optimization algorithm integrating Adaptive Differential Evolution, Simulated Annealing, and Diversity-Driven Strategies for enhanced exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": 0.3305231778314233, "feedback": "The algorithm AdaptiveHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.769316157875024, 0.743278197631302, 0.7493109526664725, 0.7688222140118887, 0.7494453644493113, 0.7659203271547372, 0.7818938963245463, 0.7887272649939108, 0.7550469442336117, 0.5937431407542323, 0.6008882869501935, 0.5943383483995134, 0.6011859558973518, 0.5321306301681358, 0.5606334482790083, 0.6353765784954737, 0.6141170743476798, 0.6609223796234784, 0.1683396527571389, 0.14540682649522974, 0.2192327711851112, 0.2213125015464289, 0.20355091679818438, 0.33913241561462426, 0.14300841039446333, 0.16385777548862845, 0.4220434801941053, 0.11029659062868014, 0.15570510371842117, 0.13391606979521187, 0.17199590212440674, 0.1284489412150488, 0.12912610382033696, 0.11529957759754306, 0.1873330877895104, 0.1257352199563706, 0.9880471406974048, 0.971332565301486, 0.9807473804509573, 0.9763091682411931, 0.9887268400175413, 0.981274325272005, 0.9632641297356092, 0.9638347399670902, 0.9702112887155738, 0.38224528232197885, 0.4405041839462124, 0.42499010560363226, 0.4250830956446223, 0.4263418239280422, 0.41581026469030735, 0.36847537476188263, 0.4074120836956565, 0.40313202663771963, 0.5907006473373619, 0.7170707950125184, 0.6671762361592646, 0.6878173788025979, 0.7300679517440638, 0.7091074328040075, 0.6603120272844238, 0.6042864883357721, 0.6645181823712489, 0.28529414863901137, 0.27897017178413785, 0.22789748001605803, 0.31849285717916587, 0.30625012056138545, 0.34146093220950147, 0.2437319666670723, 0.24282943847027194, 0.2758310117877232, 0.2667395566683106, 0.10502527782531745, 0.3258729886607018, 0.2881714414144759, 0.30354403174193534, 0.29020492457096636, 0.3104479081629523, 0.2725526083057731, 0.34533535088631695, 0.18453676992532975, 0.1804013412545683, 0.1622133770115446, 0.1687538408747432, 0.18711266274710026, 0.19047623606057584, 0.17136528787094651, 0.14293691992903257, 0.15425725000648127, 0.2264567609869037, 0.28679706958321793, 0.29799208138189914, 0.253989009836623, 0.24142624588385042, 0.32446728053141083, 0.365252947992025, 0.28394519788093153, 0.3616244031105563, 0.05441575294627965, 0.05993055606980646, 0.09278929907436906, 0.11481546323071923, 0.06328661520020817, 0.05873539437273523, 0.0683703253491289, 0.14462581956168374, 0.05586981504854649, 0.20580896921151715, 0.19160903786483208, 0.2020342058526151, 0.21936382120207132, 0.2261805376549838, 0.24877105776901887, 0.21147858770210537, 0.19400634164167152, 0.17190166684203756, 0.5392718432070825, 0.5965150070034794, 0.5847509593969951, 0.5579825807247095, 0.5742057590523737, 0.562492071062771, 0.5999136514504965, 0.5555471527006557, 0.5425431743247356, 0.09709366356083715, 0.2811255302144072, 0.09968263015801493, 0.08122176160111938, 0.09428433550186999, 0.09668935648331822, 0.08792196000482633, 0.11258451969426408, 0.11706602999691729, 0.19552851211450106, 0.17106804028906375, 0.21628654450132423, 0.17059242877680902, 0.19287137257572928, 0.16987226045322057, 0.18558464720411616, 0.3536616032018808, 0.15722132658834997, 0.3421666825868076, 0.29888270074994894, 0.3326869130209431, 0.3100810567431961, 0.2970340160857964, 0.32420627677318825, 0.3316865003707463, 0.3485322499480059, 0.3577688498163877, 0.21736620625549086, 0.23526217184771392, 0.2319685110077775, 0.24224950379686927, 0.22938017279328216, 0.25297023843007005, 0.24265198243804764, 0.2340499528207587, 0.25505582831370777, 0.17881478700484754, 0.21102745145118895, 0.19211078602677922, 0.19041138235229216, 0.17426656115431816, 0.1980304462154675, 0.19294554537309383, 0.21418837781928368, 0.19004014426946592, 0.21061279556590584, 0.18374405071403144, 0.1788197341991674, 0.20099324502466798, 0.25730396315891013, 0.1866639004524432, 0.19030921234733544, 0.19372040831541093, 0.20834445927458023, 0.17030967783287054, 0.16231178106900557, 0.17234326745010697, 0.6658298107004101, 0.18915111245109284, 0.7243007292597639, 0.6243808180311483, 0.17920608451418318, 0.6563245902373134, 0.2048705642104084, 0.6152367602436828, 0.6372790022040885, 0.1964676927506217, 0.485070823290374, 0.2008134104446564, 0.21150142578208697, 0.20579777208381334, 0.2060324685053594, 0.19958302743444245, 0.18513208898070488, 0.18019711179627174, 0.18347560802876994, 0.17633540943147996, 0.17068059841778083, 0.22116153819959594, 0.17317534977683213, 0.18324242704391325, 0.07260365272772451, 0.07545018448404284, 0.08585489300010118, 0.08009490287040766, 0.07394600446340005, 0.07955862818032133, 0.08768241582022707, 0.08143429432632643, 0.09195706531366754]}, "mutation_prompt": null}
{"id": "ec11e885-fabb-4de7-85c4-42ce691dd4da", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.3 * dim)  # Adjusted population size for better balance\n        self.prob_crossover = 0.85  # Adaptive crossover probability for improved exploration\n        self.F = 0.7  # Further reduced differential weight for stability\n        self.current_evaluations = 0\n        self.init_temperature = 2.0  # Higher initial temperature for annealing\n        self.temperature = self.init_temperature\n        self.cooling_rate = 0.85  # Adaptive cooling rate for annealing efficiency\n        self.diversity_factor = 0.3  # Enhanced diversity factor\n        self.dynamic_pop_adjustment_factor = 0.1  # Factor for dynamic population size adjustment\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant += direction * (self.upper_bound - self.lower_bound) * 0.05\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature = self.init_temperature * (1 - self.current_evaluations / self.budget) ** self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n            if np.random.rand() < self.dynamic_pop_adjustment_factor and self.current_evaluations < self.budget:\n                new_individual = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                new_fitness = func(new_individual)\n                self.current_evaluations += 1\n                worst_idx = np.argmax(fitness)\n                if new_fitness < fitness[worst_idx]:\n                    population[worst_idx] = new_individual\n                    fitness[worst_idx] = new_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An innovative algorithm integrating Adaptive Differential Evolution with Dynamic Simulated Annealing, enhanced by Dynamic Population Size and Stochastic Local Search for superior adaptability and convergence.", "configspace": "", "generation": 29, "fitness": 0.24850742632141928, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.16.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.3178277655993913, 0.31066384107043155, 0.31036080528276266, 0.3107345162087558, 0.311414317061379, 0.32578886330887924, 0.31617728622363406, 0.3069969412838053, 0.31529761511443666, 0.27332076093416413, 0.28881499027212, 0.28551835243326706, 0.28647632282517665, 0.2875984106448862, 0.28326780883039726, 0.2943452968373462, 0.28383848819782187, 0.2801570924251109, 0.11840511033160506, 0.12446197391711722, 0.1526309127132548, 0.12031730215736425, 0.1688506255832095, 0.13361630021070636, 0.13981911732193153, 0.17275446299734665, 0.14982212768315983, 0.12715727561532042, 0.15413981412786237, 0.13093673048762433, 0.12011386324808904, 0.12811904901099747, 0.133834980567218, 0.12954974173672051, 0.13139355417541376, 0.1351915244591282, 0.9669799206514014, 0.9526911741250187, 0.9616351399577405, 0.8485921305629367, 0.9330170378939611, 0.9712752574038247, 0.9763540394653794, 0.9353654345785746, 0.9541047055528218, 0.2599408584513343, 0.2508355280028651, 0.2453536593888852, 0.26077474349955154, 0.26269444768190875, 0.2561079527019282, 0.25250181371078595, 0.23757163001437687, 0.2558449452024082, 0.2816568128388446, 0.276565882528771, 0.2765559108092932, 0.28605247628291586, 0.2888230029880118, 0.2985762296444262, 0.2854966306861517, 0.2854939432508059, 0.2908346913167317, 0.26822771464361095, 0.21180661649429133, 0.23873126140621448, 0.2518440173286809, 0.2248865497600645, 0.22715469082478967, 0.23582677337922664, 0.20369355276233447, 0.22310274705251598, 0.21715670715143975, 0.22470712472688414, 0.22693632242872697, 0.2206954122350263, 0.2190634639500959, 0.19501288024492724, 0.20505991721440364, 0.23669763596384863, 0.21150490888326445, 0.2170997321881264, 0.2412610075225401, 0.2163684371265806, 0.2355594859849648, 0.21595555096189167, 0.21466336782057294, 0.22274563329054176, 0.2065751978615884, 0.2318615809970649, 0.29765807193126903, 0.3034758322000872, 0.28219305375185066, 0.28525169754008983, 0.2549661375376492, 0.23489792723238168, 0.2803339896065772, 0.26068384997575744, 0.26330556242450665, 0.0639244851905576, 0.1300484003338921, 0.08926828424731537, 0.154731738280111, 0.18278416809712272, 0.1608346544885788, 0.17980743768739027, 0.1529604220697811, 0.16252239736323904, 0.18980661241728192, 0.1905866151141229, 0.1912407174431764, 0.2123330325165873, 0.1938679529938634, 0.20501332662674, 0.20593652527790296, 0.19013478262735306, 0.18996647457878102, 0.30913649738953886, 0.2873428055612468, 0.2920062376685898, 0.3037267364932539, 0.29510591500788197, 0.29771049531280724, 0.2825817646109924, 0.300368519588722, 0.3137402691408965, 0.10309353532383225, 0.09389029471392463, 0.10435391849161402, 0.11420707828191734, 0.09132159256264294, 0.1207925557528684, 0.08162750752209846, 0.08923228195422361, 0.10221165443433056, 0.1810109138669792, 0.2683871814084, 0.1466577467913558, 0.14083876846392995, 0.15728048127721905, 0.22813581374028458, 0.22104448818533207, 0.20732503381413792, 0.15468500041249011, 0.25194302691433035, 0.22870892297659007, 0.2212044036434535, 0.228784012967168, 0.22816459236807474, 0.22351950354667416, 0.23229447632946643, 0.24062959233393777, 0.23169883788165246, 0.22080679625166888, 0.21343724715822976, 0.20994815093164176, 0.21727949786129808, 0.21012178315013175, 0.21190697531342206, 0.21944378344747884, 0.21697909292557893, 0.2190214164362092, 0.19247797657003607, 0.18889596704706535, 0.19482859711935963, 0.1966531052731666, 0.20721444711074433, 0.18445812790686633, 0.19181991804633036, 0.1716235748543128, 0.21187159974976444, 0.18256520991898306, 0.17924514461899022, 0.17552982890593016, 0.17680539335054724, 0.18129932460739562, 0.17662239386537804, 0.1818784020474984, 0.18626948941749089, 0.18101739865560362, 0.17134891154966736, 0.4333174641263564, 0.17833436135216107, 0.5114633817137549, 0.1836905040873298, 0.45237943464870567, 0.3541818987510209, 0.3967667774370853, 0.42665667398625107, 0.20368042251267116, 0.17423079528299423, 0.4135633529982575, 0.36387747425988304, 0.20042334195722433, 0.47408570722124177, 0.2063325164186115, 0.45011024124736054, 0.20990015381748506, 0.187397566819834, 0.18455041265788052, 0.18925545165587676, 0.17232019409266253, 0.20860944217347932, 0.17413649734193182, 0.20778122371276964, 0.1756951468259751, 0.20206273063959568, 0.08056943671425598, 0.07620931841437562, 0.08357961963837257, 0.07429820232956175, 0.07932334359346227, 0.08342386695625137, 0.08834158605092401, 0.08898956191496021, 0.07779159140468705]}, "mutation_prompt": null}
{"id": "2b966d86-9192-4547-b534-98c5da5583e2", "solution": "import numpy as np\n\nclass DynamicHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Further adjusted population size for better coverage\n        self.prob_crossover = 0.85  # Slightly reduced for balance\n        self.F = 0.9  # Adjusted differential weight for more aggressive mutation\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Further increased initial temperature for broader exploration\n        self.cooling_rate = 0.95  # More gradual cooling for better annealing control\n        self.diversity_factor = 0.3  # Increased diversity factor for wider exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant += direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "DynamicHybridDEASAV5", "description": "A dynamic hybrid optimization algorithm integrating Adaptive Differential Evolution, Simulated Annealing, and Diversity-Driven Mutation for enhanced adaptability and performance.", "configspace": "", "generation": 30, "fitness": 0.300575485196576, "feedback": "The algorithm DynamicHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7095762905535511, 0.7000769098888056, 0.7361295170511102, 0.6998246974721701, 0.7579654410210228, 0.7390838717597618, 0.7256611098345825, 0.6755495543494219, 0.6797472684513829, 0.5266733210707348, 0.5055696801424934, 0.5460367200761285, 0.5273484808778183, 0.5493653640705565, 0.5139557042732075, 0.5635594672954494, 0.4724820814652003, 0.5507868999695313, 0.19963724090185064, 0.11931677825796017, 0.20297800503790508, 0.11921120871258284, 0.12179892982100904, 0.12337553750758545, 0.13687719851852198, 0.16360054095541765, 0.1511908506448404, 0.10256799314247711, 0.13956746115961283, 0.13552877522043416, 0.13039116084163083, 0.15177173853861003, 0.11009492556469336, 0.12161312921692169, 0.11602078592106368, 0.136499174628256, 0.9884449559830386, 0.9638097314068783, 0.9695631024338535, 0.9721255843650428, 0.9717724972038839, 0.985122392143133, 0.9822115371490856, 0.972935301103521, 0.9671904954452931, 0.3571396294703483, 0.3631403982182059, 0.34552743060510416, 0.3321558819030561, 0.38035463417528603, 0.34619123415130393, 0.3477926100772234, 0.3248934165065328, 0.3874282711628604, 0.5391217065607901, 0.6207641575521248, 0.5636496111872861, 0.5453557207715478, 0.560996432482348, 0.513482707095886, 0.4664018018423941, 0.5296223271989078, 0.5780746829529704, 0.23932934663202354, 0.21871828604436483, 0.22413720827500228, 0.20451196169767805, 0.2780625621693674, 0.2625502242849115, 0.23550896998305548, 0.22598625588120014, 0.24012169214912904, 0.22170063786582273, 0.03346157610623213, 0.22356482181576653, 0.24282206739194712, 0.21588801552772208, 0.2711640544644701, 0.2374672368200086, 0.22647979466411072, 0.2420094271829354, 0.1764503463843079, 0.12321906794096171, 0.14219086179637308, 0.16635541542321475, 0.1670784903832755, 0.07687014010768656, 0.1976265052787931, 0.13613251686975314, 0.10655633346844806, 0.22435002989350628, 0.26872221174797783, 0.27553724294328463, 0.2692126931826132, 0.20731673839708964, 0.2223075716255246, 0.26111166720852774, 0.2521688345232479, 0.27511688416299773, 0.03769054005187222, 0.014740591755276755, 0.061860907825264655, 0.07326692996081985, 0.04517167069554584, 0.015359350545896322, 0.028013021592372067, 0.04521268099849096, 0.08932119847058506, 0.16638799324654097, 0.15394002466650747, 0.1742031093679538, 0.17355222645948887, 0.17851335538685253, 0.171542345553642, 0.1690563035522178, 0.16227923247650744, 0.161276433587079, 0.5297007538293355, 0.5542486788490912, 0.5080665484446274, 0.5295642394919862, 0.49988383265148006, 0.5137398866051985, 0.5621208072254021, 0.5691226476700921, 0.5422258229195935, 0.091528020515662, 0.09615253412194291, 0.08945610339909327, 0.08658181619593519, 0.10861598039864295, 0.08993659901157758, 0.085285334354533, 0.09024961889886396, 0.08177435426886093, 0.3773059074229219, 0.18768665131318907, 0.32848851905441034, 0.14584245303302956, 0.195277403236349, 0.2955070982746736, 0.17671000069423803, 0.16911865245377433, 0.13888596074832915, 0.30263465946916834, 0.30228022535405386, 0.29631571739202456, 0.27163286968922473, 0.3146442508312731, 0.2856174777057908, 0.3147256845277202, 0.3407061717941321, 0.3274533503369659, 0.25031387592448284, 0.23529090692702315, 0.23145719000095677, 0.19293539332037046, 0.2039298219469976, 0.20575313287704144, 0.22469823686840074, 0.23747515504131167, 0.2613782381608898, 0.21521572122837151, 0.19614216999194445, 0.18007187949847991, 0.20260102412742653, 0.20250001108277071, 0.2243070322605275, 0.17183278119390233, 0.17083321420824227, 0.1952866424214702, 0.1827691733624638, 0.1829819229263212, 0.17562359218428503, 0.18829261084658022, 0.18567681253847046, 0.18760814695024197, 0.18258721303643333, 0.17468526979242616, 0.19073537301215848, 0.18131046140510887, 0.7379750710173054, 0.17309621992926838, 0.18707076821220803, 0.6357531725534671, 0.17835975549016914, 0.6748221680789439, 0.18425044319559603, 0.1900914661171268, 0.1831492272693428, 0.6128538697988721, 0.20198040585949162, 0.6767206783185189, 0.3335061449526542, 0.5287186022540307, 0.2056962046151125, 0.20599256202864635, 0.59813524201627, 0.18549321726512635, 0.1827423559545206, 0.18770967782872683, 0.18776552076765252, 0.20125343407067897, 0.20287845561442308, 0.18792600450361807, 0.18758075188868018, 0.17576978500343143, 0.06252513687910666, 0.07418634188808682, 0.06950689306843638, 0.06418665478619245, 0.06937910509695289, 0.0762507143390434, 0.07255278549200084, 0.07678096653383215, 0.06836769260613595]}, "mutation_prompt": null}
{"id": "753e7dbe-c5e6-455f-819e-3e2c356e1234", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Adjusted for robustness\n        self.prob_crossover = 0.85  # Balanced crossover probability\n        self.F = 0.7  # Modified differential weight for improved exploration-exploitation\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Slightly increased initial temperature for broader search\n        self.cooling_rate = 0.95  # Modified cooling rate for gradual annealing\n        self.diversity_factor = 0.25  # Slightly increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant += direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Adjusted cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm integrating Adaptive Differential Evolution, Dynamic Simulated Annealing, and a Mutation-based Diversity Strategy for robust optimization performance.", "configspace": "", "generation": 31, "fitness": 0.4038365944258902, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.30.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.9077533816862985, 0.905215973712491, 0.9095072150523891, 0.9048797706328464, 0.9066399542709896, 0.9075545359345105, 0.9085327112487678, 0.9144503870027386, 0.9083513803946252, 0.842865221220181, 0.8442517636481961, 0.8533071091389152, 0.811847450559036, 0.8504690962729988, 0.8278493259751218, 0.8275943824609652, 0.8611483824439154, 0.854233883153804, 0.2477934205806569, 0.12548572505504452, 0.48251656953908106, 0.14590610397115722, 0.16521287463305945, 0.17225076664258498, 0.14528676349139624, 0.1530434508877737, 0.10764542878949612, 0.14477666812733037, 0.13699777644334754, 0.13715387367397724, 0.1696211250562294, 0.17255191576228468, 0.16372276902879657, 0.13539672263072555, 0.14959682706607869, 0.1301038055690611, 0.9742495384876603, 0.9805205512085929, 0.9747371921528306, 0.9703237396988066, 0.9651183964608224, 0.9816087324902762, 0.9412812274992038, 0.9827994968427562, 0.9763867319211837, 0.7558586590837898, 0.7737742299643363, 0.738146835141786, 0.7825141836005962, 0.7517666347388864, 0.777202740807911, 0.7460450067346105, 0.7142829697323678, 0.7813635198002965, 0.8136815339261618, 0.37545858169706414, 0.863297114397949, 0.853600020229469, 0.9021739928956947, 0.8913390841541262, 0.47691293419222736, 0.9146379898280267, 0.47233917702801587, 0.2710669009170772, 0.28869534608613545, 0.20395159227502657, 0.6041912040173514, 0.29219737930918877, 0.3313770836131842, 0.1984867098689006, 0.13431181271235215, 0.3536672735012768, 0.27532662111599404, 0.1390590732554845, 0.05246520705755975, 0.19573407433570422, 0.22645105649056574, 0.1993364068709872, 0.2842165957415712, 0.369925032528173, 0.19879880951872198, 0.012847670792058286, 0.10408266243352116, 0.22063058017439074, 0.08622361754750252, 0.10251798412477453, 0.18270892720852527, 0.11952510699072305, 0.08902868613427162, 0.07923204627887248, 0.17766516332665505, 0.6608745023323515, 0.21690365134153655, 0.5936130507096024, 0.11755601288306994, 0.11576311446005061, 0.5280520536736488, 0.4291608884600542, 0.21088319899009544, 0.15476914383954465, 0.21936155505080213, 0.13677558175815197, 0.19056391350066115, 0.19878668355272322, 0.16623048875436763, 0.32663697446588447, 0.2250710042524433, 0.15105147082497183, 0.3059623519063337, 0.4794611704303384, 0.35278893210138584, 0.5033329892028328, 0.42089965898219595, 0.37360148342473987, 0.24340312461938418, 0.35403807581404767, 0.24955834097049767, 0.8027914970952779, 0.6555896297357361, 0.839413997543392, 0.6706018110383728, 0.6017004203620733, 0.6487954622644034, 0.7348564376230988, 0.6881819694164437, 0.6396078706407836, 0.10511933046199107, 0.1028252971750322, 0.11104505783535024, 0.12492084710659257, 0.1504789177708581, 0.0865591402228949, 0.10169237930084507, 0.09542767944155295, 0.10819205432479562, 0.1837846418760054, 0.17595305459799093, 0.15771715402685038, 0.24175537675204173, 0.21353051617826613, 0.20180344370686099, 0.17886624126718909, 0.19412582885621354, 0.1843662244065969, 0.42853898056505424, 0.6255413147105047, 0.5449169261081768, 0.5160712778297567, 0.5393330490956403, 0.6655701826684759, 0.6957177035496074, 0.6837075010323383, 0.7150913116399495, 0.3533648133555697, 0.36036332931131454, 0.2721264084446189, 0.4584147265264451, 0.4299310786017291, 0.4545416318185579, 0.5149968386869193, 0.45956218781096336, 0.5044873527748928, 0.2030762942492409, 0.20024594222329728, 0.18948634578281143, 0.18222082398753991, 0.20521825746750644, 0.22421929142587538, 0.18511075932681897, 0.19651658723876364, 0.21422158857780116, 0.5769421655050773, 0.23482036638302106, 0.694423959303369, 0.23362121810009484, 0.20974970653263225, 0.23909698791238732, 0.2444928343086301, 0.19922867781243914, 0.6912110826930522, 0.16529547833622327, 0.18547018188350628, 0.15323147381335023, 0.8978190288047941, 0.19830016550361373, 0.19576663635916247, 0.19460057920000884, 0.17113670942363046, 0.15805568492126953, 0.8579713103225579, 0.2128281802511126, 0.8995650004489706, 0.8671425858083665, 0.8737531297080582, 0.16788879558911118, 0.21049131239839036, 0.21360962303087117, 0.15657153360747467, 0.19981870784753064, 0.1746066544192103, 0.184678385242103, 0.18202794691291346, 0.20953296871509708, 0.20208718162162087, 0.1739835418437038, 0.19577879379912133, 0.17659846607040985, 0.07566392796781785, 0.07724631516082614, 0.07830476931673236, 0.09205193276716706, 0.08266014513098052, 0.08512443779965084, 0.07677728427453534, 0.07040381466515044, 0.08422456163826719]}, "mutation_prompt": null}
{"id": "74a681c6-50a0-4d7e-baf0-d961a09484c4", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 18 + int(0.4 * dim)  # Slightly increased population size for diversity\n        self.prob_crossover = 0.85  # Balanced crossover probability\n        self.F = 0.9  # Enhanced differential weight for exploration\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for better exploration\n        self.cooling_rate = 0.95  # More gradual cooling\n        self.diversity_factor = 0.25  # Increased diversity factor for broader exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    random_vector = np.random.uniform(-1.0, 1.0, self.dim)\n                    mutant = mutant + random_vector * (self.upper_bound - self.lower_bound) * 0.2\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV5", "description": "A refined hybrid algorithm incorporating Adaptive Differential Evolution with Dynamic Simulated Annealing, enhanced by stochastic diversity to increase exploration and convergence.", "configspace": "", "generation": 32, "fitness": 0.3262417482081369, "feedback": "The algorithm RefinedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7902417250922795, 0.7651581125268389, 0.7751595745279929, 0.8018154895120485, 0.8039549522190239, 0.7715251853518548, 0.7626819965244317, 0.7855208257579431, 0.7797905245369503, 0.6024319297324785, 0.5990431622299612, 0.5946794178941266, 0.6070082243489632, 0.6253767047963412, 0.6234985749089892, 0.6165373975539667, 0.6033659229927566, 0.6182791715456696, 0.218322973828735, 0.18874259051037257, 0.15072466389442252, 0.22483723751786744, 0.25381805281819747, 0.22726228278368288, 0.185258987730192, 0.29831874489398147, 0.21841256475809445, 0.16344291191103655, 0.1462424056801679, 0.13283311739448833, 0.14722079853920222, 0.14312106666600544, 0.14093108917721653, 0.11168272817288849, 0.11723705396157913, 0.17040894076006263, 0.977948329733825, 0.9867860028099147, 0.9857235749510439, 0.9812206595527747, 0.9803493192918111, 0.9842821134863557, 0.9857538924637465, 0.9655893132419171, 0.978200036017779, 0.4329609534643257, 0.3647370916552276, 0.4317394808005618, 0.40937068425150525, 0.426313428178103, 0.44497291609953304, 0.46800422823045507, 0.44160515045639437, 0.4203964278800094, 0.46040765923538773, 0.6015303269810716, 0.5308204997013465, 0.5270307607190357, 0.6289918725724851, 0.626515283900221, 0.6642834870138906, 0.5722394126758196, 0.6947257129817259, 0.3693863930060951, 0.30816994470791703, 0.2603755918143038, 0.2631672086305975, 0.35150932582888383, 0.2599866220420254, 0.2509223195483037, 0.28214768289142766, 0.2987764870086508, 0.115066154509192, 0.04894188019403101, 0.05366104623946544, 0.3596927830011254, 0.33272348011415853, 0.31794558663034955, 0.33405177870641733, 0.19636172394331874, 0.23764222969709248, 0.20736496857865072, 0.20124999464031523, 0.16730344865242974, 0.0005282603639167327, 0.199636619595136, 0.2026631003347068, 0.15859235881976108, 0.2191307505626111, 0.14316465096794362, 0.3022488055157091, 0.2968122458946314, 0.26604709134670956, 0.2806075588497827, 0.35673835158777667, 0.26785559372572776, 0.3519617923817384, 0.3592199324185783, 0.38732751068969196, 0.09118291687468372, 0.02182564221048089, 0.09067068219179897, 0.09246455384143226, 0.05338244105401613, 0.11502990653210021, 0.09207377170874664, 0.09355579300377137, 0.10216182354577519, 0.20766353596767517, 0.18294561277310284, 0.1918030075438676, 0.23613016226741446, 0.21811873149861094, 0.23014562008946482, 0.19593519741466392, 0.24219719740752899, 0.188546134836993, 0.5410480646406997, 0.5961465035139397, 0.5831041039408824, 0.6246823797175498, 0.6099496198604006, 0.5303374700803867, 0.5971055254693604, 0.5683270487944871, 0.5810231645446029, 0.11161699748471454, 0.08542987092486387, 0.10461817963975628, 0.10896348554467916, 0.09722930588862533, 0.08218527574876644, 0.09453713881303138, 0.09735414261071507, 0.08018837868014839, 0.1786094632118277, 0.19041067120532518, 0.1570641693677277, 0.14422316973190996, 0.17239385674757846, 0.16791007345664966, 0.1849557606385006, 0.13289336475014735, 0.16059381823151342, 0.30371917019635875, 0.3088582695268449, 0.2814920748140708, 0.3116476375706021, 0.3044378472991285, 0.2598492641021096, 0.3547449621335972, 0.36182485926463215, 0.33529022594195645, 0.20874143764806996, 0.2535410377712014, 0.24949832630057067, 0.22200922866407669, 0.2599813191386948, 0.2241948005691261, 0.2939761960864493, 0.27145855011676767, 0.26315774759511223, 0.21256217273122568, 0.18925638390105348, 0.17766522818143715, 0.16340408611117563, 0.1742778326868647, 0.18747418664768245, 0.1935478285367469, 0.1972578882031053, 0.17038551277181013, 0.268505454804739, 0.18492366232770763, 0.300322613698752, 0.1921269116882497, 0.17181898948040286, 0.27312778046434083, 0.2074899858654906, 0.22350827681565244, 0.19009558870697196, 0.765184091367939, 0.16040082447610982, 0.14542406745003555, 0.7238047541930437, 0.7252532844044035, 0.19269436843195342, 0.5415910375945014, 0.6955180887930338, 0.18862217113769197, 0.1652527303527933, 0.20885806467129786, 0.19707894642729618, 0.19463644034836558, 0.20155547299758392, 0.19770756604520334, 0.20570582149616023, 0.14586863184080245, 0.7408769166351774, 0.1807381922311292, 0.18572189049657828, 0.18546017498963796, 0.18519223164468757, 0.1853340030313183, 0.1930371823138718, 0.19013226508199776, 0.1855718184077525, 0.17556569161285096, 0.07221402494002283, 0.07104187997889189, 0.07228680103334917, 0.08560075313122739, 0.07949657326620818, 0.0768113949551722, 0.08660737636958638, 0.06736988436060587, 0.07272812924935623]}, "mutation_prompt": null}
{"id": "7ce0a11a-cc7c-4fb0-adcb-d389d4a1d269", "solution": "import numpy as np\n\nclass HybridDEStochCoolingV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.3 * dim)  # Adjusted population size for diversity\n        self.prob_crossover = 0.85  # Moderate crossover probability for balance\n        self.F = 0.7  # Adjusted differential weight for stability\n        self.current_evaluations = 0\n        self.temperature = 1.0  # Starting temperature for simulated annealing\n        self.cooling_rate = 0.95  # Dynamic cooling\n        self.local_search_prob = 0.3  # Probability for local search intervention\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.local_search_prob:\n                    perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n                    mutant += perturbation\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "HybridDEStochCoolingV5", "description": "A novel hybrid algorithm combining Adaptive Differential Evolution with Stochastic Local Search and Dynamic Cooling for enhanced exploration and exploitation balance.", "configspace": "", "generation": 33, "fitness": 0.41402918853528053, "feedback": "The algorithm HybridDEStochCoolingV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8513980444256296, 0.8473456431043092, 0.8592042685802704, 0.854909424065907, 0.8794709623761267, 0.8625192806963784, 0.8568312278628827, 0.8603956243383161, 0.8314857070368065, 0.7476678487343139, 0.7429047347334465, 0.7031493985754154, 0.7124470988119929, 0.7349779640753362, 0.7256378826014558, 0.7420627791802719, 0.7408265026884793, 0.729041283153932, 0.27170889640467866, 0.140531120735769, 0.1259244290002871, 0.11290846099846097, 0.15045592033087363, 0.13636999989216514, 0.14872976675321403, 0.26475769858636056, 0.2730177124875094, 0.14186796687393166, 0.11344450028604025, 0.13712978430848344, 0.1430350756641512, 0.11711431343535117, 0.15507376646783555, 0.1299165331212413, 0.1328780316218574, 0.12500292637252564, 0.9457815167081549, 0.9669665218901599, 0.9743145094942935, 0.964828034797058, 0.9699865389847698, 0.9589808004701826, 0.95862674094575, 0.9470505481574678, 0.9825313161097728, 0.6372372755786799, 0.5918639794240228, 0.6203322402991834, 0.6006752437305651, 0.6045749997416854, 0.6516592315801005, 0.6419089946990355, 0.6052056304489859, 0.6426610544388707, 0.8070677569515322, 0.8148311033950757, 0.8158540202564453, 0.8228381131902658, 0.8581369938686135, 0.8227981437343146, 0.8028334840324939, 0.8318681822410868, 0.8040261463317363, 0.3646753502092859, 0.4289612389705525, 0.3529701587637952, 0.42905681201692747, 0.13230688813268332, 0.3617143824090612, 0.3564876746446226, 0.3507524487003625, 0.4752245663174538, 0.12597727532728076, 0.15591718512929797, 0.33501642533770304, 0.4743471877478964, 0.39551634367695165, 0.41292278433461405, 0.3809998782369941, 0.32676661509632443, 0.33603328253712117, 0.41393373759788954, 0.358274650796365, 0.40555744561503326, 0.3476142758080837, 0.38990028504242313, 0.3342290399947069, 0.34616260465971027, 0.38790127816529574, 0.30255286610496535, 0.5172834290744814, 0.45565301718743234, 0.4795485134696208, 0.5285461133393845, 0.5654895279180192, 0.48674341326934434, 0.5483806842454523, 0.4997749224522966, 0.5579740218298976, 0.09632175185762681, 0.1735633396783709, 0.21708850783098865, 0.15175550739680876, 0.269274299846491, 0.2629430965733791, 0.20916409748941744, 0.16639059770782083, 0.059626431793878165, 0.3276210348514914, 0.33494191338239165, 0.31959723392875583, 0.3321419512863544, 0.36179602108095454, 0.2954874159124409, 0.3392120473842756, 0.33638329150118673, 0.33190683421088407, 0.762791935883036, 0.7460356147814045, 0.7329870220113415, 0.7365877480756546, 0.7272032562682955, 0.7231726770988032, 0.7365505022839675, 0.7432287028868585, 0.743568440715187, 0.12877300925121749, 0.09927666373009436, 0.11639048265945495, 0.10922784552854992, 0.1408388025585411, 0.12043890914839395, 0.12097266045406962, 0.10391971047677528, 0.0848389681702898, 0.2026327002173962, 0.2821796647051963, 0.35496578212563046, 0.2221932697337231, 0.23282236342506935, 0.40378631643010354, 0.20544420770973226, 0.20973691207961542, 0.18805664387420007, 0.4054939843852281, 0.41888023438993727, 0.43552289332086425, 0.46277303616274823, 0.41991491922325985, 0.415908379158866, 0.45053600182167575, 0.4789022203171929, 0.4950771055580795, 0.3305185235208069, 0.24266467715149176, 0.3021185336622758, 0.3301451398157933, 0.3121175931913899, 0.34579394491287174, 0.32126987114617955, 0.3506441881981782, 0.33246735622561796, 0.19091754957628493, 0.18334730405160649, 0.20397706768195534, 0.20282496972106057, 0.19159978968821356, 0.19666320996051323, 0.19721812719667653, 0.18292388378701052, 0.19477017193659085, 0.24970031912685176, 0.2113018628231138, 0.4906685587189754, 0.3916455849884284, 0.4156804375577633, 0.5555293400161594, 0.4197299414948721, 0.2797547044832157, 0.44376467042005463, 0.16127252823296512, 0.16990246916223606, 0.14197976582910965, 0.7861738808960368, 0.1882305868506029, 0.1762931509058182, 0.8719667397087021, 0.7883146808147401, 0.17102550689159002, 0.2071015893166076, 0.16492583895058344, 0.16776887858291445, 0.7131032441049315, 0.16828044380664542, 0.8199809294740885, 0.2125557999720461, 0.8334232175445644, 0.7747546549030664, 0.1959511070485337, 0.1763956942444067, 0.1969630016297551, 0.18168276328579847, 0.1864637683558431, 0.1829761362626947, 0.1955054120127997, 0.18000529187126013, 0.21177203002596856, 0.07404172009446974, 0.0877217005477412, 0.08313911638661753, 0.08073058449352066, 0.0786650813826203, 0.08074589082959704, 0.08471580409053547, 0.07127124601963586, 0.07915416366200168]}, "mutation_prompt": null}
{"id": "d32e3e4a-dbf1-4ebc-a364-94da6558792a", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Increased population size for diversity\n        self.prob_crossover = 0.85  # Reduced crossover probability for selective exploration\n        self.F = 0.9  # Increased differential weight\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Increased initial temperature for wider exploration\n        self.cooling_rate = 0.8  # Adjusted cooling rate for gradual annealing\n        self.diversity_factor = 0.25  # Further increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm combining Dynamic Differential Evolution and Adaptive Simulated Annealing with Diversity Boosting for superior convergence and robustness.", "configspace": "", "generation": 34, "fitness": 0.31835035638296866, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7692234210705415, 0.7208076729126018, 0.7270079492337931, 0.7613451657462019, 0.7711976740774149, 0.762579596841074, 0.7839409503200653, 0.7689355174656544, 0.7415270696174815, 0.5748239894682249, 0.5588005995314173, 0.5638347765113614, 0.5026207366267186, 0.5637934035128607, 0.5550194163885156, 0.54721579660308, 0.5490058649624269, 0.5803245057591209, 0.1537921497961353, 0.13841801673351695, 0.11985689783625986, 0.17353259875866156, 0.11234162543922066, 0.17709775612235246, 0.21223315385706143, 0.1653036979204806, 0.1290786219149198, 0.1197592486856256, 0.13907534477789507, 0.12470998459658855, 0.12801368591945406, 0.16504947874258669, 0.11108184736090931, 0.10099421975144873, 0.12848990262318638, 0.13482091208875058, 0.9691935829014177, 0.9545435312390489, 0.9716308147293847, 0.9635793750316238, 0.9808640490149934, 0.9852048627614617, 0.9830493808851236, 0.9689325646902958, 0.961134168005428, 0.3800040603788257, 0.3596561579116102, 0.3595949234415624, 0.3705249839786193, 0.35540840354932723, 0.3561527863988986, 0.35179329493168143, 0.42376819381990805, 0.38300562303144225, 0.6239760459583525, 0.5199061325438938, 0.5728005295261345, 0.6168518698465484, 0.5479478571518257, 0.6247562244188543, 0.6107877824380816, 0.5638100402246548, 0.6528789370047825, 0.287021444609578, 0.23820475602229485, 0.25554232168361646, 0.300227394404888, 0.1879304060272159, 0.22757310447621548, 0.1999788627518978, 0.28219936481342556, 0.24028043037390245, 0.227502395515513, 0.1152353426959215, 0.039242780762877905, 0.2129917202194963, 0.1944989150222819, 0.2952339850742468, 0.2423856170280907, 0.20857528883262388, 0.2210536340424616, 0.16268960454482928, 0.20272556430569744, 0.15982268586979376, 0.10444108048692491, 0.13734998738280335, 0.1356318979525868, 0.13369110649489324, 0.11635433856728084, 0.15045079644035741, 0.291711736093916, 0.26388919521609744, 0.28422851322995324, 0.2886274412056019, 0.25638227101636835, 0.25744395244949236, 0.2894143476985721, 0.27059720737108817, 0.301976280951769, 0.023498819434837448, 0.04294919059426394, 0.08774776096617531, 0.05247277993332866, 0.010301354383450922, 0.10060407458872833, 0.10095781960518702, 0.09057956360478714, 0.04530754504718715, 0.1588125542932517, 0.18871881416215375, 0.1846140033466558, 0.19402009865820347, 0.19903461910320497, 0.18238610326666582, 0.20262138442116673, 0.18240475844957538, 0.19107882233672058, 0.5628574042319496, 0.5377255843843141, 0.5289106639415015, 0.5631166781418524, 0.5240597642461656, 0.5403910834707863, 0.5652692959968046, 0.5179135231598315, 0.5282369881824305, 0.09911684841529345, 0.09176716103414151, 0.08715377722648776, 0.09791966854198819, 0.10175900083622547, 0.10039575811248869, 0.09117089060204708, 0.08757843112067454, 0.08865909162835128, 0.2464062864913762, 0.13333489248814934, 0.1728387562214413, 0.24782195756999836, 0.1464099158061386, 0.21134046150573704, 0.18753537431116196, 0.1524574740945318, 0.13759806235620176, 0.30202941553789275, 0.3435927798117274, 0.2572527353147338, 0.3330214698991213, 0.3008109188188244, 0.32001160074439294, 0.3188459625245027, 0.29634030885477547, 0.3212738494534758, 0.2211756960090413, 0.20212409623937144, 0.2185993976490379, 0.21313019608888317, 0.24162322235056088, 0.21756608254657273, 0.23337297285290803, 0.2222635378399287, 0.2229028591428538, 0.1939770675798419, 0.17609104717602442, 0.1912105758057031, 0.17864801237427896, 0.18829298093870062, 0.19839854355933073, 0.18040607020352395, 0.19167157563623416, 0.1734132932718585, 0.18687924717767168, 0.1810578141360335, 0.233785985438009, 0.2175616156740623, 0.18138946330410022, 0.18973182193536553, 0.2109944239022603, 0.19793364484885678, 0.18061866777534197, 0.16885280584996532, 0.7439572824047694, 0.6174185794871083, 0.675703494728817, 0.7127362946905271, 0.693537816594381, 0.6669979086858667, 0.5519648393158703, 0.7052108302969486, 0.673082859064172, 0.6381941270776011, 0.2014510033883119, 0.596849567121409, 0.19835954063141625, 0.5815337544078448, 0.20864160943516874, 0.2074088932854593, 0.20816709462147864, 0.19387267597908742, 0.17787877400710617, 0.1769431072783476, 0.18191864091938492, 0.18850202056951526, 0.18462288921013548, 0.17841753620524814, 0.2030171133022386, 0.19106866481466722, 0.07322783669341648, 0.07503671217700336, 0.07276617881679814, 0.08489856877640867, 0.08047112743774465, 0.07950555848838048, 0.06777059538660957, 0.07139643143528684, 0.07592523638535564]}, "mutation_prompt": null}
{"id": "d4e1c7b8-e091-476a-a7ed-4644907c9475", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.7 * dim)  # Adjusted population size for better exploration\n        self.prob_crossover = 0.85  # Balanced crossover probability\n        self.F = 0.75  # Adjusted differential weight for better exploitation\n        self.current_evaluations = 0\n        self.temperature = 1.0  # Reduced initial temperature\n        self.cooling_rate = 0.85  # Improved cooling rate for adaptability\n        self.diversity_factor = 0.25  # Enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.2\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-10))\n\n                self.temperature *= self.cooling_rate  # Improved cooling rate adaptation\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm blending Adaptive Differential Evolution, Dynamic Simulated Annealing, and improved exploration-exploitation balance for superior convergence and robustness.", "configspace": "", "generation": 35, "fitness": 0.37134133875656444, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8207147356511357, 0.8107404257442797, 0.7927779967199154, 0.8184044028303166, 0.8186280249730934, 0.8236626494925701, 0.8118617842598259, 0.817170236340159, 0.769995037687921, 0.6648176511176, 0.6949785512416171, 0.6742803971561042, 0.6984485046515302, 0.666647312778659, 0.6490183442231774, 0.6619321099593534, 0.6894469170450469, 0.6765609318233148, 0.12119171514484839, 0.13695933508726488, 0.12486716233685369, 0.11845971426873747, 0.16118221426720591, 0.17290278782375057, 0.1453296083911778, 0.10733925154545232, 0.11002396845114437, 0.10679283931624772, 0.12305697143241778, 0.09956652475479733, 0.1208188969230003, 0.1152264953252996, 0.12013353963323048, 0.12273319863658305, 0.13568437511525755, 0.12392467238259264, 0.9663006775861716, 0.9670628463732002, 0.9597935271224102, 0.948186627737124, 0.9663926801778988, 0.9573189452531485, 0.9777986491482104, 0.9711326849952351, 0.9824074183513558, 0.4648421833439631, 0.4678313189836588, 0.49072158971399127, 0.5057801673020008, 0.46041321931605206, 0.4149254200866349, 0.5053217495858384, 0.4809669662341651, 0.4873391416850904, 0.753080455266592, 0.6964146749053635, 0.7329937675381726, 0.7044453726142346, 0.725756878576097, 0.7793388662745144, 0.7344543104177352, 0.7563202107533284, 0.7785477337552406, 0.35689777338285344, 0.31143606136766844, 0.3707188862974442, 0.3605116490389585, 0.3582521758131778, 0.3970251059464749, 0.402528657990062, 0.3401281279252528, 0.3888924298901635, 0.337136016132939, 0.043133413999490444, 0.31138176647241944, 0.3358735156650692, 0.2858459865269529, 0.402876045044698, 0.3943344453690216, 0.38813492885887013, 0.3819884272209785, 0.23455374971574616, 0.3279850895317833, 0.23101236749523457, 0.2999983484974944, 0.29255798483020967, 0.23967461433326542, 0.26572333089796873, 0.23222781803906678, 0.21989561730918317, 0.3645315304186346, 0.35012404266592767, 0.49631940097554583, 0.3929228728613162, 0.3951027847741786, 0.36057534682790904, 0.4408640440026673, 0.5126048955679366, 0.3665294417372491, 0.054607621563668496, 0.08174311349168562, 0.14471763118110648, 0.13121037316343664, 0.15740889309053951, 0.16482066199683632, 0.1794047457652962, 0.1083708290049804, 0.06625096781893713, 0.2526431094490571, 0.29740324610314195, 0.23380211708529253, 0.2906948458044629, 0.28707288465183345, 0.2806497816484763, 0.2468257848987725, 0.26151092229437733, 0.2648803641261338, 0.7373820457956921, 0.6718332768230248, 0.642445613662365, 0.6438074528244881, 0.638592318035015, 0.6440482285098983, 0.6425179364122708, 0.669833165690831, 0.6535311753797213, 0.10492414466046684, 0.09896347749498313, 0.10063457579202861, 0.10373563582226974, 0.10170334160757377, 0.09063583232365358, 0.09200420188279967, 0.07903461818898128, 0.09807565674640228, 0.13608810617987133, 0.1469720706012767, 0.15814370056900606, 0.16945896365897806, 0.22646025643276713, 0.19919667109087458, 0.15802400206607703, 0.15742513080046627, 0.19161730373224217, 0.4115467897100079, 0.32474347559146055, 0.3608646106670802, 0.37490534061061753, 0.38200838418507765, 0.3334405598575476, 0.400774848999209, 0.39545696812224873, 0.3963688640842784, 0.28011132754577783, 0.26103014121877055, 0.24311860400689733, 0.28748935181575264, 0.2515320275805638, 0.2530347456724519, 0.26923159713539235, 0.30689588041144944, 0.28817509007422415, 0.2055989171901036, 0.18330012441140364, 0.18211398465341644, 0.20248771212502592, 0.2048098627862427, 0.17706877526972908, 0.18055286733837272, 0.18584473479453567, 0.19634319891320973, 0.19346983985656685, 0.18885175577869218, 0.18612020069689494, 0.2518418368111258, 0.19515984664360253, 0.1923006282071399, 0.23111542845723876, 0.26119588045223086, 0.4082145104310074, 0.794121126580082, 0.7452969109298033, 0.686000763113956, 0.18442351760477038, 0.7005826891330735, 0.6846893437605961, 0.7555225473095387, 0.7594417899206207, 0.15749568263680636, 0.7383853609487824, 0.20854038308472111, 0.20600335983174822, 0.16522893975681419, 0.20502466800125263, 0.19831031473411365, 0.2124293782715846, 0.7467113674140085, 0.7263736965093037, 0.1841838342040245, 0.1933465107054504, 0.1778619918225417, 0.1912405490131539, 0.1775591474870527, 0.1767147341391948, 0.18391884863710461, 0.19763720401965446, 0.19220587121012456, 0.07995263534103103, 0.09478078540739165, 0.07883482346521797, 0.07426744809179164, 0.07820422681541772, 0.07158095710035417, 0.06949391655930592, 0.07469800638679369, 0.0779742723906145]}, "mutation_prompt": null}
{"id": "905d7281-4627-4624-bd16-4a60a53722e6", "solution": "import numpy as np\n\nclass EnhancedHybridDEASGD:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Optimized population size for better exploration\n        self.prob_crossover = 0.85  # Tuned crossover probability for balance\n        self.F = 0.9  # Adaptive differential weight using a stochastic gradient-like approach\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for diverse exploration\n        self.cooling_rate = 0.95  # More gradual cooling to maintain diversity longer\n        self.diversity_factor = 0.25  # Enhanced diversity factor for broader search\n        self.step_size = 0.1  # Introduced step size for adaptive differential weight\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                adaptive_F = self.F * (1 - self.step_size * (fitness[i] - best_fitness))\n                mutant = population[a] + adaptive_F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASGD", "description": "An enhanced hybrid algorithm leveraging Adaptive Differential Evolution with Stochastic Gradient Descent-like adaptive step-size and diversity-driven exploration for robust global search.", "configspace": "", "generation": 36, "fitness": 0.24094229625723507, "feedback": "The algorithm EnhancedHybridDEASGD got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.26.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7624082378892677, 0.7528689701459734, 0.7611492682829287, 0.7778209655014885, 0.7643449019545855, 0.7651823491457681, 0.7767687588561648, 0.7274985798884743, 0.753687716906444, 9.999999999998899e-05, 0.008168417340338241, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1003886700026787, 0.09957549688786749, 0.11121304941047361, 0.1181129629384805, 0.09658275000179695, 0.10406637306047939, 0.1140287442816249, 0.13191915980468805, 0.11346359612353185, 0.0602053682613799, 0.058932729763718106, 0.06423819498841554, 0.06602463966048977, 0.05723135806134183, 0.06380012288902037, 0.0647828691193244, 0.06246907849530092, 0.0631545895126252, 0.9945588301029638, 0.9808060858200313, 0.9842368715609459, 0.9557659289140094, 0.9899476083238856, 0.9779920339058371, 0.9673318439625158, 0.9772476594816973, 0.992001860671842, 0.28358588421390385, 0.2821577406885448, 0.29135838264985325, 0.2175222526402264, 0.22806825270024078, 0.23610933089976938, 0.1869732228135309, 0.24149417698289688, 0.2200350046580265, 0.44671241457645505, 0.5388341265783269, 0.45068704252424563, 0.6303586135337456, 0.6072045903892165, 0.6288649886969357, 0.6967551344257905, 0.6433377472923645, 0.597028683102026, 0.040729998723730176, 0.05163496929254674, 0.0738465304325957, 0.07297315755236577, 0.09616105626099014, 0.05129908115482029, 0.08971393774730874, 0.08151664123494606, 0.0968258997060426, 0.10006825437624034, 0.033521191930147354, 0.08332182738924698, 0.09854343666294585, 0.06421612908326735, 0.09540262148350953, 0.07188207386788326, 0.033221459662500785, 0.06842582286706433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000798836924830848, 9.999999999998899e-05, 0.1493847824679848, 0.0521656342211958, 0.10542395191086906, 0.09088835380859495, 0.1414510198802451, 0.05773689939765969, 0.20451964062757755, 0.06632184782800399, 0.11666019507454606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770409555837161, 0.025597982743334247, 0.028846465862593318, 0.03130679667100089, 0.019443226300338345, 0.03193734053108854, 0.041888695819628396, 0.04931851237587981, 0.03811446391924367, 0.5958820020154818, 0.5367543856211873, 0.5607948780836697, 0.589537829588505, 0.5899249343040625, 0.5566905581214956, 0.5811766877858777, 0.5529205899023806, 0.5638229031967531, 0.10583576717440613, 0.09600806666027584, 0.11627678725404189, 0.06888828762453236, 0.10025725214658354, 0.06688914093616372, 0.07020767629086877, 0.08139930599640699, 0.07088319932063436, 0.37540515184494916, 0.15404224757406715, 0.15376418752800747, 0.1799307055360121, 0.3110649467338471, 0.18985363920760867, 0.14508563273015285, 0.1986207250067965, 0.17419764409318328, 0.33993640022143246, 0.3477377908570082, 0.3029219139963708, 0.35444130336772406, 0.30351155976012856, 0.35694211559050615, 0.33735733397388246, 0.33806615428988984, 0.3637605960214516, 0.23415852864616327, 0.2472278616993271, 0.26622139253301536, 0.25740106820425646, 0.23004729391893552, 0.26301996060982424, 0.28135126003784094, 0.28986194362360373, 0.2613377404541306, 0.19073966220212268, 0.20137381034361046, 0.20895467298641024, 0.2010520249803126, 0.21823366996070248, 0.20792523352347236, 0.18914865446608187, 0.19214657402889757, 0.17984760478531747, 0.16806706100749202, 0.15294380024769305, 0.1783884609159726, 0.18075628998955584, 0.15892544813067833, 0.18055716820075562, 0.15967512890558377, 0.17278345896133995, 0.17299606868909345, 0.16972825114611645, 0.8031861208444361, 0.1531852499279579, 0.7708530439930308, 0.1869052595683125, 0.19299619878248686, 0.1834766032939832, 0.7347532957539724, 0.2072196856345423, 0.19889012928000704, 0.6340684061371081, 0.19700879131526972, 0.6097411337208458, 0.19709282247120297, 0.189055509218936, 0.2056631126560884, 0.21084720414173752, 0.2092141390831772, 0.18893342634366606, 0.1848541060073231, 0.18761184580127366, 0.18250140521130231, 0.177539888641574, 0.18541529584107408, 0.19021483368992897, 0.20265077235103646, 0.18820733880970297, 0.07229705240530615, 0.07051181412093122, 0.06457787529742887, 0.06726799273219952, 0.0644815673710365, 0.06383590528714844, 0.060644777478083056, 0.06678179645594406, 0.06301413570442915]}, "mutation_prompt": null}
{"id": "0c23daa6-8410-4b4c-81f4-3ff8be1d5251", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Adjusted population size for better exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability for balance\n        self.F = 0.9  # Slightly increased differential weight for exploration\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Further increased initial temperature\n        self.cooling_rate = 0.95  # More gradual cooling rate for better annealing\n        self.diversity_factor = 0.25  # Increased diversity factor for exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    step_size = np.random.uniform(0.05, 0.15)  # Randomized step size for diversity\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * step_size * (self.upper_bound - self.lower_bound)\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Apply cooling rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV5", "description": "A probabilistically refined hybrid optimization algorithm integrating Adaptive Differential Evolution with Dynamic Simulated Annealing and Enhanced Exploration for robust convergence.", "configspace": "", "generation": 37, "fitness": 0.3200921380080607, "feedback": "The algorithm RefinedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7592981532792442, 0.7381579578554398, 0.7556980370182818, 0.7530200832488221, 0.7854951393465189, 0.7508925969624767, 0.7527731646101398, 0.7421425213277631, 0.7254179351136677, 0.551699148455913, 0.5545431187885147, 0.5549017200790929, 0.5953536051331718, 0.5103850091854512, 0.519927087060213, 0.5503979948707776, 0.603109389970673, 0.5484682682347712, 0.14397877524006197, 0.12588337835199215, 0.14326096974315583, 0.15719440235798865, 0.1265086607923409, 0.1171562856905688, 0.16052545984397382, 0.12349741157990224, 0.13204719280692356, 0.12694328866282412, 0.15417359760622107, 0.10505283546680022, 0.11459364619068235, 0.1162603591092557, 0.14469521286391596, 0.12530101876691335, 0.13745800052539525, 0.12081107069791086, 0.9892051672197831, 0.9823364277214381, 0.96623828405708, 0.982044552766139, 0.9666121202561255, 0.9548379002324918, 0.9667003742321194, 0.9558382294895512, 0.983972195032339, 0.360457009602678, 0.35832451556264, 0.33912704188178044, 0.3762556365825699, 0.35724828689793897, 0.3701078711473049, 0.36349080668073075, 0.35894103737219774, 0.4084508157283805, 0.6439929232896571, 0.6652915920688665, 0.6260289793264797, 0.5954450067273125, 0.6388456305787686, 0.667391982549953, 0.6086474854692778, 0.5229330493458664, 0.6919398705713937, 0.2411635834830801, 0.2683475639911036, 0.26544908312058024, 0.2825578374554747, 0.2708568798962395, 0.2883822841546664, 0.2538887852968349, 0.2701106171897196, 0.2699642199693463, 0.2659892975272896, 0.29444020211210287, 0.2320200034515133, 0.25783692301373706, 0.3320545019644888, 0.3139021455258686, 0.24426232601108444, 0.22127370757031195, 0.27696889905051425, 0.15209820769036264, 0.12211931290480571, 0.11972942433610001, 0.16088907859835944, 0.18402135981539314, 0.12787148519134628, 0.1417606056748627, 0.13430425313031558, 0.1345418468329852, 0.3145356607079637, 0.284364284374349, 0.34761402137172204, 0.2629377095480725, 0.2366814842037932, 0.26569077224791204, 0.31084431411434643, 0.362319562047393, 0.3287933053034755, 0.05767469639229561, 0.028360145488933064, 0.0643547683022665, 0.030656682805226376, 0.04476917881297926, 0.04556385811422847, 0.052245149086888376, 0.07619871966936465, 0.07715545629393072, 0.19246106334853397, 0.1892961060144307, 0.1710896845809151, 0.21491062234895075, 0.18643685432661228, 0.20452721214367042, 0.18175454125135748, 0.21288032418757963, 0.1743205192015821, 0.5507763738037161, 0.5180972010351661, 0.5589521302096381, 0.5212527564194033, 0.5286296912854627, 0.5496868718479608, 0.5216365575583407, 0.5479113773708602, 0.5612036720501665, 0.09791735527522183, 0.09102124045558901, 0.09421754025763873, 0.09879037156622728, 0.08728466573130844, 0.09286790429716385, 0.0791036841471392, 0.08487044741843897, 0.09658887945282735, 0.17686129931151517, 0.1826302235764583, 0.18989949928417482, 0.1607485688235638, 0.3408658066655711, 0.19086308006741914, 0.161683940258461, 0.17351839922187684, 0.16527871058809085, 0.30266255775251993, 0.2768570363567403, 0.31190823887024366, 0.28579775937776863, 0.30983600073570783, 0.30092967796909487, 0.3048752425382282, 0.3486941023319702, 0.32057790353471094, 0.23128937877746925, 0.24851781118054195, 0.20013231568557988, 0.22628983184014995, 0.20159304486026086, 0.2160423392455848, 0.22941221486499164, 0.2656415946601073, 0.2339072812500267, 0.20169155333283528, 0.19554922079437342, 0.1873746659077209, 0.1833612115985489, 0.1765500216842687, 0.17822046976016848, 0.19158515301686452, 0.1921689789011154, 0.20969712130707507, 0.17787463753745414, 0.24419249699529466, 0.2108487060472719, 0.19487426921599194, 0.1924321898612713, 0.22985394695363548, 0.19592460147434454, 0.18124759143521973, 0.17469263895510811, 0.1838913228638538, 0.17013940325800792, 0.15153266817981026, 0.1809139526047132, 0.6609618193858764, 0.7581550515513359, 0.748733705478555, 0.5880967701578564, 0.6398155495498219, 0.20730950280573957, 0.6958307473690463, 0.630280979475764, 0.19914463590584097, 0.5864831503153554, 0.20020799032653336, 0.20984459948954803, 0.7660716352960805, 0.5675278607119288, 0.19441884817479804, 0.22217664026596284, 0.1732851950570603, 0.19600965201662024, 0.16938145467084886, 0.17739943288941107, 0.18538739622810496, 0.1840131815556847, 0.18299301647244626, 0.0668020380261356, 0.07804483757968061, 0.07366969447240057, 0.06694365923397094, 0.08247247030850868, 0.08221744824169841, 0.07246064244326966, 0.07913844920202173, 0.07891593311126288]}, "mutation_prompt": null}
{"id": "7dee6c74-1ae1-461e-87fd-e6594ee88e1c", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "91520426-bad0-4a85-9909-03b891c41f23", "solution": "import numpy as np\n\nclass EnhancedHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted population size for even better balance\n        self.prob_crossover = 0.85  # Slightly adjusted crossover probability for balance\n        self.F = 0.7  # Adjusted differential weight for stability\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Further increased initial temperature for better exploration\n        self.cooling_rate = 0.85  # Slightly modified cooling rate for gradual annealing\n        self.diversity_factor = 0.3  # Adjusted diversity factor for enhanced exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant += direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDESA", "description": "A novel blend of Adaptive Differential Evolution with Enhanced Dynamic Simulated Annealing and Stochastic Perturbation for robust optimization.", "configspace": "", "generation": 39, "fitness": 0.3883721749020728, "feedback": "The algorithm EnhancedHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8320463091222018, 0.8425515339215283, 0.8148328255941366, 0.8150751971153749, 0.8349589355232794, 0.8400290272164653, 0.8247596279631981, 0.8364423233718615, 0.843681928248832, 0.7085375423012762, 0.6874944808260859, 0.7120406972638891, 0.701497553300926, 0.709846491560117, 0.6815120185448169, 0.725147550908503, 0.7185973072871839, 0.737370106178886, 0.17022237553856612, 0.12094528884867817, 0.1210702466033412, 0.20826797170785405, 0.1334119525343178, 0.13854696028074942, 0.13546990747987075, 0.3137442255136965, 0.19984078318123744, 0.1506032771746013, 0.14389996008871275, 0.11133458355524706, 0.12049075612893134, 0.13345057709650976, 0.1305131453606485, 0.13037403752430476, 0.10196391886025069, 0.1302271392133878, 0.9679278657417757, 0.9739235622644314, 0.947279161446208, 0.955584071647517, 0.9624357168989156, 0.9808272950823226, 0.9879236912688545, 0.9729833379459493, 0.9829168654333771, 0.5690177218920154, 0.5214314772145701, 0.5493045998947472, 0.558420765857983, 0.5372178096706366, 0.5436501970693777, 0.5779071823471864, 0.5203257523228487, 0.5324598368946671, 0.7547099969991719, 0.775997588088628, 0.6872400355510687, 0.7721086029982247, 0.8171468418375565, 0.7736656349468255, 0.7341641408011848, 0.7548896199636214, 0.7913658368880867, 0.5137055060862312, 0.38150311995418495, 0.32670188361713604, 0.3973791554879893, 0.4456244619625027, 0.23273116713877184, 0.36499817605218887, 0.44349176443713656, 0.12633878609936, 0.23022370494020983, 0.43673538508586185, 0.3419010822847467, 0.39935646484967124, 0.3006900151117733, 0.2462491328710117, 0.3450578886973583, 0.3702870784004808, 0.4721854098127355, 0.27698329381165554, 0.3185070559993124, 0.34058475403861166, 0.3195404636983853, 0.3983467433218765, 0.3218220266083399, 0.32111644114888827, 0.43281123452547776, 0.34906550873067543, 0.48840604996093695, 0.37939999914377454, 0.45245787907516055, 0.45052427625217906, 0.3872937343852547, 0.46827705726985913, 0.4605723086947088, 0.4968545018820679, 0.45466367644686556, 0.11662748504527665, 0.1345383290345028, 0.2029404095578493, 0.18897791568314837, 0.1680487323883122, 0.15978380769329925, 0.16209128781469406, 0.15084358479520976, 0.18046673749631137, 0.30995394162798606, 0.28656488874683406, 0.3394600035972104, 0.36316586390608807, 0.32731518450923214, 0.2951760133450333, 0.2968510192019328, 0.32527345664239327, 0.3143827132110165, 0.7286319519104414, 0.713415454051977, 0.6964832557746841, 0.7128857121500093, 0.7325720677140879, 0.7158699425046468, 0.6858252333759719, 0.7151228126447005, 0.6877660068361572, 0.10069554792935254, 0.12908344819255146, 0.0868869335103658, 0.09885017186144085, 0.08909291132445962, 0.11800215289743354, 0.0988488360640769, 0.10576798589951975, 0.11495618494460524, 0.1619123658722409, 0.15272687842370924, 0.20825163701048655, 0.15972430126177295, 0.21601844582861818, 0.15180629301970605, 0.2058289100221936, 0.13764574522433815, 0.17240421556235674, 0.3801396060149361, 0.39390775675021383, 0.40822507450588785, 0.40140819282373275, 0.3725406368445736, 0.39183728106340654, 0.3944943599955857, 0.4449262845163855, 0.4380669531888056, 0.29203203836656455, 0.2893236350500693, 0.3067532888151543, 0.31427713378900535, 0.2930402849844922, 0.3020580567476663, 0.30587956356054524, 0.32951453319552315, 0.31558947012880656, 0.19444787033711586, 0.19326133949373137, 0.19268607742687893, 0.20278413931510186, 0.22189051326221465, 0.1979032998156972, 0.17593939136993453, 0.18711250361322318, 0.19114711948077434, 0.39335716866610315, 0.191258123523117, 0.3376357497765139, 0.20142383169702527, 0.20956600201088404, 0.19954521215685994, 0.2603883425231549, 0.20995350303193427, 0.27790350092551164, 0.16412195127704488, 0.1627055403677945, 0.8001121421146533, 0.7764120305366269, 0.1833604773260249, 0.18475740575824307, 0.8281923482447209, 0.1659142746896034, 0.7793922080854564, 0.7557321203688327, 0.7342029459229806, 0.202011792295424, 0.2044692165124934, 0.15333360165718457, 0.16607372878422044, 0.21146035168494404, 0.6359205484395427, 0.15406759989238394, 0.21750624964348897, 0.19887187712315701, 0.19687558363210123, 0.17919801125537527, 0.191614847975503, 0.18418731554551437, 0.17558709133075767, 0.18506489508605417, 0.19867769944879943, 0.0744503071564111, 0.0822947357214131, 0.08957071340986766, 0.07694266512701176, 0.08044968360865545, 0.07546867696598014, 0.08881912399613556, 0.06825481374843034, 0.07454962944892507]}, "mutation_prompt": null}
{"id": "0c883a4c-b7b5-47ac-a3ba-74ca362d65a6", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Adjusted population size for better diversity\n        self.prob_crossover = 0.85  # Slightly reduced crossover probability\n        self.F = 0.9  # Increased differential weight for stronger mutation effect\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for broader exploration\n        self.cooling_rate = 0.85  # Faster cooling rate to focus search as it progresses\n        self.diversity_factor = 0.3  # Increased diversity factor for random walks\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.uniform(-1, 1, self.dim)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.2\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid combining Adaptive Differential Evolution with Simulated Annealing and Randomized Walks for increased exploration and convergence efficiency.", "configspace": "", "generation": 40, "fitness": 0.29490616729631836, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7596939709400964, 0.7099313710823774, 0.7054613344665047, 0.7319660134979102, 0.6892407829976483, 0.7110332105668238, 0.7245235394527265, 0.7555745665065215, 0.6990098797289571, 0.4770692996738305, 0.506615369592539, 0.4887414313065911, 0.5059357516696805, 0.5118729457274949, 0.49578281934774415, 0.5465996731121305, 0.5433642998581851, 0.5453921507821309, 0.11128844427668771, 0.12073618355218552, 0.21010541260907578, 0.13440358916019135, 0.1302335161031346, 0.12419082634414902, 0.11335726452548567, 0.11106185191756945, 0.21297783739235032, 0.12813441181563467, 0.11606376371895366, 0.10785625925813547, 0.12971024314571733, 0.09493017289525085, 0.0963385482521586, 0.11586317005962532, 0.14697448253109047, 0.11403182816936575, 0.9584273109769694, 0.9675244378319261, 0.970351791083135, 0.9694454537062107, 0.9774464920990982, 0.9857263586348256, 0.9695611858605334, 0.9662220680725363, 0.9636875598361249, 0.33839470606016353, 0.3613087912017995, 0.3157359614871269, 0.3787038207854285, 0.3768835776232632, 0.3248239916516036, 0.31867576536152764, 0.384414696854964, 0.35436893961866767, 0.5448177743303457, 0.5015044817210218, 0.4902341824363692, 0.5664661749340765, 0.5326655203251331, 0.5984627041117978, 0.5731155907491294, 0.4747690148322198, 0.6011649621366486, 0.24555647066885877, 0.28947404194495874, 0.22176339154116786, 0.2281686288490008, 0.19878625100192393, 0.24231357261558617, 0.2036837586927428, 0.18610987729321438, 0.27662400160805223, 0.2780510333327838, 0.3523355686933287, 0.04655833937165277, 0.24982558663836685, 0.19686897398199177, 0.21269201980117536, 0.24015522492020502, 0.21785293008869733, 0.2338681711807683, 0.1512973819357043, 0.09810731872742451, 0.174052518723954, 0.10041886956978652, 0.17826584032828108, 0.1311479645819862, 0.1744951770635227, 0.12560635393664088, 0.15449211805779361, 0.22689762427187443, 0.2326686728736298, 0.28513014131309833, 0.21644592328269485, 0.2311736030260333, 0.25794924515348117, 0.28782222403044455, 0.31702636244361704, 0.31845256321800275, 0.03858826584577579, 0.03649760729764728, 0.04660756106947761, 0.028743891234691343, 0.026017963014882795, 0.052429537866102494, 0.03082480584684233, 0.05560999566441538, 0.05348069578787529, 0.1535884568360234, 0.15301056341781716, 0.140055652531341, 0.17706687445945424, 0.184386998931507, 0.17162451811424706, 0.16529021889396933, 0.16629765706758803, 0.15262732039853366, 0.5204342729553859, 0.5475859396182108, 0.5529568072867328, 0.49568376972836137, 0.5259257944860224, 0.5403127799458513, 0.4923719089045544, 0.5202101493886134, 0.5237954677758454, 0.09674880811255204, 0.09589478310259458, 0.08045908030829996, 0.08576248524304642, 0.08330616149820524, 0.07965765468698482, 0.08297413119943886, 0.08921611006184993, 0.08772420037895645, 0.17049709056549145, 0.155943361342177, 0.14360233119917265, 0.17259727743426412, 0.1794184253020339, 0.14147699669664493, 0.14681102296449788, 0.16008349013776302, 0.14811619586787894, 0.28922499936822366, 0.27055166402610153, 0.2833394980794107, 0.27530431090379015, 0.289696618071704, 0.2971605524892369, 0.32898243604958355, 0.3347506174122691, 0.2864878267364488, 0.2261280612940496, 0.20727483385425927, 0.2007368313098683, 0.21496403457314028, 0.21385876620084632, 0.2061565067985116, 0.23301222512972786, 0.22173314544353662, 0.22419642581118526, 0.18979012561211583, 0.1971070156665895, 0.1644590636285942, 0.17640747133369694, 0.18416292702670511, 0.1882321661596409, 0.1876919720351209, 0.18904830895865632, 0.17454191951564246, 0.19225711408832435, 0.19774092088300554, 0.3216478868860728, 0.19515243575274266, 0.17737200777425366, 0.18513431240243505, 0.185166446856329, 0.19235265478930585, 0.1849919528724625, 0.6896876905512319, 0.5989257750159147, 0.18900522877920578, 0.1733949472228109, 0.17908603664440548, 0.5662428121869917, 0.6916794896763656, 0.15927789787093638, 0.1777423354940162, 0.6132070771395612, 0.6893846174589724, 0.20077869137090298, 0.6547893436262464, 0.19900639082444094, 0.1944176371420987, 0.20610510107659907, 0.20537631281248725, 0.20705371148232954, 0.1858896132395782, 0.18089599483737595, 0.18782257837073235, 0.18947491565294727, 0.18703729218489007, 0.18593838461581846, 0.17762512918829454, 0.18290652972348254, 0.17631115742378223, 0.0646847286091845, 0.07139468460685716, 0.07022272073165825, 0.07753298052648883, 0.07469914325728222, 0.0696889322927493, 0.0677255957695625, 0.06448951506164269, 0.07799273215196356]}, "mutation_prompt": null}
{"id": "833454ad-5118-4dcb-8c8b-449a5fbb2e6b", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "0e95d1f8-6d70-4081-928d-a1437e5bb14d", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "2b133806-cf8e-41b5-8d1e-bff8c83d7a63", "solution": "import numpy as np\n\nclass EnhancedHybridDEAPopulationAdapt:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Adjusted population size for exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.9  # Increased differential weight for better exploration\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for better exploration\n        self.cooling_rate = 0.95  # Adjusted cooling rate\n        self.diversity_factor = 0.25  # Increased diversity factor\n        self.adaptive_rate = 0.2  # Rate to adapt population size\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n            if self.current_evaluations < self.budget / 2:\n                self.population_size = int(self.population_size * (1 + self.adaptive_rate))\n                self.population_size = min(self.population_size, self.budget - self.current_evaluations)\n                new_population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n                population = np.vstack((population, new_population))\n                fitness = np.append(fitness, [func(ind) for ind in new_population])\n                self.current_evaluations += len(new_population)\n\n            self.temperature *= self.cooling_rate\n\n        return best_solution", "name": "EnhancedHybridDEAPopulationAdapt", "description": "A modified hybrid algorithm that combines Adaptive Differential Evolution with a Metropolis criterion and Adaptive Population for enhanced exploitation and exploration.", "configspace": "", "generation": 43, "fitness": 0.13104452214411025, "feedback": "The algorithm EnhancedHybridDEAPopulationAdapt got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.24762523558711869, 0.1883304946063037, 0.17819847506689024, 0.2152476834627517, 0.1956056198516477, 0.2439323790788187, 0.20103702360550113, 0.20318419807734867, 0.2250857782870136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04358302533691949, 0.04515026806112765, 0.0530719225238625, 0.047635893711989175, 0.06375809324159931, 0.05289880730820373, 0.04759385461261101, 0.061716076206206005, 0.06416522881030473, 0.03388734062253895, 0.041408948495485265, 0.04591374930785075, 0.03744534534653288, 0.0432686745955021, 0.028848519486769697, 0.03401773065869951, 0.034607282987936916, 0.0398844161568368, 0.836361225693413, 0.9383757661304954, 0.9491315359433311, 0.9490135883830917, 0.7520783847299229, 0.9807214198032153, 0.9031071349212633, 0.9673954908373495, 0.9223072695216502, 0.1056415632561104, 0.08554287806196281, 0.10520295253458367, 0.06283132131263247, 0.06528507045565912, 0.08977331018133028, 0.08655011392946821, 0.09091681862845657, 0.10054537099958083, 0.12009338119487689, 0.13193019282005103, 0.13042860874080597, 0.12513248709370872, 0.12376047008532332, 0.1296027835764364, 0.11871908263077968, 0.1454148140428102, 0.138937736031018, 0.00599349664577753, 0.017543757153415718, 0.0008031525628146019, 0.03925782379976994, 0.0527108089205689, 0.03081412187005028, 0.03766871674362138, 0.0187994838115475, 0.07957278672869528, 0.013757417038842479, 0.022449593824540037, 0.013398306597269927, 0.018762316219685493, 0.011128531280821363, 0.08181713878628327, 0.004962323882559905, 0.0014157169706778827, 0.021607278749590897, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037217848699677925, 0.06197939769109073, 0.05146150395707627, 0.060848748673853925, 0.04021225789033689, 0.0419905476586655, 0.07814835692258693, 0.03986764089715855, 0.12711817789574176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015044351710608916, 0.0024618992374438875, 0.0024659272074957217, 0.0028443084283044096, 0.004122270696281016, 0.0013395120743024957, 0.008489415815205903, 0.006653420460110415, 0.005097776266275278, 0.18838389146357104, 0.21368384474815438, 0.21421973063157018, 0.2270126388315601, 0.19424535368091422, 0.19158998755274503, 0.21549722839480312, 0.21106114858957303, 0.19463783221874098, 0.05516527473926358, 0.0705172786400532, 0.0524190183569071, 0.05324865904647291, 0.04884247563954047, 0.04712870756592469, 0.0573466493789867, 0.05389362181990587, 0.05425713861718018, 0.13325493183953552, 0.14354863067898382, 0.15286673267658368, 0.18215787762592506, 0.1300154773173282, 0.1338788051171519, 0.14745872824263784, 0.14680823141661148, 0.12291332328536742, 0.1632061672812164, 0.16817730732852454, 0.18330966219858558, 0.18934533432922152, 0.1619680793742011, 0.1910247015265505, 0.16770149219632713, 0.16419905394931333, 0.19613422723377982, 0.11702379020634579, 0.11158811127814117, 0.10986867871284811, 0.11605098784213519, 0.10491676470206535, 0.13112471140902704, 0.11073001312949293, 0.11140363828513689, 0.11062736935770534, 0.15554592130062606, 0.17417414245873075, 0.16374634117910758, 0.16232971501514726, 0.1657383682857082, 0.1671447761029573, 0.1879019229922394, 0.16571482848446262, 0.16544867024952947, 0.15077460907437767, 0.14244267496968155, 0.14075884849827358, 0.15463641502601821, 0.14813982323550645, 0.13541632959004835, 0.1473845366669233, 0.15024165274353496, 0.14758116903237428, 0.15370004390920677, 0.20554789732817003, 0.15107062742998645, 0.15604141176538144, 0.2757151417624043, 0.16457870896729032, 0.17487691911635117, 0.16421797412244687, 0.1411839299861425, 0.2164016438444969, 0.1637628952412058, 0.1538041606921835, 0.1504936653951956, 0.14805024366994857, 0.16643690642695197, 0.16228013107890726, 0.20152124143669403, 0.18515312651568672, 0.19012957600789837, 0.17524127992888794, 0.19155951367792867, 0.18240286777889614, 0.20714056109498258, 0.18078542124920516, 0.18513548518905165, 0.17764359558821508, 0.18965276300052425, 0.055452698730024674, 0.057767703151484606, 0.05440268804094228, 0.047053427926953884, 0.0477694070984056, 0.06303008613608163, 0.062201518453523064, 0.0483346913417001, 0.0510738062801549]}, "mutation_prompt": null}
{"id": "d92d89a5-5b64-4d76-9811-0f87df70c6e4", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "ea58d09e-646d-4125-9021-a38b60fa7d85", "solution": "import numpy as np\n\nclass ImprovedHybridDEAAE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Slightly increased population size for diversity\n        self.prob_crossover = 0.85  # Moderately high crossover probability for balance\n        self.F = 0.9  # Slightly increased differential weight for larger steps\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for broad acceptance range\n        self.cooling_rate = 0.95  # More gradual cooling to explore solutions longer\n        self.diversity_factor = 0.25  # Enhanced diversity factor for exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.rand(self.dim) - 0.5  # Random direction with zero mean\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "ImprovedHybridDEAAE", "description": "A hybrid optimization strategy combining Improved Differential Evolution with Adaptive Annealing and Enhanced Diversity Control for robust global search.", "configspace": "", "generation": 45, "fitness": 0.31747795353933234, "feedback": "The algorithm ImprovedHybridDEAAE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7340158431124213, 0.7447521060599573, 0.7336660163080775, 0.7335659695742003, 0.7576977188310939, 0.7714477653133875, 0.7644958252205074, 0.7427180092225161, 0.730664998750882, 0.5647144539089839, 0.5307460121328477, 0.5544808809374846, 0.5732853706540837, 0.5208610682747987, 0.5458463017656467, 0.5513286261704781, 0.5613165922085112, 0.5346749192628204, 0.1485154678361439, 0.2074178976823542, 0.17574934007052778, 0.14586149235186985, 0.1564104533839309, 0.18668535993178625, 0.27181368153818375, 0.1716503106185624, 0.14866674164269134, 0.13108044499479587, 0.1301668517933804, 0.11787870871163086, 0.114527636619835, 0.1159876964456189, 0.11374401886888341, 0.12484154677826742, 0.10789272354916835, 0.12535965098136637, 0.9790021663743478, 0.9689563133650559, 0.9644446086192275, 0.9778819698721223, 0.9651620031567892, 0.978047972902492, 0.9636106732266907, 0.9760061696842115, 0.9691038432533204, 0.378699227548724, 0.3957274445185808, 0.3591475850801735, 0.3756796194790595, 0.3525840780973879, 0.34599680632668006, 0.3994025219784181, 0.4416054388971996, 0.3738988100878955, 0.6042728656287981, 0.6227917917867438, 0.6297238062208241, 0.5626978974039788, 0.5826715949150255, 0.6670368859562308, 0.5367932807636384, 0.6463309366212024, 0.6422383468774533, 0.2514484432949181, 0.22421083242020912, 0.22874224548200017, 0.28875734034507194, 0.2762207725712542, 0.261752826513714, 0.2866204211658906, 0.2759022701211722, 0.29583684633244733, 0.2558106770903211, 0.2792984222279956, 0.22514083050623646, 0.3426125528952628, 0.24448982411572762, 0.27005964877899913, 0.23017865421258776, 0.2755784612505824, 0.26554626995665553, 0.1253309908412995, 0.13128492836185246, 0.16031300381667057, 0.14498725942898527, 0.1409873304912933, 0.17816522124295842, 0.1707358978926612, 0.22785549562005403, 0.154768144738322, 0.2612171683550295, 0.25253059043377246, 0.23559416075244421, 0.21168582017647153, 0.2682189250775894, 0.279053717614522, 0.2458549506623694, 0.312095316083311, 0.2987881527707892, 0.04809120391222954, 0.041723066847042856, 0.018083102640856885, 0.10290755570723831, 0.044896939696073446, 0.05281657072703916, 0.07325788290607849, 0.07511798805327163, 0.04243076494014475, 0.19054665065694854, 0.1903845468414952, 0.18462461086695225, 0.18106841907583315, 0.24059367664193, 0.20020202723952008, 0.18927112988042438, 0.17931530836374165, 0.1630101966065295, 0.5213507386662598, 0.5596338853268639, 0.52739946331596, 0.5458148512566738, 0.5384113174403169, 0.5277504947683562, 0.5265296486438773, 0.5719304513392778, 0.523955754126713, 0.10183793333761992, 0.10903167056548335, 0.11381082745625115, 0.09159845872495587, 0.08512123324807963, 0.10029168429981561, 0.08483834132863122, 0.08637048629094202, 0.1085508306081141, 0.16768648860205726, 0.2012601890741864, 0.22935149276176603, 0.28801159745613847, 0.17102585346454147, 0.20216342183039482, 0.20224873230138551, 0.160042713470824, 0.16744087980548739, 0.2864610301071885, 0.3118177922318486, 0.310902182484485, 0.29486341948161443, 0.3098809997969385, 0.2800819011739072, 0.30620621510989254, 0.3307572506595756, 0.3257012318038628, 0.20103988858977795, 0.21622668545627777, 0.22770434123792516, 0.21267986554508866, 0.20084631644186934, 0.2008899056873037, 0.23871415788950978, 0.23240006866665408, 0.2622836741459018, 0.19671516018639834, 0.1869550478016606, 0.17980363215182837, 0.19822376825324006, 0.19931679354387732, 0.20714927261439864, 0.18042317671026775, 0.19519386283102258, 0.1838827152489193, 0.29101326889525225, 0.1874904987136199, 0.1792262694253297, 0.17782112527776917, 0.186392101787751, 0.18455109863444585, 0.199192770512705, 0.18451698664400473, 0.18800118609702832, 0.6873707989796496, 0.6847523881427032, 0.20509852575482534, 0.7132910916992374, 0.7155898569996528, 0.7498350452540903, 0.6964865256650441, 0.19680709854716139, 0.16521155225881867, 0.5888548819140302, 0.5481363944455897, 0.20601106631349453, 0.1958566977343985, 0.1966789889567594, 0.19823421823315646, 0.2032813602317236, 0.2082632949649651, 0.4672095744812703, 0.176466485360803, 0.17401776624841747, 0.18137183652888367, 0.17926959946122512, 0.19918965589162074, 0.18914610721332337, 0.18867766331922053, 0.21893713208796994, 0.1980060780902112, 0.0714764194731149, 0.07595759559560067, 0.08031640910849969, 0.07967262887596716, 0.07017263542856511, 0.07590313790301983, 0.08174470470079509, 0.0668131982412713, 0.07228523364582529]}, "mutation_prompt": null}
{"id": "0f607200-006d-4794-aceb-75a2c839dccd", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "db772a22-b73d-4a2f-af5a-18f028aff16e", "solution": "import numpy as np\n\nclass EnhancedHybridDEASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Adjusted population size for diversity and balance\n        self.prob_crossover = 0.85  # Balanced crossover probability for better stability\n        self.F = 0.7  # Fine-tuned differential weight for effective mutation\n        self.current_evaluations = 0\n        self.initial_temperature = 2.0  # Higher initial temperature for hill climbing\n        self.cooling_rate = 0.85  # Adaptive cooling rate for controlled annealing\n        self.diversity_factor = 0.15  # Balanced diversity factor\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        temperature = self.initial_temperature\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                # Select three random individuals for mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                # Mutate with differential evolution strategy\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Introduce diversity via stochastic hill climbing\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * np.random.uniform(0.05, 0.15) * (self.upper_bound - self.lower_bound)\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate new solution\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n\n                # Metropolis criterion for acceptance\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (temperature + 1e-9))\n                temperature *= self.cooling_rate  # Adjust temperature using adaptive cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update the best solution found\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASA", "description": "An enhanced hybrid algorithm integrating Adaptive Differential Evolution with Stochastic Hill Climbing and Adaptive Cooling to improve solution diversity and convergence speed.", "configspace": "", "generation": 47, "fitness": 0.4255938941526177, "feedback": "The algorithm EnhancedHybridDEASA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8594321565750423, 0.8463947681994423, 0.8512454084742714, 0.8539143034218211, 0.8767107102788276, 0.8704687198791405, 0.8575420479033324, 0.8483503914102671, 0.8248980256854208, 0.7405027075930022, 0.701891517099424, 0.740521652465354, 0.7817286644114694, 0.7505314537451967, 0.74750491048107, 0.7489813142051476, 0.7463983477036038, 0.7482760311988932, 0.1648859189248456, 0.12080688258144878, 0.11848503419172973, 0.11997616782313891, 0.11875455573656213, 0.12055253286651824, 0.2315632396915145, 0.14129100211617462, 0.39103923324691336, 0.12414031507781842, 0.11189539479336597, 0.12420616216125968, 0.143068640982565, 0.11711024044664886, 0.16339034814323772, 0.12437261834633051, 0.1210956228026644, 0.1301451517234422, 0.9863997527639143, 0.9609775257089775, 0.9826015062918756, 0.94941506527659, 0.9562544513524387, 0.96626859395046, 0.9716537110229314, 0.9604265672552583, 0.9752911978941443, 0.6163762270709294, 0.6484638270158216, 0.6188853315280021, 0.5793163999282842, 0.6129811673180554, 0.6077538034986064, 0.6176899239014992, 0.5953233204226562, 0.5934486140518074, 0.7911674891701881, 0.7364799314009711, 0.8094588209959217, 0.788815993579693, 0.7982516706237375, 0.8366825511299527, 0.77672989572658, 0.8246778086406072, 0.787443859480796, 0.5000774087116071, 0.34906548345484856, 0.44800409710431444, 0.45438860611258103, 0.3643709787731968, 0.40518175195580197, 0.24471668315479544, 0.5278338314092286, 0.49574484147675313, 0.26563108162671567, 0.28254680576166324, 0.3096104291340166, 0.3952778244799937, 0.36775645015156133, 0.4193690444930629, 0.47284781099497497, 0.4102220854385624, 0.4809688874203416, 0.372204854035997, 0.417459605265434, 0.44303083611969785, 0.4600576978066502, 0.3715567653931322, 0.3912499464852336, 0.4507371962180816, 0.43306962785872205, 0.38104184617381043, 0.5113308479683305, 0.585255486944476, 0.548276051807032, 0.48316110771662857, 0.5317671574403507, 0.5054425104031135, 0.5786345019371495, 0.619983935378753, 0.580133359347392, 0.12477330007946508, 0.06276987989375371, 0.06322645719946884, 0.20414236208856018, 0.24181455229574766, 0.22413774061542824, 0.1491894625743968, 0.26310291151941023, 0.23956151870795994, 0.3311289596243713, 0.32568871594290705, 0.3256577547378696, 0.33357056771770544, 0.36850421452349924, 0.34439522292788016, 0.3384941812211175, 0.33433647349995244, 0.3478658581824773, 0.7237624966684271, 0.7557425350049773, 0.7398073869462116, 0.7295196745540579, 0.7424340819972812, 0.7239426794236548, 0.741808335348222, 0.7382620741132869, 0.7825770805629999, 0.11484523383772849, 0.0910462125150805, 0.13545362881415457, 0.09756535882176254, 0.10540204343419302, 0.09951534283636942, 0.11017718675122401, 0.0875617387106633, 0.10411871374788806, 0.21083606341044836, 0.19845076538802708, 0.2094943844919518, 0.22476225073364853, 0.21085038243633625, 0.18487991676584514, 0.21956647909009097, 0.17704173461343398, 0.19023731104988817, 0.39065011354082824, 0.4395294275927729, 0.4294877309972217, 0.48198886694401843, 0.4417276397826111, 0.44237652360004154, 0.45913235554104015, 0.5188200932135023, 0.5080900402455331, 0.36752490947127436, 0.3165597179052996, 0.34873340023479127, 0.3566779224897838, 0.2756068235827053, 0.34230587767932796, 0.37377966111112526, 0.3412373230955419, 0.28505266982637445, 0.18604714743002382, 0.2016413054123627, 0.1970902323745477, 0.22800519977546596, 0.1905435886941973, 0.18586451201928667, 0.19212299598531912, 0.2053653748488894, 0.18634335797713553, 0.22153138236241543, 0.20973353889904933, 0.19059746859087, 0.1897405543819346, 0.36023474471743777, 0.5222263756191132, 0.18173612029298514, 0.17949254273986281, 0.5683477073933629, 0.6591842285357955, 0.18125334566881124, 0.18776692381750437, 0.8352601330667991, 0.7131388677698227, 0.7486065814958995, 0.803945861609779, 0.18372457660946206, 0.18751152038250019, 0.7369169138834835, 0.7664218394261147, 0.804970181853083, 0.7581364513868757, 0.2015426687930616, 0.7494719045431789, 0.21162118516485007, 0.8163293608950577, 0.1269499050477485, 0.20112130458389665, 0.17414301976934587, 0.20859350116793163, 0.17595127880981998, 0.17345133174660332, 0.1784968236159209, 0.19266032194817495, 0.18242112362487517, 0.18302512891804934, 0.0776770856389003, 0.08311135198828834, 0.0722084639721432, 0.08439499134969441, 0.07575081358195945, 0.07812674466997027, 0.0734443110325006, 0.07512032210372255, 0.08854966136431741]}, "mutation_prompt": null}
{"id": "d9f4ccda-900d-41d0-b9ea-d0e073467d52", "solution": "import numpy as np\n\nclass SynergisticHybridDEASAV:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Modified population size for better diversity\n        self.prob_crossover = 0.85  # Adjusted crossover probability for balance\n        self.F = 0.9  # Modified differential weight for better mutation\n        self.current_evaluations = 0\n        self.initial_temperature = 2.0  # Higher initial temperature for broader search\n        self.cooling_rate = 0.95  # Enhanced cooling rate for simulated annealing\n        self.diversity_factor = 0.25  # Higher diversity factor to escape local optima\n        self.temperature = self.initial_temperature\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Multi-phase cooling strategy\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "SynergisticHybridDEASAV", "description": "A novel synergy of Adaptive Differential Evolution and Enhanced Simulated Annealing leveraging dynamic diversity and multi-phase cooling for enhanced exploration and convergence.", "configspace": "", "generation": 48, "fitness": 0.3259277502087446, "feedback": "The algorithm SynergisticHybridDEASAV got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7538272897603184, 0.7587158406568346, 0.7500261659518903, 0.7543887370277551, 0.767237302832656, 0.7513753774892338, 0.74850800668752, 0.7692162873835496, 0.7699276474914925, 0.5608980841884952, 0.6001819090268314, 0.6124938702211496, 0.5526300568065219, 0.5343267750398266, 0.6010154981053311, 0.6166020208089595, 0.5948265995749757, 0.6226477735732204, 0.17357640951469078, 0.14478395244422881, 0.14100733343229133, 0.2712697260319996, 0.1507131140330915, 0.14663655226786088, 0.25237846986240164, 0.17496416208703358, 0.2055718803016532, 0.11505877857957858, 0.11149071304318026, 0.10997758791086376, 0.12968367242314904, 0.12450904609916846, 0.15331106625696123, 0.13356309255545262, 0.14273308595966028, 0.11081344857956132, 0.9795438825006939, 0.9678465601386789, 0.9685791006592445, 0.9623630432527859, 0.9889585343873454, 0.9715741055020785, 0.982994389179079, 0.9813568574530226, 0.9395660435661212, 0.3895376946202428, 0.38393131005820524, 0.3695587369477593, 0.37116675850709424, 0.39772396899386664, 0.38764549686632277, 0.3932259480352662, 0.3689833399254694, 0.3785062008399728, 0.605613145282949, 0.6505255167979722, 0.5484787875117957, 0.6170734694339302, 0.6493972243650581, 0.5850015510319122, 0.6743460485608648, 0.6346570878553673, 0.5880567157755723, 0.22762275885538596, 0.28743646168197634, 0.29338791066624437, 0.2071333006759276, 0.26961990226658183, 0.23814689746261675, 0.2699707779778079, 0.2537616421873382, 0.30737907335269254, 0.2752774522996413, 0.24586240525158765, 0.12324921129462796, 0.25653674409276617, 0.2667550549721637, 0.2196024582758075, 0.2787576635732897, 0.32371946093267423, 0.31723591669688656, 0.11893227257602934, 0.18422357217482355, 0.15276797000814857, 0.18601935270939574, 0.18615931261397578, 0.12606116667923395, 0.19652705594060882, 0.1312131262627667, 0.12926259190301426, 0.2597146513730333, 0.2964453314741198, 0.28702358422378704, 0.32275070435998354, 0.2977186271823592, 0.35994958469838256, 0.3075588985177098, 0.3814949503095336, 0.2943923944814444, 0.04845672328694728, 0.05415410732947712, 0.07318931469016465, 0.050860958315645965, 0.06474321474434741, 0.11145546005118045, 0.07489653091616622, 0.04526488286793773, 0.07765593141209792, 0.1951982803794381, 0.17492252879860348, 0.21506151192615974, 0.17661300156361304, 0.2286849900582406, 0.17370299240495857, 0.1985667769271543, 0.1846968075503943, 0.1895257813946728, 0.52774688123095, 0.5275999305631685, 0.5406344281708747, 0.5582836133536215, 0.5583520803361363, 0.5687930381310684, 0.559018405059232, 0.5499953174347347, 0.5566765616370852, 0.08784809508855995, 0.08977139746052576, 0.10267638895733544, 0.08671435028216168, 0.09615620226013144, 0.10113456830361134, 0.09241010707624941, 0.09529497683415233, 0.08803838770885852, 0.24106787652686668, 0.2241879287432994, 0.19958209497564572, 0.17167177144197376, 0.16504822273720887, 0.17354733845470383, 0.2437654943726425, 0.16277786935149197, 0.18853924961443547, 0.3079227690519717, 0.3163998079045578, 0.3078630713823608, 0.3340479599139148, 0.2934660495490372, 0.28412605607624875, 0.3327314509656407, 0.3247825523188018, 0.28720609602406555, 0.21812069075863694, 0.23840997262895114, 0.21667705273861726, 0.23452982326530114, 0.2438788238699665, 0.20843624922561588, 0.23216701509731807, 0.2560213295555659, 0.20892693438089727, 0.18326503730795496, 0.17127776172570797, 0.204494675585555, 0.17279353222623173, 0.17946733131267523, 0.18328184005260006, 0.1950980234418893, 0.22147674459912536, 0.18132577985943166, 0.27339975666207816, 0.192360614129082, 0.18750609996957002, 0.19044715843679683, 0.2633818057632854, 0.28533531452740224, 0.19118316342547426, 0.41781359287169184, 0.1747950989120416, 0.6236438056404677, 0.7484497598648974, 0.6479793541669463, 0.18225404477578178, 0.18445184465426234, 0.18042106347189224, 0.18310405254019513, 0.18866682422809866, 0.7823474476276864, 0.6846329941359242, 0.6215001893244638, 0.5594898621805473, 0.6748160274479142, 0.5997348556621447, 0.5379257645668254, 0.20965394913570912, 0.20870610962940084, 0.1270800235910805, 0.18002081179827478, 0.1811827102900334, 0.17975344992370124, 0.18008355404958987, 0.18583772888584604, 0.19104703548487045, 0.1819810235253937, 0.18126126340432958, 0.20238554374820528, 0.07494429272763459, 0.0703561648058163, 0.07576189536667133, 0.0672173551717582, 0.07783667653610793, 0.0670468846959078, 0.07446477569135512, 0.07955418680707449, 0.068632221229602]}, "mutation_prompt": null}
{"id": "984dc1d1-5257-42ca-bfe9-9b6eb2b35c7e", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Increased population size for diversity\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.75  # Fine-tuned differential weight\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature\n        self.cooling_rate = 0.95  # Slower cooling for prolonged annealing\n        self.diversity_factor = 0.3  # Adjusted diversity factor for exploration\n        self.bias_factor = 0.2  # New bias factor for mutation\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    bias_direction = np.random.rand(self.dim) * self.bias_factor\n                    mutant = mutant + bias_direction * (best_solution - mutant)\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid strategy integrating Adaptive Differential Evolution with Dynamic Simulated Annealing and a novel Biased Mutation component for superior optimization performance.", "configspace": "", "generation": 49, "fitness": 0.41590703628366626, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8646263348140171, 0.8707035233405437, 0.8709011406589389, 0.8765140144957181, 0.8817830005429634, 0.8841303310069786, 0.8655123366608684, 0.881553997218862, 0.8788026330689342, 0.7729763142277897, 0.7782887274588832, 0.7689082415100001, 0.7668484669566152, 0.7729353192235033, 0.7942730977945185, 0.7866355000953114, 0.7759469265813913, 0.7755187635197371, 0.3662004183467198, 0.18907261930502695, 0.1516115808312889, 0.1136705588527186, 0.4109123513508601, 0.14325049172470372, 0.13991776945340773, 0.26364486681598265, 0.12155415287040339, 0.12094438849567524, 0.13777439792213442, 0.12373821380898498, 0.13109971949036203, 0.16416258893791114, 0.11885771160260228, 0.11364224829459457, 0.11580932587378834, 0.15028424330379164, 0.9823708451035175, 0.9613080106294528, 0.9596724306131758, 0.9820969170843242, 0.9663798282534886, 0.9627972130367273, 0.9422749063352006, 0.9500273410199543, 0.9622794411325851, 0.6536844778607683, 0.682546796040709, 0.6567619926978099, 0.6493172203037745, 0.6775984430089123, 0.7208168727436077, 0.6302550143883827, 0.6551072736854174, 0.6643315641964054, 0.8223101023531824, 0.8350015780228006, 0.8170706752454896, 0.7709858862614398, 0.8077379769010675, 0.7908781035159858, 0.8083584151107505, 0.7726259927238317, 0.8213344955145653, 0.4230151866891805, 0.5332036267060418, 0.5637407985123862, 0.49503248227410945, 0.4034189041611139, 0.42429561828182494, 0.49306345621711445, 0.5635742611357958, 0.5138152636505935, 0.4730898498324704, 0.426453448628057, 0.43584269121093344, 0.5578950310299127, 0.5337050799681868, 0.5427953707916089, 0.5152941019242142, 0.5139653726583144, 0.5326100674951384, 0.3373705715752714, 0.3405975846954472, 0.31745271448324297, 0.3419534742264063, 0.3311747759971707, 0.28222880270736195, 0.31866193603894744, 0.33445789013280935, 0.2915639117757176, 0.41853762228932345, 0.4447210822472092, 0.35277698397031754, 0.34975002876350814, 0.43496656057660665, 0.3398458065598525, 0.49413018255597996, 0.4531931907253184, 0.5094140511217868, 0.13667120827941748, 0.10396886889446544, 0.13278929811452544, 0.21371790200668594, 0.14801967284856055, 0.19873372633281772, 0.20751658690146235, 0.16431804539028416, 0.16234236245719547, 0.3307710444854197, 0.30501781638614356, 0.30143440687187184, 0.36701771154040486, 0.351084336435285, 0.34967669473207463, 0.31910701680664877, 0.29287768210206433, 0.30065516978318174, 0.7289864477246122, 0.7454812268226434, 0.758802244719089, 0.694912133968536, 0.7064622845150796, 0.7605382180687132, 0.7289653685383204, 0.7345161882865432, 0.7496378118498819, 0.1059329869273048, 0.09807397032515186, 0.1378467386299035, 0.09779281775157145, 0.10832186523792209, 0.096186999592911, 0.09211339166034826, 0.11075307753527852, 0.09842852893032172, 0.2678680015708004, 0.14019317247155938, 0.2037757561436382, 0.14482085253027743, 0.1828743356074256, 0.14040006032767383, 0.36240451937509455, 0.14154783647238023, 0.13932150303762447, 0.48056780385695197, 0.44716702768766814, 0.46772826006313184, 0.43162404219099504, 0.46511907472337244, 0.4845296759921388, 0.5035984787613084, 0.522016051852157, 0.5710125246433739, 0.381233477159008, 0.41348256265930217, 0.3394253144190451, 0.33398561091337986, 0.33644592933342843, 0.2835942418613123, 0.35819007615917786, 0.395026664876027, 0.3898376238505602, 0.18327052103597585, 0.19934163635232582, 0.19394760044698411, 0.18287891592012506, 0.16969753182158254, 0.1775954373328923, 0.19045417213702376, 0.18977763054233843, 0.20400155257162855, 0.1978291475186893, 0.4935771762983273, 0.23895647788275942, 0.20855868315312598, 0.5235476643145451, 0.22846766228751292, 0.21769102532915385, 0.5826836129884165, 0.5238787782482703, 0.20513809663116067, 0.16739716758092105, 0.8341588761461943, 0.18427498395903308, 0.18443685716685843, 0.1782723817994022, 0.18542312434898067, 0.19159218929478272, 0.19013477726209904, 0.8206663799395308, 0.7283627805321595, 0.16666454244531237, 0.2049524964519982, 0.2040232130481442, 0.7790443512488137, 0.1555271705282697, 0.21041515271632494, 0.20703027923069006, 0.19318245165005632, 0.18129050880520503, 0.19979490721140203, 0.1907316659312781, 0.18654210803117777, 0.18005438444487032, 0.20229121935628458, 0.16441013271861138, 0.18327085737519033, 0.07314628033510939, 0.07752912659225475, 0.07790804914629568, 0.0776725785604131, 0.07714080493223574, 0.07680204570061011, 0.07407082387616448, 0.07696057357913555, 0.08564503067268925]}, "mutation_prompt": null}
{"id": "00deb424-11da-4d5e-9ec4-c0fd16cea53b", "solution": "import numpy as np\n\nclass BalancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.3 * dim)  # Adjusted for larger initial exploration\n        self.prob_crossover = 0.85  # Balanced crossover probability\n        self.F = 0.9  # Enhanced differential weight for stronger perturbations\n        self.current_evaluations = 0\n        self.temperature = 1.0  # Adjusted initial temperature for gradual cooling\n        self.cooling_rate = 0.95  # Slower cooling for more thorough convergence\n        self.diversity_factor = 0.25  # Increased diversity for better exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.05\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Adjusted for dynamic adaptability\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "BalancedHybridDEASAV5", "description": "A balanced hybrid approach combining Differential Evolution with Adaptive Simulated Annealing and Enhanced Diversity for optimal convergence and adaptability.", "configspace": "", "generation": 50, "fitness": 0.33070663293539754, "feedback": "The algorithm BalancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7839412378544203, 0.7422100960223397, 0.7915748473324958, 0.7666605005267773, 0.7582519330451556, 0.7779200216585012, 0.7728771170721637, 0.7771695688180227, 0.7675261605570127, 0.5592019372968398, 0.6152448842043678, 0.5814174709084843, 0.5764610469363998, 0.6104722473132913, 0.581009592973059, 0.589767619025567, 0.608574304566516, 0.6278646610118954, 0.20993747699482912, 0.19323384146408462, 0.21795478637335586, 0.18364955112127668, 0.12586714056797776, 0.2593239963235616, 0.19412403621800944, 0.3665356409213095, 0.17989447390372715, 0.13767722510548175, 0.12148219837440866, 0.17246027691999466, 0.142102264001724, 0.15662407447808713, 0.12443099379194555, 0.12221408308574899, 0.13121890171930262, 0.1681331878559459, 0.9600163089203148, 0.9582931518849553, 0.9734940880218391, 0.9775547072530275, 0.9582549147652819, 0.9569067875732199, 0.9516623185221205, 0.9730145946749289, 0.9564795850357213, 0.42973732495200156, 0.41342726696371623, 0.42887212787967977, 0.4449203958105249, 0.37434936892850323, 0.37990762051592697, 0.426407507498902, 0.42787056635260945, 0.42692255099546905, 0.6428989421599742, 0.6563099491492996, 0.5747384466528361, 0.7254496988168891, 0.630103755903521, 0.6288393140696549, 0.6710742823554764, 0.7355791754131613, 0.6131640481014595, 0.31332591018820954, 0.30325122965024753, 0.2785539085097989, 0.3921925706107743, 0.3188854445577838, 0.2791469697194595, 0.28755586094345176, 0.31006339506036673, 0.3169269586477774, 0.33612665300881395, 0.12024143947324595, 0.11889516358244057, 0.3157444506576409, 0.33472869259044125, 0.30238572056921187, 0.3146040877796823, 0.2548784018161905, 0.29092416953933276, 0.17505876880403115, 0.16779914880274538, 0.2248777113092032, 0.22391564299440592, 0.1548832118355522, 0.1224330587791872, 0.1971210113198344, 0.2197557017822126, 0.1525993660496131, 0.28864150712406034, 0.3193887408746172, 0.2990823821709442, 0.3333793270344858, 0.28621484126593144, 0.2948955611324263, 0.2823691307981625, 0.3299656026122798, 0.38113410064812403, 0.040765265174881105, 0.03057780822413292, 0.045534872813495664, 0.1059804132772364, 0.13110661173480442, 0.0522207552911057, 0.06302680750388134, 0.0876041670601384, 0.07337508253319847, 0.18036542316382642, 0.19884323920511882, 0.2129836740051556, 0.23254644260454893, 0.22095501839476384, 0.22132657005521505, 0.19932245640919188, 0.19886469468456391, 0.19277563432130962, 0.5961096336925216, 0.5828522844820984, 0.5983511102349677, 0.60980729796392, 0.5387289781951431, 0.5631974200177816, 0.5860200929890025, 0.5894204518394033, 0.59476449108876, 0.09217697140141501, 0.09526293832468657, 0.11847916319951568, 0.09346161679371712, 0.10325706918284339, 0.12514031327878894, 0.10032454661801771, 0.08079712712050002, 0.1053156877731446, 0.16898377115949426, 0.3223981683398569, 0.20120467195241276, 0.18264251027697542, 0.21164720325492103, 0.17446392051139759, 0.20918431147828032, 0.2766311122346088, 0.17399490859150735, 0.30597106935516427, 0.33571854700987414, 0.30933476019663764, 0.3258843925683472, 0.2968466421696926, 0.3246805921470627, 0.32980651608400346, 0.35977303740653, 0.30670547128509684, 0.23630433578886223, 0.209457445508489, 0.22112221530507625, 0.23390437388943208, 0.20728260784057506, 0.24069612788367822, 0.24384570673084704, 0.2678500049015088, 0.2566626746348305, 0.17602293469595154, 0.18656797750017018, 0.1725286102283028, 0.173448050103732, 0.1789426659192772, 0.17681699558806485, 0.1894304830349799, 0.1805852378495818, 0.19139620596537954, 0.2941821504760934, 0.1897735923310947, 0.27370962619474326, 0.2161404001912398, 0.19102777558795903, 0.18236742280478369, 0.1996117500722807, 0.1910582502336503, 0.22899002940475355, 0.7246881942552768, 0.1716056984774379, 0.1534356536794932, 0.6092342545041676, 0.19710858375143392, 0.19243488776913542, 0.1825267521703543, 0.18336476873197893, 0.1748598196850335, 0.6735248897794528, 0.6633072752708471, 0.6093434077082609, 0.12446743358145873, 0.6522949336750463, 0.5305657075593662, 0.20596380270754644, 0.20230719660819307, 0.21092574400324082, 0.17363822257682227, 0.1784549618579585, 0.18073863357263598, 0.17544030169600755, 0.1848551522854952, 0.1788085840599941, 0.1870051157448852, 0.1953455013715485, 0.17923885168438514, 0.08065833191134697, 0.08607257501370291, 0.07998215194142355, 0.07264828535775214, 0.07953469539194225, 0.09606469771316573, 0.0722450865472769, 0.07536423918154544, 0.07413489712247223]}, "mutation_prompt": null}
{"id": "36a5c814-5e2a-4b9f-bff8-3869b00cc088", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Increased population size for better exploration\n        self.prob_crossover = 0.85  # Slightly decreased crossover probability to enhance exploitation\n        self.F = 0.9  # Increased differential weight for more aggressive search\n        self.current_evaluations = 0\n        self.initial_temperature = 2.0  # Higher initial temperature for better exploration\n        self.temperature = self.initial_temperature\n        self.cooling_rate = 0.85  # Adjusted cooling rate for more gradual annealing\n        self.diversity_factor = 0.3  # Enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Gradual cooling with periodic reset to initial temperature\n                self.temperature *= self.cooling_rate\n                if self.current_evaluations % (self.budget // 3) == 0:\n                    self.temperature = self.initial_temperature\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm integrating adaptive differential evolution, adaptive cooling simulated annealing, and dynamic diversity adjustment for optimal convergence.", "configspace": "", "generation": 51, "fitness": 0.30397246792910343, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.6993858502237389, 0.6902634529019647, 0.7330398662270449, 0.7312357492454609, 0.723339424839478, 0.6993725340689413, 0.6769789940580813, 0.7383436342050578, 0.7083359869618012, 0.4947734231002512, 0.5032411572057757, 0.5251434081974683, 0.4603872845960988, 0.4945391079237804, 0.5130566059889918, 0.5097171210921558, 0.5003009434360957, 0.47870859970398494, 0.12591432735620744, 0.1444858766263496, 0.1797690129921915, 0.13447097633471095, 0.12385326034372923, 0.1848833906884585, 0.1354709741355007, 0.14579054812896775, 0.16009244498048214, 0.11842167816536497, 0.1245525106643256, 0.12998053541661103, 0.1328896067001487, 0.11037225362073588, 0.11948021864757996, 0.11108044442098886, 0.11042399710515949, 0.12370413205411879, 0.9652754189860286, 0.9580116682323649, 0.9661753623459519, 0.9584474127957171, 0.9673444089739879, 0.9875344322015636, 0.9898251902254442, 0.9780380083748811, 0.9830786294601025, 0.3523533369353038, 0.3536403037719007, 0.3628752113090371, 0.320273231501519, 0.31792410517466196, 0.3780783020778469, 0.3794418155320094, 0.3867110403694236, 0.31625025387552397, 0.4135557375459743, 0.4745814961224101, 0.6559321515461409, 0.5791549534968896, 0.5727528846055499, 0.5753245867361048, 0.5682403501486828, 0.6419655221921665, 0.6020991833958409, 0.23863305051110462, 0.22909103795234542, 0.2280524047653616, 0.2764855156980567, 0.2541521595639702, 0.24315431167848456, 0.22610460448593717, 0.2688059665633121, 0.22549903139434513, 0.23019749149003577, 0.27060878672660726, 0.20766126396061868, 0.2659177248188015, 0.24662500311371982, 0.2506371265458429, 0.23078654397542364, 0.21354740400879635, 0.3023990007187898, 0.1405893303193796, 0.13376003398535707, 0.13745171676996326, 0.10430155452437884, 0.11468619464533181, 0.12628002070806965, 0.12781729099286965, 0.13357285137472386, 0.10370266695768693, 0.20795044142040964, 0.2613570454438039, 0.2690846557508684, 0.2598830441342833, 0.22638654053801766, 0.19340366883673799, 0.30163096883192697, 0.3234412722160819, 0.27741392933461084, 0.027681861239939654, 0.04562436478301135, 0.03739930867141705, 0.09455897885110731, 0.03407708185397129, 0.07204670327418661, 0.0801006174435519, 0.03152424598391734, 0.04989573090427912, 0.14899038716253366, 0.15973679485637116, 0.15997039874543484, 0.18553583018592246, 0.17657492460104185, 0.19591238008895595, 0.17884866094096874, 0.16146592540342586, 0.15551571484819215, 0.5085301124275567, 0.4912539747608793, 0.5003812337502642, 0.4945080997920206, 0.47824141753086946, 0.5186220187009782, 0.5199617864368159, 0.5208743654624088, 0.48318581809660777, 0.0974505507260276, 0.08964940236229613, 0.08726882266392333, 0.098448879854097, 0.08571649850483354, 0.09847579307890264, 0.08229497828102417, 0.09156096908039657, 0.09844607082628609, 0.1708568807148153, 0.18670550233433747, 0.25921785127167773, 0.16064342904559403, 0.1710562952543696, 0.28114795199375275, 0.1923855584647538, 0.20092968200865557, 0.1846382434381144, 0.27667151462885275, 0.2935472297715309, 0.26411596662546744, 0.2819581183907506, 0.2917721964557207, 0.2900377100131356, 0.3076341175399273, 0.30181513945153005, 0.3367605156113628, 0.21970360046173587, 0.22419472339825997, 0.21303902116555407, 0.22053714743008546, 0.2168067713261047, 0.20457208756386613, 0.2363137794071698, 0.2392713330213857, 0.23089018272613648, 0.17402581790667504, 0.18073766255653756, 0.19146564504244712, 0.17953378394610064, 0.1748037484493663, 0.18704023915326384, 0.17701383543496263, 0.18931945449890775, 0.18685537257244056, 0.1849933885624172, 0.18331235041196314, 0.2066481271390349, 0.18242850239107, 0.26410193023234774, 0.20149933515723928, 0.1849693414464838, 0.19048573659013823, 0.1869962244836092, 0.16773981139940675, 0.7368089794754902, 0.5889570156478016, 0.7212530827591548, 0.7167923231809061, 0.17451416502402461, 0.17043246903188025, 0.18493392184145196, 0.17198073765110855, 0.2043331673816836, 0.6337677247622873, 0.19861629199717723, 0.4046663268788364, 0.4298209994827048, 0.47786098578919023, 0.6620331035637376, 0.6730780504182303, 0.605356679790227, 0.21598653927728828, 0.21313599691703222, 0.18444067692944754, 0.18451748960153747, 0.17927996509467614, 0.19391186190684762, 0.19503295686527422, 0.17673759292424074, 0.1846941437979569, 0.07525420889082257, 0.06215740680347226, 0.06812726129461111, 0.07540415828836888, 0.06309256212888392, 0.08025921851565221, 0.07058397951696549, 0.07419172633594351, 0.0627597588110741]}, "mutation_prompt": null}
{"id": "4ceb3d80-3a57-45d7-9d34-990989a00b8c", "solution": "import numpy as np\n\nclass EnhancedHybridDEASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Increased population for diversity\n        self.prob_crossover = 0.85  # Slightly reduced crossover probability for stability\n        self.F = 0.9  # Increased differential weight to enhance mutation strength\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for broader exploration\n        self.cooling_rate = 0.85  # Slightly more aggressive cooling for faster convergence\n        self.diversity_factor = 0.25  # Enhanced diversity factor for exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASA", "description": "A novel variant of Differential Evolution combined with Temperature-Controlled Simulated Annealing and Randomized Diversity Injection to enhance global search capability and balance exploration-exploitation.", "configspace": "", "generation": 52, "fitness": 0.3177484260907252, "feedback": "The algorithm EnhancedHybridDEASA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7139986168543769, 0.7208076729126018, 0.7270079492337931, 0.7613451657462019, 0.7711976740774149, 0.762579596841074, 0.7839409503200653, 0.7689355174656544, 0.7415270696174815, 0.5748239894682249, 0.5588005995314173, 0.5638347765113614, 0.5026207366267186, 0.5637934035128607, 0.5550194163885156, 0.54721579660308, 0.5490058649624269, 0.5803245057591209, 0.1537921497961353, 0.13841801673351695, 0.11985689783625986, 0.17353259875866156, 0.11234162543922066, 0.17709775612235246, 0.21223315385706143, 0.1653036979204806, 0.1290786219149198, 0.1197592486856256, 0.13907534477789507, 0.12470998459658855, 0.12801368591945406, 0.16504947874258669, 0.11108184736090931, 0.10099421975144873, 0.12848990262318638, 0.13482091208875058, 0.9691935829014177, 0.96444408030987, 0.9716308147293847, 0.9635793750316238, 0.9632471924574544, 0.9656929519913019, 0.9574618888853061, 0.9689325646902958, 0.9699671628593411, 0.3800040603788257, 0.3596561579116102, 0.3595949234415624, 0.3705249839786193, 0.35540840354932723, 0.3561527863988986, 0.35179329493168143, 0.42376819381990805, 0.38300562303144225, 0.6239760459583525, 0.5199061325438938, 0.5728005295261345, 0.6168518698465484, 0.5479478571518257, 0.6247562244188543, 0.6107877824380816, 0.5638100402246548, 0.6528789370047825, 0.287021444609578, 0.23820475602229485, 0.25554232168361646, 0.300227394404888, 0.1879304060272159, 0.22757310447621548, 0.1999788627518978, 0.28219936481342556, 0.24028043037390245, 0.227502395515513, 0.1152353426959215, 0.039242780762877905, 0.2129917202194963, 0.1944989150222819, 0.2952339850742468, 0.2423856170280907, 0.20857528883262388, 0.2210536340424616, 0.16268960454482928, 0.20272556430569744, 0.15982268586979376, 0.10444108048692491, 0.13734998738280335, 0.1356318979525868, 0.13369110649489324, 0.11635433856728084, 0.15045079644035741, 0.291711736093916, 0.26388919521609744, 0.28422851322995324, 0.2886274412056019, 0.25638227101636835, 0.25744395244949236, 0.2894143476985721, 0.27059720737108817, 0.301976280951769, 0.023498819434837448, 0.04294919059426394, 0.08774776096617531, 0.05247277993332866, 0.010301354383450922, 0.10060407458872833, 0.10095781960518702, 0.09057956360478714, 0.04530754504718715, 0.1588125542932517, 0.18871881416215375, 0.1846140033466558, 0.19402009865820347, 0.19903461910320497, 0.18238610326666582, 0.20262138442116673, 0.18240475844957538, 0.19107882233672058, 0.5628574042319496, 0.5377255843843141, 0.5289106639415015, 0.5631166781418524, 0.5240597642461656, 0.5403910834707863, 0.5652692959968046, 0.5179135231598315, 0.5282369881824305, 0.09911684841529345, 0.09176716103414151, 0.08715377722648776, 0.09791966854198819, 0.10175900083622547, 0.10039575811248869, 0.09117089060204708, 0.08757843112067454, 0.08865909162835128, 0.2464062864913762, 0.13333489248814934, 0.1728387562214413, 0.24782195756999836, 0.1464099158061386, 0.21134046150573704, 0.18753537431116196, 0.1524574740945318, 0.13759806235620176, 0.30202941553789275, 0.3435927798117274, 0.2572527353147338, 0.3330214698991213, 0.3008109188188244, 0.32001160074439294, 0.3188459625245027, 0.29634030885477547, 0.3212738494534758, 0.2211756960090413, 0.20212409623937144, 0.2185993976490379, 0.21313019608888317, 0.24162322235056088, 0.21756608254657273, 0.23337297285290803, 0.2222635378399287, 0.2229028591428538, 0.1939770675798419, 0.17609104717602442, 0.1912105758057031, 0.17864801237427896, 0.18829298093870062, 0.19839854355933073, 0.18040607020352395, 0.19167157563623416, 0.1734132932718585, 0.18687924717767168, 0.1810578141360335, 0.233785985438009, 0.2175616156740623, 0.18138946330410022, 0.18973182193536553, 0.2109944239022603, 0.19793364484885678, 0.18061866777534197, 0.16885280584996532, 0.7439572824047694, 0.6174185794871083, 0.675703494728817, 0.7127362946905271, 0.693537816594381, 0.6669979086858667, 0.5519648393158703, 0.7052108302969486, 0.673082859064172, 0.6381941270776011, 0.2014510033883119, 0.596849567121409, 0.19835954063141625, 0.5815337544078448, 0.20864160943516874, 0.2074088932854593, 0.20816709462147864, 0.18322334590414002, 0.17787877400710617, 0.1769431072783476, 0.18191864091938492, 0.18850202056951526, 0.17237433571026972, 0.18780339251389955, 0.1857197170627528, 0.19106866481466722, 0.07322783669341648, 0.07503671217700336, 0.07276617881679814, 0.08489856877640867, 0.08047112743774465, 0.07950555848838048, 0.06777059538660957, 0.07139643143528684, 0.07592523638535564]}, "mutation_prompt": null}
{"id": "f69a7d35-6b9b-476a-8392-274a7bbfcbc2", "solution": "import numpy as np\n\nclass EnhancedDEASAEV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Increased population size for diversity\n        self.prob_crossover = 0.85  # High crossover probability for exploration\n        self.F = 0.7  # Reduced differential weight for stability\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for broader exploration\n        self.cooling_rate = 0.95  # Adaptive cooling rate for gradual annealing\n        self.diversity_factor = 0.25  # Increased diversity factor for exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                self.temperature *= self.cooling_rate  # Adjust cooling rate dynamically\n\n        return best_solution", "name": "EnhancedDEASAEV5", "description": "An enhanced algorithm integrating Stochastic Adaptive Differential Evolution and Dynamic Simulated Annealing with Adaptive Cooling and Exploration for efficient global optimization.", "configspace": "", "generation": 53, "fitness": 0.4027049309278619, "feedback": "The algorithm EnhancedDEASAEV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.26.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8362455587062461, 0.8250940099615515, 0.8353242370583706, 0.8406718390895983, 0.8401577319328191, 0.8327541046911481, 0.8307513240417764, 0.8349906639932512, 0.8295009490696079, 0.7091166767413846, 0.6980854744375847, 0.6940146935340141, 0.7062665906170189, 0.672414575528566, 0.6931296012728367, 0.7120505277144502, 0.7357530988054378, 0.6836548754349887, 0.14104880540481557, 0.1329969093263218, 0.11772757575748438, 0.22761622602744813, 0.1284917014916488, 0.12443225355510734, 0.25394011462398636, 0.31334939556888886, 0.11997113905079781, 0.10747482617013104, 0.13126473502164937, 0.11624790766659587, 0.0975989019275112, 0.12843047758320647, 0.12318841988143925, 0.1504442022232817, 0.09303669201913856, 0.1081474019853147, 0.9500599221097673, 0.9468113483335774, 0.9598817743586776, 0.9676011723521825, 0.962676780083335, 0.9548981242071161, 0.9777345174578812, 0.9330382637557033, 0.9497052927440891, 0.5338463221608214, 0.5316254316000628, 0.5644119978723295, 0.5269588870895716, 0.5323322313688574, 0.5851256656274957, 0.48360634616822895, 0.5447830156445829, 0.5314677923305965, 0.7880260721393777, 0.7458788568659769, 0.7148014791813032, 0.8059092224058388, 0.7134991351661437, 0.7966107053708611, 0.7466210552727687, 0.8180652053236953, 0.7594515625375837, 0.384498189138579, 0.38148106509195645, 0.27052071707984404, 0.35972857615235476, 0.47684422358694534, 0.29889683915120946, 0.41712346968559155, 0.33463907160799555, 0.45577090701789114, 0.38560066275158245, 0.2512370536570848, 0.4069316697394153, 0.36418861321673135, 0.49048046934166667, 0.45513957634298663, 0.3534593588670618, 0.3652264197613113, 0.45617564090961127, 0.33130304390889964, 0.29753079012637873, 0.40776701231226664, 0.3028112266309958, 0.32315932802557157, 0.3429128472898706, 0.3020417862527345, 0.4057681912109373, 0.3200225549356709, 0.4573443824360871, 0.453478546740688, 0.5224468381222276, 0.47850416021155096, 0.3680248269464955, 0.4701193411622008, 0.49217917559054813, 0.45928930012864144, 0.5895283705699943, 0.14622757142959586, 0.1226659818420962, 0.13328915790956997, 0.2488467007936198, 0.24109656120438072, 0.09158295932487359, 0.18318645188412297, 0.17176944452739384, 0.1927106015458665, 0.3118942672519709, 0.3067087504932776, 0.28885988444417143, 0.3081323111221065, 0.32601572613631924, 0.3380190978199539, 0.299259004696, 0.2916206016773606, 0.28578089278139407, 0.7195169196531017, 0.6834274806807357, 0.682402351778508, 0.6890216928584403, 0.7190693882477115, 0.6769114438607351, 0.6971065651202077, 0.7208112355091402, 0.7140607101885592, 0.10175073043447191, 0.10997505241528249, 0.10992201523770095, 0.09789091140668349, 0.10137207803247361, 0.09497476808476657, 0.10065388712549794, 0.08916592045006733, 0.09089357518891994, 0.23615542397984957, 0.15632569797461437, 0.17978240940274137, 0.1906123308703962, 0.1716185912259265, 0.14340016679408274, 0.23468969297507325, 0.13727081422699028, 0.1567885777297221, 0.41100306669888054, 0.41349677152935227, 0.3398521444093029, 0.43337542006864993, 0.3834186708415861, 0.39090989658386455, 0.47264326221222275, 0.4285692530209302, 0.41541558715010807, 0.31479541455545923, 0.29261091710188003, 0.30177753520017414, 0.2776643717500962, 0.2991929934851426, 0.31580938371459466, 0.3606420364447215, 0.31538589774496895, 0.315874817258452, 0.1882563419052925, 0.18681808045741577, 0.203521526773352, 0.19814234412713494, 0.1835724935312627, 0.2010063414920491, 0.18383568783291426, 0.20454659202678116, 0.20855870374775365, 0.21822726257845626, 0.45963504818702117, 0.18706790451979638, 0.5166297532958118, 0.374533375691005, 0.2152416976326812, 0.4247680404146379, 0.33021565096180183, 0.21726770068593904, 0.1799094463751102, 0.1801933199500787, 0.18502974034757458, 0.1944452471493503, 0.8137244055765953, 0.8005200248558053, 0.753296743959648, 0.7218195202658593, 0.7422371205085154, 0.16677390836092365, 0.7137563951780675, 0.6148114837755049, 0.20097558045786534, 0.7133336798319574, 0.6046239176062332, 0.21117010290260707, 0.7700809517784041, 0.7695009564070481, 0.18114229977003626, 0.1874139819186985, 0.1783094651121575, 0.19222216203470965, 0.18854489405667052, 0.18304219334708138, 0.2008972956086228, 0.18610993451447777, 0.18357357187911127, 0.07302615532894885, 0.06571415062253816, 0.08239902336880367, 0.08158273746277922, 0.07476753678842418, 0.0859746471853261, 0.07728248783754099, 0.07817630980228518, 0.08737866137943096]}, "mutation_prompt": null}
{"id": "bb4a599a-d32e-47e7-a3fd-d9ff23bb3091", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "3595f97d-03e0-4bdc-88fc-0199d284d050", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "78dd4f34-75d2-4987-8c07-0fd1d296d255", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.3 * dim)  # Adjust population size for diversity\n        self.prob_crossover = 0.85  # Adjust crossover probability for balance\n        self.F = 0.7  # Adjust differential weight\n        self.current_evaluations = 0\n        self.temperature = 2.0  # New initial temperature setting\n        self.cooling_rate = 0.95  # Adjust cooling rate for stability\n        self.diversity_factor = 0.25  # Increase diversity factor for exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-8))\n\n                self.temperature *= self.cooling_rate  # Adjust cooling rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "A novel algorithm that refines hybrid differential evolution with adaptive simulated annealing and diversity control to enhance convergence and exploration balance.", "configspace": "", "generation": 56, "fitness": 0.409716357991626, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8588488406729292, 0.8474622645279692, 0.8401830379834775, 0.8668941137572038, 0.8508521741037188, 0.8487022059547482, 0.8523998336637315, 0.852607130672457, 0.8420029314625094, 0.7344666657810658, 0.7407424218587618, 0.7468232265101566, 0.7149505798343119, 0.7386855079741972, 0.7552664158574093, 0.7298518625349222, 0.7469726766517542, 0.7083955511103467, 0.10503095705454979, 0.23647699495833452, 0.12860471022020226, 0.11513802324520817, 0.1781259261669087, 0.13729212089559262, 0.3139600986300165, 0.11712443246484638, 0.1039749716592534, 0.10251243694609236, 0.12981184942206203, 0.13816996703435813, 0.13475453888521938, 0.11330623137695606, 0.1299690430230328, 0.10937334615523053, 0.10310077373041748, 0.12240449304668799, 0.9607150110264941, 0.9515326983359237, 0.9833300956623955, 0.9785676270787275, 0.9739750923383633, 0.9723472534981997, 0.9558605817690858, 0.9674450222368249, 0.9733732657001497, 0.6231243279189211, 0.6394233517463397, 0.5717829458502499, 0.5557344029370855, 0.5269639687439163, 0.5758738801209501, 0.6110401146171195, 0.6323776383429501, 0.5968308855543774, 0.7916640562184238, 0.8319433455920927, 0.7309720894723007, 0.8135082376423911, 0.8015516320788327, 0.7652412221248149, 0.7945882433900945, 0.7888148533010966, 0.7713444756497528, 0.2383150017643273, 0.27237777276721165, 0.2616180286865759, 0.3134657903014533, 0.35587556564110046, 0.3107308472094683, 0.29577168015577826, 0.34922739857449425, 0.4536817773912162, 0.2935604583071546, 0.3026414660489558, 0.21839104494271078, 0.39315386352031934, 0.5109458814638903, 0.43895068906680945, 0.3227526531502214, 0.4228165941420944, 0.4647228073050992, 0.23311030947415834, 0.41473246365738015, 0.37062998892539456, 0.3449277486646414, 0.3868000267102347, 0.3397478459524177, 0.329924900117086, 0.40631083963876646, 0.46447644113525244, 0.5706717081771621, 0.5258231816463576, 0.4856159271992865, 0.5730161755174146, 0.44838153655649204, 0.3757440810155849, 0.5694649164620826, 0.5649393236335236, 0.6007696917146763, 0.19246913038966063, 0.09538346583361468, 0.19028444143044476, 0.14941457213809595, 0.21055761067855505, 0.23702963553553524, 0.1473744373995074, 0.17747050112742802, 0.13464414741173714, 0.30307694249466754, 0.34726240925058505, 0.29568620314854455, 0.34056038917815545, 0.3425966172998961, 0.35397481984188073, 0.3338621491783409, 0.32162858234438585, 0.28208476492296364, 0.727437539044669, 0.7416974041855344, 0.7194260986434879, 0.6962097790121976, 0.7116703935391917, 0.7019925820267173, 0.7313306255958557, 0.689064483937315, 0.7233330924644001, 0.09611855893284915, 0.11315818928533572, 0.10570184339628252, 0.10155158515973994, 0.12395077552506595, 0.09438445814676344, 0.09284533059782463, 0.10033037382251464, 0.085505967378393, 0.14654579389600253, 0.15952043393898108, 0.1409330037144053, 0.28755925814732863, 0.16264034604560906, 0.14478876815188158, 0.1431362236590148, 0.2000666800686004, 0.20355485573964227, 0.4614706301204978, 0.4401907624386229, 0.3815404488637276, 0.39569078738764096, 0.39463255860205826, 0.4128107905326993, 0.4482212292389134, 0.45512354376438857, 0.479633219052756, 0.2605181886568819, 0.29565624979851246, 0.30222406246988576, 0.27056882685625505, 0.3081462116343342, 0.30694854685701956, 0.337209507151947, 0.3401716967348185, 0.3011216642946607, 0.22318765696693255, 0.18425573564837228, 0.20380183089715787, 0.19381461994043125, 0.17513358168190352, 0.20816470171828672, 0.1789507297162447, 0.19666650290829435, 0.17925352119083693, 0.34489538544333054, 0.20881436533509956, 0.43319884893004745, 0.1962677914625287, 0.21637774564314394, 0.4745424484188906, 0.2042915366095368, 0.20424198554206285, 0.4766132055486527, 0.7364623740087624, 0.19232585806995017, 0.7328365806815627, 0.7951819243156866, 0.6643701890043264, 0.7988511676824138, 0.741580404352695, 0.7004677487867486, 0.19656321698245238, 0.6875858479653405, 0.20626466453824166, 0.20602696321741132, 0.7114869145364489, 0.5613753151055714, 0.20317789127866803, 0.20548943928105812, 0.8363204126409082, 0.208024763511503, 0.18587019688892303, 0.1803202244443548, 0.1895788041300498, 0.18429898980036108, 0.18268972278583906, 0.18177293482040524, 0.19662069288440898, 0.18986181792925294, 0.20193043258636745, 0.07396927055342328, 0.144808635093562, 0.07761699128922606, 0.0865651976623214, 0.07688156816996194, 0.07582337129667871, 0.07803248172850796, 0.08085985942030582, 0.07342297561924516]}, "mutation_prompt": null}
{"id": "330b9e6b-d469-4630-8b5d-2755ac04e13a", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted population size for better exploration\n        self.prob_crossover = 0.85  # Slightly reduced crossover probability for balance\n        self.F = 0.9  # Increased differential weight for stronger mutation\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for diverse exploration\n        self.cooling_rate = 0.95  # Slower cooling rate for prolonged exploration\n        self.diversity_factor = 0.3  # Enhanced diversity factor for more exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Slower cooling impacts\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm integrating Adaptive Differential Evolution with Simulated Annealing and Adaptive Diversity Control for superior exploration and exploitation balance.", "configspace": "", "generation": 57, "fitness": 0.3159323439979921, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7560936238326957, 0.7586446019717663, 0.7406365272336954, 0.7607431310858235, 0.734872094623765, 0.7670466426155462, 0.7330996883469787, 0.7363318648680588, 0.7314111587011631, 0.5771351466919611, 0.4789094040562283, 0.5164850247916981, 0.5413365178026244, 0.5534127087475862, 0.5715197447559823, 0.5614382140025371, 0.566509926210407, 0.567892475864956, 0.1846230894059938, 0.12475414880744118, 0.1284170827258969, 0.15359469132748327, 0.12516495983909504, 0.15017889814632868, 0.22173529848061002, 0.17987912253709037, 0.1561225169069157, 0.10157554326075535, 0.12146528054978467, 0.13698695814766704, 0.126788086299096, 0.12821606492926096, 0.12294786270428026, 0.11974390440864613, 0.10450990259357096, 0.11307492970186572, 0.9747258694685155, 0.9587691081854177, 0.9677914743364282, 0.9657502539765583, 0.9841094402381309, 0.9774461145358844, 0.9847781748825973, 0.987779391123929, 0.9572651011111962, 0.39857846804886243, 0.37055271788827804, 0.40031602736515814, 0.34783725564034285, 0.354453129216346, 0.33946547838403207, 0.39307886935368097, 0.35026603411857626, 0.3987052475421483, 0.5247278206516549, 0.45969102360950964, 0.5952904145696603, 0.5657320557174601, 0.6661753656105037, 0.6473105961539007, 0.5938989995179077, 0.6095774907407296, 0.6213801614479095, 0.2558508939711497, 0.3303660126324187, 0.26458232067847176, 0.216553721985843, 0.25826049665650885, 0.2709832729127388, 0.21416453187541395, 0.23944061094838653, 0.2826365780924821, 0.29665230403606624, 0.27798894275038033, 0.25787083191191096, 0.2951609972550897, 0.25271636989779167, 0.24199421795211373, 0.2916832933619308, 0.2638729662113929, 0.2786251533722901, 0.21151296331823355, 0.10553614420699486, 0.14834383558977227, 0.15699546422344468, 0.10749609401816018, 0.11859011201744996, 0.12819051876519938, 0.17315443467085168, 0.11538472117361054, 0.3430703879056325, 0.24435691863108044, 0.28601400730229964, 0.2592085085127006, 0.3107963107588211, 0.2554071714078353, 0.3011042390650973, 0.32727858830756773, 0.29715836818198593, 0.040156650313129094, 0.05744808668462087, 0.06136309216789926, 0.05426660195873867, 0.11309964238784231, 0.06135774755385992, 0.017807552718563935, 0.06224844734440527, 0.032574079149406465, 0.15592836060160553, 0.17323161548132682, 0.16827642277116084, 0.17224752962461676, 0.17902258523553993, 0.20594585931220677, 0.18702191095050058, 0.16048352650586695, 0.18201007877338848, 0.5064609029368083, 0.5479557279794472, 0.5495493705748207, 0.5154901504105376, 0.5143766488536679, 0.5469498673346164, 0.5554007338081122, 0.5269025481872156, 0.5125726874041221, 0.08125507861623393, 0.08693551857939019, 0.11763558707541866, 0.10314428894129268, 0.09803031081889879, 0.1160528247988355, 0.09760265871321938, 0.0997090357188607, 0.0862042730030751, 0.20436033017783806, 0.15692805582548752, 0.16994327258943553, 0.17870607944826733, 0.1396012337971897, 0.1911556701989754, 0.20266258780314428, 0.16734008171480874, 0.14778571413184505, 0.2737142972551011, 0.299208876769681, 0.2955761578163719, 0.3155557256318159, 0.29551404019715377, 0.26251681653411085, 0.35451659884844333, 0.30559485792684227, 0.31934724734531605, 0.2530287746475701, 0.22461442155282185, 0.20559313756407727, 0.25727657538133386, 0.20401628866976385, 0.19624223379090633, 0.2158276082227918, 0.2647010665732705, 0.23810091532579503, 0.18403347960297356, 0.19776419170500448, 0.19328944541986726, 0.19247034462144297, 0.19624464232356942, 0.19354154645638988, 0.1885486192189143, 0.1784754278032067, 0.19895376385946006, 0.19863704592077602, 0.2697842244050719, 0.18059101489530016, 0.17353458480421502, 0.19304037684692443, 0.19615857473580922, 0.1847176691697997, 0.20951833778162177, 0.1810130108274196, 0.7384877482921082, 0.19621454608117916, 0.791012398918177, 0.710410681353186, 0.7091350448532152, 0.6928414921802987, 0.1830728383173411, 0.1847173265649774, 0.1634904122404367, 0.621204442763175, 0.2035982303000089, 0.6534229641680556, 0.45002661705194114, 0.19910372432469226, 0.4692434411437221, 0.21211970996059604, 0.16555612864102454, 0.707989913355785, 0.18125445129074302, 0.17614869895275787, 0.18845699716561137, 0.1887742852690515, 0.1962656386209376, 0.18617192762157442, 0.17797056509777287, 0.19923546219693267, 0.19312092305530637, 0.0743089914854691, 0.08782732470377319, 0.07405324582564898, 0.07056815783484949, 0.0761106992217212, 0.06759521766450594, 0.07194164365054423, 0.08278272192655545, 0.07293749707574848]}, "mutation_prompt": null}
{"id": "e2b5b490-c519-429a-8a0a-87ee0447a4b6", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted population size for better exploration\n        self.prob_crossover = 0.85  # Tuned crossover probability for balance\n        self.F = 0.9  # Increased differential weight for diversity\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Enhanced initial temperature for exploration\n        self.cooling_rate = 0.85  # Adaptive cooling rate for sustained exploration\n        self.diversity_factor = 0.3  # Further increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Enhanced cooling adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "A novel hybrid algorithm leveraging Adaptive Differential Evolution and Dynamic Simulated Annealing with enhanced diversity exploration and adaptive cooling for superior convergence.", "configspace": "", "generation": 58, "fitness": 0.3102693033579291, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7560936238326957, 0.7586446019717663, 0.7445917944308174, 0.7607431310858235, 0.7303933025465161, 0.7670466426155462, 0.7546188108101803, 0.7542363265830869, 0.7314111587011631, 0.5771351466919611, 0.4789094040562283, 0.5164850247916981, 0.5413365178026244, 0.5534127087475862, 0.5715197447559823, 0.5614382140025371, 0.566509926210407, 0.567892475864956, 0.1846230894059938, 0.12475414880744118, 0.1284170827258969, 0.15343261157109467, 0.12516495983909504, 0.13455387093614113, 0.22173529848061002, 0.17987912253709037, 0.1561225169069157, 0.10157554326075535, 0.12146528054978467, 0.12544272186993333, 0.126788086299096, 0.12821606492926096, 0.12294786270428026, 0.11974390440864613, 0.10450990259357096, 0.11307492970186572, 0.9747258694685155, 0.9711971344156958, 0.9677914743364282, 0.9566450463864088, 0.9841094402381309, 0.9774461145358844, 0.9883636846375516, 0.987779391123929, 0.9428319214703849, 0.39857846804886243, 0.37055271788827804, 0.40031602736515814, 0.34783725564034285, 0.354453129216346, 0.33946547838403207, 0.39307886935368097, 0.35026603411857626, 0.3987052475421483, 0.5247278206516549, 0.45969102360950964, 0.5952904145696603, 0.5657320557174601, 0.6661753656105037, 0.6473105961539007, 0.5938989995179077, 0.6095774907407296, 0.6213801614479095, 0.2558508939711497, 0.3303660126324187, 0.26458232067847176, 0.216553721985843, 0.25826049665650885, 0.2709832729127388, 0.21416453187541395, 0.23944061094838653, 0.2826365780924821, 0.29665230403606624, 0.27798894275038033, 0.25787083191191096, 0.2951609972550897, 0.25271636989779167, 0.24199421795211373, 0.2916832933619308, 0.2638729662113929, 0.2786251533722901, 0.21151296331823355, 0.10553614420699486, 0.14834383558977227, 0.15699546422344468, 0.10749609401816018, 0.11859011201744996, 0.12819051876519938, 0.17315443467085168, 0.11538472117361054, 0.3430703879056325, 0.24435691863108044, 0.28601400730229964, 0.2592085085127006, 0.3107963107588211, 0.2554071714078353, 0.3011042390650973, 0.32727858830756773, 0.29715836818198593, 0.040156650313129094, 0.05744808668462087, 0.06136309216789926, 0.05426660195873867, 0.11309964238784231, 0.06135774755385992, 0.017807552718563935, 0.06224844734440527, 0.032574079149406465, 0.15592836060160553, 0.17323161548132682, 0.16827642277116084, 0.17224752962461676, 0.17902258523553993, 0.20594585931220677, 0.18702191095050058, 0.16048352650586695, 0.18201007877338848, 0.5064609029368083, 0.5479557279794472, 0.5360073644919765, 0.5154901504105376, 0.5143766488536679, 0.5469498673346164, 0.5554007338081122, 0.5938177034769757, 0.5456854006358234, 0.08125507861623393, 0.08693551857939019, 0.11763558707541866, 0.10314428894129268, 0.09803031081889879, 0.1160528247988355, 0.09760265871321938, 0.0997090357188607, 0.0862042730030751, 0.20436033017783806, 0.15692805582548752, 0.16994327258943553, 0.17870607944826733, 0.1396012337971897, 0.1911556701989754, 0.20266258780314428, 0.16734008171480874, 0.14778571413184505, 0.3104470198239917, 0.29207618655523104, 0.28804975682569256, 0.3155557256318159, 0.29551404019715377, 0.27354037650747565, 0.35451659884844333, 0.30559485792684227, 0.31934724734531605, 0.2530287746475701, 0.22461442155282185, 0.20559313756407727, 0.25727657538133386, 0.20401628866976385, 0.19624223379090633, 0.2158276082227918, 0.23719571907448989, 0.23810091532579503, 0.1973400247977255, 0.19776419170500448, 0.19328944541986726, 0.1743565144894652, 0.1774876228515987, 0.21143548948660862, 0.1885486192189143, 0.1884904019086162, 0.19895376385946006, 0.19863704592077602, 0.2697842244050719, 0.18059101489530016, 0.17353458480421502, 0.19304037684692443, 0.19615857473580922, 0.1847176691697997, 0.20951833778162177, 0.1810130108274196, 0.17100958505353703, 0.19621454608117916, 0.791012398918177, 0.18278763749191018, 0.7091350448532152, 0.6928414921802987, 0.1830728383173411, 0.18963564457397963, 0.1903089266718737, 0.1996489318653636, 0.2020596446541233, 0.6911383295281411, 0.45002661705194114, 0.19910372432469226, 0.6516127193691567, 0.21211970996059604, 0.16555612864102454, 0.6762333027594554, 0.18125445129074302, 0.1832432989619377, 0.18439809132320162, 0.1826409791498701, 0.18019409259313468, 0.18617192762157442, 0.18498824529468738, 0.18203047127064675, 0.19312092305530637, 0.0743089914854691, 0.08782732470377319, 0.07405324582564898, 0.07056815783484949, 0.0761106992217212, 0.06759521766450594, 0.0757455885089715, 0.08278272192655545, 0.07293749707574848]}, "mutation_prompt": null}
{"id": "5d1dec24-f43d-4562-af25-a0d6b1e22b95", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "c601f15f-86e9-416c-8a61-119befdb1bca", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "af891821-1c4e-4d8f-9951-86fe028e2458", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted population size for better balance\n        self.prob_crossover = 0.85  # Optimized crossover probability for balance\n        self.F = 0.7  # Adjusted differential weight for stability\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for exploration\n        self.cooling_rate = 0.95  # Optimized cooling rate for annealing\n        self.diversity_factor = 0.3  # Increased diversity factor for exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.2\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Adjusted cooling rate for dynamic annealing\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm using Adaptive Differential Evolution and Simulated Annealing with improved parameter adaptation and dynamic diversity for robust optimization.", "configspace": "", "generation": 61, "fitness": 0.38405549505532427, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8462945066381644, 0.8184382385245428, 0.8285093423995674, 0.841360247563248, 0.8372340622422154, 0.8304811012855615, 0.8370251696948781, 0.8115610732075721, 0.8254827054911837, 0.6925897979517022, 0.708647306490417, 0.6815248069485507, 0.6772441574496799, 0.6894138859341152, 0.6733495828965199, 0.6932433120304733, 0.7068061060337293, 0.7147001876824803, 0.10331306659309847, 0.13828631868053431, 0.11411232906391433, 0.2786266689240713, 0.10718428527765844, 0.17253621468425773, 0.13844325164174276, 0.14339143052889636, 0.1057584048855329, 0.17436435991804888, 0.1318718346998139, 0.10380358690769009, 0.12967251559862703, 0.10192045222669843, 0.1471783958799333, 0.13856660627677142, 0.1223514000541307, 0.10731340328309757, 0.9769473334205758, 0.971062398848123, 0.9517583058731918, 0.9651237537116276, 0.9568055425679596, 0.9668090835478876, 0.9667775346707247, 0.9566407677745777, 0.964829606547458, 0.5248022499974576, 0.5066818279054557, 0.546492634429497, 0.5358038363011561, 0.5445309667752318, 0.5326068363374754, 0.6022197990617117, 0.5603387300470299, 0.5113475753127419, 0.7825491393257311, 0.8022775800537509, 0.7552135647131918, 0.790574098512589, 0.7626080860602915, 0.7771554612555953, 0.7109389173941283, 0.8049239694222676, 0.8050564460248998, 0.41162838988889316, 0.42986947623152705, 0.3379526788787771, 0.40804824299128206, 0.4816842593788331, 0.46460005318118824, 0.394692767507028, 0.4974380928526825, 0.3046060668030781, 0.31506202398196004, 0.2029721335371284, 0.2815649574363672, 0.3386973577357678, 0.37375627759296115, 0.4364885887099552, 0.48466279138152135, 0.2591533540164934, 0.338902177258115, 0.3373975401311774, 0.24984009277864283, 0.3576643875693417, 0.37121750188952707, 0.3235283481580895, 0.32996572900344867, 0.3236445212422754, 0.3671410942681601, 0.2756419822949927, 0.47912244949873095, 0.4715289731718626, 0.4280619137608842, 0.4448336757227488, 0.47462176785507104, 0.4711428528346371, 0.4866155772747628, 0.5277806246852794, 0.5255275090219581, 0.0912409604473512, 0.11800375257867002, 0.14432066096569052, 0.18684491226702404, 0.20732651294460902, 0.19972694627696552, 0.13075527591226588, 0.12792663989450626, 0.14817297167300314, 0.29616025524206924, 0.28111882178058145, 0.25367940039188275, 0.2939402703085966, 0.3170792815889746, 0.3280055422727012, 0.24047216905729396, 0.30227112533847444, 0.2729213418593551, 0.728676250527301, 0.6928996939847748, 0.7169953793302104, 0.7223129112543569, 0.7399852165758081, 0.680240427014459, 0.6801718498684184, 0.6762915706691796, 0.6980987935278198, 0.08223733878729345, 0.10132535864627956, 0.08112236068747003, 0.10100405876086604, 0.10268316839922642, 0.09010005014672484, 0.10033218089283003, 0.08880368045133524, 0.09543095700363724, 0.15889525782775782, 0.1838228660371526, 0.1414181860897612, 0.15681317552067398, 0.15810153690001394, 0.14644125887631765, 0.17255026998871248, 0.15007568746948252, 0.14646230113334768, 0.3871137116835124, 0.3982944273142527, 0.3760978921847249, 0.3754793616725094, 0.37613116978628336, 0.3975357110006956, 0.4101434736155527, 0.44846674623291305, 0.4087164906571388, 0.24279318785519555, 0.31294360915338415, 0.27627514635369044, 0.28081192232864083, 0.3129340654326198, 0.277747655068059, 0.30071516922812525, 0.3281178223882437, 0.3232544242029961, 0.18937643358931855, 0.21852364821681147, 0.1934410517385381, 0.18103682231269835, 0.18585008552103277, 0.18487857752843428, 0.1803623327518744, 0.19023906201855179, 0.19762936101272255, 0.40291010783655534, 0.19622490242764168, 0.19748677211224752, 0.21868822855713266, 0.3609228825267008, 0.18143245513205386, 0.19821493494780706, 0.2645700107313732, 0.2064425650828322, 0.748421591945626, 0.20573955064398175, 0.18302263308950628, 0.7608941200272356, 0.1815098878613397, 0.7121965952838814, 0.7443611574150935, 0.18272975287235427, 0.750025226105926, 0.6232408524010078, 0.20512229332956633, 0.16737995345063994, 0.6985904857701585, 0.20026054766829582, 0.2053762332266188, 0.20550363518292647, 0.20540941296017368, 0.2109979398606895, 0.18742425507786142, 0.17435147173119347, 0.19200907794561128, 0.18445664207711165, 0.18313686916695904, 0.1738842729288279, 0.17622218175983018, 0.2095412044512449, 0.1796333895570953, 0.07309346387353821, 0.07340008886599281, 0.07530328618066817, 0.07207378062528946, 0.0762893121680479, 0.07184489301893304, 0.07675035721451007, 0.08086320069111241, 0.07733407614049681]}, "mutation_prompt": null}
{"id": "3770614a-dbc6-43c6-9015-11a0224a5012", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "b8d37251-db4b-48d6-b4d4-367b85c0f835", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "e33d0079-1d78-40a1-b151-ea3fce3c0abd", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "0b5ab48f-153b-4bee-99b4-d82b41cac72b", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "1d1f5eda-cd5f-41f4-8a5d-6f6fbcd3311b", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.6 * dim)  # Modified for better scalability\n        self.prob_crossover = 0.85  # Adapted crossover probability\n        self.F = 0.9  # Increased differential weight for strong mutations\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for exploration\n        self.cooling_rate = 0.95  # Slower cooling for sustained exploration\n        self.diversity_factor = 0.25  # Enhanced diversity factor for better search space coverage\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.normal(0, 1, self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "A hybrid optimization algorithm leveraging stochastic local search and self-adaptive DE strategies with improved exploration-exploitation balance.", "configspace": "", "generation": 66, "fitness": 0.41596516380045034, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8541201202573625, 0.8491880936348765, 0.8540592903252417, 0.8551905740366371, 0.838297583424122, 0.8571057186399094, 0.849624630525379, 0.8572603301648557, 0.8533534380069634, 0.775059856925704, 0.7543598964847982, 0.758885738257338, 0.7902170993728103, 0.7640072022835916, 0.748492209722394, 0.7587679022704427, 0.776549065675956, 0.7463262379377608, 0.15518421192434184, 0.5335329519686021, 0.14563278136312952, 0.17473743450805757, 0.5240534898860226, 0.17138671656669924, 0.5222265373964852, 0.16323104340654648, 0.1741382350461459, 0.4172545160224006, 0.38486141400123575, 0.14844914514031915, 0.42131833515691075, 0.157091798338725, 0.15645085160056837, 0.1563295120438063, 0.16722100491417746, 0.14023491979632885, 0.9744035158642043, 0.9826654654814854, 0.9702245844303046, 0.9865409220985849, 0.9690782139997807, 0.9778119260377504, 0.9791700318932511, 0.9822643312642724, 0.9830827630596661, 0.6532521032426278, 0.5886960740964089, 0.6422999152592297, 0.640902595860023, 0.6177105506260601, 0.6490378321353476, 0.6253360508331255, 0.648130804286679, 0.5804775158908002, 0.7682405266134098, 0.7788108446476252, 0.7107192399292674, 0.7547095431188722, 0.7195741509492306, 0.7921163007261832, 0.6195051267492335, 0.8402361261499688, 0.7258556816362675, 0.5242743575418075, 0.5497516608322713, 0.1238935751996727, 0.4337632188712306, 0.5922584498368569, 0.5251958775158247, 0.4647695040359441, 0.5731735186097181, 0.6115767150468792, 0.5845067237398032, 0.05401886376237619, 0.3930569287922896, 0.4597585613307932, 0.38884539940451734, 0.508203326350844, 0.485122899457766, 0.48621779014970345, 0.5335275881191472, 0.10007194408328446, 0.4276226372875601, 0.2500225928239094, 0.16474060677777758, 0.132729468991728, 0.3174154777432694, 0.3911005679481897, 0.07626272663243783, 0.3071891180461106, 0.34171722943045546, 0.14123447798696653, 0.3035418399950208, 0.36291401367257803, 0.4606429622530839, 0.21884039142023926, 0.26121184770011774, 0.45820922672011755, 0.6078824013957562, 0.31694434941464544, 0.23325918787149735, 0.08746533530161593, 0.24679525255656698, 0.19201837997367288, 0.3405767164096979, 0.12401719460628902, 0.2018135330970584, 0.17234873911454174, 0.2990468463637954, 0.2836811836626876, 0.3385304105218915, 0.3440070906955096, 0.3507662699517027, 0.3305583142420815, 0.2822250807833523, 0.29066300995903804, 0.25270818723489663, 0.6821150384858633, 0.7604956156611797, 0.637447377130528, 0.6972798004060123, 0.6385994484779696, 0.7002997939835749, 0.6482146396132116, 0.684836222301173, 0.6582715737000855, 0.13583843947160135, 0.12052917310467925, 0.15561031060567765, 0.10645968930839156, 0.11080663042724814, 0.11884050624748288, 0.12837948587749448, 0.11503303922121244, 0.10188402065483204, 0.17753993382631683, 0.3148756680345237, 0.15805712663097615, 0.32565553791366697, 0.18527737348101703, 0.16863700525258463, 0.1965727956152593, 0.27070408989683525, 0.15418254265450282, 0.4391386483300066, 0.444953606765651, 0.40755134318095576, 0.4275904253071723, 0.3790898658092837, 0.45639670294516177, 0.4725278363071137, 0.40730214930877406, 0.4546946060273228, 0.30273532304989204, 0.26958823030944856, 0.3243764022915644, 0.2927481631797312, 0.2529051805438165, 0.3123407028952824, 0.35048252637346333, 0.3421559529255177, 0.3876004598575471, 0.17812436362963613, 0.19087862056144334, 0.20894362091440666, 0.1895979406540078, 0.1783273883644797, 0.1778132294239786, 0.1775805781343992, 0.19327458725723734, 0.19363082535052212, 0.18768040627563798, 0.18972979743510276, 0.2090909245327347, 0.5762733843907784, 0.4143233044658522, 0.2328281371943458, 0.4241391916092975, 0.5891082719014646, 0.5502776647949853, 0.834383595765473, 0.19897221083689254, 0.16411840957645696, 0.8584068031324833, 0.8222095456845793, 0.1982675730931336, 0.1872089707023361, 0.7988305858045637, 0.1939659745871679, 0.7963765686546903, 0.7706600942607981, 0.7548197387541659, 0.20817948725051671, 0.2069721465824086, 0.2045452067726713, 0.20993387729133006, 0.21100304669605052, 0.21224052950777594, 0.18276500900021042, 0.16307389266354222, 0.20210433966429453, 0.18028309746844973, 0.20809496110203884, 0.17229594441572282, 0.1872642326947015, 0.15957524324767114, 0.17158637787847852, 0.07739326858062956, 0.07469633274558729, 0.08382093830360315, 0.07716055506319885, 0.06433238358463533, 0.103325207979866, 0.09667790731554071, 0.07906626296797081, 0.07787962581281715]}, "mutation_prompt": null}
{"id": "91136c8e-5bfc-45de-96b3-856b8ec5869c", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.85  # Adjusted crossover probability for exploration\n        self.F = 0.9  # Modified differential weight for better diversity\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Adjusted initial temperature\n        self.cooling_rate = 0.85  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.25  # Enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV5", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing, enhanced diversity mechanisms, and adaptive mutation strategies for improved convergence and robustness.", "configspace": "", "generation": 67, "fitness": 0.3266315145029633, "feedback": "The algorithm RefinedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7538272897603184, 0.7206061945977777, 0.7423559173391134, 0.7543887370277551, 0.7259675126605731, 0.7710235666878935, 0.761639980137577, 0.7692162873835496, 0.7699276474914925, 0.5608980841884952, 0.6001819090268314, 0.6124938702211496, 0.5526300568065219, 0.5343267750398266, 0.6010154981053311, 0.6166020208089595, 0.5948265995749757, 0.6226477735732204, 0.17357640951469078, 0.14478395244422881, 0.14100733343229133, 0.2712697260319996, 0.1507131140330915, 0.19937643482594014, 0.25237846986240164, 0.1274552376510646, 0.2055718803016532, 0.11505877857957858, 0.11149071304318026, 0.2712683387041903, 0.12968367242314904, 0.11482747126281734, 0.15331106625696123, 0.13356309255545262, 0.14273308595966028, 0.11081344857956132, 0.9795438825006939, 0.9678465601386789, 0.9685791006592445, 0.9623630432527859, 0.987353265577548, 0.9699144616607, 0.982994389179079, 0.9813568574530226, 0.9395660435661212, 0.3895376946202428, 0.38393131005820524, 0.3695587369477593, 0.37116675850709424, 0.39772396899386664, 0.38764549686632277, 0.3932259480352662, 0.3689833399254694, 0.3785062008399728, 0.605613145282949, 0.6505255167979722, 0.5484787875117957, 0.6170734694339302, 0.6493972243650581, 0.5850015510319122, 0.6743460485608648, 0.6346570878553673, 0.5880567157755723, 0.22762275885538596, 0.28743646168197634, 0.29338791066624437, 0.2071333006759276, 0.26961990226658183, 0.23814689746261675, 0.2699707779778079, 0.2537616421873382, 0.30737907335269254, 0.2752774522996413, 0.24586240525158765, 0.12324921129462796, 0.25653674409276617, 0.2667550549721637, 0.2196024582758075, 0.2787576635732897, 0.32371946093267423, 0.31723591669688656, 0.11893227257602934, 0.18422357217482355, 0.15276797000814857, 0.18601935270939574, 0.18615931261397578, 0.12606116667923395, 0.19652705594060882, 0.1312131262627667, 0.12926259190301426, 0.2597146513730333, 0.2964453314741198, 0.28702358422378704, 0.32275070435998354, 0.2977186271823592, 0.35994958469838256, 0.3075588985177098, 0.3814949503095336, 0.2943923944814444, 0.04845672328694728, 0.05415410732947712, 0.07318931469016465, 0.050860958315645965, 0.06474321474434741, 0.11145546005118045, 0.07489653091616622, 0.04526488286793773, 0.07765593141209792, 0.1951982803794381, 0.17492252879860348, 0.21506151192615974, 0.17661300156361304, 0.2286849900582406, 0.17370299240495857, 0.1985667769271543, 0.1846968075503943, 0.1895257813946728, 0.52774688123095, 0.5446035772384414, 0.5816418491167881, 0.5582836133536215, 0.5583520803361363, 0.5687930381310684, 0.559018405059232, 0.5295710636733977, 0.5596861428555651, 0.08784809508855995, 0.08977139746052576, 0.10267638895733544, 0.08671435028216168, 0.09615620226013144, 0.10113456830361134, 0.09241010707624941, 0.09529497683415233, 0.08803838770885852, 0.24106787652686668, 0.2241879287432994, 0.19958209497564572, 0.17167177144197376, 0.16504822273720887, 0.17354733845470383, 0.2437654943726425, 0.16277786935149197, 0.18853924961443547, 0.3079227690519717, 0.3163998079045578, 0.2780718100341165, 0.3029723237572689, 0.30887633520220015, 0.32288612363638136, 0.30322338641774715, 0.3247825523188018, 0.3086392792517668, 0.21812069075863694, 0.23840997262895114, 0.21667705273861726, 0.23452982326530114, 0.2438788238699665, 0.20843624922561588, 0.23216701509731807, 0.2560213295555659, 0.2575689974936921, 0.18326503730795496, 0.17127776172570797, 0.204494675585555, 0.17649429925796545, 0.17946733131267523, 0.19007841409577353, 0.1950980234418893, 0.22147674459912536, 0.18132577985943166, 0.27339975666207816, 0.192360614129082, 0.18750609996957002, 0.19044715843679683, 0.2633818057632854, 0.28533531452740224, 0.19118316342547426, 0.41781359287169184, 0.1747950989120416, 0.7502498599413301, 0.7090958889325415, 0.7467179651448748, 0.8036580315356989, 0.18445184465426234, 0.18966923986274786, 0.18310405254019513, 0.6161565916115574, 0.4987757951572416, 0.6350578629104449, 0.20416236138781996, 0.6220913493983183, 0.6748160274479142, 0.2030017111150736, 0.2025337128040453, 0.20899128797280053, 0.2100177155442331, 0.20829514124556747, 0.20788288776592767, 0.18625010013825172, 0.1842695516736862, 0.18008355404958987, 0.19550997576157403, 0.19754105836213676, 0.18349894780916387, 0.18183944022373577, 0.20238554374820528, 0.07494429272763459, 0.0703561648058163, 0.07576189536667133, 0.0672173551717582, 0.07783667653610793, 0.0670468846959078, 0.07255571093504298, 0.07955418680707449, 0.07658789566574509]}, "mutation_prompt": null}
{"id": "78eff29b-877b-42a6-9002-b60ea52937ed", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Increased population size for diversity\n        self.prob_crossover = 0.85  # Balanced crossover probability\n        self.F = 0.9  # Enhanced differential weight for better search\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for exploration\n        self.cooling_rate = 0.95  # Slower cooling for gradual exploitation\n        self.diversity_factor = 0.25  # Higher diversity factor for exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Gradual cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm incorporating Adaptive Differential Evolution with Improved Simulated Annealing and Enhanced Diversity for superior performance and adaptability.", "configspace": "", "generation": 68, "fitness": 0.31588568765675545, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7427447041291714, 0.7208076729126018, 0.7270079492337931, 0.7613451657462019, 0.7711976740774149, 0.7162061020748767, 0.7839409503200653, 0.7689355174656544, 0.7580238401365754, 0.5748239894682249, 0.5588005995314173, 0.5638347765113614, 0.5026207366267186, 0.5637934035128607, 0.5550194163885156, 0.54721579660308, 0.5490058649624269, 0.5803245057591209, 0.1537921497961353, 0.13841801673351695, 0.11985689783625986, 0.17353259875866156, 0.11234162543922066, 0.17709775612235246, 0.21223315385706143, 0.22088788468914544, 0.1290786219149198, 0.1197592486856256, 0.13907534477789507, 0.12470998459658855, 0.14611790885228404, 0.16504947874258669, 0.11108184736090931, 0.10099421975144873, 0.12848990262318638, 0.13482091208875058, 0.9691935829014177, 0.9534106690439519, 0.9636504591792983, 0.9635793750316238, 0.9632471924574544, 0.9577965664300816, 0.9574618888853061, 0.9689325646902958, 0.9554267152989117, 0.3800040603788257, 0.3596561579116102, 0.3595949234415624, 0.3705249839786193, 0.35540840354932723, 0.3561527863988986, 0.35179329493168143, 0.42376819381990805, 0.38300562303144225, 0.6239760459583525, 0.5199061325438938, 0.5728005295261345, 0.6168518698465484, 0.5479478571518257, 0.6247562244188543, 0.6107877824380816, 0.5638100402246548, 0.6528789370047825, 0.287021444609578, 0.23820475602229485, 0.25554232168361646, 0.300227394404888, 0.1879304060272159, 0.22757310447621548, 0.1999788627518978, 0.28219936481342556, 0.24028043037390245, 0.227502395515513, 0.1152353426959215, 0.039242780762877905, 0.2129917202194963, 0.1944989150222819, 0.2952339850742468, 0.2423856170280907, 0.20857528883262388, 0.2210536340424616, 0.16268960454482928, 0.20272556430569744, 0.15982268586979376, 0.10444108048692491, 0.13734998738280335, 0.1356318979525868, 0.13369110649489324, 0.11635433856728084, 0.15045079644035741, 0.291711736093916, 0.26388919521609744, 0.28422851322995324, 0.2886274412056019, 0.25638227101636835, 0.25744395244949236, 0.2894143476985721, 0.27059720737108817, 0.301976280951769, 0.023498819434837448, 0.04294919059426394, 0.08774776096617531, 0.05247277993332866, 0.010301354383450922, 0.10060407458872833, 0.10095781960518702, 0.09057956360478714, 0.04530754504718715, 0.1588125542932517, 0.18871881416215375, 0.1846140033466558, 0.19402009865820347, 0.19903461910320497, 0.18238610326666582, 0.20262138442116673, 0.18240475844957538, 0.19107882233672058, 0.5628574042319496, 0.5264116299129519, 0.5501697964979446, 0.5631166781418524, 0.5240597642461656, 0.5403910834707863, 0.5414971493315051, 0.5632292039130598, 0.5282369881824305, 0.09911684841529345, 0.09176716103414151, 0.08715377722648776, 0.09791966854198819, 0.10175900083622547, 0.10039575811248869, 0.09117089060204708, 0.09020989021904402, 0.08865909162835128, 0.2464062864913762, 0.13333489248814934, 0.1728387562214413, 0.24782195756999836, 0.1464099158061386, 0.15915497002860157, 0.18753537431116196, 0.1524574740945318, 0.13759806235620176, 0.3285722478671025, 0.3435927798117274, 0.2926925811286596, 0.3330214698991213, 0.3008109188188244, 0.32001160074439294, 0.3188459625245027, 0.2916037210902148, 0.3219147415356096, 0.2211756960090413, 0.20212409623937144, 0.2185993976490379, 0.21313019608888317, 0.24162322235056088, 0.21756608254657273, 0.23337297285290803, 0.2222635378399287, 0.2229028591428538, 0.1939770675798419, 0.17609104717602442, 0.1912105758057031, 0.17864801237427896, 0.19833376774340872, 0.1867940580430678, 0.21374846898523214, 0.18061140386598762, 0.18463258909332358, 0.18687924717767168, 0.1810578141360335, 0.233785985438009, 0.2175616156740623, 0.18138946330410022, 0.18973182193536553, 0.2109944239022603, 0.19793364484885678, 0.18061866777534197, 0.16885280584996532, 0.16995764909314204, 0.6174185794871083, 0.7223932755073852, 0.7473850828045057, 0.693537816594381, 0.18057224184985587, 0.5519648393158703, 0.7052108302969486, 0.5711464149429564, 0.6541435206178999, 0.2014510033883119, 0.596849567121409, 0.19835954063141625, 0.6750248052868549, 0.15159405787996438, 0.7418404008366433, 0.14957190501975515, 0.18322334590414002, 0.1856993285611892, 0.1769431072783476, 0.19236088549143182, 0.20644495068922686, 0.17237433571026972, 0.18780339251389955, 0.21164335790729227, 0.17850876990689157, 0.07322783669341648, 0.07503671217700336, 0.07276617881679814, 0.08489856877640867, 0.08047112743774465, 0.0771945665563677, 0.06777059538660957, 0.07139643143528684, 0.07624255679219549]}, "mutation_prompt": null}
{"id": "2e3fabfd-7ece-4316-86a9-bdd0b6baea55", "solution": "import numpy as np\n\nclass AdvancedHybridDEASAV:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Modified population size for increased exploration\n        self.prob_crossover = 0.85  # Slightly reduced crossover probability for more exploitation\n        self.F = 0.9  # Increased differential weight for more aggressive mutation\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for more exploration\n        self.cooling_rate = 0.85  # Slower cooling rate for gradual annealing\n        self.diversity_factor = 0.25  # Higher diversity factor for improved search space coverage\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Gradual cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "AdvancedHybridDEASAV", "description": "An advanced hybrid approach integrating Differential Evolution, Simulated Annealing, and Adaptive Diversity to enhance exploration and convergence efficiency.", "configspace": "", "generation": 69, "fitness": 0.3177484260907252, "feedback": "The algorithm AdvancedHybridDEASAV got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7139986168543769, 0.7208076729126018, 0.7270079492337931, 0.7613451657462019, 0.7711976740774149, 0.762579596841074, 0.7839409503200653, 0.7689355174656544, 0.7415270696174815, 0.5748239894682249, 0.5588005995314173, 0.5638347765113614, 0.5026207366267186, 0.5637934035128607, 0.5550194163885156, 0.54721579660308, 0.5490058649624269, 0.5803245057591209, 0.1537921497961353, 0.13841801673351695, 0.11985689783625986, 0.17353259875866156, 0.11234162543922066, 0.17709775612235246, 0.21223315385706143, 0.1653036979204806, 0.1290786219149198, 0.1197592486856256, 0.13907534477789507, 0.12470998459658855, 0.12801368591945406, 0.16504947874258669, 0.11108184736090931, 0.10099421975144873, 0.12848990262318638, 0.13482091208875058, 0.9691935829014177, 0.96444408030987, 0.9716308147293847, 0.9635793750316238, 0.9632471924574544, 0.9656929519913019, 0.9574618888853061, 0.9689325646902958, 0.9699671628593411, 0.3800040603788257, 0.3596561579116102, 0.3595949234415624, 0.3705249839786193, 0.35540840354932723, 0.3561527863988986, 0.35179329493168143, 0.42376819381990805, 0.38300562303144225, 0.6239760459583525, 0.5199061325438938, 0.5728005295261345, 0.6168518698465484, 0.5479478571518257, 0.6247562244188543, 0.6107877824380816, 0.5638100402246548, 0.6528789370047825, 0.287021444609578, 0.23820475602229485, 0.25554232168361646, 0.300227394404888, 0.1879304060272159, 0.22757310447621548, 0.1999788627518978, 0.28219936481342556, 0.24028043037390245, 0.227502395515513, 0.1152353426959215, 0.039242780762877905, 0.2129917202194963, 0.1944989150222819, 0.2952339850742468, 0.2423856170280907, 0.20857528883262388, 0.2210536340424616, 0.16268960454482928, 0.20272556430569744, 0.15982268586979376, 0.10444108048692491, 0.13734998738280335, 0.1356318979525868, 0.13369110649489324, 0.11635433856728084, 0.15045079644035741, 0.291711736093916, 0.26388919521609744, 0.28422851322995324, 0.2886274412056019, 0.25638227101636835, 0.25744395244949236, 0.2894143476985721, 0.27059720737108817, 0.301976280951769, 0.023498819434837448, 0.04294919059426394, 0.08774776096617531, 0.05247277993332866, 0.010301354383450922, 0.10060407458872833, 0.10095781960518702, 0.09057956360478714, 0.04530754504718715, 0.1588125542932517, 0.18871881416215375, 0.1846140033466558, 0.19402009865820347, 0.19903461910320497, 0.18238610326666582, 0.20262138442116673, 0.18240475844957538, 0.19107882233672058, 0.5628574042319496, 0.5377255843843141, 0.5289106639415015, 0.5631166781418524, 0.5240597642461656, 0.5403910834707863, 0.5652692959968046, 0.5179135231598315, 0.5282369881824305, 0.09911684841529345, 0.09176716103414151, 0.08715377722648776, 0.09791966854198819, 0.10175900083622547, 0.10039575811248869, 0.09117089060204708, 0.08757843112067454, 0.08865909162835128, 0.2464062864913762, 0.13333489248814934, 0.1728387562214413, 0.24782195756999836, 0.1464099158061386, 0.21134046150573704, 0.18753537431116196, 0.1524574740945318, 0.13759806235620176, 0.30202941553789275, 0.3435927798117274, 0.2572527353147338, 0.3330214698991213, 0.3008109188188244, 0.32001160074439294, 0.3188459625245027, 0.29634030885477547, 0.3212738494534758, 0.2211756960090413, 0.20212409623937144, 0.2185993976490379, 0.21313019608888317, 0.24162322235056088, 0.21756608254657273, 0.23337297285290803, 0.2222635378399287, 0.2229028591428538, 0.1939770675798419, 0.17609104717602442, 0.1912105758057031, 0.17864801237427896, 0.18829298093870062, 0.19839854355933073, 0.18040607020352395, 0.19167157563623416, 0.1734132932718585, 0.18687924717767168, 0.1810578141360335, 0.233785985438009, 0.2175616156740623, 0.18138946330410022, 0.18973182193536553, 0.2109944239022603, 0.19793364484885678, 0.18061866777534197, 0.16885280584996532, 0.7439572824047694, 0.6174185794871083, 0.675703494728817, 0.7127362946905271, 0.693537816594381, 0.6669979086858667, 0.5519648393158703, 0.7052108302969486, 0.673082859064172, 0.6381941270776011, 0.2014510033883119, 0.596849567121409, 0.19835954063141625, 0.5815337544078448, 0.20864160943516874, 0.2074088932854593, 0.20816709462147864, 0.18322334590414002, 0.17787877400710617, 0.1769431072783476, 0.18191864091938492, 0.18850202056951526, 0.17237433571026972, 0.18780339251389955, 0.1857197170627528, 0.19106866481466722, 0.07322783669341648, 0.07503671217700336, 0.07276617881679814, 0.08489856877640867, 0.08047112743774465, 0.07950555848838048, 0.06777059538660957, 0.07139643143528684, 0.07592523638535564]}, "mutation_prompt": null}
{"id": "857ec212-0d84-4870-abd8-2ed1056f36f4", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted population size for improved exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability for fine-tuning\n        self.F_min = 0.5\n        self.F_max = 0.9  # Self-adaptive differential weight range\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Modified initial temperature for better exploration\n        self.cooling_rate = 0.95  # Adjusted cooling rate for smoother annealing\n        self.diversity_factor = 0.3  # Dynamic diversity adjustment\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                F = np.random.uniform(self.F_min, self.F_max)  # Self-adaptive differential weight\n                mutant = population[a] + F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * np.random.uniform(0.05, 0.15)\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n                \n                self.temperature *= self.cooling_rate  # Adjust cooling rate during iterations\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid optimization algorithm integrating Self-Adaptive Differential Evolution with Strategic Annealing and Dynamic Diversity for superior performance and adaptability.", "configspace": "", "generation": 70, "fitness": 0.3949594971634724, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8350783587672952, 0.831996903709075, 0.8423595626955168, 0.8433885720855039, 0.8296801805690983, 0.8382020067981604, 0.8541967857050806, 0.8355410091503142, 0.8454809943915482, 0.7089253276103784, 0.6949902165391564, 0.6737927142377609, 0.7269878575716502, 0.7209069967361665, 0.712717667106388, 0.6966838409824774, 0.7078573094104739, 0.7213707411523458, 0.18866601137804195, 0.12054655461618968, 0.19940808624675943, 0.26805023628270097, 0.11913915824181953, 0.13309753901152688, 0.18193570548988125, 0.27014297746493876, 0.12711952004173566, 0.11221394916100924, 0.1211157996567439, 0.12516761028627765, 0.10827571897940003, 0.1267548061499969, 0.1161240092164082, 0.10961999358778662, 0.32244855713911424, 0.11785221327637396, 0.9602543460307235, 0.9498583677662606, 0.950141725120422, 0.9691167422704904, 0.9605038598976603, 0.9633094902676098, 0.9574864045727478, 0.973577978741864, 0.9548719032069896, 0.5825187200937767, 0.5576314682540031, 0.5230930312058486, 0.5357201690878131, 0.5272932477411971, 0.5306618587650145, 0.5431618848802552, 0.5848145979754286, 0.5498966145444782, 0.7120547401365693, 0.785813391432171, 0.7624475505979822, 0.7328322215843096, 0.7739402255130072, 0.7847052673975341, 0.777131540101571, 0.7603882263996172, 0.8025539726061555, 0.4262262508445779, 0.391003737955229, 0.47000601705680345, 0.3126083751784774, 0.3989480737459018, 0.39255143660495584, 0.3330584718995083, 0.2225770530374177, 0.4458102786780972, 0.3211353068589662, 0.3667842738420819, 0.17716984015933068, 0.2814861617285901, 0.3332337451732722, 0.37712267856215875, 0.3343273916115632, 0.4060338127006877, 0.28489124535386967, 0.3469087370877645, 0.32865700262457054, 0.3534749242242444, 0.3339099630616674, 0.37660883089059827, 0.38427412093156144, 0.3135366973255135, 0.3794834301169181, 0.33042220747395845, 0.483843390894243, 0.4314115819672082, 0.46701608443400433, 0.49604790998006365, 0.4805113977562836, 0.5282499176805002, 0.5352186145649982, 0.5680920899743354, 0.5670871574809567, 0.07346442621361127, 0.09039135799807796, 0.1915451370389336, 0.2998270360440213, 0.2681353259291025, 0.29224466683561057, 0.22773522172960214, 0.17537722957298318, 0.09442446779455516, 0.3039296427671988, 0.32908487534543573, 0.2837887859527112, 0.3213659716885874, 0.29822332146729424, 0.327770118277143, 0.31126578957715867, 0.29194273467962206, 0.31519339422837966, 0.7310081752509423, 0.7242159730093234, 0.6931046985049274, 0.6913722570065337, 0.6984492798046026, 0.694715680635813, 0.6990922262948956, 0.7234791459671854, 0.7174367482847911, 0.09329594676700326, 0.09005016074870054, 0.1064914780714511, 0.0959560387864512, 0.09654796236895513, 0.08801942935162765, 0.10243345001887716, 0.10717474637036817, 0.10426389089189902, 0.17175027727697179, 0.21204958595814882, 0.1630134562958585, 0.15519307889391898, 0.17672657184137786, 0.1856669742071283, 0.22086607928776503, 0.15773670730481537, 0.15881875331032735, 0.3708639466056949, 0.401741267821223, 0.39721985683491035, 0.3989407574368514, 0.4048131607728611, 0.4006255301772348, 0.4488366702863201, 0.422156829462659, 0.43849803869383897, 0.29605169960103217, 0.3346822479697765, 0.29245126575916547, 0.30398242696496636, 0.3002368804647736, 0.26764444064761095, 0.2851363067411732, 0.30479056288763196, 0.2925767260369626, 0.191022332578212, 0.18856866958741325, 0.20204316126775634, 0.1913009845507807, 0.1992025171720394, 0.19831322562738518, 0.19628504046802364, 0.18124392699843606, 0.20859005396456964, 0.20196639349012502, 0.2947093558112098, 0.18299093294777735, 0.27254513211738096, 0.22827758386533337, 0.43689684829103115, 0.19500555993396484, 0.22637976011635086, 0.20356625974324638, 0.1837481125488547, 0.19126606826939574, 0.7593435852040579, 0.7584259772244419, 0.8092762333418336, 0.19215938791110265, 0.1918941847101574, 0.7233514545959636, 0.7258322149913277, 0.7264851809771613, 0.20763154867615652, 0.1675952535640829, 0.7286095727271225, 0.20037658914211953, 0.20484955685621142, 0.21299096858099076, 0.2094223832636929, 0.732890445833638, 0.18848572892848747, 0.19257708093020764, 0.20145798282733818, 0.1777304356781062, 0.1922575913815262, 0.19163093954588184, 0.17508896985913758, 0.18799408786272265, 0.1881342758449257, 0.07736116196072729, 0.08441990076665518, 0.08370469265022185, 0.08209451631389897, 0.08874921260668744, 0.07858614420349441, 0.08921104431231397, 0.08586024919280322, 0.07162077758270313]}, "mutation_prompt": null}
{"id": "fdb009f1-0e8e-44b5-8a92-377d4aed3cf1", "solution": "import numpy as np\n\nclass AdvancedHybridDEPSAV1:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted population size for diversity\n        self.prob_crossover = 0.85  # Tuned crossover probability for exploration and exploitation balance\n        self.F = 0.9  # Modified differential weight for robust mutation\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Increased initial temperature for broader exploration\n        self.cooling_rate = 0.85  # Adjusted cooling rate for gradual cooling\n        self.diversity_factor = 0.25  # Enhanced diversity factor for better population diversification\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Gradual cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "AdvancedHybridDEPSAV1", "description": "An advanced hybrid approach integrating Adaptive Differential Evolution with Probabilistic Simulated Annealing and Enhanced Diversity Mechanisms for superior convergence and adaptability.", "configspace": "", "generation": 71, "fitness": 0.3266315145029633, "feedback": "The algorithm AdvancedHybridDEPSAV1 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7538272897603184, 0.7206061945977777, 0.7423559173391134, 0.7543887370277551, 0.7259675126605731, 0.7710235666878935, 0.761639980137577, 0.7692162873835496, 0.7699276474914925, 0.5608980841884952, 0.6001819090268314, 0.6124938702211496, 0.5526300568065219, 0.5343267750398266, 0.6010154981053311, 0.6166020208089595, 0.5948265995749757, 0.6226477735732204, 0.17357640951469078, 0.14478395244422881, 0.14100733343229133, 0.2712697260319996, 0.1507131140330915, 0.19937643482594014, 0.25237846986240164, 0.1274552376510646, 0.2055718803016532, 0.11505877857957858, 0.11149071304318026, 0.2712683387041903, 0.12968367242314904, 0.11482747126281734, 0.15331106625696123, 0.13356309255545262, 0.14273308595966028, 0.11081344857956132, 0.9795438825006939, 0.9678465601386789, 0.9685791006592445, 0.9623630432527859, 0.987353265577548, 0.9699144616607, 0.982994389179079, 0.9813568574530226, 0.9395660435661212, 0.3895376946202428, 0.38393131005820524, 0.3695587369477593, 0.37116675850709424, 0.39772396899386664, 0.38764549686632277, 0.3932259480352662, 0.3689833399254694, 0.3785062008399728, 0.605613145282949, 0.6505255167979722, 0.5484787875117957, 0.6170734694339302, 0.6493972243650581, 0.5850015510319122, 0.6743460485608648, 0.6346570878553673, 0.5880567157755723, 0.22762275885538596, 0.28743646168197634, 0.29338791066624437, 0.2071333006759276, 0.26961990226658183, 0.23814689746261675, 0.2699707779778079, 0.2537616421873382, 0.30737907335269254, 0.2752774522996413, 0.24586240525158765, 0.12324921129462796, 0.25653674409276617, 0.2667550549721637, 0.2196024582758075, 0.2787576635732897, 0.32371946093267423, 0.31723591669688656, 0.11893227257602934, 0.18422357217482355, 0.15276797000814857, 0.18601935270939574, 0.18615931261397578, 0.12606116667923395, 0.19652705594060882, 0.1312131262627667, 0.12926259190301426, 0.2597146513730333, 0.2964453314741198, 0.28702358422378704, 0.32275070435998354, 0.2977186271823592, 0.35994958469838256, 0.3075588985177098, 0.3814949503095336, 0.2943923944814444, 0.04845672328694728, 0.05415410732947712, 0.07318931469016465, 0.050860958315645965, 0.06474321474434741, 0.11145546005118045, 0.07489653091616622, 0.04526488286793773, 0.07765593141209792, 0.1951982803794381, 0.17492252879860348, 0.21506151192615974, 0.17661300156361304, 0.2286849900582406, 0.17370299240495857, 0.1985667769271543, 0.1846968075503943, 0.1895257813946728, 0.52774688123095, 0.5446035772384414, 0.5816418491167881, 0.5582836133536215, 0.5583520803361363, 0.5687930381310684, 0.559018405059232, 0.5295710636733977, 0.5596861428555651, 0.08784809508855995, 0.08977139746052576, 0.10267638895733544, 0.08671435028216168, 0.09615620226013144, 0.10113456830361134, 0.09241010707624941, 0.09529497683415233, 0.08803838770885852, 0.24106787652686668, 0.2241879287432994, 0.19958209497564572, 0.17167177144197376, 0.16504822273720887, 0.17354733845470383, 0.2437654943726425, 0.16277786935149197, 0.18853924961443547, 0.3079227690519717, 0.3163998079045578, 0.2780718100341165, 0.3029723237572689, 0.30887633520220015, 0.32288612363638136, 0.30322338641774715, 0.3247825523188018, 0.3086392792517668, 0.21812069075863694, 0.23840997262895114, 0.21667705273861726, 0.23452982326530114, 0.2438788238699665, 0.20843624922561588, 0.23216701509731807, 0.2560213295555659, 0.2575689974936921, 0.18326503730795496, 0.17127776172570797, 0.204494675585555, 0.17649429925796545, 0.17946733131267523, 0.19007841409577353, 0.1950980234418893, 0.22147674459912536, 0.18132577985943166, 0.27339975666207816, 0.192360614129082, 0.18750609996957002, 0.19044715843679683, 0.2633818057632854, 0.28533531452740224, 0.19118316342547426, 0.41781359287169184, 0.1747950989120416, 0.7502498599413301, 0.7090958889325415, 0.7467179651448748, 0.8036580315356989, 0.18445184465426234, 0.18966923986274786, 0.18310405254019513, 0.6161565916115574, 0.4987757951572416, 0.6350578629104449, 0.20416236138781996, 0.6220913493983183, 0.6748160274479142, 0.2030017111150736, 0.2025337128040453, 0.20899128797280053, 0.2100177155442331, 0.20829514124556747, 0.20788288776592767, 0.18625010013825172, 0.1842695516736862, 0.18008355404958987, 0.19550997576157403, 0.19754105836213676, 0.18349894780916387, 0.18183944022373577, 0.20238554374820528, 0.07494429272763459, 0.0703561648058163, 0.07576189536667133, 0.0672173551717582, 0.07783667653610793, 0.0670468846959078, 0.07255571093504298, 0.07955418680707449, 0.07658789566574509]}, "mutation_prompt": null}
{"id": "089f84f8-6e03-4180-99d0-ec6bcff3a17b", "solution": "import numpy as np\n\nclass NovelHybridDEGSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Adjusted population size for better adaptivity\n        self.prob_crossover = 0.85  # Slightly reduced crossover probability for stability\n        self.F = 0.9  # Increased differential weight for stronger exploration\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for broader exploration\n        self.cooling_rate = 0.95  # Geometric cooling rate for more gradual cooling\n        self.diversity_factor = 0.3  # Enhanced diversity factor for robust exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Apply geometric cooling\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "NovelHybridDEGSA", "description": "A novel hybrid approach combining Adaptive Differential Evolution with Geometric Cooling and Stochastic Diversity Enhancement for balanced exploration and exploitation.", "configspace": "", "generation": 72, "fitness": 0.29977986441086085, "feedback": "The algorithm NovelHybridDEGSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7357882597806484, 0.7018870106538071, 0.7141117327769795, 0.7541496125145077, 0.7334319896493533, 0.7128644815756937, 0.6975498033659049, 0.7328616406750068, 0.7028029854974114, 0.5370681545762176, 0.5337663502631667, 0.5221002559885433, 0.5097902981995185, 0.49926938991306713, 0.5509844225623484, 0.5196993965692086, 0.5394200032735662, 0.5000841999059962, 0.12591432735620744, 0.1453623885694798, 0.1797690129921915, 0.13447097633471095, 0.12385326034372923, 0.1848833906884585, 0.1354709741355007, 0.14579054812896775, 0.16009244498048214, 0.11842167816536497, 0.1245525106643256, 0.12998053541661103, 0.1328896067001487, 0.11037225362073588, 0.11948021864757996, 0.11108044442098886, 0.11042399710515949, 0.12370413205411879, 0.9729999161394549, 0.9580116682323649, 0.9860769475079704, 0.9584474127957171, 0.9673444089739879, 0.9630401375774169, 0.9898251902254442, 0.9780380083748811, 0.967684367165548, 0.3554064525726217, 0.35839831081803475, 0.36803837592179167, 0.330700426641529, 0.34065496777229765, 0.36753867183200606, 0.3944607231581645, 0.3668010328244271, 0.3286221008502608, 0.48631908795676837, 0.39521620080912645, 0.6260716448359178, 0.5791549534968896, 0.5727528846055499, 0.6109086114807718, 0.49134349877527284, 0.6151769269250411, 0.6780313384145196, 0.23386083263138757, 0.23622818025863712, 0.23261447914915556, 0.2564311145875946, 0.23958835025958547, 0.2576967633080457, 0.2284499970870404, 0.2646846403421822, 0.22021550249769273, 0.23043537304149053, 0.2697529604764032, 0.2356479748558692, 0.27121871604694137, 0.23992420092857947, 0.28311468999949096, 0.23690723729080665, 0.21686162044843849, 0.3038096514782316, 0.1405893303193796, 0.13279547303621353, 0.13745171676996326, 0.10430155452437884, 0.11468619464533181, 0.12628002070806965, 0.12781729099286965, 0.13357285137472386, 0.10370266695768693, 0.20795044142040964, 0.2613570454438039, 0.28102868467012654, 0.26677875713872046, 0.23209197112837388, 0.2098287123751007, 0.29266483503048546, 0.3291795868505021, 0.2822859117619877, 0.027681861239939654, 0.04562436478301135, 0.03739930867141705, 0.09455897885110731, 0.03407708185397129, 0.07204670327418661, 0.0801006174435519, 0.03152424598391734, 0.04989573090427912, 0.15098436262638282, 0.15897961142479144, 0.15997039874543484, 0.17950911988628593, 0.181461560247282, 0.19615350982434998, 0.17356973200758818, 0.16999809445109726, 0.1521394238399183, 0.5622964886859609, 0.4984989769927034, 0.5590774838376855, 0.49328078707638323, 0.47763870593329794, 0.5382432394011605, 0.5343237247373334, 0.5165810506727657, 0.4974318236457683, 0.0974505507260276, 0.08964940236229613, 0.08726882266392333, 0.098448879854097, 0.08571649850483354, 0.09847579307890264, 0.08229497828102417, 0.09372394712314358, 0.09844607082628609, 0.1708568807148153, 0.18670550233433747, 0.265382303925238, 0.1484529078708554, 0.1710562952543696, 0.19997750034358397, 0.19138402066553617, 0.20049106677884743, 0.16049505355354288, 0.276123830133975, 0.3119443263661583, 0.2988633585727417, 0.3080744316213673, 0.3089455062419607, 0.28359944301526363, 0.3221936110549345, 0.33015457621794797, 0.29118464981333136, 0.21424352765093668, 0.2218180053798079, 0.20946661911131348, 0.23184474564126845, 0.23453383022132002, 0.20457208756386613, 0.22530888655829917, 0.23642335524936275, 0.2205914915757642, 0.17402581790667504, 0.2028514797411154, 0.18451274919106853, 0.17953378394610064, 0.1748037484493663, 0.184431026235097, 0.17714579128892716, 0.18931945449890775, 0.20174017307989967, 0.19307518456154826, 0.20196436431295284, 0.19241944117815324, 0.18242850239107, 0.24096873616597358, 0.20149933515723928, 0.1790351671297833, 0.19048573659013823, 0.192131160692398, 0.7361882163286106, 0.6498625338143598, 0.5948930052402519, 0.1832274667450705, 0.7229287407665572, 0.17402560859147742, 0.17043696798529473, 0.18493709147660942, 0.17285739318580728, 0.6911712989636672, 0.20443954989002178, 0.19866717069209994, 0.4938695592854817, 0.2050351442641577, 0.16155515824986633, 0.2105781895613552, 0.20659507585695303, 0.6080281918042025, 0.19023309239666109, 0.177645010746188, 0.18444067692944754, 0.17513475064841932, 0.17927996509467614, 0.17694856201907183, 0.18187813971999112, 0.17470704894467126, 0.1846941437979569, 0.07291205768491504, 0.06215740680347226, 0.06812726129461111, 0.08276451565721232, 0.06309256212888392, 0.06701001051948174, 0.07058397951696549, 0.07419172633594351, 0.0627597588110741]}, "mutation_prompt": null}
{"id": "1c3083ad-bcb0-4e76-a984-586d89f1bb19", "solution": "import numpy as np\n\nclass EnhancedHybridDEASALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.5 * dim)  # Adjusted population size for improved exploration\n        self.prob_crossover = 0.85  # Fine-tuned crossover probability\n        self.F = 0.7  # Adaptive differential weight for better exploration-exploitation balance\n        self.current_evaluations = 0\n        self.temperature = 1.2  # Optimized initial temperature\n        self.cooling_rate = 0.95  # Enhanced cooling rate for more gradual annealing\n        self.diversity_factor = 0.25  # Fine-tuned diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n                    mutant = population[i] + perturbation * (self.upper_bound - self.lower_bound)\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Gradual cooling rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASALS", "description": "An enhanced hybrid algorithm integrating Differential Evolution with Adaptive Dynamic Simulated Annealing and Local Search for superior convergence and robustness.", "configspace": "", "generation": 73, "fitness": 0.40083111714046177, "feedback": "The algorithm EnhancedHybridDEASALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.26.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.822982974439346, 0.8409339712811814, 0.8345439845535303, 0.8480159533857521, 0.8430059363881912, 0.8443229918523747, 0.8375594501585875, 0.8587593442434224, 0.8361838334276415, 0.7229670457188452, 0.7150183495717791, 0.7098938735407448, 0.7216443284241111, 0.7316095102506914, 0.7101832888604492, 0.7152484435021306, 0.7236523006554667, 0.7421168922346528, 0.11047972690897945, 0.1528238220661855, 0.15364247271989084, 0.1255328578827022, 0.15506456027944604, 0.12751534184966584, 0.12348220610023442, 0.11781395174566045, 0.14183108823770074, 0.11604497628618815, 0.13334270216784805, 0.1017041832311103, 0.14850961408183616, 0.11790871331030628, 0.13430187967734597, 0.11540633231439656, 0.12607856152633212, 0.11823657870955229, 0.9691816825574142, 0.96254221217028, 0.9675437152937447, 0.9569144971975113, 0.941637443433909, 0.9464550438990228, 0.9686483304211253, 0.9375567780637235, 0.959476277269437, 0.6225581042658188, 0.5398428892267657, 0.5274347523174767, 0.5780124584538651, 0.5857405288117292, 0.5771965181938002, 0.6085646095356918, 0.5944193900468531, 0.5525897898778948, 0.7449171820190823, 0.7923104762744123, 0.8484643840849736, 0.8016903525253772, 0.7936439384617565, 0.7790486832299681, 0.7850438141645748, 0.786945650227183, 0.7902557409658181, 0.4007089610769585, 0.4507215208882297, 0.30575875141287223, 0.38940744147318906, 0.12871474780783743, 0.3661560420966208, 0.3402667872370648, 0.39960316706685406, 0.2617129827018073, 0.4814966717637471, 0.3549821857788025, 0.45276204390080543, 0.3531275837083433, 0.4126388542919791, 0.5052461245407236, 0.40320438393473423, 0.31341142050537363, 0.25546524860055975, 0.2937078529896322, 0.3383366795668691, 0.3798495511877169, 0.35518738818836815, 0.37061936724933997, 0.3699967125392678, 0.39266245514306464, 0.2942346888656675, 0.31046656325721267, 0.5005706911419845, 0.4427472237859662, 0.47931749478751384, 0.5146971888002937, 0.4995588455576824, 0.5192768022764351, 0.5407694335213185, 0.5238329184309136, 0.5876571580052459, 0.1965556500216845, 0.09139347680995102, 0.11724859360839324, 0.2927492177233285, 0.22242458689584754, 0.2843889639793492, 0.15321207063425224, 0.15599493178515333, 0.15013807587838368, 0.3143382142439711, 0.3234426900273144, 0.300473507222242, 0.3273228252103382, 0.33490285198071723, 0.32762892925164444, 0.33434448804103156, 0.3026991414605704, 0.3235346501734301, 0.7171713563166628, 0.7292954821144362, 0.7565797236318784, 0.7117618236463592, 0.720753870867613, 0.7345259673814446, 0.7364031717282296, 0.7126497602039198, 0.7282683913760113, 0.09774085802326626, 0.12410645718632873, 0.0868594629288415, 0.08918681406864093, 0.10804399953758292, 0.11166898237957956, 0.09631273072527025, 0.09911145990779824, 0.09573182551845183, 0.1639983645703924, 0.23543753349796337, 0.2885401117820704, 0.2116599140257197, 0.2028940685916808, 0.15325868057688208, 0.1535177282562632, 0.1663492665654439, 0.18209485744172793, 0.3949625446715773, 0.3977635269386014, 0.37910879287415433, 0.4194042964703988, 0.41831615846333425, 0.4234838615631248, 0.434009553575059, 0.4754522481116359, 0.46393494764217535, 0.2989295800462156, 0.28654503566118317, 0.2886935193861331, 0.2889219979993468, 0.3136815007270146, 0.296637374370592, 0.3488387274135417, 0.33685728959217154, 0.35552053065047107, 0.19585280937832406, 0.21911312528983062, 0.17609524666382115, 0.1864190502567119, 0.18416543383820982, 0.23780023609829815, 0.19890679035030834, 0.18542476545829856, 0.21975097079764583, 0.23281320700018338, 0.3418661542823733, 0.5336202793528032, 0.23778587390329686, 0.18367488549021005, 0.3545675866192308, 0.25753869133384133, 0.5817705371210877, 0.18238330656266022, 0.7765688946926962, 0.7601729604885952, 0.16974148253709842, 0.8052919504304701, 0.193140193459163, 0.7925165424848877, 0.20470643031575897, 0.7192647589889195, 0.6186319343962252, 0.2044512090221421, 0.2057155964778894, 0.15247807001668756, 0.20519775940969398, 0.6323655041135332, 0.5204788354039378, 0.21060305739233875, 0.15479548080519523, 0.20930142651089656, 0.19033026671491027, 0.18049213986742474, 0.17656245790330394, 0.18532868090162902, 0.17877759567639329, 0.1850813400089235, 0.1885597184867499, 0.18544845550818068, 0.18621090058637746, 0.07384380849506633, 0.10518777408209312, 0.07583313196063413, 0.07301622816154774, 0.07437928612589018, 0.07647452748433003, 0.07686442354029988, 0.07281930741627618, 0.07569199006718386]}, "mutation_prompt": null}
{"id": "06e7d4db-4bdf-448d-b4e1-3798e88a393f", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted for size balance\n        self.prob_crossover = 0.85  # Slightly reduced to maintain exploration\n        self.F = 0.9  # Increased differential weight for better exploitation\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Increased initial temperature for wider exploration\n        self.cooling_rate = 0.95  # Softer cooling rate for gradual annealing\n        self.diversity_factor = 0.3  # Further increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Smooth cooling adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm blending Adaptive Differential Evolution with Dynamic Simulated Annealing and Increased Diversity Control for superior exploration and convergence.", "configspace": "", "generation": 74, "fitness": 0.3159323439979921, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7560936238326957, 0.7586446019717663, 0.7406365272336954, 0.7607431310858235, 0.734872094623765, 0.7670466426155462, 0.7330996883469787, 0.7363318648680588, 0.7314111587011631, 0.5771351466919611, 0.4789094040562283, 0.5164850247916981, 0.5413365178026244, 0.5534127087475862, 0.5715197447559823, 0.5614382140025371, 0.566509926210407, 0.567892475864956, 0.1846230894059938, 0.12475414880744118, 0.1284170827258969, 0.15359469132748327, 0.12516495983909504, 0.15017889814632868, 0.22173529848061002, 0.17987912253709037, 0.1561225169069157, 0.10157554326075535, 0.12146528054978467, 0.13698695814766704, 0.126788086299096, 0.12821606492926096, 0.12294786270428026, 0.11974390440864613, 0.10450990259357096, 0.11307492970186572, 0.9747258694685155, 0.9587691081854177, 0.9677914743364282, 0.9657502539765583, 0.9841094402381309, 0.9774461145358844, 0.9847781748825973, 0.987779391123929, 0.9572651011111962, 0.39857846804886243, 0.37055271788827804, 0.40031602736515814, 0.34783725564034285, 0.354453129216346, 0.33946547838403207, 0.39307886935368097, 0.35026603411857626, 0.3987052475421483, 0.5247278206516549, 0.45969102360950964, 0.5952904145696603, 0.5657320557174601, 0.6661753656105037, 0.6473105961539007, 0.5938989995179077, 0.6095774907407296, 0.6213801614479095, 0.2558508939711497, 0.3303660126324187, 0.26458232067847176, 0.216553721985843, 0.25826049665650885, 0.2709832729127388, 0.21416453187541395, 0.23944061094838653, 0.2826365780924821, 0.29665230403606624, 0.27798894275038033, 0.25787083191191096, 0.2951609972550897, 0.25271636989779167, 0.24199421795211373, 0.2916832933619308, 0.2638729662113929, 0.2786251533722901, 0.21151296331823355, 0.10553614420699486, 0.14834383558977227, 0.15699546422344468, 0.10749609401816018, 0.11859011201744996, 0.12819051876519938, 0.17315443467085168, 0.11538472117361054, 0.3430703879056325, 0.24435691863108044, 0.28601400730229964, 0.2592085085127006, 0.3107963107588211, 0.2554071714078353, 0.3011042390650973, 0.32727858830756773, 0.29715836818198593, 0.040156650313129094, 0.05744808668462087, 0.06136309216789926, 0.05426660195873867, 0.11309964238784231, 0.06135774755385992, 0.017807552718563935, 0.06224844734440527, 0.032574079149406465, 0.15592836060160553, 0.17323161548132682, 0.16827642277116084, 0.17224752962461676, 0.17902258523553993, 0.20594585931220677, 0.18702191095050058, 0.16048352650586695, 0.18201007877338848, 0.5064609029368083, 0.5479557279794472, 0.5495493705748207, 0.5154901504105376, 0.5143766488536679, 0.5469498673346164, 0.5554007338081122, 0.5269025481872156, 0.5125726874041221, 0.08125507861623393, 0.08693551857939019, 0.11763558707541866, 0.10314428894129268, 0.09803031081889879, 0.1160528247988355, 0.09760265871321938, 0.0997090357188607, 0.0862042730030751, 0.20436033017783806, 0.15692805582548752, 0.16994327258943553, 0.17870607944826733, 0.1396012337971897, 0.1911556701989754, 0.20266258780314428, 0.16734008171480874, 0.14778571413184505, 0.2737142972551011, 0.299208876769681, 0.2955761578163719, 0.3155557256318159, 0.29551404019715377, 0.26251681653411085, 0.35451659884844333, 0.30559485792684227, 0.31934724734531605, 0.2530287746475701, 0.22461442155282185, 0.20559313756407727, 0.25727657538133386, 0.20401628866976385, 0.19624223379090633, 0.2158276082227918, 0.2647010665732705, 0.23810091532579503, 0.18403347960297356, 0.19776419170500448, 0.19328944541986726, 0.19247034462144297, 0.19624464232356942, 0.19354154645638988, 0.1885486192189143, 0.1784754278032067, 0.19895376385946006, 0.19863704592077602, 0.2697842244050719, 0.18059101489530016, 0.17353458480421502, 0.19304037684692443, 0.19615857473580922, 0.1847176691697997, 0.20951833778162177, 0.1810130108274196, 0.7384877482921082, 0.19621454608117916, 0.791012398918177, 0.710410681353186, 0.7091350448532152, 0.6928414921802987, 0.1830728383173411, 0.1847173265649774, 0.1634904122404367, 0.621204442763175, 0.2035982303000089, 0.6534229641680556, 0.45002661705194114, 0.19910372432469226, 0.4692434411437221, 0.21211970996059604, 0.16555612864102454, 0.707989913355785, 0.18125445129074302, 0.17614869895275787, 0.18845699716561137, 0.1887742852690515, 0.1962656386209376, 0.18617192762157442, 0.17797056509777287, 0.19923546219693267, 0.19312092305530637, 0.0743089914854691, 0.08782732470377319, 0.07405324582564898, 0.07056815783484949, 0.0761106992217212, 0.06759521766450594, 0.07194164365054423, 0.08278272192655545, 0.07293749707574848]}, "mutation_prompt": null}
{"id": "c5eb7281-e962-4af6-98e8-e58762ff7e4c", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Slightly increased population size for diversity\n        self.prob_crossover = 0.85  # Adjusted crossover probability for balance\n        self.F = 0.9  # Enhanced differential weight for better exploration\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Increased initial temperature for better exploration\n        self.cooling_rate = 0.92  # Slightly slower cooling for sustained exploration\n        self.diversity_factor = 0.3  # Further increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                if np.random.rand() < 0.5:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                else:\n                    mutant = population[a] + self.F * (best_solution - population[i])  # Selective mutation strategy\n\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm combining Adaptive Differential Evolution, Dynamic Simulated Annealing, and Diversity Enhancement with improved population dynamics and selective mutation strategy for robust optimization.", "configspace": "", "generation": 75, "fitness": 0.30535355559789273, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7352802416455706, 0.7328297162174179, 0.7132831226126912, 0.7638434380630352, 0.7449676031232125, 0.7362488689262017, 0.7215726720636275, 0.7404098489646094, 0.7173657490374967, 0.48559742048616095, 0.48084208304057563, 0.5063769848685463, 0.468254290517622, 0.48292924452169717, 0.4592655504984313, 0.5396278426386654, 0.5383338176576467, 0.5066964969771615, 0.15062443915031676, 0.12155503860624362, 0.12008001269545365, 0.12217794776444846, 0.12106689917281199, 0.12385271327271752, 0.12785625549731072, 0.13710304160635223, 0.1712544235199117, 0.10569811984207167, 0.12759031640384177, 0.10112971136669258, 0.12118633497535924, 0.09789890829050296, 0.12118959053723266, 0.1106458076753668, 0.1314189391449423, 0.12961415119857178, 0.9825970865271001, 0.9868014911188706, 0.9915756791151734, 0.9873389479842642, 0.990648461352654, 0.9781760688737776, 0.9908652728348842, 0.9906337859412185, 0.9776267546533628, 0.2884511175368214, 0.35567474047956416, 0.3113415081152463, 0.33221122848371476, 0.3424606701416223, 0.32791774228022796, 0.3227785379954785, 0.3619657547826268, 0.38084060074914383, 0.612419023155932, 0.6403073702537881, 0.5617856450610279, 0.6004906240089569, 0.5053653487206925, 0.5229094158337746, 0.6549956791733857, 0.6601515409054673, 0.5819701203724779, 0.22458525964597364, 0.24772921511001522, 0.274538877830501, 0.26949239104739653, 0.273718193626031, 0.28778398738582933, 0.28575423333161576, 0.23762732924448393, 0.28041818790508166, 0.28086693959670705, 0.3024635290025719, 0.2155143346756212, 0.2905761566377306, 0.20779234424779047, 0.27267602395847457, 0.29927055709195394, 0.24241471939274517, 0.25842578564797747, 0.13388788583215117, 0.11635550206522405, 0.0926922902046825, 0.16080508417985806, 0.1402566673833855, 0.12971679410600478, 0.1485850469625526, 0.16293836711626286, 0.07586987148803925, 0.24667739992827042, 0.30747229274920773, 0.28857589914218407, 0.21719113439128912, 0.22846441886214852, 0.3042739403264655, 0.28912743133388996, 0.29270795206482103, 0.3112528479811605, 0.018233632637380648, 0.04176024687409208, 0.01788555319004803, 0.05785284230363252, 0.07697319147831927, 0.05082040021464129, 0.05143377496483914, 0.043248401071208864, 0.015780617906910988, 0.19423528092509856, 0.1703078194978378, 0.16904734165134327, 0.1770127546645992, 0.19313670043427922, 0.19819293997669152, 0.1819612006612742, 0.183572541533915, 0.20818288266718776, 0.5527930632558711, 0.500875786267132, 0.5292451548841746, 0.5131169562037227, 0.5138840301613627, 0.5576697740395571, 0.5294254867272497, 0.526933359677991, 0.5125266003052997, 0.09499150026863956, 0.10172642877180949, 0.09582669793931309, 0.07716785533966919, 0.08408501066264795, 0.0922502769308512, 0.07046234178686295, 0.09028274895621091, 0.0946841807895289, 0.15610581312286997, 0.2055854108798585, 0.19446858373568499, 0.17011089822964254, 0.17385778678006625, 0.17093676726750417, 0.17758511345937, 0.15178956999990145, 0.17792131010229495, 0.27954559343536634, 0.3088284177775886, 0.28601029401820366, 0.2711912142971058, 0.27883385267337757, 0.29877800273191324, 0.29495107727454706, 0.3184537863785698, 0.3084116824346742, 0.22175688567008334, 0.21275986949216696, 0.1978881864293507, 0.19078439136571224, 0.20839583542852047, 0.23014558682024333, 0.23072728072273263, 0.25032605690666665, 0.19631692630149866, 0.17815327909774425, 0.1840834883167135, 0.18013995919237036, 0.19687611287105644, 0.17716216716766153, 0.1867042248595283, 0.18457687243850163, 0.18561224763174822, 0.1847939421872694, 0.20462181846064698, 0.18466535365693815, 0.18685295569241667, 0.1943541573309855, 0.20429106914070438, 0.18011443636110502, 0.1878434398190607, 0.1809352179424556, 0.18865715319531695, 0.7252140465223906, 0.7055286083002743, 0.1534726037671399, 0.6604049999262676, 0.19234409644379213, 0.6288385122909053, 0.1843977502933387, 0.46947960584432413, 0.5927939541291841, 0.5634408097966541, 0.20435563621026342, 0.16306126144455924, 0.19823940771909743, 0.47932661127060405, 0.4907250862640118, 0.7085046139652862, 0.20904851676993252, 0.1493516081603815, 0.18234192263320537, 0.20990074416237425, 0.17446902111740803, 0.18206981025995395, 0.21041299415670922, 0.19250268219721478, 0.18785492335473164, 0.18818593990107912, 0.19085671883480793, 0.07221041270971706, 0.07137003976097855, 0.06851057149931461, 0.08103192332478937, 0.08131457744818704, 0.0676670579779386, 0.06618718127526313, 0.08361600842989103, 0.09238153573604757]}, "mutation_prompt": null}
{"id": "c20348aa-2b4a-43d7-9794-9c84fade7175", "solution": "import numpy as np\n\nclass StochasticHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.3 * dim)  # Slightly increased population size for more exploration\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.9  # Increased differential weight for diversification\n        self.current_evaluations = 0\n        self.temperature = 1.0  # Lower initial temperature for better local search\n        self.cooling_rate = 0.95  # Modified cooling rate for gradual annealing\n        self.diversity_factor = 0.4  # Enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.normal(size=self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "StochasticHybridDEASAV5", "description": "A novel hybrid algorithm leveraging Adaptive Differential Evolution, Dynamic Simulated Annealing, and enhanced Diversity with a stochastic strategy for refined exploration and convergence.", "configspace": "", "generation": 76, "fitness": 0.30411976616569053, "feedback": "The algorithm StochasticHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7232435115315177, 0.7118983558489504, 0.7425423713784951, 0.7100286216568845, 0.7349122278020502, 0.7175884631411664, 0.6969483174877946, 0.6919659840340588, 0.7431199831966004, 0.523859196225889, 0.5071356903610695, 0.47346745053779304, 0.5062797556592391, 0.4688654134322705, 0.48369963044202147, 0.4781954049792875, 0.46918393029379823, 0.5178994746933889, 0.18171709890080068, 0.1315549141223974, 0.14387101875578356, 0.15297889332770498, 0.14431336861472888, 0.10476034379691268, 0.26763424338258934, 0.16180392408397015, 0.16701529345104427, 0.12036749558823889, 0.11454171775460387, 0.12009278209230012, 0.12693594920691031, 0.12865821971803182, 0.10411273249652808, 0.11999299436128463, 0.1297359175036329, 0.11481882937261367, 0.9520512377842338, 0.974318039118824, 0.977581192592268, 0.9541359265142303, 0.9751390829578005, 0.9472200748680162, 0.9718545484423553, 0.9762423068611851, 0.9613626555643008, 0.30992651432347074, 0.3438216126045236, 0.3511881981239737, 0.36101904671090634, 0.381124584408982, 0.33026570556020063, 0.3473600597542209, 0.36357332449153124, 0.40875365097750016, 0.4897056690542021, 0.5593716476400653, 0.5541598153994963, 0.5438038715434907, 0.5725966625139907, 0.5847328548011945, 0.42458156958238247, 0.6069776167885436, 0.5698682920844056, 0.23285912960181976, 0.25754959014724377, 0.23891394633653595, 0.27700872435000023, 0.25976090913730177, 0.19482310815855253, 0.24017609407498652, 0.21837428728000308, 0.22505371588836964, 0.26073573825676344, 0.2369961836454746, 0.21904914068995995, 0.2293186352470441, 0.2556442224834157, 0.2160801261070946, 0.21084887280361841, 0.1985634751018197, 0.24297338150122005, 0.12600196181089962, 0.1312334148377895, 0.13981375918563121, 0.13603620914166403, 0.09646451291638392, 0.10980352677079175, 0.1214541176805467, 0.13812526894813015, 0.10610765745260209, 0.24317229476312008, 0.216428406385473, 0.2784599880434099, 0.2936856526312631, 0.25227093526724853, 0.24382163623980635, 0.27773302925393695, 0.2729012611599544, 0.26651309249762567, 0.04046144368674287, 0.021370166168804494, 0.026436709008967996, 0.09606744963771363, 0.05695396816814935, 0.02215338772994402, 0.06040913946470905, 0.063645433811096, 0.028088912088167106, 0.17398461769966111, 0.17344630956333618, 0.14637112375410666, 0.18112667357609236, 0.17680430071980535, 0.13796532665072248, 0.2021589804573427, 0.1524397565161767, 0.1548280165352075, 0.5368280516837904, 0.5229413858651031, 0.5267184203979416, 0.5207676228551911, 0.48158479990570346, 0.4965107710057719, 0.5046252991261289, 0.527711706649253, 0.5046492421388242, 0.08885527807170435, 0.09695944989107297, 0.0881861162842078, 0.08905227246989567, 0.07610306616781459, 0.1201916698030644, 0.1123295727811443, 0.1050720895486087, 0.07929076580523464, 0.16324886894072843, 0.16823541867969038, 0.17158774729097492, 0.17780683102082007, 0.14473956308393898, 0.15169374529227264, 0.16617456048310741, 0.2160280732874612, 0.2178661055415395, 0.30033417938139084, 0.29014365428601674, 0.313971678337019, 0.2724792605303785, 0.3047565757424824, 0.30421274479795857, 0.308468702157505, 0.32320356319286236, 0.31028188854166805, 0.22731320822543888, 0.22029930415881904, 0.2169036860044301, 0.2024332398295906, 0.2219830827031447, 0.20751152942060525, 0.22079302058187322, 0.23012742609741588, 0.20051450167421825, 0.1942987937588242, 0.19221739112303815, 0.19003906555060035, 0.17942504773384194, 0.21067808701345725, 0.20124339765052046, 0.19433091364665112, 0.19326405754361387, 0.20182720052060676, 0.18655556766208647, 0.22499752268745488, 0.18740498601222721, 0.1818271531443978, 0.25573062897199295, 0.20718703615210643, 0.20484745853649788, 0.19892341834144944, 0.1875922500019741, 0.18299248924626332, 0.6204023259707605, 0.7400375486921662, 0.1834719882168685, 0.7331789641627671, 0.6225388908217476, 0.40846300241895184, 0.6171948597022633, 0.5351314640390408, 0.625644722830276, 0.59801486197537, 0.16519665695748476, 0.6211752235482111, 0.20161676841488185, 0.19943379080619716, 0.20843087065553823, 0.7010714700696685, 0.2100633523158233, 0.17744293237997955, 0.1887225938363497, 0.2089171826166919, 0.1944571932862138, 0.1842048251735503, 0.19272697303736808, 0.18851519669995997, 0.1886241794406065, 0.1864862151632558, 0.07369916563170242, 0.06903835818322912, 0.07228579127174084, 0.07427861899088861, 0.08022203141959983, 0.08217564019327606, 0.07128208265814862, 0.07670327255920328, 0.07420527128507182]}, "mutation_prompt": null}
{"id": "eaa26b5a-acc0-4564-98be-cf1c105de80f", "solution": "import numpy as np\n\nclass EnhancedHybridDEANSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Slightly larger population size for diversity\n        self.prob_crossover = 0.85  # Adjusted crossover rate for exploration-exploitation balance\n        self.F = 0.9  # Increased differential weight for stronger mutation\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for broader exploration\n        self.cooling_rate = 0.95  # Gradual cooling for sustained exploration\n        self.diversity_factor = 0.3  # Increased diversity factor for exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Gradual cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEANSA", "description": "A novel hybrid algorithm incorporating adaptive differential evolution with dynamic simulated annealing and neighborhood exploration for enhanced convergence and adaptability.", "configspace": "", "generation": 77, "fitness": 0.29977986441086085, "feedback": "The algorithm EnhancedHybridDEANSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7357882597806484, 0.7018870106538071, 0.7141117327769795, 0.7541496125145077, 0.7334319896493533, 0.7128644815756937, 0.6975498033659049, 0.7328616406750068, 0.7028029854974114, 0.5370681545762176, 0.5337663502631667, 0.5221002559885433, 0.5097902981995185, 0.49926938991306713, 0.5509844225623484, 0.5196993965692086, 0.5394200032735662, 0.5000841999059962, 0.12591432735620744, 0.1453623885694798, 0.1797690129921915, 0.13447097633471095, 0.12385326034372923, 0.1848833906884585, 0.1354709741355007, 0.14579054812896775, 0.16009244498048214, 0.11842167816536497, 0.1245525106643256, 0.12998053541661103, 0.1328896067001487, 0.11037225362073588, 0.11948021864757996, 0.11108044442098886, 0.11042399710515949, 0.12370413205411879, 0.9729999161394549, 0.9580116682323649, 0.9860769475079704, 0.9584474127957171, 0.9673444089739879, 0.9630401375774169, 0.9898251902254442, 0.9780380083748811, 0.967684367165548, 0.3554064525726217, 0.35839831081803475, 0.36803837592179167, 0.330700426641529, 0.34065496777229765, 0.36753867183200606, 0.3944607231581645, 0.3668010328244271, 0.3286221008502608, 0.48631908795676837, 0.39521620080912645, 0.6260716448359178, 0.5791549534968896, 0.5727528846055499, 0.6109086114807718, 0.49134349877527284, 0.6151769269250411, 0.6780313384145196, 0.23386083263138757, 0.23622818025863712, 0.23261447914915556, 0.2564311145875946, 0.23958835025958547, 0.2576967633080457, 0.2284499970870404, 0.2646846403421822, 0.22021550249769273, 0.23043537304149053, 0.2697529604764032, 0.2356479748558692, 0.27121871604694137, 0.23992420092857947, 0.28311468999949096, 0.23690723729080665, 0.21686162044843849, 0.3038096514782316, 0.1405893303193796, 0.13279547303621353, 0.13745171676996326, 0.10430155452437884, 0.11468619464533181, 0.12628002070806965, 0.12781729099286965, 0.13357285137472386, 0.10370266695768693, 0.20795044142040964, 0.2613570454438039, 0.28102868467012654, 0.26677875713872046, 0.23209197112837388, 0.2098287123751007, 0.29266483503048546, 0.3291795868505021, 0.2822859117619877, 0.027681861239939654, 0.04562436478301135, 0.03739930867141705, 0.09455897885110731, 0.03407708185397129, 0.07204670327418661, 0.0801006174435519, 0.03152424598391734, 0.04989573090427912, 0.15098436262638282, 0.15897961142479144, 0.15997039874543484, 0.17950911988628593, 0.181461560247282, 0.19615350982434998, 0.17356973200758818, 0.16999809445109726, 0.1521394238399183, 0.5622964886859609, 0.4984989769927034, 0.5590774838376855, 0.49328078707638323, 0.47763870593329794, 0.5382432394011605, 0.5343237247373334, 0.5165810506727657, 0.4974318236457683, 0.0974505507260276, 0.08964940236229613, 0.08726882266392333, 0.098448879854097, 0.08571649850483354, 0.09847579307890264, 0.08229497828102417, 0.09372394712314358, 0.09844607082628609, 0.1708568807148153, 0.18670550233433747, 0.265382303925238, 0.1484529078708554, 0.1710562952543696, 0.19997750034358397, 0.19138402066553617, 0.20049106677884743, 0.16049505355354288, 0.276123830133975, 0.3119443263661583, 0.2988633585727417, 0.3080744316213673, 0.3089455062419607, 0.28359944301526363, 0.3221936110549345, 0.33015457621794797, 0.29118464981333136, 0.21424352765093668, 0.2218180053798079, 0.20946661911131348, 0.23184474564126845, 0.23453383022132002, 0.20457208756386613, 0.22530888655829917, 0.23642335524936275, 0.2205914915757642, 0.17402581790667504, 0.2028514797411154, 0.18451274919106853, 0.17953378394610064, 0.1748037484493663, 0.184431026235097, 0.17714579128892716, 0.18931945449890775, 0.20174017307989967, 0.19307518456154826, 0.20196436431295284, 0.19241944117815324, 0.18242850239107, 0.24096873616597358, 0.20149933515723928, 0.1790351671297833, 0.19048573659013823, 0.192131160692398, 0.7361882163286106, 0.6498625338143598, 0.5948930052402519, 0.1832274667450705, 0.7229287407665572, 0.17402560859147742, 0.17043696798529473, 0.18493709147660942, 0.17285739318580728, 0.6911712989636672, 0.20443954989002178, 0.19866717069209994, 0.4938695592854817, 0.2050351442641577, 0.16155515824986633, 0.2105781895613552, 0.20659507585695303, 0.6080281918042025, 0.19023309239666109, 0.177645010746188, 0.18444067692944754, 0.17513475064841932, 0.17927996509467614, 0.17694856201907183, 0.18187813971999112, 0.17470704894467126, 0.1846941437979569, 0.07291205768491504, 0.06215740680347226, 0.06812726129461111, 0.08276451565721232, 0.06309256212888392, 0.06701001051948174, 0.07058397951696549, 0.07419172633594351, 0.0627597588110741]}, "mutation_prompt": null}
{"id": "228ab65f-44c2-4422-af98-dc91bd4fd2eb", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Increased population size\n        self.prob_crossover = 0.85  # Adjusted crossover probability for balance\n        self.F = 0.7  # Reduced differential weight for stability\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for broader exploration\n        self.cooling_rate = 0.95  # Slower cooling rate\n        self.diversity_factor = 0.25  # Further increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.uniform(-1, 1, self.dim)\n                    direction /= np.linalg.norm(direction) + 1e-9\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.2\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Apply cooling rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV5", "description": "An adaptive hybrid algorithm integrating Differential Evolution, Simulated Annealing, and a diversity-driven mutation strategy for enhanced search efficiency and convergence reliability.", "configspace": "", "generation": 78, "fitness": 0.39496984470370483, "feedback": "The algorithm RefinedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8314515635437889, 0.8353436059347118, 0.8395614394155031, 0.8306281123813953, 0.8442686360588569, 0.8422405322774033, 0.8520000378696708, 0.8423376577867867, 0.8291439465544619, 0.7271096037540501, 0.6955539615947699, 0.6997924754776621, 0.6948528280257551, 0.7087946178272113, 0.6963359949300421, 0.7061739244358338, 0.7010930569066043, 0.7048660715349182, 0.11047787584036772, 0.13193515113163123, 0.22199187814159183, 0.12280528224891296, 0.1126630484954132, 0.11222336425034551, 0.11920486500430472, 0.13281727972563806, 0.10801018438182386, 0.12428350787299691, 0.1089564843337465, 0.1256236919138557, 0.09800134287697582, 0.1507666019134829, 0.12014069051910614, 0.12233535604682033, 0.14830603062927916, 0.13146712389154402, 0.9702458567708689, 0.9590503723211351, 0.9511751260869238, 0.9596526286658316, 0.9513197194373532, 0.9773503335344551, 0.9642501442779722, 0.9675221729619511, 0.9645967560608771, 0.4958907356840777, 0.5459286495141207, 0.5448732857877052, 0.5673117581535462, 0.5583246035866988, 0.541598983957918, 0.5536217261031979, 0.5750052445654392, 0.5813080368524075, 0.7079363167434332, 0.7379341209639168, 0.7755612289925372, 0.7933582756390358, 0.759196169330298, 0.7935318155980741, 0.7536047898252666, 0.8050972512695261, 0.7541967616186286, 0.44048252533409515, 0.4431829465649473, 0.3961239417266246, 0.34794382041117355, 0.38532124341054974, 0.30016685505762764, 0.3923221262982667, 0.34677544809854144, 0.4040257731751069, 0.4810708388967201, 0.5744275696242818, 0.3324260259066478, 0.4376973325321736, 0.42566848597571283, 0.4265145391734618, 0.311951587713047, 0.3221457691206093, 0.4918496516274202, 0.2987914069049247, 0.29052894568804744, 0.27074076204860187, 0.4119159970898647, 0.32382701056314944, 0.32382769645114673, 0.38797750833346734, 0.3333770355054485, 0.2564037992051259, 0.5168058912677611, 0.4989959573660925, 0.3981160338851345, 0.4301718047004638, 0.4675620256739874, 0.4755723767849406, 0.5638653575168127, 0.5355726132005603, 0.5711315046975751, 0.0976860471556611, 0.21149848896845846, 0.1740253972210163, 0.1586840653825604, 0.19128809192906193, 0.15721469485860162, 0.11743124893051138, 0.14286872821361818, 0.1358042936096313, 0.30746022651209604, 0.2726185554994267, 0.285003070626459, 0.3120378181897274, 0.3125353207764383, 0.3148835742170182, 0.3132686526120182, 0.30604367571803937, 0.274146942799686, 0.703897737634352, 0.7277678832058414, 0.6957785471492244, 0.7008487440667912, 0.6855235287496322, 0.6995448900469248, 0.682803423923186, 0.6947854166989131, 0.6887913297300705, 0.11256143203967128, 0.11894917028067342, 0.0856157154937508, 0.10706728791261633, 0.0894590565879112, 0.09548236794642984, 0.10837526063388758, 0.10351258629986493, 0.08092289381392326, 0.160140096622989, 0.14619887502871332, 0.13713392439561378, 0.14064134647656834, 0.44514576656269433, 0.14701297334012564, 0.16747375134281106, 0.15925156615042757, 0.15803420998027196, 0.43795560159905167, 0.4588197526946718, 0.3965380964749817, 0.4488257937180059, 0.37578017403296526, 0.3822120628414116, 0.47519953504556645, 0.43412242860425, 0.4149134075230547, 0.29095352070056824, 0.29778756360558, 0.2756549839973129, 0.32757232953892257, 0.29123576522043615, 0.27788223656681244, 0.335726089245619, 0.33572861452488356, 0.3348794084194673, 0.20241947389063553, 0.1881099394469823, 0.19537872301830528, 0.20604515548847036, 0.19912003666834732, 0.19805805028752455, 0.2008559112481435, 0.19851335242132373, 0.20055650994454866, 0.26747711617161773, 0.27002451417986095, 0.20576556799244405, 0.19124585649781634, 0.36627763352323595, 0.3032686389979933, 0.2047676806524883, 0.3735302118877234, 0.21958707407411016, 0.5646490315628403, 0.7479157072746694, 0.7113742668608175, 0.7046212418642854, 0.7658491766181794, 0.6772023885792393, 0.6498871186171974, 0.1897738149496465, 0.6428060281230317, 0.2055578540381089, 0.2035993294434475, 0.6805804676644405, 0.1946944538958124, 0.1621098746361055, 0.207231550087686, 0.2124945125373905, 0.19958022916153773, 0.21120417014883508, 0.18179067856526676, 0.18230856860502254, 0.17929276051657872, 0.19566126793908856, 0.17175979138476738, 0.1778402429943613, 0.2047428102473986, 0.19560896876092704, 0.17819754143878475, 0.08373856363525078, 0.08518957424750517, 0.0682711490498239, 0.0755176501549677, 0.08041979505150432, 0.08006888714993643, 0.07923577613230204, 0.07404473374285936, 0.07037809688100771]}, "mutation_prompt": null}
{"id": "404c64a3-a27f-4aa3-9e06-520cf268c696", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted population size for scalability\n        self.prob_crossover = 0.85  # Balanced crossover probability\n        self.F = 0.9  # Slightly higher differential weight for exploration\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for broader search\n        self.cooling_rate = 0.95  # More gradual cooling for sustained search ability\n        self.diversity_factor = 0.25  # Enhanced diversity factor\n        self.local_search_probability = 0.3  # Probability for local search\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                \n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                if np.random.rand() < self.local_search_probability:\n                    trial = trial + np.random.normal(0, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDE_SLS", "description": "A novel strategy incorporates Adaptive Differential Evolution with a stochastic local search and enhanced adaptive mechanisms for better exploration-exploitation balance.", "configspace": "", "generation": 79, "fitness": 0.2843564956052098, "feedback": "The algorithm EnhancedHybridDE_SLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.6762496604644272, 0.6606214760911471, 0.6749655667921064, 0.7445864695441378, 0.683578396253147, 0.719079319043779, 0.6503011936762787, 0.6735049881726398, 0.7131026352142359, 0.381691401730358, 0.43872565851452683, 0.37062841215941744, 0.36451846777249586, 0.4228040977498988, 0.4282734601924286, 0.43633101273386854, 0.41970389193508617, 0.4449970420935849, 0.14230106055248037, 0.15112193331482138, 0.1369432455111691, 0.12424308119164995, 0.12805621683314772, 0.13451173613968426, 0.1255019474852357, 0.1598605692080448, 0.12409448443949134, 0.0987611979145222, 0.1104688181498108, 0.1166367936322007, 0.11079887357763452, 0.11319936401818687, 0.10901552871668097, 0.11569115458412182, 0.12417057499003492, 0.09926417865372827, 0.978980140206481, 0.9584352652033495, 0.9375680332355872, 0.9543096129483226, 0.970974941071864, 0.9717953136452685, 0.9789908895581886, 0.942173298888721, 0.964400674853575, 0.3351751478424966, 0.333029489259291, 0.34693704307995843, 0.3252709104170113, 0.33761600118862956, 0.31172098956325567, 0.3332910598022073, 0.355972848479145, 0.3848317553613817, 0.5563788098384845, 0.42672684881977074, 0.6145526789921764, 0.7149419148231286, 0.6543315702505195, 0.6094469973685235, 0.6525445957506558, 0.5568219560196321, 0.4643907978308277, 0.18132812885673788, 0.23185784721502845, 0.19512830300859774, 0.19360035373507412, 0.22107237922500245, 0.24366784207707215, 0.19883197204220038, 0.25869529252356727, 0.21822998820725348, 0.2175727138654816, 0.17738689853633383, 0.2290534953780632, 0.2638343032828592, 0.20760291355041216, 0.2425202963929144, 0.2236533151331206, 0.19568983226461967, 0.21069038984355282, 0.153521386093177, 0.0933827516043253, 0.07837162595575031, 0.08229706513570967, 0.1583011060814744, 0.09178304111329494, 0.07346219736760284, 0.13575417926172217, 0.11341242915206873, 0.2204538562886723, 0.22222374754379282, 0.25456768183300404, 0.23533676510184365, 0.20057560330631863, 0.1979438324610866, 0.21593070182279817, 0.17851371052788234, 0.2469019276251383, 0.040337197721434515, 0.03630897144500467, 0.04044632329173181, 0.013785803312572176, 0.051139640344029624, 0.02780398393774941, 0.04528123223533198, 0.021872343492917556, 0.03817296616748611, 0.1536772989694848, 0.15746783520862973, 0.14559840818454017, 0.16621064540714814, 0.17144891663634387, 0.14186334508293186, 0.16317389189535403, 0.17633718323281844, 0.1708555856864361, 0.4750992352514888, 0.5165231018357922, 0.512889017801921, 0.4855120616588473, 0.47593947570005235, 0.47259407882823534, 0.5265523173589282, 0.48472308647608375, 0.4898455879013388, 0.11342414668343626, 0.10136922388406511, 0.09477913714758301, 0.11283309563574895, 0.08412729183448153, 0.09497653885069668, 0.093934865836242, 0.09501117167279938, 0.09339436947818158, 0.15238952880420797, 0.24416283898779734, 0.15314267475522525, 0.17983883739225526, 0.1552247067622613, 0.2103042615438866, 0.2570850209766763, 0.24071923442457177, 0.19506422493352504, 0.2794572613234074, 0.2783577846219104, 0.2809827819709202, 0.2603331561473978, 0.25990634807784885, 0.27381377220765657, 0.31503107485523574, 0.28621966964617296, 0.3356671846692467, 0.21565095840529624, 0.24026129602011104, 0.19229938138286784, 0.2240577690987059, 0.21947655082204587, 0.2120102495091919, 0.2248002269309899, 0.20914843639321012, 0.227994902102294, 0.1997576323514988, 0.21452829258866035, 0.2070252631893107, 0.17812156944302837, 0.17367228978375082, 0.18474731970079705, 0.2042828351442868, 0.17752917148690772, 0.18869343539312788, 0.1816549198664823, 0.17555357166219365, 0.19455616208057558, 0.2012476553178031, 0.18773893089684102, 0.17694857681630272, 0.20065733047699152, 0.1878445763987061, 0.17458688284992419, 0.178430320856917, 0.6743673972026417, 0.5172825680377713, 0.19227729552085904, 0.7192482768462836, 0.7322007797758512, 0.1829081664094966, 0.1683908565461164, 0.5385191654208773, 0.16331615401080868, 0.20465114865426592, 0.16768573243864993, 0.1980313090422584, 0.5641740251441194, 0.48958977893698563, 0.20971813929018668, 0.21401094372110196, 0.14656301044044373, 0.20977387967518413, 0.19318768089984517, 0.2001188742563892, 0.18443828148319574, 0.18028716649359378, 0.18535384870193727, 0.1822022724933805, 0.18006340026912626, 0.19266639557715148, 0.06996903176888714, 0.07716824683490853, 0.08914810905053983, 0.07548239020823222, 0.07265686289534301, 0.06955299526659531, 0.06808104972748841, 0.07433289086219086, 0.07423531490750068]}, "mutation_prompt": null}
{"id": "2e7024c4-1d07-4c66-bf88-9b52d1700afe", "solution": "import numpy as np\n\nclass QuantumHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Increased for better diversity\n        self.prob_crossover = 0.85  # Balanced crossover probability\n        self.F = 0.9  # Increased differential weight for aggressive search\n        self.current_evaluations = 0\n        self.initial_temperature = 2.0  # Slightly higher initial temperature\n        self.cooling_rate = 0.95  # Slower cooling for extended exploration\n        self.diversity_factor = 0.3  # Enhanced diversity factor\n        self.q_probability = 0.5  # Probability of applying quantum-inspired update\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        temperature = self.initial_temperature\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                if np.random.rand() < self.q_probability:\n                    quantum_step = np.random.uniform(-1, 1, self.dim) * 0.1\n                    trial += quantum_step * (self.upper_bound - self.lower_bound)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (temperature + 1e-9))\n\n                temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "QuantumHybridDEASAV5", "description": "A novel variant integrating Quantum-Inspired Differential Evolution with Adaptive Simulated Annealing for enhanced exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": 0.23026242619359913, "feedback": "The algorithm QuantumHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.5514669410964748, 0.5379299848114667, 0.48803892672319305, 0.5395238119513415, 0.5360082399616717, 0.5441884814750011, 0.5437626782298179, 0.5074775502208164, 0.49149713030515485, 0.20698517662202132, 0.22041495612928086, 0.21818512975952908, 0.26527956082661786, 0.22335315317999715, 0.18751720365133784, 0.248068736128503, 0.22023462263259763, 0.23698925270789328, 0.10697090373284168, 0.09630483456873806, 0.10593462545059318, 0.10895484150250434, 0.10207452639117331, 0.1056784796751139, 0.1106507788936637, 0.12207003062608968, 0.10996853308415988, 0.09545518690238719, 0.10268464666951838, 0.10639802522456632, 0.09696530887164734, 0.10952293289190607, 0.09136430282867691, 0.09843872814056998, 0.09322622781457934, 0.08416488910849262, 0.946820311365855, 0.9830356181264417, 0.9559957887630567, 0.9700493468115999, 0.921638344138031, 0.9466301223357706, 0.9621476906131208, 0.9443404787557275, 0.9487487722228636, 0.235984637697236, 0.24696488054135302, 0.2434999276260219, 0.2595932655472427, 0.22450781416029486, 0.23846606674341297, 0.25870007519108984, 0.2706010244108985, 0.2619404853024656, 0.2730600030156084, 0.28993263148136317, 0.26946077762374554, 0.27444054528588513, 0.28951811963270213, 0.27720374028650563, 0.32359656309944307, 0.26571320208373006, 0.331618686521324, 0.1381956640683637, 0.12705704574368448, 0.15309609282010206, 0.1350831910834901, 0.1481732430790258, 0.14218262964511508, 0.16814536558281856, 0.15206894274866523, 0.13948805203655645, 0.1702346838865456, 0.1250288247831406, 0.14805592291186165, 0.12716176721706507, 0.14249314043116068, 0.15368518200052783, 0.12962699677097467, 0.11351916407742135, 0.12381887624061039, 0.022710802044560663, 0.04051754397755225, 0.05527254274626048, 0.03690878964059574, 0.030347344181555824, 0.03214576542937886, 0.0547860583132157, 0.029357712577493977, 0.0371179272500185, 0.14068563313050741, 0.15752379125825633, 0.1309771668557782, 0.1260575521174978, 0.11060240791374021, 0.12665266052172863, 0.16345032750276112, 0.17919834072404106, 0.16896466132245203, 9.999999999998899e-05, 9.999999999998899e-05, 0.008888359165009407, 0.005648932820938923, 0.001295946950267135, 0.013509423988573355, 0.014921813530973993, 0.001411581164749487, 0.011819296001747914, 0.08830079902208487, 0.09138644546308083, 0.10362342380466727, 0.10845716052028054, 0.10708263245760141, 0.10323573990884305, 0.11702472393617847, 0.09439967579374575, 0.09474657162852618, 0.4250200244537835, 0.4111209445212144, 0.38895312678552696, 0.42040354166177485, 0.41466328592402635, 0.4361854566691612, 0.43210536004343125, 0.3999033658956437, 0.41963164031989386, 0.08567575254453064, 0.08293692729110314, 0.07931107788738867, 0.09999479878946804, 0.07825803443675683, 0.09197268188998842, 0.0866723775629129, 0.08140751755499365, 0.07183487852321724, 0.14235211804854464, 0.15179464082763716, 0.1434321172913514, 0.18006812447722242, 0.14983462984249474, 0.13866879350106376, 0.1688826076881318, 0.13911119185694965, 0.16099963257639138, 0.25896060665505516, 0.2575473527930253, 0.24561796549558912, 0.24101272805098517, 0.25675960408097986, 0.24319758502274613, 0.2667255615596369, 0.256124595157466, 0.2781522565257405, 0.1949972600073786, 0.17938209342246025, 0.1934556103042896, 0.17730317387317684, 0.1673036072342784, 0.18314851691794143, 0.1885752197629359, 0.17171314561840323, 0.1904279776357759, 0.20792979879126428, 0.19336262548907046, 0.17998202656583995, 0.22267385737293843, 0.18349988994721023, 0.1910417478415264, 0.17694509120163804, 0.18536718559932375, 0.21699891227799917, 0.18744090156012017, 0.1871405154718584, 0.1826042051961042, 0.18317712331709268, 0.17272418578068827, 0.18575030966926664, 0.18243171193614238, 0.16991056068849741, 0.17254752701400322, 0.1681333245306077, 0.5920133220034238, 0.34059612487625235, 0.48289948739524025, 0.44187887754677035, 0.5296048880018855, 0.6531364725053466, 0.36115529609067454, 0.6223611914545889, 0.4197871936133519, 0.19115318542604864, 0.1910295834396939, 0.39512482502455315, 0.1989213686556951, 0.40970475949546303, 0.20042186537483697, 0.20840410993052683, 0.5830708191480587, 0.18775251744955423, 0.1828862816797826, 0.18263163564402785, 0.18762402799718914, 0.18456073328426947, 0.18628746564695586, 0.17006399587444265, 0.19122385402454423, 0.19154890389661483, 0.0842003755428341, 0.07414326845326491, 0.06990094147409165, 0.07528122432313888, 0.09131349797216881, 0.06964955744677881, 0.0748403459676742, 0.0658340773811853, 0.09011437757830731]}, "mutation_prompt": null}
{"id": "785451ee-e78a-47cc-8689-05580190bc22", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted population size for improved balance\n        self.prob_crossover = 0.85  # Balanced crossover probability for exploration\n        self.F = 0.9  # Increased differential weight for stronger mutation\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Further increased initial temperature\n        self.cooling_rate = 0.95  # Slightly reduced cooling rate for gradual annealing\n        self.diversity_factor = 0.25  # Enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n                \n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                \n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.standard_normal(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Adjusted cooling rate for better annealing\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV", "description": "An enhanced hybrid algorithm combining Adaptive Differential Evolution, Dynamic Simulated Annealing, and a novel Diversity-Directed Mutation strategy for improved exploration and exploitation balance.", "configspace": "", "generation": 81, "fitness": 0.3259277502087446, "feedback": "The algorithm EnhancedHybridDEASAV got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7538272897603184, 0.7587158406568346, 0.7500261659518903, 0.7543887370277551, 0.767237302832656, 0.7513753774892338, 0.74850800668752, 0.7692162873835496, 0.7699276474914925, 0.5608980841884952, 0.6001819090268314, 0.6124938702211496, 0.5526300568065219, 0.5343267750398266, 0.6010154981053311, 0.6166020208089595, 0.5948265995749757, 0.6226477735732204, 0.17357640951469078, 0.14478395244422881, 0.14100733343229133, 0.2712697260319996, 0.1507131140330915, 0.14663655226786088, 0.25237846986240164, 0.17496416208703358, 0.2055718803016532, 0.11505877857957858, 0.11149071304318026, 0.10997758791086376, 0.12968367242314904, 0.12450904609916846, 0.15331106625696123, 0.13356309255545262, 0.14273308595966028, 0.11081344857956132, 0.9795438825006939, 0.9678465601386789, 0.9685791006592445, 0.9623630432527859, 0.9889585343873454, 0.9715741055020785, 0.982994389179079, 0.9813568574530226, 0.9395660435661212, 0.3895376946202428, 0.38393131005820524, 0.3695587369477593, 0.37116675850709424, 0.39772396899386664, 0.38764549686632277, 0.3932259480352662, 0.3689833399254694, 0.3785062008399728, 0.605613145282949, 0.6505255167979722, 0.5484787875117957, 0.6170734694339302, 0.6493972243650581, 0.5850015510319122, 0.6743460485608648, 0.6346570878553673, 0.5880567157755723, 0.22762275885538596, 0.28743646168197634, 0.29338791066624437, 0.2071333006759276, 0.26961990226658183, 0.23814689746261675, 0.2699707779778079, 0.2537616421873382, 0.30737907335269254, 0.2752774522996413, 0.24586240525158765, 0.12324921129462796, 0.25653674409276617, 0.2667550549721637, 0.2196024582758075, 0.2787576635732897, 0.32371946093267423, 0.31723591669688656, 0.11893227257602934, 0.18422357217482355, 0.15276797000814857, 0.18601935270939574, 0.18615931261397578, 0.12606116667923395, 0.19652705594060882, 0.1312131262627667, 0.12926259190301426, 0.2597146513730333, 0.2964453314741198, 0.28702358422378704, 0.32275070435998354, 0.2977186271823592, 0.35994958469838256, 0.3075588985177098, 0.3814949503095336, 0.2943923944814444, 0.04845672328694728, 0.05415410732947712, 0.07318931469016465, 0.050860958315645965, 0.06474321474434741, 0.11145546005118045, 0.07489653091616622, 0.04526488286793773, 0.07765593141209792, 0.1951982803794381, 0.17492252879860348, 0.21506151192615974, 0.17661300156361304, 0.2286849900582406, 0.17370299240495857, 0.1985667769271543, 0.1846968075503943, 0.1895257813946728, 0.52774688123095, 0.5275999305631685, 0.5406344281708747, 0.5582836133536215, 0.5583520803361363, 0.5687930381310684, 0.559018405059232, 0.5499953174347347, 0.5566765616370852, 0.08784809508855995, 0.08977139746052576, 0.10267638895733544, 0.08671435028216168, 0.09615620226013144, 0.10113456830361134, 0.09241010707624941, 0.09529497683415233, 0.08803838770885852, 0.24106787652686668, 0.2241879287432994, 0.19958209497564572, 0.17167177144197376, 0.16504822273720887, 0.17354733845470383, 0.2437654943726425, 0.16277786935149197, 0.18853924961443547, 0.3079227690519717, 0.3163998079045578, 0.3078630713823608, 0.3340479599139148, 0.2934660495490372, 0.28412605607624875, 0.3327314509656407, 0.3247825523188018, 0.28720609602406555, 0.21812069075863694, 0.23840997262895114, 0.21667705273861726, 0.23452982326530114, 0.2438788238699665, 0.20843624922561588, 0.23216701509731807, 0.2560213295555659, 0.20892693438089727, 0.18326503730795496, 0.17127776172570797, 0.204494675585555, 0.17279353222623173, 0.17946733131267523, 0.18328184005260006, 0.1950980234418893, 0.22147674459912536, 0.18132577985943166, 0.27339975666207816, 0.192360614129082, 0.18750609996957002, 0.19044715843679683, 0.2633818057632854, 0.28533531452740224, 0.19118316342547426, 0.41781359287169184, 0.1747950989120416, 0.6236438056404677, 0.7484497598648974, 0.6479793541669463, 0.18225404477578178, 0.18445184465426234, 0.18042106347189224, 0.18310405254019513, 0.18866682422809866, 0.7823474476276864, 0.6846329941359242, 0.6215001893244638, 0.5594898621805473, 0.6748160274479142, 0.5997348556621447, 0.5379257645668254, 0.20965394913570912, 0.20870610962940084, 0.1270800235910805, 0.18002081179827478, 0.1811827102900334, 0.17975344992370124, 0.18008355404958987, 0.18583772888584604, 0.19104703548487045, 0.1819810235253937, 0.18126126340432958, 0.20238554374820528, 0.07494429272763459, 0.0703561648058163, 0.07576189536667133, 0.0672173551717582, 0.07783667653610793, 0.0670468846959078, 0.07446477569135512, 0.07955418680707449, 0.068632221229602]}, "mutation_prompt": null}
{"id": "14fd6fe0-27b5-4a8c-8b24-46419680309e", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Slightly increased population size for diversity\n        self.prob_crossover = 0.85  # Adjusted crossover probability for exploration-exploitation balance\n        self.F = 0.9  # Enhanced differential weight for diverse mutations\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Increased initial temperature for wider exploration\n        self.cooling_rate = 0.85  # More aggressive cooling for faster convergence\n        self.diversity_factor = 0.25  # Enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    step_size = np.random.uniform(0.05, 0.15)  # Random step size for mutation\n                    direction /= np.linalg.norm(direction)\n                    mutant += direction * (self.upper_bound - self.lower_bound) * step_size\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV5", "description": "A further refined hybrid algorithm blending Adaptive Differential Evolution with Simulated Annealing and enhanced Mutation for robust and faster convergence.", "configspace": "", "generation": 82, "fitness": 0.30602701492228346, "feedback": "The algorithm RefinedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7342025366831172, 0.7272457956324102, 0.714381840926517, 0.7900593192993293, 0.7921610392957343, 0.765993816649989, 0.7464124301639883, 0.7568466123304579, 0.7634492267978158, 0.5611275873514557, 0.5518412855284334, 0.5405322321265064, 0.510490263481447, 0.5273716271620452, 0.5942203403055872, 0.5750721892684533, 0.5919670504118204, 0.5140978703931909, 0.16742669116356212, 0.15215857919005515, 0.1468718569656785, 0.12673262058725143, 0.12502414940679485, 0.12721903897504439, 0.24264573390682032, 0.16324273716788196, 0.32432883563968407, 0.11715929051071328, 0.1340075576471208, 0.15131056625447925, 0.12281760592725555, 0.11751903978844258, 0.1433457875892833, 0.12507303254909152, 0.16090201943203952, 0.111796787054111, 0.9728163426262741, 0.9477796553706762, 0.9592928448029201, 0.9476299762512943, 0.9416412779771408, 0.977119049650475, 0.9716887130118478, 0.9880461717066543, 0.9617818101210728, 0.37440564536035326, 0.372806735756827, 0.33130645307528583, 0.3992300575334734, 0.3673490304273832, 0.36841938695454135, 0.3704007314992427, 0.40423715947746086, 0.4089002291679199, 0.6043108453896182, 0.4724832480995229, 0.6253252996341441, 0.6094142582429773, 0.6154758583134707, 0.607388572274808, 0.5755152383073258, 0.6006928267827416, 0.6096334134575871, 0.2693153930370693, 0.2708153455723864, 0.24025283289263222, 0.32081175760590086, 0.2380239573862858, 0.28394809547507116, 0.3038079967479169, 0.2544506119964618, 0.22239753269388218, 0.3053253873298901, 0.11708735919384128, 0.2136278222357184, 0.23359042788654572, 0.2524510836739572, 0.27883437889876583, 0.2849181566941563, 0.23860464710489282, 0.19567286239186965, 0.15187703653692375, 0.10862524077740887, 0.09143274579143723, 0.15662865433196416, 0.1422381187663273, 0.18944089294160982, 0.12249362776112993, 0.12650076264209587, 0.12258475186617213, 0.32337470680062774, 0.28088078836094443, 0.250886634166003, 0.24453111766009894, 0.20816174362246143, 0.27164578283372276, 0.3498822693150643, 0.3837061002144858, 0.32408706017952205, 0.03187861669904779, 0.050472391813175976, 0.046839868494379155, 0.043090358917047156, 0.0484013334287865, 0.07470274678253241, 0.05538538988405506, 0.055239027358860215, 0.06129308276741563, 0.18668388551590842, 0.15541472573834414, 0.17653813629801096, 0.1974126107415014, 0.17545746377340887, 0.18834443244567123, 0.1731919420427379, 0.18881977395501903, 0.1792345939601766, 0.5677236192352554, 0.5573609728805687, 0.5413679974488108, 0.5798120173439788, 0.55783033738416, 0.5790563630645855, 0.5675770945694372, 0.5254298618551745, 0.5347594748503166, 0.07534505554307047, 0.10393438135481703, 0.08892511576323692, 0.10562019717206406, 0.10837152853714072, 0.08904066321551496, 0.0877413531127188, 0.09528395983134885, 0.11145032780278796, 0.308603288026827, 0.14449572029485602, 0.13327787949367031, 0.26414805026352717, 0.21627080556865053, 0.14392367261875239, 0.16324625655889435, 0.24514003703029297, 0.15492637673795984, 0.3005060070980716, 0.2829062919481141, 0.32061143236920786, 0.2703522878307072, 0.2701082669640449, 0.31433863003584106, 0.32031203264858654, 0.326722187404633, 0.329113924632229, 0.24610164324460304, 0.2190387727168489, 0.2397093029265177, 0.20285244743117659, 0.1930763964739115, 0.21844097610482127, 0.22937982855072303, 0.23224882132703828, 0.260097836614392, 0.16707149646011965, 0.20264387012920437, 0.17374583497370477, 0.19140246675549966, 0.17353353060249754, 0.18225004041895498, 0.18758135816869925, 0.18185044664522387, 0.17267784310365064, 0.18738446576652001, 0.19107980248143186, 0.2047082437476404, 0.18283755179352723, 0.20598921546154048, 0.18502348883976305, 0.19853126812665678, 0.18688396265966156, 0.17510121775878595, 0.15900969092295525, 0.6273453169541638, 0.1951925613203419, 0.17297850481328747, 0.7267632752583713, 0.18149997142744423, 0.5917478169696221, 0.18209446950977315, 0.17401246307941787, 0.16569807909046452, 0.20412314941702958, 0.20464183954070425, 0.5043324394933622, 0.18703664678224263, 0.7056018202046717, 0.21065175689125049, 0.20941610757842744, 0.21027627981500796, 0.18415323105455217, 0.1951447431982699, 0.18692614075515834, 0.1918119480943863, 0.18481528916295198, 0.17675102791389818, 0.18096179751535624, 0.19983654115915583, 0.19283598240015276, 0.07054654614528211, 0.07633466788893273, 0.07556106734598811, 0.07855489021777684, 0.07370155565789882, 0.06800789085568171, 0.07244833916573534, 0.06313777251627073, 0.07754811648630422]}, "mutation_prompt": null}
{"id": "afdb3072-5b0e-4ed9-b7da-4d252be83838", "solution": "import numpy as np\n\nclass EnhancedRefinedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.3 * dim)  # Increased population size for diversity\n        self.prob_crossover = 0.85  # Adjusted crossover probability for exploration-exploitation balance\n        self.F = 0.9  # Increased differential weight for stronger mutation\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for broader search\n        self.cooling_rate = 0.95  # Slower cooling for extended exploration\n        self.diversity_factor = 0.3  # Enhanced diversity factor\n        self.mutation_scale = 0.2  # Self-adaptive mutation scale\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction) + 1e-9  # Improved numerical stability\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * self.mutation_scale\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedRefinedHybridDEASAV5", "description": "Enhanced RefinedHybridDEASAV5: An advanced hybrid approach integrating Adaptive Differential Evolution with Simulated Annealing and Self-Adaptive Mutation to boost convergence and solution quality.", "configspace": "", "generation": 83, "fitness": 0.3150537300088183, "feedback": "The algorithm EnhancedRefinedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7498707986356778, 0.7506110784979304, 0.7582081338711445, 0.7311899493125065, 0.7476098442103623, 0.7737106387056552, 0.7566187205509066, 0.752616128513041, 0.7419379575206204, 0.5670680812394477, 0.5044897397665398, 0.5058559822422933, 0.5570431681580552, 0.5037631955175217, 0.55385207743274, 0.5652128786998354, 0.5343545391869284, 0.5368882843326908, 0.18890729456555122, 0.1644935735266556, 0.16058760029090735, 0.29483566392482186, 0.11925444259228402, 0.20958724359356862, 0.1316608516738057, 0.12651644849990695, 0.13483830282780074, 0.12677909440163926, 0.11251535392250112, 0.15607409744652923, 0.13016842329641454, 0.13060526186607435, 0.12241877463594153, 0.13066771758402262, 0.2474880081160018, 0.16731986991607095, 0.9739907524478036, 0.9785851296090446, 0.9706439900384869, 0.9587614334867571, 0.9700572754116877, 0.973871972102819, 0.9794935706269149, 0.959375956778457, 0.9668193208627835, 0.3431328619158375, 0.38549199887567254, 0.37729793533298284, 0.3861539640995799, 0.37219182270388274, 0.35939314230220754, 0.3613565882941563, 0.3897811681481952, 0.39073638469007343, 0.5464045346926631, 0.595373763952932, 0.6471214156888606, 0.6574421574134661, 0.6531940046538371, 0.6315680328653985, 0.5811758935235829, 0.5542456887469962, 0.6026805711712213, 0.2365261640843176, 0.2617641742666391, 0.30739933641480344, 0.27517433503432553, 0.3384910130048149, 0.2624955457649759, 0.29537935480769983, 0.2711831474654658, 0.3113147348097488, 0.1072068839068524, 0.02688796095020074, 0.2314147128279287, 0.2607917798993642, 0.22031628928814762, 0.31046150241746295, 0.28962331981706746, 0.329720810474167, 0.3217627171621318, 0.2646770626214462, 0.15752148317596015, 0.14497208814849383, 0.16104986175493252, 0.16393959578923456, 0.15073383031294785, 0.14736823201801186, 0.14204576302789207, 0.12215487824381654, 0.34338838890626466, 0.28268366897606045, 0.28477495741282544, 0.3184835839122153, 0.24570293066356175, 0.27439759907733485, 0.37861775680462983, 0.3569563095262063, 0.30164464386276135, 0.06732504022701413, 0.024964701570800774, 0.04608133144997795, 0.04887486482634418, 0.1059318962435416, 0.08274956825527802, 0.04482621728728331, 0.07998141795608293, 0.055711801138281, 0.14736672183431032, 0.2128584267815239, 0.1713887105075359, 0.19948506256311538, 0.19065625411225906, 0.176353029550403, 0.18851492508046197, 0.18122383610579507, 0.1902494539710089, 0.52408258111482, 0.5356831259552648, 0.5629264743871352, 0.5617599021479728, 0.5098262516026972, 0.52056576903471, 0.5441204534151597, 0.5333271553814267, 0.5469763287477873, 0.10736691657489206, 0.09468063754788658, 0.09960364286306633, 0.11398948465829495, 0.0899295021588874, 0.07925584350061021, 0.09932862407425525, 0.09543147317604539, 0.08828860454182408, 0.1857217924075315, 0.16534598698306324, 0.14894356765877925, 0.18144668816194276, 0.21381862641095617, 0.20293596013526216, 0.20034724899395873, 0.22015432064257068, 0.20156055999838574, 0.2968720305287703, 0.33286858380488304, 0.28546019917897447, 0.30463855727235145, 0.27077004352772016, 0.3200928492951892, 0.36620298031577736, 0.3214924890305013, 0.3791022134388129, 0.24138734568383313, 0.2065647267884324, 0.22288315636211653, 0.21689654697865302, 0.23699644879919202, 0.2120387261907194, 0.2561300389951915, 0.24611695369029885, 0.27728692814512335, 0.19050313242510786, 0.18347372088850722, 0.16699473907960927, 0.2000140227016678, 0.1785713262165164, 0.1689093599121947, 0.18727473501197012, 0.1740372470170678, 0.1765918671214165, 0.20365509645413615, 0.2061323405660923, 0.1857453503080455, 0.20866787673343834, 0.1872964709567998, 0.18509296238351203, 0.2432073050181489, 0.1806893499661042, 0.22348414327328592, 0.7400522952404288, 0.18259690639233206, 0.1664744925890762, 0.7018238539461521, 0.1898083041454549, 0.7070906364958288, 0.18134283972726473, 0.2011126833696475, 0.6271411907129326, 0.7292033109555267, 0.20253349963723177, 0.4360604119526884, 0.48300295011456884, 0.19218150471467488, 0.2020917326362185, 0.3562630128534704, 0.210538067876757, 0.20762025873058187, 0.17643555910823328, 0.18289288958770145, 0.17684063966689922, 0.1994099064866015, 0.17700861149361735, 0.18325634755142428, 0.18472782452092684, 0.18512047222846173, 0.19180710434030857, 0.07201017912756869, 0.07965933007871806, 0.07760197620984322, 0.07221290634655575, 0.0715753676000469, 0.0815679606631613, 0.0746277308069393, 0.08035511180948796, 0.0704682002496686]}, "mutation_prompt": null}
{"id": "ce0b9d4a-d488-4467-8929-dac79511aa62", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Increased population size for diversity\n        self.prob_crossover = 0.95  # Further increased crossover probability for exploration\n        self.F = 0.9  # Enhanced differential weight for better exploration\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for wider exploration\n        self.cooling_rate = 0.85  # Adjusted cooling rate for gradual annealing\n        self.diversity_factor = 0.25  # Further increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm utilizing Adaptive Differential Evolution, Dynamic Simulated Annealing, and Improved Diversity Control to enhance global exploration and local exploitation capabilities.", "configspace": "", "generation": 84, "fitness": 0.34739201080181314, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7163638399237731, 0.6648971800860033, 0.6946253449765631, 0.746608430265167, 0.6995137625165908, 0.7024187343118538, 0.7629992024462539, 0.7367912071259921, 0.720001250523717, 0.5291780138397519, 0.4894472955461826, 0.5475380895241471, 0.5507328827679878, 0.5141053502999815, 0.4968373051828081, 0.5277578146384426, 0.5007812347416418, 0.5296153431568758, 0.1328711478106468, 0.11338781961466904, 0.11802494369516148, 0.2594162651930021, 0.10081340616823431, 0.11982767271353334, 0.1641199401669119, 0.23840862422062892, 0.13379932446669118, 0.09394372880540847, 0.11424314060210494, 0.11249841873283206, 0.09781229690468551, 0.12122205971171296, 0.1093887398900586, 0.09632947455524699, 0.13866502302030348, 0.1391805352834108, 0.9856779569513521, 0.9665337679681552, 0.9393790259055403, 0.9888966175434124, 0.9749533369492408, 0.9365488637081459, 0.9543373456952768, 0.9464730266817429, 0.9617257091885808, 0.37682625320088015, 0.3912087814972838, 0.37844198655818884, 0.3780508951124304, 0.3876253458368222, 0.3832799060274338, 0.39445916281409776, 0.40299405910450314, 0.39765241404558116, 0.6231218679132122, 0.6334987976136126, 0.6596487658095969, 0.7072773075480983, 0.686681186959353, 0.7660818841955261, 0.6897454138860608, 0.733798795204883, 0.7572675182569459, 0.32048780519859965, 0.3087861617137895, 0.3365771963238019, 0.3251702746856948, 0.3717480991923747, 0.3866859454897711, 0.40336871904538407, 0.29683080420512187, 0.413003376901273, 0.25023942419865686, 0.4461123561732966, 0.45598050228560405, 0.41397102195768554, 0.3835520686263819, 0.38062173940165733, 0.30486883137565957, 0.3260563850539775, 0.4170190024216013, 0.2840155919740003, 0.33496539443476836, 0.3388875307405318, 0.23425610083067538, 0.3642112742818955, 0.27514665744637623, 0.31289076728536924, 0.32892899385444563, 0.29193843060225566, 0.44970145476889756, 0.4301581381582178, 0.5271681301610263, 0.516182477298947, 0.4563413660514186, 0.4154788852735133, 0.5364361754488435, 0.4979211768685109, 0.4637560330199709, 0.065490926884331, 0.10556927041088016, 0.06279934741685211, 0.20658957361562935, 0.17138019665222382, 0.15034481331888327, 0.1757376052054953, 0.12144036213580311, 0.14320391482178496, 0.26831691094573606, 0.2731328167071686, 0.2520692969384758, 0.24653910116130195, 0.24326073848619412, 0.24825563313268462, 0.2649542222048832, 0.2731523037813839, 0.27134824121161827, 0.6214236780386988, 0.6062426050150047, 0.6165415352631543, 0.6122781306678766, 0.5810558471181644, 0.647969384420536, 0.6048673277935237, 0.5432224492571438, 0.6094761765728398, 0.1067855358851495, 0.11164311135320348, 0.11059429447193347, 0.09721048735907423, 0.09471776015089728, 0.1120421214021422, 0.1155321071691926, 0.09293793457632038, 0.12962153064935067, 0.1532314046360167, 0.1995527971712172, 0.18895067413808042, 0.22291111094891902, 0.2217196563626399, 0.14975018875175772, 0.23686614083408342, 0.1427559065366658, 0.23323227112852207, 0.34803300770430745, 0.3029532767980877, 0.27625439499471327, 0.33148807327590646, 0.31519002826993536, 0.31486220816660737, 0.3274841451955387, 0.32100156281966963, 0.31412484751104064, 0.22860500473146095, 0.26541244966823174, 0.2469743255326331, 0.2715262906819329, 0.2694224690648427, 0.23067737779461672, 0.25534911177503483, 0.2670943814354181, 0.2658085659350704, 0.2140850446613637, 0.18391926716721407, 0.18330879049214477, 0.18153594999136347, 0.17538816503698507, 0.20112287684776553, 0.2206852251896897, 0.19520659919064942, 0.19771648096191197, 0.2653280013947291, 0.20955630292170724, 0.20033400932723622, 0.2701252000410056, 0.19711103752444903, 0.24616821058320415, 0.18535732849085584, 0.18238225657878893, 0.21776240478718933, 0.2026599996680618, 0.16251971728529557, 0.16817698128979897, 0.7248938918696863, 0.18638087841130768, 0.7096937757026405, 0.17040410821974106, 0.1884251724917031, 0.5903696018395286, 0.7069157583147329, 0.7807359059790444, 0.7886458662442292, 0.20199628407312198, 0.19846351923220995, 0.19287817080021785, 0.20751670804527322, 0.20982462044435324, 0.20933162387741022, 0.1727337579436684, 0.18311913229880306, 0.1933428681677396, 0.1849657127722263, 0.16660808443253083, 0.17477684466135357, 0.1938688295858828, 0.1794925535178179, 0.18484706297439346, 0.07536816267993018, 0.06639602173440529, 0.07917253271033475, 0.07951775816451723, 0.08004233677653172, 0.07135659261879168, 0.06809940349221433, 0.07661376476240855, 0.08463308650807388]}, "mutation_prompt": null}
{"id": "f0d31d9c-9457-44a1-9793-9a48476098ee", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Slightly larger population for better search\n        self.prob_crossover = 0.85  # Adjusted crossover probability\n        self.F = 0.9  # Higher differential weight for larger steps\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature\n        self.cooling_rate = 0.95  # More gradual cooling\n        self.diversity_factor = 0.3  # Increased diversity factor for enhanced exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.2\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm combining Adaptive Differential Evolution with Simulated Annealing and Adaptive Exploration for robust optimization.", "configspace": "", "generation": 85, "fitness": 0.3124159654186287, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7516150453880087, 0.6949110839912971, 0.7214800440621891, 0.7511614134380338, 0.7515393289023772, 0.7513107430553021, 0.7517305543205199, 0.7337748626510667, 0.720390798689269, 0.5290330882477294, 0.5223615726153837, 0.5493231519309308, 0.5626655998437445, 0.5235369432821795, 0.5249881031320625, 0.5179686267573118, 0.5631186781732087, 0.517215724185313, 0.11895315566998943, 0.15582436876792127, 0.1489708964381734, 0.1820944397549431, 0.14495767233061996, 0.18544332773991812, 0.1702286765975366, 0.23223186159882492, 0.18523375429578726, 0.10458330454757236, 0.11827410211218414, 0.15852737833336705, 0.12187195775491311, 0.1129476165433898, 0.12659155175214143, 0.09054255824575208, 0.11221897998255248, 0.10998163870423427, 0.9650505073369438, 0.984568214503316, 0.9632826812896753, 0.9467737811084611, 0.9912443365196233, 0.9710986905170081, 0.9747324484481658, 0.970758859467983, 0.934933343941224, 0.31959168202882937, 0.3777831299912341, 0.35526668234198, 0.3458709914492448, 0.3540399988679296, 0.3369529996140146, 0.3803962528246947, 0.39625218541130236, 0.3689721893538094, 0.5647215390053169, 0.41358558033085735, 0.5500288442174881, 0.582325587099563, 0.5841333187719395, 0.6441427417276744, 0.5219747739798027, 0.5818771281577549, 0.5587631836111712, 0.2589653034061864, 0.26530417736374323, 0.32302214187332456, 0.24674337413231928, 0.2412428713202095, 0.24047872840410134, 0.2600335293530158, 0.2128158715482693, 0.2824176948860406, 0.301316431084683, 0.2838191869076805, 0.22113725502510584, 0.2274264129767486, 0.2849000953051586, 0.24182130341560204, 0.26879454905276967, 0.24622280891987236, 0.23177291738746064, 0.1592965476600985, 0.10400641256290566, 0.13198883147487672, 0.12508419626186473, 0.09883122086482832, 0.09656595845018323, 0.16262241117867648, 0.13621499344418675, 0.11436910282855528, 0.24634795169395984, 0.2602790760021979, 0.2219181446402334, 0.2986877840547567, 0.26483800865859053, 0.21405521716470055, 0.3478200608627402, 0.356704158225988, 0.31149882923815453, 0.03190084944260285, 0.08287445667941662, 0.028073457362381093, 0.06222845268082133, 0.026411434223456154, 0.04975826113377446, 0.048972126885525324, 0.0072885492014310715, 0.041259250714715145, 0.16717050928305222, 0.17359986907269487, 0.1806056901584412, 0.179343846802278, 0.19501925144982302, 0.18380893629364314, 0.19481723112861504, 0.17107994710440577, 0.18824110407825922, 0.5114657841224894, 0.5235575595674724, 0.5377876998884796, 0.5353935464341564, 0.52264537488905, 0.5526976667440615, 0.5509835987746015, 0.49917887575548714, 0.540240591290961, 0.09850520291095977, 0.09813607465469854, 0.11329024094997964, 0.0830074505945948, 0.10271288003838253, 0.08702436830629945, 0.0805361557310198, 0.0918102662986563, 0.09240405418684317, 0.1515686099585033, 0.15624786356128284, 0.17095577652325078, 0.17904057337478751, 0.14794950274538532, 0.20623130618833285, 0.16655793288921072, 0.1617113481278193, 0.2095623743097933, 0.28192651269255453, 0.288983224250871, 0.28259493131644553, 0.2823824408414626, 0.24679527601985962, 0.29770033541044383, 0.32955953914931, 0.31056706448968163, 0.28927522414761475, 0.23930033971300024, 0.2162361890636415, 0.23989647896592248, 0.2294839818850566, 0.20017521285398454, 0.20540065141358055, 0.25890048740033345, 0.24086401383119205, 0.2195997434987621, 0.1922602696357888, 0.17741565079891986, 0.17292765789208808, 0.18944034164689927, 0.2001163382333716, 0.24302899391645694, 0.1846872272147242, 0.17825149049259037, 0.18670485879097298, 0.18536483233425838, 0.19827655956524837, 0.2016033565861024, 0.18500676899837631, 0.18777657076336862, 0.18592620093527001, 0.20456418748525917, 0.17762204706913576, 0.19979632108483925, 0.1634681584789962, 0.5980352394850332, 0.68890497585621, 0.48084807132763385, 0.741182120154773, 0.7014603853239801, 0.1575095279736417, 0.6419349698820487, 0.6224547844190786, 0.6522596844936994, 0.19720134431828495, 0.6491946755011753, 0.5672423505302044, 0.411713774725748, 0.19286541523245304, 0.21083542601000904, 0.6488007350804623, 0.20782674219691333, 0.19780694986232306, 0.1812843116936429, 0.18817564815796128, 0.19477215027076467, 0.19773537399898222, 0.19995302469093523, 0.20351790168316708, 0.18479386075409443, 0.2160418067138138, 0.08148353245463025, 0.07293193224892658, 0.06554649730479634, 0.06936800038825985, 0.0749273275636988, 0.06813008437877466, 0.0782682044698908, 0.06654296052553088, 0.066675525991446]}, "mutation_prompt": null}
{"id": "f07d00ec-c230-4037-8c9a-4ef8377a7aff", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.5 * dim)  # Increased population size for diversity\n        self.prob_crossover = 0.85  # Slightly reduced crossover probability for exploitation\n        self.F = 0.9  # Increased differential weight for stronger mutation\n        self.current_evaluations = 0\n        self.initial_temperature = 2.0  # Increased initial temperature for simulated annealing\n        self.temperature = self.initial_temperature\n        self.cooling_rate = 0.95  # Slower cooling rate for thorough exploration\n        self.diversity_factor = 0.3  # Enhanced diversity factor for more exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.standard_normal(self.dim)\n                    direction /= np.linalg.norm(direction) + 1e-9  # Normalize to unit vector\n                    mutant = population[i] + direction * np.random.uniform(0.05, 0.15) * (self.upper_bound - self.lower_bound)\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Gradual cooling for better acceptance\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV5", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Enhanced Simulated Annealing and Diversity Improvement for superior convergence and robustness.", "configspace": "", "generation": 86, "fitness": 0.3246211308607773, "feedback": "The algorithm RefinedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7465129708572399, 0.7619411539097938, 0.7652207789066061, 0.7679998926029682, 0.7582608278244157, 0.7485662742840075, 0.736725101910441, 0.7514386787880055, 0.7475084015124491, 0.5172333960620813, 0.5410118082589666, 0.523113890315471, 0.5426731675969041, 0.524453369955483, 0.5583182872764663, 0.5145779386169752, 0.5008300072001695, 0.5389702182915773, 0.12633626230937245, 0.16390379766020158, 0.20137037410566516, 0.13400632717085992, 0.22204302092782968, 0.13987077591332397, 0.21885747279608725, 0.2216618183875495, 0.1368375334008295, 0.19390078675783384, 0.11673605468598636, 0.11868615526431692, 0.12830304922972668, 0.13342813299167355, 0.12584068902532597, 0.13628322505269352, 0.1436018454822593, 0.14637839702791533, 0.9667765244525232, 0.9618013923268942, 0.9888389084604627, 0.981656288042122, 0.976853832935235, 0.9463978377156952, 0.9669301834128742, 0.9573120906229018, 0.983418949765102, 0.36967681518957296, 0.35569476847936343, 0.38321998759375386, 0.3533922658163706, 0.3524926485105049, 0.38055267694509587, 0.3599624265814758, 0.3886243614647005, 0.33808619448155386, 0.5733701952423954, 0.7076290518636085, 0.5404136727457765, 0.5511531526899625, 0.6726762749399925, 0.5662293019123147, 0.5914161175856668, 0.7439881042182686, 0.562946445249591, 0.26753781164843926, 0.2856084476360219, 0.23834635430464113, 0.30765464579110224, 0.2478031933433189, 0.25437531948429626, 0.2582086977298703, 0.24261958569445063, 0.33869905271874046, 0.2248124215709505, 0.22407265482296246, 0.26060438124805063, 0.2703037445008153, 0.25773068035081126, 0.27215271079568715, 0.2756940864759654, 0.2685673770194882, 0.2490411564417333, 0.1623302080452702, 0.16586932533478482, 0.15948398115070483, 0.16834379893147, 0.13214819449210258, 0.13430415586578404, 0.16212806175739336, 0.1217818705593654, 0.1317243131276764, 0.28632901780375475, 0.2790119441746556, 0.27904595144867095, 0.2796924334659254, 0.26096282514732216, 0.30398808055033555, 0.29557107949834094, 0.30505948594157806, 0.24777315691572643, 0.08452517252611524, 0.03753354564811884, 0.046636850445741174, 0.03688742403691414, 0.054447837923387254, 0.056971111328630086, 0.056923816346423184, 0.0652561651730561, 0.06841384552902363, 0.18642763289430764, 0.17063432382042643, 0.19113278663551292, 0.19167656210838746, 0.18710742762202448, 0.20553238554196018, 0.17247708928615213, 0.17849901310709648, 0.1683413561749072, 0.5330402124637983, 0.5605738956985307, 0.5910121103371568, 0.5394633847640669, 0.5241105804948234, 0.5537367118472691, 0.5162213875165427, 0.539777001009315, 0.5282567220373802, 0.08313880912411309, 0.11128806839822569, 0.09393303772126238, 0.09308655158289325, 0.08839654666772856, 0.11180713190681346, 0.08406787679769079, 0.08382424606254424, 0.08378828053328458, 0.15534939026274075, 0.19195463292503812, 0.2686441574152455, 0.14494785105313435, 0.16764533771827916, 0.1667985654739672, 0.17364729784186295, 0.2231224260982123, 0.31012701834257983, 0.2890731953514435, 0.3065706844529925, 0.31042967313537406, 0.30779421455515854, 0.3327196024017993, 0.26500347745468245, 0.30402365023288236, 0.3177601560636091, 0.34743012930026296, 0.22832389975691303, 0.21654683371599892, 0.19625016045434973, 0.23957117799045002, 0.2142388370310906, 0.22642522771608464, 0.21774267082300225, 0.25948922329670265, 0.23120570142689234, 0.18990334437233847, 0.21137387914204842, 0.18587146879183358, 0.1776515237098023, 0.1864427152787319, 0.17852847356146262, 0.18983095831974994, 0.18669411633732302, 0.19587835595996506, 0.18596875850593153, 0.17996913608625764, 0.19230611050849866, 0.1908512271307531, 0.183839174431211, 0.1917202063220408, 0.2062106727961357, 0.19156366216816734, 0.27061061176963896, 0.7283750916188101, 0.6614671503242566, 0.15040525884807243, 0.17720592803721447, 0.1973414617705871, 0.7018954659252238, 0.1854164631964551, 0.18551224198232596, 0.7857915489006382, 0.701765839564899, 0.7317279866925004, 0.6800230436687559, 0.5052382230110317, 0.6826462575718892, 0.6559467533307342, 0.20748398730722983, 0.7419284015233192, 0.5838740316126428, 0.19474788231907447, 0.18683526347100332, 0.18568913966305223, 0.1916745338228919, 0.18756775019263505, 0.19277015950010667, 0.18992016275513357, 0.18484092602389268, 0.1802105466170838, 0.07870808990455702, 0.08589285885430653, 0.07834770792787205, 0.07630348124162867, 0.07632188468825318, 0.06912774680053912, 0.06558117060432522, 0.07637251104720721, 0.07191826962202941]}, "mutation_prompt": null}
{"id": "b91e794d-70b0-4ed7-bb46-d1133f3132e4", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Slightly increased population size for diversity\n        self.prob_crossover = 0.85  # Adjusted crossover probability for more exploration\n        self.F = 0.9  # Increased differential weight for exploration\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Further increased initial temperature for wider search\n        self.cooling_rate = 0.95  # Slightly slower cooling for gradual convergence\n        self.diversity_factor = 0.25  # Further increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= (np.linalg.norm(direction) + 1e-9)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV5", "description": "A refined hybrid algorithm integrating Adaptive Differential Evolution with Dynamic Simulated Annealing and enhanced Diversity Mechanisms for superior convergence and adaptability.", "configspace": "", "generation": 87, "fitness": 0.3256862037184014, "feedback": "The algorithm RefinedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7525524392558213, 0.7583583641096662, 0.7530855851489748, 0.7551117243280552, 0.76171142510996, 0.7509888544591847, 0.7608012334439465, 0.7715647875143834, 0.7720853385936994, 0.5922620822539886, 0.5755226403036658, 0.5865484723659232, 0.5701640797239382, 0.5323727979165269, 0.5964726476991555, 0.6089891772546205, 0.5900500289050838, 0.5757677537759057, 0.173759592105169, 0.14478521764322339, 0.14100766648066287, 0.272550867439564, 0.1503614134828003, 0.14663627769738108, 0.25484474522969935, 0.17454861033608882, 0.20283171785700538, 0.1150585801964169, 0.11149072233935053, 0.10997752715785591, 0.1296836992017204, 0.12450901203139497, 0.15329758075852773, 0.13356041699757648, 0.14256720764650221, 0.11081343653176368, 0.9795438825006233, 0.96784656013878, 0.968579100659535, 0.9623630432484486, 0.9889585343760239, 0.9715741054989673, 0.9829943891788173, 0.9813568574531031, 0.93956604357269, 0.3740765679652347, 0.3804404407117742, 0.3588088018215143, 0.38496871246410425, 0.4018048370279568, 0.39298366060223167, 0.39664877418569866, 0.3667257057652258, 0.379640378746091, 0.605613145282949, 0.6505255167979722, 0.5484787875117957, 0.6170734694339302, 0.6493972243650581, 0.5850015510319122, 0.6743460485608648, 0.6346570878553673, 0.5880567157755723, 0.22275853035405946, 0.2781509651442584, 0.2925337474340588, 0.2067058943516228, 0.265104156059625, 0.23817586482055486, 0.2664540430744433, 0.25612760452765215, 0.29959524478457844, 0.28493001592927614, 0.2458733237299029, 0.1232846686960486, 0.2497867987213177, 0.27565935087881255, 0.2240802086394078, 0.28034247698893, 0.32245249119750063, 0.3224982489047499, 0.1175063314195317, 0.18404434819336346, 0.14990827722711642, 0.18600913471427116, 0.18615844491080857, 0.12479793905664605, 0.19658884289675593, 0.13192525336552186, 0.1303208708781758, 0.2583302876427087, 0.3002854853070539, 0.28785605962567673, 0.3152471186562854, 0.2977126580596402, 0.3695771647390459, 0.31020261571626473, 0.36824819007442144, 0.29744435883385645, 0.048637268793344846, 0.05374473231595134, 0.07318773044059668, 0.050821794732297754, 0.06474750398709872, 0.1033814414921882, 0.07832214616621858, 0.04531219429015998, 0.0777767804923043, 0.19962945383755215, 0.17215452859988434, 0.2059034140587125, 0.17479001841101982, 0.23242476357095854, 0.1796665562660259, 0.1973071226193147, 0.18604499757857274, 0.18833408797171103, 0.5428765498591503, 0.523894301597054, 0.5549548786562863, 0.5574409115054891, 0.5643094305310061, 0.5699200134293496, 0.5584065054200779, 0.5469167304584306, 0.5541958776910441, 0.08784809426922113, 0.08977139827731717, 0.10267638502509002, 0.08671434785385879, 0.09615619786451446, 0.1011345695996384, 0.09241010450844278, 0.09529497631336581, 0.08803838746084858, 0.24121479512122335, 0.22418878436557055, 0.1995820260547917, 0.17167177301815284, 0.16504822282099918, 0.17354732666998518, 0.24376532217115077, 0.16277787176979186, 0.18853922597785666, 0.3079024129960465, 0.3164587585612979, 0.31033688820482674, 0.33241510343144964, 0.2933915730808302, 0.2841301572399024, 0.3367921600104514, 0.32185713251149495, 0.2871717645867773, 0.21812113562144464, 0.2384103398131706, 0.2166725044838984, 0.23453044797540257, 0.24387846257888746, 0.20843635632808555, 0.23217064912457186, 0.25769485396483116, 0.2089266583133057, 0.18326510022414977, 0.17127773827700454, 0.20449475534719863, 0.17279354002526548, 0.17946731381861059, 0.18328174311763412, 0.19509802230603468, 0.22147669444434048, 0.18132582063756675, 0.27258745418016883, 0.1923606337762761, 0.18750610067495677, 0.1904471553812278, 0.2632879095731313, 0.28526940300958137, 0.1912982735398857, 0.41673900595587143, 0.17479509925646508, 0.6236437693749015, 0.7484500063521466, 0.6479797748944442, 0.18225404425840563, 0.18445183960306666, 0.18042112978229963, 0.18310405310040057, 0.18866682969094095, 0.7823471386319347, 0.6846327270043895, 0.6214981205450926, 0.5594913253256281, 0.6748149553489435, 0.599732263150214, 0.537924585724994, 0.20965394340935373, 0.20870610945444035, 0.12708002374347582, 0.18002081078361842, 0.18118271068932967, 0.1797534438835544, 0.18008355661871012, 0.18583773062977982, 0.19104703523751898, 0.18198102319450693, 0.18126126792777975, 0.20238555437558947, 0.07494429123600987, 0.07035616039609571, 0.07576189940367983, 0.06721735163364462, 0.07488511256980401, 0.06704688511279089, 0.07446477272463248, 0.07955418820468474, 0.06863222149085357]}, "mutation_prompt": null}
{"id": "3b4ff34f-b6a2-4944-8629-08e5ac9f756e", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Increased population size for diversity\n        self.prob_crossover = 0.85  # Slightly reduced crossover probability to balance exploration\n        self.F = 0.7  # Further reduced differential weight for finer step control\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Further increased initial temperature\n        self.cooling_rate = 0.85  # Modified cooling rate for gradual annealing\n        self.diversity_factor = 0.25  # Increased diversity factor to enhance exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction) + 1e-9  # Normalize to avoid division by zero\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Adjust cooling rate based on trials\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and an intensified Diversity Strategy for improved convergence and robustness.", "configspace": "", "generation": 88, "fitness": 0.4010826383116167, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.26.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8354726814116207, 0.8244397550779824, 0.83526418393293, 0.8403170518149985, 0.8402413077299813, 0.8334455200691909, 0.8318767293093658, 0.8337614306721117, 0.8298266467010195, 0.7114346568037502, 0.7011082188583075, 0.6806832993582907, 0.7003136282357173, 0.6798541936222651, 0.6826159622873205, 0.7119953292965888, 0.7355645440510441, 0.6934384806006755, 0.14104880679495602, 0.13299690911564233, 0.11772757533040545, 0.2274602749101554, 0.12849170240105867, 0.11398739537430358, 0.2528784432888801, 0.17469879659369636, 0.1283611455201148, 0.10747482549778375, 0.131264733581124, 0.11624791164657178, 0.12825236358765124, 0.12843053592825215, 0.12318841942887815, 0.1504441874504091, 0.09303669466552988, 0.10814740129252132, 0.9500599221140981, 0.9468113483279831, 0.9598817743587305, 0.967601172367235, 0.9626767800819348, 0.9558560151008346, 0.9777345174603647, 0.9628693864597724, 0.958800276993971, 0.5320957517000581, 0.5237999687530139, 0.5594401791535182, 0.5377405227465262, 0.5507688570098297, 0.5925163771333593, 0.512059525131356, 0.5614402640042652, 0.5191204179894486, 0.7880260721393777, 0.7458788568659769, 0.7148014791813032, 0.8059092224058388, 0.7134991351661437, 0.7966107053708611, 0.7466210552727687, 0.8180652053236953, 0.7594515625375837, 0.3762708071686104, 0.4036171978513232, 0.2651533500959906, 0.3560279238615438, 0.4711560534456818, 0.3005052456961057, 0.4001774751243967, 0.31224835061105427, 0.45579918988671253, 0.38096876860191864, 0.24913202346621754, 0.406749011348006, 0.36120774433757075, 0.4909891579675121, 0.44412023582598126, 0.3442552564007495, 0.3576034552443703, 0.4453409878858451, 0.33130370456755764, 0.29762024598582326, 0.4095759228954584, 0.3028166465446591, 0.31706706197691703, 0.3263136806806666, 0.31060795234928396, 0.40739963926056655, 0.32001861286675826, 0.46196609301034774, 0.4547527170789182, 0.5224616858009408, 0.47850582281937204, 0.36848219289077677, 0.47012029707277214, 0.49325294745620174, 0.45928709592609285, 0.5956344932213236, 0.14622642359086002, 0.12266603606691406, 0.1332885793732792, 0.2505155231269963, 0.24949126770738472, 0.09158141491093319, 0.18319750725991013, 0.17156780142240347, 0.19120710994343704, 0.3065031217468197, 0.3081251665859328, 0.2931095772957971, 0.3172744834933251, 0.3295931203714092, 0.33665047213077637, 0.29289547475951416, 0.28474003022660577, 0.28706008168653085, 0.7182709235209012, 0.6822855380393715, 0.7095967587338299, 0.7009166978830377, 0.6830276664494255, 0.7233953512830871, 0.695604692720269, 0.7211037416944918, 0.7086132095929651, 0.10175072979512334, 0.1099750524660894, 0.10992201466770835, 0.09789090754517404, 0.10137207817877092, 0.09497476942265926, 0.10065388587180113, 0.08916591823451869, 0.09089357526227015, 0.2361553608370731, 0.15632568820339454, 0.19112212681650875, 0.1906123271215444, 0.17161858818233244, 0.14959187659321638, 0.23468989762205417, 0.13727079782641793, 0.14273361925727712, 0.3819382790641508, 0.43494638874117797, 0.3398510135259124, 0.4292292455852704, 0.3819321597456343, 0.41602844718518284, 0.4294453467906535, 0.4232639992696894, 0.45500675241698463, 0.31479128748091667, 0.2919576331348199, 0.30165469787827637, 0.27766021417487163, 0.29919733559588635, 0.31580910850810884, 0.36231725064646325, 0.31563850868928844, 0.3161857859392393, 0.18825638176260062, 0.18681800483124467, 0.20352151896307413, 0.19814235989094997, 0.18511366447763833, 0.20809547529551398, 0.18383570338828736, 0.204546559409442, 0.2085587236195764, 0.2182272629402422, 0.45813277617698644, 0.18706790426524977, 0.5161930067650653, 0.37769159168238653, 0.21524169843054108, 0.42913477686322177, 0.33064169461436754, 0.2172676998118206, 0.1709743889699512, 0.7424375125725973, 0.18244729126478454, 0.8128390868120259, 0.8137244243868351, 0.7523577076833077, 0.6499344794193761, 0.7218195018539041, 0.16350325089016948, 0.20342727023078533, 0.7660886679311095, 0.614811459582659, 0.20097558047456932, 0.20729662528236859, 0.20502065810051462, 0.21117010290058558, 0.788080202713414, 0.7695009685734772, 0.18719877718150324, 0.18741397849386998, 0.18621420781953313, 0.1934951209633924, 0.20265345104927468, 0.18703524406612193, 0.20089729639787157, 0.1861099391063088, 0.18357357569407518, 0.07302615688884873, 0.07811108085900109, 0.08239902230976914, 0.08158273676958838, 0.07105796800489694, 0.08597464682320044, 0.08213813487711685, 0.07817631341584419, 0.08737866125071414]}, "mutation_prompt": null}
{"id": "6970dcd5-42c8-40ac-867c-4e38226e1f04", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "d630d0d6-e135-4ee7-82c6-cbaacc768a57", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "1b69fd72-a01e-400d-97d8-44a1cf5ed866", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted for larger exploration\n        self.prob_crossover = 0.85  # Balanced crossover probability\n        self.F = 0.9  # Enhanced differential weight for variability\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for better exploration\n        self.cooling_rate = 0.95  # Slower cooling rate for gradual annealing\n        self.diversity_factor = 0.25  # Increased diversity factor for variation\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Slower cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV5", "description": "A hybrid adaptive algorithm enhancing Differential Evolution with Simulated Annealing and dynamic diversity for robust optimization.", "configspace": "", "generation": 91, "fitness": 0.3259277502087446, "feedback": "The algorithm RefinedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7538272897603184, 0.7587158406568346, 0.7500261659518903, 0.7543887370277551, 0.767237302832656, 0.7513753774892338, 0.74850800668752, 0.7692162873835496, 0.7699276474914925, 0.5608980841884952, 0.6001819090268314, 0.6124938702211496, 0.5526300568065219, 0.5343267750398266, 0.6010154981053311, 0.6166020208089595, 0.5948265995749757, 0.6226477735732204, 0.17357640951469078, 0.14478395244422881, 0.14100733343229133, 0.2712697260319996, 0.1507131140330915, 0.14663655226786088, 0.25237846986240164, 0.17496416208703358, 0.2055718803016532, 0.11505877857957858, 0.11149071304318026, 0.10997758791086376, 0.12968367242314904, 0.12450904609916846, 0.15331106625696123, 0.13356309255545262, 0.14273308595966028, 0.11081344857956132, 0.9795438825006939, 0.9678465601386789, 0.9685791006592445, 0.9623630432527859, 0.9889585343873454, 0.9715741055020785, 0.982994389179079, 0.9813568574530226, 0.9395660435661212, 0.3895376946202428, 0.38393131005820524, 0.3695587369477593, 0.37116675850709424, 0.39772396899386664, 0.38764549686632277, 0.3932259480352662, 0.3689833399254694, 0.3785062008399728, 0.605613145282949, 0.6505255167979722, 0.5484787875117957, 0.6170734694339302, 0.6493972243650581, 0.5850015510319122, 0.6743460485608648, 0.6346570878553673, 0.5880567157755723, 0.22762275885538596, 0.28743646168197634, 0.29338791066624437, 0.2071333006759276, 0.26961990226658183, 0.23814689746261675, 0.2699707779778079, 0.2537616421873382, 0.30737907335269254, 0.2752774522996413, 0.24586240525158765, 0.12324921129462796, 0.25653674409276617, 0.2667550549721637, 0.2196024582758075, 0.2787576635732897, 0.32371946093267423, 0.31723591669688656, 0.11893227257602934, 0.18422357217482355, 0.15276797000814857, 0.18601935270939574, 0.18615931261397578, 0.12606116667923395, 0.19652705594060882, 0.1312131262627667, 0.12926259190301426, 0.2597146513730333, 0.2964453314741198, 0.28702358422378704, 0.32275070435998354, 0.2977186271823592, 0.35994958469838256, 0.3075588985177098, 0.3814949503095336, 0.2943923944814444, 0.04845672328694728, 0.05415410732947712, 0.07318931469016465, 0.050860958315645965, 0.06474321474434741, 0.11145546005118045, 0.07489653091616622, 0.04526488286793773, 0.07765593141209792, 0.1951982803794381, 0.17492252879860348, 0.21506151192615974, 0.17661300156361304, 0.2286849900582406, 0.17370299240495857, 0.1985667769271543, 0.1846968075503943, 0.1895257813946728, 0.52774688123095, 0.5275999305631685, 0.5406344281708747, 0.5582836133536215, 0.5583520803361363, 0.5687930381310684, 0.559018405059232, 0.5499953174347347, 0.5566765616370852, 0.08784809508855995, 0.08977139746052576, 0.10267638895733544, 0.08671435028216168, 0.09615620226013144, 0.10113456830361134, 0.09241010707624941, 0.09529497683415233, 0.08803838770885852, 0.24106787652686668, 0.2241879287432994, 0.19958209497564572, 0.17167177144197376, 0.16504822273720887, 0.17354733845470383, 0.2437654943726425, 0.16277786935149197, 0.18853924961443547, 0.3079227690519717, 0.3163998079045578, 0.3078630713823608, 0.3340479599139148, 0.2934660495490372, 0.28412605607624875, 0.3327314509656407, 0.3247825523188018, 0.28720609602406555, 0.21812069075863694, 0.23840997262895114, 0.21667705273861726, 0.23452982326530114, 0.2438788238699665, 0.20843624922561588, 0.23216701509731807, 0.2560213295555659, 0.20892693438089727, 0.18326503730795496, 0.17127776172570797, 0.204494675585555, 0.17279353222623173, 0.17946733131267523, 0.18328184005260006, 0.1950980234418893, 0.22147674459912536, 0.18132577985943166, 0.27339975666207816, 0.192360614129082, 0.18750609996957002, 0.19044715843679683, 0.2633818057632854, 0.28533531452740224, 0.19118316342547426, 0.41781359287169184, 0.1747950989120416, 0.6236438056404677, 0.7484497598648974, 0.6479793541669463, 0.18225404477578178, 0.18445184465426234, 0.18042106347189224, 0.18310405254019513, 0.18866682422809866, 0.7823474476276864, 0.6846329941359242, 0.6215001893244638, 0.5594898621805473, 0.6748160274479142, 0.5997348556621447, 0.5379257645668254, 0.20965394913570912, 0.20870610962940084, 0.1270800235910805, 0.18002081179827478, 0.1811827102900334, 0.17975344992370124, 0.18008355404958987, 0.18583772888584604, 0.19104703548487045, 0.1819810235253937, 0.18126126340432958, 0.20238554374820528, 0.07494429272763459, 0.0703561648058163, 0.07576189536667133, 0.0672173551717582, 0.07783667653610793, 0.0670468846959078, 0.07446477569135512, 0.07955418680707449, 0.068632221229602]}, "mutation_prompt": null}
{"id": "1f58f160-0e04-4f96-bb07-dfede8e7fcbf", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "4212a994-b31c-464f-8ef6-0d3019131534", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Larger population for better sampling\n        self.prob_crossover = 0.85  # Adjusted crossover probability for exploration and exploitation balance\n        self.F = 0.9  # Increased differential weight for diversity\n        self.current_evaluations = 0\n        self.temperature = 1.0  # Moderate initial temperature for smoother annealing\n        self.cooling_rate = 0.95  # Slower cooling rate for thorough exploration\n        self.diversity_factor = 0.3  # Enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    norm_direction = np.linalg.norm(direction) + 1e-9\n                    direction /= norm_direction\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.2\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Adjusted cooling rate for optimization\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "A novel adaptive algorithm integrating Enhanced Differential Evolution with Adaptive Simulated Annealing and Diversity Control for balanced exploration and exploitation across various dimensions.", "configspace": "", "generation": 93, "fitness": 0.3019003498823383, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7264372522128495, 0.7537192260464152, 0.7051140677136623, 0.7577049937336511, 0.7477133611977148, 0.729096908372699, 0.7340776221465828, 0.7298814308833709, 0.703813156548607, 0.5578153088195001, 0.5477313589213472, 0.5204448175800346, 0.5074665247774592, 0.5020178383278113, 0.5011197023430751, 0.5097735520828199, 0.5430087057816025, 0.4987877214195582, 0.15691907524816628, 0.10765316154475568, 0.1287368901490472, 0.16271757061436676, 0.14467206812981004, 0.16978527231207585, 0.13307357888506377, 0.13952835924166995, 0.2612583369137865, 0.10144429226200502, 0.11436634413365787, 0.10771159471233638, 0.12529555124215952, 0.10356789429354263, 0.15161218696254364, 0.11185173929032588, 0.17381536637989825, 0.11653714636008428, 0.9680162927055828, 0.9675019099227141, 0.9618099905061518, 0.9749196547755998, 0.9642573043911071, 0.9874731310797761, 0.9882792319937407, 0.9739957194502089, 0.9695587193687638, 0.35165902428232343, 0.3859158361403088, 0.34536744777912587, 0.37098987383009296, 0.34010882322642677, 0.35647472136425884, 0.370568804406161, 0.3216200987269291, 0.3414395950263649, 0.6206547276761081, 0.6000331211770262, 0.6057476286030448, 0.5528882475377401, 0.6127221537087628, 0.6903862633929914, 0.6562714078731307, 0.5818036495131894, 0.5262587263833358, 0.23132231323618568, 0.22089848213576146, 0.23661657612358333, 0.21505770349606423, 0.15566102517153868, 0.20744147924890244, 0.2550164068252775, 0.2524269626425981, 0.23255981485407518, 0.2513971546889906, 0.25225426060797695, 0.05287480779458675, 0.21655732849741882, 0.28413003736198894, 0.27236534289016645, 0.23701591407070022, 0.22183557768355744, 0.24435797833906203, 0.12373230206576047, 0.10862515338263234, 0.07517064527120709, 0.16309625663118166, 0.16918094134504247, 0.09159698104744807, 0.11349924181004045, 0.09402922279557879, 0.14451879280963043, 0.2648402637812908, 0.23538227947817203, 0.20765148216361096, 0.2144199294867949, 0.21875042400249145, 0.2432233739396782, 0.2612515150570843, 0.3171229021758337, 0.2749080417044777, 0.04238658734690148, 0.03951622395951304, 0.04480909759146756, 0.03054871185235475, 0.08204732216015764, 0.011310883370784564, 0.06511414366339774, 0.07907551483886033, 0.027386652606723016, 0.14967296318154166, 0.15949679874748923, 0.17431894345854904, 0.19575537443959512, 0.177073596942113, 0.15816464355190363, 0.15838306283912318, 0.1853778494908367, 0.1434710575286121, 0.5224374717548901, 0.4807412629775777, 0.5107126659058101, 0.539246235939332, 0.49089012267535814, 0.5169916367058215, 0.5108085654238563, 0.5346105725490533, 0.5086894642801294, 0.09028837020605929, 0.09340166000389383, 0.0989780649746923, 0.09581755757505273, 0.09743919440668092, 0.09417868452367661, 0.08153067923975921, 0.08891104934122107, 0.07887267031127743, 0.14785893833827501, 0.14892137506348513, 0.1318322124353385, 0.174130036291409, 0.21434849550025437, 0.14977651963814165, 0.1733788136431842, 0.1927763280843222, 0.25488112063016566, 0.2946430909422181, 0.27769732095805366, 0.29240384002702335, 0.3181716832850938, 0.2844793677152624, 0.28047521063231584, 0.33283710444785986, 0.2984024798054795, 0.33965617431809103, 0.19460202296429585, 0.2345924083451807, 0.21821378317892226, 0.20556276581784283, 0.19816191455515675, 0.21308848805202918, 0.2555775498234111, 0.2071997851270445, 0.2296277646381738, 0.18971518513500973, 0.18515741714242706, 0.1850398512007514, 0.1910158027269776, 0.18803942487125058, 0.18589072554395758, 0.18495037083658816, 0.1764577728211807, 0.1710841673183472, 0.1763275470202198, 0.18227902736900148, 0.17872607287554798, 0.1817725143929002, 0.1861216512648426, 0.24853073905870038, 0.1902596182497851, 0.21458785946496517, 0.18789413430920587, 0.7333284182664876, 0.6335830124831823, 0.7098581209121011, 0.1815227569434852, 0.641900536914431, 0.18325983687052827, 0.17507944954731935, 0.19555653951872332, 0.1675535381466159, 0.584971155863681, 0.6567012723809427, 0.5508853818634877, 0.5625892566470934, 0.6352919651786529, 0.1932341551552167, 0.21246243518764296, 0.15386651714465693, 0.1255968828025561, 0.1938347109860079, 0.18174863312730427, 0.1835398093541809, 0.18599640028667142, 0.1768325619903227, 0.18165707139190168, 0.19634809001352083, 0.21174146618848477, 0.18899318092685136, 0.072869459686419, 0.06894087284187411, 0.07486426112704281, 0.07662224614462898, 0.0672336876510371, 0.07637508449154906, 0.07119095690631183, 0.07424473809888676, 0.07081828228011744]}, "mutation_prompt": null}
{"id": "0028980f-b78e-4008-b3e3-a5ff417c783f", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAMV1:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.5 * dim)  # Adjusted population size for more diversity\n        self.prob_crossover = 0.85  # Modified crossover probability for balance\n        self.F = 0.7  # Further reduced differential weight for stability\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Increased initial temperature for better exploration\n        self.cooling_rate = 0.95  # More gradual cooling rate\n        self.diversity_factor = 0.25  # Increased diversity factor for more exploration\n        self.memory = np.zeros((5, self.dim))  # Adaptive Memory for storing best solutions\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        self.memory[0] = best_solution\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n                        self.memory = np.roll(self.memory, 1, axis=0)\n                        self.memory[0] = best_solution\n\n        return best_solution", "name": "EnhancedHybridDEASAMV1", "description": "An enhanced hybrid algorithm integrating Adaptive Differential Evolution with Dynamic Simulated Annealing and Adaptive Memory for improved exploration and exploitation.", "configspace": "", "generation": 94, "fitness": 0.4068233654279647, "feedback": "The algorithm EnhancedHybridDEASAMV1 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.834304008376799, 0.8352413005194755, 0.8251177938995778, 0.8622105447315795, 0.8376070484676029, 0.8638453285940357, 0.831506029255255, 0.8492918266355485, 0.8402355420354783, 0.7064045240544372, 0.7227338557786613, 0.6919425576774485, 0.7231082069235247, 0.7099255404938842, 0.7324572536485654, 0.7132745390179751, 0.7213511007340253, 0.7189952885303733, 0.13440115750480508, 0.13479116305209804, 0.16860296967189536, 0.1091344261371634, 0.12952052708970563, 0.12073265737367966, 0.1575329736876705, 0.18401457336752414, 0.12977166355932335, 0.12546505911092176, 0.14024437889696106, 0.11377532258334322, 0.12796201415079267, 0.1283603124088366, 0.12689063559097236, 0.10215239982003499, 0.11978634304267266, 0.13356894617496506, 0.9642549483928267, 0.9528970342913666, 0.9585200213397854, 0.9636261675390198, 0.9751788173374807, 0.9656566619976248, 0.9799851204982535, 0.9687924784554183, 0.9768914499673524, 0.5698314821483098, 0.5154257546668075, 0.570365548459438, 0.5503491239520035, 0.5542103222265221, 0.5746526597075365, 0.6105066434289518, 0.5611286142765994, 0.5615692551040223, 0.7809497331391196, 0.7873370093752061, 0.7697703089244369, 0.8125990117505254, 0.824935187309518, 0.775447788490234, 0.7498656446603731, 0.7811594529844759, 0.7650688679751183, 0.3363875304829401, 0.3493745752488183, 0.5188561361780548, 0.38303748204472277, 0.2798306436272534, 0.3744477096203406, 0.41524704431876114, 0.3890303292380517, 0.37036568856058616, 0.29594886101092266, 0.463471295447654, 0.20964065012653477, 0.38946649478888307, 0.27118567578036235, 0.4781238200249571, 0.4639191239831286, 0.32237837891740784, 0.20201260184164338, 0.06772470377221285, 0.33636670619139375, 0.35101151629469873, 0.3462170570480818, 0.11884694745514168, 0.4261896083133061, 0.32589679749269207, 0.3980657294630915, 0.35511946416070983, 0.5125996288132002, 0.5227905484366455, 0.5575217824213501, 0.48881027111635733, 0.46897621194269434, 0.5070884477498387, 0.5837581554736995, 0.5184112477249823, 0.5718135579696976, 0.12801949119969536, 0.08299430895833315, 0.13158311293608205, 0.22271604342479878, 0.28161885832218947, 0.27274979753352535, 0.12574609076080756, 0.11275921109389875, 0.24440236115727387, 0.35222602860666896, 0.31081818320225785, 0.2889010441566071, 0.29677597087729646, 0.3412936445854794, 0.33382237800978987, 0.31956861676704973, 0.28142330676630023, 0.291136558852204, 0.7174260069678591, 0.7109730589331217, 0.7229548707852655, 0.735128837703991, 0.7353510319919458, 0.7059766472357711, 0.7137071457438541, 0.6842858013386415, 0.7048937584893027, 0.09071447958870926, 0.09967992279883453, 0.0916241646081275, 0.088981302972165, 0.11397357147353471, 0.09657791949272465, 0.12691060445270264, 0.08531008229123294, 0.0968919908968563, 0.193461064011336, 0.18548538190598152, 0.16369008485556846, 0.2007037047336786, 0.4187097417712814, 0.18907607486864597, 0.19118996382340303, 0.15133047562329227, 0.16989983658171337, 0.38011904152588183, 0.4199001669677447, 0.3937097426705257, 0.40316652979811574, 0.4166525547761858, 0.40544916977515044, 0.4617590806314771, 0.4742986587668323, 0.45201903040837144, 0.3021757701535931, 0.29670450715233787, 0.28948844355819625, 0.27979629987065013, 0.26375698009930426, 0.3007339489550833, 0.2627351452357901, 0.29870109191221994, 0.3208368394913801, 0.2198142110543988, 0.19848937040673986, 0.18796174377285702, 0.19298499667453783, 0.18466265053584163, 0.1946083247574919, 0.2160991274285884, 0.20826203100719942, 0.2047171906957287, 0.19304340587759106, 0.23953223361603615, 0.19482358157327995, 0.20808760438714147, 0.21559039348002385, 0.27217881573944025, 0.3419436700843863, 0.19357177309449713, 0.19905613663017518, 0.8205542266339543, 0.19233620150394637, 0.7855026571124674, 0.8673986384548357, 0.737873654165375, 0.7156257895666558, 0.6316167049235817, 0.6910276992538376, 0.1740773764157777, 0.8306000272391405, 0.2072618537561134, 0.7601554869707097, 0.5748675357867412, 0.678374732441098, 0.6432013520358995, 0.16451513758778824, 0.7563934956598439, 0.2101940166027031, 0.19374640357553785, 0.18021613660796865, 0.18407507504843001, 0.17356026809628966, 0.18166445227717287, 0.17822949355708173, 0.18242368547158727, 0.1793496798911105, 0.18515149291436928, 0.07844365072363513, 0.08110543798006853, 0.06623100893789957, 0.08672148479786046, 0.07641096306504858, 0.07719117010298071, 0.07516477447437231, 0.07809179373738284, 0.0864332352797561]}, "mutation_prompt": null}
{"id": "7d76892d-c43e-4a33-84dd-d20935cbf3d3", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Increased population size for diversity\n        self.prob_crossover = 0.85  # Adjusted crossover probability for exploration-exploitation balance\n        self.F = 0.7  # Further reduced differential weight for stability\n        self.current_evaluations = 0\n        self.temperature = 1.8  # Higher initial temperature for enhanced exploration\n        self.cooling_rate = 0.95  # Slower cooling rate for gradual annealing\n        self.diversity_factor = 0.25  # Increased diversity factor for global search\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm integrating Adaptive Differential Evolution with Dynamic Simulated Annealing and increased exploitation-exploration balance for superior optimization performance.", "configspace": "", "generation": 95, "fitness": 0.40721399605322406, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8318715223897818, 0.8393748158776492, 0.8506780816237816, 0.8300375643987191, 0.8342864486609267, 0.8344628637457476, 0.850766851611752, 0.8348673761301368, 0.8374664054551657, 0.7101050007074003, 0.7343187054204415, 0.6955010104835678, 0.7197497453138979, 0.7176451791734502, 0.7335439840052544, 0.7184140229722269, 0.697401881267459, 0.7192405611166914, 0.22609753523347342, 0.14473922437692344, 0.2044131346819582, 0.12117162397666326, 0.136295966151729, 0.12185489583119069, 0.41448779207723896, 0.13678752338104383, 0.11197991321672873, 0.14843062716567712, 0.14558280633379095, 0.1082045288810225, 0.12565107943964027, 0.09905776180454817, 0.12990114307509337, 0.11829374540054616, 0.1346452636907065, 0.12196194246475389, 0.9775946898954, 0.9513304037263608, 0.9607452650185444, 0.9624810076672035, 0.9605222738105333, 0.9755156527619404, 0.9725830366819856, 0.9656280461174387, 0.9628620796795857, 0.5787952504299911, 0.5776715356755107, 0.5741017062137279, 0.5681572226934385, 0.5645229820982836, 0.4977252741087844, 0.5456999295959876, 0.5908206023289214, 0.6024565826509343, 0.731970112131701, 0.7261272498699018, 0.7730735092609515, 0.822003629868466, 0.8119344480233013, 0.7726949162758875, 0.778334920059756, 0.7859502796023452, 0.767942897483636, 0.35334559256537434, 0.3286712842526953, 0.47726353612463646, 0.33381772269646404, 0.3678191891248991, 0.40338028417371474, 0.3687940306728479, 0.3152606562013045, 0.45594929130295947, 0.42839320836325245, 0.05332198138493982, 0.40383970815745784, 0.5127356063517077, 0.43342726472501847, 0.43268669239970425, 0.3626631648597711, 0.4107482504052178, 0.33838912981165736, 0.40214078719714275, 0.3468050666583994, 0.3891914550181247, 0.4089105142445706, 0.3931141334705529, 0.3438653981130525, 0.33137318252063286, 0.4112804543986853, 0.3523900010000909, 0.48963076511873826, 0.532070249523686, 0.4742951168242946, 0.5028475192260451, 0.4607927783493281, 0.42802601857725675, 0.5436873121986854, 0.5428249066306481, 0.5592632197599774, 0.1515519517850702, 0.0916387677591941, 0.08358240133485229, 0.2236425272067628, 0.15465505910141053, 0.2415096762122313, 0.11953196813681133, 0.14968058712955046, 0.09541851928441081, 0.3173474605501285, 0.29442141925675036, 0.286043306753762, 0.36395890343464765, 0.34189194267086664, 0.3022263579257819, 0.30688739548505006, 0.3462133096900637, 0.2903125884575094, 0.7042298773951846, 0.690724319839068, 0.6906734859941899, 0.6939015576602742, 0.7373461379032717, 0.6275491103947147, 0.7228445321651642, 0.7131395992508347, 0.6722198601930872, 0.11978266671663784, 0.0987549069929381, 0.08839443694159654, 0.10847280290461236, 0.09411866714482509, 0.10114753732169846, 0.10109251408876885, 0.09608435624748368, 0.10498629001373105, 0.13641934465375039, 0.2156116661983447, 0.2311103108372301, 0.16020022570935577, 0.14642787394354928, 0.15930664886570955, 0.2060669313595448, 0.15964987913514084, 0.15786741565988993, 0.4169907124594663, 0.4128960019821175, 0.3624775564319327, 0.37324635947118967, 0.4326235671012635, 0.4088757787299705, 0.43973882999032754, 0.4546099990485324, 0.43637413862328733, 0.29049903366683316, 0.3048572321007391, 0.2748063286149157, 0.2928368231603721, 0.27835016652171063, 0.27423484545734933, 0.33329020763331263, 0.2932479462553079, 0.3591509284811565, 0.2067985954860586, 0.20031041286581563, 0.18380592642511973, 0.18219166077955085, 0.20089369793401934, 0.1936455367270793, 0.21362792322280733, 0.19966136500942, 0.18388809790557858, 0.22279107586859492, 0.248561344022327, 0.19978456007446954, 0.24466912976123023, 0.19879961435679117, 0.21885607178165212, 0.5107530218632177, 0.3052526677881586, 0.21260699157994745, 0.7549284539404748, 0.7824450381863, 0.8185141996650374, 0.7575820028863782, 0.18802051426178368, 0.8065596621422729, 0.19363614136449336, 0.6410172108416055, 0.7513213810041051, 0.7151235325765561, 0.20672992906669763, 0.7331566181480413, 0.6106571508490584, 0.1926341072607809, 0.6077069570591108, 0.20701960792024154, 0.8063642727901087, 0.20960602975440912, 0.17676003214571556, 0.17976115068693177, 0.16929994645344026, 0.17866937604049848, 0.17343590412493481, 0.17861973473139992, 0.20303692213620483, 0.18503352958622554, 0.17498709235389742, 0.08943483063057267, 0.0918260329899071, 0.07249586162923405, 0.07737497569074436, 0.07475648590740225, 0.07729381195633556, 0.07658121607906854, 0.0743040465272019, 0.06533863755132185]}, "mutation_prompt": null}
{"id": "44a0d1b7-4ab7-4894-9070-797b57a60bcc", "solution": "import numpy as np\n\nclass RefinedHybridDEASAV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 15 + int(0.5 * dim)  # Adjusted population size for balance\n        self.prob_crossover = 0.9  # Increased crossover probability for exploration\n        self.F = 0.8  # Slightly reduced differential weight\n        self.current_evaluations = 0\n        self.temperature = 1.5  # Increased initial temperature\n        self.cooling_rate = 0.9  # Dynamic cooling rate for better annealing\n        self.diversity_factor = 0.2  # Increased diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.1\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "RefinedHybridDEASAV4", "description": "A refined hybrid algorithm combining Adaptive Differential Evolution with Dynamic Simulated Annealing and Diversity Enhancement for improved convergence and robustness.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.85922370601837, 0.8475163926882501, 0.8540714081082315, 0.8702273736475575, 0.8813925138844556, 0.8717499285173933, 0.8508811053072628, 0.851398048280673, 0.8424386831033288, 0.7635196330821298, 0.7665834671650289, 0.7276661727589482, 0.7434288638958559, 0.7629564347944118, 0.7655915629382029, 0.7487905701723947, 0.7486823991561122, 0.7190976265480352, 0.15750838235193443, 0.1330964070906353, 0.1985895295637683, 0.3260576997386254, 0.23588683104617414, 0.4929649477915935, 0.14227364224714034, 0.36182213608479674, 0.15030695087324952, 0.12843044008097526, 0.1383963684393642, 0.10213912014003856, 0.1295724184639908, 0.11509494629722772, 0.11917606248366175, 0.16280535104401916, 0.12503860065499572, 0.12404083669015531, 0.9817542691725577, 0.9839982089125936, 0.9770066332135199, 0.9647534674602735, 0.9756161863634537, 0.9729275956356715, 0.978271721403529, 0.9660788169522789, 0.9802914987466835, 0.6620456134543368, 0.664851965858186, 0.6563295977439765, 0.6726646127821884, 0.6173069551177898, 0.6193856486414624, 0.6728179012265041, 0.6561450703722079, 0.68125790638636, 0.7759800474547028, 0.8077024564163396, 0.8243968658862956, 0.8667800102050033, 0.8663628312515044, 0.8097684108955925, 0.84203130447171, 0.8248790704345343, 0.8545178653879996, 0.5745176182516027, 0.5349944304716108, 0.13067504141307162, 0.5671842627458852, 0.6474169964749681, 0.5619431999936643, 0.4561768019249989, 0.5833979096242624, 0.5540322369110793, 0.535711813065795, 0.5841268124945365, 0.12055193326889535, 0.42697510809868433, 0.44116652918534294, 0.6374736013513553, 0.45134633082956577, 0.4749055849040932, 0.44240418175255947, 0.6411840330843294, 0.48896426080920197, 0.5805129645810465, 0.5057388703932348, 0.4785282582118794, 0.5943402354009798, 0.5580720088815564, 0.4976504229833053, 0.583384962744401, 0.656274556566407, 0.5062573837703714, 0.6935942902996377, 0.4489143268620468, 0.6120931080616827, 0.6653708611565912, 0.6512126227600029, 0.6777546645803029, 0.6568684193359013, 0.12814235999404755, 0.23125422057406486, 0.16331705135878216, 0.5321829714223241, 0.4717900505120184, 0.29079066779901186, 0.2471526484392722, 0.21392537101381504, 0.1624831276833718, 0.444778228795654, 0.40266016107703795, 0.4510853782530233, 0.4861793571548364, 0.4795533419023229, 0.4727443983278833, 0.389931240593006, 0.4554319668556871, 0.3960373582134107, 0.8088685811009629, 0.8006838456186895, 0.812831772512441, 0.7662167466998964, 0.7668940189989705, 0.8019483422104021, 0.7890025560013599, 0.7146112281781074, 0.746226002085165, 0.10184566062836731, 0.11412565790774298, 0.0942676909698763, 0.10650550540201098, 0.12681559664262299, 0.11710345835404623, 0.09773046235967597, 0.11699648765189774, 0.09255861450424274, 0.20139171676347778, 0.2598307672235637, 0.20861861425817974, 0.17347380335931561, 0.19012772386949828, 0.31052426333491445, 0.2052877286455912, 0.47465636322287175, 0.22612471271366252, 0.4853528641931314, 0.46740077429466076, 0.424851605755307, 0.4601964022195719, 0.500744932549384, 0.5174071275325118, 0.5064486344700516, 0.47501740935436465, 0.5270801407569357, 0.3773638850194473, 0.30959879941359236, 0.32167196452763824, 0.2975255472516788, 0.3751260275289644, 0.31584889219132695, 0.3676650431087799, 0.31063003988227067, 0.3520331770884506, 0.20720479758974353, 0.19420463595420623, 0.2163437144011624, 0.19022861306407035, 0.21583392744697472, 0.18859978029079616, 0.19975915401416966, 0.18172614642760632, 0.19420108540460312, 0.22714418922590063, 0.5705306176477947, 0.503193428069669, 0.5137854627945005, 0.5251741890895187, 0.3761801204044808, 0.512626384910625, 0.21982664939683105, 0.4559823885107247, 0.8556074280241479, 0.9093630055914392, 0.1538585024541147, 0.8585889810936481, 0.18759247001358936, 0.8736993401567559, 0.16611617596800465, 0.19133704160365628, 0.17510933815230767, 0.11322690920791234, 0.8065544618156055, 0.7862851172022982, 0.8228025691845948, 0.5931602701500196, 0.20496610909106594, 0.856846129660893, 0.2103241465181056, 0.8225049391738236, 0.18516214357377803, 0.18460095484344963, 0.2024835250227729, 0.19905112142197412, 0.17932253198602033, 0.17882735966090768, 0.18197886183178802, 0.18890405704240876, 0.17749320614119768, 0.08332796430923739, 0.07717058348685768, 0.08893548761421421, 0.07773507676744196, 0.08124199005279042, 0.10652891505525808, 0.078625183171117, 0.07803104732294064, 0.07827430526103762]}, "mutation_prompt": null}
{"id": "b7b4b253-e8f3-4f53-8699-077bf0644979", "solution": "import numpy as np\n\nclass EnhancedHybridSAMDSAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.3 * dim)  # Adjusted population size for diversity\n        self.prob_crossover = 0.85  # Balanced crossover probability\n        self.F_min = 0.2  # Minimum differential weight for adaptation\n        self.F_max = 0.9  # Maximum differential weight for adaptation\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature\n        self.cooling_rate = 0.95  # Optimized cooling rate\n        self.diversity_factor = 0.3  # Enhanced diversity factor\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                F = self.F_min + (self.F_max - self.F_min) * np.random.rand()  # Self-adaptive F\n                mutant = population[a] + F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate  # Dynamic cooling rate adjustment\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridSAMDSAV5", "description": "A novel hybrid optimizer that integrates Self-Adaptive Mutation Strategies with Dynamic Simulated Annealing and Diversity Amplification for enhanced exploration and exploitation balance.", "configspace": "", "generation": 97, "fitness": 0.4047506373336924, "feedback": "The algorithm EnhancedHybridSAMDSAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.877502238541616, 0.8849111961861942, 0.8941534735693871, 0.8891130303901846, 0.8808024062472778, 0.8845947460163717, 0.8704816151319598, 0.8857787126531245, 0.8757006104109737, 0.7687515379793202, 0.7632173572838813, 0.7697771089366268, 0.7851500510614531, 0.8004802129213793, 0.8110257655823936, 0.776871549231079, 0.747037535501148, 0.7911192317883945, 0.15457175488060493, 0.2693117032533029, 0.2805113713951426, 0.5067640823856541, 0.3697759743411563, 0.15657369067925775, 0.47027614592985156, 0.45547254782347824, 0.42649930037964956, 0.2267249190442392, 0.14212169508148365, 0.16315715514679718, 0.12887904362410063, 0.1503696600727692, 0.13129357292605914, 0.144011428261131, 0.1448492135317231, 0.14113479343470647, 0.9402712562276796, 0.9833023428376062, 0.9692147236052158, 0.945314292889435, 0.9299903901850181, 0.9720122866530176, 0.9830166990083339, 0.9752798368793052, 0.9580713337227508, 0.6639853505497819, 0.48976377628300194, 0.6160421088537067, 0.49189619100122917, 0.5850120215048304, 0.6720213411144673, 0.6383897548616404, 0.6896020891096506, 0.6380090084259441, 0.29927043989300384, 0.37258065029378584, 0.8534111983381466, 0.8088169701459208, 0.8740660180420269, 0.870599262741425, 0.8674043159917482, 0.23266270124051047, 0.802279188672987, 0.17129645929209147, 0.21529412175666363, 0.2396799441289884, 0.31851617250708875, 0.25321824971423124, 0.1620592935844497, 0.16885387853213119, 0.1533247146960468, 0.1946797213143715, 0.17107606929598662, 0.2047100195460564, 0.19208228288243967, 0.22020485706377035, 0.14985063327660886, 0.21813591382424946, 0.1675025937390765, 0.2099660043061944, 0.16839100968208298, 0.09084007309156572, 0.08563064289346767, 0.21612690265576573, 0.3174241969242949, 0.39858724398037726, 0.1699449247380147, 0.3171594018563971, 0.22631312841167328, 0.12991724222306367, 0.10326841197024861, 0.3417052237824527, 0.23765766018929457, 0.2534891768952193, 0.418429061235001, 0.22108313940362223, 0.5954226839243577, 0.39522432666524343, 0.185996158895691, 0.12130524356604888, 0.07551404139800066, 0.14443563547087757, 0.47262225581118134, 0.43377563999785784, 0.23891708087349428, 0.29532122882032474, 0.22117108497329674, 0.08418543193557582, 0.31714467018640113, 0.30109332476001016, 0.26267943625571866, 0.46900042887045545, 0.3721823268049975, 0.29341698873022837, 0.19278851465991997, 0.3393628648493342, 0.29129634339563315, 0.6849462129443102, 0.7492964530409412, 0.7661003509793325, 0.7148690339966576, 0.6759470926644868, 0.5580015686352109, 0.667322278648915, 0.7072108555136807, 0.5598032172361935, 0.11787278233599574, 0.09253526142475677, 0.10401106372853886, 0.1274846497693063, 0.10914252782625322, 0.12758996862494132, 0.10067935685783069, 0.11644158203851251, 0.13867003365441288, 0.19852537345095467, 0.18807295103143473, 0.23977130374252487, 0.5110582973477513, 0.228974372366622, 0.22598050165752048, 0.2423620097640663, 0.3182327217805042, 0.157457724887048, 0.5786232476262635, 0.5101114254687443, 0.5182049729920869, 0.5453956947055218, 0.5168026074974491, 0.5652108861767176, 0.5158031610855494, 0.6411080524003838, 0.5727887148282431, 0.4121362928622614, 0.3303776528286606, 0.2222027397786327, 0.4441420591048024, 0.4004840405205331, 0.4586652707851756, 0.47628453753725686, 0.5253791983353513, 0.4914962814191649, 0.21714464907619246, 0.20646033327956093, 0.19971295320197036, 0.2281454207451712, 0.21280001077551203, 0.19576675856416548, 0.2053342945961828, 0.19154326169476132, 0.20395818960758183, 0.5724163532789426, 0.7221611582851037, 0.24165605709535443, 0.49812963362017615, 0.24543676240798373, 0.2173311909942316, 0.23902433324317085, 0.6322873953875208, 0.2385525235544016, 0.8352660604777898, 0.176352796813535, 0.18360023883447885, 0.8937909096175344, 0.1977952155706455, 0.8700496655461266, 0.8700347578799108, 0.16473757482358686, 0.807337333612701, 0.8190602088177737, 0.5043978193305638, 0.8022200053778058, 0.2059514291436949, 0.20653962911275614, 0.16478775129976564, 0.20879398339798882, 0.21066678346466672, 0.519699746081745, 0.1741126117772126, 0.18418408025685107, 0.18076171868747404, 0.18340146086714804, 0.1787852426356913, 0.19256839090225542, 0.18494578386888127, 0.17338595059691064, 0.192177770421738, 0.0948044986534825, 0.09187723959941085, 0.07371714150803632, 0.07839554115698544, 0.0850149651353238, 0.07689766775076567, 0.09003828664072877, 0.08813752967268396, 0.0900861524997465]}, "mutation_prompt": null}
{"id": "5a9112dd-688a-4922-96a4-27b9d73b66fa", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.4 * dim)  # Adjusted population size for enhanced exploration\n        self.prob_crossover = 0.85  # Fine-tuned crossover probability\n        self.F = 0.7  # Adjusted differential weight for stability\n        self.current_evaluations = 0\n        self.initial_temperature = 2.0  # Higher initial temperature for more exploration\n        self.temperature = self.initial_temperature\n        self.cooling_rate = 0.95  # Slower cooling rate for sustained exploration\n        self.diversity_factor = 0.25  # Increased diversity factor for exploration\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                while a == i or b == i or c == i:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.randn(self.dim)\n                    direction /= np.linalg.norm(direction)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid optimization algorithm blending Adaptive Differential Evolution with Simulated Annealing, incorporating a dynamic diversity strategy for robust performance across various problems.", "configspace": "", "generation": 98, "fitness": 0.4103481163320366, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.8318715223897818, 0.8393748158776492, 0.8506780816237816, 0.8300375643987191, 0.8342864486609267, 0.8344628637457476, 0.850766851611752, 0.8348673761301368, 0.8374664054551657, 0.7101050007074003, 0.7343187054204415, 0.6955010104835678, 0.7197497453138979, 0.7176451791734502, 0.7335439840052544, 0.7184140229722269, 0.697401881267459, 0.7192405611166914, 0.22609753523347342, 0.14473922437692344, 0.2044131346819582, 0.12117162397666326, 0.136295966151729, 0.12185489583119069, 0.41448779207723896, 0.13678752338104383, 0.11197991321672873, 0.14843062716567712, 0.14558280633379095, 0.1082045288810225, 0.12565107943964027, 0.1134981188004216, 0.12990114307509337, 0.11829374540054616, 0.1346452636907065, 0.12196194246475389, 0.9775946898954, 0.9513304037263608, 0.9559845628649235, 0.9624810076672035, 0.9660232755835104, 0.9755156527619404, 0.9725830366819856, 0.9656280461174387, 0.9628620796795857, 0.5787952504299911, 0.5776715356755107, 0.5741017062137279, 0.5681572226934385, 0.5645229820982836, 0.4977252741087844, 0.5456999295959876, 0.5908206023289214, 0.6024565826509343, 0.731970112131701, 0.7261272498699018, 0.7730735092609515, 0.822003629868466, 0.8119344480233013, 0.7726949162758875, 0.778334920059756, 0.7859502796023452, 0.767942897483636, 0.35334559256537434, 0.3286712842526953, 0.47726353612463646, 0.33381772269646404, 0.3678191891248991, 0.40338028417371474, 0.3687940306728479, 0.3152606562013045, 0.45594929130295947, 0.42839320836325245, 0.05332198138493982, 0.40383970815745784, 0.5127356063517077, 0.43342726472501847, 0.43268669239970425, 0.3626631648597711, 0.4107482504052178, 0.33838912981165736, 0.40214078719714275, 0.3468050666583994, 0.3891914550181247, 0.4089105142445706, 0.3931141334705529, 0.3438653981130525, 0.33137318252063286, 0.4112804543986853, 0.3523900010000909, 0.48963076511873826, 0.532070249523686, 0.4742951168242946, 0.5028475192260451, 0.4607927783493281, 0.42802601857725675, 0.5436873121986854, 0.5428249066306481, 0.5592632197599774, 0.1515519517850702, 0.0916387677591941, 0.08358240133485229, 0.2236425272067628, 0.15465505910141053, 0.2415096762122313, 0.11953196813681133, 0.14968058712955046, 0.09541851928441081, 0.3173474605501285, 0.29442141925675036, 0.286043306753762, 0.36395890343464765, 0.34189194267086664, 0.3022263579257819, 0.30688739548505006, 0.3462133096900637, 0.2903125884575094, 0.7042298773951846, 0.690724319839068, 0.6906734859941899, 0.6939015576602742, 0.7373461379032717, 0.6275491103947147, 0.7228445321651642, 0.7131395992508347, 0.6722198601930872, 0.11978266671663784, 0.0987549069929381, 0.08839443694159654, 0.10847280290461236, 0.09411866714482509, 0.10114753732169846, 0.10109251408876885, 0.09608435624748368, 0.10498629001373105, 0.13641934465375039, 0.2156116661983447, 0.2311103108372301, 0.16020022570935577, 0.14642787394354928, 0.15930664886570955, 0.2060669313595448, 0.15964987913514084, 0.15786741565988993, 0.4169907124594663, 0.4128960019821175, 0.3624775564319327, 0.37324635947118967, 0.4326235671012635, 0.4088757787299705, 0.43973882999032754, 0.4546099990485324, 0.43637413862328733, 0.29049903366683316, 0.3048572321007391, 0.2748063286149157, 0.2928368231603721, 0.27835016652171063, 0.27423484545734933, 0.33329020763331263, 0.2932479462553079, 0.3591509284811565, 0.2067985954860586, 0.20031041286581563, 0.18380592642511973, 0.18219166077955085, 0.20089369793401934, 0.1837064855202658, 0.21362792322280733, 0.19966136500942, 0.18388809790557858, 0.22279107586859492, 0.248561344022327, 0.19978456007446954, 0.24466912976123023, 0.19879961435679117, 0.21885607178165212, 0.5107530218632177, 0.3052526677881586, 0.21260699157994745, 0.7549284539404748, 0.7824450381863, 0.8185141996650374, 0.7575820028863782, 0.18686758476119947, 0.8065596621422729, 0.19363614136449336, 0.7160224116578013, 0.6364022744494273, 0.7151235325765561, 0.20877402553750968, 0.7331566181480413, 0.6106571508490584, 0.1926341072607809, 0.7307759125936166, 0.7961633638959497, 0.8063642727901087, 0.20960602975440912, 0.17676003214571556, 0.17976115068693177, 0.16929994645344026, 0.17866937604049848, 0.17343590412493481, 0.17861973473139992, 0.20303692213620483, 0.18503352958622554, 0.17498709235389742, 0.08943483063057267, 0.0918260329899071, 0.07249586162923405, 0.07737497569074436, 0.07475648590740225, 0.07729381195633556, 0.0751196181522018, 0.0743040465272019, 0.06533863755132185]}, "mutation_prompt": null}
{"id": "678ed988-ca65-4681-b2f4-b533fc5676f5", "solution": "import numpy as np\n\nclass EnhancedHybridDEASAV5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(0.6 * dim)  # Larger population for better search space coverage\n        self.prob_crossover = 0.85  # Balanced crossover probability to maintain exploration and exploitation\n        self.F = 0.9  # Higher differential weight for stronger mutation\n        self.current_evaluations = 0\n        self.temperature = 2.0  # Higher initial temperature for better escape from local optima\n        self.cooling_rate = 0.95  # Slower cooling rate for prolonged exploration\n        self.diversity_factor = 0.3  # Enhanced diversity factor for better population variety\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, self.dim)\n        )\n        fitness = np.array([func(ind) for ind in population])\n        self.current_evaluations += self.population_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.current_evaluations >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = indices\n                if a == i or b == i or c == i:\n                    continue\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.diversity_factor:\n                    direction = np.random.uniform(-1, 1, self.dim)\n                    mutant = population[i] + direction * (self.upper_bound - self.lower_bound) * 0.15\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.prob_crossover\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                self.current_evaluations += 1\n                delta_e = trial_fitness - fitness[i]\n                acceptance_probability = np.exp(-delta_e / (self.temperature + 1e-9))\n\n                self.temperature *= self.cooling_rate\n\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n        return best_solution", "name": "EnhancedHybridDEASAV5", "description": "An enhanced hybrid algorithm integrating Adaptive Differential Evolution with Dynamic Simulated Annealing and Adaptive Diversity Introduction for superior convergence and robustness.", "configspace": "", "generation": 99, "fitness": 0.3054582247025194, "feedback": "The algorithm EnhancedHybridDEASAV5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "6c737c42-6f61-46fb-907b-33fa9ffbc123", "metadata": {"aucs": [0.7239121161323111, 0.7106795742705758, 0.7289983123244984, 0.7155651418116578, 0.7277485944279596, 0.7491181238218304, 0.7141613194405919, 0.7280210518495989, 0.7228744442350947, 0.5477685020364829, 0.49034411161145564, 0.5070221659887714, 0.5314270349496165, 0.49125376215673044, 0.5083835978923759, 0.5369492802532014, 0.5113219275865284, 0.5302492743250873, 0.12959305325070125, 0.13081586677228274, 0.13181494131537252, 0.13078999967915883, 0.17648096987619588, 0.12829410664365382, 0.15119222711083424, 0.11634886681973644, 0.12375288669415929, 0.1226464774592183, 0.12148048000558798, 0.1287862571022237, 0.1014911771067396, 0.1005974801659022, 0.1226989278285846, 0.10243586988231346, 0.10081537739413093, 0.11562941428514184, 0.9795644703769879, 0.9696856259486843, 0.9747140855736851, 0.9803055301384758, 0.9819979073909814, 0.9450952555416998, 0.9819302944923148, 0.9754210218593237, 0.9625899088843908, 0.37879353335767085, 0.3566106666556066, 0.3894813311569163, 0.35616399825414335, 0.39210327129583333, 0.3272952504607397, 0.3742828908099308, 0.34682088202860173, 0.34382383584483356, 0.650926731012313, 0.29164345401389047, 0.6513072614506319, 0.6326759351393991, 0.5982736507100374, 0.5431799399790032, 0.6301446425315298, 0.6013852421734409, 0.6183762341415588, 0.2260860793510927, 0.26303455682934873, 0.23129752044095375, 0.2394485638978796, 0.28351890057812557, 0.22162071041508935, 0.248409951278054, 0.26642268325210405, 0.2108353849352569, 0.12208934840213426, 0.2157133696320882, 0.21247228865632328, 0.24980951431057596, 0.22689152788999256, 0.21846710197432762, 0.26634540988572064, 0.2647676546663188, 0.21460533118105285, 0.13716385229917738, 0.13725650799199485, 0.10125222804306744, 0.17726737423746086, 0.21171540678714706, 0.14428588466116998, 0.14718795504077842, 0.10944339605164821, 0.14497308569628253, 0.22542618871534725, 0.2695724553625847, 0.22842605272024907, 0.2750787380205342, 0.28390827107151895, 0.2324053704494553, 0.3045935426693319, 0.33986883463693207, 0.2591983216825897, 0.06913152766093211, 0.03776890470237382, 0.02731557610684321, 0.02725928901428598, 0.051337319649434, 0.030772768513712467, 0.09130604515775398, 0.03669594591392322, 0.05750528208566086, 0.17003885270125807, 0.13679963271471351, 0.14936660967736004, 0.18228035375882234, 0.18364249341676953, 0.1602398058083423, 0.17877342522727335, 0.1508170203301572, 0.1779747397306375, 0.5046094384334902, 0.5240200954540744, 0.5284343991184539, 0.5588930486529744, 0.5154003529389649, 0.5182521598900403, 0.5513094850279521, 0.5099016151972589, 0.502997448128524, 0.09138218729067737, 0.0880718163633264, 0.08814968255087208, 0.08938676327353734, 0.10373761904069834, 0.08255637584987252, 0.10324167553697139, 0.10527299248355615, 0.07898240800508649, 0.3314209345886332, 0.16038038267612942, 0.14843140016208467, 0.16094058878869433, 0.1544602769061788, 0.16089746194808885, 0.20232477410742677, 0.22904571396890372, 0.20488625826106976, 0.3182039885381569, 0.2851498633031657, 0.2833463785099911, 0.2713637057621928, 0.31823831942724423, 0.271948540568833, 0.3200514939461907, 0.3148077000807443, 0.3132097815089929, 0.2326299500470851, 0.24806973411776212, 0.19733247800706644, 0.2195608863921671, 0.19399132976924804, 0.2017928983095657, 0.22998617827410295, 0.22524533982208972, 0.25130949599256813, 0.17068032237455988, 0.17124810104492294, 0.17927785603868418, 0.18142700954514668, 0.16782537325500635, 0.19669986944669693, 0.1851236217175607, 0.18431079283911123, 0.19463880586733617, 0.1823191767478094, 0.1861809623173455, 0.18887340150432042, 0.18173763497470108, 0.18065666862296803, 0.18302342779723024, 0.18638787319761996, 0.18219598547219262, 0.17651922199777748, 0.1805386632747159, 0.6395691588257778, 0.15253644441319447, 0.6288947286095758, 0.5141080441938304, 0.1898749818105896, 0.6295196111156229, 0.6136909768835312, 0.1845351492314533, 0.19806025323297394, 0.5356399768778861, 0.41721956920793213, 0.5998466960262454, 0.48074969489565667, 0.43587793697065513, 0.20967550795731627, 0.7198013098627474, 0.6198488518552925, 0.17580392550313484, 0.18361797538592195, 0.17517160806702647, 0.18555144375324895, 0.18633430590136646, 0.19262351124059496, 0.18666966959260856, 0.18333572184139046, 0.17771535319029086, 0.0718910251291589, 0.07081817269887491, 0.07213071966994589, 0.06991746323335213, 0.07272495674887414, 0.06781411090970157, 0.0681442223762262, 0.07050793039425429, 0.06952482146861416]}, "mutation_prompt": null}
