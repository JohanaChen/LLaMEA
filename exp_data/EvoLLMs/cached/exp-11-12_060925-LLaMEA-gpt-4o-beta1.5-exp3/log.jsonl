{"id": "9e188d27-4f79-46ea-9744-f024f7e2d2ee", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initialize the population\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = np.arange(self.population_size)\n                indices = indices[indices != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Mutation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluate the trial solution\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Utilize adaptive differential evolution with dynamic parameter control to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.2633496909375232, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "9d539016-88c4-48db-8634-b21792f7b707", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 1, "fitness": 0.31965322341989405, "feedback": "The algorithm MultiSwarmPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "9e188d27-4f79-46ea-9744-f024f7e2d2ee", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "91c8f5e2-5904-45a1-98db-5684f6b41859", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "cd5dba13-701c-4d05-9339-68c60a548078", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "5f15ad93-26d4-41c3-bae8-89f9538c16cf", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "2671a31f-c755-47fd-ab3c-1cd4f1ea20b1", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "a5342aef-455a-461b-97fd-28e7c2a85930", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "aa6c683f-daa5-4930-8ac9-53b8fa2725b6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover rate\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities for PSO\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # PSO update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # DE mutation and crossover\n                indices = np.random.choice(self.swarm_size, 3, replace=False)\n                x1, x2, x3 = positions[indices[0]], positions[indices[1]], positions[indices[2]]\n                mutant_vector = np.clip(x1 + self.f * (x2 - x3), self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, positions[i])\n\n                # Evaluate positions\n                fitness_pso = func(positions[i])\n                fitness_de = func(trial_vector)\n                self.evaluations += 2  # Two function calls\n\n                # Choose the better method\n                if fitness_pso < fitness_de:\n                    new_position = positions[i]\n                    new_fitness = fitness_pso\n                else:\n                    new_position = trial_vector\n                    new_fitness = fitness_de\n\n                # Update personal and global bests\n                if new_fitness < personal_best_values[i]:\n                    personal_best_positions[i] = new_position\n                    personal_best_values[i] = new_fitness\n                    if new_fitness < global_best_value:\n                        global_best_position = new_position\n                        global_best_value = new_fitness\n\n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm and Differential Evolution combines exploration of PSO with the exploitation of DE to balance between global and local search.", "configspace": "", "generation": 7, "fitness": 0.2959184240813959, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.7676445553396111, 0.7198773676149797, 0.7430862574972634, 0.7542816152140059, 0.7748751514020739, 0.7910342826062496, 0.7427963654100627, 0.73942015012405, 0.7622751555129487, 0.45867187811311605, 0.38293852061435174, 0.48180195254132496, 0.4586492797632392, 0.4397071976086847, 0.4838559890694104, 0.2632605713736662, 0.5017881873449231, 0.448370979396186, 0.17205114472902094, 0.1469088943305754, 0.16470308186633376, 0.2589914169366777, 0.3738566979793081, 0.13221870863993568, 0.14191356862564208, 0.14687867137069355, 0.39366573881475797, 0.13335009192437397, 0.10962797597648055, 0.1307497047431605, 0.15092949993787552, 0.12820325366743723, 0.11762005338026305, 0.1437814826431837, 0.10408340929921778, 0.10670508940608125, 0.9838811143033996, 0.9801218915697518, 0.9807076894645227, 0.9756876916343221, 0.9847305591529099, 0.9778441022569376, 0.981976238184471, 0.9798983259849492, 0.9840052642096013, 0.520199117568354, 0.5239843465113219, 0.4965078772373842, 0.15082985723520959, 0.5506035649757184, 0.15180694246645, 0.4883636314321914, 0.46275716271330625, 0.4835052543553615, 0.21723005298377152, 0.7587247187400044, 0.7306660800210631, 0.20126536893538183, 0.25506079818886906, 0.19224769099571382, 0.35858575407487114, 0.14435389624811612, 0.6748902320518291, 0.20693877320591614, 0.10471176686200556, 0.17803363930629457, 0.12239251595701695, 0.1284613943906614, 0.12806352463412463, 0.2549179406420572, 0.20208587828576652, 0.19900249126369762, 0.20161313907886513, 0.12369461186903352, 0.21496030978847136, 0.2307010824774588, 0.19101107413618212, 0.18821641939373368, 0.24733735078859365, 0.12453245231054844, 0.22265025510843883, 9.999999999998899e-05, 0.04795458062747804, 0.04867392460256725, 9.999999999998899e-05, 9.999999999998899e-05, 0.011566558849967934, 0.07500926084002735, 0.003919310212457505, 0.01045305147062281, 0.15268160999548275, 0.03479424593898128, 0.13867298467299793, 0.08974251442347125, 0.02222104647619727, 0.027968352751324033, 0.10375647710745561, 0.05460329039544232, 0.06960870915734707, 0.04161579899152146, 9.999999999998899e-05, 0.0744635719155976, 0.1400496869200486, 0.05857426525823284, 0.07612941018528985, 0.1011662375174599, 0.07539651284067572, 0.15335501300965193, 0.11950561947744831, 0.04009413627256386, 0.14245101045143949, 0.1324928952506953, 0.11175584537377858, 0.22447882638080596, 0.053891763026965966, 0.05505130890392684, 0.08003963301569661, 0.5018252157774865, 0.5184159312068808, 0.49428987272076663, 0.5497302812897404, 0.5204543079656566, 0.567338424234741, 0.5351263448647029, 0.5140461344578084, 0.5290165810179377, 0.13486455675284925, 0.10159159608934965, 0.13453170420488714, 0.11407322334090275, 0.11139007820106839, 0.13921182999011383, 0.12418907574246918, 0.10552791876391399, 0.16669464449587978, 0.22808436754026085, 0.19774956098381113, 0.30139726848727444, 0.21081181539278437, 0.25545909378748943, 0.3038143854153721, 0.2645530175738623, 0.301834160122601, 0.15460751153145957, 0.38693668905926204, 0.3983819371155469, 0.3617364162378415, 0.32969322446321425, 0.4148439149427391, 0.43531343011786783, 0.4752207232690774, 0.4132590699886063, 0.38132767410568325, 0.24327696877999683, 0.21107688341025643, 0.3037567553798448, 0.18305597126950046, 0.3033539466188119, 0.32340252179511897, 0.22535018389096972, 0.37022135197674755, 0.3114135280634066, 0.2349362235299589, 0.21027286548363566, 0.20875360603751625, 0.2242684282568529, 0.23465746825277012, 0.21025152504343325, 0.23928244568138812, 0.2159363934598144, 0.20134689114161097, 0.1789771798530141, 0.416686743985649, 0.19996652264286197, 0.23405586639193865, 0.2053139367911806, 0.23871158030403938, 0.2124245462177341, 0.24100583826885236, 0.20329473060072178, 0.1865153018568102, 0.1700169002253883, 0.1520965649517757, 0.7528914313383677, 0.19990776448287306, 0.18820985520989275, 0.14186160684040372, 0.7937189410123748, 0.8357583662611204, 0.6741010974273609, 0.21003502737916502, 0.7138243823341934, 0.20518249085577767, 0.16650471112099807, 0.16430802700620517, 0.15398088443936453, 0.758270554019568, 0.7464145220037895, 0.1846483037410952, 0.19897007404326272, 0.19028616951949973, 0.20175527004566451, 0.21386550064260768, 0.18982790289968166, 0.20141848318389965, 0.23351237799644864, 0.18517077855533304, 0.09266045106692089, 0.09233790300109301, 0.10246501059694124, 0.08805640372852863, 0.09132844718192867, 0.08643029164513627, 0.10127057218394131, 0.08918097239576894, 0.09633213988337497]}, "mutation_prompt": null}
{"id": "07cf1dc6-bc45-495e-bcea-4a0f2cebf160", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 15 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = self.population_size\n\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        best_value = fitness[best_index]\n\n        while self.evaluations < self.budget:\n            # Adaptively resize population based on remaining budget\n            if self.evaluations > self.budget * 0.8:\n                self.population_size = max(4, int(self.population_size * 0.8))\n\n            next_population = np.copy(population)\n\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n\n                # Differential mutation\n                a, b, c = population[indices]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial_vector = np.copy(population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_points] = mutant_vector[crossover_points]\n\n                # Evaluate trial vector\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    next_population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_value:\n                        best_solution = trial_vector\n                        best_value = trial_fitness\n\n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n            population = next_population\n\n        return best_solution, best_value", "name": "AdaptiveDifferentialEvolution", "description": "Implement a self-adaptive differential evolution with dynamic population resizing for efficient exploration and exploitation over varying dimensions.", "configspace": "", "generation": 8, "fitness": 0.28850795137684787, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.20.", "error": "", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.6622993312699079, 0.6447476383452035, 0.6550814765219771, 0.6562123383876294, 0.6748265088669823, 0.6611436124759538, 0.6593024217576631, 0.6613251079550049, 0.6681753975466618, 0.3762583064230616, 0.39392105219589346, 0.40443006672146675, 0.411460311768827, 0.3847903778147729, 0.40006110410875506, 0.4050574685931264, 0.37586379754764043, 0.4188382338888379, 0.09781855868998501, 0.10881858442560222, 0.11305729437011292, 0.11110291537896688, 0.10515693025850703, 0.1235491993984753, 0.1142342923661881, 0.1006584959424055, 0.09296687538475124, 0.0833801599129178, 0.10838015958296543, 0.09125541608170062, 0.09714807559504224, 0.08875865702042796, 0.08116992992116379, 0.08182329511972852, 0.09588225739440859, 0.09894010095556227, 0.8282049065718825, 0.9114413047982486, 0.8131495926905239, 0.8291647961988414, 0.7770977706260846, 0.8397581969399526, 0.9230514349970069, 0.9142069819736163, 0.9302816799831903, 0.30473752750674443, 0.27702217022169084, 0.2722564992217156, 0.30156844286854334, 0.2817205423241449, 0.3000162412266266, 0.3024794944824559, 0.32824902892263685, 0.30775534487103207, 0.6078957299993184, 0.6490068991753426, 0.6359945210545483, 0.6422947656209902, 0.6159906241233988, 0.6282490575798503, 0.609698265371817, 0.6545234614270007, 0.6496827642031555, 0.1856183107989401, 0.16432478843556542, 0.1708793289593774, 0.18252065695976927, 0.1582422662427465, 0.16792884422888632, 0.15686763694243322, 0.16628560035016893, 0.15688452835241273, 0.1323328600360998, 0.13767862021386967, 0.29832451809087257, 0.15440695879841382, 0.17259241429514682, 0.218235912120473, 0.1596116989988341, 0.272834373165616, 0.18354537129669213, 0.22609935140245518, 0.19274101471658034, 0.18814087990668382, 0.20687447943857307, 0.16841989832839677, 0.1981974919691334, 0.18349511099090798, 0.1899802124409684, 0.18681576451854287, 0.31659595548775255, 0.3298009886866847, 0.36417784362279804, 0.34410553784713804, 0.3089740906223911, 0.33845665607578446, 0.3620206259097859, 0.3484637509602603, 0.3618987874915933, 0.07587207887819714, 0.07396872647117925, 0.06357152359869267, 0.11065557897457934, 0.0605436330742648, 0.06685454578625194, 0.09422296019976328, 0.07947570567857598, 0.07144488903901292, 0.18062459550893195, 0.17387203334583679, 0.18834357846024818, 0.19216858561445715, 0.19667127596484713, 0.2037955776439283, 0.19717202553088964, 0.1918716974567084, 0.21785285669289733, 0.5560755860702218, 0.5261087025116005, 0.5243316307435544, 0.5241297635346408, 0.5517486124925767, 0.5032142797272815, 0.5297982727696551, 0.5293253281812087, 0.5520184556219794, 0.09292325635271559, 0.08579235635487603, 0.10462026287120729, 0.103864955812906, 0.08394657977079567, 0.09258587993308887, 0.08836862146888014, 0.09636030477659296, 0.10783309371240757, 0.16675529770468223, 0.12868760571573945, 0.16321467798639677, 0.1564933390981742, 0.16478604177914746, 0.14084960089012488, 0.1385198032791468, 0.1342471849037341, 0.1301628382870833, 0.3272108359119946, 0.3085370964804106, 0.3175685973662591, 0.3327371042836711, 0.31580615779369114, 0.32915416129619424, 0.32291162949360463, 0.33791912509691846, 0.32844658082125056, 0.24539054884417477, 0.2514420397045346, 0.2570636545752525, 0.23922877951108557, 0.23347633328200834, 0.25956819748562, 0.25709695992222303, 0.24864096478707953, 0.2627196480475248, 0.19421051861409766, 0.19795322125752723, 0.18972106027310898, 0.18072204918857682, 0.1888120548913761, 0.18734423652731136, 0.20284395985649084, 0.18842194711110982, 0.19254430103081155, 0.20849074244983634, 0.18112754149924826, 0.17850978480299706, 0.19025773716022598, 0.19006224052696552, 0.188629587549351, 0.18493960908121354, 0.18395294508149984, 0.1776126667000637, 0.5285780582834734, 0.394484921270416, 0.4826214909165265, 0.3240369971106085, 0.1679897553141363, 0.48023219521414406, 0.24387134527039667, 0.5076886346970088, 0.17368286818713896, 0.2218936621268628, 0.3721820486007268, 0.4569833013132881, 0.25196045493828434, 0.5211824073213396, 0.2391355204611163, 0.2042496607757155, 0.19179680116122078, 0.5921625845934511, 0.19639603044543152, 0.18168577642071182, 0.19728106960271274, 0.20470114482361446, 0.18646394135262345, 0.20743704709481492, 0.19418298936187928, 0.1887010052389294, 0.19821332690777094, 0.08686713312118954, 0.0946700942200227, 0.07391088913670629, 0.06358934697476926, 0.07943289838971301, 0.07919665854073643, 0.07474085944627473, 0.079533484399255, 0.08139535211975912]}, "mutation_prompt": null}
{"id": "b0f4800a-c238-469b-87f4-5282e385e7bc", "solution": "import numpy as np\n\nclass HarmonyDifferentialSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.9  # Harmony memory consideration rate\n        self.par = 0.3  # Pitch adjustment rate\n        self.bandwidth = 0.05\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = self.lower_bound + np.random.rand(self.harmony_memory_size, self.dim) * (self.upper_bound - self.lower_bound)\n        harmony_values = np.apply_along_axis(func, 1, harmony_memory)\n        self.evaluations = self.harmony_memory_size\n\n        best_index = np.argmin(harmony_values)\n        best_harmony = harmony_memory[best_index]\n        best_value = harmony_values[best_index]\n\n        while self.evaluations < self.budget:\n            new_harmony = np.empty(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    # Memory consideration\n                    new_harmony[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n\n                    # Pitch adjustment\n                    if np.random.rand() < self.par:\n                        new_harmony[i] += self.bandwidth * (np.random.rand() * 2 - 1)  # Adjust within bandwidth\n                else:\n                    # Random selection\n                    new_harmony[i] = self.lower_bound + np.random.rand() * (self.upper_bound - self.lower_bound)\n\n            # Ensure within bounds\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            fitness = func(new_harmony)\n            self.evaluations += 1\n\n            # Replace worst harmony if new harmony is better\n            worst_index = np.argmax(harmony_values)\n            if fitness < harmony_values[worst_index]:\n                harmony_memory[worst_index] = new_harmony\n                harmony_values[worst_index] = fitness\n\n                # Update best harmony\n                if fitness < best_value:\n                    best_harmony = new_harmony\n                    best_value = fitness\n\n            # Early stopping if budget is exhausted\n            if self.evaluations >= self.budget:\n                break\n\n        return best_harmony, best_value", "name": "HarmonyDifferentialSearch", "description": "Harmony Search with Differential Evolution inspired pitch adjustment for dynamic exploration and exploitation.", "configspace": "", "generation": 9, "fitness": 0.2538675905650217, "feedback": "The algorithm HarmonyDifferentialSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.7102080799712184, 0.6723689837492854, 0.6498501375844483, 0.696141963647599, 0.6756720519059529, 0.7111698587873547, 0.6730141621615903, 0.6956002718127698, 0.7068770807665721, 0.2930089152405523, 0.2779238111048741, 0.42970107504262245, 0.41229367657852134, 0.3526823747600387, 0.2385534269149412, 0.2772937123535235, 0.3329957259225458, 0.35065267445547654, 0.18734047262235975, 0.34102146296863867, 0.33230837096298294, 0.2762405211033734, 0.4099170397794968, 0.26212940018134245, 0.37723954311268804, 0.42280010622474884, 0.3546947036841811, 0.16939148456447095, 0.3038431859842564, 0.175635073361463, 0.3678011611352876, 0.3757620538457026, 0.18201690167188167, 0.3088639102522739, 0.3603661809814487, 0.37356612975012404, 0.8244458605646072, 0.7245616307728662, 0.8273888272012395, 0.8075967809521395, 0.7779669330763875, 0.8238215398341473, 0.6923503983410213, 0.8149523267683838, 0.8387166168117951, 0.21530441658769894, 0.18887696399725995, 0.3184231224250902, 0.32084167447212153, 0.3398775697910802, 0.32190264479336816, 0.22345307255206748, 0.25528757903015575, 0.25491075902872207, 0.21002412190162512, 0.208150418140717, 0.14867724238781488, 0.2707535729996403, 0.27521516255523826, 0.1893295615434486, 0.16901464198298088, 0.19241148824543186, 0.1605995830770871, 0.26083749072364426, 0.18271550377757773, 0.220393863210938, 0.14389740843330223, 0.23341435446990266, 0.14724981365421208, 0.14671865157872377, 0.1852313412561215, 0.32661106899675296, 0.13245043137332324, 0.12463903738492432, 0.13533138761732078, 0.2028280325790135, 0.14526260576416716, 0.13085289833742286, 0.12787188290599438, 0.1293042841995239, 0.15114365183738487, 0.004655564803768719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007183886149503271, 9.999999999998899e-05, 0.0667884331000772, 0.03817991871325521, 0.03230315441712994, 0.10539459086370295, 0.03934054161146616, 0.02657762211614567, 0.04186677828822971, 0.06270956621544288, 0.155426078691287, 0.07858596343914737, 0.09452213770031181, 0.09412406742260426, 0.206340608068162, 0.09135162675967945, 0.07200558635807686, 0.15297081928713652, 0.10086022732972888, 0.10580145919048756, 0.12753896565242828, 0.13749682299580857, 0.07798453582338549, 0.10029499386140328, 0.1559051579674049, 0.1974282114344894, 0.17466299222687254, 0.09558910855714131, 0.15069704732372868, 0.16187688836954928, 0.43830833319937723, 0.40661816869372713, 0.4084875582737464, 0.46900678993462974, 0.4296725852525868, 0.4401308033519533, 0.4568987042600955, 0.43631963339325897, 0.4713631543969323, 0.1364291475857874, 0.14520348710167486, 0.12045092051715622, 0.15371558937517316, 0.10375418136771808, 0.1730759127113315, 0.06836812722185315, 0.3415231489815318, 0.1437218037216218, 0.16151673259849575, 0.14044579307121874, 0.15163057995461326, 0.15860838755340323, 0.13816194884092925, 0.149365703330681, 0.14967910243736993, 0.1519348856219085, 0.15249831390994473, 0.2279914140413375, 0.24922258263595132, 0.2767055314989054, 0.3068430847404735, 0.27500330268259154, 0.2684788389545568, 0.40417666803008756, 0.2567424194602994, 0.3539527633205841, 0.19738615107356405, 0.24114424770361365, 0.2288520170311351, 0.22045761015640564, 0.25388920563320894, 0.19722214456760812, 0.26743932161975426, 0.22342056877363248, 0.17962063513195825, 0.23438022538204906, 0.20640741278844565, 0.22369505598604278, 0.22640520656823682, 0.20440534291439794, 0.202188004030465, 0.21478643332584169, 0.20334713700053042, 0.2018486411841206, 0.24422674575216563, 0.2093955735396833, 0.23629242073167422, 0.22543750369426463, 0.21399041648431116, 0.196364085533704, 0.19823486673258262, 0.17754305258392267, 0.2247708865007937, 0.18263098322658244, 0.18457782354195829, 0.36062841687600344, 0.3757651449524304, 0.677864914881602, 0.7365277404429571, 0.16230942195064857, 0.16819792572432124, 0.17004915469270943, 0.3008175370234998, 0.16780238827804228, 0.2713475589541843, 0.2083600377282101, 0.20740374258890992, 0.1646863497212111, 0.24182815013960168, 0.26637627363095895, 0.12663956816393296, 0.17815091020891127, 0.19498423282188015, 0.17706723203911645, 0.18159517356664123, 0.19838226647706214, 0.18753007139433708, 0.18469803249644579, 0.18741775443879682, 0.18959808161072056, 0.0928849372322258, 0.10229175321041872, 0.08399893306363249, 0.08045614978784776, 0.09959208283017817, 0.08004546198144458, 0.08866174010362482, 0.08523121715352733, 0.09069162457849067]}, "mutation_prompt": null}
{"id": "1a4e7e40-15ae-41e2-b82f-6b647d0376df", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "436026c6-e622-49cd-ac05-d9137f426fa3", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "a944139d-7f8b-4fac-9e70-b70eaa0266f3", "solution": "import numpy as np\n\nclass QuantumInspiredDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n\n    def quantum_representation(self, individual):\n        return np.cos(individual * np.pi / self.upper_bound), np.sin(individual * np.pi / self.upper_bound)\n\n    def quantum_observation(self, q_population):\n        angles = np.arctan2(q_population[:, self.dim:], q_population[:, :self.dim])\n        return angles * self.upper_bound / np.pi\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + np.random.rand(self.pop_size, self.dim) * (self.upper_bound - self.lower_bound)\n        q_population = np.hstack(self.quantum_representation(population))\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = self.pop_size\n\n        best_index = np.argmin(fitness)\n        best_individual = population[best_index]\n        best_fitness = fitness[best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Mutation strategy\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = q_population[np.random.choice(idxs, 3, replace=False)]\n                mutant = a + self.mutation_factor * (b - c)\n                \n                # Crossover strategy\n                crossover = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n\n                q_trial = np.where(crossover, mutant, q_population[i])\n                trial = self.quantum_observation(q_trial.reshape(1, -1)).flatten()\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                # Evaluate trial individual\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    q_population[i] = q_trial\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update global best\n                    if trial_fitness < best_fitness:\n                        best_individual = trial\n                        best_fitness = trial_fitness\n\n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_individual, best_fitness", "name": "QuantumInspiredDE", "description": "Adaptive Quantum-Inspired Differential Evolution (QIDE) leveraging quantum-inspired representation and adaptive mutation control for robust exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (5,) (10,) (10,) ').", "error": "ValueError('operands could not be broadcast together with shapes (5,) (10,) (10,) ')", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {}, "mutation_prompt": null}
{"id": "d08d49f5-50df-44fc-b2c3-54dd6cee4a80", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.f = 0.5  # mutation factor\n        self.cr = 0.9  # crossover probability\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation: select three random indices that are not i\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Perform mutation\n                mutant = np.clip(a + self.f * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                # Selection: replace if trial is better\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial, trial_fitness\n                \n                # Adaptive strategy adjustment\n                if trial_fitness < np.mean(fitness):\n                    self.f = np.clip(self.f + 0.1 * (trial_fitness - np.mean(fitness)), 0.1, 1.0)\n                    self.cr = np.clip(self.cr + 0.1 * (trial_fitness - np.mean(fitness)), 0.1, 1.0)\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        # Return best solution found\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Introduce a Differential Evolution with adaptive crossover and mutation strategies to efficiently explore and exploit the search space.", "configspace": "", "generation": 13, "fitness": 0.19682861390645293, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.611812286576598, 0.6083024844576066, 0.634878116527814, 0.6186171970109444, 0.6315967450811433, 0.612998596098267, 0.645844807051696, 0.5906702457998311, 0.6122662713037894, 0.278358032177242, 0.32912643358495874, 0.34062873117667447, 0.333797759166069, 0.3226318560154461, 0.33146956825712315, 0.320845032861091, 0.31924327531345353, 0.3174184837801084, 0.304830470479563, 0.1469479717213047, 0.27801129396775437, 0.2224558216770829, 0.21280241994469995, 0.3128167328932996, 0.24596716858849177, 0.235231385936433, 0.18229174921334435, 0.21317804690380804, 0.20331374247993284, 0.22658098370192126, 0.227435944720925, 0.1950503222786153, 0.19986427161042453, 0.16860551530770385, 0.2670223458957628, 0.14327841263334795, 0.19749690793402086, 0.6877106856735307, 0.7328408232392345, 0.750311819734917, 0.7712413683969326, 0.8507060036349166, 0.7061988616621218, 0.8069555742253435, 0.7942650604619167, 0.13368429621312772, 0.09127633854903838, 0.09731729191902849, 0.12011472568269288, 0.06515698073339937, 0.11785174980982915, 0.1078856837596266, 0.13282142877409875, 0.1612799591715357, 0.14911584409661938, 0.2625779356078689, 0.13991570930010444, 0.22683654770132644, 0.17724786351071142, 0.18492635832548232, 0.14231889787945562, 0.1448521946429091, 0.17842480352720613, 0.09948543801184317, 0.09902543921416107, 0.13579621227784844, 0.12959414469837738, 0.11580772938353079, 0.08992188679812574, 0.1464962625004046, 0.12576804521736706, 0.1922431043253885, 0.10843009843437978, 0.10311290306393517, 0.10460732884860768, 0.09837013002649597, 0.11011627240046351, 0.11631389857475061, 0.09671877057659695, 0.10278868263948748, 0.115254183614805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05162091372592026, 0.07183266014943379, 0.06314319594847406, 0.04309275114886024, 0.03020889260226578, 0.05987551665195223, 0.09303143861722496, 0.059919233793906956, 0.05577300250820294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005344868941552505, 9.999999999998899e-05, 9.999999999998899e-05, 0.05758757512888568, 0.02895590178374785, 0.05098082034286877, 0.038341707537584035, 0.05783777477498275, 0.08310127978719317, 0.05004594149816999, 0.06172493587450212, 0.05885870952604855, 0.3393327679649084, 0.28298897091329167, 0.38074118787996236, 0.3678168307743731, 0.35776168264216957, 0.35274899493050227, 0.3590660939675183, 0.32746131331531647, 0.3819922184657325, 0.10204331361787788, 0.08003510598140617, 0.08806024134534951, 0.0903172254990171, 0.0846458311980125, 0.08665025531649884, 0.07268882347095973, 0.0801495424454346, 0.07498517035860808, 0.13456922029396878, 0.1283431363001739, 0.15870481055066799, 0.12042343966581526, 0.13415096131747883, 0.12732687907067153, 0.12945965889799194, 0.1545577356596496, 0.1836200936322281, 0.19256314518772177, 0.18791810116912855, 0.19968071850988056, 0.17187227065490096, 0.18622136088673036, 0.22983285227182537, 0.22869773182924003, 0.23799968652228176, 0.20679940750322134, 0.1273343504987985, 0.11960329691197624, 0.14579934479040235, 0.12821276952698757, 0.11933005094472282, 0.1400164751280112, 0.13379419127795644, 0.1503209910102501, 0.13821377442112193, 0.18677682296393894, 0.18785768196671448, 0.18393609812497758, 0.20356129037516046, 0.1797562820040134, 0.22358522488570387, 0.1812219623674105, 0.18430822363707766, 0.19777711294497446, 0.2557931312345588, 0.19233754062373631, 0.20271370910242104, 0.1938380045456649, 0.21040746230741925, 0.19063769840864064, 0.21118227058640981, 0.19290309478727075, 0.1888781203780494, 0.23471244504611832, 0.21037399898715525, 0.16618691506759353, 0.3230613709392748, 0.29218862094119435, 0.2809328682145241, 0.1486367024802676, 0.24083472532311656, 0.18032547151170963, 0.2888601691248571, 0.18914256878070212, 0.33355433320175965, 0.21265485537075823, 0.18470165461634025, 0.17004935314207836, 0.1531267700240433, 0.19406713677900056, 0.22295836841076888, 0.1771577128306151, 0.16716812103543421, 0.1698707316557595, 0.17308269924413322, 0.18215719175125933, 0.18317822023149533, 0.187806310717323, 0.17211032702281504, 0.19937308544235355, 0.07577466155679136, 0.05853091662271814, 0.06691120026206587, 0.06262172378107111, 0.06539070535753055, 0.06421228898061404, 0.07254232274305938, 0.06849596143309178, 0.06436483413733496]}, "mutation_prompt": null}
{"id": "f66cd3f6-e7b5-459e-90c6-bca6ca05599c", "solution": "import numpy as np\n\nclass DEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        # Initialize population randomly\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations += self.population_size\n        \n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        best_fitness = fitness[best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Select indices for mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n\n                # Mutation\n                mutant = np.clip(population[a] + self.mutation_factor * (population[b] - population[c]), \n                                 self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Adaptive Local Search (ALS)\n                if np.random.rand() < 0.1:  # 10% chance to explore locally\n                    local_search_point = np.clip(trial + np.random.normal(0, 0.1, self.dim), \n                                                 self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_search_point)\n                    self.evaluations += 1\n\n                    if local_fitness < fitness[i]:\n                        population[i] = local_search_point\n                        fitness[i] = local_fitness\n\n                        if local_fitness < best_fitness:\n                            best_solution = local_search_point\n                            best_fitness = local_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "DEALS", "description": "Combine Differential Evolution with Adaptive Local Search (DEALS) to exploit global exploration and local exploitation in black box optimization.", "configspace": "", "generation": 14, "fitness": 0.25585899101854687, "feedback": "The algorithm DEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.6076842793868735, 0.5914909740710457, 0.6057044573724559, 0.6114982290676394, 0.6193614928032796, 0.6040186466384186, 0.6174337387259932, 0.5610788778829867, 0.6499899177294096, 0.35602624622729906, 0.3511913777303368, 0.345680459444878, 0.3350019664360492, 0.32102402261840735, 0.3515220126447417, 0.3403901224518753, 0.33753387720184924, 0.371548586506524, 0.09288510444512144, 0.09168259845481808, 0.10610845779363132, 0.08948803192139876, 0.10419722809889553, 0.09384088006814473, 0.09205441121952407, 0.0913675710291656, 0.09784812161536849, 0.07684124670558301, 0.08799901573010915, 0.07382007801770285, 0.09197513704201088, 0.09082700624819318, 0.08553046393259478, 0.08693831877364777, 0.07899314054233308, 0.08495863620159749, 0.9356653712962689, 0.9245447429923668, 0.9575902816251202, 0.9532496089266909, 0.9529322285302267, 0.9369100315252953, 0.9257654392960749, 0.9421129107279217, 0.9037838407912889, 0.25476981717914504, 0.2938558145137061, 0.2839472100391772, 0.2895685374773913, 0.25555676691743545, 0.2613359684109171, 0.2835341171368799, 0.2968939595507192, 0.27749769566229554, 0.41364217018491056, 0.4187099151045067, 0.4563079103429849, 0.4898603360849093, 0.524834468915923, 0.5183893467396381, 0.4724721424356335, 0.5241995275107628, 0.5180679825165151, 0.1876167425807267, 0.15837686368839277, 0.1568251078786952, 0.13949124410278402, 0.1850278280216444, 0.17793746632898289, 0.20633174601805782, 0.19654841701585457, 0.21104087574452512, 0.2483437930982998, 0.18075249899162338, 0.12073668797474624, 0.17423693553225816, 0.17493467453067768, 0.18355210422535406, 0.199943983086327, 0.15714549209663542, 0.16330270535191316, 0.1239522171113494, 0.11118807389753915, 0.11399641378754022, 0.1308236698974471, 0.1129541494316485, 0.08817383803388423, 0.11725978551627037, 0.0984895734629121, 0.11680244566665754, 0.19113004985508064, 0.2592715996085099, 0.2412084531023243, 0.24665073195507525, 0.28261979263881576, 0.23265254837199179, 0.25955289668872594, 0.26679226250685384, 0.2643437128529943, 0.037035427557475464, 0.03291980997266164, 0.03291301610369024, 0.03739313117894105, 0.030154861530554578, 0.03561190588524865, 0.06196699261159899, 0.042025001072063084, 0.03113169706141239, 0.14562208256655707, 0.138945552224918, 0.13990361258113093, 0.16797917330962897, 0.16310488042945015, 0.15250360532485885, 0.15530840093985043, 0.1428488045180819, 0.1558056441097886, 0.44270832816192185, 0.470424497034032, 0.44571129050434066, 0.4646729635588125, 0.4673468967311686, 0.4778204304063828, 0.4473120567786121, 0.4790633823789746, 0.4533933102818549, 0.08346647632860182, 0.07924529057745044, 0.08045445072329582, 0.09030324455072203, 0.09513594793832492, 0.08075275923829506, 0.08706466075608332, 0.11208519181987597, 0.09405666831603354, 0.16685823802336075, 0.16438979123828668, 0.14287039794869538, 0.16451113532044315, 0.13955447612534133, 0.1729204294562885, 0.17707345063485047, 0.1573146805815051, 0.14822394025854646, 0.25427472672724416, 0.25502038216597767, 0.25858922584015165, 0.24478313711800415, 0.25303256031348687, 0.2546950497810321, 0.2726495520462572, 0.29850958025344154, 0.2672724387907772, 0.19929297175632044, 0.20798491373588834, 0.21895449098353448, 0.19758410199978482, 0.1803907109857501, 0.19490195292086987, 0.21696433189354913, 0.20654251140540436, 0.20920003719588953, 0.1991394510618516, 0.17042672043802887, 0.18126972643036943, 0.18122802065043153, 0.20013626353935188, 0.17307082765793969, 0.18276779295946033, 0.18942414914029104, 0.169888652488407, 0.1753399593118391, 0.16800859130967294, 0.17256983131048254, 0.16843483426579442, 0.1717692075042374, 0.1895700315639678, 0.18246304511135214, 0.17406753529895236, 0.18576742301323257, 0.16417519847831552, 0.24124386662840647, 0.3778208730658533, 0.47845034049353363, 0.18094242134506833, 0.2824245738621406, 0.38542453362896745, 0.37153696075061815, 0.31809074706517404, 0.47188364404516026, 0.19771612158926433, 0.18225994252096012, 0.19068532415863337, 0.18632866323904562, 0.3885294314661807, 0.20606784614674634, 0.6334829872813197, 0.21023526497343936, 0.18593486018024485, 0.1821579697142125, 0.1851774266200762, 0.18625513702538832, 0.1769751273234551, 0.1830124629803892, 0.1774518802700895, 0.1770071335052371, 0.2516880233117925, 0.07653759068802979, 0.0796162280443552, 0.06999527083571189, 0.0665228644350655, 0.0786737403843707, 0.06083622280560286, 0.06557559932789592, 0.07078674856926703, 0.06860605375934303]}, "mutation_prompt": null}
{"id": "57765490-32a4-4d1f-8895-47e35e12a80e", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "eeaa1f00-bf0a-4363-aa43-10af08e67e82", "solution": "import numpy as np\n\nclass DynamicAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.initial_population_size = 10 * dim\n        self.population = self._initialize_population()\n        self.fitness = np.apply_along_axis(self._evaluate, 1, self.population)\n        self.global_best_index = np.argmin(self.fitness)\n        self.global_best_value = self.fitness[self.global_best_index]\n        self.global_best_position = self.population[self.global_best_index]\n\n    def __call__(self, func):\n        self.func = func\n        while self.evaluations < self.budget:\n            for i in range(len(self.population)):\n                candidates = [idx for idx in range(len(self.population)) if idx != i]\n                a, b, c = self.population[np.random.choice(candidates, 3, replace=False)]\n                F = np.random.uniform(0.5, 1.0)  # Scale factor\n                trial = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < np.random.uniform(0.1, 0.9)\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, trial, self.population[i])\n                f_trial = self._evaluate(trial)\n\n                if f_trial < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = f_trial\n                    if f_trial < self.global_best_value:\n                        self.global_best_value = f_trial\n                        self.global_best_position = trial\n                \n                if self.evaluations >= self.budget:\n                    break\n                \n                # Dynamic population adjustment\n                if i % (self.dim * 2) == 0:\n                    self._adjust_population()\n\n        return self.global_best_position, self.global_best_value\n\n    def _initialize_population(self):\n        return self.lower_bound + np.random.rand(self.initial_population_size, self.dim) * (self.upper_bound - self.lower_bound)\n\n    def _evaluate(self, individual):\n        fitness = self.func(individual)\n        self.evaluations += 1\n        return fitness\n\n    def _adjust_population(self):\n        # Adjust the population size dynamically based on the evaluation budget\n        if self.evaluations > self.budget * 0.5 and len(self.population) > 4 * self.dim:\n            # Reduce population size\n            self.population = self.population[:4*self.dim]\n            self.fitness = self.fitness[:4*self.dim]", "name": "DynamicAdaptiveDE", "description": "Implement a Dynamic Adaptive Differential Evolution (DADE) with self-adjusting population size and crossover strategies to balance exploration and exploitation.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicAdaptiveDE' object has no attribute 'func'\").", "error": "AttributeError(\"'DynamicAdaptiveDE' object has no attribute 'func'\")", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {}, "mutation_prompt": null}
{"id": "cf2a7856-1872-42e4-8f05-3bae77a93443", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "91dd232b-d6e0-4cc5-b899-bbc33dfa9579", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0\n        self.cooling_rate = 0.99\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = self.population_size\n\n        best_index = np.argmin(fitness)\n        best_value = fitness[best_index]\n        best_position = population[best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation and crossover for new candidate\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Fitness evaluation\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best\n                    if trial_fitness < best_value:\n                        best_value = trial_fitness\n                        best_position = trial\n\n                # Simulated annealing adaptation\n                if np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if self.evaluations >= self.budget:\n                    break\n\n            # Cooling the temperature\n            self.temperature *= self.cooling_rate\n\n        return best_position, best_value", "name": "HybridDESA", "description": "A hybrid differential evolution and simulated annealing algorithm with adaptive mutation to navigate complex search spaces efficiently.", "configspace": "", "generation": 18, "fitness": 0.22057590168259342, "feedback": "The algorithm HybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.17.", "error": "", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.3286974386993009, 0.3215553563157795, 0.31971518887094996, 0.35721668114188476, 0.330904118200571, 0.31974553537339934, 0.31756588864699165, 0.3279007229676877, 0.328838990893755, 0.2661707530705598, 0.24563226804739924, 0.2515732106568699, 0.2474736753466421, 0.2380928174846284, 0.24596927336000296, 0.2590395045633884, 0.2743246604512478, 0.2425722485536297, 0.09585152927951734, 0.09518100159368481, 0.12151575278017446, 0.0986762719545421, 0.09637726031049154, 0.09440264180843239, 0.10410137782813689, 0.09272190734753205, 0.10964478787975018, 0.10229808749253966, 0.09389513619253798, 0.0887250278849524, 0.08646532205793755, 0.0918871576637299, 0.09868864968280178, 0.08194029046560913, 0.07700704318065177, 0.08622618065083898, 0.9157607936560416, 0.9443602894810793, 0.9444400494049598, 0.9110087340000275, 0.894382710878578, 0.97201775186411, 0.9593275130954402, 0.9225430560136997, 0.9808632445692287, 0.2439336233163818, 0.21721039064435244, 0.22255111954780893, 0.23191782227724378, 0.2296051149421845, 0.22955833479865773, 0.24066245923079355, 0.25173254737875006, 0.25052062267135666, 0.29263101061346075, 0.30719843952647985, 0.27742634067825056, 0.28399625103870507, 0.2861308563980556, 0.29617767600314304, 0.28689961199031655, 0.2804275417377897, 0.2971304192111771, 0.17440174144708975, 0.1871155967028747, 0.17841263313850209, 0.1746338485875969, 0.17615645879546338, 0.18772069217896115, 0.19824818207412676, 0.17977356870999106, 0.16370651815533988, 0.23885155961639992, 0.24198932692977837, 0.235674860799031, 0.19729919652245476, 0.19693651314460758, 0.19304956682080898, 0.17582917765917905, 0.1744650411617602, 0.1865199305296925, 0.11933371719976271, 0.14893948054715733, 0.1639319179260621, 0.11719899679857548, 0.1310325751411876, 0.10831397635958051, 0.10855683543593875, 0.13717309628356, 0.12550984391268916, 0.2479192509648197, 0.23276130367205017, 0.20893386065697028, 0.2102872857298258, 0.23726879940127366, 0.2121463559526604, 0.2552929115545437, 0.2385891526424595, 0.23021511063339917, 0.026999460985566492, 0.0388395369911777, 0.050010262354086676, 0.037777609361471676, 0.05475685675695696, 0.02532974663350429, 0.049728087379086405, 0.057605536317757444, 0.03687370713846705, 0.1612150889444658, 0.14666026373840702, 0.15561985201482753, 0.15074572141872522, 0.1652987549591719, 0.15965644054285844, 0.15090441538270594, 0.14501377814732563, 0.1477240256762209, 0.31832833502802316, 0.2942318489531701, 0.3161925196895229, 0.30055304319538867, 0.2966001652485468, 0.32271482377997807, 0.30033149183117624, 0.3198256499672689, 0.3119730920834315, 0.08697089812051506, 0.09748292763060729, 0.08401604690478381, 0.08599852103103534, 0.08507382991959367, 0.09189466736530283, 0.08190542011487578, 0.07499801639002068, 0.07346767941719445, 0.14433700290192153, 0.17073617214800885, 0.14647156859169486, 0.19466178760859865, 0.12867799573972183, 0.13780984645935246, 0.13564670632511533, 0.18701942811990424, 0.14751590611216092, 0.24583579866487015, 0.2347090095754486, 0.24476738195944547, 0.22265674864028173, 0.23550853998169807, 0.22897109406233185, 0.2501726781088297, 0.24128657255290653, 0.2373528856893269, 0.18487827233887189, 0.19170685271864096, 0.2031395468264675, 0.19900324133406988, 0.20608127614858418, 0.18647823568273703, 0.2094965704098538, 0.20249177860104595, 0.20266290548432053, 0.17776272905602508, 0.168980888611581, 0.17521168620865502, 0.1730031608907211, 0.17049022871806974, 0.17016336512926833, 0.18797890561535013, 0.17513085839483733, 0.1898598363175349, 0.17553682328842646, 0.1740435366901837, 0.1887392688443572, 0.17567942712169837, 0.17739983761643852, 0.16279850375470883, 0.1811239649904166, 0.17691125356247484, 0.17908901480752448, 0.42796393363191787, 0.15135651410558115, 0.399440958649636, 0.34373086431442124, 0.17328310566880212, 0.36713162251018816, 0.32451704319932106, 0.39362688919569366, 0.3502322024127995, 0.28109227336108034, 0.166786538579055, 0.20190744973125252, 0.2178463627461239, 0.190278063868066, 0.17193133288859952, 0.12454460402442014, 0.20367954371749197, 0.20575409705000525, 0.18981145892122908, 0.2054317794668684, 0.19267097060397953, 0.174950856402191, 0.1882402087817041, 0.18463113736838999, 0.1844411136294105, 0.1995973886088549, 0.17705884710737996, 0.0797335853448734, 0.07323968616145649, 0.07024359167132643, 0.06907130435296982, 0.06668241877137948, 0.07676311700821992, 0.06648970976114366, 0.07042991924129494, 0.07331008931255223]}, "mutation_prompt": null}
{"id": "ee5934a2-3b8f-4ecf-a8f9-d5143094be59", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "658b3a39-48c4-467f-8e28-be4ca0a0a77a", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "b87766bc-9419-46a2-b3d8-d63c55562ac2", "solution": "import numpy as np\n\nclass MultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.inertia = 0.5\n        self.cognitive = 1.5\n        self.social = 1.5\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                \n                # Update velocity\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social * r2 * (global_best_position - positions[i]))\n                \n                # Update position\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate the new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < personal_best_values[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_values[i] = fitness\n                    \n                    # Update global best\n                    if fitness < global_best_value:\n                        global_best_position = positions[i]\n                        global_best_value = fitness\n                \n                # Early stopping if budget is exhausted\n                if self.evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "MultiSwarmPSO", "description": "Implement a multi-swarm particle swarm optimization with self-adaptive velocity and position adjustment, exploiting both individual and collective knowledge.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.8691637878140794, 0.8664540758358239, 0.8872640912252843, 0.855647346155099, 0.8689762855130096, 0.8603365942582741, 0.8694399280426097, 0.8735986060536131, 0.8772855275621548, 0.6706379994865148, 0.7266870796501067, 0.7185544149908907, 0.7325079966972428, 0.6767017816500268, 0.7095600711989943, 0.668222021974872, 0.746397897519645, 0.7491805508752656, 0.11430401716746164, 0.16900393522296397, 0.1535887576721512, 0.17760256736855318, 0.11191153277486443, 0.1183405769432413, 0.1286561288542143, 0.16655371944949582, 0.14880408074232077, 0.13046364432990853, 0.11938423473564619, 0.6560128472490689, 0.0994946427401765, 0.12225203833089238, 0.12280881969882462, 0.14312352480709856, 0.14185618546233414, 0.10845291127556078, 0.9879063875020048, 0.9839316204006492, 0.988516578655227, 0.9879907028661152, 0.9846114983500108, 0.985321876469477, 0.9880371057355578, 0.9855044375469639, 0.9856014300293846, 0.7341683173397527, 0.71603613838659, 0.7208673694463281, 0.6624842997814562, 0.5871127019761311, 0.6912450591799446, 0.12675690678386842, 0.6547477471708806, 0.6839675611368581, 0.17104454744776632, 0.37778174058669933, 0.23035515623302527, 0.20414712308253247, 0.19306011922569055, 0.3771963258649319, 0.22402709770432871, 0.22872609608605132, 0.14894048271499882, 0.24000524168031512, 0.1575378919105187, 0.21357166456568444, 0.1056313901776923, 0.2333343381763413, 0.13301618110882374, 0.23561866793774355, 0.26655326391925593, 0.21878691818492024, 0.24567552880301446, 0.3076851432044727, 0.22951150492524952, 0.25843286436795143, 0.2445030755042611, 0.2564626159103299, 0.2754157831495948, 0.24191578814937242, 0.13515167296499442, 0.05227162818729181, 0.005959836105411176, 9.999999999998899e-05, 0.01708123313019283, 9.999999999998899e-05, 0.05160874739065002, 0.07705167428148874, 0.010043666272166796, 0.1064338225833299, 0.09011741117929395, 0.04256639806416096, 0.1132946927373949, 0.09341539970706925, 0.040965813641605564, 0.025907338946342895, 0.05543817617106939, 0.04762294756689922, 0.055256727620505264, 0.06312828774251589, 0.07066814518848585, 0.10949835347826942, 0.12666308845392593, 0.0758529345156368, 0.09492248829969263, 0.2257824559275342, 0.13911221465349644, 0.1331386807179442, 0.20982841690523446, 0.17163131039831092, 0.1374610116775966, 0.16922563217187347, 0.17122386818200463, 0.1371945754825592, 0.04930036862777665, 0.05690524032044375, 0.0829359443162182, 0.5288338642772008, 0.5507709742374345, 0.5512978993649873, 0.6274032998655041, 0.563202743270582, 0.5580876006983928, 0.578385015202392, 0.5937670350817592, 0.5782383423757678, 0.10577915718156561, 0.05362966620322773, 0.10870864936526936, 0.11471941412215492, 0.1423820081093956, 0.13107361555741537, 0.15381941145756717, 0.1409679695519359, 0.07241310418980973, 0.16444359880262405, 0.1890838847909656, 0.1829803351397603, 0.2675716974135103, 0.42281448065886285, 0.35149649290478324, 0.1580629876096349, 0.23574236820378158, 0.27490297576927136, 0.4546675170648895, 0.31050934316334355, 0.37049925866360156, 0.23421517035653694, 0.5094547097882478, 0.3847873293138707, 0.36935906793836626, 0.5757006231310202, 0.3843082929647865, 0.19726919824798328, 0.23892319148480634, 0.22443900946660955, 0.20484182903787573, 0.2087199541192123, 0.24553581879237096, 0.19089782290642077, 0.21223191103057937, 0.3276243058595153, 0.21113038876742418, 0.23592220383387585, 0.20733578282210063, 0.20916269909371965, 0.24250740613743849, 0.23178626898627863, 0.22953361499029346, 0.2340017633398206, 0.2473494149433908, 0.20881189404611833, 0.21768413872829484, 0.22558253425976815, 0.22284156520395904, 0.19842170080722177, 0.19976564212386316, 0.18181198222507078, 0.18397868663460482, 0.20853868966448952, 0.9119266391250384, 0.1869771378104761, 0.15367463058840625, 0.9287210188235241, 0.20098026083985288, 0.9000024996246042, 0.141901406915094, 0.16514527655416533, 0.16877246489673292, 0.6677321125170597, 0.21274317073932503, 0.7658522563598615, 0.6712863652273371, 0.16855727887371708, 0.16913867719570697, 0.10496532920111945, 0.10488206466432315, 0.78558635578272, 0.20276263791070082, 0.21326371054577287, 0.22025500903857698, 0.20642652215489976, 0.230098889312641, 0.20048514412112284, 0.20281616335145258, 0.20579808028355373, 0.25369671369171864, 0.0901935058428257, 0.09313026923900947, 0.09162942601718949, 0.10018535549470364, 0.09254651765357103, 0.09743187744287529, 0.11950729251284686, 0.10190844551620981, 0.09555171716861932]}, "mutation_prompt": null}
{"id": "b742152c-79c7-41ef-80b2-970993988c02", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 22, "fitness": 0.37449624914920543, "feedback": "The algorithm ADE_HMS_DPR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "9d539016-88c4-48db-8634-b21792f7b707", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "1603f0c0-2457-47b0-8710-5e30c9f6a303", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.pop_size = 10 * dim\n        self.beta = 0.5  # Contraction-expansion coefficient\n\n    def __call__(self, func):\n        # Initialize positions and personal bests\n        positions = self.lower_bound + np.random.rand(self.pop_size, self.dim) * (self.upper_bound - self.lower_bound)\n        pbest_positions = positions.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, positions)\n        self.evaluations = self.pop_size\n\n        # Find the global best\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest_position = pbest_positions[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired update of positions\n                p = np.random.rand(self.dim)\n                mbest = (np.sum(pbest_positions, axis=0) / self.pop_size)\n                u = np.random.rand(self.dim)\n                new_position = pbest_positions[i] + self.beta * p * (mbest - np.abs(gbest_position - pbest_positions[i]) * np.log(1/u))\n\n                # Apply boundary constraints\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate the new position\n                new_fitness = func(new_position)\n                self.evaluations += 1\n\n                # Update personal best\n                if new_fitness < pbest_fitness[i]:\n                    pbest_positions[i] = new_position\n                    pbest_fitness[i] = new_fitness\n\n                    # Update global best\n                    if new_fitness < gbest_fitness:\n                        gbest_position = new_position\n                        gbest_fitness = new_fitness\n\n        return gbest_position, gbest_fitness", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) leveraging quantum superposition and collapse for enhanced exploration and exploitation.", "configspace": "", "generation": 23, "fitness": 0.07246196522394262, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.16266376579899666, 0.14609430490508335, 0.11626717695705502, 0.1472203014277904, 0.14588160950371898, 0.1412414462222481, 0.18672560080622347, 0.13601561184396815, 0.1481214978111005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023692226865496546, 0.029306005014034575, 0.027653814054695247, 0.03857303784230948, 0.02649004656413123, 0.031921326752884616, 0.03722187674005195, 0.0657362408633757, 0.05510591301509071, 0.032959101629334686, 0.003599707984298983, 0.016143427357575124, 0.030848516951338945, 0.04993675621352356, 0.003212701729530809, 0.019048477078848047, 0.032237505795097765, 0.014645465953145642, 0.054819537459657286, 0.04824981085038982, 0.046739468824409824, 0.09470885362795656, 0.10754315457227004, 0.07751627429804198, 0.10025709745853273, 0.09461999940479926, 0.08037544088339232, 0.06274794416174423, 9.999999999998899e-05, 9.999999999998899e-05, 0.035686444528823635, 0.04629454549349443, 0.03807833244938541, 9.999999999998899e-05, 0.03670622251110034, 9.999999999998899e-05, 0.1480973478128561, 0.165159597905281, 0.10076588519825347, 0.15462074285011662, 0.17163315322407557, 0.014947350174651763, 0.060691305482626245, 0.12688408509528437, 0.058722981182724676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013587048895767673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006725736330926102, 0.06206532926806996, 0.06477241175192561, 0.01820148695103252, 9.999999999998899e-05, 0.0044376371096370715, 0.014758459537272173, 0.018965548215102324, 0.0626155101388034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1362996796759035, 0.20364097297179573, 0.17348607536053728, 0.15062860486860696, 0.15916480197217353, 0.12937553416771097, 0.1660307250122236, 0.16665213351637254, 0.20386777088926933, 0.008670862635608678, 0.012138956783944388, 0.02616685877863123, 0.03936338066107836, 0.04035525486099012, 0.06167753887473815, 0.053666412287357135, 0.06608947491732287, 0.03762818956924496, 0.14717224241542404, 0.1385671374532763, 0.12131838461434474, 0.13588629483469594, 0.12650140744287997, 0.1469226975443556, 0.13047820124305565, 0.13169688148086445, 0.13875175991187894, 0.14790642987956182, 0.1492649845345284, 0.1668588167326467, 0.1558164247199616, 0.15583487505860305, 0.16312070209951468, 0.14383488359559105, 0.1896941051088139, 0.155674453059794, 0.08429057190358058, 0.06877383475455112, 0.09491549480049466, 0.1097974280479268, 0.09009993180705766, 0.13967542540815447, 0.09738555989527486, 0.14412837310678783, 0.11028897765402945, 0.15422796733684174, 0.15011289400882055, 0.1478360273981183, 0.14501929880953923, 0.16722896290482225, 0.13767000659527984, 0.15075233344069439, 0.15762527645873903, 0.12917017367571348, 0.15397053893784596, 9.999999999998899e-05, 0.14258932042418815, 0.14730615558708282, 9.999999999998899e-05, 9.999999999998899e-05, 0.04162142606159014, 0.07803565897446207, 0.06562548611384178, 0.15301422844792922, 0.11344112899771319, 0.09512222548890736, 0.11388742110736183, 0.16607440312605426, 0.12118302204400677, 0.11442984070005735, 0.11332575286756785, 0.11753915446399932, 0.12168051634122734, 0.11783169314019559, 0.1111408483659545, 0.22064680679084825, 0.11028713545729263, 0.09618166398418382, 0.04930526662249557, 0.10265162817875717, 0.06621566988065242, 0.17182996464823608, 0.17530577609037612, 0.17349673753581152, 0.19397353942855144, 0.17226776917008624, 0.18993856072056392, 0.1816350022551103, 0.19274166491816802, 0.17889032911553282, 0.050917685053705086, 0.0506532558723537, 0.04106541039783573, 0.05332468827321102, 0.04987229439766283, 0.05751847219097528, 0.048287950684367975, 0.05005125697506552, 0.061046483670697094]}, "mutation_prompt": null}
{"id": "e1e78998-6c43-449c-9725-fbcb0f809665", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "bc4a4bd6-5121-4330-b04f-fb646aa1b22b", "solution": "import numpy as np\n\nclass DPSO_AVI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.population_size = 10 * dim\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.velocity_clamp = 0.5\n\n    def __call__(self, func):\n        # Initialize particles\n        position = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocity = np.random.rand(self.population_size, self.dim) * self.velocity_clamp\n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best_position)\n        self.evaluations = self.population_size\n\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                # Update velocity and position\n                velocity[i] = (\n                    self.inertia_weight * velocity[i] +\n                    self.cognitive_coeff * r1 * (personal_best_position[i] - position[i]) +\n                    self.social_coeff * r2 * (global_best_position - position[i])\n                )\n                velocity[i] = np.clip(velocity[i], -self.velocity_clamp, self.velocity_clamp)\n                position[i] = position[i] + velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new fitness\n                fitness = func(position[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = position[i]\n                    personal_best_fitness[i] = fitness\n\n                # Update global best\n                if fitness < global_best_fitness:\n                    global_best_position = position[i]\n                    global_best_fitness = fitness\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight *= 0.99  # Gradually decrease inertia weight\n\n        return global_best_position, global_best_fitness", "name": "DPSO_AVI", "description": "Dynamic Particle Swarm Optimization with Adaptive Velocity and Inertia (DPSO-AVI) that dynamically adjusts velocity and inertia components to enhance convergence.", "configspace": "", "generation": 25, "fitness": 0.2968021913886702, "feedback": "The algorithm DPSO_AVI got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7563806278615024, 0.7817732051771087, 0.764957825752036, 0.7620661959556294, 0.7711639068398445, 0.7813700656206212, 0.7598491666651805, 0.762497849680457, 0.7525710361608469, 0.589970574923625, 0.5191583862882567, 0.5653846033192682, 0.5226491232564603, 0.5429874375437485, 0.505168431925477, 0.5040977418072885, 0.5432398340607245, 0.504367667148379, 0.16751163937818014, 0.16417135057598586, 0.10320656884624313, 0.1377688501309452, 0.16902190364514513, 0.1289470827502459, 0.1127508350466152, 0.15969631008507967, 0.1167675494342697, 0.14441577253960736, 0.12188550399103204, 0.13525172850592349, 0.11187873223863831, 0.11176452908217094, 0.09526597618913513, 0.12619789225860567, 0.1176962467373649, 0.09422458856760241, 0.9240348888441323, 0.9014809667934301, 0.9233207879825229, 0.9188023594008382, 0.9236494829703736, 0.8905657120471753, 0.9009368417235074, 0.8735963565991912, 0.9226900594950866, 0.5566866135607074, 0.500578812516278, 0.44219422446838463, 0.5175344702219598, 0.47475385258671, 0.503323376917563, 0.5186764792208047, 0.505859643024525, 0.5099368278353651, 0.4759328644667302, 0.8131840592129834, 0.22724294829266878, 0.2746663937797623, 0.6578327458551234, 0.19168226920532594, 0.1727471352124228, 0.14816052415423941, 0.7927840200026229, 0.18553113344459649, 0.21576366996535346, 0.17555788612548262, 0.1692777733925921, 0.12301830590269658, 0.18360236559604848, 0.18704671457562594, 0.20561224293203273, 0.17853849701375546, 0.13004465926571518, 0.19687666422241323, 0.30460470215743796, 0.2054276229728904, 0.21723124935732263, 0.19013086100294152, 0.12902389694988725, 0.2235302286807841, 0.23151301745817887, 0.009185495148046341, 0.1478179480927272, 0.0757068669226928, 9.999999999998899e-05, 9.999999999998899e-05, 0.013126093433664221, 0.04590182462846093, 0.011458364205093718, 0.00614245857987461, 0.15134201451896767, 0.08700177171473111, 0.1253219958888474, 0.05754655376593332, 0.031850949242411164, 0.0444336097312491, 0.09788823884925535, 0.15127067384696624, 0.07757801230327843, 0.08166433663337336, 0.06983907184187266, 0.157884720549882, 0.11574689657501858, 0.14718917157404698, 0.09156787505596642, 0.07783122524893749, 0.09690439598354039, 0.15454089875293908, 0.0957312704289709, 0.15058081637780452, 0.23216646644396355, 0.22099681143404537, 0.15250257930119882, 0.09686427807421838, 0.12669247466976363, 0.1251886019421834, 0.12786745905870534, 0.49186828406172967, 0.5071290870153897, 0.48892402149412795, 0.5190334582188574, 0.4885449665004771, 0.49445846581219544, 0.5377969797551365, 0.5343154783213403, 0.5212830638310205, 0.08682599665547641, 0.10154194295548569, 0.08237644891382445, 0.09410118224716957, 0.05942899234513954, 0.11990197543128611, 0.1028767532191106, 0.16045872197437294, 0.11113502752479876, 0.42958852088839283, 0.2269848803266924, 0.3000107724096863, 0.3960765519542305, 0.23935148231621695, 0.4673551647169889, 0.17777160724075802, 0.1974316704770399, 0.38873316095041843, 0.38911829424404165, 0.4196570736092201, 0.3405996478573349, 0.407881864193231, 0.23318827969786748, 0.338491496946272, 0.26176683173405413, 0.4479249246175484, 0.24850824095154245, 0.3443655789117994, 0.2407140615405654, 0.26567080906424145, 0.20360270413638626, 0.17254828403231126, 0.27408608520349564, 0.24328035194117603, 0.3246239534273885, 0.22714869544062521, 0.27110748143227614, 0.22200780179015156, 0.21228154810422106, 0.2449510107617734, 0.22016400303575823, 0.29430838903461476, 0.25617901216519745, 0.23006105775304997, 0.227172426415585, 0.1996287722484883, 0.21348403117222592, 0.21951567409503692, 0.21998945368481237, 0.20087045931555836, 0.21987481153988975, 0.21670886673015344, 0.18647711414557, 0.19299006043748934, 0.18583523174979777, 0.17477504745249295, 0.1518389063150848, 0.8364419720112584, 0.20085124644406682, 0.8171716086878278, 0.14254033171337288, 0.15906945996730704, 0.8511218104855834, 0.625393249456896, 0.1559798675720414, 0.07350025013124228, 0.2078543662157577, 0.20799851870782948, 0.1512071651563358, 0.6284821848715717, 0.10425655114736254, 0.6296996254737951, 0.19735467604393364, 0.1980832645715246, 0.19657755474927807, 0.19494471803721147, 0.18388526173458153, 0.19540023451676525, 0.20099378105638666, 0.1973067385211632, 0.21710835002205187, 0.09715580156078996, 0.10626255166970755, 0.13267648450585168, 0.07681884149802842, 0.08602376141800028, 0.08642704087683617, 0.10392638749475225, 0.09730326114837373, 0.10195825978551787]}, "mutation_prompt": null}
{"id": "9c2be2d7-4535-4783-a9b9-1bd01759edae", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.population_size = 10 * dim\n        self.inertia_weight = 0.7\n        self.personal_coeff = 1.5\n        self.global_coeff = 1.5\n\n    def __call__(self, func):\n        # Initialize positions and velocities\n        positions = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.population_size, self.dim) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_fitness = np.apply_along_axis(func, 1, positions)\n        \n        self.evaluations = self.population_size\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update velocity and position\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.personal_coeff * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.global_coeff * r2 * (global_best_position - positions[i]))\n                \n                # Quantum-inspired update\n                quantum_prob = 0.5 + np.random.rand(self.dim) * 0.1\n                quantum_bit = np.where(np.random.rand(self.dim) < quantum_prob, 1, -1)\n                new_position = positions[i] + velocities[i] * quantum_bit\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                \n                # Evaluate new position\n                new_fitness = func(new_position)\n                self.evaluations += 1\n\n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n\n                # Update global best\n                if new_fitness < global_best_fitness:\n                    global_best_position = new_position\n                    global_best_fitness = new_fitness\n\n        return global_best_position, global_best_fitness", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) leveraging quantum superposition for diverse solution exploration and convergence.", "configspace": "", "generation": 26, "fitness": 0.10557870677856539, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.15870869487026884, 0.2236774421288633, 0.12987330418349752, 0.15533530840813614, 0.1609871720315974, 0.1772872061863614, 0.1889059947231997, 0.11868534381146545, 0.11721178028056378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030628189616212498, 0.01724303115481629, 0.030459219707129503, 0.015094970318723644, 0.0251951464536585, 0.022752919109922165, 0.02540692735341743, 0.0184648002495853, 0.019526070007802487, 0.015267772478154806, 9.999999999998899e-05, 0.03436233716643655, 0.03494588006990307, 0.013905521584867908, 0.009842005945439491, 0.01999473274925967, 9.999999999998899e-05, 9.999999999998899e-05, 0.976247368535151, 0.9811672878434218, 0.9729904395096546, 0.982982700089797, 0.9807601346482948, 0.9800355433873071, 0.9813263705208887, 0.9840623561135096, 0.9682771819134858, 0.07386318549518689, 0.03341317775453356, 0.0261105456952766, 0.011690846511250297, 0.02176595274262949, 0.08076773008714899, 0.05005934084318664, 0.028370527218901542, 0.024896808983982388, 0.10864358690037201, 0.11763752838153052, 0.09023733266387335, 0.11144970839531376, 0.07920817884462394, 0.0539310869350893, 0.08551169815011272, 0.16104949372985633, 0.05367270013415559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008643705008827052, 0.0003670573950407263, 0.0019390017047249408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004451834562145485, 0.024087297156886067, 0.011182969282692135, 0.00792344347449181, 0.0004863736002119756, 0.004814753920088677, 0.002583610308969586, 0.022130225010158044, 0.00015305614803640122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.127575355657095, 0.1700090590943204, 0.1801764717710872, 0.15299599334862146, 0.1347516053243364, 0.17289011800399223, 0.18218322827902678, 0.13871522409370773, 0.1423500244112098, 0.02843089892167605, 0.02965808824895866, 0.03818788554984731, 0.03680593881354377, 0.016688039174731273, 0.04134009351342083, 0.03530018539343016, 0.012486556111665825, 0.041873749487960965, 0.14813392063718633, 0.12289254792655324, 0.13529170131300106, 0.1419999114640894, 0.1336751357011393, 0.12913996715482845, 0.12528794042416425, 0.13487046634332456, 0.12845209559737647, 0.13462361590411642, 0.15070293735203066, 0.16174969612587486, 0.13908089866574924, 0.13185280722294068, 0.15496801691510498, 0.16775038064164505, 0.18445841342938374, 0.1350291433971159, 0.06435029995012898, 0.0956225437865994, 0.10707491915517875, 0.0741540266880274, 0.08754007005851527, 0.11808893165456047, 0.10240398418465246, 0.10092223344165918, 0.09432716045570999, 0.1874756763747203, 0.11662517039157816, 0.13804810001687018, 0.12989581070622758, 0.14443101247146273, 0.1126884976927367, 0.12255344505439703, 0.11912166665739021, 0.14641349478922294, 0.1443669936703933, 9.999999999998899e-05, 9.999999999998899e-05, 0.1209656213730439, 9.999999999998899e-05, 0.14705065462016864, 9.999999999998899e-05, 0.11707036887027167, 9.999999999998899e-05, 0.11020893041468793, 0.1203470393727133, 0.145120918268688, 0.10210252858204516, 0.16328879375855154, 0.10926708861003864, 0.12277013329586639, 0.11441630725285756, 0.11395473630106623, 0.16392492636617495, 0.11342336043173218, 0.09382041897761706, 0.0920120662651085, 0.09315150887440049, 0.09374222425014689, 0.12996193777868792, 0.14773088929699296, 0.10876855562571708, 0.19019930872841517, 0.19204206720036665, 0.17396319865505905, 0.1777477854168763, 0.1695186086781223, 0.17565592068992741, 0.18379555880171572, 0.17992978850563635, 0.18464213794890616, 0.02623449672346778, 0.02228100981160064, 0.03753366942751124, 0.03484459857730837, 0.04878627155458415, 0.044488876057202975, 0.024474996607255384, 0.06525903881084483, 0.023468264584371346]}, "mutation_prompt": null}
{"id": "c8928131-6422-4493-850a-6df1f9f12c31", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.swarm_size = 10 * dim\n        self.alpha = 0.5  # control parameter for quantum behavior\n        self.beta = 1.0   # control parameter for convergence speed\n\n    def __call__(self, func):\n        # Initialize the swarm\n        swarm = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, swarm)\n        self.evaluations = self.swarm_size\n        \n        personal_best = swarm.copy()\n        personal_best_fitness = fitness.copy()\n        \n        global_best_idx = np.argmin(fitness)\n        global_best = swarm[global_best_idx]\n        global_best_fitness = fitness[global_best_idx]\n        \n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Calculate mean best position\n                mean_best_position = np.mean(personal_best, axis=0)\n\n                # Update position using quantum behavior\n                phi = self.alpha * np.random.rand(self.dim)\n                u = np.random.rand(self.dim)\n                local_attraction = personal_best[i] - u * np.abs(global_best - mean_best_position)\n                global_attraction = global_best - u * np.abs(global_best - mean_best_position)\n                new_position = np.where(u < 0.5, local_attraction, global_attraction)\n\n                # Control convergence speed\n                new_position = new_position + self.beta * (np.random.rand(self.dim) - 0.5)\n\n                # Ensure new positions are within bounds\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_fitness = func(new_position)\n                self.evaluations += 1\n\n                # Update personal and global bests\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n\n                    if new_fitness < global_best_fitness:\n                        global_best = new_position\n                        global_best_fitness = new_fitness\n\n        return global_best, global_best_fitness", "name": "QPSO", "description": "Hybrid Quantum-inspired Particle Swarm Optimization (QPSO) leveraging quantum behaviors and dynamic topology adjustment for enhanced convergence.", "configspace": "", "generation": 27, "fitness": 0.1555149132934067, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.14.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.35348335236783246, 0.3698628745839807, 0.3808163491922011, 0.35255000829060856, 0.3519807634453138, 0.3703042602368293, 0.3667574885958297, 0.38567795893691614, 0.3486274256897889, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05754035279224112, 0.0758881830408723, 0.05509198167607643, 0.08015353555788007, 0.07007302429966544, 0.08380688316117935, 0.09473803067209008, 0.09466891282298129, 0.0741234834298079, 0.05034473506421022, 0.047945274695496254, 0.03809374040349267, 0.07044257088057404, 0.05298353111315324, 0.05052854818126562, 0.0740294014764562, 0.047891452902557696, 0.0454762671582043, 0.35869615123938714, 0.38743914763610166, 0.12397368871760572, 0.34664849900693817, 0.5132608903254015, 0.2715867725864164, 0.8954532939705332, 0.8838362524081036, 0.864479816352437, 0.20312632728212543, 0.1737141893710965, 0.17287866580376499, 0.21423904096195678, 0.21197423066461119, 0.2184664164523109, 0.1663954782906123, 0.13427370092149216, 0.1726786794403794, 0.1718384694946684, 0.17201352420729543, 0.13748626824300825, 0.2861299241705261, 0.26046593575071386, 0.28399050917628865, 0.20516336916791456, 0.2795993318870672, 0.22939071815839618, 0.13056090363937367, 0.12405470762479631, 0.1360003980788409, 0.11280868512230191, 0.1306291209088155, 0.12333739552310907, 0.1290438500975306, 0.13268169242180827, 0.12601483681920178, 0.102133055141447, 0.1386195497021817, 0.1363023007769445, 0.13304487726169278, 0.126451319785429, 0.12473187455023016, 0.14723212427707388, 0.004478370974604462, 0.1149799408690293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005337300606749196, 9.999999999998899e-05, 0.005995963713859576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14424764376392596, 0.0661861905692267, 0.07542559478243127, 0.04848901455823362, 0.011227950543169607, 0.005610120260315821, 0.031192723839864822, 0.05669440444474061, 0.04283914252081611, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0312588245014469, 0.03909128758568736, 0.041713966937859004, 0.05332958991392456, 0.051702851418527596, 0.05681523858142734, 0.059499437844756864, 0.08549544800461117, 0.07578740072183687, 0.34713735020876935, 0.3795366516102251, 0.3354927243970135, 0.37590208622243537, 0.32716042951803215, 0.3320222327622725, 0.3497805851584973, 0.37223232950317553, 0.33757236523906553, 0.0687616851577244, 0.04991874630130211, 0.08199216492544381, 0.09715478333160532, 0.10035430211525964, 0.10101575769989635, 0.11523982800038335, 0.06358651286030781, 0.10516844893131894, 0.130519123023346, 0.14300299103505243, 0.12082639023532116, 0.15373620322474635, 0.15802623382476833, 0.20205315438168692, 0.15242510054601277, 0.1279297373095486, 0.1594640509691022, 0.15969330157559802, 0.16826471030658252, 0.18462513915248635, 0.24690208364099242, 0.24243431169516882, 0.25657494078767773, 0.1713059158725504, 0.24856652478005936, 0.21478937107805407, 0.13521065205257832, 0.08988545733135911, 0.12729851729547714, 0.19640420548397475, 0.19838075210138095, 0.15605853063387076, 0.16422393369037436, 0.18285690962495404, 0.1853958574913308, 0.24976174340422197, 0.19572112358628324, 0.2286402822341349, 0.20563224785347511, 0.23724444387352617, 0.20919117094862416, 0.2216115433756911, 0.18198556183251258, 0.19812641889456395, 0.1870993999369821, 0.16661568758706202, 0.18371365889642244, 0.19983764158135575, 0.2024726259729991, 0.19565212152679756, 0.17498625505278398, 0.17809883898995027, 0.17820139534297996, 0.10140867951644328, 0.17344344128814004, 0.10140154554895198, 0.16781105964984122, 0.13300761993597154, 0.12087710242372307, 0.4044496405523561, 0.14458521815681924, 0.16049053175466343, 0.37487802283267024, 0.19834541204758138, 0.0733440559837869, 0.25907430314860336, 0.10400604095352717, 0.20527574417973238, 0.14384352329085193, 0.09133254776353772, 0.15420470693748944, 0.1928760158009355, 0.19981792936170184, 0.1883627235488553, 0.18297057717880694, 0.1759377152364504, 0.18728896622908364, 0.17792199224518424, 0.18960673991066146, 0.17646647977382057, 0.08048014863803188, 0.06381051763896028, 0.0777667161603105, 0.06288616223728294, 0.07364563068245167, 0.06734406630588308, 0.08370193235291967, 0.07094977152653681, 0.06950796556365002]}, "mutation_prompt": null}
{"id": "ebfe8dd3-5c06-401c-9bbb-fb6709144b83", "solution": "import numpy as np\n\nclass QiPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.population_size = 15 * dim\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        # Initialize positions and velocities\n        positions = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        fitness = np.apply_along_axis(func, 1, positions)\n        self.evaluations = self.population_size\n        personal_best_fitness = np.copy(fitness)\n\n        global_best_idx = np.argmin(fitness)\n        global_best_position = positions[global_best_idx]\n        global_best_fitness = fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n\n                # Update position\n                quantum_jump = np.random.rand(self.dim) < 0.05\n                new_position = np.where(quantum_jump,\n                                        self.lower_bound + np.random.rand(self.dim) * (self.upper_bound - self.lower_bound),\n                                        positions[i] + velocities[i])\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_fitness = func(new_position)\n                self.evaluations += 1\n\n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n\n                    # Update global best\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n\n                # Update position\n                positions[i] = new_position\n\n        return global_best_position, global_best_fitness", "name": "QiPSO", "description": "Quantum-inspired Particle Swarm Optimization (QiPSO) utilizing quantum superposition and tunneling for diversified exploration and enhanced convergence.", "configspace": "", "generation": 28, "fitness": 0.24067929675051317, "feedback": "The algorithm QiPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.5710448166061847, 0.561373974995071, 0.5385968849250888, 0.5595288452651523, 0.5861171645686059, 0.5865770945019173, 0.5731049411325115, 0.57708664497977, 0.5951833443913168, 0.23154313272979854, 0.22637182498227815, 0.24174438607412718, 0.2388784970236133, 0.2565592570687171, 0.19259425005465858, 0.25324703302656804, 0.23523589799924016, 0.19993272187367817, 0.1374498275331556, 0.15846455226262257, 0.1530594616302533, 0.17214649694741313, 0.2020243854791144, 0.15594322731282462, 0.16224004993493268, 0.13165063131711652, 0.15829448409136782, 0.12078550131310317, 0.12592765465104216, 0.11791041724603313, 0.1322447946988683, 0.12055321742966685, 0.12337891764573505, 0.11913243675342566, 0.1444107031592422, 0.11606489770178163, 0.9828363347633574, 0.9859181818897422, 0.9767645197898001, 0.9817051354369941, 0.9860967508475483, 0.9778059478352076, 0.9832508080441548, 0.9841351612002963, 0.9824833179357666, 0.3568715911090853, 0.300714739275053, 0.26631153304253163, 0.24621627524185963, 0.2768742160558447, 0.26637560101166147, 0.28330459773242767, 0.29989585387455664, 0.28330522145219106, 0.17159261502518874, 0.20856185150126205, 0.233401861898621, 0.4427981215682799, 0.21217635349740405, 0.21548401950173646, 0.13758839205250828, 0.2408211527212628, 0.23480063088914216, 0.13377611092773145, 0.16387220703715466, 0.1611336553590882, 0.16864662050724177, 0.16989745280781898, 0.1489801619473652, 0.16215803628419567, 0.15032959961801717, 0.14626472675311775, 0.1441211094797099, 0.15211033788387052, 0.14970290660736352, 0.13967331292462604, 0.19176474068183513, 0.28590082594968713, 0.177342834734728, 0.1264229598089598, 0.17952929293429765, 0.028947316304157922, 0.0010006074389843356, 9.999999999998899e-05, 0.04382504934859499, 9.999999999998899e-05, 9.999999999998899e-05, 0.019116873739081663, 9.999999999998899e-05, 9.999999999998899e-05, 0.10831053279076186, 0.029534013454086572, 0.14796609366262015, 0.07368353387211812, 0.0771947902489355, 0.024816716704576747, 0.09248903634682504, 0.06733544157963056, 0.06347682379613484, 0.04227963397909207, 0.019165954625018133, 0.027276348442108023, 0.054623062564310154, 0.03386494568971188, 0.0752193699327901, 0.05819641719320623, 0.03788418351543332, 0.05071666640618622, 0.1241588942352948, 0.03982703331971571, 0.14805230822976212, 0.15197628937146623, 0.0960276785484262, 0.15154685056146933, 0.12874473231986028, 0.05642586288958773, 0.13457354105833497, 0.44916451122232726, 0.43889994802969157, 0.4459612904368365, 0.4816498412187896, 0.4153000581584063, 0.4565866204125145, 0.4396421548883076, 0.43517850091723176, 0.47383927537239967, 0.06509136485297728, 0.08691575791210815, 0.12336785095502567, 0.11603861282983252, 0.11562786815784443, 0.10417498534488256, 0.11090769046798721, 0.09944863272464022, 0.12476552569544475, 0.15377351810290218, 0.24555055969035877, 0.17478552804672431, 0.1684254408823399, 0.294483727649248, 0.21309816965926354, 0.23494077170891603, 0.18053073701184874, 0.15548131060662418, 0.2930061078497659, 0.31921519944997767, 0.3263407444950327, 0.27127978187307267, 0.33983101057510234, 0.3332092934083254, 0.31556619254616314, 0.3155328794798462, 0.33150897710657623, 0.19304356888935403, 0.21639765989028947, 0.2087925315949244, 0.2613736293863692, 0.1973164069773845, 0.20845088487313124, 0.24984547108869049, 0.25823857233349, 0.14584562204524987, 0.21023810098814444, 0.1994670020442445, 0.18321704992018584, 0.21725202116420683, 0.2168313244665988, 0.18962564592855702, 0.21221150150113743, 0.18777770804270444, 0.20047116270328902, 0.1835186162439052, 0.22078647935939832, 0.22693578313384, 0.21216120882168976, 0.21233567445966406, 0.2353859251118291, 0.21591880433650146, 0.20291752829464194, 0.2170180410141226, 0.130607208553427, 0.16805689627966802, 0.8058735200111982, 0.1588694319063303, 0.5522884292273318, 0.16658055821139528, 0.17614622208854724, 0.16094220231383494, 0.779899985074598, 0.6141372598359138, 0.21238850613337767, 0.37660222288711176, 0.168670281841649, 0.16889516984295372, 0.15235707347187744, 0.16924645376720804, 0.33700548721256096, 0.44531752835329075, 0.18465946683680334, 0.18397081398201875, 0.1898218947996536, 0.19069608964867923, 0.1882420393642772, 0.18634389916390415, 0.1899613386497766, 0.18202191026595915, 0.17445112159902, 0.09865157608974062, 0.0771426362225146, 0.0912338092041246, 0.08886454477520656, 0.09556515761406559, 0.08068867994656903, 0.09096301146819863, 0.07874817545905499, 0.0834464827415552]}, "mutation_prompt": null}
{"id": "d66bed56-83f0-4798-a3d9-d0ecec022bd7", "solution": "import numpy as np\n\nclass HPSO_AMCC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.pop_size = 10 * dim\n        self.inertia = 0.729  # Constriction Coefficient\n        self.c1 = 1.49445  # Cognitive Component\n        self.c2 = 1.49445  # Social Component\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        position = self.lower_bound + np.random.rand(self.pop_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocity = np.random.rand(self.pop_size, self.dim) * (self.upper_bound - self.lower_bound) / 2.0\n        personal_best_position = np.copy(position)\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best_position)\n        self.evaluations += self.pop_size\n\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                velocity[i] = (\n                    self.inertia * velocity[i]\n                    + self.c1 * r1 * (personal_best_position[i] - position[i])\n                    + self.c2 * r2 * (global_best_position - position[i])\n                )\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n                # Adaptive mutation\n                if np.random.rand() < self.mutation_rate:\n                    mutation_vector = (np.random.rand(self.dim) - 0.5) * (self.upper_bound - self.lower_bound) * 0.1\n                    position[i] += mutation_vector\n                    position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n                current_fitness = func(position[i])\n                self.evaluations += 1\n\n                if current_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = position[i]\n                    personal_best_fitness[i] = current_fitness\n\n                    if current_fitness < global_best_fitness:\n                        global_best_position = position[i]\n                        global_best_fitness = current_fitness\n\n        return global_best_position, global_best_fitness", "name": "HPSO_AMCC", "description": "Hybrid Particle Swarm Optimization (HPSO) with Adaptive Mutation and Constriction Coefficient to enhance exploration and convergence speed.", "configspace": "", "generation": 29, "fitness": 0.19256234253150747, "feedback": "The algorithm HPSO_AMCC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.3698241218414099, 0.3993360221912168, 0.3883690106737908, 0.36185084449816685, 0.3903918335129237, 0.39314428186109696, 0.3730592545602269, 0.3620504391364523, 0.3767654150133132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026363448762633412, 0.035996699566257506, 0.0032974702878982853, 0.044305137981347054, 0.033868380587597335, 0.05261830191514072, 0.08566505987077999, 0.10563494210964886, 0.10117733063288392, 0.11794343657948625, 0.12317228527689916, 0.06457231402435792, 0.11272226228698745, 0.08891191481596361, 0.10589600345303751, 0.08700833437436273, 0.09164263758219915, 0.10296899109310031, 0.10431749086496367, 0.09349501818521422, 0.0922908122050552, 0.07847249134900125, 0.0764693273155268, 0.10854606893724827, 0.9901857849061296, 0.9905015505751781, 0.9901068368970734, 0.9792787660271569, 0.9827403985298155, 0.984838507555064, 0.982114225321393, 0.9820953490934665, 0.9827174935884148, 0.2414643833186284, 0.22802656049483916, 0.2599720664767622, 0.2305907215347378, 0.18899773466209868, 0.22543480273645577, 0.19487133942621915, 0.24610217138380774, 0.2101097459379072, 0.22202784999643177, 0.24380522315540087, 0.18546503974381756, 0.24858920319914912, 0.19952985421512504, 0.27121889842239566, 0.1928999376894014, 0.2200132269981342, 0.2232667099643263, 0.11476402064085811, 0.0947587340589835, 0.07406141699341129, 0.08409492718021971, 0.1519860813417987, 0.093552330146502, 0.12960687006166705, 0.15236119333032494, 0.11298332215692042, 0.11519531269008187, 0.10313345068933089, 0.11398777696609741, 0.11599806391699385, 0.14489085206979357, 0.1236510380044028, 0.10343972893789088, 0.11264299471753525, 0.10030439810817793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045091452192247417, 9.999999999998899e-05, 9.999999999998899e-05, 0.059859876996639305, 0.011813641617352766, 0.09674544993590639, 0.06343253924667369, 0.04574445320053089, 0.026725919496447204, 0.11279842441216681, 0.06885473754600535, 0.05552550730718975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08641885598333687, 0.03335753399383523, 0.037081541916379135, 0.07402918711878215, 0.07145508963877945, 0.11327100468389495, 0.057002986727140326, 0.060955057716040706, 0.060042500896787754, 0.33350613647163396, 0.3157610073056869, 0.3527687609108445, 0.3664574825373317, 0.3194640464952909, 0.35307211998842913, 0.3615829605389552, 0.3381858103937492, 0.3490425587944558, 0.09324185169164756, 0.06350731337959081, 0.08132998600075192, 0.09360281309242524, 0.1016264219345796, 0.11457450775995726, 0.09504990597314589, 0.11508906762188653, 0.09404668389600024, 0.2166369695858219, 0.2059172076308471, 0.16653862916156126, 0.20445148144196312, 0.16471983299547632, 0.18773968008999453, 0.19609938387873105, 0.1287293491548166, 0.22353166031761584, 0.19017176297396032, 0.17889029997847405, 0.2614071347063197, 0.26368989902661655, 0.19554609056536454, 0.24751814823307816, 0.2584421898868794, 0.26517131486601964, 0.24883155530239287, 0.1771029126111111, 0.15763949565184698, 0.18696957218314114, 0.20065636419220156, 0.17457113928677193, 0.1617727566298801, 0.13398392343107735, 0.18778803041526237, 0.19100768783264288, 0.20654006891030874, 0.1442401654874642, 0.19771525139051005, 0.19389075515092347, 0.20655382865431215, 0.17593715384127806, 0.21324106764095507, 0.18037689924247624, 0.1877374553281812, 0.18827970018795104, 0.20198348467155647, 0.20442079878347785, 0.18183518647651598, 0.1784980561377042, 0.1866478967032461, 0.1840583578297248, 0.25572399671813617, 0.1838357645500287, 0.4760466132641836, 0.16756521279268377, 0.1524196428433119, 0.42966782772695056, 0.19443984382179047, 0.1615510337238487, 0.17018417753041049, 0.4095697612998652, 0.4407156520169133, 0.24134034567559515, 0.20703550873692933, 0.38690018517446356, 0.3214677166857052, 0.16261490655863453, 0.12194415064862318, 0.35472663238236046, 0.33463506116607045, 0.20606002057819428, 0.1852978035745464, 0.1784072462178301, 0.19284992996089945, 0.18379800057763152, 0.1956433336138903, 0.18137826852039673, 0.17795224300832302, 0.21807365844712145, 0.18883865330913407, 0.0784623465560037, 0.07566209627869103, 0.08815991230656273, 0.07652131902190484, 0.07652698838018679, 0.07762677628099368, 0.08929662001828043, 0.09270599018460857, 0.08034121323877685]}, "mutation_prompt": null}
{"id": "295a863d-3d99-4ee0-8c1c-be88798d0c2e", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.swarm_size = 10 * dim\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.quantum_param = 0.1\n\n    def __call__(self, func):\n        swarm = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1 * (self.upper_bound - self.lower_bound)\n\n        fitness = np.apply_along_axis(func, 1, swarm)\n        self.evaluations = self.swarm_size\n\n        personal_best_positions = np.copy(swarm)\n        personal_best_fitness = np.copy(fitness)\n\n        global_best_idx = np.argmin(fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum behavior\n                quantum_positions = np.random.rand(self.dim) * self.quantum_param * (global_best_position - personal_best_positions[i])\n                quantum_positions = np.clip(quantum_positions, self.lower_bound, self.upper_bound)\n\n                # Update velocities\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_coeff * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 self.social_coeff * r2 * (global_best_position - swarm[i]))\n\n                # Update positions\n                swarm[i] = swarm[i] + velocities[i] + quantum_positions\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate fitness\n                fitness[i] = func(swarm[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness[i] < personal_best_fitness[i]:\n                    personal_best_fitness[i] = fitness[i]\n                    personal_best_positions[i] = swarm[i]\n\n                    # Update global best\n                    if fitness[i] < global_best_fitness:\n                        global_best_fitness = fitness[i]\n                        global_best_position = swarm[i]\n\n        return global_best_position, global_best_fitness", "name": "QIPSO", "description": "Quantum-inspired Particle Swarm Optimization (QIPSO) leveraging quantum superposition and entanglement principles for enhanced exploration.", "configspace": "", "generation": 30, "fitness": 0.1838312882669474, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.37498895273687305, 0.34291304533797695, 0.3412347580223617, 0.3741635128800682, 0.39371810516493, 0.40673544910377135, 0.3432397276958552, 0.38087660674440105, 0.38820235218358334, 0.008298673937423562, 0.00621753040414208, 0.03066036857838117, 0.019846510175419496, 0.013851290807983752, 0.04746558260443834, 0.06154977213778534, 0.09609062845687766, 0.046666432221939225, 0.09583623503623129, 0.0883343141723999, 0.09617729606413483, 0.1110170969715436, 0.06553156883589695, 0.07296610904368661, 0.10442768276169367, 0.0819829996827075, 0.09574587671939572, 0.09548631914293404, 0.11176865723414231, 0.09057997753724356, 0.10728417459405337, 0.07737178974143699, 0.08215049323017942, 0.07667719711859167, 0.08148541231291306, 0.12669477617388825, 0.9900399446729494, 0.989977334869574, 0.9903291491171825, 0.9908898167819938, 0.9901371373088542, 0.9883033001098888, 0.9893234492687241, 0.9899233996155583, 0.9901594529685726, 0.2163790852737797, 0.10929020173685655, 0.23807636748918637, 0.22861387620341633, 0.2921231038813934, 0.15286602931058646, 0.08360061749721448, 0.16056523528662714, 0.11628410478521689, 0.2189784880412915, 0.13588068510001994, 0.16485607038187777, 0.1803508827712429, 0.13815832598436428, 0.3291074810382164, 0.18172256001231613, 0.17115242740797754, 0.2887618034116939, 0.06958277952231562, 0.09841853365911524, 0.06270378502966834, 0.06111390320193899, 0.1579662901385327, 0.0554002887133056, 0.1590459066848836, 0.10584340897391142, 0.13427965924937468, 0.137448903841229, 0.1565096450820045, 0.11061642433538166, 0.1283911568104602, 0.1093527060064462, 0.11747193227930042, 0.08302401394863868, 0.12182558345806316, 0.13358407681755835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00040589148510683515, 9.999999999998899e-05, 9.999999999998899e-05, 0.03296963794814456, 0.012508248124698529, 0.07183451282568709, 0.05031941978657706, 0.009194949697446053, 0.020348487493653034, 0.06111412299994046, 0.03163401322853532, 0.041887740214530456, 0.015977559657092577, 9.999999999998899e-05, 0.020857875883985244, 0.01481195515953515, 0.010123989307672887, 0.03611153341469364, 0.022591573595400205, 0.01590042169726036, 0.0822426595859913, 0.0528299021046017, 0.05915352201008006, 0.00499912869915442, 0.08883357744694165, 0.043949514435560055, 0.004223580658174075, 0.041532905314405455, 0.08212710703024417, 0.05952152009644829, 0.4038258243239542, 0.3301575894439971, 0.3402642618777738, 0.34402076984523466, 0.30640695129721196, 0.3645610961588849, 0.4203769542314262, 0.3111703719160721, 0.34782340315132154, 0.066006593208919, 0.08869350254865527, 0.07167654427831116, 0.08165954347614224, 0.08928035094620701, 0.09396086591816677, 0.0855865543379477, 0.07646967234812818, 0.09084285520101587, 0.13322525328014867, 0.1853409938052999, 0.17880349536130347, 0.23098454203723273, 0.18902797903491164, 0.24535350991406135, 0.18537190831192174, 0.14837886367335484, 0.14504819799615032, 0.27437779029389875, 0.2177874430186474, 0.24364997533274468, 0.24051980718222998, 0.1913823745174461, 0.1889065022873314, 0.24461498906085521, 0.24471053651749286, 0.18499100495552456, 0.18812649197777342, 0.2012917811677748, 0.19992392988272412, 0.11495233796404392, 0.17878882976032784, 0.17896430265664898, 0.1774021923954162, 0.16721726539459525, 0.22134418389831767, 0.1856530695566042, 0.1570339261030831, 0.1855768448133288, 0.19229856718505167, 0.1597625434582265, 0.1817147739002416, 0.2215953943370481, 0.1781183517984295, 0.1804214338176422, 0.1841978174540566, 0.20459916490342134, 0.18367647209404847, 0.21227970966750598, 0.22301012544206955, 0.18457705669834779, 0.16203386309479484, 0.16985182908173813, 0.17748219235048435, 0.4440572895698013, 0.1597159070615649, 0.1464003959107173, 0.19067251393297902, 0.19932920472970772, 0.15791935325633077, 0.1391955484270868, 0.509294416811065, 0.19061767350196113, 0.28144653671168385, 0.16297739376452558, 0.24938754020098364, 0.19462133238531887, 0.25669425674656254, 0.13015430163207564, 0.19382311563891752, 0.20308946793073124, 0.32168900148053925, 0.19242814052529222, 0.18442524189759613, 0.19309841774694425, 0.19979553382955328, 0.17226194272494344, 0.18567370405547756, 0.19801938014146803, 0.18385453731028456, 0.19023065885300927, 0.06622535573368382, 0.08313834932192299, 0.07948128809662902, 0.08160669062591697, 0.07377332396873315, 0.07012234603556644, 0.06744712970134681, 0.07904236115702223, 0.07312333875147792]}, "mutation_prompt": null}
{"id": "eaa3c370-50cf-44f6-9219-3b145899702c", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "f0d2eca6-165f-4179-a499-94f5a5022b26", "solution": "import numpy as np\n\nclass PSO_AMDI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.swarm_size = 20 * dim\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n\n    def __call__(self, func):\n        # Initialize positions and velocities\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound) * 0.1\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.apply_along_axis(func, 1, positions)\n        self.evaluations = self.swarm_size\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        while self.evaluations < self.budget:\n            inertia_weight = self.initial_inertia - ((self.initial_inertia - self.final_inertia) * (self.evaluations / self.budget))\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update velocity and position\n                cognitive_component = self.cognitive_coeff * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social_component = self.social_coeff * np.random.rand(self.dim) * (global_best_position - positions[i])\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                current_score = func(positions[i])\n                self.evaluations += 1\n\n                # Update personal and global bests\n                if current_score < personal_best_scores[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_scores[i] = current_score\n\n                if current_score < global_best_score:\n                    global_best_position = positions[i]\n                    global_best_score = current_score\n\n        return global_best_position, global_best_score", "name": "PSO_AMDI", "description": "Particle Swarm Optimization with Adaptive Momentum and Dynamic Inertia for enhanced convergence in diverse optimization landscapes.", "configspace": "", "generation": 32, "fitness": 0.15928882971615319, "feedback": "The algorithm PSO_AMDI got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.2995728576166037, 0.33503689674752246, 0.3182295075150483, 0.2936211429848655, 0.3804287453523787, 0.3174303771408765, 0.3134102030860161, 0.3159778912008694, 0.2919934071325673, 0.024404626515550976, 0.0451743751060778, 9.999999999998899e-05, 0.01607931736646173, 0.027696632517318354, 0.00781087973813499, 0.004920285867026197, 0.011913417742013044, 0.027022144088208133, 0.07146911750585005, 0.06733945760524618, 0.06832966410869012, 0.06400987861907814, 0.06611791017811097, 0.05139571274465993, 0.0904066395881642, 0.08967631877342697, 0.08187552498327444, 0.06683012718694248, 0.05501613346247525, 0.06910368388061239, 0.07147824321623653, 0.0583100822669248, 0.07517032011833868, 0.08990835796418473, 0.06213388509401352, 0.09729033549141697, 0.9849621214809678, 0.9895427088208067, 0.9858081065349256, 0.9858405155984841, 0.9849376941901057, 0.9810592261384433, 0.9871445685476695, 0.9767684921064406, 0.9813164862610815, 0.15383795330845806, 0.12585323589687947, 0.13008626412462077, 0.12766245190963132, 0.13848484617740664, 0.12150581996304122, 0.10191165016925319, 0.12671439316364852, 0.1669746355769074, 0.1589966802235111, 0.1649976942387491, 0.15472761918049782, 0.16910247107539234, 0.2641341390411308, 0.17891903226932604, 0.13162364069155852, 0.1226535944474052, 0.16969485884115676, 0.09997216661094732, 0.09189232726472962, 0.07468347276553344, 0.0852447218584288, 0.0618056872811068, 0.06742401601334003, 0.03786837830192802, 0.029939909722421887, 0.058565548938582235, 0.04408635631569979, 0.04352642967484166, 0.12834524691721894, 0.07317701107838148, 0.05923163778542262, 0.0649792714919919, 0.08446767316112613, 0.06007438625542605, 0.05265509660880108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004384505537682326, 9.999999999998899e-05, 9.999999999998899e-05, 0.04095489686370202, 0.0245031849357511, 0.0527368410902338, 0.05416339750301846, 0.01557639706195113, 0.0015673885109579455, 0.031319022475809644, 0.030744849901538918, 0.04524222703677894, 0.008481698329369514, 9.999999999998899e-05, 0.0098731855845543, 9.999999999998899e-05, 9.999999999998899e-05, 0.002424579233953006, 0.013277760732045896, 0.007091261040809149, 0.004540527394242377, 0.0344744677629818, 0.006298218301654335, 0.08017551025974534, 0.01740131664499045, 0.017367791050823644, 0.0014202697923739738, 0.02900947223380057, 0.0376779742246961, 0.027975946926651507, 0.2964547036160916, 0.2567237729747641, 0.3019696221899165, 0.30424821362968246, 0.2671921899299923, 0.26859586585513595, 0.3313490173639786, 0.25238012397453147, 0.27391748676893624, 0.06390899079262813, 0.06243162585829454, 0.05551959343389867, 0.08018682836023805, 0.09565022092096676, 0.06570864151658518, 0.055766841059386785, 0.07938227424570665, 0.07833596441173518, 0.1466303307645338, 0.15435472882220436, 0.17103283521815393, 0.15960925569475526, 0.1853635874146795, 0.17193509307873578, 0.15369584201076503, 0.18974530146398616, 0.14572775398401938, 0.20442534655703593, 0.19153419162245833, 0.21202180574022578, 0.2044032156994866, 0.17408172638910202, 0.21676542086595418, 0.19400513703498923, 0.2410371029274171, 0.20519064953831034, 0.13336552563890258, 0.15741037556266313, 0.15850516346110266, 0.15037063252321936, 0.1598504620656862, 0.18962687928656763, 0.18028946769960008, 0.18382357718723197, 0.14318169900956235, 0.17255596177735955, 0.17599142499077258, 0.17180678561841523, 0.16932288549987862, 0.16252050487370817, 0.15253412230620012, 0.16378575388172745, 0.19463831878511928, 0.1855127738772715, 0.159215107071199, 0.18996219920918833, 0.1732801705189746, 0.1641284562442865, 0.17677514536158612, 0.16843142750635998, 0.16215376616853305, 0.18270322568952357, 0.17302430663651158, 0.1237623674860524, 0.17194185995326972, 0.1837528279189874, 0.17031396315317893, 0.18257978971917532, 0.13855179317005928, 0.132295391520998, 0.14711010131458457, 0.18506918064811795, 0.3377255890590465, 0.16553763106855746, 0.16148939588943556, 0.3463641820098283, 0.17117905099923958, 0.20379432769733152, 0.13992010671255317, 0.19910942003757448, 0.2545240407493876, 0.19460441245940951, 0.1723835459292251, 0.1912292517191767, 0.18651492808362424, 0.18103211801649, 0.1822596289711157, 0.1758376908629602, 0.18740806810355193, 0.18879964879773992, 0.0717045876619401, 0.06253818948009793, 0.06574520422487862, 0.06141794840936876, 0.057994821571698996, 0.06812730710313664, 0.06037115774046253, 0.05863844555837061, 0.05299085073321508]}, "mutation_prompt": null}
{"id": "b09deb2e-a96a-42a6-a851-ee5c802dee82", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "e112a243-a14c-4c8e-82cd-55aa462ec6af", "solution": "import numpy as np\n\nclass PSO_AIWDN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.swarm_size = 10 * dim\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.min_inertia_weight = 0.4\n        self.max_inertia_weight = 0.9\n\n    def __call__(self, func):\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1 * (self.upper_bound - self.lower_bound)\n        personal_best_positions = np.copy(positions)\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations += self.swarm_size\n\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.social_coeff * r2 * (global_best_position - positions[i]))\n\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                fitness = func(positions[i])\n                self.evaluations += 1\n\n                if fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_fitness[i] = fitness\n\n                    if fitness < global_best_fitness:\n                        global_best_position = positions[i]\n                        global_best_fitness = fitness\n\n            inertia_decay = (self.max_inertia_weight - self.min_inertia_weight) / self.budget\n            self.inertia_weight = max(self.min_inertia_weight, self.inertia_weight - inertia_decay)\n\n        return global_best_position, global_best_fitness", "name": "PSO_AIWDN", "description": "Particle Swarm Optimization with Adaptive Inertia Weight and Dynamic Neighborhoods (PSO-AIWDN) to enhance convergence speed and global search capability.", "configspace": "", "generation": 34, "fitness": 0.13310981801548394, "feedback": "The algorithm PSO_AIWDN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.2347851540921676, 0.21885343608917573, 0.22769615922301933, 0.20277823562552222, 0.21113394891097292, 0.30124492345177456, 0.19048423918916513, 0.22887480739197386, 0.22729062357028273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04900991553439016, 0.050931276871241216, 0.053514060468999425, 0.06361876303437808, 0.04842942767134051, 0.05621009343356165, 0.051075080272870776, 0.05070232924145879, 0.05137286789654538, 0.03949405483397328, 0.03980184727412561, 0.03368454599713877, 0.04162779950569506, 0.07369659297151288, 0.046017883745845256, 0.03316397546955452, 0.03860587460674347, 0.041005899355170516, 0.9901131930617669, 0.9875364117296229, 0.9906043493892647, 0.989484656579537, 0.9899251200272295, 0.9866833143506609, 0.9882803030973908, 0.9863288369189588, 0.9884849454172132, 0.11676445857994877, 0.07429831998284464, 0.05793221626428657, 0.09868456368000911, 0.06816750230953239, 0.10390472417737362, 0.08018072127701448, 0.07045592874832418, 0.08922620624398037, 0.1604948882307553, 0.1185999190121736, 0.14693470282864907, 0.13475873292301588, 0.13887253909942043, 0.16745436834468275, 0.11098970572384592, 0.10844823987902585, 0.13649043863286647, 0.011921938041711821, 0.0062555256813526805, 0.041951997729750445, 0.04763689587168152, 0.015726547459383955, 0.006016186623456599, 0.027697306380080722, 0.002338003766734764, 0.060244088899346404, 0.04065220434864947, 0.006872423953448226, 0.005066534206524365, 0.060064529848026016, 0.0015302300827366722, 0.015008393806553832, 0.0002510478715417319, 0.016501533200721674, 0.007650258235661234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05448049603704985, 0.004352324517232553, 0.04990778467293244, 0.04914765806423216, 0.007115089304820188, 0.004732528035225503, 0.025507805089985403, 0.01634298593252792, 0.08248157520112598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00437822070176519, 0.006747867306441724, 9.999999999998899e-05, 0.0012642571579226658, 0.011396901511250501, 0.040948450482343635, 0.0006748823076472288, 0.036612928610500584, 0.21463164583002703, 0.18702522009195877, 0.21277846205915918, 0.20704260510870676, 0.23113428645493184, 0.18444312138606078, 0.2389184715710001, 0.1864313299581687, 0.2616315500305736, 0.07015168537055638, 0.043791797248508346, 0.05506674429360703, 0.056877415126040276, 0.06222133015077613, 0.04831924106230745, 0.04161705424323314, 0.05111770899494117, 0.04885665594223643, 0.15096715809574612, 0.13026877558467953, 0.14829366431178392, 0.2285395373454414, 0.12627948627507357, 0.13381711438829502, 0.16114074265176404, 0.13706288390299304, 0.17516900518540335, 0.1782572194848544, 0.17638197840389713, 0.17775027113780306, 0.16415589939946185, 0.1506968770870042, 0.16845185772093796, 0.20911768097066397, 0.19964669620594877, 0.15713139564978007, 0.12757286376556676, 0.13995612613787567, 0.11785705013190362, 0.09226737942998375, 0.14941840564218367, 0.12936036217297275, 0.13092501474736729, 0.1128800069576471, 0.13455243983491216, 0.14765410269028612, 0.1279101686136671, 0.15266556565052436, 0.14760171748088236, 0.1633197891436945, 0.16771379484122095, 0.15215750285476293, 0.14369397548326657, 0.15022411268789837, 0.15671468604764072, 0.1552578694703638, 0.09851046422235121, 0.14832421176769894, 0.1508513428952849, 0.16131718335660683, 0.15987783623264062, 0.1500807332942481, 0.15738430905228618, 0.22622123106316205, 0.147009759185445, 0.12267197831106424, 0.18417692508154837, 0.17434782045884045, 0.15761904875066024, 0.1607473655655164, 0.14190662462055903, 0.23534080345702857, 0.14534169969707722, 0.16585462028458986, 0.12271143047210664, 0.14872443372017374, 0.14675489360695826, 0.10532353630704039, 0.19184832738214697, 0.11180345994032381, 0.18994979668006706, 0.17514269173315655, 0.19613438849824083, 0.1881505387430148, 0.18070225677376917, 0.18280596056714282, 0.184310731143993, 0.18768976289788508, 0.17911888584249336, 0.20582816498535617, 0.046339966254219545, 0.04441485559703162, 0.047737177171473966, 0.05824917958014553, 0.048788030774346014, 0.04618113695206938, 0.041970893297352596, 0.04308644420523, 0.05790176523488422]}, "mutation_prompt": null}
{"id": "53d7e44c-d0a1-4531-89c4-11f6f7a288aa", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "eadd0986-5a5f-412f-9c3f-65a85b79a824", "solution": "import numpy as np\n\nclass APSO_QILS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.pop_size = 10 * dim\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.quantum_delta = 0.1\n        \n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.pop_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.pop_size, self.dim) * 0.1\n        fitness = np.apply_along_axis(func, 1, positions)\n        self.evaluations = self.pop_size\n\n        # Initialize personal bests and global best\n        personal_best_positions = np.copy(positions)\n        personal_best_fitness = np.copy(fitness)\n        global_best_idx = np.argmin(fitness)\n        global_best_position = positions[global_best_idx]\n        global_best_fitness = fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities\n                          + self.cognitive_coeff * r1 * (personal_best_positions - positions)\n                          + self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Apply quantum-inspired local search\n            quantum_perturbation = (np.random.rand(self.pop_size, self.dim) - 0.5) * self.quantum_delta\n            quantum_positions = np.clip(positions + quantum_perturbation, self.lower_bound, self.upper_bound)\n            quantum_fitness = np.apply_along_axis(func, 1, quantum_positions)\n            self.evaluations += self.pop_size\n            \n            # Evaluate fitness and update personal and global bests\n            new_fitness = np.apply_along_axis(func, 1, positions)\n            self.evaluations += self.pop_size\n\n            for i in range(self.pop_size):\n                if new_fitness[i] < personal_best_fitness[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_fitness[i] = new_fitness[i]\n\n                if quantum_fitness[i] < personal_best_fitness[i]:\n                    personal_best_positions[i] = quantum_positions[i]\n                    personal_best_fitness[i] = quantum_fitness[i]\n\n            global_best_idx = np.argmin(personal_best_fitness)\n            if personal_best_fitness[global_best_idx] < global_best_fitness:\n                global_best_position = personal_best_positions[global_best_idx]\n                global_best_fitness = personal_best_fitness[global_best_idx]\n\n        return global_best_position, global_best_fitness", "name": "APSO_QILS", "description": "Adaptive Particle Swarm Optimization with Quantum-Inspired Local Search (APSO-QILS) to dynamically balance exploration and exploitation while leveraging quantum-inspired local adjustments for enhanced convergence efficiency.", "configspace": "", "generation": 36, "fitness": 0.2505916207253464, "feedback": "The algorithm APSO_QILS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.644809182486174, 0.626298034023691, 0.6305714323123717, 0.6331278759453356, 0.6682059805542779, 0.6515755152804357, 0.6553386097549538, 0.6472516670704693, 0.5896779014214798, 0.09959564752386085, 0.24362702204468356, 0.168841512734907, 0.21879237856663047, 0.2943247774440443, 0.2881272113900464, 0.2888931138497651, 0.2110439078121904, 0.13766536685463848, 0.12217820987069339, 0.14685578886543194, 0.14422795750352502, 0.12269543988463516, 0.16748209266967073, 0.12550949370363085, 0.10443727584028928, 0.14740292974202207, 0.13083718970632907, 0.11112891530762359, 0.10502766095934735, 0.10586733876036136, 0.11105510961142795, 0.0986275595130488, 0.12245384796758041, 0.1228697099926247, 0.12566866864527582, 0.11624923240543539, 0.9762406776036392, 0.9712422063578946, 0.9741754966370105, 0.9375738948407379, 0.9477559784433421, 0.9641163724287136, 0.9711264326658455, 0.9734805662916418, 0.9651369579719585, 0.34429045741654773, 0.37688497766847573, 0.31087049101174224, 0.31285344136370163, 0.35012838917818057, 0.3481521469144422, 0.3481428890816325, 0.32620865530797716, 0.3059975734674377, 0.19907665476477965, 0.16904532305146147, 0.7290721675074685, 0.21123554170859415, 0.36318097851379927, 0.5528402636217535, 0.6053325541338521, 0.2099058622175497, 0.22106122600125833, 0.16176352471351196, 0.10586860184684987, 0.2068662623586307, 0.0999790225902889, 0.18361648614529325, 0.10030603705425978, 0.1752602110596565, 0.1541951217003945, 0.18539446102446844, 0.18372767824371694, 0.18404213158604654, 0.12056880844457452, 0.17970979579126556, 0.2189483113445454, 0.14517060447586594, 0.1853550283634553, 0.08587026506892015, 0.2084058459824485, 9.999999999998899e-05, 0.026060975195691616, 9.999999999998899e-05, 0.04317453520529346, 0.06221057304925892, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013886580478867927, 0.06401299082892709, 0.12055854065461336, 0.035749931126931034, 0.15945921904238736, 0.10443308613615843, 0.0024417915332549667, 0.026539409625904398, 0.0554137615816388, 0.031548911577698346, 0.05129734658258567, 0.039712842339112986, 0.08496622441957402, 0.03145161903600169, 0.0538673338211032, 0.04686796844787444, 0.04815677297936105, 0.07207792327501261, 0.059695266865107954, 0.08972278816303092, 0.14999811204351665, 0.04007489401393449, 0.072570460717015, 0.05811382511574825, 0.17300608649686344, 0.11284924953434261, 0.07292883594283361, 0.05286800462098529, 0.08170946140291413, 0.45476657246440344, 0.43505948705960573, 0.4731536371923153, 0.5043279098504889, 0.46158456296642114, 0.4732925912974224, 0.48221046800002454, 0.44747670465352507, 0.46480314899278863, 0.07824363295776549, 0.07826739613825939, 0.10855881247509058, 0.09988928573199696, 0.13195445287710594, 0.1365351319169109, 0.167112492200156, 0.10042130300679641, 0.12395873822436532, 0.17522359116590613, 0.2331558143812359, 0.1950439605350719, 0.2636662637413486, 0.3307216446701886, 0.3043911138402302, 0.19020294473484234, 0.2342600731705533, 0.2561833778289119, 0.29256151669933106, 0.3707491415652533, 0.2614282014173894, 0.3641199956908434, 0.3392741078382657, 0.32693638579248585, 0.35464992415559005, 0.3884239813061875, 0.36548588913635016, 0.26436252263338145, 0.23837877586565692, 0.26072537727566203, 0.15457772546122106, 0.18258774979094383, 0.25593569705002706, 0.2548289236141674, 0.2876835518721852, 0.3155500932997721, 0.20947536156856372, 0.17701714082480635, 0.27091596569014886, 0.22041284774559744, 0.20832921050338893, 0.1961209874016192, 0.20112789764165595, 0.21413236908551447, 0.21596851238619919, 0.19765669579517375, 0.21685616749928294, 0.20684319570251541, 0.19913065613771186, 0.41751900779063145, 0.30746828521549296, 0.19512490113655767, 0.18424027606817217, 0.19386196825142166, 0.1610615918357713, 0.13970833525793536, 0.15171087753805446, 0.7995737583764913, 0.1979723616769019, 0.16886621122485135, 0.14105463642090166, 0.16022868170488713, 0.20884296578904116, 0.6023248601861058, 0.2054681479131597, 0.20214756390505373, 0.1559079635585333, 0.3853787775942409, 0.1530711496690259, 0.10427273378334301, 0.6407158722102329, 0.3947504990461741, 0.17884088731818282, 0.18955313966156084, 0.2163010247968853, 0.19258944986018256, 0.18866168931653604, 0.1962428612458661, 0.1955799818637386, 0.19712194567940278, 0.20057571206279412, 0.09067864786479163, 0.11104350338459756, 0.07913388407759592, 0.07818321915104465, 0.08205551770636432, 0.08903058233686334, 0.0872572723639169, 0.08735152279179204, 0.07576079711200723]}, "mutation_prompt": null}
{"id": "29a95b2e-a608-4b8d-95f1-8ee4dcaf79a3", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "f6a8c9c4-2ae7-4323-9863-65a2917ccf8b", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "908e3fcb-3cf9-49ac-9cdb-04c0862ed48e", "solution": "import numpy as np\n\nclass QIDE_APT:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.5\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                # Quantum-inspired update\n                alpha = np.random.rand(self.dim)\n                beta = 1 - alpha\n                superposed_vector = alpha * x1 + beta * (x2 - x3)\n\n                # Adaptive parameter tuning\n                self.scale_factor = 0.5 + 0.3 * np.tanh(self.evaluations / self.budget)\n                mutant_vector = superposed_vector + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE_APT", "description": "Quantum-inspired Differential Evolution with Adaptive Parameter Tuning (QIDE-APT) using quantum superposition principles and dynamic parameter adjustment for enhanced diversity and convergence.", "configspace": "", "generation": 39, "fitness": 0.12391595207057013, "feedback": "The algorithm QIDE_APT got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.08.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.2812504275646355, 0.3036189077267992, 0.32593920642466234, 0.21174894725850368, 0.22358894937347185, 0.24577183330593266, 0.2507710883066948, 0.24691854958183257, 0.24780069368845337, 9.999999999998899e-05, 9.999999999998899e-05, 0.006585799214407939, 0.012208474119703161, 0.034921649244410435, 0.0020040506991424456, 0.003921304484170052, 9.999999999998899e-05, 0.00044788539551443574, 0.087758458352997, 0.07494029844584782, 0.07247069566590902, 0.08447258774589173, 0.07188663931250572, 0.08833223305634164, 0.06603162459255185, 0.08319229526938965, 0.07746652842843338, 0.0735724716414059, 0.06463875266083052, 0.06006705362737652, 0.06787904175334025, 0.0584246022693784, 0.07063548340130277, 0.06632043247492425, 0.06051766558534433, 0.06436110885774582, 0.153045969424619, 0.1252968276005778, 0.11420025696473146, 0.10669799430776128, 0.1254043465269271, 0.18816083288553742, 0.11667442070785039, 0.12734261699573401, 0.15273344002893718, 0.12940781616118224, 0.12927773441326829, 0.11831740930822598, 0.11663902812023264, 0.1122343719476887, 0.10256729696480438, 0.1334544830160701, 0.1088797658031766, 0.12280289666651645, 0.21016268688584983, 0.24607303862431362, 0.23001870811163905, 0.17802200218654385, 0.1423929476155512, 0.14653537330053823, 0.1592346638622808, 0.1776167660513669, 0.14760440368473937, 0.09413096651323971, 0.09125782683306538, 0.07921114646748306, 0.05409261926723974, 0.052641741183799606, 0.05613825691397867, 0.06666273463933536, 0.03784368184576958, 0.06577641440987214, 0.15919874688684144, 0.15907211879439942, 0.15930006963216325, 0.14595632654031976, 0.14289049186313985, 0.1490309692629871, 0.13956023735326784, 0.16245676649138208, 0.16641482879918912, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006462663582132988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05456415648470225, 0.07017220335665042, 0.06892087270763803, 0.02781128319683246, 0.044620275561132794, 0.07032219820851482, 0.06594768428414499, 0.07117875291581444, 0.0453287290787423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02703593724636799, 0.009855723311917752, 0.00935214356097891, 0.00458142196523148, 0.00012310025599926444, 0.0017122743270622243, 0.006892208415311907, 0.0030491110130622667, 9.999999999998899e-05, 0.26776673215922187, 0.2589318967821721, 0.2538762710843261, 0.2586277980707363, 0.24111200040601155, 0.25262824493299063, 0.3060286163097816, 0.28208639287280635, 0.2616087115266317, 0.06663786229905622, 0.07423752064971612, 0.06353938164511708, 0.05645683034551929, 0.06139829473969616, 0.05518907501522585, 0.07785738968999067, 0.07133184528114467, 0.06986677125064256, 0.13086473457511816, 0.14649303013641035, 0.14076021778894632, 0.12281744644089942, 0.1412938393256229, 0.11775914156658851, 0.12461079300788058, 0.15869928184383297, 0.11945807313189538, 0.1993100128459464, 0.19521554863894797, 0.20054278064904563, 0.22284264693270484, 0.2120205227738038, 0.20627830448153628, 0.1842963166656365, 0.19596507478625458, 0.19374647765335562, 0.1413176773104895, 0.12972736819122144, 0.13872414579012093, 0.1767762249192819, 0.14677278201102306, 0.1857531478404939, 0.14980368422389856, 0.13622212185642324, 0.14499340258689097, 0.19322882999336255, 0.1798533646054319, 0.17204147282434967, 0.19511606429511508, 0.1881258155567207, 0.18299245235845052, 0.17795061376886456, 0.1699820186135006, 0.17956811960394825, 0.16918010527894967, 0.15626209041038386, 0.16341745387302253, 0.16484237450049477, 0.16752120620410382, 0.17918485551494046, 0.17217434643622187, 0.15829695875559624, 0.17174991542981388, 0.24875888867698226, 0.162766558946978, 0.16638624255131795, 0.15988010596989022, 0.22627183179542676, 0.2758796657012571, 0.18104076077527242, 0.1662665307353216, 0.25922920557374896, 0.2338639221604737, 0.17492149434803428, 0.1598576848234048, 0.2086852631269197, 0.22315432412583125, 0.1961728100118202, 0.3027036666725338, 0.24743632882552535, 0.18248175503167063, 0.17873425081544814, 0.18429775363329204, 0.16950608571023162, 0.17854071583798958, 0.1867262218165464, 0.19849445720373804, 0.2008599474810615, 0.18427494746723727, 0.21103776369024851, 0.05995013899582591, 0.06316122165917637, 0.06885348890526888, 0.08549124347966752, 0.07824646178503025, 0.05843677027238514, 0.0761564465681438, 0.07280238016211371, 0.07366969720669914]}, "mutation_prompt": null}
{"id": "f81536aa-56f9-4299-80f8-f1f81a14e316", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.pop_size = 30 * dim\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.7   # inertia weight\n\n    def __call__(self, func):\n        # Initialize positions and velocities\n        positions = self.lower_bound + np.random.rand(self.pop_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.pop_size, self.dim) - 0.5\n        fitness = np.apply_along_axis(func, 1, positions)\n        self.evaluations = self.pop_size\n\n        # Initialize best positions\n        personal_best_positions = np.copy(positions)\n        personal_best_fitness = np.copy(fitness)\n        global_best_idx = np.argmin(fitness)\n        global_best_position = positions[global_best_idx]\n        global_best_fitness = fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update velocity and position using QIPSO principles\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i]\n                                 + self.c1 * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.c2 * r2 * (global_best_position - positions[i]))\n\n                # Quantum-inspired update\n                quantum_factor = np.random.uniform(-1, 1, self.dim)\n                quantum_contribution = np.sin(quantum_factor * np.pi) * (global_best_position - positions[i])\n                positions[i] += velocities[i] + quantum_contribution\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new fitness\n                new_fitness = func(positions[i])\n                self.evaluations += 1\n\n                # Update personal and global bests\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_fitness[i] = new_fitness\n\n                if new_fitness < global_best_fitness:\n                    global_best_position = positions[i]\n                    global_best_fitness = new_fitness\n\n        return global_best_position, global_best_fitness", "name": "QIPSO", "description": "Quantum-inspired Particle Swarm Optimization (QIPSO) leveraging superposition and entanglement principles for enhanced search diversity and convergence.", "configspace": "", "generation": 40, "fitness": 0.16262777356781175, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.3553076904821242, 0.3088676450639012, 0.28832258915577713, 0.29302256828030715, 0.3126454624541365, 0.31517415573816765, 0.3162173432834161, 0.3015796424005467, 0.37638857405632353, 0.005198761098070048, 9.999999999998899e-05, 0.007839092731446673, 0.000560403149641564, 0.009715243877193469, 0.013315402117718977, 0.00010197480740348208, 0.006375538925613933, 0.019412129013178125, 0.06514094437109708, 0.06255071234933307, 0.08095721467372241, 0.058745402765956745, 0.07966882143813214, 0.07813642702170731, 0.06181179240212009, 0.08706838878283996, 0.07777454543870643, 0.07822797055932074, 0.07008209987520952, 0.07570471932325273, 0.048295709369869155, 0.044038816485813204, 0.061214702787539266, 0.06821560595329501, 0.08372001170186483, 0.06223713530725494, 0.9721160907195953, 0.9758265366298244, 0.9756358512040507, 0.9710361838406795, 0.9756556470461158, 0.9758440859395704, 0.9719440160214328, 0.9760075053431287, 0.9695036478176191, 0.1508396122277581, 0.17860254567554035, 0.1348096715170628, 0.1387434903663538, 0.12636547274735022, 0.15094481237344348, 0.16168071741145973, 0.14874753750775815, 0.11010288787763478, 0.17426014395780764, 0.1626795130879526, 0.15194921720875232, 0.18521981794385978, 0.17710313578731152, 0.17701176958326414, 0.1571771153937701, 0.1966896237116773, 0.17707210714519295, 0.0756351626798627, 0.07285259143306377, 0.0571291328495408, 0.05803972604526497, 0.07339024750727163, 0.06876877772204737, 0.0772594450895715, 0.08239872235025647, 0.08654593323189896, 0.04724353528219449, 0.09739043594348895, 0.05731613200821506, 0.08796911275606412, 0.055796440084063814, 0.12389002107252167, 0.0717490255574812, 0.1039125034740902, 0.06422079829976446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011795510723830005, 9.999999999998899e-05, 9.999999999998899e-05, 0.013021871190561085, 0.019780087235280908, 0.06688829194292778, 0.012102383971008046, 0.08586798651761873, 0.0156293170598103, 0.02814097080273026, 0.10080697141412054, 0.032756358763052607, 9.999999999998899e-05, 0.00015888572490618813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01546763035046772, 0.019657511298285302, 0.006022281454167611, 0.01808582538857484, 0.02264936225405434, 0.04610517997891095, 0.04075321334602233, 0.03156198443825631, 0.04352981561378766, 0.29996296842774806, 0.3041235208133781, 0.29705762492911636, 0.2818616085939083, 0.27804709762701674, 0.24692823099767425, 0.2757444456652025, 0.32889224203560086, 0.2730453294724724, 0.06269917472707476, 0.08867007030091645, 0.07743808448374179, 0.07248416916478073, 0.06551635764332675, 0.06787886616361372, 0.06582156966781527, 0.08639296848821054, 0.06224443223309495, 0.15037617907160816, 0.1436420101696786, 0.17826281440778735, 0.1499988273865741, 0.2448503117975691, 0.1575978269908812, 0.13632828018418586, 0.12635013291527175, 0.15592698443065334, 0.20368739370490452, 0.19080939521634532, 0.20905859353815648, 0.20408163862096418, 0.2625949731231906, 0.20763977349309282, 0.20141200779319168, 0.2213188506344067, 0.21420576380129608, 0.1314935929946247, 0.12255972025017414, 0.13324342746574058, 0.1726528619201836, 0.16445124446414905, 0.1429698866557494, 0.158572655225947, 0.174140676663743, 0.11846089532356197, 0.16337326318023937, 0.1888142165140131, 0.15165691377443324, 0.19597358872679038, 0.16772618070317658, 0.17275161934224925, 0.15566654036287442, 0.17426500280099522, 0.17800010295263435, 0.15618142725860018, 0.17499452188187825, 0.15941923195818053, 0.17693536336476956, 0.16689283256330523, 0.16520481764038086, 0.1669293712109411, 0.161830620075884, 0.18344736293163388, 0.1577760073498421, 0.19662599910171186, 0.2432915885179313, 0.17396589201449864, 0.18701690390711978, 0.18763605723185772, 0.2013723388745463, 0.1696982469928675, 0.19345890257960896, 0.35254345438409596, 0.1659917563315757, 0.3358871090401939, 0.2953796591828777, 0.33217837113400916, 0.23368030588152644, 0.1688359101214426, 0.18920526482901356, 0.23372149082788174, 0.19586095153256522, 0.20576116571681213, 0.18820451276950312, 0.19658209617212796, 0.18021525052294673, 0.19381227477464225, 0.18460205725745504, 0.20265446616164862, 0.1807297345626655, 0.06870509050767926, 0.06826419850007293, 0.0757109826708604, 0.05602617811305677, 0.06492899366175497, 0.06783615836646661, 0.08818842583971309, 0.07641193861290863, 0.05208772349755275]}, "mutation_prompt": null}
{"id": "72597cc9-0b38-48a0-a9a1-d073e3a1d545", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.population_size = 10 * dim\n        self.alpha = 0.5  # inertia weight\n        self.beta = 0.9   # cognitive coefficient\n        self.gamma = 0.9  # social coefficient\n\n    def __call__(self, func):\n        # Initialize population\n        position = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocity = np.zeros((self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, position)\n        self.evaluations = self.population_size\n        \n        # Initialize personal and global bests\n        pbest_position = np.copy(position)\n        pbest_fitness = np.copy(fitness)\n        gbest_idx = np.argmin(fitness)\n        gbest_position = position[gbest_idx].copy()\n        gbest_fitness = fitness[gbest_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Update velocity and position\n                cognitive_component = self.beta * np.random.rand(self.dim) * (pbest_position[i] - position[i])\n                social_component = self.gamma * np.random.rand(self.dim) * (gbest_position - position[i])\n                velocity[i] = self.alpha * velocity[i] + cognitive_component + social_component\n                \n                # Quantum-inspired position update with superposition principle\n                distance_to_best = np.linalg.norm(gbest_position - position[i])\n                superposition_prob = np.exp(-distance_to_best)  # probability of 'quantum jump'\n                if np.random.rand() < superposition_prob:\n                    new_position = gbest_position + np.random.uniform(-1, 1, self.dim) * (position[i] - gbest_position)\n                else:\n                    new_position = position[i] + velocity[i]\n\n                # Boundary check\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_fitness = func(new_position)\n                self.evaluations += 1\n\n                # Update personal best\n                if new_fitness < pbest_fitness[i]:\n                    pbest_position[i] = new_position\n                    pbest_fitness[i] = new_fitness\n\n                    # Update global best\n                    if new_fitness < gbest_fitness:\n                        gbest_position = new_position\n                        gbest_fitness = new_fitness\n\n            # Dynamic adaptation of parameters\n            self.alpha = max(0.4, self.alpha * 0.99)\n            self.beta = min(1.2, self.beta * 1.01)\n            self.gamma = min(1.2, self.gamma * 1.01)\n\n        return gbest_position, gbest_fitness", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) utilizing quantum superposition principles for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 41, "fitness": 0.14097905614927483, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.22834032381209957, 0.1953491141546837, 0.25413378456283675, 0.1823379799951953, 0.25738256272920446, 0.20578038786106467, 0.2173964157101239, 0.2177110894447799, 0.20161096037316195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07521603541134558, 0.04760912228463965, 0.06274364591668369, 0.06416736566122816, 0.041488703706527796, 0.061478033992200976, 0.05101198599742274, 0.04648111173329472, 0.05634324890289988, 0.03791936870188184, 0.016313492850420164, 0.04433406169238929, 0.06173281983948531, 0.04288910144948821, 0.04320225354132612, 0.05845039133375918, 0.040862165518615656, 0.03656110123497569, 0.9812510234819727, 0.9789858013760451, 0.9794386521215557, 0.9715853426639194, 0.9784903659748777, 0.9710364957388755, 0.9784530159494714, 0.9782431131408168, 0.9807380495274213, 0.11732211293885253, 0.11271459705920206, 0.06562123750715654, 0.11168054672313643, 0.11642370446533279, 0.10987077226400921, 0.0896680937423584, 0.12517314817284309, 0.16162376739027917, 0.1307802212927336, 0.17839233726271175, 0.181537610552852, 0.16779110745169235, 0.13995730941963536, 0.17714804915649252, 0.18458239115886566, 0.1509952793796001, 0.12828472759256015, 0.0028858315395413614, 0.026949567125811313, 0.029720513949156202, 0.034859308498304764, 0.0373835114419897, 9.999999999998899e-05, 0.04911655914165036, 9.999999999998899e-05, 0.04626321331938865, 0.019028601891440067, 0.054273709613480214, 0.01891215062122298, 0.042801289994000236, 0.02552969837986052, 0.0848960002737329, 0.05726618230551228, 0.014080498976671518, 0.07806375742321636, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027683235057403888, 0.009510727112741368, 0.05617316946174067, 0.03855428015172768, 0.0030358681628591677, 9.999999999998899e-05, 0.03604959579663336, 0.06243990724543169, 0.05899403541705173, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023909807887821266, 0.010176043615683583, 0.012413714596299141, 9.999999999998899e-05, 9.999999999998899e-05, 0.029118337654216675, 9.999999999998899e-05, 0.007389456393488203, 0.022488641527045883, 0.29162208400818934, 0.24109077695794368, 0.25383350051128073, 0.2253252352143722, 0.2536836057932016, 0.2411453228523831, 0.265537130608829, 0.21287598206176306, 0.23269016208238746, 0.05033662283866869, 0.0534230655029565, 0.05690752221165152, 0.059075839739281766, 0.07262118211399193, 0.05937813207324094, 0.06120768514370134, 0.05185150894119883, 0.06682390788175085, 0.11165411505890466, 0.14255195884657113, 0.12954986197820506, 0.1600039743348134, 0.15170905870831086, 0.17371701943407114, 0.14340810186969866, 0.1347032371154272, 0.14346264803956743, 0.1900146218435601, 0.1735069697960816, 0.21379448665384593, 0.18507357496477472, 0.17349294887953526, 0.18644578417167046, 0.16952957102851796, 0.1763353257108985, 0.16859189277336284, 0.130843365773893, 0.11508617508963781, 0.16857116065493594, 0.12611188694413666, 0.14096061119244818, 0.1421378939474255, 0.14634616581430837, 0.14194957699669264, 0.12694119822281447, 0.1908891566712163, 0.16742874135019847, 0.16712247060180074, 0.16266741862562162, 0.1654887011065337, 0.15673393619547538, 0.16643270571667057, 0.1698499402196032, 0.21033832192574387, 0.18685439457830177, 0.15326592784763649, 0.1615985746867622, 0.16878373182676099, 0.1789130447902365, 0.1564686780868162, 0.16290280190753814, 0.15979629613910018, 0.15324055991761232, 0.1577852759107371, 0.16393299435132325, 0.1396488720065534, 0.2662821485484854, 0.21737570718353116, 0.13074732594661231, 0.12911555959353505, 0.15179905496640855, 0.2426156628251126, 0.24438757225757668, 0.16823140447429108, 0.15754152871947913, 0.11623116630437924, 0.1419982591811606, 0.1540217555642317, 0.18312303267641894, 0.17720534033954594, 0.17793702025222502, 0.18333973949066207, 0.2017366408867841, 0.2085481532310398, 0.19091697826466503, 0.17974791912638344, 0.17755789101772057, 0.20023775541659816, 0.19413982441716704, 0.18940750864218658, 0.049417890012460663, 0.05411022001159016, 0.0894085139436156, 0.0528159295249192, 0.040539683571231167, 0.049285930998247185, 0.05497164630026252, 0.05090993528766197, 0.0898037159319045]}, "mutation_prompt": null}
{"id": "e1567f7e-9b4e-4526-833e-442bffdea356", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.pop_size = 10 * dim\n        self.alpha = 0.99  # decay factor for updating quantum bits\n        self.beta = 0.9    # probability threshold for quantum-inspired crossover\n\n    def __call__(self, func):\n        q_population = np.random.uniform(-1.0, 1.0, (self.pop_size, self.dim))\n        population = self.quantum_measure(q_population)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = self.pop_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(self.pop_size)\n                p1, p2 = q_population[indices[:2]]\n\n                quantum_crossover = np.random.rand(self.dim) < self.beta\n                q_offspring = np.where(quantum_crossover, self.alpha * p1 + (1 - self.alpha) * p2, q_population[i])\n                offspring = self.quantum_measure(q_offspring)\n\n                trial_fitness = func(offspring)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    q_population[i] = q_offspring\n                    population[i] = offspring\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = offspring\n                        best_fitness = trial_fitness\n\n        return best_individual, best_fitness\n\n    def quantum_measure(self, q_bits):\n        amplitudes = np.abs(q_bits) / np.sqrt(np.sum(q_bits**2, axis=1, keepdims=True))\n        measured = np.sign(q_bits) * (self.lower_bound + (amplitudes * (self.upper_bound - self.lower_bound)))\n        return np.clip(measured, self.lower_bound, self.upper_bound)", "name": "QuantumInspiredEA", "description": "Quantum-inspired Evolutionary Algorithm (QEA) utilizing quantum bits representation for enhanced diversity and convergence speed.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: AxisError(1, 1, None).", "error": "AxisError(1, 1, None)", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {}, "mutation_prompt": null}
{"id": "a93f21b2-83ff-4f23-8da5-1a97c2424a3e", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.swarm_size = 10 * dim\n        self.phi = 0.5  # Contraction-expansion coefficient\n\n    def __call__(self, func):\n        # Initialize the swarm\n        position = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        personal_best_position = position.copy()\n        fitness = np.apply_along_axis(func, 1, position)\n        personal_best_fitness = fitness.copy()\n\n        self.evaluations = self.swarm_size\n\n        # Identify the global best\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_position[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Calculate the mean best position\n                mbest = np.mean(personal_best_position, axis=0)\n\n                # Generate a random number array\n                u = np.random.rand(self.dim)\n\n                # Update particle's position using quantum-behavior inspired formula\n                p = (1 - self.phi) * personal_best_position[i] + self.phi * global_best_position\n                b = np.sign(u - 0.5) * np.log(1.0 / (1.0 - u))\n                new_position = p + b * np.abs(mbest - personal_best_position[i])\n\n                # Ensure the new position is within bounds\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate the new fitness\n                fitness_value = func(new_position)\n                self.evaluations += 1\n\n                # Update personal best if the new fitness is better\n                if fitness_value < personal_best_fitness[i]:\n                    personal_best_position[i] = new_position\n                    personal_best_fitness[i] = fitness_value\n\n                    # Update global best if the new personal best is better\n                    if fitness_value < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = fitness_value\n\n        return global_best_position, global_best_fitness", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO), leveraging quantum behaviors to improve convergence in multi-modal landscapes.", "configspace": "", "generation": 43, "fitness": 0.1718537394694407, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.15.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.3887898659420326, 0.39715273869150514, 0.29304136512148615, 0.28601420169854386, 0.4498651899994772, 0.314549195067941, 0.41578488391513324, 0.42946534109356715, 0.4389143151981689, 0.01027560673647021, 0.08309910894303252, 9.999999999998899e-05, 0.06667957953639214, 9.999999999998899e-05, 0.03945827222422016, 0.04326442074572656, 0.00554644389103176, 0.18087098606117846, 0.08242214475297882, 0.08780188776706566, 0.11871871019914504, 0.08755326255734885, 0.08606973774534687, 0.07740912529383859, 0.07460891144409998, 0.07573972150049102, 0.0880759967753989, 0.1079294605582849, 0.09397277968807416, 0.11036960961259634, 0.09229168386467645, 0.12291212896212378, 0.09494541079007546, 0.11408768470091946, 0.10091371473016575, 0.09965259158360329, 0.9654596332952066, 0.9641847327689773, 0.9774579726679878, 0.31081409605538024, 0.12580383452060084, 0.20268686778715894, 0.15508074916553272, 0.09261383713334326, 0.1485185576653455, 0.31088951568922407, 0.15351628550312668, 0.31330985625919705, 0.20055681758375, 0.30985032325973605, 0.2823557862044742, 0.08056493671512543, 0.09654663625545312, 0.1187609356757946, 0.2841475386496518, 0.25015405957629466, 0.22649886062918323, 0.1374118935364449, 0.13503148710794244, 0.2840045856691745, 0.17477920155956095, 0.10103339732965011, 0.23125309429834773, 0.179066275621111, 0.12039892610884928, 0.15694344048155162, 0.17213555631756772, 0.1951788428097414, 0.20847773292026106, 0.19621515282211366, 0.1721286983980821, 0.15830136243555482, 0.12304661938289241, 0.17804814620520337, 0.17040689721657198, 0.09117472274255611, 0.1308104406302364, 0.12519977244583747, 0.16646688015637423, 0.029521747191325276, 0.15833224892219788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017126040846521917, 0.04206382060627989, 9.999999999998899e-05, 0.02258836697932054, 0.04157516960105423, 0.027911575477216122, 0.044857417493172735, 0.03859956659170949, 0.04441048274796344, 0.046726718218462304, 0.04616948123280362, 0.03723900862911067, 0.10235972374138202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007894965239733431, 0.2913296239910984, 9.999999999998899e-05, 0.007223431203953967, 9.999999999998899e-05, 9.999999999998899e-05, 0.042376094238500306, 0.028007757914356612, 0.03131366654842127, 0.04825950172468052, 0.08157520555464493, 0.09337399220849496, 0.10515281759724071, 0.018359750192545654, 0.12599518792633424, 0.30339751694700956, 0.28710958203086767, 0.3450094053900139, 0.427652494859177, 0.3116017008448345, 0.2891985069833447, 0.4598342989985361, 0.27892405684584487, 0.3918007542153582, 0.07032473171080433, 0.07918860185893861, 0.07586867683157039, 0.07160453201660932, 0.09090187103004321, 0.07027376628422788, 0.06409569901974332, 0.07628047455115883, 0.07391108317979811, 0.19684332000927618, 0.15762641200339822, 0.17572006158100373, 0.19129389197712643, 0.14341007398820238, 0.21241384878017988, 0.14573811679289939, 0.18720275369732509, 0.15445449980315007, 0.4630876569824909, 0.20669159547840632, 0.24582517166416762, 0.18589557784866373, 0.183365783230644, 0.19318299887571644, 0.29348993195221795, 0.23401276810703653, 0.21804052282063935, 0.24774794087272567, 0.2015135342661074, 0.21139325799536512, 0.19569587415498324, 0.23214855506607712, 0.18157030946790542, 0.14386558718815035, 0.1570978637796253, 0.15760984751416907, 0.16986775203440807, 0.16770775399289684, 0.19560205790633767, 0.19753298877273684, 0.19534114316218354, 0.19980330592024986, 0.1933930381169623, 0.17881536591517633, 0.20150679097136515, 0.20157925359014695, 0.18424904358437455, 0.18178161066927545, 0.17936638622148127, 0.2054638857861335, 0.1946042667537966, 0.24999799967399494, 0.20815288887646688, 0.20870857600645953, 0.17662892056078106, 0.1636567772439257, 0.16444764672923906, 0.2200195009479754, 0.16907962794364884, 0.17079503783491878, 0.1418181289158389, 0.1775011436269408, 0.5711708924685681, 0.3892300146870794, 0.16794108722259715, 0.4850359016175595, 0.2502577799067799, 0.15789430947618, 0.14212255009772856, 0.40592874230889875, 0.2826487923588359, 0.4536324787560523, 0.1789217985656143, 0.19531436173227068, 0.177964870874466, 0.1937248431214008, 0.18352475752179032, 0.1889782947266676, 0.19426063676290017, 0.1802392200796199, 0.1730200498015675, 0.07069671206384498, 0.07357680886825224, 0.08533878540963902, 0.07931676464006554, 0.06662362620316797, 0.07366262466706652, 0.06196059230129036, 0.07357778200185472, 0.0652318466373446]}, "mutation_prompt": null}
{"id": "739f62b5-2e89-43c8-bf6f-d727df271a6b", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "a8a14e40-1332-4f70-961a-ae98976b9e69", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.population_size = 10 * dim\n        self.alpha = 0.75  # coefficient for quantum-inspired update\n\n    def __call__(self, func):\n        position = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocity = np.zeros((self.population_size, self.dim))\n        p_best = np.copy(position)\n        p_best_fitness = np.apply_along_axis(func, 1, position)\n        g_best_idx = np.argmin(p_best_fitness)\n        g_best = position[g_best_idx]\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired position update\n                beta = np.random.rand(self.dim)\n                mbest = np.mean(p_best, axis=0)\n                u = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                position[i] += self.alpha * (beta * (g_best - np.abs(position[i] - mbest)) + (1 - beta) * (u - position[i]))\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n                fitness = func(position[i])\n                self.evaluations += 1\n\n                # Update personal best and global best\n                if fitness < p_best_fitness[i]:\n                    p_best_fitness[i] = fitness\n                    p_best[i] = position[i]\n\n                if fitness < p_best_fitness[g_best_idx]:\n                    g_best_idx = i\n                    g_best = position[i]\n\n        return g_best, p_best_fitness[g_best_idx]", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) leveraging quantum superposition with adaptive velocity and position updates for enhanced global search capability.", "configspace": "", "generation": 45, "fitness": 0.08946381571861448, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.11.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.20264002645822843, 0.1629524291315234, 0.18146665587275834, 0.24365289850531913, 0.14381188042008453, 0.16096610303135805, 0.18439916810642976, 0.2396433861806393, 0.18897921476532575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046303893214184044, 0.025272303921724082, 0.014706683621499184, 0.037138442920209624, 0.04141687527086546, 0.036461154961904496, 0.05611941932258613, 0.056317925567626714, 0.04047547166169774, 0.01787333342797992, 0.04404652232982409, 0.017707117854088072, 0.033480671550566665, 0.011631919621990172, 0.0195459487829146, 0.024286403788696398, 0.02765914049813889, 0.014998509488235334, 0.07642275043614466, 0.06837416607825275, 0.06952243832247207, 0.10702881644668072, 0.15179224730073748, 0.10027055423871623, 0.1761789785879997, 0.9476335911370912, 0.9720213399334208, 0.06274794416174423, 0.061802316668466695, 0.022957662614830565, 0.05377266584828466, 0.09816221408727055, 0.06653798599689476, 0.05545145443507138, 0.03442912328363834, 0.03928878162016858, 0.12743488249891777, 0.09847991768769315, 0.09826869718486853, 0.1437774654153543, 0.07285119553694963, 0.05793373785332556, 0.05383926683459672, 0.061026390565266375, 0.026735176505552016, 0.007429103325246378, 0.002668903229789743, 0.02534386890378415, 0.020503566905365367, 0.0006381841534628396, 0.022161894791259185, 9.999999999998899e-05, 0.08739018193605008, 0.004849761709156519, 9.999999999998899e-05, 0.002412375153596047, 0.01105507284687779, 9.999999999998899e-05, 0.0043368555357213845, 9.999999999998899e-05, 0.003913485722428778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06892210804295007, 0.07664111946597774, 0.06869284368959361, 0.006859743803240614, 0.0027737208270198765, 0.003013643782103448, 0.015776776505515233, 0.04568871917351591, 0.050456937269430124, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011159931913274135, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034849552160269415, 9.999999999998899e-05, 9.999999999998899e-05, 0.20713266988287105, 0.20024632158673616, 0.19225737345299776, 0.2006156036328568, 0.19100267168589202, 0.13900796158440476, 0.21018482696434226, 0.1845162141380956, 0.1854568412677231, 0.010152841820036285, 9.999999999998899e-05, 0.02198412468535549, 0.054810236183821526, 0.0503302385728277, 0.0698528330456224, 0.05251591563650093, 0.05605356584761989, 0.044923254216138964, 0.12265192164609229, 0.14504102310461708, 0.1455723115403682, 0.14191826899851345, 0.14268293951871347, 0.13103110467929435, 0.14581432968102692, 0.13827593802780325, 0.14141955478327672, 0.1323718478481647, 0.14446930293330784, 0.1613932299901244, 0.16522593336438407, 0.15700854324398883, 0.15621620666653235, 0.1658918772358915, 0.17377774300845283, 0.1395502430442077, 0.10050746919622056, 0.08293647265912218, 0.08398582550377798, 0.15095661519341608, 0.10154753818768858, 0.10393391059657664, 0.11686223671466378, 0.0997711199450243, 0.07608107582713342, 0.1532198732152521, 0.16665120548521395, 0.13345086981233123, 0.15764545500750227, 0.14134126438095995, 0.14333868945969375, 0.1552807482873284, 0.14340731435279175, 0.14753755792735956, 0.1404130441984276, 0.14315527802957695, 0.14543149084936613, 0.15733104881683246, 0.16061549191461022, 0.13966921736576676, 0.07303444118361146, 0.1442988892686834, 0.16042885561727527, 0.11090719080597589, 0.12079769594134071, 0.11323518113365405, 0.16863466752645384, 0.12222366051830647, 0.12093855625221617, 0.13550993088743613, 0.12394984155663713, 0.12133363256506369, 0.11334100589177232, 0.12201018221810933, 0.11569266658858779, 0.1513414642891383, 0.16160816085686713, 0.16559398938458325, 0.1011747844480575, 0.07475691591836331, 0.09093444888373325, 0.18631255989669615, 0.1809800246756197, 0.18004636435494703, 0.18725772444752742, 0.19382158794297033, 0.19262365999970532, 0.17407111122092067, 0.18948604091892096, 0.17004734811430156, 0.052210851315484086, 0.038813346060620146, 0.050507419310889645, 0.04381252664323765, 0.05448625651458128, 0.041805539106299694, 0.04725060328360009, 0.05484107554237927, 0.04730375528848385]}, "mutation_prompt": null}
{"id": "9558abb7-6dc3-4f43-9c15-cc1797e5dc2e", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "f3c21f4c-99cb-469c-9e5c-9fbab69b13f8", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "62bc5bb0-ab96-4a08-800f-94c0e17d1cf1", "solution": "import numpy as np\n\nclass CooperativeSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.swarm_size = 20 * dim\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n\n    def __call__(self, func):\n        # Initialize the swarm\n        swarm_positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        swarm_velocities = np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound) * 0.1\n        personal_best_positions = np.copy(swarm_positions)\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.swarm_size\n\n        # Global best initialization\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm_velocities[i] = (self.inertia_weight * swarm_velocities[i] +\n                                       self.cognitive_coef * r1 * (personal_best_positions[i] - swarm_positions[i]) +\n                                       self.social_coef * r2 * (global_best_position - swarm_positions[i]))\n                swarm_positions[i] += swarm_velocities[i]\n                swarm_positions[i] = np.clip(swarm_positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new fitness\n                fitness_value = func(swarm_positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness_value < personal_best_fitness[i]:\n                    personal_best_positions[i] = swarm_positions[i]\n                    personal_best_fitness[i] = fitness_value\n\n                    # Update global best\n                    if fitness_value < global_best_fitness:\n                        global_best_position = swarm_positions[i]\n                        global_best_fitness = fitness_value\n\n            # Dynamic role adaptation: adjust parameters\n            if self.evaluations % (self.swarm_size // 2) == 0:\n                self.inertia_weight *= 0.95\n                self.cognitive_coef = 1.5 + 0.5 * np.random.rand()\n                self.social_coef = 1.5 + 0.5 * np.random.rand()\n                # Shuffle the swarm to encourage diversity\n                np.random.shuffle(swarm_positions)\n\n        return global_best_position, global_best_fitness", "name": "CooperativeSwarmOptimization", "description": "Cooperative Swarm Optimization (CSO) using particle interaction and dynamic role adaptation to enhance convergence and diversity.", "configspace": "", "generation": 48, "fitness": 0.13706502476893798, "feedback": "The algorithm CooperativeSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.2115284754033253, 0.20785725510494213, 0.22050528852502005, 0.21661409414333388, 0.2582196025210969, 0.2296165883001957, 0.22875599643241273, 0.2072614393217539, 0.23460921417709302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0043711448176785295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06364804711896654, 0.04810059251960297, 0.0703110954276106, 0.06154436516434181, 0.05470483865969167, 0.061738237381583905, 0.05151844208867984, 0.057208403759653303, 0.0637382324673963, 0.0270644281171617, 0.03488442283982407, 0.04275060360249194, 0.03077794457022698, 0.03311463331569919, 0.05140855657190091, 0.04733078946575786, 0.040168221722421404, 0.03496399466626221, 0.9774259593190833, 0.9813472893739017, 0.9786692229547024, 0.978723417020929, 0.9784061958468083, 0.9784517613004817, 0.9777088749478676, 0.978447415936191, 0.9804110953794186, 0.09436733175415213, 0.1020186258983089, 0.1062918930044463, 0.1003789806335762, 0.11181881816224049, 0.09594833812699632, 0.09245455040096673, 0.11602094457537038, 0.10247514182333639, 0.18166799563073466, 0.16838808667353133, 0.11890529646188752, 0.19898236788529133, 0.13270054492418382, 0.15303147192202105, 0.14420779816013096, 0.1260297360681215, 0.1383126222503741, 0.028500569868600167, 0.02896062017533918, 0.014621168794591854, 0.0688992941676897, 0.027553607185173634, 0.05419874318956264, 0.0031373354948991405, 0.023792492330632187, 0.018496422076845542, 0.03261003315621691, 0.03278500423876651, 0.025727649486280146, 0.04162301635561361, 0.03096840570867132, 0.023609332574240027, 0.04462712974465599, 0.006662736912394163, 0.04431531026363267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060807176595132684, 0.03764403771894054, 0.028097718437731234, 0.05999555821901836, 0.06132458758278514, 0.03666040183182284, 0.03374642086194346, 0.03671147611402503, 0.016512330119704877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017896118889948465, 9.999999999998899e-05, 0.009585801278748862, 0.0034698576624010435, 0.008094911732298926, 0.003002854252077136, 0.011490166142094527, 0.016535756915665445, 0.0116320074323365, 0.1989928622644377, 0.21896988468435874, 0.21788560315504502, 0.20507006507798475, 0.24997488209267527, 0.2449327486352788, 0.22200370133420966, 0.2155334286044055, 0.20946204816532532, 0.06166400431328656, 0.0737174682263756, 0.060418680747724496, 0.06711843591208222, 0.053089572820197994, 0.06870181299809408, 0.04934028635639809, 0.05822143282473369, 0.05834203733174559, 0.152977924840364, 0.13182551674545884, 0.13662360835540088, 0.1377455813392673, 0.13511880823300437, 0.13866160957507745, 0.1403517288742303, 0.13881247488491355, 0.14071076739038857, 0.16907450154046333, 0.18349553951473718, 0.1756222479352928, 0.15186411020232427, 0.16136666682328304, 0.16808184232786516, 0.18261625253747005, 0.19553847360123022, 0.17494953768794874, 0.12115774287479253, 0.11391694885448955, 0.11812261309531713, 0.10195590230213669, 0.13196086364619164, 0.1090809319628957, 0.1341497538132611, 0.12366364668561003, 0.12103235381057675, 0.1965445895129585, 0.14989094232663647, 0.1591955711512033, 0.1527414472293629, 0.17194719209137788, 0.15759638818585286, 0.1793068949406914, 0.16057895559607482, 0.19033110341070048, 0.15961731757838027, 0.16564884982723704, 0.14924318206828502, 0.16241986501651007, 0.1651585150763718, 0.15394106638747307, 0.17101078754642618, 0.1558288181777765, 0.1662009046906181, 0.16886601262928524, 0.1394640611008663, 0.16768107931459786, 0.1560357674452567, 0.1742268923110083, 0.120378324175612, 0.16989342673862806, 0.15407424563105232, 0.25925698448439993, 0.2026852183783261, 0.15757078087250942, 0.1448490235792187, 0.13984167029891081, 0.15749825390651895, 0.1362717927880267, 0.18255945838721688, 0.18189581863279902, 0.21273189017218408, 0.18440954057283243, 0.18772234047945213, 0.1911544061231949, 0.1865738336311159, 0.19173664575757643, 0.18962820773114575, 0.19359714394051974, 0.2038533224387825, 0.1808492906225595, 0.046699371080363594, 0.038169223520329476, 0.0810815001616183, 0.05160208595026028, 0.060526486004222946, 0.06555558590935506, 0.04698228182215314, 0.05462566809138569, 0.0571927991444201]}, "mutation_prompt": null}
{"id": "076e3d3d-baa0-4e04-8633-873c52b3d933", "solution": "import numpy as np\n\nclass APSO_DIWLL:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.population_size = 10 * dim\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n\n    def __call__(self, func):\n        particles = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound) * 0.1\n        fitness = np.apply_along_axis(func, 1, particles)\n        self.evaluations = self.population_size\n\n        personal_best_positions = np.copy(particles)\n        personal_best_fitness = np.copy(fitness)\n\n        global_best_idx = np.argmin(fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))\n\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                velocities[i] = (inertia_weight * velocities[i]\n                                 + self.c1 * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.c2 * r2 * (global_best_position - particles[i]))\n\n                particles[i] = particles[i] + velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                current_fitness = func(particles[i])\n                self.evaluations += 1\n\n                if current_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = particles[i]\n                    personal_best_fitness[i] = current_fitness\n\n                if current_fitness < global_best_fitness:\n                    global_best_position = particles[i]\n                    global_best_fitness = current_fitness\n\n        return global_best_position, global_best_fitness", "name": "APSO_DIWLL", "description": "Adaptive Particle Swarm Optimization with Dynamic Inertia Weight and Local Learning (APSO-DIWLL) for enhanced convergence and diversity maintenance.", "configspace": "", "generation": 49, "fitness": 0.17981491835247557, "feedback": "The algorithm APSO_DIWLL got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.3970644274515682, 0.4035660546089882, 0.39510779829498055, 0.4221619379819731, 0.42460284753673305, 0.46851545199073896, 0.3940471402543422, 0.34875578791167017, 0.4380504787364018, 0.09483290146023193, 0.0944843313244732, 0.012518161814265794, 0.023116980637737705, 0.11986975136845524, 9.999999999998899e-05, 9.999999999998899e-05, 0.01784152281137774, 0.16185596235116517, 0.09054789295661214, 0.08351767379382835, 0.1399352029041938, 0.058817332033249126, 0.08469546445090159, 0.10237105637229238, 0.11108640000347769, 0.14124265170653216, 0.08815336820207087, 0.0564484650383813, 0.10118488428510686, 0.07707927035915729, 0.08722845046012606, 0.12348720421302983, 0.0748847532043102, 0.06829048563562012, 0.0825055735776381, 0.08629368890719669, 0.9901085902321607, 0.9875361856594116, 0.9906038083340486, 0.989484852128129, 0.9899254518445708, 0.9876685322895579, 0.9882808851050763, 0.9863333038222942, 0.988483678259867, 0.21539502240785924, 0.16798980860707413, 0.21309567012065844, 0.118883743453297, 0.19450117441950587, 0.13433156096728693, 0.08388705031966914, 0.1458902361984319, 0.08912154830933983, 0.2088860531914748, 0.1540457115223115, 0.16301612273856514, 0.16983698644069356, 0.17869801393773865, 0.18447618124344634, 0.11273949630613622, 0.10558058855288366, 0.18329656562293928, 0.07954867705665236, 0.09516332222388268, 0.0983373742147331, 0.061376657015227654, 0.10439230537893307, 0.07828755837441737, 0.10126399364340266, 0.09021640186118673, 0.10427844026030852, 0.08744978189070174, 0.07122865253059096, 0.020574606180134625, 0.1099717634572911, 0.11303072304391093, 0.11263531227760837, 0.09343998845833668, 0.0871147261900338, 0.141439789895916, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06263081056366371, 0.014897280165596438, 0.037278941766065166, 0.058372688984609566, 0.012158058445750464, 0.008072060399280101, 0.02769984881190868, 0.04552155811821379, 0.05521935082475515, 0.005398176717015701, 9.999999999998899e-05, 0.014724185880359397, 0.016862174168194022, 0.03341270581756839, 9.999999999998899e-05, 0.029106211212612143, 0.012264660974412256, 0.025937142001260183, 0.004215264350374448, 9.999999999998899e-05, 0.027463573693217724, 0.0026836768176422554, 0.05081569431153443, 0.054994629757834645, 9.999999999998899e-05, 0.07725995837796396, 0.03834733148284086, 0.3100030606602856, 0.33246837865338685, 0.3425715991070224, 0.3710080030138808, 0.3478525161385866, 0.3001101064807311, 0.3643707461262675, 0.3303681841257651, 0.3486667075557721, 0.07442399791156351, 0.07829331894754799, 0.06058320417374019, 0.09725002130141602, 0.10190317728981968, 0.0758518336222298, 0.06316367622698704, 0.08588036110597219, 0.08165119856365433, 0.14930004944306052, 0.15929059578888227, 0.17902980078337094, 0.13846452017271382, 0.2138458632574538, 0.1673601317797997, 0.2031167965901024, 0.1396158870532641, 0.1846165511943293, 0.21370683165515691, 0.20484369221187593, 0.24441726365117689, 0.2968456690145401, 0.18222192163906725, 0.23645604133248432, 0.25029809772373024, 0.2944229094901617, 0.16646843026255065, 0.16745410448332476, 0.14676666754825096, 0.17186848514657682, 0.09673878262946911, 0.14894399156716065, 0.18989613721519294, 0.1908101264200529, 0.17038109629972098, 0.20789684854080248, 0.19545035349309137, 0.1702056657597113, 0.16661528786404456, 0.17372652176152026, 0.17244742647950184, 0.16892612188974376, 0.17261365511083737, 0.18373816374260732, 0.18590033191811506, 0.18422700875884424, 0.1799650579529707, 0.14826480367384032, 0.17577127746610022, 0.1776067248065457, 0.2019066136506743, 0.1905260951675406, 0.18743119136817799, 0.20796698806971392, 0.3455043113541598, 0.1562027065198085, 0.12392581857676344, 0.5358458737595668, 0.19261938519901278, 0.1778061520790346, 0.16405143113520604, 0.15449307226854014, 0.5575369079960517, 0.2293316711937584, 0.17615003725913125, 0.15497130875796827, 0.1740552505352071, 0.23679472597674311, 0.12341065280305208, 0.4219328599555485, 0.354040464277951, 0.18617556188137763, 0.21458573806469816, 0.1884740529735005, 0.18636999747380323, 0.18034312131394237, 0.18206650801838953, 0.18386748549036924, 0.18147050747620252, 0.19440935722081665, 0.18693124243627646, 0.06317040016774622, 0.07329086033410126, 0.06486706399053943, 0.06355086801444909, 0.06310332437279886, 0.05860673313510345, 0.07066952940094884, 0.0668488201086147, 0.06491765551186768]}, "mutation_prompt": null}
{"id": "1a7550bf-e638-4867-93d8-e7c108c230a5", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.population_size = 10 * dim\n        self.alpha = 0.75 # control parameter for convergence speed\n        self.beta = 0.1 # control parameter for impact of global best\n\n    def __call__(self, func):\n        # Initialize the particle positions\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = self.population_size\n\n        # Initialize personal and global bests\n        personal_best_positions = population.copy()\n        personal_best_fitness = fitness.copy()\n        global_best_idx = np.argmin(fitness)\n        global_best_position = population[global_best_idx]\n        global_best_fitness = fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired position update\n                p = np.random.rand(self.dim)\n                u = np.random.rand(self.dim)\n                mbest = np.mean(personal_best_positions, axis=0)\n                theta = 2 * np.pi * p\n                r = np.abs(global_best_position - personal_best_positions[i])\n                step = self.alpha * u * r * np.cos(theta) + self.beta * (global_best_position - self.dim / 2)\n                new_position = personal_best_positions[i] + step\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate the new position\n                new_fitness = func(new_position)\n                self.evaluations += 1\n\n                # Update personal and global bests\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n\n        return global_best_position, global_best_fitness", "name": "QPSO", "description": "Quantum-inspired Particle Swarm Optimization (QPSO) using quantum superposition to enhance global search capabilities in multidimensional spaces.", "configspace": "", "generation": 50, "fitness": 0.13480853373369808, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.18546510419111495, 0.18105177976127096, 0.1737937788322581, 0.15316360632602877, 0.1750165728852222, 0.2182934430581478, 0.18152941260975708, 0.16646732742996206, 0.19038464600924276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04612023399980625, 0.04869081911833417, 0.05944204346169302, 0.06484752504330704, 0.04155516691907413, 0.04453204126298682, 0.04991876762563918, 0.047452381287693024, 0.055815677748047854, 0.04878519263291636, 0.05461406675063463, 0.02293861222208393, 0.058288898290891455, 0.014825999495988063, 0.048069382508631464, 0.04299371982257272, 0.05095961133247329, 0.023413670608639747, 0.9106635898327065, 0.8943163526299656, 0.8425383255479053, 0.964374502755752, 0.9501577363783513, 0.9527036085423362, 0.9613096044808473, 0.9597556681255759, 0.9626842684960111, 0.06956834936247613, 0.05166612908219792, 0.0857049664966617, 0.08798829068624803, 0.06265280465735745, 0.09221737461568902, 0.08673967097383395, 0.06833663633473241, 0.06237847733265933, 0.18603031504615297, 0.1932031115625663, 0.17255753623833647, 0.16649188736598097, 0.14993264709718224, 0.08412114714988916, 0.21070391043412318, 0.16880969810939472, 0.158893721552127, 0.035874032737710504, 0.022395957626697438, 0.057621031910008114, 9.999999999998899e-05, 0.06664107218183779, 0.018730961098581633, 0.053055044476006175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015951077758077914, 9.999999999998899e-05, 0.06677767714433414, 0.0033550835438274085, 0.034740228967325315, 0.005156501830509974, 0.0006600095559066155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11270527612710102, 0.08382538962713992, 0.08228965980431857, 0.0317832486279529, 0.008323689722820937, 0.03685686550744727, 0.08887059887265913, 0.03790268868975233, 0.04595415696880978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1886177603004644, 0.18553175316914616, 0.2073752893546439, 0.20678916771023015, 0.20339321402676047, 0.22618203032225415, 0.21601717882003746, 0.20629347335479375, 0.18231803227187415, 0.04781137794640178, 0.07296796826697649, 0.06505144086948367, 0.062422646480909005, 0.060018833244784076, 0.0612895697739716, 0.06586344360979801, 0.08197343297605153, 0.06742767029047847, 0.17505033773788858, 0.13541697653513762, 0.14754809150054715, 0.16100894857522785, 0.14320040595710304, 0.1585058307574556, 0.13043763401203268, 0.13988544843617712, 0.14256941331203365, 0.16451519919138113, 0.1660527238119579, 0.18182952243714723, 0.20526972266355692, 0.1802544471003661, 0.18971622432629642, 0.1874447542155503, 0.20224508932937546, 0.17537222030001753, 0.11589572743412391, 0.10278460736307482, 0.12302016967155704, 0.14241195526359662, 0.1108841648384229, 0.11094073853184905, 0.15877999370871443, 0.15322184906426006, 0.13541078222477065, 0.2026369849742048, 0.1645248840358683, 0.1911469849385279, 0.1708494584273833, 0.17875968912577123, 0.1481036642674597, 0.18722008561804537, 0.1674987135838666, 0.18685624313778604, 0.16024009932194383, 0.13886304597547527, 0.16588567110216101, 0.15713220400799455, 0.1599926800557676, 0.17567423561435158, 0.16506849038487903, 0.17340238061368363, 0.15879340750603532, 0.15027453393739032, 0.2212555098237874, 0.14639049012009508, 0.25099737035911485, 0.16194826721673838, 0.27650839629343926, 0.16054412070678392, 0.16475080925155217, 0.15734260336383143, 0.16642201238457288, 0.29599152388972905, 0.14169970759138795, 0.1679845115314994, 0.22945083718751358, 0.18889981143225865, 0.18086934531416066, 0.16386233376133152, 0.18889725374717092, 0.18250274158199586, 0.17119027538490939, 0.18154079489476038, 0.1860935799176734, 0.17011204567436433, 0.18234452427241166, 0.18838897729962634, 0.19254961812419813, 0.17809424625221093, 0.07022625520041115, 0.060914566529672864, 0.065548552637258, 0.06524507062002727, 0.05255288316689166, 0.057301613971209364, 0.06929958247005474, 0.048859150162424925, 0.06352312172614061]}, "mutation_prompt": null}
{"id": "88511a0a-07e4-4427-900e-77d3a5e3f7bb", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "f285496a-638a-4837-a4f4-91bbfdd51588", "solution": "import numpy as np\n\nclass ADE_HMS_DPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.scale_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = np.random.permutation(population_size)\n                x1, x2, x3 = population[indices[:3]]\n\n                mutant_vector = x1 + self.scale_factor * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "ADE_HMS_DPR", "description": "Adaptive Differential Evolution with Hybrid Mutation Strategy and Dynamic Population Resizing (ADE-HMS-DPR) optimizing exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.7638279333564889, 0.7568587961589216, 0.7775020815736239, 0.7785177456320012, 0.7941764986273308, 0.7850603227522962, 0.7721577812679871, 0.7736270917958066, 0.7616833427592492, 0.6402620998034537, 0.6585657864952288, 0.6589284925023915, 0.6189294780931411, 0.6608840791627246, 0.6594638250968363, 0.6576900996546073, 0.6558908797268825, 0.6546718969458944, 0.12123992418468021, 0.14418186861358595, 0.13038588836591913, 0.11034569195416621, 0.13607231788761642, 0.1335771918761871, 0.1127546657661247, 0.47469820279245867, 0.13281240050264265, 0.1412316489537041, 0.12659505921364345, 0.12030416820748435, 0.14602542729711443, 0.11987825121944284, 0.10905767078428052, 0.13552761054485873, 0.12410703073451701, 0.11307063390517891, 0.9480972627477983, 0.9633651693946597, 0.9335752118483374, 0.9344107725368739, 0.9623753577603871, 0.9249352501916924, 0.9662378990655912, 0.9285433669470534, 0.9300818989176577, 0.5815732646872269, 0.547019106485191, 0.5298637190121213, 0.5002297189430791, 0.4085171545544145, 0.33352861211417073, 0.5099123594513775, 0.4836766695426399, 0.4611762851608249, 0.7061920301988098, 0.7611731322793487, 0.6963177736494586, 0.734068471369447, 0.7260115287027524, 0.7330546009461738, 0.7048591089387759, 0.7254888780696238, 0.748324707024867, 0.2777115362351348, 0.2804626889989872, 0.5709666432859849, 0.4949612627273122, 0.4695944363779323, 0.2867167772603344, 0.26885326430695244, 0.41768479127540703, 0.5754719374089436, 0.09027698041700083, 0.016267831467337457, 0.0788010783882368, 0.4647845587582907, 0.5753665272581951, 0.5113383223180272, 0.25657265998486933, 0.2538104771114117, 0.4928370563712924, 0.30243935300874614, 0.2576329730473236, 0.2733667669620302, 0.2417482726040573, 0.2972803424144753, 0.36704151210782265, 0.3504924392779529, 0.435865941667836, 0.35425434537610345, 0.46186909961210354, 0.480802652631092, 0.39114189767865015, 0.441946603267513, 0.4212335191655423, 0.43646604658232613, 0.5050380956283315, 0.5619741206183637, 0.6113802796288359, 0.09438377088212624, 0.09520397991193841, 0.08320147856015625, 0.1753614463947628, 0.12979185516070224, 0.08327413627481406, 0.14475541935749137, 0.19222660239088385, 0.1338641275671012, 0.30264334070963894, 0.25567203639722935, 0.33988973047395177, 0.27646825711800127, 0.3461508576774982, 0.3020836334877256, 0.3135343585224032, 0.2617442408947347, 0.2646369525401193, 0.6188961271100815, 0.6274567301222462, 0.603635913072261, 0.6101909589525886, 0.6794635603012574, 0.6291286974391372, 0.6798342569048519, 0.682687687283418, 0.5884016117199418, 0.07980742445642242, 0.08844480310750003, 0.08161449739200766, 0.08723493937332039, 0.09227990740874925, 0.09670373156706424, 0.08425700475037468, 0.08224295009338911, 0.09005523841367269, 0.13835277673752866, 0.13700918406326623, 0.14064980389624993, 0.16817220033648228, 0.1538577274349402, 0.1834551956513688, 0.165736368205191, 0.1364911980170227, 0.18495525781334665, 0.3793481002712026, 0.3762078437918762, 0.34725527535893463, 0.3674884685058287, 0.44535497700006454, 0.36976909575251704, 0.483952335900377, 0.3927278881998738, 0.39803236093135796, 0.3116814168209334, 0.29317826095594846, 0.2963331763732535, 0.26786713107920934, 0.29554376930224135, 0.35229747985654136, 0.379173603586054, 0.3773537069404931, 0.31424380768184323, 0.16196282114070693, 0.17004751815954533, 0.17959304670874154, 0.1856601068573004, 0.16416412674406788, 0.1849967118881597, 0.1794757625688248, 0.1955202591489943, 0.18336131217870844, 0.21613195382604122, 0.17892537944019915, 0.1873857850310685, 0.18542952930922163, 0.19403487971887423, 0.2589400294708514, 0.18740870339679827, 0.5240629198810136, 0.3806180727769308, 0.35596842564657805, 0.23856747470528317, 0.7348277129861163, 0.6975766135296351, 0.15870082614731762, 0.1783933665426357, 0.6940015801618691, 0.6642972682302308, 0.6723950064901026, 0.7030357266715344, 0.7139990923142479, 0.20147391710482698, 0.6219575122751837, 0.6382841339358563, 0.18931295848203877, 0.19555517721101745, 0.20567106085352616, 0.20604881580997148, 0.18727064357183199, 0.20749870538439485, 0.18261242856384663, 0.19041222510679046, 0.19480678724195688, 0.19110802853096365, 0.18659305359427025, 0.17649036509940252, 0.18336956015970396, 0.07042237695584352, 0.07291412743325854, 0.0699794273597627, 0.06999700061829717, 0.07033943760086347, 0.06291965055229665, 0.07271059918131229, 0.06776268668474472, 0.07486016501173676]}, "mutation_prompt": null}
{"id": "b1b3ff23-9882-46de-aa25-339cd263a0df", "solution": "import numpy as np\n\nclass APSO_QDPR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.inertia_weight = 0.7\n        self.cognitive_const = 1.5\n        self.social_const = 1.5\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        particles = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(population_size, self.dim) * 0.1\n        personal_best_positions = np.copy(particles)\n        personal_best_fitness = np.apply_along_axis(func, 1, particles)\n        self.evaluations = population_size\n\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_const * r1 * (personal_best_positions[i] - particles[i]) +\n                                 self.social_const * r2 * (global_best_position - particles[i]))\n\n                particles[i] += velocities[i]\n\n                # Quantum-inspired dynamic\n                quantum_move = np.random.rand(self.dim)\n                quantum_mask = quantum_move < 0.1\n                particles[i][quantum_mask] = self.lower_bound + np.random.rand(np.sum(quantum_mask)) * (self.upper_bound - self.lower_bound)\n\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                fitness = func(particles[i])\n                self.evaluations += 1\n\n                if fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = particles[i]\n                    personal_best_fitness[i] = fitness\n\n                    if fitness < global_best_fitness:\n                        global_best_position = particles[i]\n                        global_best_fitness = fitness\n\n            # Dynamic population resizing\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                indices = np.argsort(personal_best_fitness)[:population_size]\n                particles = particles[indices]\n                velocities = velocities[indices]\n                personal_best_positions = personal_best_positions[indices]\n                personal_best_fitness = personal_best_fitness[indices]\n\n        return global_best_position, global_best_fitness", "name": "APSO_QDPR", "description": "Adaptive Particle Swarm Optimization with Quantum-inspired Dynamics and Dynamic Population Resizing (APSO-QDPR) enhancing convergence with quantum position updates and dynamic swarm management.", "configspace": "", "generation": 53, "fitness": 0.15383308687042513, "feedback": "The algorithm APSO_QDPR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.25280922160507935, 0.22590893960442415, 0.24283555247664124, 0.2554486921829092, 0.2332803746445814, 0.287387235886956, 0.23276583350130908, 0.26772347348895587, 0.2585209351500828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06658798655105891, 0.06486621931016923, 0.0813749880714233, 0.07166572733198318, 0.07838384991771852, 0.07348047625947507, 0.0863890043291563, 0.07096273955474552, 0.05425514529196207, 0.06532358753479961, 0.05070027576872749, 0.06704146536579758, 0.04859767469890852, 0.06899600263541383, 0.05859732479348678, 0.05923981391543476, 0.0633392537669939, 0.04375389400841845, 0.9901979550660213, 0.9844477611719832, 0.9842362182744068, 0.9867547919130332, 0.9845136324930374, 0.9839657423930624, 0.9859459514337198, 0.9873611249023786, 0.988639398406946, 0.1582901544302111, 0.1407162282159765, 0.109118728963158, 0.13572612308428522, 0.1473962467625961, 0.1316487716164385, 0.12844692205904207, 0.1329834889657603, 0.13346272785794389, 0.1866137168011629, 0.16806116156362272, 0.16925855209155694, 0.16439831997964938, 0.17881864942970604, 0.18439018186484024, 0.12503877517776674, 0.13863368283852362, 0.13833111563656508, 0.05791323449725683, 0.029676000604934027, 0.056017566119452744, 0.05357152905244589, 0.06836360919868345, 0.04537390304515232, 0.07937505726008764, 0.022172775852884685, 0.06149957120854155, 0.05357836093952595, 0.07972153832915352, 0.07458355588433274, 0.08466895896687843, 0.12338548278619821, 0.07136333356980618, 0.07641791689312327, 0.0009056698156069132, 0.08210884218801418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06350603778155195, 0.03580315734139017, 0.0283288668718491, 0.08424446084823556, 0.06369315600908754, 0.06384488261691512, 0.02872822112420015, 0.06377209591677147, 0.0652655778279797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004004841072331344, 0.01958411243636493, 0.019499498736267218, 0.001911951827521241, 0.003997291344573606, 0.007049829377080652, 0.02362880183195737, 0.013277707647610049, 0.013067029315854017, 0.2430599170354817, 0.2661496577694801, 0.2635412680781083, 0.24820695634076606, 0.2721557345131028, 0.2756008999938401, 0.27913483677637185, 0.25944872350640025, 0.24550691774769273, 0.07637587087719389, 0.0797291820738476, 0.06975672181789727, 0.06842215584506883, 0.08448056629442546, 0.06873164734277748, 0.07732033924755632, 0.06992871940359713, 0.06685840484331751, 0.14773970882495246, 0.1535420318959383, 0.1413160566429773, 0.19453757211089173, 0.15322376725210085, 0.1337536937021736, 0.13819911490848424, 0.17296826508906415, 0.13218687652189032, 0.1958405014544503, 0.2130848712869592, 0.21533668988026444, 0.1977538331110622, 0.20588741513855124, 0.17487536001912973, 0.20860930774943387, 0.19817537899019044, 0.21271489389136, 0.13513459313956633, 0.13275571324152102, 0.13532474076871126, 0.13599593100893803, 0.1374300211773436, 0.12446325920067525, 0.15576366639190842, 0.15539116494566696, 0.11511182936948627, 0.15986949113029914, 0.18072237482643283, 0.16957616450738133, 0.21484051563324402, 0.1672008909458529, 0.17282988891458173, 0.18026467336386032, 0.16564740367669473, 0.17140824996898574, 0.16316977161752289, 0.17190184471722258, 0.16947935642068512, 0.1737399032046727, 0.16864222051111488, 0.16388476136814478, 0.1993517650834038, 0.15969433142720624, 0.17407304611327978, 0.24440087111668496, 0.1657744696435528, 0.22156901370852244, 0.26824952578739225, 0.22490800337543715, 0.14618679823738112, 0.22016895491254795, 0.16361566531683314, 0.24864465626782628, 0.29332851194111176, 0.19531797010260166, 0.16717748151633038, 0.1918003432348192, 0.22885850199789082, 0.15113327418794853, 0.20171561931874116, 0.19564201325452746, 0.18226629406358896, 0.1842656738246894, 0.18758976854266662, 0.18354884956141848, 0.1816958853808035, 0.18498064696846073, 0.1775295380165246, 0.1811254339308358, 0.1872789379030928, 0.18034431695652453, 0.07131859942010998, 0.06663250538699994, 0.06932577237928339, 0.06450820105173027, 0.0630821528309603, 0.06530104338873366, 0.07220266403329134, 0.0666632012124333, 0.06773793740870182]}, "mutation_prompt": null}
{"id": "f3135582-6a71-4ad3-8955-b64a234fa328", "solution": "import numpy as np\n\nclass PSO_AVC_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.pop_size = 10 * dim\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w = 0.5  # inertia weight\n        self.v_max = 0.2 * (self.upper_bound - self.lower_bound)\n\n    def __call__(self, func):\n        # Initialize particle positions and velocities\n        positions = self.lower_bound + np.random.rand(self.pop_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.uniform(-self.v_max, self.v_max, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_fitnesses = np.apply_along_axis(func, 1, positions)\n        \n        self.evaluations = self.pop_size\n\n        # Identify the global best\n        global_best_idx = np.argmin(personal_best_fitnesses)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitnesses[global_best_idx]\n\n        # Main optimization loop\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n\n                # Velocity clamping\n                velocities[i] = np.clip(velocities[i], -self.v_max, self.v_max)\n\n                # Update position\n                positions[i] = positions[i] + velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < personal_best_fitnesses[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_fitnesses[i] = fitness\n\n                    # Update global best\n                    if fitness < global_best_fitness:\n                        global_best_position = positions[i]\n                        global_best_fitness = fitness\n\n            # Adaptively adjust inertia weight\n            self.w = 0.4 + (0.9 - 0.4) * (self.budget - self.evaluations) / self.budget\n\n        return global_best_position, global_best_fitness", "name": "PSO_AVC_DN", "description": "Particle Swarm Optimization (PSO) with Adaptive Velocity Control and Dynamic Neighborhoods for enhanced exploration and exploitation.", "configspace": "", "generation": 54, "fitness": 0.21980625302455778, "feedback": "The algorithm PSO_AVC_DN got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.41772650962998426, 0.4303074521275634, 0.47934913833309034, 0.538426785091962, 0.41972366232981906, 0.5210087772476268, 0.530669316382808, 0.5052731680616602, 0.445409997209249, 0.1715024862816712, 0.146234932631516, 0.15139615872982082, 0.14425785457594975, 0.20672051796948598, 0.15240543734660839, 0.13151140104101855, 0.1359195471171808, 0.15203351711234792, 0.09021333247390284, 0.12246198566444344, 0.1584077874857932, 0.1311443722903668, 0.09484225757187192, 0.13155988665505558, 0.12192203337483365, 0.11861659872296171, 0.1119807270993477, 0.08598254256006022, 0.10162795628347321, 0.10369557509056326, 0.09647619377835615, 0.11019531819801254, 0.0971788914224937, 0.1143352216998037, 0.09527061547925164, 0.10168500626177734, 0.9769771191913335, 0.9750303421572085, 0.9772243557924305, 0.9763812111191257, 0.9756416257883146, 0.9770069762170543, 0.9776991681634378, 0.975825261391674, 0.975727148191678, 0.24539153816252923, 0.24968354783261426, 0.2588386173972337, 0.1603559810995937, 0.23576360131523377, 0.2377896625457877, 0.24167138670095678, 0.23651348080608547, 0.24934124479637998, 0.4354515826543074, 0.2727281148018086, 0.2830593098723372, 0.18661081230305576, 0.1916493481499636, 0.19771480598044988, 0.25599255887657946, 0.1980925043549896, 0.25738154856645656, 0.1645349949748499, 0.12064893764971985, 0.1273944926833983, 0.1224247777952493, 0.13746993576418587, 0.16813588441259109, 0.13660141663076497, 0.12278550726730286, 0.13272357652124245, 0.17106038811392266, 0.14917487011744046, 0.14786226597841434, 0.13088323086630516, 0.12288013691864175, 0.13730384108808724, 0.1334772800114573, 0.14606299039049553, 0.14374726600131094, 9.999999999998899e-05, 0.021003179194508448, 0.016593808010903155, 0.00013178245975542513, 9.999999999998899e-05, 0.0004217096573072565, 0.022696994634694656, 0.009136110389301733, 0.030233392095540657, 0.05973520597367665, 0.05220237775204983, 0.1020445690199887, 0.08353748219800561, 0.04432653972004097, 0.07274258125346877, 0.13958638947341884, 0.14539929736081536, 0.0811919327802283, 0.041347859658659614, 0.04725056353017587, 0.026070905402834965, 0.05359302141823008, 0.02164197257349365, 0.06150093327911432, 0.034416686348979986, 0.03096526129089272, 0.03933908289580268, 0.07371881867015595, 0.12009500762364189, 0.07218732865851729, 0.06134405744203575, 0.13837404081850013, 0.10832321925421806, 0.06573459246106739, 0.0404125314291387, 0.06382638127065621, 0.38510932262401065, 0.3706328205861511, 0.37197977287908157, 0.40039991288425025, 0.38451873806665804, 0.3808389549574398, 0.4081806184488479, 0.35982749668033565, 0.37212398743542663, 0.09486784817015048, 0.09763352874472309, 0.08935611826675083, 0.09765144997971442, 0.09951409218115681, 0.10240320744275522, 0.0854428760862278, 0.11169128081541946, 0.09154377607532693, 0.23197304688058218, 0.16781671426013434, 0.15829381292126166, 0.16880455957181362, 0.22220295938934387, 0.29489407565560766, 0.23071733393372063, 0.13545712470905003, 0.2111194269441753, 0.3023662668232855, 0.2647707194443566, 0.27743025276961286, 0.28501098017588533, 0.3025845989071627, 0.25259955129303946, 0.2711544717406146, 0.2763959420838574, 0.27777584044630843, 0.19054473405118133, 0.19224349140534958, 0.1924252226366875, 0.21502135436375724, 0.20119747349688955, 0.2390152087051638, 0.19017191238909836, 0.2148834895831817, 0.2235436232306185, 0.20847411214639777, 0.1879263241589081, 0.20513199041206442, 0.2273980091744464, 0.20141400602725168, 0.21635993989873048, 0.23430196796477853, 0.2032059691973589, 0.205997254613011, 0.20496627271683077, 0.19738489143100346, 0.1878445311516388, 0.21670051070218344, 0.2148318303611534, 0.1789153617277236, 0.20899816227716306, 0.310231300751424, 0.22335481442227534, 0.18216099328396196, 0.1690886686620432, 0.15040426616720948, 0.5927425867382101, 0.19410403293251888, 0.16849508812877778, 0.17380773733471833, 0.575743511096084, 0.6070513397045958, 0.4228075568882298, 0.2064833568312281, 0.4934881373366675, 0.2027744515579034, 0.1472550639519259, 0.19178818012517784, 0.1866216955264044, 0.10333891357488578, 0.48770684767171846, 0.18431683056759807, 0.18253872064831844, 0.19517178698473658, 0.20322214175480813, 0.1849798170484248, 0.18974549173016053, 0.20518099085949415, 0.19790050367631662, 0.20679387689381312, 0.09550902922669757, 0.08477166095563848, 0.09107368870495136, 0.09349316554567744, 0.0882382925218721, 0.0833572995891585, 0.0993384513834148, 0.08163073557820388, 0.0819452781068789]}, "mutation_prompt": null}
{"id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 55, "fitness": 0.46627213146897734, "feedback": "The algorithm QIDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.30.", "error": "", "parent_id": "b742152c-79c7-41ef-80b2-970993988c02", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "4c0eec48-fa28-4844-b964-82c55fbd0f0e", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "0854d504-6963-4871-87ca-d5bd1482181c", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "bdc3441e-6168-488b-b54c-5995b2390a7e", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "3660efdd-ef63-4139-87dd-b8d2453db1d9", "solution": "import numpy as np\n\nclass AQHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.harmony_memory_size = 10 * dim\n        self.harmony_memory = []\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n        self.quantum_prob = 0.5\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        for _ in range(self.harmony_memory_size):\n            harmony = self.lower_bound + np.random.rand(self.dim) * (self.upper_bound - self.lower_bound)\n            fitness = func(harmony)\n            self.evaluations += 1\n            self.harmony_memory.append((harmony, fitness))\n\n        # Sort harmony memory by fitness\n        self.harmony_memory.sort(key=lambda x: x[1])\n        best_harmony, best_fitness = self.harmony_memory[0]\n\n        while self.evaluations < self.budget:\n            new_harmony = np.empty(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.quantum_prob:\n                    # Quantum-inspired random selection\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = self.harmony_memory[idx][0][i]\n                else:\n                    # Generate a trial harmony based on the best harmony\n                    if np.random.rand() < self.crossover_prob:\n                        new_harmony[i] = best_harmony[i] + self.scale_factor * (np.random.rand() - 0.5)\n                    else:\n                        new_harmony[i] = self.lower_bound + np.random.rand() * (self.upper_bound - self.lower_bound)\n\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_harmony)\n            self.evaluations += 1\n\n            # Update harmony memory if new harmony is better\n            if new_fitness < self.harmony_memory[-1][1]:\n                self.harmony_memory[-1] = (new_harmony, new_fitness)\n                self.harmony_memory.sort(key=lambda x: x[1])\n                if new_fitness < best_fitness:\n                    best_harmony = new_harmony\n                    best_fitness = new_fitness\n\n        return best_harmony, best_fitness", "name": "AQHS", "description": "Adaptive Quantum-Harmony Search (AQHS) integrating quantum-inspired principles and harmony memory updates to balance exploration and exploitation adaptively.", "configspace": "", "generation": 59, "fitness": 0.24146407314610935, "feedback": "The algorithm AQHS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.5282721304536886, 0.5096300026283527, 0.5499766325456538, 0.5130644288703465, 0.502169338137781, 0.5140500226726255, 0.5156906783879169, 0.532089073501423, 0.5385427631490993, 0.20908021535758659, 0.23817422869629312, 0.2575555624768271, 0.21440906611264554, 0.2091399142567767, 0.18556649870415554, 0.22292779313269173, 0.23450197305935283, 0.20425432425378298, 0.18399816452522055, 0.1472896511605024, 0.16040847704397398, 0.14904502950927312, 0.16383508221828047, 0.1744048552775801, 0.13906340143649343, 0.1706265615676864, 0.2309651583214335, 0.14602446929580182, 0.1472775493630306, 0.15048608415837406, 0.15427602276853758, 0.15069030726485455, 0.1573201734911749, 0.1346910325154026, 0.171726210831754, 0.1333149695831487, 0.9595827747904444, 0.9667676113956647, 0.9579258967085201, 0.9622657988371094, 0.9576905020790646, 0.940779074481677, 0.9725590864461158, 0.973156499365994, 0.9609495617678325, 0.30661534536335155, 0.33388343214036975, 0.3374850961406678, 0.3169517836815472, 0.32500706682956826, 0.31990973160532765, 0.30462390361803904, 0.30042351147930446, 0.296387098943274, 0.22661488747337644, 0.22933738392623304, 0.2248692371163976, 0.2793928271307813, 0.28166392784418326, 0.1661825695494008, 0.23325515598211, 0.15194650726459136, 0.17067053357459738, 0.16163452271291312, 0.1234353495322319, 0.11327294581067582, 0.13399296800746707, 0.16613433858739712, 0.15082701653848074, 0.26222661273493264, 0.1814957562276872, 0.23687851369547863, 0.1332221461813129, 0.13404506087464174, 0.15809050817044867, 0.13284326841296556, 0.21161707195392765, 0.2869925801424694, 0.17269949157705156, 0.11617167623092572, 0.1373723094880006, 9.999999999998899e-05, 9.999999999998899e-05, 0.022522933419069302, 0.013492522703515197, 9.999999999998899e-05, 0.019522676377058956, 0.03967067166083871, 9.999999999998899e-05, 9.999999999998899e-05, 0.07027046642950152, 0.04609614079032909, 0.03907840570474874, 0.090246365458023, 0.0010206301291731945, 0.032933752470174604, 0.06941576315871079, 0.057535680987304105, 0.05023356600482054, 0.001556060801934156, 0.005885575280545119, 0.0006801897927394274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005040398946400959, 0.030761180409796918, 0.0048467331197469266, 0.11254889013019875, 0.10684134478299256, 0.12496467985209403, 0.06887318104538431, 0.14543726294692605, 0.08154540533770427, 0.1457162654811469, 0.10714182588039767, 0.1232859228838794, 0.440946411056652, 0.4363387527358943, 0.4469407565764921, 0.44044404270733106, 0.4568120975582538, 0.44420124191962596, 0.46721860599243625, 0.4312016979691775, 0.4691334711365941, 0.10524474533514327, 0.10954119915933902, 0.09166385566041713, 0.1650733262536569, 0.12530621311568335, 0.10693783346496799, 0.1030725607589087, 0.10902366497274507, 0.08466658179556996, 0.3313966407530494, 0.3565874957613452, 0.19520575860883638, 0.286678668324414, 0.2838937987310717, 0.25481782048593404, 0.2960542485761143, 0.21676611655971734, 0.20682067963712492, 0.20877541830645652, 0.3118122198800767, 0.3214673740228169, 0.22180819276482922, 0.2207730356337262, 0.17591055935189048, 0.32983623412776397, 0.32882893381110767, 0.3128913174375215, 0.21913177650516436, 0.23139239019786229, 0.17601368078915458, 0.19285794075122498, 0.20593547459888562, 0.22088473080872306, 0.14409942660053343, 0.2593024263873577, 0.1931002360356534, 0.2152921786208022, 0.19892157882665606, 0.26900266716868493, 0.2229777614861529, 0.2311075577604328, 0.2207921636733986, 0.21020797897477483, 0.1975621958001874, 0.23799754734298617, 0.3981531571062631, 0.215267702935931, 0.2083633468525895, 0.1829857877253669, 0.3265882010706901, 0.20729201082312576, 0.2062963996394569, 0.2018503027857106, 0.18762504416592496, 0.7165640936920531, 0.16514662770586097, 0.13608954046681188, 0.7776645002677952, 0.70712484823714, 0.25692981731790676, 0.14324402840496608, 0.16351542429115018, 0.21343740811082768, 0.47905095230688, 0.2136240374840861, 0.09282085115012684, 0.5142937047776145, 0.16915348566182198, 0.5503294660314846, 0.39997962919048147, 0.10493331108122783, 0.3932355961652183, 0.18517058369741246, 0.18360130744020275, 0.1891240903999294, 0.17751431113216753, 0.20953353906853378, 0.18484869194712905, 0.1916176820830321, 0.18839258718378193, 0.18132251290088452, 0.08027539998700417, 0.08365331485750771, 0.13415258551629772, 0.07022940144771583, 0.08093764698415762, 0.08015361223118289, 0.06926216868828783, 0.08189946856703978, 0.07996905557829126]}, "mutation_prompt": null}
{"id": "7ec5cf2a-2d58-40e0-a8bd-31934fdf67d1", "solution": "import numpy as np\n\nclass BISI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.swarm_size = 20 * dim\n        self.alpha = 0.5  # Influence of best-known positions\n        self.beta = 0.3   # Influence of random movement\n\n    def __call__(self, func):\n        swarm = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * 0.1\n        fitness = np.apply_along_axis(func, 1, swarm)\n        self.evaluations = self.swarm_size\n\n        personal_best_positions = np.copy(swarm)\n        personal_best_fitness = np.copy(fitness)\n\n        global_best_idx = np.argmin(fitness)\n        global_best_position = swarm[global_best_idx]\n        global_best_fitness = fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update velocities using both personal and global bests\n                r1, r2 = np.random.rand(2)\n                cognitive_component = self.alpha * r1 * (personal_best_positions[i] - swarm[i])\n                social_component = self.alpha * r2 * (global_best_position - swarm[i])\n                random_movement = self.beta * (np.random.rand(self.dim) - 0.5)\n\n                velocities[i] = velocities[i] + cognitive_component + social_component + random_movement\n                swarm[i] = np.clip(swarm[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_fitness = func(swarm[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = swarm[i]\n                    personal_best_fitness[i] = new_fitness\n\n                # Update global best\n                if new_fitness < global_best_fitness:\n                    global_best_position = swarm[i]\n                    global_best_fitness = new_fitness\n\n        return global_best_position, global_best_fitness", "name": "BISI", "description": "Bio-Inspired Swarm Intelligence (BISI) harnessing collective behavior through dynamic agent interactions for robust optimization.", "configspace": "", "generation": 60, "fitness": 0.1526435594108687, "feedback": "The algorithm BISI got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.24251098617443767, 0.24662253827250513, 0.25227231277600837, 0.2925774049743253, 0.24794310065475278, 0.2635890841405296, 0.25784835489803226, 0.2676798351053883, 0.22237536769946442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05987912164897502, 0.051103051434347124, 0.054759711139637846, 0.05918055446734383, 0.07216436612953725, 0.06745493007438474, 0.06405094914077691, 0.05612470867751873, 0.05547447532382643, 0.04170583212883483, 0.06138284704609975, 0.05025740023609071, 0.07326493896838837, 0.0688533472438585, 0.05607396658633046, 0.054456599114684145, 0.07084679049556708, 0.01876035123349029, 0.9583104719076295, 0.971150591446112, 0.9569446634291005, 0.9395477544064679, 0.9544252880850791, 0.9551458850100385, 0.9714058806053385, 0.9631978466119886, 0.9690056255261854, 0.202683260065037, 0.13204844423657547, 0.12162367129396734, 0.11774501287309613, 0.14309062213369617, 0.10903652483428172, 0.13317902556142747, 0.10426620846468526, 0.14747258803630425, 0.15902499546190296, 0.17988487413094478, 0.1294484811375245, 0.19311950861325844, 0.1824653470155797, 0.17488865107354556, 0.15179805302640836, 0.16210220102429307, 0.15819483454589323, 0.057541241777483654, 0.017818624268560623, 0.05054331273050161, 0.030029234800528326, 0.039241443687077715, 0.025164342563397613, 0.07482814228428747, 0.014967336415014909, 0.10483351740612346, 0.059848651515403306, 0.02212820504485402, 0.06752845252444128, 0.06197277207357621, 0.045605001340760065, 0.06800962239317176, 0.07633802415805024, 0.07023690495219781, 0.05411990386875387, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06172933462767671, 0.019587324782959548, 0.04309846390840233, 0.07390771612125413, 0.058688749912621296, 0.006468864916873818, 0.036145246142384346, 0.02067542100953601, 0.03481807333715592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025203071619357087, 0.006287792602877151, 0.03845802092582484, 0.006830301890805801, 0.030934178177808302, 0.016243202351570285, 0.014592896705402536, 0.00942885647038405, 0.0300965450243339, 0.24345805178310198, 0.24539590920537735, 0.24006580048973258, 0.24741805085549784, 0.25481690282661673, 0.286088510888335, 0.28334059955088375, 0.25321932293615057, 0.26138567272385393, 0.0638874257351505, 0.0530515936571625, 0.0610858185326395, 0.11514713174459923, 0.053572217065252725, 0.08952665258753056, 0.0656342921346057, 0.060685529030532814, 0.05661305493507629, 0.18032518821356314, 0.153401790437232, 0.13581669001187824, 0.13766266535167793, 0.19239403604628547, 0.13609371370281265, 0.1542178062966777, 0.17391084214815888, 0.1361943055493039, 0.18610123782366805, 0.20688425532192678, 0.2228811627190428, 0.20820070915771216, 0.20908161080894483, 0.20665218705582178, 0.18164836769484238, 0.19823856032069997, 0.1987061095137863, 0.13254604468535403, 0.12762906031069432, 0.16892513222249783, 0.14033470403654702, 0.13120010239637614, 0.18954814028066203, 0.161785352207645, 0.1398494615568967, 0.15723910593997992, 0.1632161634927365, 0.15035282490755142, 0.18474982799814677, 0.19085861857025244, 0.17544547890620688, 0.16683839925801025, 0.18747467675950547, 0.1736391641599494, 0.1803880356485137, 0.1741950519383667, 0.16072331563304032, 0.16554559011075798, 0.15820708572078057, 0.163586425558369, 0.17167149932949433, 0.16874520167980822, 0.1706290373804772, 0.162550227015137, 0.20738917067883544, 0.24042911346710139, 0.16901100846212502, 0.3093576306465513, 0.17680799238301237, 0.16325448782433016, 0.13160507391223686, 0.22859664294219806, 0.28775871704527967, 0.34710182434006065, 0.15892434850261528, 0.12069606710227054, 0.2755502927854926, 0.15302007030725906, 0.29038707529121754, 0.20468545579669883, 0.1640636824813202, 0.37714514041675584, 0.18140577812547565, 0.17137180140519837, 0.18109323702847546, 0.18737071162072205, 0.19187856297727401, 0.19397917180695012, 0.18441586781239527, 0.1848702935282911, 0.18489064349415052, 0.08159044488168399, 0.0629359942723744, 0.05894876267358029, 0.07067093954131054, 0.06653888040695688, 0.06237976756554231, 0.054783654645442215, 0.06483481535545321, 0.0635201779882063]}, "mutation_prompt": null}
{"id": "e6b27e30-e010-4aa8-b7de-11785734b09b", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "fa4ca15f-9051-4916-a004-d5514e0ba969", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "346c7247-2503-42a0-89ae-7be568eec6eb", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "d21df8f0-699f-4dd2-933f-bbd554cd20d4", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "7291ee91-8c97-4be1-a4af-4c40b56f9f03", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "70f22509-3a3c-4706-b542-59f2d0c1976d", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "b6b27e7f-3a2a-4f8e-b724-f447d1e6c6c9", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "2d4b7130-2cb7-4c9b-a746-b2cbd6a78328", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "b3c0e590-56a8-4cc5-bb8d-bf0d36ae045f", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "e21c6307-349a-4863-97a8-7a9044474f79", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "159ecb1a-541e-42f6-aabf-678a71984d79", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "73483e00-8b3a-4f05-a13a-1f72f43a99a5", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "1f85242b-0b7d-4188-9a1a-2008934bea27", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "0b23f5c5-578c-414a-8ba7-b441df3fade4", "solution": "import numpy as np\n\nclass APSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.swarm_size = 20 * dim\n        self.inertia_weight = 0.9\n        self.c1 = 2.0  # Cognitive component\n        self.c2 = 2.0  # Social component\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound) * 0.1\n        personal_best_positions = positions.copy()\n        personal_best_fitness = np.apply_along_axis(func, 1, positions)\n        self.evaluations = self.swarm_size\n\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                fitness = func(positions[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = positions[i]\n                    personal_best_fitness[i] = fitness\n\n                    # Update global best\n                    if fitness < global_best_fitness:\n                        global_best_position = positions[i]\n                        global_best_fitness = fitness\n\n            # Adapt inertia weight\n            self.inertia_weight = 0.4 + 0.5 * (self.budget - self.evaluations) / self.budget\n\n        return global_best_position, global_best_fitness", "name": "APSO", "description": "Adaptive Particle Swarm Optimization (APSO) utilizing dynamic topology and inertia weight adjustment for enhanced exploration and convergence in high-dimensional spaces.", "configspace": "", "generation": 74, "fitness": 0.1624448453878803, "feedback": "The algorithm APSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.31521982405117344, 0.3431920148737476, 0.33542453594888044, 0.37026982438599343, 0.3534151159447064, 0.3473200091505455, 0.2681813911451517, 0.32524391755001936, 0.2936087178382639, 0.01880957284764062, 0.03242843233226744, 0.019602797334061672, 9.999999999998899e-05, 0.03412286365941275, 9.999999999998899e-05, 0.003265453560928333, 0.0028467819487568713, 0.05551852329230167, 0.07663157783614494, 0.08178135829258004, 0.060340448308901395, 0.06337719027815547, 0.08171277594452131, 0.07420134328643124, 0.08497053284776013, 0.09202544892062359, 0.06232810201301986, 0.06313571360793302, 0.06544591050188897, 0.06249894993755312, 0.06361911974639001, 0.06128626969326412, 0.07081223402887404, 0.07221179707719205, 0.062064526113069785, 0.07777342791079156, 0.984965962053621, 0.9895427128951366, 0.9858108755773379, 0.9858384739991438, 0.9849298993160519, 0.9810602153971821, 0.9871433703035247, 0.9767516569457082, 0.9813046253417761, 0.17275159596379341, 0.13243024208333665, 0.14184389719349078, 0.13878789969131444, 0.11245811165738961, 0.12007937655106837, 0.1525527250080686, 0.1180635968851842, 0.1664665351614547, 0.17746736923115403, 0.21003205523201252, 0.17904507950993032, 0.16522999479882872, 0.18775430548326488, 0.18017818285873322, 0.14184821337651954, 0.19973739265421986, 0.23431375873966676, 0.08600819635050083, 0.09604130861383597, 0.09060977789955593, 0.082769521651054, 0.0680591334658518, 0.04841207478005438, 0.06811564246658164, 0.05668944232702, 0.05664151748139379, 0.042208194636748186, 0.04097378761593484, 0.11845515012666785, 0.048209268834476515, 0.058992481758378235, 0.11208857177098219, 0.08214541299237843, 0.056678000523742944, 0.06021674439167091, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013308153332347583, 9.999999999998899e-05, 9.999999999998899e-05, 0.04211805361553578, 0.02894238561802176, 0.058216003265812666, 0.04031542386493325, 0.03166632644211187, 0.0015859414924450643, 0.030345871593579377, 0.019675593673398883, 0.052758017496217, 0.006241592982336619, 9.999999999998899e-05, 0.004386040478271069, 0.012572104943233131, 9.999999999998899e-05, 9.999999999998899e-05, 0.01462740820237507, 0.007493048527942303, 0.0061215672425051215, 0.026836506129989335, 0.003579934637378712, 0.04717113285900054, 0.01842065000528459, 0.018376742676432745, 0.013422667270364008, 0.03604568839222888, 0.039019504408692174, 0.03419279296493116, 0.27421181071357204, 0.2887001752475461, 0.3129976882867215, 0.29954136406288334, 0.2634359050027826, 0.31065471320107285, 0.3629322129375403, 0.2817007381960456, 0.2759777065270239, 0.05900729114231196, 0.07455714433692118, 0.06475318121055129, 0.08083351189063992, 0.0813018692865144, 0.06176687990061003, 0.07090855179143474, 0.058523980771129525, 0.08493051050246136, 0.14824419915599452, 0.16462910741183334, 0.1772571245272082, 0.17744695625003093, 0.1852197547904274, 0.1637992285618306, 0.1829827869580496, 0.18209629494040291, 0.14453141151001658, 0.2021985617167632, 0.19786787908125536, 0.21211103902399164, 0.21836723277943515, 0.2018225896289647, 0.21873933491553643, 0.20733578598395508, 0.24286220222162713, 0.21724300255241624, 0.15234027186829902, 0.14833892678836436, 0.16691308112357806, 0.1454787765825578, 0.15217331028790615, 0.17516725569164904, 0.16860962755440467, 0.1601731610819821, 0.18818739137304163, 0.1598684193923191, 0.16345675007249139, 0.16623089945503322, 0.16460728203696995, 0.184474103056814, 0.1920459430753485, 0.1509388432882086, 0.18309368975327556, 0.1897997933454567, 0.1534698247800207, 0.1624178552760448, 0.17014311659100534, 0.16956853220296086, 0.18401314932602986, 0.17663828258655923, 0.1648317978404923, 0.177763951307101, 0.18633621455759652, 0.1283968928553979, 0.17432411890478194, 0.18221870096493653, 0.17197247025154505, 0.180321270072763, 0.11506612457947318, 0.22836879392312204, 0.1507302606138914, 0.1836172760226008, 0.32943903010220577, 0.16553652599379676, 0.14196714591886972, 0.21431720064172, 0.220645570671418, 0.25976938910165004, 0.19996226632139824, 0.19445233113155058, 0.2405902776703266, 0.18856897398054107, 0.18072076153552863, 0.18607479702634477, 0.1916777763733286, 0.19177407284601888, 0.1793655851247662, 0.19524068507153047, 0.17821824634161987, 0.19274581370301647, 0.055647112095431495, 0.0646367040600504, 0.05459861278790212, 0.06311849398516789, 0.06731181502291039, 0.07132373941846548, 0.05781935501233837, 0.07214114561645568, 0.05488435660523849]}, "mutation_prompt": null}
{"id": "39e4350a-bd78-45b0-9f2e-ece5b44a4cd8", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "429b9bad-dc69-43ea-b793-0945ee225d4e", "solution": "import numpy as np\n\nclass AGPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.population_size = 10 * dim\n        self.crossover_prob = 0.7\n        self.mutation_rate = 0.1\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.population_size, self.dim) * 0.1\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = self.population_size\n\n        personal_best = population.copy()\n        personal_best_fitness = fitness.copy()\n\n        global_best_idx = np.argmin(fitness)\n        global_best = population[global_best_idx]\n        global_best_fitness = fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            # Update particle velocities and positions\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (\n                    self.inertia_weight * velocities[i]\n                    + self.cognitive_component * r1 * (personal_best[i] - population[i])\n                    + self.social_component * r2 * (global_best - population[i])\n                )\n                population[i] = np.clip(population[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate fitness of new position\n                current_fitness = func(population[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n                \n                # Update global best\n                if current_fitness < global_best_fitness:\n                    global_best = population[i]\n                    global_best_fitness = current_fitness\n\n            # Apply genetic-like crossover and mutation\n            if self.evaluations < self.budget:\n                for j in range(0, self.population_size, 2):\n                    if self.evaluations >= self.budget:\n                        break\n\n                    if np.random.rand() < self.crossover_prob:\n                        crossover_point = np.random.randint(0, self.dim)\n                        population[j, crossover_point:], population[j+1, crossover_point:] = (\n                            population[j+1, crossover_point:], population[j, crossover_point:]\n                        )\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutate_index = np.random.randint(0, self.dim)\n                        population[j, mutate_index] = self.lower_bound + np.random.rand() * (self.upper_bound - self.lower_bound)\n\n                    current_fitness_j = func(population[j])\n                    current_fitness_j1 = func(population[j+1])\n                    self.evaluations += 2\n\n                    if current_fitness_j < personal_best_fitness[j]:\n                        personal_best[j] = population[j]\n                        personal_best_fitness[j] = current_fitness_j\n\n                    if current_fitness_j1 < personal_best_fitness[j+1]:\n                        personal_best[j+1] = population[j+1]\n                        personal_best_fitness[j+1] = current_fitness_j1\n\n                    if current_fitness_j < global_best_fitness:\n                        global_best = population[j]\n                        global_best_fitness = current_fitness_j\n                        \n                    if current_fitness_j1 < global_best_fitness:\n                        global_best = population[j+1]\n                        global_best_fitness = current_fitness_j1\n\n        return global_best, global_best_fitness", "name": "AGPSO", "description": "Adaptive Genetic Particle Swarm Optimization (AGPSO) combines genetic algorithm principles with particle swarm dynamics for adaptive exploration and exploitation in black box optimization.", "configspace": "", "generation": 76, "fitness": 0.17643537686686997, "feedback": "The algorithm AGPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.424030110029163, 0.4851417711994138, 0.3240586330665952, 0.3210726749533749, 0.3951543055536364, 0.3927109000619219, 0.31339547802851286, 0.34327536521350044, 0.4376943777405281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002898744284008159, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06308681789829751, 0.06847868172596172, 0.07167899128233879, 0.07529771583368128, 0.05640119202859528, 0.0811105025211325, 0.08581156772075083, 0.07499307470774152, 0.0687440769756198, 0.061533173853007606, 0.08162770596482127, 0.07102011610637438, 0.12908157631992268, 0.08006107818771047, 0.055424846259685134, 0.05570436219209329, 0.09267610153171557, 0.0664827321850544, 0.9922339858472661, 0.9737931555379246, 0.9942529663611638, 0.9772812614227251, 0.9831332372095481, 0.9662401446742881, 0.9855614225982039, 0.9832986677268264, 0.9720745098058755, 0.18348340821385367, 0.1905663382764391, 0.16290558243612396, 0.15910112607212212, 0.22719320265669174, 0.14655704076467013, 0.17070378361028637, 0.09585321601018171, 0.2270526911244557, 0.21167111137218841, 0.1955665479974178, 0.19814814781718637, 0.19312802678604613, 0.20483325941415298, 0.21049372785796572, 0.18320419621345374, 0.22358160166579455, 0.17158147865116558, 0.08350703765345302, 0.10498321177227832, 0.04958307702956821, 0.09216274628063803, 0.10246041519067062, 0.08743617596162145, 0.1222945064168649, 0.09378652610510851, 0.044064876078923954, 0.22509264238777216, 0.11478369979500513, 0.11370278440947479, 0.06428369210858986, 0.11471479967565623, 0.13553874136018473, 0.1255411412986277, 0.10599098625657066, 0.06303541630053622, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0706466044867815, 0.025053785257843075, 0.0776826759924184, 0.11050110872000718, 0.022223270952110186, 0.006931043617098842, 0.031247125806745157, 0.0374189267191084, 0.0317845667361738, 9.999999999998899e-05, 0.008410085690085944, 9.999999999998899e-05, 0.040642474757577096, 0.02448832932097722, 0.030755209374304093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11017846598754999, 0.05420007167489982, 0.010539630199318695, 0.008523611899282857, 0.06316340368926798, 0.07563927981936325, 0.031734884107055605, 0.0757174365124531, 0.06252412345529468, 0.33413914179971593, 0.2962693355996113, 0.33567495215108567, 0.3081399036798087, 0.35185148302010505, 0.35575928923829014, 0.2620745870898262, 0.3251475186269749, 0.2950015181517205, 0.08258343305189408, 0.06304066608888148, 0.06831241871727578, 0.07826058873730257, 0.07372727936382328, 0.07941210115730901, 0.08551962563778792, 0.07232693671426316, 0.07220551723238566, 0.15005937136538172, 0.1570477913859033, 0.14060013062650123, 0.20635817105746346, 0.138205603319014, 0.12318145392712598, 0.2643057856042138, 0.1449695124912278, 0.21746903696819964, 0.24197584736828692, 0.21674934609415886, 0.24346031830368497, 0.26728178064096597, 0.22797041259284812, 0.2027789923447063, 0.18798006019084446, 0.2309589942536444, 0.2471285025637111, 0.21170890408332388, 0.1824931945770184, 0.15821396875352223, 0.1610587523598177, 0.13510294935864609, 0.16101104075240724, 0.1418750303210773, 0.16973802955838635, 0.1461108310948237, 0.17447983857391225, 0.1801147103475732, 0.19883022127267902, 0.20326316857573745, 0.16961346053414816, 0.18563998445330676, 0.1690032493064857, 0.1674504140688614, 0.2028648697243146, 0.18191520683241402, 0.2099339565701046, 0.19419120845880344, 0.1740379851761501, 0.18821477344039828, 0.17805638990770145, 0.16607941562537976, 0.1887238682646759, 0.16089062672908694, 0.5339858091840326, 0.1654138498426415, 0.1529344469704389, 0.3107749949096601, 0.19725006256238453, 0.18872635620773404, 0.12799036578980527, 0.1552790816781271, 0.5879297094769511, 0.22570280864869952, 0.1873354872796653, 0.16632362459983685, 0.17576753728246564, 0.18230520792417237, 0.12984522896381911, 0.19887568541527645, 0.1515007221148882, 0.22016063318075718, 0.172773290832424, 0.16969163098742668, 0.17354148543337855, 0.18444290479984138, 0.1994545134173703, 0.19425516444717128, 0.177527598116612, 0.18972817362910732, 0.18810201801294446, 0.07956957062536052, 0.08820317788774013, 0.07513404157212356, 0.08183934722614705, 0.06315525363654162, 0.0727478928936025, 0.0689251972597924, 0.07040887554854158, 0.07658709660330054]}, "mutation_prompt": null}
{"id": "eae48e6f-54d4-46c5-8449-74aa52f86b89", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "60eea129-5e18-49e9-adac-7da7b083024f", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "22a8a486-1062-4d66-8acb-1c7122a61947", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "5e61e7ff-8d45-469a-ae38-cf7cd098e04b", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "03abb0ed-6378-4362-b4cb-1036dcd3d0c0", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "1b88d53f-7375-4a84-9420-6c08cb5ec838", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "90f1313f-be6f-4d19-8679-cd986abf722c", "solution": "import numpy as np\n\nclass AGSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.population_size = 10 * dim\n        self.temperature = 1.0\n        self.cooling_rate = 0.95\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            new_population = []\n\n            for _ in range(self.population_size // 2):\n                if self.evaluations >= self.budget:\n                    break\n\n                parents = self._select_parents(population, fitness)\n                offspring1, offspring2 = self._crossover(parents[0], parents[1])\n\n                offspring1 = self._mutate(offspring1)\n                offspring2 = self._mutate(offspring2)\n\n                new_population.extend([offspring1, offspring2])\n\n            new_population = np.array(new_population)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            self.evaluations += len(new_population)\n\n            for i in range(len(new_population)):\n                if new_fitness[i] < fitness[i] or np.random.rand() < np.exp((fitness[i] - new_fitness[i]) / self.temperature):\n                    population[i] = new_population[i]\n                    fitness[i] = new_fitness[i]\n\n                    if new_fitness[i] < best_fitness:\n                        best_individual = new_population[i]\n                        best_fitness = new_fitness[i]\n\n            self.temperature *= self.cooling_rate\n\n        return best_individual, best_fitness\n\n    def _select_parents(self, population, fitness):\n        idx1, idx2 = np.random.choice(len(population), 2, replace=False)\n        return (population[idx1], population[idx2]) if fitness[idx1] < fitness[idx2] else (population[idx2], population[idx1])\n\n    def _crossover(self, parent1, parent2):\n        if np.random.rand() < self.crossover_rate:\n            crossover_point = np.random.randint(1, self.dim - 1)\n            offspring1 = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))\n            offspring2 = np.concatenate((parent2[:crossover_point], parent1[crossover_point:]))\n        else:\n            offspring1, offspring2 = parent1.copy(), parent2.copy()\n        return offspring1, offspring2\n\n    def _mutate(self, individual):\n        for i in range(self.dim):\n            if np.random.rand() < self.mutation_rate:\n                individual[i] += np.random.randn() * 0.1\n                individual[i] = np.clip(individual[i], self.lower_bound, self.upper_bound)\n        return individual", "name": "AGSA", "description": "Adaptive Genetic Simulated Annealing (AGSA) combining genetic algorithms and simulated annealing to adaptively balance exploration and exploitation in optimization.", "configspace": "", "generation": 83, "fitness": 0.18788490588981954, "feedback": "The algorithm AGSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.4983821775514996, 0.4118403018664525, 0.5164751836022066, 0.4443854892096065, 0.4927133687683485, 0.47431836011714257, 0.47510725107270246, 0.45948193183438146, 0.4778039381839835, 0.15776956027040867, 0.20164183454112383, 0.0638424077101779, 0.0688619654167063, 0.1319713417298124, 0.16094916029379325, 0.20060548538883893, 0.13994895769444338, 0.19301985027374247, 0.15083887495162585, 0.1349427150284488, 0.11203738340774361, 0.09408491850145961, 0.0714056495513592, 0.15695602206068138, 0.09116868329429106, 0.12028022539277605, 0.07563819906661251, 0.07121823202589017, 0.05220187869075854, 0.07186670900059233, 0.13726960422827938, 0.07700708793979627, 0.11502911698168716, 0.1415650417212121, 0.07395351564237884, 0.07777522938098624, 0.5570548318362456, 0.6887369368328267, 0.5595442703313502, 0.6649324538562654, 0.6099045767688616, 0.7324166280163, 0.6691164356511018, 0.5184261670022837, 0.7338516428175463, 0.1509517915655375, 0.15218671688061403, 0.12604317173605795, 0.13668103306325718, 0.07920441332378558, 0.14403640852390087, 0.2555867538978138, 0.08422233030619719, 0.2754808825096071, 0.20996377051409587, 0.14505674937843105, 0.2276719700163533, 0.23461207020448738, 0.26740851834264534, 0.18289154931295393, 0.10702374740324705, 0.17390376137500207, 0.23477742124360734, 0.21015320218614875, 0.11631055852818684, 0.11314027689580652, 0.13131081983140158, 0.3148618706973353, 9.999999999998899e-05, 0.2868655991798498, 0.11208471865849878, 0.2755524035387936, 0.14208388613067058, 0.11175934723994174, 0.23058480934340675, 0.12645595679682353, 0.17981158955921694, 0.1797128861711057, 0.15722746076902117, 0.11307405038758223, 0.13446788882120198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06085801771822885, 0.03862194188226109, 0.07612118733228435, 0.06376117564022021, 0.02237816809629345, 0.02331056799028397, 0.056648434674038795, 0.05786018238433821, 0.055803650976051, 0.11881761698070292, 0.050736019969340296, 0.10027813585492984, 0.059169900660884345, 0.06049831839307407, 0.10708597761725236, 0.09204784006005862, 0.063488609548907, 0.04014412400163925, 0.07016599751001762, 0.047899400779837564, 0.14854812903538972, 0.07133921005905663, 0.040783750756627324, 0.006250799836234777, 0.06136454839837702, 0.13106040526672402, 0.081746887008745, 0.3361874771459069, 0.4053685770786004, 0.3324931483485204, 0.4632088038219262, 0.409742727786202, 0.3988234909212932, 0.4220851408907178, 0.3551847569688291, 0.3491345022550483, 0.07527444039314413, 0.07966926829213594, 0.07043866749027516, 0.10331097125998168, 0.09806183932246437, 0.09495232821508359, 0.053772915989418135, 0.05510835013917437, 0.08979687346188747, 0.24380820236661216, 0.16174115046462667, 0.16273720338420739, 0.24791527156380888, 0.3735526121057544, 0.15618764848542743, 0.17128860449356886, 0.17814803899256892, 0.16596461670168516, 0.2352714452126181, 0.2526187948405061, 0.16538044649785988, 0.17277840283622203, 0.19385909611965757, 0.2682437688475179, 0.1973415322252159, 0.25172192756427625, 0.189408446685557, 0.16352282564399756, 0.10388772909917732, 0.11595929472851618, 0.10274524207019253, 0.14486592959324374, 0.19033746949080477, 0.12623746424094429, 0.2038544242713377, 0.1273605580352285, 0.24294124024073127, 0.16941579423343445, 0.2212436208715709, 0.20698246840358125, 0.20630678850030948, 0.1984353095337167, 0.2656348884149544, 0.1700099878922916, 0.208677013656153, 0.20311637185413234, 0.1718184526056422, 0.18272659751316522, 0.1924169101103277, 0.17569991350347336, 0.190524298108673, 0.18664787271583405, 0.18416668480480836, 0.18468133537322617, 0.2800733632777044, 0.17966921843413364, 0.18834755334680664, 0.1942085672621079, 0.1920006842155867, 0.53581714716386, 0.4057091191589015, 0.18435437419314205, 0.16309735793523616, 0.3465606399635184, 0.19262489487978052, 0.2003867849376677, 0.1553652521794252, 0.2033683213605707, 0.2518577750118196, 0.15845268353216502, 0.1605607055181677, 0.1597156534504971, 0.1906810444086794, 0.19933366878001746, 0.17741809554955779, 0.2249726314924485, 0.18567048346262705, 0.23986112548598537, 0.21520025499616702, 0.24707927231071836, 0.21860305140523784, 0.060338395488955365, 0.06644035217292132, 0.06224970613715508, 0.07421470186414969, 0.07121339113263225, 0.08599618733317838, 0.07016180122061955, 0.06489209525557149, 0.09655436493642211]}, "mutation_prompt": null}
{"id": "45e822cc-92cc-4580-8d0c-53ab9f4aaaba", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "9be4d110-a666-4e12-9c58-69339d70942d", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "27a81eb4-8b9b-4c66-9b3d-f8edb1ea76d3", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "9449bddc-90b4-413f-8823-a4a8cc694341", "solution": "import numpy as np\n\nclass APSO_DIVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.pop_size = 10 * dim\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.w_max = 0.9  # maximum inertia\n        self.w_min = 0.4  # minimum inertia\n        self.v_max = (self.upper_bound - self.lower_bound) / 2.0  # max velocity\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-self.v_max, self.v_max, (self.pop_size, self.dim))\n        personal_best = np.copy(population)\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best)\n        self.evaluations = self.pop_size\n\n        best_idx = np.argmin(personal_best_fitness)\n        global_best = personal_best[best_idx]\n        global_best_fitness = personal_best_fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            w = self.w_max - ((self.w_max - self.w_min) * (self.evaluations / self.budget))\n\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                cognitive = self.c1 * r1 * (personal_best[i] - population[i])\n                social = self.c2 * r2 * (global_best - population[i])\n\n                velocities[i] = w * velocities[i] + cognitive + social\n                velocities[i] = np.clip(velocities[i], -self.v_max, self.v_max)\n\n                population[i] += velocities[i]\n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n\n                current_fitness = func(population[i])\n                self.evaluations += 1\n\n                if current_fitness < personal_best_fitness[i]:\n                    personal_best[i] = population[i]\n                    personal_best_fitness[i] = current_fitness\n\n                    if current_fitness < global_best_fitness:\n                        global_best = population[i]\n                        global_best_fitness = current_fitness\n\n        return global_best, global_best_fitness", "name": "APSO_DIVC", "description": "Adaptive Particle Swarm Optimization with Dynamic Inertia and Velocity Clamping (APSO-DIVC) to enhance convergence by balancing exploration and exploitation through adaptive inertia weights and dynamically adjusting velocity bounds.", "configspace": "", "generation": 87, "fitness": 0.18749684261409683, "feedback": "The algorithm APSO_DIVC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.40161909524453354, 0.4418450646338954, 0.4382318416947646, 0.42462806219347016, 0.47543664305609645, 0.18125949019703147, 0.4021049932430072, 0.43696962682649987, 0.4419179836695002, 0.14920418396351853, 0.06914726525445225, 0.11666963940813402, 0.02246945844399484, 0.15180497991829467, 0.02744670248297776, 0.04032633415243003, 0.022581808233962275, 0.07978196407930971, 0.10473681472788854, 0.10684478195122993, 0.07508799368539132, 0.08459392735306392, 0.1290661899100609, 0.07703519789278745, 0.08144134088434762, 0.09392227062615421, 0.09221332480954059, 0.0783192956440093, 0.06874932956912383, 0.08909621255120548, 0.0779511807791543, 0.08272336899785915, 0.0766151371270325, 0.09834736877302841, 0.06833089883897392, 0.07628771192721906, 0.9903137675506444, 0.9884429978147297, 0.990258462643354, 0.9853896252398545, 0.9849119817242789, 0.9860841186185433, 0.9898347017035377, 0.9850095636032915, 0.9883530460821253, 0.21272045023731612, 0.23280136223907288, 0.10005173659381439, 0.224518377540041, 0.13674394677380164, 0.23962890212648158, 0.05067785044037243, 0.20628080955941042, 0.08052412197558623, 0.3352938759608812, 0.2317704869813484, 0.2018544193051448, 0.16345830631417502, 0.16854607934248, 0.18245289444105106, 0.3829708493422087, 0.2190896579966034, 0.22475525794071083, 0.09949069477861283, 0.10879900593668812, 0.07889350147028595, 0.07749813508015035, 0.09496584105242944, 0.06699855593751436, 0.08885370954549632, 0.0999800917710385, 0.12650482582429634, 0.11936822774615408, 0.10587192073796958, 0.13884307283370623, 0.0831860034281402, 0.06716966042828021, 0.13742920453639873, 0.09022112999076692, 0.12148645879522157, 0.12009584116580974, 0.01935786563275599, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005735135793932811, 9.999999999998899e-05, 0.00013886666789764135, 0.021734129661408752, 0.043500932616572174, 0.046222044011266505, 0.06230416086730706, 0.06029035974299002, 0.006223099238985563, 0.02996076164672612, 0.06050445998316534, 0.02331809239346727, 0.0157223448713687, 9.999999999998899e-05, 0.00842137458239467, 0.029317468859015428, 9.999999999998899e-05, 0.029718478595068154, 0.021916793421991487, 0.035690977376591215, 0.029929357694951975, 0.052774962297326034, 0.035157355435550874, 0.050097669327503036, 0.07814399466264799, 9.999999999998899e-05, 0.0625260688358632, 0.039011041293715576, 0.02327638501074758, 0.03824302998479512, 0.3375425190073992, 0.34387669469421944, 0.36069109543146616, 0.36064151563523905, 0.38309876892203487, 0.35334507628053735, 0.31754265713904006, 0.3523298017601195, 0.32371589897936737, 0.06352507773510474, 0.09131755579054313, 0.058520737337799944, 0.08574995033980937, 0.08873813043749923, 0.11030501038775586, 0.07088794975438217, 0.0867876528910716, 0.08519763563046234, 0.19830464258767844, 0.18036319697856018, 0.1588961479086618, 0.19110188940748463, 0.22268142631775678, 0.1500561461917962, 0.1717025517897237, 0.16206957932978205, 0.1800434952331822, 0.2204192924751588, 0.20952931823185128, 0.26178767007263604, 0.24738627488432385, 0.24973090633923967, 0.25531048920341914, 0.26354485163358843, 0.2909999518701669, 0.23031961243999322, 0.1691203292497555, 0.21283050900463119, 0.20940456006830632, 0.21368755184839106, 0.1629440788465074, 0.21742163994748476, 0.17802168805264718, 0.2213285997212332, 0.14879783633781385, 0.2068561095712258, 0.1937143790668776, 0.18659199982069485, 0.21219958450390008, 0.17205079835180492, 0.18967942946251637, 0.18603773820218783, 0.21230806683992087, 0.17162808322200018, 0.17753959024683952, 0.1775965703534539, 0.17580816546503242, 0.1840158156795455, 0.17756582136157906, 0.18663645366540138, 0.1746492864389202, 0.1857119909328877, 0.17027052238686213, 0.18811098565757522, 0.1529149007758639, 0.15161792115941297, 0.1589121632042183, 0.18332397548917023, 0.17195986303697242, 0.17011143853393063, 0.44571097223937106, 0.40589927406695947, 0.2789787801471675, 0.1930385592020788, 0.2766612316932072, 0.23767926902713665, 0.24841002494395537, 0.28100443275920683, 0.25620253214128774, 0.19067045967522323, 0.25788699507265755, 0.19398765689791186, 0.182537146004763, 0.17969322651877095, 0.1964302261239146, 0.1897406763242847, 0.19006353468456805, 0.19253693947943806, 0.1941746009763068, 0.18377416842420047, 0.07718758892929023, 0.0628408368075779, 0.06767739812235574, 0.06231862780872344, 0.07726580819300011, 0.07080954275975859, 0.07706124550195759, 0.06666289312936902, 0.07480713725081789]}, "mutation_prompt": null}
{"id": "64e40aaf-19b1-412f-b488-edbc1b080187", "solution": "import numpy as np\n\nclass AQGA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5\n        self.crossover_prob = 0.85\n        self.mutation_adapt_rate = 0.1\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Adaptive mutation based on current best\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutation_rate = np.random.rand() * (1 - self.mutation_adapt_rate * (fitness[i] / best_fitness))\n                    mutant_vector = best_individual + mutation_rate * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutation_rate = np.random.rand() * (1 - self.mutation_adapt_rate * (fitness[i] / best_fitness))\n                    mutant_vector = x1 + mutation_rate * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "AQGA", "description": "Adaptive Quantum Genetic Algorithm (AQGA) combining adaptive mutation rates and quantum principles for efficient exploration and exploitation in optimization.", "configspace": "", "generation": 88, "fitness": 0.36443901276749097, "feedback": "The algorithm AQGA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.31.", "error": "", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.9443287414606193, 0.9420132846935508, 0.9487091923322067, 0.944089837405699, 0.9471224506738757, 0.9460241693999146, 0.951733326254358, 0.9382919787358583, 0.9396027669570416, 0.7372858658246109, 0.7538568053595368, 0.8002914835380368, 0.7514354337795471, 0.5754441866917452, 0.8050994896981569, 0.76759752419107, 0.8111498849141408, 0.7329309575221143, 0.147308387731801, 0.1118182765746315, 0.10665988986987374, 0.11948860215487078, 0.11213789428946674, 0.13550333820045146, 0.13607722489570173, 0.14738197080121063, 0.09642537881555235, 0.16147245313139214, 0.14723949274784387, 0.11817043854992826, 0.10727150420657838, 0.14641357203116934, 0.1621784205625172, 0.14654219323708007, 0.09570470582566815, 0.13469089974800064, 0.9876272272704967, 0.9824868062177123, 0.99212630742182, 0.9863260683723626, 0.9821994871495511, 0.9846809465458934, 0.9907316629274698, 0.9912341927961349, 0.9786226981437026, 0.8108475981525692, 0.8129336964118096, 0.8294752971736253, 0.8191061705107192, 0.8113483254558151, 0.8403332873996905, 0.8377773496260376, 0.8175327050104474, 0.8178020236262955, 0.9474225847900136, 0.21113901442083238, 0.3702337644123046, 0.36419693518869556, 0.19873889295480907, 0.192265672661721, 0.17752292157956706, 0.1515111205997095, 0.17305298774934852, 0.6704055616511888, 0.13349258115007034, 0.1353701611476723, 0.8398398996186307, 0.13160135687779662, 0.7288827993166931, 0.6310135456704822, 0.23144221202712856, 0.13110571312787034, 0.733156231238127, 0.13351909379325422, 0.3041470771454122, 0.6492287954450884, 0.7495222291837513, 0.21294870841250246, 0.2275779336781788, 0.49162111129737696, 0.5939309654154001, 0.024893106462600345, 0.07431268941958336, 0.09796074536353427, 0.046562450180739456, 0.15468482780359738, 0.0491103987435767, 0.12263991133423602, 0.03965006152144124, 0.08177437269832122, 0.0932032613420779, 0.08090493696210777, 0.1504039340962008, 0.16823838710398253, 0.022942901541108784, 0.0046114883924754935, 0.16831745386270247, 0.07709608269631385, 0.007753348759542367, 0.0739168948269957, 0.18320881499155894, 0.06765675114748848, 0.18785762222540114, 0.1731647245191682, 0.06179951483421753, 0.17812036018576816, 0.07363768525136094, 0.11574959501180981, 0.26023478931854493, 0.2598124495223131, 0.25281162131982515, 0.27169645091137384, 0.30873487823337087, 0.5131722396519114, 0.11931523644989761, 0.054421213753572006, 0.12120729001229413, 0.6814165483538873, 0.6131101464886966, 0.8089612666173223, 0.6334639608345536, 0.7824895908541665, 0.7052702299096434, 0.66940718744978, 0.685477625296563, 0.6713140021037673, 0.07576047386297813, 0.1356950325800097, 0.09732348882258901, 0.1452657968489779, 0.12482092548232648, 0.12480089426657937, 0.16121056966504166, 0.1591033857087456, 0.12111913269128527, 0.1873735484441449, 0.14961595469568656, 0.20884007422040374, 0.28308466964784984, 0.20378696320963519, 0.1877212804961399, 0.2436104207992562, 0.1482266595662508, 0.2802408322428811, 0.3423904053568476, 0.2533254878278721, 0.36809344032324476, 0.3215719213484469, 0.3265668661526836, 0.4188644995462216, 0.294370114587009, 0.3431559401720855, 0.20548369022099744, 0.23130735934203683, 0.24577418618098124, 0.189848934625382, 0.19088354698564214, 0.24008779128631852, 0.2708226727936415, 0.234386334267929, 0.3035957871033076, 0.3211648006702489, 0.25938119886484723, 0.21340291432720981, 0.2471836728943999, 0.2043178637964227, 0.22750505687475364, 0.28333398210115424, 0.23124985393802888, 0.22724514700752318, 0.2791588549761358, 0.18773896033969473, 0.2489488790702098, 0.22619846876798388, 0.21322529514656696, 0.21791112111398292, 0.19354924885027924, 0.2107341862356441, 0.19910576039871308, 0.2263539288725247, 0.9510557617309329, 0.12615270189326, 0.15446200958798906, 0.9007373771928001, 0.2009969227532753, 0.16984944344783037, 0.9190673600768287, 0.16485904228053327, 0.17918253512759674, 0.9252994976454649, 0.21274599793318816, 0.9157975423039947, 0.1670045218268399, 0.8652132343404066, 0.16987310212996332, 0.891674042921553, 0.10472378680328542, 0.21349215116334797, 0.20356350517278743, 0.21161501812427475, 0.22430407498741511, 0.21013802377446988, 0.22426942098738123, 0.22664606232924966, 0.24355490729774099, 0.2423312360533787, 0.23780216689527778, 0.11259722398295491, 0.08304391681398737, 0.08676160574423697, 0.10213683292554399, 0.10144542364724551, 0.09716809876711863, 0.097377831522525, 0.10944218410147621, 0.08654112594314989]}, "mutation_prompt": null}
{"id": "ec50a278-377e-47c1-aa52-9a5dac5785e3", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "e48ea2f7-5028-4243-9664-5430e9193d21", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "ea6e8521-d92e-4147-9b6a-5faa6f98dd7a", "solution": "import numpy as np\n\nclass APSO_QID:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.population_size = 10 * dim\n        self.inertia_weight = 0.9\n        self.cognitive_const = 2.0\n        self.social_const = 2.0\n        self.qubit_prob = 0.2\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        velocities = np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound) * 0.1\n        personal_best_positions = np.copy(population)\n        personal_best_fitness = np.apply_along_axis(func, 1, personal_best_positions)\n        self.evaluations = self.population_size\n\n        global_best_idx = np.argmin(personal_best_fitness)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_fitness = personal_best_fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update velocities with adaptive inertia\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_const * r1 * (personal_best_positions[i] - population[i]) +\n                                 self.social_const * r2 * (global_best_position - population[i]))\n\n                # Quantum-inspired position update\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(self.population_size)\n                    x1, x2 = population[indices[:2]]\n                    direction = np.random.choice([-1, 1], self.dim)\n                    new_position = global_best_position + direction * np.abs(x1 - x2)\n                else:\n                    new_position = population[i] + velocities[i]\n\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_fitness = func(new_position)\n                self.evaluations += 1\n\n                # Update personal and global bests\n                if new_fitness < personal_best_fitness[i]:\n                    personal_best_positions[i] = new_position\n                    personal_best_fitness[i] = new_fitness\n\n                    if new_fitness < global_best_fitness:\n                        global_best_position = new_position\n                        global_best_fitness = new_fitness\n\n            # Adaptive inertia weight decay\n            self.inertia_weight = max(0.4, self.inertia_weight * 0.99)\n\n        return global_best_position, global_best_fitness", "name": "APSO_QID", "description": "Adaptive Particle Swarm Optimization with Quantum-Inspired Dynamics (APSO-QID) that integrates adaptive velocity control and quantum-inspired position updates for efficient search.", "configspace": "", "generation": 91, "fitness": 0.11744159449024352, "feedback": "The algorithm APSO_QID got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.20244465945194778, 0.14690510643445087, 0.18228034636365087, 0.1693809136671922, 0.1656614539434924, 0.1713917910883047, 0.16192246603728888, 0.15180088199559505, 0.16594901994141076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03670895821715914, 0.024003833168267374, 0.05493560022794319, 0.03309726681896741, 0.03512906025178841, 0.037823515082314185, 0.028133620106650548, 0.02629702827186342, 0.041987300813154604, 0.02406220378213364, 0.025263756870363197, 0.017704117931147678, 0.03902156569971971, 0.025140166236605865, 0.036320067545556056, 0.026056206457366393, 0.010751562282192428, 0.016203616222107642, 0.9915398811754115, 0.990256857164313, 0.9911215776067013, 0.9915093747769285, 0.9896184779859216, 0.9865707953611316, 0.9895185983484454, 0.9916783501238682, 0.9894686803276909, 0.0639682508012207, 0.08875722286946297, 0.06220867192380608, 0.08939596743712741, 0.05082911289092917, 0.0911544921072942, 0.07882933618942556, 0.06365040211011108, 0.0752286079026735, 0.12912275377421123, 0.10522472621808321, 0.12632523753204694, 0.10036631486745973, 0.11165561391876855, 0.12602813741656393, 0.09278976065878519, 0.1284733441438568, 0.07752028630703733, 0.04125622898886672, 9.999999999998899e-05, 0.00017037342033343617, 0.022950801450955072, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0051792491062889745, 0.009330507246077868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01510255394060711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028863782082933165, 0.008346335201819821, 0.06257898128324302, 0.028650992652231255, 0.002541064244422908, 0.000624315863713143, 0.008529825682791703, 0.0480011519940885, 0.036240917022232644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1724932908627126, 0.16691454325016764, 0.2018448952378461, 0.1815784931048463, 0.18026822616296123, 0.18656525589365158, 0.19168882833857792, 0.15636347468493172, 0.180425491106044, 0.03608458606301779, 0.05567642067159373, 0.04534633626909346, 0.03547196097657379, 0.02109359639060837, 0.03675033595479016, 0.050229819382555996, 0.03565982821343294, 0.042650179760696294, 0.1323572483532438, 0.14764887446351127, 0.1375886126298157, 0.15764961035282354, 0.13542301207602614, 0.1737915343608114, 0.13327977489561182, 0.1231241088285735, 0.1337054552135849, 0.15231392628771412, 0.15735986720064898, 0.1835556723522993, 0.16592867244220577, 0.13637873068381268, 0.14623035012326813, 0.16412261597685884, 0.17872811600605998, 0.15454018718303486, 0.10874499499741874, 0.08375880040141659, 0.11336761228826797, 0.08505753813895167, 0.08246423563054972, 0.09764042954850427, 0.10344171484528619, 0.12643973063137748, 0.09301625807557778, 0.14021133038790212, 0.12790961724480254, 0.15567537292012334, 0.13547571677701276, 0.1440958483946463, 0.11949983237907147, 0.149466091765027, 0.12315009944068, 0.13077782867340193, 0.13954531399850334, 0.1428527264282271, 0.1563936204413774, 0.15076718024828462, 0.058819829854082295, 0.1518172139181776, 0.14162222730919016, 0.10816872015199042, 0.11139140773933509, 0.14237031193368765, 0.15822675521433538, 0.11270723164092655, 0.1294761135942748, 0.17750799217143454, 0.10582181323654094, 0.11619455301208492, 0.11362607424622817, 0.18823948724376371, 0.1267506374790759, 0.1480576702613573, 0.12498801930524572, 0.09358872575012378, 0.10078254222092142, 0.08109656017337785, 0.16792058298909318, 0.17001010537921446, 0.16868946627260573, 0.19025670363642688, 0.17333809962597058, 0.18266479935515612, 0.17569217807791415, 0.1810700289587397, 0.18007781667854228, 0.17034930806704174, 0.17444333784697297, 0.18661415600262887, 0.0516488278942181, 0.0320780090360433, 0.04140148381990838, 0.042816376201398776, 0.04339435192949437, 0.04202412457406879, 0.05050888072103299, 0.03803354422653826, 0.060160519704504756]}, "mutation_prompt": null}
{"id": "7d694b22-c9e2-4e18-a256-21da4eb737f7", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "e712c633-a10a-42ff-9cc8-23456bdd10b3", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "5947469a-005e-4afb-89a9-14efac6baf60", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "619ef0b9-4abe-47c8-912f-22de537576df", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "0f5569aa-c6b7-427c-965d-7e98eeaa885c", "solution": "import numpy as np\n\nclass APSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.swarm_size = 20 * dim\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        swarm_position = self.lower_bound + np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound)\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, swarm_position)\n        self.evaluations = self.swarm_size\n\n        personal_best_position = np.copy(swarm_position)\n        personal_best_fitness = np.copy(fitness)\n\n        global_best_idx = np.argmin(fitness)\n        global_best_position = np.copy(swarm_position[global_best_idx])\n        global_best_fitness = fitness[global_best_idx]\n\n        while self.evaluations < self.budget:\n            w = self.w_max - (self.evaluations / self.budget) * (self.w_max - self.w_min)\n            \n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                swarm_velocity[i] = (w * swarm_velocity[i] +\n                                     self.c1 * r1 * (personal_best_position[i] - swarm_position[i]) +\n                                     self.c2 * r2 * (global_best_position - swarm_position[i]))\n                \n                swarm_position[i] += swarm_velocity[i]\n                swarm_position[i] = np.clip(swarm_position[i], self.lower_bound, self.upper_bound)\n\n                current_fitness = func(swarm_position[i])\n                self.evaluations += 1\n\n                if current_fitness < personal_best_fitness[i]:\n                    personal_best_position[i] = swarm_position[i]\n                    personal_best_fitness[i] = current_fitness\n\n                    if current_fitness < global_best_fitness:\n                        global_best_position = swarm_position[i]\n                        global_best_fitness = current_fitness\n\n        return global_best_position, global_best_fitness", "name": "APSO", "description": "Adaptive Particle Swarm Optimization (APSO) with dynamic inertia weight for balancing exploration and exploitation in black box optimization.", "configspace": "", "generation": 96, "fitness": 0.1657958810048212, "feedback": "The algorithm APSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.3293607170353512, 0.3014706265499467, 0.28633764292002617, 0.330514393937436, 0.324819127864607, 0.33472913163565976, 0.3276588086709431, 0.3812435561325117, 0.3554380284991304, 0.015012031105869572, 0.00684549764558684, 0.0031728277340327127, 0.01289070645485213, 0.008447828945494673, 0.017871290225209502, 0.010841226388445646, 0.0032050273500930926, 0.016467631333464294, 0.0999102665522692, 0.0999674939673032, 0.0838920159076404, 0.07763866002738395, 0.07922775140096694, 0.08483054363954357, 0.07058156442708008, 0.06968488261648431, 0.06969158949267107, 0.059822218919141634, 0.0685491022335264, 0.05786257111032955, 0.05362059770669425, 0.07649787005689102, 0.06800740988713427, 0.06223854107289062, 0.05872640801624984, 0.07758429093791952, 0.9833505100086488, 0.9828340491504395, 0.9837079975510106, 0.9840272352145768, 0.9853610043039805, 0.9812515476381232, 0.9833288256039885, 0.9855288546973303, 0.9808699481623677, 0.1557399550046994, 0.14734813770570077, 0.14160584830603906, 0.14860135638914018, 0.13891802869451209, 0.13971904646300082, 0.0941903021751439, 0.1677865948984676, 0.08806210921615987, 0.2649847045278947, 0.16604289555548546, 0.19504559465533122, 0.18270735998062226, 0.15584857997532586, 0.1631216888987237, 0.13645986198618687, 0.1975797022632274, 0.2398060666036047, 0.07150158520093286, 0.09265232730203499, 0.09031632432030434, 0.0722649362680351, 0.06323720503847252, 0.07577539067576256, 0.09609115375804977, 0.08652212570269835, 0.09846707178774017, 0.10749615528546508, 0.0442026069798771, 0.09489952603595952, 0.061036131824935946, 0.11701103478666575, 0.07868386061936306, 0.08453683579971605, 0.06697699693525683, 0.06550652861556516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034826246714014797, 9.999999999998899e-05, 0.013097327343566167, 9.999999999998899e-05, 0.04632697688265741, 0.03358233740461569, 0.05861589268205569, 0.09355188853597829, 0.013450975959203637, 0.009494187969623646, 0.02777336063922098, 0.024344852587355637, 0.002884521241829141, 0.0016230932500073125, 0.009553949169674558, 0.024090727847548066, 0.0005504907766004097, 0.0002600847396930783, 0.0011648331119363808, 9.999999999998899e-05, 0.00012305129187262231, 0.004208362206943983, 0.06897690111740418, 0.04239525801005184, 0.021515608314034984, 0.018699654083347506, 0.021963249935515128, 0.03029765483016622, 0.03505549686773979, 0.04168344378260258, 0.03521558771081912, 0.275421834633367, 0.30587021302714257, 0.3116545740910719, 0.27322878843275744, 0.3091470071177902, 0.3273258672575583, 0.30171767539282146, 0.27729037705788984, 0.31675006594769006, 0.09696584119788199, 0.07203862847145304, 0.07238460056764273, 0.07356242060779039, 0.07674184869684064, 0.07377607216876769, 0.07183495260502437, 0.06556254155061869, 0.06976426436322691, 0.14907834012365218, 0.15555879005415696, 0.18418423123632943, 0.1807332439385051, 0.19738808186671453, 0.142887886533971, 0.13925681505176601, 0.1389676543676024, 0.1667507087042941, 0.19490938221797316, 0.21721513162448214, 0.21558966297085513, 0.21322005856628312, 0.1901689575506359, 0.23183535046177484, 0.18398685385710667, 0.2690914209714498, 0.22668213157866524, 0.16998758346794074, 0.1410933667638936, 0.14842899965400724, 0.136091786704852, 0.14072183184327747, 0.18250807751147913, 0.15605777452394176, 0.16499692339442484, 0.1499196693774527, 0.17251160065473725, 0.18729709893312763, 0.16112179185890962, 0.17507415468349408, 0.16571273315406565, 0.20942568025684105, 0.1844546043070201, 0.16618861667791496, 0.18048217090162866, 0.15417546025248863, 0.17463440335936375, 0.1697975436565048, 0.2045322028526385, 0.18049665256763836, 0.170027746263404, 0.1621768329382468, 0.160732344661222, 0.18339316898626035, 0.14411924013061872, 0.18186496110498285, 0.3387331885372983, 0.14077947526918777, 0.1808573362253364, 0.16052897645083863, 0.16181572852832238, 0.1425062658228884, 0.370283344674748, 0.3215582714982448, 0.1575132525655959, 0.24465430956974965, 0.27291424435578016, 0.24077989175620795, 0.29041069808794695, 0.14122198451782497, 0.19061970944011486, 0.19038537649727683, 0.18351154603503494, 0.1829041873948266, 0.18310477395964952, 0.22060897545618485, 0.20629138110114875, 0.20255177115608536, 0.1738554056365399, 0.18126476395215296, 0.18631193116279754, 0.06694990608328555, 0.05869509018186558, 0.06428592128060895, 0.06065576274179707, 0.06162811368818111, 0.07785827676488877, 0.07224431270700038, 0.06719416443526294, 0.06255115147422785]}, "mutation_prompt": null}
{"id": "2afe856d-6aa5-4e30-ac09-4081c5a05dee", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
{"id": "451f3793-f146-4dda-aa6f-1012b48cb2cf", "solution": "import numpy as np\n\nclass GAMBS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.8\n        self.memory_factor = 0.3\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n        historical_population = population.copy()\n\n        while self.evaluations < self.budget:\n            new_population = []\n            for _ in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Tournament selection\n                indices = np.random.choice(population_size, 3, replace=False)\n                parent1, parent2 = population[indices[:2]], population[indices[1:]]\n                \n                # Crossover\n                if np.random.rand() < self.crossover_rate:\n                    crossover_point = np.random.randint(1, self.dim)\n                    offspring = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))\n                else:\n                    offspring = parent1.copy()\n\n                # Adaptive mutation based on historical data\n                if np.random.rand() < self.mutation_rate:\n                    mutation_scale = self.memory_factor * np.std(historical_population, axis=0)\n                    mutation_vector = np.random.normal(0, mutation_scale, self.dim)\n                    offspring += mutation_vector\n                    offspring = np.clip(offspring, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(offspring)\n                self.evaluations += 1\n\n                if trial_fitness < best_fitness:\n                    best_individual = offspring\n                    best_fitness = trial_fitness\n\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            fitness = np.apply_along_axis(func, 1, population)\n\n            # Store the best solutions into historical memory\n            historical_population = np.vstack((historical_population, population))\n            historical_population = historical_population[np.argsort(np.apply_along_axis(func, 1, historical_population))[:population_size]]\n\n        return best_individual, best_fitness", "name": "GAMBS", "description": "Genetic Algorithm with Adaptive Memory-Based Search (GAMBS) leveraging historical population data and adaptive mutation for robust optimization.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {}, "mutation_prompt": null}
{"id": "4c4ac371-9240-4cb4-94f4-5c492b25c9e2", "solution": "import numpy as np\n\nclass QIDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evaluations = 0\n        self.base_pop_size = 10 * dim\n        self.qubit_prob = 0.5  # Probability of quantum exploration\n        self.scale_factor = 0.7\n        self.crossover_prob = 0.85\n\n    def __call__(self, func):\n        population_size = self.base_pop_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        self.evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best_individual = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Quantum-inspired mutation\n                if np.random.rand() < self.qubit_prob:\n                    indices = np.random.permutation(population_size)\n                    x1, x2 = population[indices[:2]]\n                    mutant_vector = best_individual + self.scale_factor * (x1 - x2)\n                else:\n                    indices = np.random.permutation(population_size)\n                    x1, x2, x3 = population[indices[:3]]\n                    mutant_vector = x1 + self.scale_factor * (x2 - x3)\n\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                # Quantum crossover\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover, mutant_vector, population[i])\n\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_individual = trial_vector\n                        best_fitness = trial_fitness\n\n            if self.evaluations % (self.base_pop_size // 2) == 0:\n                population_size = max(4, int(population_size * 0.9))\n                population = population[np.argsort(fitness)[:population_size]]\n                fitness = fitness[np.argsort(fitness)[:population_size]]\n\n        return best_individual, best_fitness", "name": "QIDE", "description": "Quantum-Inspired Differential Evolution (QIDE) leveraging quantum bits and superposition principles for enhanced exploration in optimization.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86efa2e8-0a26-4df5-8db7-e677e128eedd", "metadata": {"aucs": [0.8764652961195284, 0.8772256079445255, 0.8626237710204503, 0.8811114175926652, 0.888835796336157, 0.8757481024461528, 0.8847615175997109, 0.8748810051231152, 0.8824699020539437, 0.7793968811712152, 0.7963424419553224, 0.7868463067272442, 0.7861293097007802, 0.7884470593935382, 0.7705748175191561, 0.7886531310113183, 0.790513621816878, 0.7864220920699732, 0.1380026311696263, 0.15673260662507693, 0.13449352197464637, 0.16246200715408143, 0.14917854856672985, 0.1713140655450508, 0.17163833464050227, 0.13198214778986617, 0.13414466942606718, 0.16800432861348313, 0.11298187209201516, 0.11610142599999929, 0.13389065414399504, 0.137108508441235, 0.1643161718914392, 0.13903836226120225, 0.1317127428464352, 0.12428471337314673, 0.9892983599698584, 0.9856226028170502, 0.9864568828259425, 0.9781174795779155, 0.9854079004294342, 0.9915507018816606, 0.9813722661475326, 0.9855696379264833, 0.9867772650954697, 0.6950333976760188, 0.7031736027677175, 0.7048012143524514, 0.7130690601694831, 0.7245481957326596, 0.7458458360129713, 0.70917071379365, 0.7385127523739652, 0.7283736077159049, 0.8298703280017375, 0.8570209882456692, 0.8233868539313858, 0.8448920204350292, 0.8552455166651433, 0.84430791600944, 0.8095402664161346, 0.8789338411859728, 0.831090413383844, 0.6836396142600101, 0.7257737464532117, 0.12231878742890345, 0.6759907767988107, 0.686233061106372, 0.6992944879413212, 0.6734421456452572, 0.6698862096570329, 0.6936010434204719, 0.021941261611493235, 0.12989623738849498, 0.7190934859120792, 0.7114182960408997, 0.6898141774768678, 0.7267899012539949, 0.6655106471975671, 0.6771720461168622, 0.6956483370455271, 0.4290643175706441, 0.5917427973968369, 0.3643117053691223, 0.600222475790077, 0.5342785684463798, 0.44376384824952375, 0.5232936658401275, 0.6821985629827488, 0.18651280177537666, 0.6898675098785835, 0.710287461411337, 0.6423366500190338, 0.6355751434300281, 0.5098851908349631, 0.699712025715707, 0.7067864112449481, 0.6984967347357667, 0.7241966323759106, 0.11170246623925961, 0.18765524900880948, 0.1776491983365902, 0.1262333714970587, 0.196670063517268, 0.4281257638451197, 0.3330106554453406, 0.32001807700838525, 0.17111444877790982, 0.332141291402251, 0.4719279348066291, 0.41215901812483957, 0.4788726856156056, 0.40283236725525184, 0.43490560546711454, 0.3859791440932817, 0.3769276005428831, 0.47840075361523027, 0.8234976450224014, 0.8112180577448443, 0.8128789655948108, 0.7635893451645018, 0.7355684546546355, 0.7129669768755271, 0.7073270458723198, 0.7996202779373971, 0.7280846364726561, 0.09515160965285063, 0.13488150566692525, 0.1111359187250337, 0.12978696913281096, 0.12623598108112744, 0.09992867028033814, 0.08575366706611276, 0.12363741311723897, 0.10433232271379334, 0.11957267317305653, 0.25596923270903804, 0.25436895277653415, 0.3180564647710624, 0.1811389378130409, 0.13864602528832437, 0.13879185541718453, 0.15225077358045114, 0.248706263223616, 0.6348437249975096, 0.4986729615887141, 0.5921545565530285, 0.47287862897724375, 0.49864574264831774, 0.5889772816135226, 0.5510261099548488, 0.7001573128743823, 0.6040652757929303, 0.41938553104389, 0.37449929643657465, 0.4151851648051431, 0.35584373023827764, 0.40322626869188094, 0.4167155100638247, 0.5361375755043802, 0.4771506972182513, 0.38414284958890477, 0.1897220012781703, 0.1773094472968263, 0.20024155584937342, 0.20102652709269764, 0.1948452466403836, 0.19832235705083, 0.20569070583859106, 0.21431742779636687, 0.21594109275288176, 0.2190311437040532, 0.24241980581928146, 0.7408092474115764, 0.6834132499297594, 0.7345270017198389, 0.23554063352963195, 0.23167562443833234, 0.2378110254621667, 0.2142646874333196, 0.1647671803799352, 0.16481712189343323, 0.1540950937088975, 0.17326623380606454, 0.8591086703759189, 0.8321309808926147, 0.1697892389625396, 0.8117812459235227, 0.744092504397884, 0.8612177536935899, 0.16654010895263616, 0.1259640363991824, 0.20629033563496746, 0.20785568450887282, 0.8374309820277679, 0.2100531691837868, 0.15457584048742834, 0.2028730866171482, 0.19365270801022716, 0.17772689378839823, 0.18823260139990494, 0.19734250523924313, 0.20217709242761062, 0.16847606141482707, 0.19978640435314043, 0.15365101333542075, 0.17350452384686055, 0.07102030773850543, 0.09147682680648528, 0.06516053402082511, 0.0873836664456007, 0.07694565591680436, 0.08232469911888651, 0.06917599829174947, 0.08560057582490066, 0.08263194819226449]}, "mutation_prompt": null}
