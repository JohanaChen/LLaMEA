{"id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.quantum_factor = quantum_factor\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that utilizes quantum mechanics principles to enhance particle swarm optimization for black box optimization tasks.", "configspace": "", "generation": 0, "fitness": 0.19585317511669106, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3707993836332991, 0.36288418195612426, 0.36256174898332705, 0.37644375576146594, 0.34823775259145995, 0.35093729175013255, 0.35662114256919475, 0.3693849442520676, 0.3508670078394267, 0.032533702811574416, 0.01827464854329408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017461471249735072, 0.01000535842272443, 9.999999999998899e-05, 0.08422618627269018, 0.10934584176987316, 0.13332140477359622, 0.1137451995739086, 0.11826944847387444, 0.0952339704880073, 0.08008832403475519, 0.13169574298061237, 0.07767080752835731, 0.09025079527558233, 0.08576398103863192, 0.07633198925254037, 0.09370229680505071, 0.08578687035732202, 0.10963481687350429, 0.10590356278915847, 0.08711209345184179, 0.10466923305086262, 0.9904282105333916, 0.9913153955923232, 0.9922487373734183, 0.9897178332085891, 0.9905235514927733, 0.9873232848954681, 0.989703886113354, 0.9906588004157855, 0.9879632642871543, 0.23976989824993378, 0.22797251874332602, 0.22093204771758967, 0.21523443477181636, 0.23125217887692973, 0.25248753169645577, 0.2319807413943369, 0.23178539337892456, 0.22440667760519684, 0.25852071302451374, 0.23090644276864603, 0.29402903482444775, 0.23104019586276936, 0.2631528862297312, 0.23731649887396267, 0.26274190946518483, 0.27713940829060535, 0.2911725075337661, 0.14266801955977315, 0.149856431343795, 0.15365148921886596, 0.11697334422860517, 0.15085816007418928, 0.12851137638953258, 0.1544260378829957, 0.13996473015699085, 0.127238278982424, 0.13756075354420738, 0.14789370026836912, 0.1429555008938389, 0.142156895306069, 0.11072414616230253, 0.1325537674773406, 0.06154174997032136, 9.999999999998899e-05, 0.126308599535515, 9.999999999998899e-05, 9.999999999998899e-05, 0.02746312011566554, 0.006566893060816592, 9.999999999998899e-05, 0.001234633708396049, 9.999999999998899e-05, 9.999999999998899e-05, 0.008472590731497975, 0.13888615496068402, 0.03782285118066897, 0.11482093657785064, 0.10306770911931762, 0.012851120070916267, 0.018352604788084315, 0.07041491374854503, 0.053876280423193035, 0.05748240453961839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05989840249672029, 0.06787604174211015, 0.06427168587455212, 0.06760733207101, 0.06686880009182317, 0.08771811921287576, 0.07527768720849959, 0.067789640977307, 0.0689090490833183, 0.36355299445908107, 0.3500399819747657, 0.3611779496372265, 0.36355375768904263, 0.34804520820789875, 0.3500054096238425, 0.347068946099955, 0.3480505230944708, 0.3741749049716465, 0.09430670398509133, 0.09563213854906893, 0.10585046187527536, 0.10546884817781943, 0.08188528286571961, 0.10848780884537768, 0.09879134889419261, 0.12379433693598185, 0.10281426418723183, 0.19803368672908062, 0.20373859408992356, 0.13308144588974424, 0.22401909154114819, 0.22087163969446844, 0.182698854897282, 0.2275968209835424, 0.14458968634795788, 0.2060118427584221, 0.27273947492687634, 0.2561258302255014, 0.2605047574639401, 0.26470248775711436, 0.25913215823436464, 0.2445933055130305, 0.25695215058231446, 0.264750700730361, 0.26062821268717606, 0.21808931014497024, 0.1887994640854589, 0.19533407920586965, 0.15397375958501303, 0.20027815153968886, 0.20678563362849223, 0.19064802701072292, 0.19512364569999807, 0.19709664907468483, 0.21523436225925185, 0.19234543342670685, 0.20927505673947644, 0.20853509424438654, 0.21081689952910243, 0.22029239105456777, 0.20383626797029042, 0.2232429446758062, 0.18630021431115873, 0.1777068915434118, 0.18571812919724562, 0.20159399491474672, 0.18218900701251428, 0.1813618298562718, 0.19006053992615302, 0.17616401765911938, 0.18571802018149763, 0.18769346778298146, 0.44617258916790525, 0.1666895507821866, 0.15384176611455647, 0.45433049766896205, 0.19922494432443993, 0.1975763404795583, 0.11297521442373304, 0.1704136429727391, 0.48650494238015407, 0.47545228909963566, 0.15616881520997772, 0.07323609661021169, 0.20865784349200256, 0.16911866958848898, 0.20846173059186845, 0.1050014028763, 0.10512456336251852, 0.4356634851694644, 0.18355766603534618, 0.18120461233072105, 0.19461993132146327, 0.19210129027720568, 0.1781384676677491, 0.2001721666262466, 0.1867414295669021, 0.17483894137230405, 0.18049206372007554, 0.09781719899738217, 0.08420244349208028, 0.08286035563685912, 0.08814406554616339, 0.09742822873190615, 0.09183373945552886, 0.10526582219602754, 0.08903797441860883, 0.09666925895948475]}, "mutation_prompt": null}
{"id": "a8baed42-0a3e-45c8-8497-1be8fb4af4bf", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, inertia_decay=0.99):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.inertia_decay = inertia_decay\n\n    def __call__(self, func):\n        particles = self.initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_weight * self.inertia_decay ** t\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Improved Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm with dynamic inertia weight to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedQIPSO' object has no attribute 'initialize_particles'\").", "error": "AttributeError(\"'ImprovedQIPSO' object has no attribute 'initialize_particles'\")", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {}, "mutation_prompt": null}
{"id": "7c23652b-8fa9-4e6f-be86-e70507151538", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.min_inertia = 0.1\n        self.max_inertia = 0.9\n\n    def __call__(self, func):\n        def adapt_inertia(iteration):\n            return self.min_inertia + (self.max_inertia - self.min_inertia) * (self.budget - iteration) / self.budget\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for iter_count in range(self.budget):\n            inertia = adapt_inertia(iter_count)\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Improved Quantum-Inspired Particle Swarm Optimization (QIPSO) with dynamic inertia weight adjustment for enhanced exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_particles' is not defined\").", "error": "NameError(\"name 'initialize_particles' is not defined\")", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {}, "mutation_prompt": null}
{"id": "7df2ce24-6b9d-4f5e-a2d3-4506cb03e54a", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.quantum_factor = quantum_factor\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that utilizes quantum mechanics principles to enhance particle swarm optimization for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {"aucs": [0.3707993836332991, 0.36288418195612426, 0.36256174898332705, 0.37644375576146594, 0.34823775259145995, 0.35093729175013255, 0.35662114256919475, 0.3693849442520676, 0.3508670078394267, 0.032533702811574416, 0.01827464854329408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017461471249735072, 0.01000535842272443, 9.999999999998899e-05, 0.08422618627269018, 0.10934584176987316, 0.13332140477359622, 0.1137451995739086, 0.11826944847387444, 0.0952339704880073, 0.08008832403475519, 0.13169574298061237, 0.07767080752835731, 0.09025079527558233, 0.08576398103863192, 0.07633198925254037, 0.09370229680505071, 0.08578687035732202, 0.10963481687350429, 0.10590356278915847, 0.08711209345184179, 0.10466923305086262, 0.9904282105333916, 0.9913153955923232, 0.9922487373734183, 0.9897178332085891, 0.9905235514927733, 0.9873232848954681, 0.989703886113354, 0.9906588004157855, 0.9879632642871543, 0.23976989824993378, 0.22797251874332602, 0.22093204771758967, 0.21523443477181636, 0.23125217887692973, 0.25248753169645577, 0.2319807413943369, 0.23178539337892456, 0.22440667760519684, 0.25852071302451374, 0.23090644276864603, 0.29402903482444775, 0.23104019586276936, 0.2631528862297312, 0.23731649887396267, 0.26274190946518483, 0.27713940829060535, 0.2911725075337661, 0.14266801955977315, 0.149856431343795, 0.15365148921886596, 0.11697334422860517, 0.15085816007418928, 0.12851137638953258, 0.1544260378829957, 0.13996473015699085, 0.127238278982424, 0.13756075354420738, 0.14789370026836912, 0.1429555008938389, 0.142156895306069, 0.11072414616230253, 0.1325537674773406, 0.06154174997032136, 9.999999999998899e-05, 0.126308599535515, 9.999999999998899e-05, 9.999999999998899e-05, 0.02746312011566554, 0.006566893060816592, 9.999999999998899e-05, 0.001234633708396049, 9.999999999998899e-05, 9.999999999998899e-05, 0.008472590731497975, 0.13888615496068402, 0.03782285118066897, 0.11482093657785064, 0.10306770911931762, 0.012851120070916267, 0.018352604788084315, 0.07041491374854503, 0.053876280423193035, 0.05748240453961839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05989840249672029, 0.06787604174211015, 0.06427168587455212, 0.06760733207101, 0.06686880009182317, 0.08771811921287576, 0.07527768720849959, 0.067789640977307, 0.0689090490833183, 0.36355299445908107, 0.3500399819747657, 0.3611779496372265, 0.36355375768904263, 0.34804520820789875, 0.3500054096238425, 0.347068946099955, 0.3480505230944708, 0.3741749049716465, 0.09430670398509133, 0.09563213854906893, 0.10585046187527536, 0.10546884817781943, 0.08188528286571961, 0.10848780884537768, 0.09879134889419261, 0.12379433693598185, 0.10281426418723183, 0.19803368672908062, 0.20373859408992356, 0.13308144588974424, 0.22401909154114819, 0.22087163969446844, 0.182698854897282, 0.2275968209835424, 0.14458968634795788, 0.2060118427584221, 0.27273947492687634, 0.2561258302255014, 0.2605047574639401, 0.26470248775711436, 0.25913215823436464, 0.2445933055130305, 0.25695215058231446, 0.264750700730361, 0.26062821268717606, 0.21808931014497024, 0.1887994640854589, 0.19533407920586965, 0.15397375958501303, 0.20027815153968886, 0.20678563362849223, 0.19064802701072292, 0.19512364569999807, 0.19709664907468483, 0.21523436225925185, 0.19234543342670685, 0.20927505673947644, 0.20853509424438654, 0.21081689952910243, 0.22029239105456777, 0.20383626797029042, 0.2232429446758062, 0.18630021431115873, 0.1777068915434118, 0.18571812919724562, 0.20159399491474672, 0.18218900701251428, 0.1813618298562718, 0.19006053992615302, 0.17616401765911938, 0.18571802018149763, 0.18769346778298146, 0.44617258916790525, 0.1666895507821866, 0.15384176611455647, 0.45433049766896205, 0.19922494432443993, 0.1975763404795583, 0.11297521442373304, 0.1704136429727391, 0.48650494238015407, 0.47545228909963566, 0.15616881520997772, 0.07323609661021169, 0.20865784349200256, 0.16911866958848898, 0.20846173059186845, 0.1050014028763, 0.10512456336251852, 0.4356634851694644, 0.18355766603534618, 0.18120461233072105, 0.19461993132146327, 0.19210129027720568, 0.1781384676677491, 0.2001721666262466, 0.1867414295669021, 0.17483894137230405, 0.18049206372007554, 0.09781719899738217, 0.08420244349208028, 0.08286035563685912, 0.08814406554616339, 0.09742822873190615, 0.09183373945552886, 0.10526582219602754, 0.08903797441860883, 0.09666925895948475]}, "mutation_prompt": null}
{"id": "85ca4c07-34c3-4d51-98e2-b6bd3f7b4cea", "solution": "import numpy as np\n\nclass ImprovedQIPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.quantum_factor = quantum_factor\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                r1, r2 = np.random.rand(), np.random.rand()\n                inertia_weight = self.inertia_weight + 0.1 * (r1 - 0.5)\n                cognitive_weight = self.cognitive_weight + 0.1 * (r2 - 0.5)\n                velocities[i] = inertia_weight * velocities[i] + cognitive_weight * cognitive_component + self.social_weight * social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Improved Quantum-Inspired Particle Swarm Optimization (QIPSO) with dynamic adaptation of algorithm parameters to enhance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": 0.17178725986003648, "feedback": "The algorithm ImprovedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {"aucs": [0.3146331479608282, 0.31182963273564646, 0.32238568921001665, 0.3314205738622532, 0.29940513070999775, 0.3178073381061338, 0.2959788394116315, 0.3406260644127266, 0.34652627523618706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07650822585530603, 0.07577110208109539, 0.08058218657875438, 0.07514600340645539, 0.07281621668368266, 0.07586427983025057, 0.08115123980980532, 0.08319074581056651, 0.08491136717847225, 0.062130650309470736, 0.08589186175251029, 0.06673855015245012, 0.06629855419692487, 0.047761697215612964, 0.06863828018171192, 0.06177374839357763, 0.07721668077009869, 0.07129088827071006, 0.9924886280217011, 0.9944672223983096, 0.9938738070383101, 0.9930791693004547, 0.9936217960208259, 0.9943184433679038, 0.9949712881526485, 0.9937144598939645, 0.9943766296534886, 0.1675419885275522, 0.17301771450687542, 0.1705810941137239, 0.19677362337203108, 0.17989509178211371, 0.2152918861420322, 0.17457141609468452, 0.17154776402359817, 0.17298520281281327, 0.20049189799900557, 0.16398869547223827, 0.22303149853169424, 0.2153432097205742, 0.20441125498267876, 0.20095798991530367, 0.25542904599779026, 0.176252831210023, 0.18580765904257202, 0.12290332864400444, 0.10975659406807559, 0.09229811238696817, 0.09293185583003394, 0.11721500482322122, 0.11814172556720093, 0.0999546300241182, 0.09632537744244396, 0.09683909704240978, 0.0929713202279796, 0.08082723699299399, 0.09507931502479028, 0.09025763030258804, 0.10379576720685946, 0.08448920969042173, 0.1146001411156572, 0.037465290142774776, 0.09134126429305178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016603827236016944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04164044537656775, 0.03646239113078331, 0.039410099397645726, 0.09085204478444886, 0.008231710501916178, 9.999999999998899e-05, 0.05450270916314626, 0.03074252405530009, 0.044959669559827886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04995815323051955, 0.02277961343479107, 0.03667317499992262, 0.02549114657596896, 0.03521043479523578, 0.04424140687000022, 0.033283033407645046, 0.03948844640036897, 0.03985499438367457, 0.2929240647102591, 0.2864126790098417, 0.2960975830598148, 0.32672996897214956, 0.295065445630765, 0.2948113623126215, 0.315397935793135, 0.3072452582043277, 0.2832556995813357, 0.07343958129996009, 0.08543210492091735, 0.08470416988300988, 0.08289816587801069, 0.07340735992803005, 0.1013439464748842, 0.06273947362920806, 0.06391737701663058, 0.0823018642981801, 0.16685749188356458, 0.16567918194385134, 0.13027439925131878, 0.16610573703261466, 0.1727915514970908, 0.1682448938401967, 0.1652410956146938, 0.1548827859049785, 0.21280829881070262, 0.2226037300043524, 0.22316292830487372, 0.208103295245738, 0.19919389570468637, 0.218772089554657, 0.22931147583802658, 0.23401683583870259, 0.22418988565013276, 0.2301852806321567, 0.16084178280563288, 0.1616737536818852, 0.14554327765517117, 0.09990707263950849, 0.16886039768117866, 0.16732626260182437, 0.17290404258355796, 0.16346599665000416, 0.1727801873287491, 0.16260284864550612, 0.12969244242970268, 0.17627811114984837, 0.19991522091624792, 0.18417955704987787, 0.16558600654160383, 0.19044639579150135, 0.21051090594358823, 0.1817604239703744, 0.16711847420564085, 0.16832371040264993, 0.1877723029343944, 0.16809878755309615, 0.1709491901246818, 0.18271372784551965, 0.179255349127045, 0.17991713498505635, 0.1720858549935339, 0.4390126995548176, 0.16247325359609055, 0.15256388460306647, 0.3521126782255217, 0.19150144078123243, 0.16580173232814321, 0.14705114951013676, 0.16967020598807736, 0.3833752926762496, 0.3919452368684415, 0.14737171804255833, 0.18703958622404293, 0.251528943062315, 0.29912893174738997, 0.20443161945312194, 0.19011668265751536, 0.1915504273936257, 0.24189392462876536, 0.1878459461648614, 0.20516042438076987, 0.19145934802481013, 0.21147059518676337, 0.1844955176278541, 0.1719594334478075, 0.17498917263270064, 0.2080305600773923, 0.18016863021238205, 0.06568844416715569, 0.06803517085666977, 0.08496620990887915, 0.06707430973683126, 0.06451196941595227, 0.07624963834712584, 0.07133792606493006, 0.06541015470655565, 0.06659994469102315]}, "mutation_prompt": null}
{"id": "666c45db-4daf-4093-843b-356ad9cc47d1", "solution": "import numpy as np\n\nclass DynamicInertiaQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_min=0.1, inertia_max=0.9, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        super().__init__(budget, dim, num_particles, inertia_min, cognitive_weight, social_weight, quantum_factor)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        inertia_list = np.linspace(self.inertia_max, self.inertia_min, self.budget)\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for t in range(self.budget):\n            inertia_weight = inertia_list[t]\n\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "DynamicInertiaQIPSO", "description": "Enhancing QIPSO algorithm by introducing dynamic inertia weight for improved convergence and exploration.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_particles' is not defined\").", "error": "NameError(\"name 'initialize_particles' is not defined\")", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {}, "mutation_prompt": null}
