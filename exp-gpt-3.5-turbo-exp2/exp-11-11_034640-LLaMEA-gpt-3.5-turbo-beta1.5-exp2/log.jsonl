{"id": "ccfd8f9f-6326-46df-b1e7-dd5db8e60d59", "solution": "import numpy as np\n\nclass CuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u =  np.random.normal(0, sigma)\n        v =  np.random.normal(0, 1)\n        step =  u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n                \n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n                \n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    \n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n            \n        return best_solution", "name": "CuckooSearch", "description": "Metaheuristic algorithm based on Cuckoo Search for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.21973256487987902, "feedback": "The algorithm CuckooSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.462799663814912, 0.4999695245563527, 0.4762946808535067, 0.4479741281045303, 0.4497460735772776, 0.4589071080940934, 0.47568707010549294, 0.4935147355199573, 0.4838104018281236, 0.00011519623416456071, 9.999999999998899e-05, 0.013341308875696956, 0.022526947891694737, 0.005546407516324514, 9.999999999998899e-05, 0.021404854161790943, 0.031676861902673825, 0.006476314220519863, 0.13002334469512644, 0.10451805756493071, 0.09794614531568968, 0.11836977310570951, 0.11925417813325312, 0.09357840542764406, 0.1290760685154413, 0.10245238898646547, 0.10626974290706115, 0.09227394598629468, 0.0741520627093194, 0.0960632815484912, 0.08174648960271913, 0.07418148682798287, 0.08713872633198494, 0.08613157491213552, 0.10274797594417162, 0.10196446914248003, 0.9716866701489221, 0.9150059471531283, 0.9150522358990733, 0.919282089938411, 0.8798224565941766, 0.9264737014391391, 0.8988641956981694, 0.9036078406896019, 0.9490211468082981, 0.29724534512765866, 0.24719863642624018, 0.29438604112411115, 0.26733858808778477, 0.255207306102578, 0.23839184712576167, 0.24708807296860869, 0.25413432017319837, 0.3039533941962337, 0.25685646125877803, 0.2036185161228704, 0.21842740867699706, 0.33108937618344847, 0.3106883490240241, 0.27791181294538425, 0.23036436738216848, 0.3083531508833278, 0.2520349108399762, 0.22096082628704317, 0.175156126597097, 0.13478105724741307, 0.16525667342265793, 0.1790044048828089, 0.16029039807986334, 0.1986085366065865, 0.20034187920231283, 0.1856364161334353, 0.1638150264674345, 0.18299763955168913, 0.15907813813587723, 0.15171127695141584, 0.14726113001738994, 0.2057322109945261, 0.1508507033851214, 0.1855573752419265, 0.18308091881846866, 0.0016905386581638204, 0.004578817940267821, 0.0016648655315774086, 0.031290999190358715, 9.999999999998899e-05, 9.999999999998899e-05, 0.0085931064571092, 0.04469276375959286, 0.015121700848869324, 0.06980686589316887, 0.08183878463952565, 0.09560629700428558, 0.066293062577789, 0.05324055739627387, 0.05381923939244937, 0.13459734818472857, 0.08697162192580055, 0.0754731756283249, 0.030004761643859124, 0.0019042095294847794, 0.03437890098960439, 0.0007359492129231926, 9.999999999998899e-05, 0.02969090723851109, 0.004905162575892796, 9.999999999998899e-05, 9.999999999998899e-05, 0.09225244876765337, 0.13217521943987776, 0.10920150554809838, 0.10258669279005461, 0.10138511429657082, 0.12976097315892787, 0.09206609230589291, 0.10203396433252332, 0.10348205039053116, 0.4059901725165205, 0.39152972202721537, 0.4051832850800462, 0.4272336394554661, 0.41974679927015224, 0.4023613353071267, 0.4216774972011831, 0.4087482310094168, 0.40605699092339687, 0.08604763573414331, 0.10674479756660016, 0.10898001696876669, 0.12079631806131075, 0.10113128146269779, 0.14515874648070315, 0.14520581128431986, 0.09871747535149955, 0.0982659877486447, 0.23114100339436827, 0.2170916323666232, 0.18575808989971665, 0.2508459216152813, 0.1810447185691043, 0.21014936000660678, 0.22549361579864813, 0.20895836590204275, 0.21007643165365097, 0.2524501993096415, 0.25059423771015943, 0.23292139605267292, 0.24348122190082122, 0.24160503704123226, 0.24181114485853517, 0.23566669497259285, 0.24840755367267064, 0.223042324669806, 0.17831013541294283, 0.18919981810018793, 0.19116690594319685, 0.21134457239509397, 0.19109689214612968, 0.18794573800352066, 0.20735777590224658, 0.17900361000634124, 0.20138408564140953, 0.19641254597930058, 0.20986620573226977, 0.19206863941119057, 0.18600800054627975, 0.1953603773691982, 0.21756202779981582, 0.18960199817871703, 0.2070721238393678, 0.1944512857831472, 0.2070255092790616, 0.2160200938926523, 0.1909866741002635, 0.2068469031991622, 0.2088070621283028, 0.19190531013490086, 0.2129511191137755, 0.19684577587647123, 0.21392707591553706, 0.22657422908431069, 0.5981732842155538, 0.72802730448576, 0.5623062214685938, 0.19827036717757152, 0.19402901799545158, 0.18201449550460125, 0.4876627987099349, 0.49873438420725325, 0.31676196160469683, 0.3121563873096954, 0.4196083183382816, 0.3410368477279663, 0.4430644543381066, 0.26870532752102194, 0.4017284411937905, 0.16284270108620735, 0.2356538431126094, 0.18568626900669183, 0.19583214946456085, 0.18444838076295222, 0.19244140885092542, 0.18397238785496295, 0.2014871293705467, 0.18051206978914525, 0.1786641504927211, 0.18078552835718242, 0.08393711281894578, 0.08755804808401557, 0.08517648842066805, 0.08087479957309918, 0.10155588659650727, 0.06508588848019536, 0.0885208267621187, 0.0904453784844691, 0.09380875192504701]}, "mutation_prompt": null}
{"id": "70fba1a7-5c60-4adb-b882-9005003de88d", "solution": "import numpy as np\n\nclass CuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u =  np.random.normal(0, sigma)\n        v =  np.random.normal(0, 1)\n        step =  u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n                \n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n                \n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    \n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n            \n        return best_solution", "name": "CuckooSearch", "description": "Metaheuristic algorithm based on Cuckoo Search for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ccfd8f9f-6326-46df-b1e7-dd5db8e60d59", "metadata": {"aucs": [0.462799663814912, 0.4999695245563527, 0.4762946808535067, 0.4479741281045303, 0.4497460735772776, 0.4589071080940934, 0.47568707010549294, 0.4935147355199573, 0.4838104018281236, 0.00011519623416456071, 9.999999999998899e-05, 0.013341308875696956, 0.022526947891694737, 0.005546407516324514, 9.999999999998899e-05, 0.021404854161790943, 0.031676861902673825, 0.006476314220519863, 0.13002334469512644, 0.10451805756493071, 0.09794614531568968, 0.11836977310570951, 0.11925417813325312, 0.09357840542764406, 0.1290760685154413, 0.10245238898646547, 0.10626974290706115, 0.09227394598629468, 0.0741520627093194, 0.0960632815484912, 0.08174648960271913, 0.07418148682798287, 0.08713872633198494, 0.08613157491213552, 0.10274797594417162, 0.10196446914248003, 0.9716866701489221, 0.9150059471531283, 0.9150522358990733, 0.919282089938411, 0.8798224565941766, 0.9264737014391391, 0.8988641956981694, 0.9036078406896019, 0.9490211468082981, 0.29724534512765866, 0.24719863642624018, 0.29438604112411115, 0.26733858808778477, 0.255207306102578, 0.23839184712576167, 0.24708807296860869, 0.25413432017319837, 0.3039533941962337, 0.25685646125877803, 0.2036185161228704, 0.21842740867699706, 0.33108937618344847, 0.3106883490240241, 0.27791181294538425, 0.23036436738216848, 0.3083531508833278, 0.2520349108399762, 0.22096082628704317, 0.175156126597097, 0.13478105724741307, 0.16525667342265793, 0.1790044048828089, 0.16029039807986334, 0.1986085366065865, 0.20034187920231283, 0.1856364161334353, 0.1638150264674345, 0.18299763955168913, 0.15907813813587723, 0.15171127695141584, 0.14726113001738994, 0.2057322109945261, 0.1508507033851214, 0.1855573752419265, 0.18308091881846866, 0.0016905386581638204, 0.004578817940267821, 0.0016648655315774086, 0.031290999190358715, 9.999999999998899e-05, 9.999999999998899e-05, 0.0085931064571092, 0.04469276375959286, 0.015121700848869324, 0.06980686589316887, 0.08183878463952565, 0.09560629700428558, 0.066293062577789, 0.05324055739627387, 0.05381923939244937, 0.13459734818472857, 0.08697162192580055, 0.0754731756283249, 0.030004761643859124, 0.0019042095294847794, 0.03437890098960439, 0.0007359492129231926, 9.999999999998899e-05, 0.02969090723851109, 0.004905162575892796, 9.999999999998899e-05, 9.999999999998899e-05, 0.09225244876765337, 0.13217521943987776, 0.10920150554809838, 0.10258669279005461, 0.10138511429657082, 0.12976097315892787, 0.09206609230589291, 0.10203396433252332, 0.10348205039053116, 0.4059901725165205, 0.39152972202721537, 0.4051832850800462, 0.4272336394554661, 0.41974679927015224, 0.4023613353071267, 0.4216774972011831, 0.4087482310094168, 0.40605699092339687, 0.08604763573414331, 0.10674479756660016, 0.10898001696876669, 0.12079631806131075, 0.10113128146269779, 0.14515874648070315, 0.14520581128431986, 0.09871747535149955, 0.0982659877486447, 0.23114100339436827, 0.2170916323666232, 0.18575808989971665, 0.2508459216152813, 0.1810447185691043, 0.21014936000660678, 0.22549361579864813, 0.20895836590204275, 0.21007643165365097, 0.2524501993096415, 0.25059423771015943, 0.23292139605267292, 0.24348122190082122, 0.24160503704123226, 0.24181114485853517, 0.23566669497259285, 0.24840755367267064, 0.223042324669806, 0.17831013541294283, 0.18919981810018793, 0.19116690594319685, 0.21134457239509397, 0.19109689214612968, 0.18794573800352066, 0.20735777590224658, 0.17900361000634124, 0.20138408564140953, 0.19641254597930058, 0.20986620573226977, 0.19206863941119057, 0.18600800054627975, 0.1953603773691982, 0.21756202779981582, 0.18960199817871703, 0.2070721238393678, 0.1944512857831472, 0.2070255092790616, 0.2160200938926523, 0.1909866741002635, 0.2068469031991622, 0.2088070621283028, 0.19190531013490086, 0.2129511191137755, 0.19684577587647123, 0.21392707591553706, 0.22657422908431069, 0.5981732842155538, 0.72802730448576, 0.5623062214685938, 0.19827036717757152, 0.19402901799545158, 0.18201449550460125, 0.4876627987099349, 0.49873438420725325, 0.31676196160469683, 0.3121563873096954, 0.4196083183382816, 0.3410368477279663, 0.4430644543381066, 0.26870532752102194, 0.4017284411937905, 0.16284270108620735, 0.2356538431126094, 0.18568626900669183, 0.19583214946456085, 0.18444838076295222, 0.19244140885092542, 0.18397238785496295, 0.2014871293705467, 0.18051206978914525, 0.1786641504927211, 0.18078552835718242, 0.08393711281894578, 0.08755804808401557, 0.08517648842066805, 0.08087479957309918, 0.10155588659650727, 0.06508588848019536, 0.0885208267621187, 0.0904453784844691, 0.09380875192504701]}, "mutation_prompt": null}
{"id": "f1b74691-c971-4b3d-9653-f622749307f6", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n                \n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n                \n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    \n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n            \n            # Dynamic population resizing based on fitness improvement\n            if np.random.rand() < 0.1:\n                worst_idx = np.argmax(fitness)\n                new_member = np.random.uniform(-5.0, 5.0, size=(self.dim,))\n                population[worst_idx] = new_member\n                fitness[worst_idx] = func(new_member)\n        \n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population resizing based on fitness improvement to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": 0.21880016820721496, "feedback": "The algorithm EnhancedCuckooSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "ccfd8f9f-6326-46df-b1e7-dd5db8e60d59", "metadata": {"aucs": [0.468487513165011, 0.4483583467983149, 0.4632844403690001, 0.43737573710134847, 0.48259792939444124, 0.49748883144461475, 0.43607473620091075, 0.4776668254030927, 0.47175105480163737, 9.999999999998899e-05, 9.999999999998899e-05, 0.010196338219884304, 9.999999999998899e-05, 0.0015312519788290846, 0.001968496632713146, 0.014761617903630175, 9.999999999998899e-05, 9.999999999998899e-05, 0.09415464488562664, 0.07939854538480962, 0.12263108316692017, 0.10365929418345421, 0.08852059472733531, 0.12730267848760812, 0.1273908218753531, 0.09939610676535537, 0.09032825931576138, 0.08716168754951648, 0.07634834765985377, 0.09508389472460699, 0.09962728764052353, 0.09145592543196313, 0.08924670193745932, 0.088402772143091, 0.08969113414348218, 0.10879339967154322, 0.9048930776563738, 0.9870842144450109, 0.9340627833963134, 0.9399416683576383, 0.8884681507758257, 0.8638214163924568, 0.8617649245165374, 0.9507813428162228, 0.9058279134474954, 0.27001151961265124, 0.25519122071844424, 0.2653836023529962, 0.2624503529562763, 0.25649309084450445, 0.25912245343179086, 0.25749973735962384, 0.25107692602047704, 0.24798067504047738, 0.3062763410400796, 0.2630130667203634, 0.2854377315700022, 0.2565015530363718, 0.7322326577495052, 0.28421862533249054, 0.22630709166584095, 0.3341562294888768, 0.2244125039174324, 0.21001959233883294, 0.15999554735180044, 0.16781110947374744, 0.176826291220745, 0.13453642281470168, 0.14683743043422204, 0.13182505473792283, 0.1701774754410149, 0.18073003203072635, 0.1780216331024883, 0.1939250638475838, 0.1470326934027706, 0.2530540741096242, 0.15307756428740216, 0.1828194856065415, 0.18834227151193683, 0.19855648445438623, 0.1514644006595145, 0.022687987689856914, 0.0029013548294395397, 0.0009585464623396156, 0.016467935903726194, 0.0018553230440108148, 0.04544497359206312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07791989994601822, 0.07872780928223233, 0.08552641749298562, 0.10144826648801897, 0.10973897853835168, 0.06872576084672621, 0.10337762399413619, 0.07693032081176643, 0.12765666181571556, 9.999999999998899e-05, 0.001428829961412026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011056982157995887, 9.999999999998899e-05, 9.999999999998899e-05, 0.012390485904237192, 0.09183250786523911, 0.0995435869840916, 0.11904630336071564, 0.1146495968459943, 0.09965208710924289, 0.10811351390025925, 0.10449117359189553, 0.11349115659964593, 0.09521852192081437, 0.4050205707093717, 0.40538552563928354, 0.39981278654114716, 0.37907898556470765, 0.37166371964278644, 0.43017863862492944, 0.4259617220320132, 0.38375489186558076, 0.38583656619873097, 0.08762950371491374, 0.10380133685776605, 0.12251524703810157, 0.12095263405396439, 0.0871912313052926, 0.13048649913357147, 0.1354748963886081, 0.08939652968439882, 0.11925401038295624, 0.1694897649773578, 0.24227344401038764, 0.1975953544136989, 0.20523818005798333, 0.19312929147715818, 0.1826512317878346, 0.2022442927000535, 0.18332049108716053, 0.2191951733737354, 0.2535059326043574, 0.2510893804874551, 0.26141301062692834, 0.26161640098748884, 0.2812591417850999, 0.20816495880806563, 0.2361887257349795, 0.29045606378037203, 0.24224398759378252, 0.19027283281862273, 0.19840744846496017, 0.17193531746907598, 0.19496148548201542, 0.20778285018051879, 0.19593596636819355, 0.21257829315496024, 0.21697228367183585, 0.17486700526991394, 0.18980537298546274, 0.18608899146638314, 0.18761002262480775, 0.17906957701907178, 0.18960405812490422, 0.1944928450948179, 0.22249033176281585, 0.1918179928227851, 0.1946873292081509, 0.198334410767536, 0.196594557571251, 0.19536858871392138, 0.19803277548698595, 0.20041372930753742, 0.19564468298207716, 0.18322001600615123, 0.18218138150735175, 0.19367995766225954, 0.463546661186126, 0.18622564901985028, 0.4860444997678902, 0.41921192466503787, 0.3956935966225039, 0.19729572343692836, 0.42176636017447144, 0.376548099438066, 0.17030050048670242, 0.4429812767708843, 0.3757624494476829, 0.4186930208119324, 0.4506726022008811, 0.37387453050563546, 0.3335339126774728, 0.40955719432541704, 0.19963792578773, 0.326477108621524, 0.18498479453968686, 0.19463186678195143, 0.17924380855650468, 0.17870979120596397, 0.1934255373287217, 0.1811439365270805, 0.1928791359671641, 0.18922208001134344, 0.20028324611809423, 0.07432391405714212, 0.08444934861838715, 0.10134454271094129, 0.07597178973417196, 0.08119144136333212, 0.08842237659541718, 0.07773404335019984, 0.08130383799647478, 0.08414517614806427]}, "mutation_prompt": null}
{"id": "df4ba37d-9df4-4822-92be-19346ecc94d2", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u =  np.random.normal(0, sigma)\n        v =  np.random.normal(0, 1)\n        step =  u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n                \n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n                \n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    \n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n                        \n            # Dynamic population size adaptation\n            if np.random.rand() < 0.1:  # Adjust the probability for adaptation\n                new_size = int(np.clip(np.round(self.population_size * np.random.normal(1, 0.1)), 2, 100))\n                if new_size != self.population_size:\n                    if new_size > self.population_size:\n                        population = np.vstack([population, np.random.uniform(-5.0, 5.0, size=(new_size - self.population_size, self.dim))])\n                        fitness.extend([func(x) for x in population[self.population_size:]])\n                    else:\n                        indices = np.random.choice(np.arange(self.population_size), new_size, replace=False)\n                        population = population[indices]\n                        fitness = [fitness[j] for j in indices]\n                    self.population_size = new_size\n        \n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing a dynamic population size adaptation mechanism to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "ccfd8f9f-6326-46df-b1e7-dd5db8e60d59", "metadata": {}, "mutation_prompt": null}
{"id": "bc77e2b9-70e7-4d89-864f-fc7b96c70dd0", "solution": "import numpy as np\n\nclass CuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u =  np.random.normal(0, sigma)\n        v =  np.random.normal(0, 1)\n        step =  u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n                \n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n                \n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    \n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n            \n        return best_solution", "name": "CuckooSearch", "description": "Metaheuristic algorithm based on Cuckoo Search for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ccfd8f9f-6326-46df-b1e7-dd5db8e60d59", "metadata": {"aucs": [0.462799663814912, 0.4999695245563527, 0.4762946808535067, 0.4479741281045303, 0.4497460735772776, 0.4589071080940934, 0.47568707010549294, 0.4935147355199573, 0.4838104018281236, 0.00011519623416456071, 9.999999999998899e-05, 0.013341308875696956, 0.022526947891694737, 0.005546407516324514, 9.999999999998899e-05, 0.021404854161790943, 0.031676861902673825, 0.006476314220519863, 0.13002334469512644, 0.10451805756493071, 0.09794614531568968, 0.11836977310570951, 0.11925417813325312, 0.09357840542764406, 0.1290760685154413, 0.10245238898646547, 0.10626974290706115, 0.09227394598629468, 0.0741520627093194, 0.0960632815484912, 0.08174648960271913, 0.07418148682798287, 0.08713872633198494, 0.08613157491213552, 0.10274797594417162, 0.10196446914248003, 0.9716866701489221, 0.9150059471531283, 0.9150522358990733, 0.919282089938411, 0.8798224565941766, 0.9264737014391391, 0.8988641956981694, 0.9036078406896019, 0.9490211468082981, 0.29724534512765866, 0.24719863642624018, 0.29438604112411115, 0.26733858808778477, 0.255207306102578, 0.23839184712576167, 0.24708807296860869, 0.25413432017319837, 0.3039533941962337, 0.25685646125877803, 0.2036185161228704, 0.21842740867699706, 0.33108937618344847, 0.3106883490240241, 0.27791181294538425, 0.23036436738216848, 0.3083531508833278, 0.2520349108399762, 0.22096082628704317, 0.175156126597097, 0.13478105724741307, 0.16525667342265793, 0.1790044048828089, 0.16029039807986334, 0.1986085366065865, 0.20034187920231283, 0.1856364161334353, 0.1638150264674345, 0.18299763955168913, 0.15907813813587723, 0.15171127695141584, 0.14726113001738994, 0.2057322109945261, 0.1508507033851214, 0.1855573752419265, 0.18308091881846866, 0.0016905386581638204, 0.004578817940267821, 0.0016648655315774086, 0.031290999190358715, 9.999999999998899e-05, 9.999999999998899e-05, 0.0085931064571092, 0.04469276375959286, 0.015121700848869324, 0.06980686589316887, 0.08183878463952565, 0.09560629700428558, 0.066293062577789, 0.05324055739627387, 0.05381923939244937, 0.13459734818472857, 0.08697162192580055, 0.0754731756283249, 0.030004761643859124, 0.0019042095294847794, 0.03437890098960439, 0.0007359492129231926, 9.999999999998899e-05, 0.02969090723851109, 0.004905162575892796, 9.999999999998899e-05, 9.999999999998899e-05, 0.09225244876765337, 0.13217521943987776, 0.10920150554809838, 0.10258669279005461, 0.10138511429657082, 0.12976097315892787, 0.09206609230589291, 0.10203396433252332, 0.10348205039053116, 0.4059901725165205, 0.39152972202721537, 0.4051832850800462, 0.4272336394554661, 0.41974679927015224, 0.4023613353071267, 0.4216774972011831, 0.4087482310094168, 0.40605699092339687, 0.08604763573414331, 0.10674479756660016, 0.10898001696876669, 0.12079631806131075, 0.10113128146269779, 0.14515874648070315, 0.14520581128431986, 0.09871747535149955, 0.0982659877486447, 0.23114100339436827, 0.2170916323666232, 0.18575808989971665, 0.2508459216152813, 0.1810447185691043, 0.21014936000660678, 0.22549361579864813, 0.20895836590204275, 0.21007643165365097, 0.2524501993096415, 0.25059423771015943, 0.23292139605267292, 0.24348122190082122, 0.24160503704123226, 0.24181114485853517, 0.23566669497259285, 0.24840755367267064, 0.223042324669806, 0.17831013541294283, 0.18919981810018793, 0.19116690594319685, 0.21134457239509397, 0.19109689214612968, 0.18794573800352066, 0.20735777590224658, 0.17900361000634124, 0.20138408564140953, 0.19641254597930058, 0.20986620573226977, 0.19206863941119057, 0.18600800054627975, 0.1953603773691982, 0.21756202779981582, 0.18960199817871703, 0.2070721238393678, 0.1944512857831472, 0.2070255092790616, 0.2160200938926523, 0.1909866741002635, 0.2068469031991622, 0.2088070621283028, 0.19190531013490086, 0.2129511191137755, 0.19684577587647123, 0.21392707591553706, 0.22657422908431069, 0.5981732842155538, 0.72802730448576, 0.5623062214685938, 0.19827036717757152, 0.19402901799545158, 0.18201449550460125, 0.4876627987099349, 0.49873438420725325, 0.31676196160469683, 0.3121563873096954, 0.4196083183382816, 0.3410368477279663, 0.4430644543381066, 0.26870532752102194, 0.4017284411937905, 0.16284270108620735, 0.2356538431126094, 0.18568626900669183, 0.19583214946456085, 0.18444838076295222, 0.19244140885092542, 0.18397238785496295, 0.2014871293705467, 0.18051206978914525, 0.1786641504927211, 0.18078552835718242, 0.08393711281894578, 0.08755804808401557, 0.08517648842066805, 0.08087479957309918, 0.10155588659650727, 0.06508588848019536, 0.0885208267621187, 0.0904453784844691, 0.09380875192504701]}, "mutation_prompt": null}
{"id": "9ae7ee82-76ce-492e-8e0e-19a3c8a17986", "solution": "import numpy as np\n\nclass CuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u =  np.random.normal(0, sigma)\n        v =  np.random.normal(0, 1)\n        step =  u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n                \n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n                \n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    \n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n            \n        return best_solution", "name": "CuckooSearch", "description": "Metaheuristic algorithm based on Cuckoo Search for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "ccfd8f9f-6326-46df-b1e7-dd5db8e60d59", "metadata": {"aucs": [0.462799663814912, 0.4999695245563527, 0.4762946808535067, 0.4479741281045303, 0.4497460735772776, 0.4589071080940934, 0.47568707010549294, 0.4935147355199573, 0.4838104018281236, 0.00011519623416456071, 9.999999999998899e-05, 0.013341308875696956, 0.022526947891694737, 0.005546407516324514, 9.999999999998899e-05, 0.021404854161790943, 0.031676861902673825, 0.006476314220519863, 0.13002334469512644, 0.10451805756493071, 0.09794614531568968, 0.11836977310570951, 0.11925417813325312, 0.09357840542764406, 0.1290760685154413, 0.10245238898646547, 0.10626974290706115, 0.09227394598629468, 0.0741520627093194, 0.0960632815484912, 0.08174648960271913, 0.07418148682798287, 0.08713872633198494, 0.08613157491213552, 0.10274797594417162, 0.10196446914248003, 0.9716866701489221, 0.9150059471531283, 0.9150522358990733, 0.919282089938411, 0.8798224565941766, 0.9264737014391391, 0.8988641956981694, 0.9036078406896019, 0.9490211468082981, 0.29724534512765866, 0.24719863642624018, 0.29438604112411115, 0.26733858808778477, 0.255207306102578, 0.23839184712576167, 0.24708807296860869, 0.25413432017319837, 0.3039533941962337, 0.25685646125877803, 0.2036185161228704, 0.21842740867699706, 0.33108937618344847, 0.3106883490240241, 0.27791181294538425, 0.23036436738216848, 0.3083531508833278, 0.2520349108399762, 0.22096082628704317, 0.175156126597097, 0.13478105724741307, 0.16525667342265793, 0.1790044048828089, 0.16029039807986334, 0.1986085366065865, 0.20034187920231283, 0.1856364161334353, 0.1638150264674345, 0.18299763955168913, 0.15907813813587723, 0.15171127695141584, 0.14726113001738994, 0.2057322109945261, 0.1508507033851214, 0.1855573752419265, 0.18308091881846866, 0.0016905386581638204, 0.004578817940267821, 0.0016648655315774086, 0.031290999190358715, 9.999999999998899e-05, 9.999999999998899e-05, 0.0085931064571092, 0.04469276375959286, 0.015121700848869324, 0.06980686589316887, 0.08183878463952565, 0.09560629700428558, 0.066293062577789, 0.05324055739627387, 0.05381923939244937, 0.13459734818472857, 0.08697162192580055, 0.0754731756283249, 0.030004761643859124, 0.0019042095294847794, 0.03437890098960439, 0.0007359492129231926, 9.999999999998899e-05, 0.02969090723851109, 0.004905162575892796, 9.999999999998899e-05, 9.999999999998899e-05, 0.09225244876765337, 0.13217521943987776, 0.10920150554809838, 0.10258669279005461, 0.10138511429657082, 0.12976097315892787, 0.09206609230589291, 0.10203396433252332, 0.10348205039053116, 0.4059901725165205, 0.39152972202721537, 0.4051832850800462, 0.4272336394554661, 0.41974679927015224, 0.4023613353071267, 0.4216774972011831, 0.4087482310094168, 0.40605699092339687, 0.08604763573414331, 0.10674479756660016, 0.10898001696876669, 0.12079631806131075, 0.10113128146269779, 0.14515874648070315, 0.14520581128431986, 0.09871747535149955, 0.0982659877486447, 0.23114100339436827, 0.2170916323666232, 0.18575808989971665, 0.2508459216152813, 0.1810447185691043, 0.21014936000660678, 0.22549361579864813, 0.20895836590204275, 0.21007643165365097, 0.2524501993096415, 0.25059423771015943, 0.23292139605267292, 0.24348122190082122, 0.24160503704123226, 0.24181114485853517, 0.23566669497259285, 0.24840755367267064, 0.223042324669806, 0.17831013541294283, 0.18919981810018793, 0.19116690594319685, 0.21134457239509397, 0.19109689214612968, 0.18794573800352066, 0.20735777590224658, 0.17900361000634124, 0.20138408564140953, 0.19641254597930058, 0.20986620573226977, 0.19206863941119057, 0.18600800054627975, 0.1953603773691982, 0.21756202779981582, 0.18960199817871703, 0.2070721238393678, 0.1944512857831472, 0.2070255092790616, 0.2160200938926523, 0.1909866741002635, 0.2068469031991622, 0.2088070621283028, 0.19190531013490086, 0.2129511191137755, 0.19684577587647123, 0.21392707591553706, 0.22657422908431069, 0.5981732842155538, 0.72802730448576, 0.5623062214685938, 0.19827036717757152, 0.19402901799545158, 0.18201449550460125, 0.4876627987099349, 0.49873438420725325, 0.31676196160469683, 0.3121563873096954, 0.4196083183382816, 0.3410368477279663, 0.4430644543381066, 0.26870532752102194, 0.4017284411937905, 0.16284270108620735, 0.2356538431126094, 0.18568626900669183, 0.19583214946456085, 0.18444838076295222, 0.19244140885092542, 0.18397238785496295, 0.2014871293705467, 0.18051206978914525, 0.1786641504927211, 0.18078552835718242, 0.08393711281894578, 0.08755804808401557, 0.08517648842066805, 0.08087479957309918, 0.10155588659650727, 0.06508588848019536, 0.0885208267621187, 0.0904453784844691, 0.09380875192504701]}, "mutation_prompt": null}
{"id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 6, "fitness": 0.23781063029689178, "feedback": "The algorithm EnhancedCuckooSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "ccfd8f9f-6326-46df-b1e7-dd5db8e60d59", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "e699ee0d-6805-46c4-91ff-f189450a747c", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "01af8191-8c81-4320-8941-5f3c55b3d66b", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "dd70fdaf-0b87-4d6e-b5b9-88e1401929b9", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "37cd19f9-52b3-4404-bd4b-d082432884d9", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "83dfaeab-8272-4452-945d-c9f5dd2c6474", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchHybrid:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, local_search_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.local_search_rate = local_search_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def gradient_descent(self, x, func):\n        lr = 0.1\n        for _ in range(10):\n            grad = np.gradient(func(x))\n            x = x - lr * grad\n            x = np.clip(x, -5.0, 5.0)\n        return x\n\n    def particle_swarm_optimization(self, x, func):\n        inertia_weight = 0.5\n        cognitive_weight = 1.0\n        social_weight = 2.0\n        personal_best = x\n        global_best = x\n\n        for _ in range(10):\n            r1, r2 = np.random.random(), np.random.random()\n            personal_best = inertia_weight * personal_best + cognitive_weight * r1 * (personal_best - x) + social_weight * r2 * (global_best - x)\n            x = x + personal_best\n            x = np.clip(x, -5.0, 5.0)\n        return x\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                # Introduce diverse local search mechanism\n                if np.random.rand() < self.local_search_rate:\n                    if np.random.rand() < 0.5:\n                        cuckoo_new = self.gradient_descent(cuckoo_new, func)\n                    else:\n                        cuckoo_new = self.particle_swarm_optimization(cuckoo_new, func)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchHybrid", "description": "Employ a diverse local search strategy for rapid convergence by adding a hybrid local search mechanism incorporating a combination of gradient descent and particle swarm optimization.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"can't multiply sequence by non-int of type 'float'\").", "error": "TypeError(\"can't multiply sequence by non-int of type 'float'\")", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {}, "mutation_prompt": null}
{"id": "7bdb67b6-a7a7-4209-a5f6-47a27ca4a7c9", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "d91a6e93-f8d7-46ca-b6a5-53f01bcd23a3", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "dcf923b3-ce90-4103-9e33-19c52ff7aedc", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "711af050-8b54-4643-9d4b-207e0561c868", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "d0319185-5d62-4cef-bfa8-12d4f9581b08", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchDynamicStep:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self, fitness):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        step_size = 1.0 / (1.0 + np.exp(np.mean(fitness)))\n        return step * step_size\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight(fitness)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchDynamicStep", "description": "Introducing a dynamic step size adaptation based on function landscape curvature to improve convergence speed.", "configspace": "", "generation": 16, "fitness": 0.09014405175262157, "feedback": "The algorithm EnhancedCuckooSearchDynamicStep got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.13.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.14281132492306137, 0.11557831909799843, 0.12870056487102066, 0.043655067797534475, 0.05937971609618653, 0.031876279648365924, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.000994339136184852, 0.0037903520299101823, 0.01393011914540132, 0.025041008061406522, 0.0026412128975663585, 9.999999999998899e-05, 0.1042342658912414, 0.10170209267997177, 0.08391400650967917, 0.022548856406517714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04517974164299399, 0.033667547960281485, 0.042877771075036986, 0.039088515291900494, 0.04687545855643349, 0.03058144271518759, 0.03327721672346584, 0.048986754550083944, 0.02584969810736515, 0.007694209980527389, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037179901336974464, 0.01754102542310232, 0.024757870682216687, 9.999999999998899e-05, 0.2687746984079832, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.03739755646190912, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.03602617680255393, 9.999999999998899e-05, 0.0320499562241352, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13208386203745048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06346585517968828, 0.06724862156825495, 0.07719679889167641, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024185241993194717, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4132285357942883, 0.39956366441567037, 0.43867781138374284, 0.42912933240269047, 0.4167055181873902, 0.41522378334835797, 0.14481728205148925, 0.15904293390802526, 0.14624944321630207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01102898476289571, 0.02008746125842531, 0.031115616430979043, 0.016155575206501127, 9.999999999998899e-05, 0.09764504013146413, 0.07037543064596374, 0.1416867837768705, 0.08450307594204864, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.07249507498419461, 0.05969002259779299, 0.08858750087085632, 0.23959080964159152, 0.28470739572430226, 0.28595075130223746, 0.1422249851993762, 0.11362849670520625, 0.1308995419071236, 0.13828258464315335, 0.1001363042967901, 0.0937764083930358, 0.05167232505204267, 0.05723250776605748, 0.034674503884533414, 0.0775908380431305, 0.05210345686932927, 0.04171413775263022, 0.06774980874340941, 0.04406776395065459, 0.042658803643666254, 0.20026212447753244, 0.20505090108898238, 0.18944333672674363, 0.11669195810173583, 0.09953568417170411, 0.1481174740686827, 0.14467048508731295, 0.110557812667607, 0.1261963614278906, 0.1646535428163861, 0.18207409652604212, 0.19949235310672953, 9.999999999998899e-05, 0.13005423606368893, 0.13956469253832404, 0.12641664274320175, 0.14902538989505743, 0.0608154614956371, 0.09377202327253287, 0.1638938700079674, 0.1109283112606283, 0.0874420860875833, 0.19301634905603215, 0.06693899780895685, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.029529621554649887, 0.06716090233167993, 0.046648884980939886, 0.2903305502425244, 0.18980056003505752, 0.5045022142407534, 0.15548608272092856, 0.2543966156583144, 0.18870225788681827, 0.19145417761578987, 0.20675604689246607, 0.23672866365904488, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.027692064783930825, 0.03215250527149327, 0.04140783580068641, 0.020637708252011167, 0.029851997999764013, 0.029892848805381567, 0.02707752420793863, 0.013313689978521559, 0.033784154986479686]}, "mutation_prompt": null}
{"id": "d92095ab-8425-412d-b4fb-5c031136a577", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "f438b547-3bee-4a54-b907-91906ca54897", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "89d84504-c596-4a08-be64-539ace1f6468", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "b4d8f009-4dcc-48f9-a38e-c27f999fac90", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "54568d01-0125-4f99-8ad6-222059c38915", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "dbf37688-d9f1-40c9-b6af-769bc4afc6a3", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "44aa4805-663f-4e41-8d8a-61f9e7b3b270", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "cf975cad-85ff-4f7b-8b1c-d32ec402205c", "solution": "import numpy as np\n\nclass FastConvergingCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def dynamic_coefficient(self, step_size, fitness_improvement):\n        if fitness_improvement > 0:\n            return step_size * 1.1\n        else:\n            return step_size * 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n                    # Dynamic coefficient adjustment\n                    step_size = self.dynamic_coefficient(step_size, fitness[i] - new_fitness)\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "FastConvergingCuckooSearch", "description": "Implement a dynamic coefficient adjustment in the population update to adaptively modify the step size during the search to accelerate convergence speed.", "configspace": "", "generation": 24, "fitness": 0.23781063029689178, "feedback": "The algorithm FastConvergingCuckooSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "0662ceda-426e-4608-ae20-4705ca51dd8e", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "25f44520-ba59-40b8-bd3b-64f0a46d1cac", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "6cf45adb-50a3-4d76-803d-134ca14ef228", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "ad6e7c53-b41c-4dae-8f93-70421a512b16", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImproved:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce selective update of worst solutions with the best solution found\n            worst_idxs = np.argsort(fitness)[-int(self.elitism_rate * self.population_size):]\n            population[worst_idxs] = best_solution\n            fitness[worst_idxs] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImproved", "description": "Implement a mechanism to selectively update a fraction of the worst solutions in the population with the best solution found to accelerate convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('only integer scalar arrays can be converted to a scalar index').", "error": "TypeError('only integer scalar arrays can be converted to a scalar index')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {}, "mutation_prompt": null}
{"id": "a7cbf251-d3f8-4e95-b806-7e795baf7024", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "fbea67c1-9866-4ac6-8e09-ee8ca4d61704", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "274196b0-80d5-4262-91dc-acd2963d3a6a", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "773148ab-da3e-4096-9d2e-4df8022cb97b", "solution": "class EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_factor = diversity_factor\n\n    def levy_flight(self, diversity):\n        beta = 1.5 + diversity\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = np.std(fitness) * self.diversity_factor\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight(diversity)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Enhancing convergence speed by incorporating a dynamic step size adaptation mechanism based on population fitness diversity.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('math range error').", "error": "OverflowError('math range error')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {}, "mutation_prompt": null}
{"id": "fbd48cba-46e4-4a67-9462-c88a0741cdd2", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchSpeed:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, adaptive_step_factor=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.adaptive_step_factor = adaptive_step_factor\n        self.step_sizes = np.ones(self.population_size)  # Initialize step sizes to 1\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.step_sizes[i] * self.levy_flight()  # Use adaptive step size\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n                # Update step size based on fitness improvement\n                if new_fitness < fitness[i]:\n                    self.step_sizes[i] *= (1 + self.adaptive_step_factor)\n                else:\n                    self.step_sizes[i] /= (1 + self.adaptive_step_factor)\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchSpeed", "description": "Accelerating convergence by incorporating a novel adaptive step size mechanism based on fitness evaluation history.", "configspace": "", "generation": 33, "fitness": 0.10363265913092855, "feedback": "The algorithm EnhancedCuckooSearchSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.25557573938646483, 0.277026900335104, 0.21101553881295976, 0.1362232194041375, 0.318323573135708, 0.15024802296042838, 0.18487073948175303, 0.17142726211710724, 0.27326644672089406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03979100220441778, 0.028019406490611076, 0.05211914147652519, 0.06267960297493724, 0.03230095475081052, 0.026699819711470063, 0.09631613699536645, 0.03726484530987195, 0.04030973239947799, 0.06560312682612379, 0.018475741469365703, 0.014394590032435928, 0.06692848653253947, 0.0005330551483692103, 0.026784111361055185, 0.030940829564066408, 0.030846043151270375, 0.009610556642893009, 0.08984878926802209, 0.06347580846966017, 0.09394895419601723, 0.9625160821010555, 0.08998037595098174, 0.06182966915189303, 0.10243122369687574, 0.07627017759259747, 0.05096277944340122, 0.10002781610814349, 0.057434657061476546, 0.04364818701307649, 0.0236959382609484, 0.13245785283188183, 0.08683894098165745, 0.088368586177339, 0.03812222063823134, 0.012927484193098637, 0.15644387337514332, 0.06675101560552943, 0.10301845739188398, 0.16042308225450563, 0.04087907945786684, 0.05296452393287343, 0.127462240824461, 0.029839089028702248, 0.13387181346919697, 0.06136566360673623, 9.999999999998899e-05, 0.12427600752685575, 9.999999999998899e-05, 0.05594304957769636, 0.015142401549543272, 0.039949093112938705, 0.02389940386912237, 0.03558737386548361, 0.14370439430088466, 0.04087670478498717, 0.012612655454815491, 0.047261999321220216, 0.05366316264942039, 0.13757988515332675, 0.08647489148269982, 9.999999999998899e-05, 0.035837963997312317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0067401324011230335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09821020822229443, 0.1020992913027563, 0.13366090447212298, 0.06508015064877692, 0.09089505476960691, 0.04651676599526422, 0.1961000451513475, 0.111630078841505, 0.08216134733739366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026730078118007983, 9.999999999998899e-05, 9.999999999998899e-05, 0.043029115516378114, 9.999999999998899e-05, 0.011908433473688085, 9.999999999998899e-05, 0.015446632325940679, 0.2171390915040371, 0.309512977322454, 0.24996646936038203, 0.15402189242387554, 0.20104550538143184, 0.15308150525635333, 0.1838031851235299, 0.24421271793684096, 0.21093812790505917, 0.027250921703336317, 0.03195823963461497, 0.056236533403475786, 0.051929409466244025, 0.06352403134087636, 0.06340080241249546, 0.07334844913844085, 0.06881342477637553, 0.14561862206719922, 0.15475791276370598, 0.1968983607158581, 0.10024126584355386, 0.15714880616948013, 0.21163244763140943, 0.16356246905931415, 0.2083466121121157, 0.20373981065443236, 0.2006603150186116, 0.15141486121538672, 0.16195506451400654, 0.150123364926815, 0.16225794365444435, 0.14391825874486752, 0.140988930438102, 0.14472190927015705, 0.16685657722967373, 0.15495784658911127, 0.09955054524197493, 0.1377555678457214, 0.10124533024665439, 0.10141049094268495, 0.07341331245334892, 0.07007471362413398, 0.10472389122300518, 0.10099220624531302, 0.1296188086775868, 0.17450375923740136, 0.155939411179574, 0.18955680740019687, 0.18850356627018683, 0.16418775240991235, 0.15578536459914816, 0.17364005024372386, 0.17186037626164286, 0.19120768770664398, 0.1671102586420311, 0.17028929321079544, 0.19409780819704514, 0.16789478796022972, 0.16938668250331412, 0.22098878755191442, 0.17204823356731924, 0.17956059755708542, 0.14436366703295467, 0.12148787313092546, 0.15972580646392676, 0.1524651995690257, 0.2730448704440439, 0.1932066326120696, 0.16265760432498022, 0.15856519003537617, 0.12152284674249203, 0.14116202235033792, 0.24003851151336586, 0.2113806010319783, 0.07273574084092393, 0.10678786827797826, 0.10835453130253159, 0.16944589789254605, 0.09856551435123562, 0.106907923655987, 0.11628647891103061, 0.23409824282253178, 0.22447550572710062, 0.1934935940897663, 0.17605124437706687, 0.2511151977364148, 0.20419781086312228, 0.2548566742796041, 0.2207163459598792, 0.21763166259083522, 0.0453232390594831, 0.05448751312578848, 0.062499176566045755, 0.04264870213422722, 0.05169788990683788, 0.062199652718805565, 0.07161069163615907, 0.044173049022889654, 0.057526412771708]}, "mutation_prompt": null}
{"id": "2a8ad3e5-cab8-422c-b8b1-1912715ae8fd", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "0e68136d-517f-4aae-b104-6c2bb7add125", "solution": "import numpy as np\n\nclass HybridPSOEnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, pso_weight=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.pso_weight = pso_weight\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def pso_step(self, particle, best_particle, global_best):\n        inertia_weight = np.random.uniform(0.4, 0.9)\n        cognitive_component = np.random.rand() * self.pso_weight * (best_particle - particle)\n        social_component = np.random.rand() * self.pso_weight * (global_best - particle)\n        return inertia_weight * particle + cognitive_component + social_component\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        global_best = best_solution\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n            # PSO step\n            for i, particle in enumerate(population):\n                population[i] = self.pso_step(particle, population[best_idx], global_best)\n                if func(population[i]) < func(global_best):\n                    global_best = population[i]\n\n        return best_solution", "name": "HybridPSOEnhancedCuckooSearch", "description": "Implement a hybrid algorithm combining Particle Swarm Optimization (PSO) with Enhanced Cuckoo Search to leverage both global exploration and local exploitation for faster convergence.", "configspace": "", "generation": 35, "fitness": 0.09007923004685417, "feedback": "The algorithm HybridPSOEnhancedCuckooSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.19203906873833865, 0.1648741545002531, 0.18208965914502018, 0.13259839313564847, 0.1081419038710324, 0.1615451519771034, 0.10835968668244078, 0.15287942935081222, 0.12412597085874999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035148229194683855, 0.04648575382259457, 0.03420277041572206, 0.04973108107748214, 0.03214681037763545, 0.04026234159250963, 0.041551239376454774, 0.025101253537864965, 0.01934251674582721, 0.03820462680276904, 0.03870962606551387, 0.0342162478801904, 0.03312817412273106, 0.035865503760095785, 0.02942400573631443, 0.019374899215306884, 0.01731087616217153, 0.017301489574151896, 0.09854070404867821, 0.08864212434013918, 0.1577221463595535, 0.20103124367414582, 0.06751893697543032, 0.07846021981822049, 0.09581432200470696, 0.10286891608619786, 0.0880750179494375, 0.06302358489501836, 0.0361085375302167, 0.047881532124283366, 0.07334751042680676, 0.04198916132288777, 0.058404535353342, 0.06943580145298334, 0.011293333694524565, 0.033390021212422294, 0.159209146299354, 0.1727655934040866, 0.17230370815063523, 0.11821317886830873, 0.0754946150277418, 0.0646714402701486, 0.09308733159854488, 0.05877716364961416, 0.07948682999061563, 9.999999999998899e-05, 9.999999999998899e-05, 0.006577490666717534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003159850708646772, 0.13455844196926225, 0.12225236527034744, 0.11934936083421566, 0.1037983595236115, 0.133088873179517, 0.12060093776389536, 0.11538897437803719, 0.11732572967274424, 0.11212447523377289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006707858827618485, 0.01978966846864827, 0.006542007871667699, 0.003768694893935609, 0.021931998694086907, 0.020286043865183845, 0.007343713961518783, 0.02951456982633116, 0.08365055031774737, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20099208635365806, 0.19005323697429988, 0.20420454373621721, 0.14745709496646375, 0.13420070921525806, 0.1305282169631119, 0.20976065322098358, 0.19287259691251835, 0.21610233093266318, 0.027494107029060966, 0.014763956060169225, 0.019538272589087136, 0.051157590997313096, 0.02763936807909939, 0.03700079107095766, 0.041265506871419166, 0.03781791960736247, 0.03709818655467512, 0.09480805590234753, 0.11202563407103394, 0.11865468664997902, 0.16990700429284267, 0.09955694991198649, 0.10828606555317855, 0.11068209309222243, 0.11408544098309215, 0.13042643089859107, 0.14415186437489158, 0.15009507405702205, 0.15235825260914682, 0.18353257155036296, 0.18631240684512074, 0.19044527434198122, 0.13285563177006698, 0.14799654043036448, 0.14113806536487483, 0.07799586535827097, 0.08702394008318626, 0.1056636369109869, 0.12276550772265504, 0.12009272979154906, 0.12193725728020888, 0.08318822692813066, 0.11784186088118809, 0.09345203271636215, 0.2700268793157711, 0.29922331076277153, 0.26798381451987063, 0.26656577236278245, 0.2960279148854874, 0.2633701350152249, 0.271876731087102, 0.2763107069098333, 0.2753788619446318, 0.1624095826551224, 0.1567398161028506, 0.1523840852006546, 0.15039848551341006, 0.15579312864856198, 0.14595103756265293, 0.1571602722183688, 0.14391768361414348, 0.15943911626995122, 0.16367660202888323, 0.14103908496982753, 0.1597789779826757, 0.2006978205508615, 0.1207914665021157, 0.12570050706035085, 0.1024440530896622, 0.10916783797147434, 0.10116697861144708, 0.23227570121661079, 0.14969161535870157, 0.13755661583465606, 0.0883968306223123, 0.10288211494614863, 0.10221524139448335, 0.1531650721407195, 0.15182030190999996, 0.16381387391903646, 0.165941492172347, 0.16561182646727757, 0.16444561448878525, 0.16756906631985147, 0.18259412881583936, 0.17739768574092307, 0.16823789610018502, 0.18130794994907173, 0.16282494676883164, 0.05935480516549685, 0.07438376016841353, 0.0585617188957811, 0.060315453477662206, 0.060817725043445736, 0.06939711615979793, 0.08837631064552665, 0.06056976774162126, 0.06116464061955318]}, "mutation_prompt": null}
{"id": "3cdf98bc-69f9-4cc0-9258-c82c9e6ba042", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "7567f452-5d73-439a-b003-87df5326cf13", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "508b0cf7-83e4-4c90-9469-850911e5db4c", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "80d00057-8f25-42f0-9cee-c641b459bbe9", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "bdca0f32-f767-4994-80c8-7bdf8f841e6c", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "f91a605a-8f64-42ec-b2cd-f786c6c5b135", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "7f560d38-930a-4ca7-840c-a16918f6e51f", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "d023d94f-8d53-4824-9a25-625bffc0cca0", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "2be43c57-3f47-4adb-a92a-e3b6e5674b29", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "52553eba-bfe7-497b-a2b6-a1a4d3fe82c6", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "d8c4efb7-8d99-4855-b1c3-fd850d91d69c", "solution": "import numpy as np\n\nclass EnhancedDynamicCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self, fitness):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step / np.mean(fitness)  # Dynamic step size adjustment based on fitness\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight(fitness)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedDynamicCuckooSearch", "description": "Implementing a dynamic step size adjustment mechanism based on the population's fitness to guide exploration-exploitation balance efficiently.", "configspace": "", "generation": 46, "fitness": 0.10189042132780429, "feedback": "The algorithm EnhancedDynamicCuckooSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.14.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.5706412094406478, 0.5654682099291602, 0.5636158370442022, 0.06324987163369045, 0.0720428707382107, 0.05053853012587717, 0.14466525069196612, 0.14836349055414289, 0.11153563835169766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001516920404102673, 0.03128428104796477, 0.015157835439544187, 0.019713109982010923, 0.023194310862369782, 0.024959315136767857, 0.0360440573190417, 0.003774224825993544, 0.009034999156105727, 0.010937925425888673, 0.02334197705669172, 9.999999999998899e-05, 0.08124697298960659, 9.999999999998899e-05, 9.999999999998899e-05, 0.013875853210022604, 0.00017365160671978241, 9.999999999998899e-05, 0.8246753959632981, 0.6813243073534394, 0.8479123099677516, 0.048980495010977565, 0.05589951935077808, 0.03933074792109181, 0.054694150285542475, 0.09372826037841497, 0.051242377426161556, 0.11926636322083273, 0.03879966735294915, 9.999999999998899e-05, 0.15942224653946613, 0.2567677023900886, 0.2002855142035289, 0.03387618869836184, 0.024604716016431438, 9.999999999998899e-05, 0.14162382389220352, 0.06505726846214988, 0.04139131508553362, 0.0897007833097796, 9.999999999998899e-05, 0.07655169346173174, 0.07627937737268708, 0.020337071627346104, 0.209075149529922, 9.999999999998899e-05, 0.00388745473474994, 9.999999999998899e-05, 0.01029587044815905, 0.0002473137922459623, 9.999999999998899e-05, 0.06106663994153383, 9.999999999998899e-05, 9.999999999998899e-05, 0.03992177592522239, 9.999999999998899e-05, 0.05356660026728843, 0.07093738076404732, 9.999999999998899e-05, 0.036864352795474065, 0.02079188715708713, 9.999999999998899e-05, 0.0003825567663050533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06300268290076927, 0.06998453532951188, 0.06388300296062954, 0.0011795309402546916, 9.999999999998899e-05, 9.999999999998899e-05, 0.026554666075180866, 0.034838716012069226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04051165011011837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013882124935640006, 0.4779662073573119, 0.4601317159982219, 0.4751853754196411, 0.1414158770906504, 0.15707789806136785, 0.12388466229444206, 0.36812444908617337, 0.4075880088667778, 0.3662535214644561, 0.014562084806720277, 9.999999999998899e-05, 9.999999999998899e-05, 0.023443343386827076, 0.029488392490395032, 0.06335793542306634, 0.05807190415933383, 0.007878537857070822, 0.0734384041122419, 0.12993347254555554, 0.18989777426068444, 0.1228181850408846, 0.1391434162566766, 0.12149134173973508, 0.09729325446893378, 0.11674334128351127, 0.10218844659501558, 0.1069733743133604, 0.15280750478699578, 0.28437007555022564, 0.14068704997392212, 0.17103244143730678, 0.14755937839067013, 0.16158405033219692, 0.13901432708085648, 0.12424105353378911, 0.10268297414092797, 0.133649640252411, 0.1884192722051885, 0.1201862415497078, 0.1009593421796584, 0.06263903289257855, 0.09381794041873637, 0.06985161926008154, 0.06232563913289946, 0.04561060486537116, 0.18282101023532094, 0.09087745432245298, 0.17998386114903786, 0.18854410839570368, 0.10998136464990294, 0.1615497576672862, 0.20019357718816932, 0.12304391768488498, 0.15085299903725247, 0.13829753704417713, 0.17642517063247232, 0.16527065491026172, 0.12377214977020612, 0.15427331224020924, 0.16734111196004453, 0.13195212409972223, 0.1771280631488409, 0.1343819677637479, 0.11118652553777142, 0.17480053120530414, 0.17926895683169808, 0.6352390642190735, 0.19887904541235546, 0.1432399909204516, 0.09285411953165434, 0.10379395113710166, 0.15283488789314703, 0.08928050483591776, 0.10545639752629143, 0.043759593743534775, 0.06520607405284551, 0.07266203509347324, 0.06339678526591763, 0.09335009789123538, 0.1488168245298882, 0.24827516214195955, 0.19846137346380333, 0.20861623379388416, 0.23289942992188573, 0.18685053928896367, 0.22640419831362235, 0.18205441400998845, 0.30344033919573443, 0.19320230736852062, 0.25885732248708193, 0.03994003756794118, 0.0481011548194914, 0.06289603541971878, 0.037630747890555316, 0.04426918043693728, 0.04713272529883217, 0.050345873751367565, 0.04006665518201391, 0.03998110691430923]}, "mutation_prompt": null}
{"id": "cfbcae99-e156-4491-8f63-7d56fd33f662", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "4f9f0b5a-24b5-4c5c-9b1f-5df55bf883a3", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchSpeed:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def adaptive_step_size(self, iteration):\n        if iteration < self.budget / 2:\n            return 1.0 / (1.0 + np.exp(0.1 * (iteration - self.budget / 4)))\n        else:\n            return 1.0\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for t in range(self.budget):\n            new_population = []\n            step_size = self.levy_flight()\n            adapt_step_size = self.adaptive_step_size(t)\n\n            for i, cuckoo in enumerate(population):\n                cuckoo_new = cuckoo + step_size * adapt_step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchSpeed", "description": "Implement a novel adaptive step size control mechanism based on dynamic adjustments during the search process to accelerate convergence speed.", "configspace": "", "generation": 48, "fitness": 0.22167120649748157, "feedback": "The algorithm EnhancedCuckooSearchSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.549074265333279, 0.5021479010981784, 0.5355389037241516, 0.49455822064507104, 0.4749060627544207, 0.5129554359435173, 0.5421501027748289, 0.4913391697230626, 0.5380589747726255, 0.0335665750392482, 9.999999999998899e-05, 0.04007029758173153, 0.0019847438891501534, 9.999999999998899e-05, 9.999999999998899e-05, 0.06543183778190198, 0.07689710832299024, 9.999999999998899e-05, 0.08414036344366427, 0.10360976607262273, 0.12582685209352873, 0.11276967498187973, 0.10427507958044879, 0.10430830353837628, 0.1343874338944392, 0.1300118905085199, 0.13582256783513857, 0.1338762539618623, 0.10821384813230728, 0.08626876655092741, 0.07642011033142282, 0.10414581030915893, 0.12539172381669983, 0.09385973848546092, 0.07512188095824801, 0.09811222289738886, 0.9435259304897078, 0.9310509847628361, 0.8828025234539975, 0.932081250644529, 0.9320846247593813, 0.9676736382257232, 0.9381220303115527, 0.9340723246401069, 0.9629946035321161, 0.33029993274767355, 0.3026357763435642, 0.3197968112666959, 0.3252148606047114, 0.29905794930412133, 0.3254064698072979, 0.31368015247235814, 0.3385732158521396, 0.2642659222203766, 0.3502608300126996, 0.19030308646596872, 0.24393087544121428, 0.6269064936821935, 0.2537279908914457, 0.2693996133887404, 0.22881635936970468, 0.22494755464770333, 0.20629329104945993, 0.20128621985262718, 0.1614829654375981, 0.18138480974598303, 0.28431153319494307, 0.13057813283200082, 0.15914262837580695, 0.15477119723794697, 0.12699227528455925, 0.15126517042950094, 0.18845646174081543, 0.14130276529281727, 0.1703509274264825, 0.17258579084515846, 0.1388317417473207, 0.16778522800601747, 0.1873769789534001, 0.13362460140082766, 0.16375779876984964, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03495341192016621, 9.999999999998899e-05, 0.04640658466687397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09031761968672614, 0.07397116170631945, 0.1149148040346708, 0.12351696607930007, 0.03724929637355889, 0.06060476328026654, 0.11026511172441045, 0.05753653041694484, 0.08539162595858163, 0.04610105132436293, 0.019983586998922553, 0.04287914672865811, 0.013806229753181132, 0.03744298530279189, 0.03271273169907596, 0.07221511497956834, 0.01722286305263898, 0.0033531419282175623, 0.11987090114217303, 0.05286448458315007, 0.10486493967115895, 0.1166961639866313, 0.08566225297410768, 0.14766213525918614, 0.1468566132250173, 0.07109914315493682, 0.07760113202984886, 0.4717963185638657, 0.4416724873453055, 0.3995955463799228, 0.4143893652603561, 0.43764236464167716, 0.42619066033863584, 0.41572080863834604, 0.4039383462882893, 0.4295695462985224, 0.1173051506749978, 0.0892851412756771, 0.09273341616258823, 0.09785842804604672, 0.09261349298542576, 0.13000542030966955, 0.14352912221906733, 0.09613545044036675, 0.07939693932778391, 0.2241511928885106, 0.2836051931308484, 0.2059764477913103, 0.27872632623157445, 0.30924717404505686, 0.29914458262460364, 0.26270250442689835, 0.16581368245813333, 0.2398045284888607, 0.23680436399112137, 0.2827849707440905, 0.24037288512118393, 0.29216035950578956, 0.3153769310245722, 0.1727326609543839, 0.2899899856533168, 0.24688874581812648, 0.2188983586161214, 0.24140499461801923, 0.24167067133274323, 0.19657934302478997, 0.198478423698622, 0.1390827158037733, 0.20548502065451035, 0.23049418448700343, 0.19099932180267165, 0.2274595668524254, 0.206996441510382, 0.24032378914655128, 0.1883873192239357, 0.1983049548864525, 0.19488018493878023, 0.2143114384161584, 0.20666096372716358, 0.1995559083590024, 0.23041772108305603, 0.21440079944530865, 0.19219922429115766, 0.20171265298866814, 0.18931272083308104, 0.2067029904115799, 0.1865877831572078, 0.20789903812106458, 0.18746163640676705, 0.20133631944872632, 0.1983002505146112, 0.18385113579125767, 0.16524065794273357, 0.7686223491751181, 0.20100203473509348, 0.16159952972179237, 0.16162329069689463, 0.15677478803789013, 0.17415400722817287, 0.27297710666295083, 0.47935851159210197, 0.2116252113470689, 0.16709807553917067, 0.40046919561239647, 0.21143539759570706, 0.16757151865227604, 0.20620694787762495, 0.3198855265196897, 0.20762917796802738, 0.18396342514179242, 0.2002633556219665, 0.19205502534957464, 0.21216900935515615, 0.18929725228479255, 0.21545824688459148, 0.1854104721154073, 0.20392223957781708, 0.091703811386179, 0.09734646806570457, 0.11512093431064385, 0.13139630934924296, 0.1115358662800785, 0.09403541705538498, 0.10011195491362523, 0.08119677925932778, 0.08332759253413369]}, "mutation_prompt": null}
{"id": "f8dba738-ff28-419f-9c16-d56366d340c5", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "3884e50d-88eb-45c5-81fc-519ca307ef58", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchConvergenceSpeed:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self, fitness_improvement):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta) * 1.1 if fitness_improvement > 0 else u / abs(v) ** (1 / beta) * 0.9\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight(fitness[i] - func(cuckoo))\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchConvergenceSpeed", "description": "Implement a modified mechanism to dynamically adjust the step size based on the fitness improvement of solutions to accelerate convergence.", "configspace": "", "generation": 50, "fitness": 0.20828470461802479, "feedback": "The algorithm EnhancedCuckooSearchConvergenceSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.44149203656082847, 0.4384635004704711, 0.4183539066839098, 0.4471696825502558, 0.4176373756575297, 0.44836432042088115, 0.44548508886981575, 0.4490426206021463, 0.39967015651015847, 0.001318330647899879, 0.002003152554521326, 0.0028449723685611827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09707650040640525, 0.09125276032839702, 0.10418014601983105, 0.08288815981276709, 0.09861770741846154, 0.08545759187490476, 0.08431561884882999, 0.08215541991393582, 0.08033134855154245, 0.08826238177315826, 0.07606969540578812, 0.0934787139438451, 0.0699130135185344, 0.06255024620339988, 0.10554971937066548, 0.09849400250658069, 0.06693994090529065, 0.09260556935325259, 0.9307022498757258, 0.9005216399882349, 0.9261511804942454, 0.9246283891008054, 0.86451670041533, 0.8545573719541056, 0.912528999550082, 0.7180382266867154, 0.8839162090347994, 0.2651435605040853, 0.26515910539037246, 0.2176057180097315, 0.294736180015456, 0.2395512238813986, 0.2628192692212836, 0.24682884783114833, 0.24386526165609557, 0.1969320802438117, 0.3452694785974122, 0.20833324971880862, 0.2040105615951282, 0.6036569954274158, 0.18557422355923991, 0.19486298015624715, 0.22419579070235574, 0.19736890586176703, 0.2240921915012617, 0.1772252172868357, 0.14276145344683244, 0.14879164381494114, 0.2201114299838921, 0.12858847088879155, 0.17726789118999953, 0.14134585860446458, 0.14961212700100335, 0.24127263304322843, 0.12391606702652858, 0.14604054873299044, 0.12748427358640835, 0.2109588437443276, 0.14218803207016772, 0.12186319504909682, 0.15654181717418014, 0.15476519124670107, 0.16244302960874923, 9.999999999998899e-05, 0.00010829846642923524, 9.999999999998899e-05, 0.057281954123103995, 9.999999999998899e-05, 0.09180630128524958, 9.999999999998899e-05, 9.999999999998899e-05, 0.023386014006971156, 0.07218220566110811, 0.07199318187033388, 0.10426825279056251, 0.05427978561499369, 0.04008428693157384, 0.0315364626799024, 0.1417773296021333, 0.059557809877949563, 0.052964686013544315, 0.007050942119231296, 9.999999999998899e-05, 0.004756698433313056, 0.0011516732346944503, 0.0014536830648319565, 0.01753729111285407, 0.012737004433581056, 9.999999999998899e-05, 0.0033782417553961386, 0.11635150675041206, 0.05193311485678187, 0.07096946409807747, 0.11753170437812621, 0.10315890408684192, 0.09600463080001753, 0.12422981715201697, 0.11178760393164944, 0.11228855016479466, 0.43138882683824153, 0.38119461744984096, 0.40506511910909426, 0.3749788695061189, 0.38326579218605117, 0.37060870241641575, 0.41512672241296256, 0.3615133981112033, 0.41127669504861464, 0.06265887016510807, 0.08881634326564813, 0.12418376396603836, 0.12942743307253335, 0.10778583110148543, 0.11458201753867148, 0.1369722887287782, 0.1012732701562642, 0.17388702937160028, 0.18562257463119658, 0.2982344596362134, 0.16321346331529873, 0.1828104410067991, 0.1635557887674035, 0.19027189217152818, 0.23924656849558856, 0.18361198557038183, 0.17492001950617064, 0.2786878237673581, 0.23213886256459115, 0.2510033301673844, 0.2799630844582752, 0.26996501008651574, 0.23891688636228325, 0.23403648574349845, 0.30286162563945584, 0.19368896578190953, 0.2137964873553344, 0.16607753688221405, 0.19350704148885856, 0.13905088790338938, 0.19843120989973562, 0.17779507918089277, 0.16479957044537563, 0.15562454895551747, 0.16886299486749978, 0.20671197808827058, 0.18990210066369917, 0.19961645132633254, 0.17858415276052675, 0.18650688963805917, 0.21075286332453025, 0.1925385586426671, 0.18592893046080894, 0.1834919389319961, 0.19316308289246364, 0.20252736869509158, 0.19511016505892742, 0.2057474762919994, 0.1900383105352561, 0.20051014881471663, 0.1862529878481547, 0.17116432904333978, 0.17198744711627245, 0.17052668549672978, 0.18046899395645266, 0.5189628247032159, 0.6292301937921633, 0.19985276323816803, 0.15924300926201918, 0.506835665922994, 0.5203916097325068, 0.18700778990233935, 0.3490153567304919, 0.40044958928941143, 0.30460157776620533, 0.5473415368703156, 0.48652064804631867, 0.20345856354289515, 0.15059116580100385, 0.15048028733324315, 0.5401778049303306, 0.2011402922056965, 0.18559903693842206, 0.18630745133397686, 0.21062612204381126, 0.178415671814649, 0.21513781343934057, 0.18624270360913475, 0.1860769654285166, 0.19954486953852246, 0.0904800703738059, 0.07183103686588199, 0.0790500619382778, 0.06273198876108022, 0.10227124069649585, 0.0881040149293747, 0.07828094438038047, 0.08375418406203772, 0.07793487376744268]}, "mutation_prompt": null}
{"id": "c9be803e-25fb-48af-ab33-2b242c9cda8b", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchMultiPop:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, num_pops=3, share_interval=50):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.num_pops = num_pops\n        self.share_interval = share_interval\n\n    def __call__(self, func):\n        populations = [np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim)) for _ in range(self.num_pops)]\n        fitness = [[func(x) for x in pop] for pop in populations]\n        best_solutions = [pop[np.argmin(fit)] for pop, fit in zip(populations, fitness)]\n        \n        for _ in range(self.budget):\n            for i, (population, pop_fit, best_sol) in enumerate(zip(populations, fitness, best_solutions)):\n                new_population = []\n                for j, cuckoo in enumerate(population):\n                    step_size = self.levy_flight()\n                    cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                    cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                    if np.random.rand() > self.pa:\n                        idx = np.random.randint(self.population_size)\n                        cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                    new_fitness = func(cuckoo_new)\n                    if new_fitness < pop_fit[j]:\n                        population[j] = cuckoo_new\n                        pop_fit[j] = new_fitness\n\n                        if new_fitness < func(best_sol):\n                            best_solutions[i] = cuckoo_new\n\n                if np.random.rand() < self.elitism_rate:\n                    worst_idx = np.argmax(pop_fit)\n                    population[worst_idx] = best_sol\n                    pop_fit[worst_idx] = func(best_sol)\n\n            if _ % self.share_interval == 0:\n                best_global_sol = min(best_solutions, key=lambda x: func(x))\n                for i in range(self.num_pops):\n                    best_solutions[i] = best_global_sol\n\n        return min(best_solutions, key=lambda x: func(x))", "name": "EnhancedCuckooSearchMultiPop", "description": "Introducing a multi-population strategy where each subpopulation operates independently, sharing the best solutions periodically to improve exploration and exploitation capabilities.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedCuckooSearchMultiPop' object has no attribute 'levy_flight'\").", "error": "AttributeError(\"'EnhancedCuckooSearchMultiPop' object has no attribute 'levy_flight'\")", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {}, "mutation_prompt": null}
{"id": "37e587ec-206a-440a-96fc-cc3757b08e1b", "solution": "class EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.step_sizes = np.ones(self.population_size)\n\n    def levy_flight(self, step_size):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = step_size * u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.step_sizes[i]\n                cuckoo_new = cuckoo + self.levy_flight(step_size) * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n                    # Dynamic step size adaptation\n                    if new_fitness < fitness[i]:\n                        self.step_sizes[i] *= 1.1\n                    else:\n                        self.step_sizes[i] *= 0.9\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Implementing dynamic step size adaptation based on the fitness landscape to improve convergence speed.", "configspace": "", "generation": 52, "fitness": 0.20871212717626403, "feedback": "The algorithm EnhancedCuckooSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.7770157945216496, 0.7382811444508569, 0.8885544060343402, 0.32398418376050875, 0.6387015735937881, 0.26985507049240676, 0.8690196016746213, 0.5945607370861917, 0.7266936630683438, 0.0685573982373715, 9.999999999998899e-05, 9.999999999998899e-05, 0.009594851660878922, 9.999999999998899e-05, 9.999999999998899e-05, 0.05698002642283451, 9.999999999998899e-05, 9.999999999998899e-05, 0.09341740447229618, 0.08695108526063144, 0.11406956104302735, 0.07897019195124011, 0.07152026833029979, 0.11809727515439739, 0.09276187826511506, 0.059896258599836605, 0.09725065714407288, 0.15154151086600198, 0.06895073078101266, 0.11429955044901419, 0.11071634972692423, 0.0429899558737703, 0.05631802627641502, 0.10029503470647472, 0.041911807970246295, 0.06715989566089353, 0.8774415088174198, 0.11703869263527211, 0.9299183900130069, 0.9657222110665162, 0.8616203108665932, 0.10180617109118084, 0.5853345078588424, 0.19811722654545327, 0.09506452809251875, 0.26070448896255316, 0.1259086812266198, 0.10458445660820015, 0.14733396828195477, 0.20177245018678747, 0.17781309098571874, 0.11376752768999543, 0.09482555838353202, 0.07638123653700657, 0.5482913671652647, 0.20263666455673446, 0.38188549403179006, 0.20825324942206225, 0.27217210466887676, 0.20709817582919932, 0.40753768049419536, 0.16626033975711885, 0.23582670247141246, 0.17118864390595478, 0.12258154384813169, 0.17416626516440648, 0.21048922007572168, 0.1266096294357063, 0.13289180810306356, 0.129103265602035, 0.13295172281292855, 0.25748884974457553, 0.1704750153055853, 0.1262164763668987, 0.13443772481317118, 0.17963739254427324, 0.11881665454556911, 0.1846149678802298, 0.1722143510254649, 0.12700389262600587, 0.14016251294280158, 0.08731145682054886, 0.00827273486134783, 0.07474383704631726, 0.04184268786851009, 9.999999999998899e-05, 0.011397699007615891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11851064386243337, 0.0728889213334123, 0.10817787154593572, 0.11299401202330261, 0.055063754626389905, 0.0977280659793005, 0.08806084530323299, 0.1377729986155959, 0.08244945240739432, 0.13033963679570648, 0.2625656108997463, 0.07740319899747972, 0.2138740022985709, 0.1816602431551022, 9.999999999998899e-05, 0.1522344908127663, 9.999999999998899e-05, 0.09860709359549369, 0.30932933546501207, 0.08359805647036023, 0.09870575154828365, 0.033387138030882335, 0.18760823611112887, 0.12639691630626093, 0.11611468647880685, 0.18044941265849324, 0.037058078453659604, 0.22925755314739715, 0.5278110011939812, 0.4526137151066003, 0.5037284959876765, 0.38138262272256773, 0.4722749014957851, 0.19473899893639357, 0.5494364439664432, 0.37656212591339533, 0.41809424838861353, 0.07579766927984988, 0.05986892081883066, 0.07078742005527983, 0.08290735241883795, 0.08257553046732624, 0.09754764116291703, 0.14391038755058871, 0.11008575215968408, 0.18746235125799027, 0.20111548749056218, 0.25430533467267247, 0.21144446608827394, 0.2283552575468838, 0.4059648417004399, 0.22635304520521193, 0.3125292791293526, 0.25697372354387304, 0.3469746644183296, 0.2734485329341776, 0.2545060918535571, 0.2380669389940684, 0.28332503733578485, 0.19894648153538708, 0.29274928967283864, 0.2138741714065917, 0.19337042073734934, 0.20665927436266152, 0.27917697336333047, 0.20615807476770842, 0.29919465674979684, 0.23931389198172315, 0.20654046559093586, 0.17591320559421753, 0.18414530469893753, 0.23403400353845683, 0.18705251419288493, 0.1999263958894808, 0.17957370530573957, 0.2207012055362656, 0.25676488187812885, 0.22071551459947747, 0.18142523047498604, 0.18656108154532747, 0.1760483413002989, 0.23082029871119092, 0.22478849329125128, 0.2220659072521176, 0.21310496783609445, 0.1897665534377745, 0.20381641557490537, 0.18487845160123983, 0.20987040306223603, 0.1894023879744915, 0.1872489823044592, 0.1702279409451508, 0.19693079530597624, 0.273095982338483, 0.9251353599778586, 0.2017395039219031, 0.1632772225225806, 0.2071877556738737, 0.157623971728707, 0.16207770410512512, 0.35485671627297166, 0.4613293138169019, 0.20061654034778376, 0.21268543685673547, 0.2357958182855998, 0.20790558880153587, 0.11246902109703172, 0.16750109409343206, 0.2184173358555348, 0.19468089329725768, 0.20871976009297188, 0.21928236155395564, 0.2115855400231661, 0.2030913653802252, 0.20334721264804034, 0.21249133959059952, 0.20336876756080735, 0.21827344488335465, 0.11125861791270786, 0.08168478494851572, 0.10070596616037508, 0.06112353284186389, 0.07898895277213291, 0.10616785862912437, 0.13504744483131492, 0.12136731111497756, 0.08421795126991782]}, "mutation_prompt": null}
{"id": "a58c458c-3e8e-482f-9fed-8e8db3c95f75", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "faa9a95b-a6e4-4c13-9cdb-07001ef45e85", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImproved:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, beta=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.beta = beta\n\n    def levy_flight(self, step_size):\n        sigma = (np.math.gamma(1 + self.beta) * np.sin(np.pi * self.beta / 2) / (np.math.gamma((1 + self.beta) / 2) * self.beta * (2 ** ((self.beta - 1) / 2)))) ** (1 / self.beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / self.beta)\n        return step_size * step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        step_sizes = np.ones(self.population_size)\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight(step_sizes[i])\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n                # Adaptive step size control based on individual performance\n                if new_fitness < fitness[i]:\n                    step_sizes[i] *= 1.2\n                else:\n                    step_sizes[i] /= 1.2\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImproved", "description": "Implementing adaptive step size control based on individual performance to improve exploration-exploitation balance.", "configspace": "", "generation": 54, "fitness": 0.07848348582405312, "feedback": "The algorithm EnhancedCuckooSearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.2249964706592129, 0.18179879062894466, 0.1939475509984001, 0.09899104391069724, 0.1119253728280184, 0.09034910795780904, 0.1218885886256168, 0.13164179924806374, 0.22248502899195333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03770745076303139, 0.03586897592605687, 0.02695831488155087, 0.0374898131325766, 0.02895580513412155, 0.04270184648587527, 0.03310114128169028, 0.03962689656435636, 0.03796879901530392, 0.031942913351098334, 0.0069614017229255865, 0.010159007183015656, 0.06424628046298353, 9.999999999998899e-05, 0.005612932099767209, 0.029686734781127933, 0.006799243600831173, 9.999999999998899e-05, 0.07284467481342471, 0.052857581595806225, 0.07207044553341002, 0.16011803365078447, 0.0815313373255876, 0.05036332499371399, 0.09126085311533083, 0.06331172652975514, 0.03810314562692274, 0.0862826614256399, 0.011547947140747583, 9.999999999998899e-05, 0.040522848373994, 0.11066351028636223, 0.03953589997845375, 0.08818265662510749, 0.023619623255784372, 9.999999999998899e-05, 0.13041394461277867, 0.06356428759435417, 0.05288204077190495, 0.08764236974389128, 0.03312503193871941, 0.05503593255421946, 0.07743324497499382, 0.038205406681226295, 0.06632792644939545, 9.999999999998899e-05, 9.999999999998899e-05, 0.05721550274216847, 9.999999999998899e-05, 9.999999999998899e-05, 0.03463862966227427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016857601582684567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016735577745982333, 0.024584456026988666, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08569114241588682, 0.10585410544966722, 0.11602569524757511, 0.06471663589931964, 0.049836223170081184, 0.015149459276092014, 0.19062576151497834, 0.13554436883229048, 0.0686408004164687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17536363925356113, 0.1822392127747927, 0.18468317228302134, 0.1086290549450245, 0.1507780461047994, 0.12042920839761051, 0.15369571935277437, 0.19690591193247065, 0.17958390883471798, 0.021507762840374034, 0.03252491333822238, 0.03809063709854943, 0.03464509171759533, 0.05732233085481597, 0.06138613016532546, 0.06335005191191778, 0.04805884289879325, 0.11822871976608385, 0.14485922318089595, 0.1533949272135504, 0.11010510283676667, 0.13243112991613326, 0.17100909556608912, 0.12069340752997704, 0.14379975055204064, 0.2098587832273915, 0.10896275312221082, 0.14089625617753077, 0.1371950068207618, 0.1508570897334539, 0.15160453879236468, 0.11908818881047822, 0.12869829601961724, 0.1388606972620302, 0.1295821995533062, 0.12515582541290549, 0.07583722880776445, 0.058079905011980015, 0.12051212903344732, 0.061456938410701545, 0.07197925335354138, 0.06294568144260104, 0.07215348346549222, 0.05473683372867977, 0.10183366021458917, 0.19361533961283972, 0.12022660123948448, 0.1853519214407554, 0.21253187402655327, 0.1196163859661259, 0.1919866635123736, 0.2012556235491939, 0.14131737734193817, 0.1895691055461619, 0.14350245733308986, 0.169369785418092, 0.16608990479060792, 0.18428601287567847, 0.1659499164469055, 0.16709798426570632, 0.17612787105216066, 0.15429796682427566, 0.13801124348141547, 0.11092097790985023, 0.1200626430238304, 0.11158105588798772, 0.16030312470513186, 0.167007163610974, 0.1392327625399553, 0.09837032565298709, 0.10200082591847748, 0.1432136402227212, 0.22241793810931998, 0.15954423091045877, 0.0613972426499102, 0.1138513601180704, 0.08811954286181078, 0.16962944177459105, 0.05764675149425458, 0.04462448447022693, 0.10398116952514358, 0.1897985074648446, 0.19354850464177376, 0.18731395691896546, 0.197908861736924, 0.16389510630510873, 0.17413260091085359, 0.20980482139064693, 0.16148223202051482, 0.19965370521542314, 0.03973495127871007, 0.03237735023858479, 0.057925602721781266, 0.03346067038282163, 0.043516046215751114, 0.046118098653715744, 0.06110834452578495, 0.044686833810121285, 0.06917456197754313]}, "mutation_prompt": null}
{"id": "1c5da366-a229-4e77-96b2-77014384d4cd", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "2c3ebfc4-314b-46fe-892f-0abbf7402bc9", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "090a212a-04c5-47fb-a8da-3ee8f67ca88a", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "9b7a500f-2f06-4f87-844e-13a94eacba9e", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchAccelerated:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self, fitness):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        \n        # Dynamic step size adaptation\n        step *= np.mean(fitness) / np.std(fitness)  # Adjust based on the population's fitness\n        \n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight(fitness)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchAccelerated", "description": "Introducing a dynamic step size adaptation based on the population's fitness to accelerate convergence speed.", "configspace": "", "generation": 58, "fitness": 0.13890305704419936, "feedback": "The algorithm EnhancedCuckooSearchAccelerated got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.1652732705853014, 0.20023123668776155, 0.17604362218094227, 0.1657545268814713, 0.14548131275044784, 0.14704022802765393, 0.16341585038396567, 0.11569087010956103, 0.23101966016270592, 0.02506556349018696, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03454308351859303, 0.043590121698008244, 0.016035891087155307, 0.04981170487707254, 0.10231745953048976, 0.07462666826196296, 0.05531220237959589, 0.06249124444679144, 0.048062196937553425, 0.037938061532738376, 0.03691982501506952, 0.049964891924654364, 0.06383530917558733, 0.04438828754871682, 0.03160638004356331, 0.06221798070820583, 0.05854695699725676, 0.029897398760002525, 0.9598441564920347, 0.9549801039378114, 0.962118975824868, 0.986172523563713, 0.9891268834506395, 0.9784374722290461, 0.9712383584311912, 0.9819688422882572, 0.9754757725865564, 0.16279237412931558, 0.14605579982922934, 0.16789314727211946, 0.09127952374269133, 0.20459646663257947, 0.13749655185016907, 0.06645327485687413, 0.08279471363050683, 0.08832807543781851, 0.17449403370125616, 0.06751759955143843, 0.13767678770562397, 0.1724158375638135, 0.19114248289603541, 0.20723272337272736, 0.21869103029376724, 0.15500961720861506, 0.2307906189512079, 0.06890853637225391, 0.09273120791166234, 0.08796528171150897, 0.052146270316403176, 0.10946564246844281, 0.1130255846469006, 0.08065914245074457, 0.14422892361873507, 0.05917388225725995, 0.10960162325299794, 0.1085116969363753, 0.09159569832760883, 0.10204547645897022, 0.12837908776060136, 0.09323584067908364, 0.12972551629568785, 0.1103638235160388, 0.1217183894467565, 9.999999999998899e-05, 0.05528467748786936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004069414910662372, 0.03625699674709937, 0.0701686072431148, 0.09872471109285985, 0.07867246651340443, 0.03759745157919936, 0.02950086793293849, 0.13349281663947077, 0.06034799169611105, 0.09692031135932322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026028741210775475, 0.03296106509348029, 0.06504316146978273, 0.10845613957049605, 0.09440093079027356, 0.07193209082265384, 0.039621492573371, 0.03704281392879072, 0.0345706304524368, 0.1874725005105382, 0.23942484504379835, 0.18907181907695936, 0.1529038270763956, 0.14410245147846412, 0.1987958442231289, 0.1771073194699313, 0.2214611618097776, 0.15679779336005317, 0.04690151060418213, 0.04455194013244834, 0.034134051101547436, 0.06764606853598831, 0.055163188361193494, 0.0573512532254663, 0.0569807224297052, 0.08310043883804352, 0.07303986297590948, 0.13975859390797174, 0.13347889740941232, 0.12384902191205982, 0.09855305120349966, 0.10064481650025159, 0.10658134701948652, 0.14946603660478375, 0.14423758708004775, 0.14067419069758003, 0.18970432263376436, 0.204387602213145, 0.20671395945233184, 0.1695386490756653, 0.1808848267324532, 0.19088780770098346, 0.11757438795356046, 0.12043266483814496, 0.09820920027542812, 0.1346419516768519, 0.1402041267307521, 0.14117620653561058, 0.1543277145750348, 0.17314396681961075, 0.11373700793876618, 0.07976621133222761, 0.08756352382838029, 0.08348501413028664, 0.16969554585401747, 0.14732028368752015, 0.11693192502577765, 0.11269974452760201, 0.13336354244497794, 0.11844087432316042, 0.1277921093629446, 0.12458640710723012, 0.12667576862070928, 0.16392882273652687, 0.15855038295688262, 0.16103063505242754, 0.16904853040731183, 0.16379043848125274, 0.16307209178742654, 0.15941196208281794, 0.16242783096999935, 0.17256002844225493, 0.14004995105405527, 0.16858944610824744, 0.16203015892162476, 0.4360024425418907, 0.1991868362166459, 0.1674226310407837, 0.08362460692437235, 0.15475513511603078, 0.12098165229685542, 0.09638393273594703, 0.092113039199474, 0.0781278912943284, 0.018606112313171663, 0.10184386128658329, 0.049263280404200804, 0.17500720150139548, 0.20709808537656216, 0.149072192844531, 0.15319153396807217, 0.15841171934264753, 0.17379288485028188, 0.15269152739804837, 0.169653797496494, 0.14993478112718528, 0.17329086565223684, 0.1804282732776301, 0.15210501185846736, 0.059756919876887915, 0.04143010423253923, 0.04525721678322314, 0.05847782691594128, 0.04478638396176249, 0.035946603839263847, 0.06357687136641765, 0.05544218502077436, 0.0613130652445536]}, "mutation_prompt": null}
{"id": "f876d57a-0072-4473-9eeb-c884b620282e", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "f824881f-a7a2-446e-97d4-1ab4d6cf69d9", "solution": "import numpy as np\n\nclass AcceleratedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.adapt_rate = adapt_rate\n\n    def levy_flight(self, step_size):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = step_size * u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = np.exp(-self.adapt_rate * _ / self.budget)\n                step = self.levy_flight(step_size)\n                cuckoo_new = cuckoo + step * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "AcceleratedCuckooSearch", "description": "Accelerating convergence speed by enhancing diversity through adaptive step size adjustment and random perturbations.", "configspace": "", "generation": 60, "fitness": 0.23669676027446554, "feedback": "The algorithm AcceleratedCuckooSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4986204960334829, 0.5372011118741905, 0.5434161880937944, 0.5178920458597431, 0.5316716768050754, 0.5600927445238322, 0.5531849911266463, 0.5252037183992253, 0.49291549644124133, 9.999999999998899e-05, 0.005294364839732002, 9.999999999998899e-05, 0.08893487336034178, 9.999999999998899e-05, 9.999999999998899e-05, 0.027416835356563918, 9.999999999998899e-05, 9.999999999998899e-05, 0.08818389506459534, 0.10084791014370698, 0.10484932212057496, 0.12007959216584163, 0.11341226587013864, 0.09013375997289308, 0.08673727268875242, 0.11432719813865877, 0.12003869021244395, 0.10911110046740047, 0.09425241250472538, 0.09652074603284078, 0.11352897136650386, 0.08189672329550157, 0.105560345318914, 0.11870070937832478, 0.07108435845990257, 0.10764910161187291, 0.9649340488199781, 0.9497578632579767, 0.962425361425904, 0.9659796382036885, 0.9221598105099237, 0.9317298450922965, 0.9556505807484076, 0.8902609457648543, 0.9339854658109855, 0.31614266261089274, 0.30170608603803295, 0.3255250042436263, 0.2919172281256035, 0.33169786561992687, 0.33635176124222066, 0.33628954104716025, 0.3448639317814579, 0.29596189193907196, 0.2803995286848271, 0.46103115029499075, 0.22390513420329106, 0.349842674131735, 0.3473792696174768, 0.2697375761359836, 0.3053423448256327, 0.22415285895159454, 0.33142204701449085, 0.2370499074560235, 0.1498266724375693, 0.18250165590707634, 0.2610828088347762, 0.2704916996592639, 0.132569948950103, 0.15157199593624116, 0.14990404635868004, 0.12597335206083082, 0.13600594270557376, 0.16138228522852427, 0.2672050535471897, 0.16854936420837585, 0.2235668793198966, 0.1663053976589336, 0.1603410183386772, 0.1647586811501871, 0.16869787371427647, 0.047168887265186976, 9.999999999998899e-05, 9.999999999998899e-05, 0.051315425236195145, 0.002244941980544035, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036657540180574655, 0.046710892790658876, 0.11153567205910953, 0.07442995002974018, 0.1283838859239107, 0.047952429565924604, 0.09748521917521935, 0.06008723628434587, 0.0943667840053738, 0.04107103719130667, 0.06619337392126401, 0.01189813491879721, 0.011889906983212684, 0.015528655800548075, 0.024606721993906455, 0.02404011476750545, 0.01765889053956582, 0.037635794064619255, 0.05919788593138131, 0.0261687386748799, 0.13636480589093847, 0.12956161624390639, 0.1283797934904629, 0.13829367039430795, 0.13782604498228523, 0.095347287965875, 0.11928729224514611, 0.12979611298608984, 0.11097898982416887, 0.4498189492927601, 0.4096095215913105, 0.4185272267679163, 0.43687073842621704, 0.41638494140170734, 0.3943017836040169, 0.45561896218847797, 0.4201660214634404, 0.4602174124991082, 0.10630204069409244, 0.10999236425691528, 0.1261367810520303, 0.07646915355290362, 0.11215507366813648, 0.10801241350341373, 0.1113322685853142, 0.12100251529021677, 0.12849243663272103, 0.15896343603786067, 0.27211325890849225, 0.19179970258295487, 0.23798464899878635, 0.228561104689866, 0.18830012478258817, 0.2857353809460996, 0.19066625402145831, 0.23538893435522357, 0.2554400847566335, 0.28592008035973804, 0.2976769851355904, 0.25150131837356215, 0.27958605704797224, 0.26962098149173996, 0.20875884270444955, 0.1787614454006189, 0.20878662988295937, 0.2091296633712062, 0.213977016829225, 0.20433017745263948, 0.25808885027992334, 0.2012056180275843, 0.17500718331036225, 0.18496046670906874, 0.2483633294609584, 0.22444906696133016, 0.20091152934392198, 0.1689106063987863, 0.20348255111639424, 0.18620176834162971, 0.19943785615131981, 0.19310939777993896, 0.2151291812904227, 0.20761762001986606, 0.196250316748656, 0.20714552945486653, 0.21340727752190747, 0.19812207396297554, 0.20704585251850705, 0.20189365952534755, 0.22466101033345087, 0.20324982690268667, 0.18770283448064307, 0.20541019599328336, 0.15749944148552808, 0.19667977723357444, 0.6353571956797694, 0.7020924907084298, 0.20008240791928533, 0.16173542216622316, 0.7206896796376108, 0.20641651774414294, 0.17646965111632307, 0.408294587929412, 0.44435971066156543, 0.5904776897032352, 0.6490254169346317, 0.5408695096998462, 0.20979471756019752, 0.29527930132022606, 0.5627983509109894, 0.5175833150254909, 0.21845254898017652, 0.1885847675649649, 0.21758304792234517, 0.2004647137647665, 0.2383105243473418, 0.2008476873709173, 0.19653651340336253, 0.2070788210654263, 0.22453176516732276, 0.11005703283574986, 0.1328733404189597, 0.084282339499825, 0.09004358881175634, 0.08359763871441006, 0.10565015413689449, 0.08205863162566107, 0.08873909845484118, 0.07995892224303713]}, "mutation_prompt": null}
{"id": "37f181ec-125b-41ac-98bc-bc86b84cc043", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImproved:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        step_sizes = np.ones(self.population_size)  # Initialize step sizes\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * step_sizes[i]  # Adaptive step size\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n                    # Update step size based on individual performance\n                    step_sizes[i] *= 1.1 if new_fitness < fitness[i] else 0.9\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImproved", "description": "Incorporating an adaptive step-size mechanism based on individual performance to dynamically adjust exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 61, "fitness": 0.20871212717626417, "feedback": "The algorithm EnhancedCuckooSearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.7770157945216414, 0.7382811444508569, 0.8885544060343414, 0.32398418376050875, 0.6387015735937881, 0.26985507049240676, 0.8690196016746028, 0.5945607370861917, 0.7266936630684078, 0.0685573982373715, 9.999999999998899e-05, 9.999999999998899e-05, 0.009594851660878922, 9.999999999998899e-05, 9.999999999998899e-05, 0.05698002642283451, 9.999999999998899e-05, 9.999999999998899e-05, 0.09341740447229618, 0.08695108526063144, 0.11406956104302735, 0.07897019195124011, 0.07152026833029979, 0.11809727515439739, 0.09276187826511506, 0.059896258599836605, 0.09725065714407288, 0.15154151086600198, 0.06895073078101266, 0.11429955044901419, 0.11071634972692423, 0.0429899558737703, 0.05631802627641502, 0.10029503470647472, 0.041911807970246295, 0.06715989566089353, 0.8774415088174198, 0.11703869263527211, 0.9299183900130069, 0.9657222110665162, 0.8616203108665932, 0.10180617109118084, 0.5853345078588424, 0.19811722654545327, 0.09506452809251875, 0.26070448896255316, 0.1259086812266198, 0.10458445660820015, 0.14733396828195477, 0.20177245018678747, 0.17781309098571874, 0.11376752768999543, 0.09482555838353202, 0.07638123653700657, 0.5482913671652647, 0.20263666455673446, 0.38188549403179006, 0.20825324942206225, 0.27217210466887676, 0.20709817582919932, 0.40753768049419536, 0.16626033975711885, 0.23582670247141246, 0.17118864390595478, 0.12258154384813169, 0.17416626516440648, 0.21048922007572168, 0.1266096294357063, 0.13289180810306356, 0.129103265602035, 0.13295172281292855, 0.25748884974457553, 0.1704750153055853, 0.1262164763668987, 0.13443772481317118, 0.17963739254427324, 0.11881665454556911, 0.1846149678802298, 0.1722143510254649, 0.12700389262600587, 0.14016251294280158, 0.08731145682054886, 0.00827273486134783, 0.07474383704631726, 0.04184268786851009, 9.999999999998899e-05, 0.011397699007615891, 9.999999999998899e-05, 9.999999999998899e-05, 0.11851064386243337, 0.0728889213334123, 0.10817787154593572, 0.11299401202330261, 0.055063754626389905, 0.0977280659793005, 0.08806084530323299, 0.1377729986155959, 0.08244945240739432, 0.13033963679570648, 0.26256561089975017, 0.0774031989975027, 0.21387400229856945, 0.1816602431551022, 9.999999999998899e-05, 0.15223449081276597, 9.999999999998899e-05, 0.09860709359549369, 0.30932933546500363, 0.08359805647036023, 0.09870575154828365, 0.033387138030882335, 0.18760823611112754, 0.12639691630626093, 0.11611468647880685, 0.18044941265849324, 0.037058078453659604, 0.22925755314740015, 0.5278110011939812, 0.4526137151066003, 0.5037284959876765, 0.38138262272256773, 0.4722749014957851, 0.19473899893639357, 0.5494364439664514, 0.37656212591339533, 0.41809424838861353, 0.07579766927984988, 0.05986892081883066, 0.07078742005527983, 0.08290735241883795, 0.08257553046732624, 0.09754764116291703, 0.14391038755058871, 0.11008575215968408, 0.18746235125799027, 0.20111548749056218, 0.25430533467267247, 0.21144446608827394, 0.2283552575468838, 0.4059648417004399, 0.22635304520520638, 0.3125292791293526, 0.25697372354382875, 0.34697466441833513, 0.2734485329341776, 0.2545060918535571, 0.2380669389940684, 0.28332503733578485, 0.19894648153538197, 0.29274928967283864, 0.2138741714065917, 0.19337042073734934, 0.20665927436266152, 0.27917697336333047, 0.20615807476770842, 0.29919465674979684, 0.23931389198172315, 0.20654046559093586, 0.17591320559421753, 0.18414530469893753, 0.23403400353845683, 0.18705251419288493, 0.19992639588948047, 0.1795737053057388, 0.2207012055362656, 0.25676488187812885, 0.2207155145994757, 0.18142523047498693, 0.18656108154532736, 0.17604834130031288, 0.23082029871119092, 0.22478849329125128, 0.2220659072521176, 0.21310496783609445, 0.1897665534377745, 0.20381641557490537, 0.18487845160123983, 0.20987040306223603, 0.1894023879744915, 0.1872489823044592, 0.1702279409451508, 0.19693079530597624, 0.273095982338483, 0.9251353599778586, 0.2017395039219031, 0.1632772225225806, 0.2071877556738737, 0.157623971728707, 0.16207770410512512, 0.35485671627297166, 0.4613293138169019, 0.20061654034778376, 0.21268543685673547, 0.2357958182855998, 0.20790558880153587, 0.11246902109703172, 0.16750109409343206, 0.2184173358555348, 0.19468089329725768, 0.20871976009297177, 0.21928236155395564, 0.2115855400231661, 0.2030913653802252, 0.20334721264804034, 0.21249133959059952, 0.20336876756080735, 0.21827344488335465, 0.11125861791270786, 0.08168478494851572, 0.10070596616037508, 0.06112353284186389, 0.07898895277213291, 0.10616785862912437, 0.13504744483131492, 0.12136731111497756, 0.08421795126991782]}, "mutation_prompt": null}
{"id": "8acb785b-ee83-48c1-9e5f-6617b3b3448b", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "cdf3a2c3-03fd-4263-b4f4-47dd31087468", "solution": "import numpy as np\n\nclass AdaptiveCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Adaptive cuckoo selection strategy based on fitness improvement\n            if np.random.rand() < self.elitism_rate and np.any(np.array(fitness) < np.array([func(best_solution)]*self.population_size)):\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "AdaptiveCuckooSearch", "description": "Introducing a novel adaptive cuckoo selection strategy based on fitness improvement for faster convergence.", "configspace": "", "generation": 63, "fitness": 0.23398376212138336, "feedback": "The algorithm AdaptiveCuckooSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4783523966541581, 0.5107795997914387, 0.503186799995899, 0.4612652032183797, 0.4536801056754184, 0.4695445690817682, 0.4941566481643055, 0.4971131691210282, 0.47753717333930357, 9.999999999998899e-05, 0.0016418093615949703, 0.06080326080551568, 0.028708625873916427, 0.001488665524066568, 9.999999999998899e-05, 0.01644840843746076, 9.999999999998899e-05, 0.02334923755602958, 0.10315981848978262, 0.0856819926127953, 0.1153245807974792, 0.09789905791048858, 0.09334765558505276, 0.11886080324516934, 0.11406420066643186, 0.11965337857462488, 0.13742799032571051, 0.09703057768021373, 0.07637457483813703, 0.09479161055796226, 0.0787511682265698, 0.1477373447293392, 0.08273993726119244, 0.09487413402616407, 0.13703464150394196, 0.06798065705339829, 0.9622144907620418, 0.9506127855466675, 0.9618305923717698, 0.9513018992394533, 0.9118470687356608, 0.9182695398049301, 0.9354598815072426, 0.8466929570457598, 0.9396665247552364, 0.2832216247916173, 0.28233283403461595, 0.2584333634369097, 0.29228503690466057, 0.27652137443711, 0.2906226331300493, 0.2961740595099961, 0.2822815447443673, 0.25907544614758815, 0.44510100470785985, 0.4682011390664935, 0.346049746284816, 0.2728826644970078, 0.3171926611370651, 0.6798767487735036, 0.27293353416312105, 0.5175046211536583, 0.3466731188865525, 0.23003356546701748, 0.1615231926329963, 0.1517313228850795, 0.21648511953817762, 0.23821632662715286, 0.164820513011237, 0.1896232207988161, 0.13523698357702163, 0.19623162890744683, 0.22778129728241958, 0.20307059466661748, 0.23910020882120142, 0.17821081891260315, 0.16134700482134923, 0.1327133508531384, 0.17207751825128015, 0.15054991154128206, 0.17456682712690508, 9.999999999998899e-05, 0.010244640511030245, 9.999999999998899e-05, 0.021179284710560742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007239804750771683, 0.06751550772349546, 0.07458867454068918, 0.11656231066373346, 0.066444061602418, 0.08684530033369298, 0.06981081381401832, 0.0921636215014563, 0.07592755797163442, 0.064894668189036, 0.0022255151291825648, 0.002325052343921774, 9.999999999998899e-05, 0.023731843352348347, 0.011232612535998832, 0.021214868756908256, 0.007920033324060438, 0.0007640866622735665, 9.999999999998899e-05, 0.10245683027095254, 0.10898319844260163, 0.11149638080516111, 0.13366255830651774, 0.14123713414114103, 0.10571447008191825, 0.11674443071060492, 0.10891765341037318, 0.12095847988065156, 0.4249470871168257, 0.4210611080488508, 0.4126188379474264, 0.4019399470196541, 0.4208352855326891, 0.40129728880934934, 0.4153139698704731, 0.42243396216659146, 0.4175417385520446, 0.09675698122334875, 0.11046187467235158, 0.10185758039647286, 0.14026077033343554, 0.12330688027787906, 0.0789724653050865, 0.13367679794795573, 0.14941868484159582, 0.1668729379604018, 0.2463877685361726, 0.24071170852533263, 0.2204603473080894, 0.2285487346996149, 0.20724250348053075, 0.17521787544058276, 0.22808868768450197, 0.2034618243581907, 0.2630815162302249, 0.26571579351272756, 0.2806135383203143, 0.24125223165286536, 0.27277199756327974, 0.267462787371053, 0.28729333105383026, 0.28417271985123194, 0.2590547725808222, 0.2939017617418572, 0.19954979962269936, 0.1978331103363462, 0.22650396322880173, 0.20691120048448752, 0.21880032944240835, 0.2077484384680528, 0.19160659364264931, 0.21716448257814014, 0.1611967067395571, 0.20800460572482982, 0.2091094500182552, 0.1858104728626233, 0.2028018661907396, 0.18361951048267744, 0.19418448077636674, 0.20061695744364627, 0.20808776813241459, 0.20538606109624113, 0.20695324332321463, 0.20341271113271453, 0.18575133124841192, 0.20865811964901826, 0.20309069458033946, 0.23756794901771483, 0.1931399883908287, 0.19472716093981246, 0.19193521833926552, 0.18356388463940532, 0.18488094980174108, 0.6401520495366013, 0.5838183814004226, 0.1994063663693273, 0.5444408243277727, 0.6033580990023129, 0.2050007948652145, 0.19248797676285767, 0.41163835707067775, 0.5568973830096933, 0.46168216102160087, 0.5549097749707905, 0.43731918366019196, 0.208220856947114, 0.20232469114067064, 0.4984142936896645, 0.5238929343867965, 0.17933332259952128, 0.18304456085602727, 0.20359578173034476, 0.19442342250774414, 0.20004092706022025, 0.1941483914631017, 0.1847600708403233, 0.17703814596376033, 0.2157476300909521, 0.07919276350084781, 0.08534853791522379, 0.08187256633620377, 0.08623324598578053, 0.0872626863744157, 0.07122296986051058, 0.09353512525559637, 0.08438184571436558, 0.08824585728571543]}, "mutation_prompt": null}
{"id": "67e7976f-2279-444e-94ae-de0786e14cfd", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "60c335b0-90b5-45d9-8fbe-045203122442", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "9f1ff07b-bb0b-4d6d-995c-7ee67b0d3b6a", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "b55f9284-f27d-4aba-9513-bfd38d4bcb36", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchConvergeFast:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self, fitness):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=len(fitness))\n        v = np.random.normal(0, 1, size=len(fitness))\n        steps = u / abs(v) ** (1 / beta)\n        return steps\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            steps = self.levy_flight(fitness)\n            new_population = population + steps[:, np.newaxis] * np.random.randn(self.population_size, self.dim)\n            new_population = np.clip(new_population, -5.0, 5.0)\n\n            for i, cuckoo_new in enumerate(new_population):\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic step size adaptation based on individual fitness\n            step_fitness_ratio = np.array([fitness[i] / max(fitness) for i in range(self.population_size)])\n            step_sizes = self.levy_flight(step_fitness_ratio)\n            population += step_sizes[:, np.newaxis] * np.random.randn(self.population_size, self.dim)\n            population = np.clip(population, -5.0, 5.0)\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchConvergeFast", "description": "Implement a novel dynamic step size adaptation mechanism based on individual fitness to improve convergence speed while ensuring a 48.1% code difference.", "configspace": "", "generation": 67, "fitness": 0.13345720654163476, "feedback": "The algorithm EnhancedCuckooSearchConvergeFast got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.13.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.27461139951380376, 0.2739208067404707, 0.25163356839387274, 0.2618022441438621, 0.2601114360076552, 0.2570115716534689, 0.26237670809172586, 0.24402037585577596, 0.2494787704833218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05696247288309808, 0.07402962596764573, 0.05130601614711672, 0.05671192941036296, 0.09047881244842226, 0.042661723747030145, 0.05918245189916038, 0.048999266019361, 0.07145580706822585, 0.051420311671406704, 0.035845666496663986, 0.04406992155317946, 0.046665333887128346, 0.044670591553386485, 0.07079224177629562, 0.061736448105209285, 0.03995409806936945, 0.05027579109044722, 0.4253868110314164, 0.8326138363841947, 0.6861754204863741, 0.8795198841199963, 0.2966094167738764, 0.6943660221178107, 0.8136566152698762, 0.20501401277059916, 0.3897267951729484, 0.09507161474426562, 0.13480865883467263, 0.08933817875201489, 0.08308553145055209, 0.11017393095108818, 0.12884203092314017, 0.14345971121033885, 0.12655668655006225, 0.10694438886162172, 0.16777588465953142, 0.13537376452079974, 0.14994340642027004, 0.16322533129287553, 0.1727654567553587, 0.1656456821073523, 0.13997862154700869, 0.1627950568967339, 0.18379030029054844, 0.10005694390329678, 0.031268221555030506, 0.03804740754022673, 0.0728101351336905, 0.08912679146483227, 0.12075521530793154, 0.04279047637282907, 0.07986233822747713, 0.033975191358506907, 0.08644171120242083, 0.0048304369593410446, 0.03708172881396532, 0.09231798666099889, 0.06465570693725609, 0.06282771379498975, 0.06404196840788567, 9.999999999998899e-05, 0.09064347402858675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015273312190767885, 0.07605502400743736, 0.048187323991404574, 0.04010866159208748, 0.029533451624806584, 0.033364337860984916, 0.052138914070005926, 0.050131178082367334, 0.06537330492840066, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005614776569583757, 0.006395481068858122, 0.00903621692526535, 0.015401638192936162, 0.005628917689138535, 0.03053983834849805, 0.03173392700680888, 0.02426164001754716, 0.027285416219211434, 0.23510052953698235, 0.27067134784502966, 0.22482023355407144, 0.2149885722963577, 0.27481221753980156, 0.3106296101947644, 0.27075726969177083, 0.25437695533342186, 0.2396489585853131, 0.07921703748949782, 0.07198857211073262, 0.062436130448288885, 0.05273705625904024, 0.05973496470148898, 0.06121789968966007, 0.07667479849810022, 0.05322338966157636, 0.08550440587012365, 0.1603341164814559, 0.16024337667467337, 0.16052674690222635, 0.16114056606629945, 0.15176484897770337, 0.14221649836668526, 0.14061161189470206, 0.15828611590343755, 0.14097259198545775, 0.20939232600614932, 0.21284127802974906, 0.15745052906596335, 0.16516547812716875, 0.19628868502860441, 0.18638930518358388, 0.22826851985244856, 0.18846301471866778, 0.18761491716665368, 0.11063060652374623, 0.11965496173051438, 0.12766199952853663, 0.14016652242461536, 0.13137523315750754, 0.13511762170385933, 0.11877610021881047, 0.17144688999920965, 0.1654563208861215, 0.1467996774540139, 0.16412337319805448, 0.16127946307081786, 0.15109378903779414, 0.1455288789775121, 0.15705124675976057, 0.16034381076495996, 0.15328118033100924, 0.16170776270597342, 0.16179366289309982, 0.148956122845877, 0.15550633927004653, 0.15889372764564214, 0.15897207932436708, 0.15235470026370934, 0.15766403927390116, 0.1580863213228647, 0.11582940777205053, 0.15674107998777398, 0.18533036459901797, 0.40955581280670694, 0.18451751789789683, 0.36674005755516814, 0.31441940804073587, 0.149360279003522, 0.16406613705216389, 0.17393914230282193, 0.1631743503310703, 0.1934632194019268, 0.2315737089245694, 0.167187161713388, 0.20441526345771188, 0.22109135745071073, 0.18107564608721394, 0.16470252900384008, 0.32256359544082247, 0.17285225412009164, 0.18701999198916552, 0.17676815092563825, 0.18082379663291426, 0.18870699367376442, 0.18823267966423618, 0.18987007081056761, 0.17842914292718393, 0.18800197011661635, 0.06728352449936137, 0.051292264484549155, 0.057874031107333024, 0.06251344265952885, 0.053855239436082614, 0.05071600397212517, 0.07742712029046706, 0.05795975137853271, 0.05192598879769306]}, "mutation_prompt": null}
{"id": "0dcc345d-d676-4271-baba-c75da387ce55", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImproved:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self, fitness_improvement):\n        beta = 1.5\n        step_size = np.exp(-fitness_improvement) * (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, step_size)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                fitness_improvement = np.clip((fitness[i] - min(fitness)) / (max(fitness) - min(fitness)), 0, 1)\n                step_size = self.levy_flight(fitness_improvement)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImproved", "description": "Adjusts the levy flight step size dynamically based on the fitness improvement to encourage exploration-exploitation balance.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: ZeroDivisionError('float division by zero').", "error": "ZeroDivisionError('float division by zero')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {}, "mutation_prompt": null}
{"id": "11091b76-99ff-49b0-9de7-41b6bf0ef9fc", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchMutation:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def chaotic_map_mutation(self, x):\n        a = 3.9\n        b = 0.7\n        x = np.sin(a * x) + b * np.cos(a * x)\n        return x\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                # Introduce chaotic map mutation\n                cuckoo_new = self.chaotic_map_mutation(cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchMutation", "description": "Introducing a mutation strategy based on a combination of chaotic maps to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedCuckooSearchMutation' object has no attribute 'levy_flight'\").", "error": "AttributeError(\"'EnhancedCuckooSearchMutation' object has no attribute 'levy_flight'\")", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {}, "mutation_prompt": null}
{"id": "48e27e0c-9e7b-4dfe-bd50-df8bcae4e768", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "b4318e99-d325-4fde-a268-ebb29a2c9b40", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "f5a9ff47-f4bd-4561-b02b-16870a6f1898", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImproved:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def chaotic_map(self, x, a=2.0, b=4.0):\n        return (a * x * (1 - x)) % b\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                \n                # Introduce chaotic map for exploration\n                chaotic_factor = self.chaotic_map(np.sum(cuckoo) / self.dim)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim) * chaotic_factor\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImproved", "description": "Incorporating a chaotic map to enhance exploration-exploitation balance and introduce diversity in the search process.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedCuckooSearchImproved' object has no attribute 'levy_flight'\").", "error": "AttributeError(\"'EnhancedCuckooSearchImproved' object has no attribute 'levy_flight'\")", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {}, "mutation_prompt": null}
{"id": "4a00abbc-9298-4360-b5fa-913ece8b40b7", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "1cb744c6-c098-40f4-95fa-1790979c373e", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "6ef7269a-9160-4cae-8ab9-2bb5b2591c6e", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "146d8991-9ecf-4ad7-9af4-26678ef5b006", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchFastConvergence(EnhancedCuckooSearch):\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, step_size_factor=0.1):\n        super().__init__(budget, dim, population_size, pa, alpha, elitism_rate)\n        self.step_size_factor = step_size_factor\n\n    def dynamic_step_size_adaptation(self, func, cuckoo, fitness):\n        step_size = self.levy_flight()\n        cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n        cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n        new_fitness = func(cuckoo_new)\n        \n        if new_fitness < fitness:\n            return cuckoo_new, new_fitness\n        else:\n            return cuckoo, fitness\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                cuckoo, fitness[i] = self.dynamic_step_size_adaptation(func, cuckoo, fitness[i])\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo = cuckoo + self.alpha * (population[idx] - cuckoo)\n\n                if fitness[i] < fitness[best_idx]:\n                    best_idx = i\n                    best_solution = cuckoo\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchFastConvergence", "description": "Implement a dynamic step size adaptation mechanism based on the fitness landscape to improve convergence speed.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"levy_flight() missing 1 required positional argument: 'step_size'\").", "error": "TypeError(\"levy_flight() missing 1 required positional argument: 'step_size'\")", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {}, "mutation_prompt": null}
{"id": "12481d18-d533-4557-9965-55af97b1be90", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "48810ea7-031d-4109-a412-daf1f158fe3b", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "a7c5cc0e-73f4-45a7-8717-3ac73b843d05", "solution": "import numpy as np\n\nclass EnhancedCuckooSearch:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight()\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            # Introduce dynamic population size adaptation\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearch", "description": "Introducing dynamic population size adaptation and elitism to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.4985152422837389, 0.5630442295436169, 0.514567699020194, 0.5146053176709684, 0.5222072245755855, 0.5578593479777518, 0.5786196897322626, 0.5233130641867481, 0.4939740553085108, 9.999999999998899e-05, 0.0049664314576628454, 9.999999999998899e-05, 0.09035088995487006, 9.999999999998899e-05, 9.999999999998899e-05, 0.013191537467672432, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820447008027364, 0.10085107556749862, 0.10483887203962172, 0.12016450347721697, 0.10305287834348487, 0.12926771585653607, 0.08672061305464485, 0.08989662288931455, 0.11846786449670488, 0.10913071703972055, 0.09423775233972576, 0.09682851586876773, 0.1134370443575794, 0.0977320801110313, 0.09144010421900328, 0.11829938649507399, 0.10511142759289838, 0.10800205453183243, 0.9649340442745643, 0.9497580777197856, 0.9624252709413328, 0.9659796079739218, 0.9221599237597856, 0.9317308857439509, 0.9556506844261503, 0.8902618534629386, 0.9339909647162888, 0.28555305549911847, 0.2584646120661972, 0.30928230971734716, 0.29728105561252705, 0.311833246249267, 0.32631948462820115, 0.34259009489730063, 0.3154984897933383, 0.31217811120558814, 0.2822125543872418, 0.44816528249930565, 0.22390513420329106, 0.35063630931498524, 0.3517459052045159, 0.2697375761359836, 0.3053423448256327, 0.22475865539856454, 0.2047242599148026, 0.24699301178987554, 0.14984059418135842, 0.18252894849586998, 0.26151547057735536, 0.27005099593987025, 0.13256819655266827, 0.15158437947255765, 0.15022231806869257, 0.1267296627283433, 0.13602104303941664, 0.16446029464962097, 0.267534094621256, 0.16857800464416228, 0.22529424741288162, 0.16657314365185572, 0.16056084995766817, 0.16098296169344306, 0.1611300899307504, 0.04707042803175665, 9.999999999998899e-05, 9.999999999998899e-05, 0.05227252492950396, 0.0024694120497400496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037051780725674277, 0.0518582303800873, 0.11227573916702382, 0.07442301864875789, 0.12953828011591573, 0.08682650078613241, 0.10256957387628918, 0.07093597418124331, 0.09457742442521755, 0.040836030018898795, 0.06624710919933241, 0.006269703970765095, 0.019684028491215533, 0.014729329025798488, 0.02067616043397391, 0.027954088261055277, 0.016354805972926933, 0.0405373273162124, 0.06126245348083015, 0.02783671248777697, 0.13824795210437735, 0.1289531588486723, 0.12594489919214613, 0.12388498777604384, 0.1384111078027308, 0.09707922431648208, 0.1175488535419057, 0.12917375781486584, 0.11058459959200007, 0.4491399760669096, 0.40986146685823066, 0.41994574576104726, 0.42912933240269047, 0.4167055181873902, 0.3990668503026479, 0.4516388639983894, 0.41685118018398515, 0.4296857535498705, 0.10627306775840573, 0.13035553743732253, 0.1260707539973982, 0.0765729851463347, 0.1139975112930095, 0.10734846461014258, 0.10837938468558661, 0.12442520500489351, 0.12848219323896137, 0.15750924966762903, 0.24100721315069262, 0.19169123452208392, 0.23526269690961765, 0.21763848395908858, 0.2804901588240746, 0.2780638447664969, 0.23487449242621916, 0.23535532672894477, 0.2908044472335688, 0.31549366706091087, 0.29111819261400784, 0.29361965245652666, 0.2960636884834177, 0.26404638358835075, 0.20309256903478934, 0.18133257236351008, 0.21128983563924075, 0.21122838869709937, 0.2262154359888049, 0.206338371455271, 0.2684270918102125, 0.27599843547670966, 0.17864030916205864, 0.18576780302589668, 0.24627868065365632, 0.22257705667131766, 0.20026212447753244, 0.20505090107632917, 0.18944333672674363, 0.20262996118279375, 0.24052581671445072, 0.20165617454937657, 0.21415904594052204, 0.2231582231931608, 0.22425152203230792, 0.20712380129564467, 0.21356844570242406, 0.19850213716912946, 0.20837965723414897, 0.20192117144437682, 0.2246648605007222, 0.19399513498582188, 0.187702775107918, 0.20540714504433755, 0.1574985692278258, 0.19663692878286898, 0.6262304045739714, 0.7012270939857159, 0.20008047568284315, 0.1617335926710577, 0.7227122408895932, 0.20771705022343034, 0.17647208693041483, 0.40872179492191085, 0.481279072172218, 0.5823623584139257, 0.6494505293841197, 0.5414630478584868, 0.20973532801721706, 0.3012348282292272, 0.5637917678483295, 0.5177221130511648, 0.2045836351751894, 0.18889763643920576, 0.21550881369016706, 0.20034133010962485, 0.2383515820514034, 0.2326568657855701, 0.1964015203244257, 0.20377541403115995, 0.22453291357397154, 0.08457731633231502, 0.13083050734367585, 0.08847556146705315, 0.08266636927698401, 0.0842861568236396, 0.09915460611840154, 0.0826676563524934, 0.08993167842866845, 0.08006465615440717]}, "mutation_prompt": null}
{"id": "1126ab10-574c-48d2-9b21-79d461e7fb23", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImproved:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate))\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImproved", "description": "Implement a dynamic step size adaptation mechanism based on the fitness improvement rate to accelerate convergence speed.", "configspace": "", "generation": 80, "fitness": 0.24178729954290745, "feedback": "The algorithm EnhancedCuckooSearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "285c0109-ffeb-46e2-bf82-a8a8f6299499", "metadata": {"aucs": [0.5764531064612395, 0.557317559119058, 0.5758402284935014, 0.5810158480897443, 0.5400613185507386, 0.5343046708894827, 0.5741492817166098, 0.5804412894832776, 0.5817441434504094, 9.999999999998899e-05, 0.005376159144984793, 9.999999999998899e-05, 0.01291588234977703, 0.006557671618888872, 0.0329706943037541, 9.999999999998899e-05, 0.029285659860294855, 9.999999999998899e-05, 0.11177470021821789, 0.07499756906689237, 0.10803794918227216, 0.1171758385743702, 0.05830824930494549, 0.10352807594637325, 0.10862753932743219, 0.07948228314800976, 0.10865753765115749, 0.13703070827421215, 0.0635677814901432, 0.07482386485172465, 0.08877358947935865, 0.11340885853687688, 0.09808029270241425, 0.0790717009220554, 0.11138707396421454, 0.06758465817746961, 0.895034856546933, 0.8974257480434287, 0.9375319593233633, 0.9536996303855476, 0.9007693306521378, 0.8689481533713003, 0.8841945882565587, 0.8331137717132997, 0.9105420215993212, 0.3553729772609673, 0.35398035576904563, 0.36595919252889375, 0.3528021398436968, 0.3689472689579557, 0.3746182648368932, 0.3596519564299394, 0.31830396303031216, 0.3121816973389432, 0.533559043558723, 0.22022507028203953, 0.29772978773921044, 0.25625869306047866, 0.7245623903193766, 0.35334471506148324, 0.28810054291027376, 0.22568265466070714, 0.40767344983295806, 0.30791909301300313, 0.16490406219927023, 0.17332843113513607, 0.3130274853211624, 0.12492443906548667, 0.14447081867904854, 0.23437457367509484, 0.28110545310155444, 0.18250513122391876, 0.15194792526398848, 0.22809709277054557, 0.17496011816039714, 0.1962417395985251, 0.19222528454472243, 0.1971498098064296, 0.20096745812510397, 0.15941741890700667, 0.14458987158692693, 0.00487413973610018, 0.06616498942398097, 9.999999999998899e-05, 0.04232338391707202, 0.009016184927232773, 0.0012712456118664228, 0.006858913638607245, 9.999999999998899e-05, 0.0029330756112423417, 0.09517990796112263, 0.07663401010661586, 0.1592276230869305, 0.08409327333868621, 0.11842423154236315, 0.07620020900663171, 0.14745485536424463, 0.07356757181068097, 0.13065938570830715, 0.05751548504139825, 0.02257325351195072, 0.061724356745415765, 0.045884367765035905, 0.04184385854728301, 0.07373087016097724, 0.07236953589806183, 0.07580900250213674, 0.09780779054050903, 0.13721664018460178, 0.11126228709670138, 0.1159326274748218, 0.1750100164601015, 0.14209758893459934, 0.16852999481812259, 0.13268923463304105, 0.17203219337480624, 0.1859848847857375, 0.44163087047753624, 0.4540404590035845, 0.48776118663693957, 0.4706719895064988, 0.4413288264060128, 0.4484940238341343, 0.4210972701607212, 0.45543820276967784, 0.4767097115843658, 0.10899544775770087, 0.13255966810251685, 0.11378163477024539, 0.12956478663520388, 0.11888575883888719, 0.07832882640078731, 0.16010913917668745, 0.0881843178947187, 0.11382791330787478, 0.38553612517708835, 0.24587826559645476, 0.2989511408673994, 0.35445140282002063, 0.17010715441503, 0.20265057843720624, 0.3882564537933141, 0.259785289860479, 0.30049009656487247, 0.3040256657338678, 0.27669446938912456, 0.33624468426624154, 0.2928720427504967, 0.25183267145331745, 0.2857198128370254, 0.208971606779907, 0.18680252315246426, 0.17454835314400896, 0.1330155151782263, 0.2617086639177092, 0.24565605942623103, 0.20039901875637256, 0.17438119774818328, 0.15127775069531768, 0.17533413518936813, 0.2036120038767233, 0.16585212922832304, 0.19863455822680198, 0.19973054487397468, 0.20499922645548174, 0.19222136058410744, 0.20141218349222056, 0.20132283548406205, 0.2244508945987823, 0.1802842248004206, 0.16607502430049792, 0.2190835900778081, 0.19893380426760687, 0.1990275085452683, 0.19013033498122167, 0.21311875248134515, 0.1901956271024392, 0.18717440837525656, 0.22546656528057396, 0.20870195181294715, 0.15765641221918247, 0.2079722312041521, 0.187622009401624, 0.16798532069932115, 0.2013842853858021, 0.7693846621489463, 0.15934614892173615, 0.19178881228472433, 0.7181577027407261, 0.6609891620981266, 0.40272810607281007, 0.36162769540271134, 0.21119350343366528, 0.5066055389129618, 0.21140796457178934, 0.5526428035990677, 0.1515991635853423, 0.40863192525693326, 0.20975117399763354, 0.2083450138715608, 0.19271808409461932, 0.2015095308405891, 0.21083967578121776, 0.2361707987649766, 0.208435831176227, 0.20458562534093827, 0.21659366158752635, 0.07367279657562054, 0.0698142397404865, 0.0687596092017102, 0.07126071766581721, 0.10251983518159924, 0.0866576230588697, 0.07438390236240555, 0.086613550993909, 0.09665413992499694]}, "mutation_prompt": null}
{"id": "8300a167-ed11-45c4-86c4-8ef0fdd594b3", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImproved:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate))\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImproved", "description": "Implement a dynamic step size adaptation mechanism based on the fitness improvement rate to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1126ab10-574c-48d2-9b21-79d461e7fb23", "metadata": {"aucs": [0.5764531064612395, 0.557317559119058, 0.5758402284935014, 0.5810158480897443, 0.5400613185507386, 0.5343046708894827, 0.5741492817166098, 0.5804412894832776, 0.5817441434504094, 9.999999999998899e-05, 0.005376159144984793, 9.999999999998899e-05, 0.01291588234977703, 0.006557671618888872, 0.0329706943037541, 9.999999999998899e-05, 0.029285659860294855, 9.999999999998899e-05, 0.11177470021821789, 0.07499756906689237, 0.10803794918227216, 0.1171758385743702, 0.05830824930494549, 0.10352807594637325, 0.10862753932743219, 0.07948228314800976, 0.10865753765115749, 0.13703070827421215, 0.0635677814901432, 0.07482386485172465, 0.08877358947935865, 0.11340885853687688, 0.09808029270241425, 0.0790717009220554, 0.11138707396421454, 0.06758465817746961, 0.895034856546933, 0.8974257480434287, 0.9375319593233633, 0.9536996303855476, 0.9007693306521378, 0.8689481533713003, 0.8841945882565587, 0.8331137717132997, 0.9105420215993212, 0.3553729772609673, 0.35398035576904563, 0.36595919252889375, 0.3528021398436968, 0.3689472689579557, 0.3746182648368932, 0.3596519564299394, 0.31830396303031216, 0.3121816973389432, 0.533559043558723, 0.22022507028203953, 0.29772978773921044, 0.25625869306047866, 0.7245623903193766, 0.35334471506148324, 0.28810054291027376, 0.22568265466070714, 0.40767344983295806, 0.30791909301300313, 0.16490406219927023, 0.17332843113513607, 0.3130274853211624, 0.12492443906548667, 0.14447081867904854, 0.23437457367509484, 0.28110545310155444, 0.18250513122391876, 0.15194792526398848, 0.22809709277054557, 0.17496011816039714, 0.1962417395985251, 0.19222528454472243, 0.1971498098064296, 0.20096745812510397, 0.15941741890700667, 0.14458987158692693, 0.00487413973610018, 0.06616498942398097, 9.999999999998899e-05, 0.04232338391707202, 0.009016184927232773, 0.0012712456118664228, 0.006858913638607245, 9.999999999998899e-05, 0.0029330756112423417, 0.09517990796112263, 0.07663401010661586, 0.1592276230869305, 0.08409327333868621, 0.11842423154236315, 0.07620020900663171, 0.14745485536424463, 0.07356757181068097, 0.13065938570830715, 0.05751548504139825, 0.02257325351195072, 0.061724356745415765, 0.045884367765035905, 0.04184385854728301, 0.07373087016097724, 0.07236953589806183, 0.07580900250213674, 0.09780779054050903, 0.13721664018460178, 0.11126228709670138, 0.1159326274748218, 0.1750100164601015, 0.14209758893459934, 0.16852999481812259, 0.13268923463304105, 0.17203219337480624, 0.1859848847857375, 0.44163087047753624, 0.4540404590035845, 0.48776118663693957, 0.4706719895064988, 0.4413288264060128, 0.4484940238341343, 0.4210972701607212, 0.45543820276967784, 0.4767097115843658, 0.10899544775770087, 0.13255966810251685, 0.11378163477024539, 0.12956478663520388, 0.11888575883888719, 0.07832882640078731, 0.16010913917668745, 0.0881843178947187, 0.11382791330787478, 0.38553612517708835, 0.24587826559645476, 0.2989511408673994, 0.35445140282002063, 0.17010715441503, 0.20265057843720624, 0.3882564537933141, 0.259785289860479, 0.30049009656487247, 0.3040256657338678, 0.27669446938912456, 0.33624468426624154, 0.2928720427504967, 0.25183267145331745, 0.2857198128370254, 0.208971606779907, 0.18680252315246426, 0.17454835314400896, 0.1330155151782263, 0.2617086639177092, 0.24565605942623103, 0.20039901875637256, 0.17438119774818328, 0.15127775069531768, 0.17533413518936813, 0.2036120038767233, 0.16585212922832304, 0.19863455822680198, 0.19973054487397468, 0.20499922645548174, 0.19222136058410744, 0.20141218349222056, 0.20132283548406205, 0.2244508945987823, 0.1802842248004206, 0.16607502430049792, 0.2190835900778081, 0.19893380426760687, 0.1990275085452683, 0.19013033498122167, 0.21311875248134515, 0.1901956271024392, 0.18717440837525656, 0.22546656528057396, 0.20870195181294715, 0.15765641221918247, 0.2079722312041521, 0.187622009401624, 0.16798532069932115, 0.2013842853858021, 0.7693846621489463, 0.15934614892173615, 0.19178881228472433, 0.7181577027407261, 0.6609891620981266, 0.40272810607281007, 0.36162769540271134, 0.21119350343366528, 0.5066055389129618, 0.21140796457178934, 0.5526428035990677, 0.1515991635853423, 0.40863192525693326, 0.20975117399763354, 0.2083450138715608, 0.19271808409461932, 0.2015095308405891, 0.21083967578121776, 0.2361707987649766, 0.208435831176227, 0.20458562534093827, 0.21659366158752635, 0.07367279657562054, 0.0698142397404865, 0.0687596092017102, 0.07126071766581721, 0.10251983518159924, 0.0866576230588697, 0.07438390236240555, 0.086613550993909, 0.09665413992499694]}, "mutation_prompt": null}
{"id": "1fefb796-13e8-46e7-89f4-16309468b982", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 82, "fitness": 0.24478462817312877, "feedback": "The algorithm EnhancedCuckooSearchImprovedEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "1126ab10-574c-48d2-9b21-79d461e7fb23", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "35f53476-7d67-45f6-bcef-a0c58fa0f886", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "ed64d60d-cfdc-4191-bc13-801f0538916e", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "0b675bc0-796d-48ca-8d15-de323a1823cc", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "d023f35d-f443-49dd-a345-a572a161c62d", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhancedOptimized:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n        self.min_population_size = 5\n        self.max_population_size = 20\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n            # Dynamic population resizing\n            convergence_rate = np.mean(np.abs(np.diff(fitness)))\n            if convergence_rate < 0.1 and self.population_size > self.min_population_size:\n                self.population_size -= 1\n            elif convergence_rate > 0.5 and self.population_size < self.max_population_size:\n                self.population_size += 1\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhancedOptimized", "description": "Introducing a dynamic population resizing mechanism to adjust the population size based on the convergence rate, promoting faster convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 11 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 11 is out of bounds for axis 0 with size 10')", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {}, "mutation_prompt": null}
{"id": "631cfe06-a76c-4144-9a96-8e24ee2a81e2", "solution": "import numpy as np\n\nclass DynamicPopulationResizingCuckoo:\n    def __init__(self, budget, dim, initial_population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1, resize_rate=0.1, max_population_size=20, min_population_size=5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = initial_population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n        self.resize_rate = resize_rate\n        self.max_population_size = max_population_size\n        self.min_population_size = min_population_size\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n            if np.random.rand() < self.resize_rate:\n                if self.population_size < self.max_population_size:\n                    self.population_size += 1\n                elif self.population_size > self.min_population_size:\n                    self.population_size -= 1\n\n        return best_solution", "name": "DynamicPopulationResizingCuckoo", "description": "Utilize a dynamic population resizing strategy to adaptively adjust the population size during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {}, "mutation_prompt": null}
{"id": "a9090c88-3a8a-468c-ba54-be57c050dd8f", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "db4e3de5-433e-4af7-8c07-438ea9c8c582", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "9837189b-5056-48e9-8dbd-1eb40472b56e", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "e875c607-9a62-43e9-a142-96b04ee2e016", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "291544ac-dbce-4867-9eb9-0b049b205a4b", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "47a178c4-fb9c-48ba-bd90-3ef007343484", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "307ff09d-3d40-4083-ac6f-e2360c62204a", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "ebbd503d-93dd-4d89-bfe3-d8b51cad1ace", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "b0f17152-458f-41f9-8ce9-fa467f961e08", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "27883106-32c8-4d74-a676-5f18e7f47cbc", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "e63eb12c-b470-4829-b662-5a52c24345c5", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhanced:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def calculate_diversity(self, population):\n        distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2)\n        np.fill_diagonal(distances, np.inf)\n        return np.mean(np.min(distances, axis=1))\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight() * (1 / (1 + fitness_improvement_rate)) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhanced", "description": "Implement a novel adaptive population diversity mechanism to promote exploration and exploitation within the population, thereby enhancing convergence speed.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {"aucs": [0.6238790468618992, 0.5438327355261793, 0.6085921091112321, 0.592138507677469, 0.6017809025362734, 0.5524911356185547, 0.5923299942027282, 0.6422593008550112, 0.5551310439553276, 0.09509319482854284, 0.010704039716602498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750915195748061, 9.999999999998899e-05, 0.04275657557170476, 0.14994280130366655, 0.09589135390975279, 0.12414552215454755, 0.10403634265906525, 0.0973397844479208, 0.07888888188336185, 0.10245866034163209, 0.07628565805640042, 0.1116475458809788, 0.102909606283902, 0.06240933880019184, 0.08322810457858199, 0.11050333811096191, 0.07730434325391944, 0.10090902421199677, 0.11477022603250875, 0.07750177235205624, 0.0769053218150677, 0.9145080667451857, 0.9228857431906416, 0.9401536657557816, 0.9556625893615067, 0.9148932145122933, 0.9117701956591646, 0.8860663446891907, 0.8592606770400302, 0.9213487366196471, 0.37814389653653, 0.3555065291191255, 0.30756371405788985, 0.3452558942186209, 0.391529796895978, 0.3603542266210912, 0.37232697306033335, 0.353772195718709, 0.3196717179558405, 0.8792711761591272, 0.5053068694420437, 0.36238054031789446, 0.2111363202663974, 0.2673681537310958, 0.35387029826942384, 0.23579050035365512, 0.2990810375860484, 0.2212969201131536, 0.24568570068498152, 0.1745771774404259, 0.16620759285475473, 0.1482138652485515, 0.200010637809091, 0.13792526148304318, 0.1568040476914746, 0.18360817001102792, 0.14842070011413377, 0.1639653035322466, 0.17639462877340917, 0.1820501686329169, 0.18218000947372115, 0.19221609669372863, 0.1777846477883155, 0.17760537422783196, 0.2062487422305581, 0.17625404885100981, 0.04600563431051419, 0.03505868799739642, 9.999999999998899e-05, 0.03829430967049541, 0.005114686070261776, 0.014339223807121049, 0.0112693508094035, 9.999999999998899e-05, 9.999999999998899e-05, 0.10763972057459592, 0.07405582151094148, 0.15482094418933845, 0.07291625864022555, 0.09691816186780566, 0.056958290981173, 0.0725574126791968, 0.08208950153995231, 0.08056660834375395, 0.044099100310272865, 0.049596775980599306, 0.06449766519244715, 0.10457475521375503, 0.028056463479932736, 0.09235967601899953, 0.030099606620458186, 0.053850214229634874, 0.08596531688108333, 0.1627204161478608, 0.11279887789174825, 0.12884735069764952, 0.16867137670209176, 0.1265005437763317, 0.14659054352455225, 0.18385186571329792, 0.10930888411720296, 0.13151014178288, 0.4388552935974034, 0.4402410065217274, 0.4562779813753095, 0.4571961099507136, 0.45542420098347935, 0.4613352866395719, 0.4108255577639375, 0.47240847005385966, 0.44767571549875174, 0.11357430237203858, 0.13088029292870795, 0.1818063832549397, 0.09233504615432153, 0.12269513428260781, 0.13652585828686292, 0.13849362171464707, 0.10026745204638443, 0.10710176184520204, 0.18648963588649514, 0.31635233570980315, 0.33543675543687024, 0.28110970881925823, 0.25832368259854155, 0.25701324524349467, 0.1773694247015466, 0.19774683255491066, 0.3162957423001097, 0.3003857429874416, 0.334081621244227, 0.3001425830227785, 0.3467750839072844, 0.27894603750342406, 0.2853721396281417, 0.22346200012347972, 0.21381329915942304, 0.20732986691164512, 0.244976154301365, 0.22126642989442669, 0.18759892066595496, 0.20540907142611264, 0.3002098399563293, 0.25976816652437296, 0.20142710022707155, 0.238165040108284, 0.1846403865283096, 0.19913556429911483, 0.19010773566547345, 0.20879094566319567, 0.20011585601645776, 0.21527148504859206, 0.21663506700399326, 0.21147437238955125, 0.19188504976451004, 0.23777675074156823, 0.2205004781115063, 0.2170565815640394, 0.20794847657500637, 0.17768001114509901, 0.2032426424869389, 0.19740425765464575, 0.2206109117233176, 0.21555246519358906, 0.22268702534994667, 0.17164481097834816, 0.18435103078224513, 0.8074792972612235, 0.1953432072208786, 0.18642180171835676, 0.2059239377728176, 0.17245459686505715, 0.7247415413018221, 0.17659318551812953, 0.7389989581399792, 0.43581697760923976, 0.33022836591662363, 0.21029005289523484, 0.7345245022252107, 0.2103803373818307, 0.6619990929099961, 0.1542564702304613, 0.2085687043425032, 0.20158642968105256, 0.20838967618765503, 0.21291067537656094, 0.1887187536654663, 0.21089598254919706, 0.19938621989668037, 0.19748185647770045, 0.20404190048380544, 0.21442440489039416, 0.089072715948748, 0.09163225957884968, 0.08897800628305685, 0.08529674491023109, 0.07627681561875832, 0.10214338792866695, 0.07850818108910607, 0.10168952501268047, 0.0731195604030247]}, "mutation_prompt": null}
{"id": "ebbbaaec-9c18-4d10-812c-10cacaf16a22", "solution": "import numpy as np\n\nclass EnhancedCuckooSearchImprovedEnhancedConvergence:\n    def __init__(self, budget, dim, population_size=10, pa=0.25, alpha=0.01, elitism_rate=0.1, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.elitism_rate = elitism_rate\n        self.diversity_threshold = diversity_threshold\n\n    def levy_flight(self, fitness_improvement_rate):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / beta) * (1 + fitness_improvement_rate)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.population_size, self.dim))\n        fitness = [func(x) for x in population]\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        fitness_improvement_rate = 0.0\n\n        for _ in range(self.budget):\n            new_population = []\n            diversity = self.calculate_diversity(population)\n\n            for i, cuckoo in enumerate(population):\n                step_size = self.levy_flight(fitness_improvement_rate) * (1 + diversity * self.diversity_threshold)\n                cuckoo_new = cuckoo + step_size * np.random.randn(self.dim)\n                cuckoo_new = np.clip(cuckoo_new, -5.0, 5.0)\n\n                if np.random.rand() > self.pa:\n                    idx = np.random.randint(self.population_size)\n                    cuckoo_new = cuckoo_new + self.alpha * (population[idx] - cuckoo_new)\n\n                new_fitness = func(cuckoo_new)\n                if new_fitness < fitness[i]:\n                    population[i] = cuckoo_new\n                    fitness[i] = new_fitness\n                    fitness_improvement_rate = (fitness[i] - fitness_improvement_rate) / fitness[i]\n\n                    if new_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = cuckoo_new\n\n            if np.random.rand() < self.elitism_rate:\n                worst_idx = np.argmax(fitness)\n                population[worst_idx] = best_solution\n                fitness[worst_idx] = func(best_solution)\n\n        return best_solution", "name": "EnhancedCuckooSearchImprovedEnhancedConvergence", "description": "Introduce adaptive step size adjustment based on fitness history to dynamically balance exploration and exploitation, enhancing convergence speed.", "configspace": "", "generation": 99, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedCuckooSearchImprovedEnhancedConvergence' object has no attribute 'calculate_diversity'\").", "error": "AttributeError(\"'EnhancedCuckooSearchImprovedEnhancedConvergence' object has no attribute 'calculate_diversity'\")", "parent_id": "1fefb796-13e8-46e7-89f4-16309468b982", "metadata": {}, "mutation_prompt": null}
