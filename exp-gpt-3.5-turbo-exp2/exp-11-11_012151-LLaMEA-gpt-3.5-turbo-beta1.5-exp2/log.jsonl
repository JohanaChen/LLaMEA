{"id": "0da390ed-feb3-4e46-9c38-d081193c834a", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 0, "fitness": 0.27960624350573793, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "1ad2afcc-4299-4761-aa27-3c48ab2d3056", "solution": "import numpy as np\n\nclass QIPSO_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                adaptive_weight = np.exp(-fitness)  # Dynamic weight based on fitness\n                self.velocities[i] = adaptive_weight * (self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i]))\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO_Enhanced", "description": "Introducing dynamic velocity update based on particle fitness to adaptively adjust exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.040089611525687546, "feedback": "The algorithm QIPSO_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.08765692947001935, 0.06423415049951742, 0.09160418974400164, 0.08943128444456905, 0.06204510195650603, 0.07700439226554878, 0.07786194868245844, 0.0742204302051026, 0.06854154161060866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01457225473404744, 0.005275638633662649, 0.010544468052300915, 0.0011187632349274335, 0.006570620486411438, 0.018150078853293228, 0.0, 0.010575797721526392, 0.0, 0.0, 0.0, 0.019501673109777906, 0.00039528563310364806, 0.0, 0.0, 0.0, 0.0, 0.04508425064962307, 0.04210363830167896, 0.04278205048633987, 0.05324558914834965, 0.04678013722717811, 0.03733246297295645, 0.06379241875039388, 0.04889164439368143, 0.03910579656877622, 0.0, 0.0, 0.0, 0.0, 0.0002155180953176128, 0.0, 0.0, 0.011194453811968152, 0.0, 0.10018685869139876, 0.03765971698882764, 0.05213904648208645, 0.06661749824762087, 0.027157688250678214, 0.0, 0.026181922061988883, 0.059216496363672766, 0.00980944726576194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1087911925041366, 0.13871047537962367, 0.14829537673696325, 0.09416865854227674, 0.09699835892692388, 0.09571399605668462, 0.16104568613242554, 0.09707379230410096, 0.12096781838997028, 0.0, 0.0, 0.0, 0.006002370323504702, 0.0, 0.017501683791264266, 0.0, 0.0, 0.02666833626578957, 0.07028246122666715, 0.08600231476349274, 0.05923488925498388, 0.09846289938803399, 0.10844057434017595, 0.0765613056260479, 0.08799080449347874, 0.06055113238554599, 0.07717165476215537, 0.09733127006515929, 0.10087965857287762, 0.1434424562616725, 0.13792052181429804, 0.11371875507613927, 0.10242428921387359, 0.12019368026048993, 0.17369512487630423, 0.11354482774798758, 0.038033565377164846, 0.033911540361315384, 0.05454210057597264, 0.056862900510017966, 0.06397588397007725, 0.06333484497585817, 0.08364015581189743, 0.09968109929822744, 0.06403167692630829, 0.11934558904173465, 0.09379139630457334, 0.13336421106425755, 0.10280083939125184, 0.07846030762823919, 0.09297976061357571, 0.12237199858748082, 0.07863718186204227, 0.126108974692001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05559179745856069, 0.07457348599179736, 0.08157840845397091, 0.06709542404806867, 0.12070353966557557, 0.06652066617628638, 0.07236292692525292, 0.09634568763976836, 0.0692681884497639, 0.11031370369947813, 0.10042736099156047, 0.020478899054901523, 0.050590853463497676, 0.037286323337989646, 0.04541561500201219, 0.04680845216473539, 0.0706764961220071, 0.041338335346146726, 0.134715223061186, 0.12828496744985785, 0.14754945642911277, 0.13378320277458844, 0.1238919435480983, 0.12748145633104646, 0.14961211855424683, 0.1367307267975857, 0.1468047635094908, 0.007041984983726435, 0.015817976510993814, 0.031296624077891244, 0.0269179893162087, 0.03415436066355304, 0.019947514614660267, 0.016129998991510575, 0.0, 0.017358041372653732]}, "mutation_prompt": null}
{"id": "fe98d38e-e5b5-4789-805b-666582166dcc", "solution": "import numpy as np\n\nclass DynamicInertiaQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                inertia_weight = 0.5 + 0.5 * (np.sum(self.personal_best_values) / self.personal_best_values[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.alpha * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "DynamicInertiaQIPSO", "description": "Introducing dynamic inertia weight to adjust particle velocities based on individual performance for faster convergence.", "configspace": "", "generation": 2, "fitness": 0.06754711228124953, "feedback": "The algorithm DynamicInertiaQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.16.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.08765692947001935, 0.06423415049951742, 0.09160418974400164, 0.08943128444456905, 0.06204510195650603, 0.07700439226554878, 0.07786194868245844, 0.0742204302051026, 0.06854154161060866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01457225473404744, 0.00833048213766907, 0.010544468052300915, 0.0011187632349274335, 0.006570620486411438, 0.018150078853293228, 0.0, 0.010575797721526392, 0.0, 0.0, 0.0, 0.019501673109777906, 0.00039528563310364806, 0.0, 0.0, 0.0, 0.0, 0.9964627901982419, 0.9961532516875032, 0.9949539538220683, 0.9968425668980292, 0.099759612621799, 0.09979378648665393, 0.09982388520207475, 0.9958096834208285, 0.9970896591073792, 0.0, 0.0, 0.0, 0.0, 0.0002155180953176128, 0.0, 0.0, 0.011194453811976035, 0.0, 0.10018685869139876, 0.03765971698882764, 0.05213904648208645, 0.06661749824762087, 0.027157688250678214, 0.0, 0.026181922061988883, 0.059216496363672766, 0.00980944726576194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1087911925041366, 0.13871047537962367, 0.14829537673696325, 0.09416865854227674, 0.09699835892692388, 0.09571399605668462, 0.16104568613242554, 0.09707379230410096, 0.12096781838997028, 0.0, 0.0, 0.0, 0.006002370323504702, 0.0, 0.017501683791264266, 0.0, 0.0, 0.02666833626578957, 0.07028246122666715, 0.09328053011982806, 0.09325996652074986, 0.09846289938803399, 0.10844057434017595, 0.05633684591912658, 0.08799080449347874, 0.07283503919205991, 0.07717165476215537, 0.09597227240608985, 0.09616018134012161, 0.1434424562616725, 0.13792052181382497, 0.11371875507613927, 0.10242428921387359, 0.12019368026048993, 0.17369512487630423, 0.11354482774798758, 0.038033565377164846, 0.04059549749027869, 0.054542006265454246, 0.056862900510017966, 0.06397588397007725, 0.06333484497585817, 0.08364015581189743, 0.09968109929822744, 0.06403167692630829, 0.11934558904173465, 0.09379139630457334, 0.13336421106425755, 0.10280083939125184, 0.07846030762823919, 0.09297976061357571, 0.12237199858748082, 0.07863718186204227, 0.126108974692001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07627164828652089, 0.07633095568713999, 0.08157840845397091, 0.06709542404806179, 0.12070353966557557, 0.06652066617628638, 0.07236292692525292, 0.09634568763976836, 0.0692681884497639, 0.11031370369947813, 0.10042736099156047, 0.020478899054901523, 0.050590853463497676, 0.037286323337989646, 0.04541561500201219, 0.04680845216473539, 0.04009445607434592, 0.041338335346146726, 0.134715223061186, 0.12828496744985785, 0.14754498426890972, 0.15001014425590964, 0.1500010796871044, 0.12456358843519488, 0.14961211855424683, 0.1367430839183491, 0.1468047635094908, 0.007041984983726435, 0.015817976510993814, 0.031296624077891244, 0.0269179893162087, 0.03415436066355304, 0.019947514614660267, 0.016129998991510575, 0.00494461594326312, 0.017358041372653732]}, "mutation_prompt": null}
{"id": "6a0d3d44-b8ff-4c89-8583-d4c52ab323ba", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "2b0d4e15-2b4c-452d-b536-c4762045900b", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "a86969ec-9ce5-4b95-9d92-3ef46d44d7ef", "solution": "import numpy as np\n\nclass FastQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha_min, self.alpha_max = 0.4, 0.9\n        self.beta_min, self.beta_max = 0.2, 0.6\n        self.inertia_min, self.inertia_max = 0.3, 0.9\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_min + ((_ + 1) / self.max_iter) * (self.inertia_max - self.inertia_min)\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                alpha = self.alpha_min + ((_ + 1) / self.max_iter) * (self.alpha_max - self.alpha_min)\n                beta = self.beta_min + ((_ + 1) / self.max_iter) * (self.beta_max - self.beta_min)\n                self.velocities[i] = inertia_weight * self.velocities[i] + alpha * (self.personal_best_positions[i] - self.particles[i]) + beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FastQIPSO", "description": "Introducing dynamic inertia weight and adaptive acceleration coefficients to enhance convergence speed.", "configspace": "", "generation": 5, "fitness": 0.10701360496584227, "feedback": "The algorithm FastQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.24827443699865748, 0.3163691874153316, 0.3515426808822184, 0.11885680914500185, 0.09792554568285083, 0.16797943161011375, 0.1614911603033382, 0.15932766558631006, 0.1316447768252592, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07275174177665389, 0.07201652754980226, 0.05297808676846982, 0.0960522378893709, 0.0948436754616141, 0.0974638653669212, 0.07536708443829598, 0.10623643035963848, 0.07739698840470921, 0.06784863840952626, 0.04638832664820347, 0.07735567010786215, 0.09179479946490288, 0.05845537501073561, 0.0328693948293034, 0.05465041887173938, 0.04660763665279133, 0.012080970187585027, 0.04585025705324974, 0.04276097786960997, 0.042842121083336626, 0.053979290862319784, 0.047813042617461776, 0.0395938908325183, 0.06406535172367456, 0.04965701711141213, 0.04070306115665667, 0.056346183656788895, 0.08570964713802531, 0.05842266805983942, 0.08875274597086247, 0.07021969305114106, 0.044459134245508736, 0.10224974207975523, 0.062496027120555686, 0.0, 0.25594747730133416, 0.17030809468376318, 0.14041224937531827, 0.13638815830402362, 0.13516192832249274, 0.06261072362106135, 0.10967349042364294, 0.11103246794642363, 0.12617715490286774, 0.0, 0.0, 0.0, 0.0, 0.022181626030585044, 0.0, 0.10361397095878033, 0.022030543716788475, 0.029523179361493734, 0.11531670909528002, 0.11847956836848716, 0.13003929766259548, 0.12362575920780405, 0.10083724320793408, 0.12220044910812844, 0.1392695116190794, 0.040175246395952824, 0.013533471680001075, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1628292551817312, 0.07394795595989179, 0.17885334411716847, 0.057152145627531126, 0.01580290527397632, 0.020021109021664207, 0.09984650996360778, 0.08222701110231878, 0.05966540541452925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01550384772227209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3802994717303826, 0.2645598762300091, 0.2784750229927059, 0.16175885905969511, 0.16044220923590113, 0.14907837223105258, 0.3758595093748268, 0.2685706808652101, 0.45235987490506946, 0.0449340127083564, 0.02323562166596893, 0.00027109730038787916, 0.058478344501777246, 0.049645330766110995, 0.0674578575064213, 0.0768090401156285, 0.0897130392159815, 0.052062633773239386, 0.1095482489388816, 0.13677625819511263, 0.1414407850887901, 0.1031571211076876, 0.11614886276056291, 0.13058711824908786, 0.11633708693609823, 0.08463761559923699, 0.11408986181607028, 0.14199779852741123, 0.18872958033447618, 0.17869729294487535, 0.24825840076354722, 0.22292713009723275, 0.22830450052858764, 0.1800397658689853, 0.25586533015767, 0.14504982926769916, 0.09790140534742808, 0.130970266808492, 0.11371640833850782, 0.18858991376399903, 0.13771198070616597, 0.19655477128742682, 0.14993015084008188, 0.17741284180431827, 0.09491585413121062, 0.19984391362354315, 0.1567610745415925, 0.20454067725968117, 0.2209684126101501, 0.23061084630957662, 0.1835778729631652, 0.21144774246698084, 0.24087654270030945, 0.18099228137869194, 0.15911085689581572, 0.1621958175859498, 0.17254057731026973, 0.1706328494522561, 0.16891584693849293, 0.16292831731766944, 0.17157512266771568, 0.24752041059775742, 0.15463490226229204, 0.1341509071374556, 0.18759445880780456, 0.11956445031296958, 0.3607160433133141, 0.17202995583557368, 0.16153354844569434, 0.11289011593003384, 0.14442994262551978, 0.179164375605386, 0.2172995781127003, 0.13261058673705195, 0.17563349125602323, 0.3189218187003767, 0.13499565409587155, 0.26849472532256535, 0.16957216321758983, 0.22600951048400375, 0.08629997104784326, 0.15852974924995578, 0.18932833205335498, 0.1692258960310995, 0.1799966945875141, 0.17508522651593772, 0.15344733387811715, 0.20533523853442825, 0.18554707099640122, 0.16348947578760054, 0.05625223905491261, 0.10268491619280085, 0.06448432044957242, 0.06592398328570892, 0.07769800916773184, 0.0745898297912223, 0.07995355047515551, 0.07382547737028455, 0.0767707079836244]}, "mutation_prompt": null}
{"id": "3520bf93-7d18-4ab3-ba51-e2df85ce9e72", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "7a2ca299-835e-417a-b188-ac784b6a6bff", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n        self.inertia_weight = 0.9\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n            \n            self.inertia_weight = self.inertia_weight * 0.99  # Dynamic inertia weight update\n            self.alpha = 0.5 + np.random.uniform(0, 1) * 0.4  # Random update of alpha for exploration\n            self.beta = 0.3 + np.random.uniform(0, 1) * 0.1  # Random update of beta for exploitation\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Implementing a dynamic inertia weight update mechanism to enhance the exploration and exploitation balance for faster convergence in Quantum-Inspired Particle Swarm Optimization.", "configspace": "", "generation": 7, "fitness": 0.22728581376840265, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.9294193828916728, 0.9196320425808261, 0.9230492182169727, 0.9252155415198158, 0.9246497595487602, 0.9235009710238629, 0.9273232575610566, 0.9247685079525012, 0.9206355922757744, 0.0, 0.040708524803052426, 0.03758097472957467, 0.005532051117753456, 0.04088891388212834, 0.041655619413398015, 0.0, 0.1442355852627274, 0.028679670515179945, 0.0904487885636287, 0.09727120302084857, 0.0939765236004858, 0.10776902450537384, 0.11199712682515894, 0.07226230530036448, 0.06445503782128958, 0.10724663787411959, 0.0941945456194413, 0.05994731521725649, 0.07731426050537016, 0.1186402811600259, 0.08990305660657649, 0.08310038487242821, 0.08251045394978695, 0.0721212865571923, 0.05389419905184767, 0.061429763311745766, 0.28827109276513885, 0.9671681158081866, 0.9416990767040965, 0.1021795845091027, 0.7475308478046427, 0.8888376124485547, 0.8536990698769154, 0.7891031404253217, 0.9436104722426504, 0.22655395706662862, 0.12123137773278903, 0.19874042188391627, 0.2493120331051889, 0.10773222608161248, 0.15812464095531253, 0.18240008124353002, 0.09351378592400739, 0.17294007514257903, 0.21547316436948527, 0.22911266402149155, 0.15178932739861561, 0.2151379896904112, 0.19420407073835888, 0.20905256579917908, 0.12017263566742964, 0.15403214926621933, 0.1969276004753001, 0.25721562390188124, 0.15884500160507542, 0.13818489196006356, 0.13077444789961123, 0.1714946282607478, 0.1307149501457665, 0.1548762003014752, 0.1851432830166636, 0.14704916681537272, 0.19749719261260812, 0.13031316422350137, 0.1333675618989184, 0.15404394623102502, 0.14428384849667963, 0.14151576718008596, 0.3425394560776628, 0.13497755148980284, 0.1604965646023071, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07778985891176893, 0.02717038821597839, 0.061258114738296676, 0.05884990365611997, 0.0032000218048220397, 0.03357184138327507, 0.09219507269631866, 0.07742058036102006, 0.039698164744539244, 0.13071101613257907, 0.16494872472191802, 0.12262981786854343, 0.140212732194815, 0.16705182762500503, 0.08079990464808307, 0.17069886723202776, 0.10769044271042438, 0.09086208181964062, 0.1900308488449105, 0.16356256795040536, 0.12394298787086266, 0.03410702740791982, 0.027123095381489493, 0.11717911365763667, 0.1353798105679923, 0.2019083326437665, 0.08432988791345064, 0.6031826304051602, 0.4880651910485776, 0.5031166802355562, 0.5238563836463493, 0.3295047544413665, 0.48456976424892617, 0.6027619635867254, 0.49878721436808204, 0.5992728406303622, 0.06829005651889752, 0.06523146543393143, 0.09936961698622415, 0.06881245429978156, 0.0751675596340523, 0.07307935332200743, 0.09279755800009937, 0.11253322164899437, 0.10162980690452517, 0.3024441187478848, 0.2063644165312446, 0.1983781510961138, 0.356484821634359, 0.20179071035855534, 0.30428804631109296, 0.2408395669064367, 0.1523571555813018, 0.16732536554852118, 0.20282047205822296, 0.29697914221236443, 0.21425500782054918, 0.2646608011679368, 0.2433730378071084, 0.4169437128008582, 0.2488805132530053, 0.3525346720599267, 0.2272164797403532, 0.11456223259234088, 0.2090753859863903, 0.13940647532713923, 0.2635542408093178, 0.22324859587426082, 0.28298000592947703, 0.17448147911045275, 0.24775261661977488, 0.1854568129484061, 0.20119176714851517, 0.2540810285401328, 0.2594747732373732, 0.2427747632921453, 0.2291894029005056, 0.22609218462520564, 0.23014110439813762, 0.20551683362949036, 0.24354247960969966, 0.2111835363505763, 0.226413556942199, 0.19460183492335914, 0.1868217087746612, 0.17809698080923497, 0.1766225771220652, 0.16870753773002412, 0.23097205427123457, 0.19005245771784007, 0.188464098196644, 0.18829824110831928, 0.1873987229129599, 0.9600357581850006, 0.20140827269747907, 0.2007372455461337, 0.09969448752172616, 0.16953060300341005, 0.7510273737615073, 0.38521870687748794, 0.1571026660121173, 0.42167189844479436, 0.19685426792441707, 0.19753848021462594, 0.20777822893434383, 0.25710350155168804, 0.16590998010779745, 0.22355967788308306, 0.1969530517993594, 0.2491832077965711, 0.22816946827988316, 0.2127190969744609, 0.22376200694444282, 0.1756144533559062, 0.19886157489295375, 0.16473128683184823, 0.20624985158327624, 0.08668973206619046, 0.08963110912069638, 0.053906403212929055, 0.07970583099021955, 0.084881612167783, 0.08457495849484042, 0.08983829268172017, 0.07140758836185068, 0.10140103609356899]}, "mutation_prompt": null}
{"id": "f407b095-7a60-48ea-bdeb-c642aadf5145", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_min + (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Introducing a dynamic inertia weight to adjust the exploration and exploitation balance dynamically to improve convergence speed.", "configspace": "", "generation": 8, "fitness": 0.1191879183284154, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.24239232410736244, 0.20441214863240298, 0.43585720252559323, 0.1236552585851024, 0.12435970717393774, 0.1822300101656339, 0.26369136647219815, 0.18382258820647523, 0.14290667609732022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07953582142794369, 0.11298598364320855, 0.06170753696155573, 0.09237116427165637, 0.10722214706654376, 0.09247436358544969, 0.08151328879018749, 0.09414576592760127, 0.10108018206313318, 0.08225461586200122, 0.047935720662033776, 0.08317425250539001, 0.055129097121081605, 0.04982943328340683, 0.050214680056609895, 0.06321817408114572, 0.03884677727059849, 0.032115412671496424, 0.06271768810368938, 0.059583662336848864, 0.05798965096086395, 0.0659703821502875, 0.060173743639404864, 0.05647344682115307, 0.08206703689523842, 0.06370234205254988, 0.056828102018471105, 0.058976514778814826, 0.048428699797205765, 0.0398974028051835, 0.09975021799083317, 0.07143940316455732, 0.059540452922200005, 0.13498228392433498, 0.08121915311102346, 0.0632502533461593, 0.13025363620694808, 0.14313194105457694, 0.15833792299331506, 0.2627522126506999, 0.15324273431570057, 0.11106318142675697, 0.11813134567621086, 0.1526219144681099, 0.09651098254551049, 0.014113933917042076, 0.06670771727197822, 0.0, 0.006362019113569817, 0.19341531244061017, 0.0, 0.13234569905429616, 0.07429359247286105, 0.10766363271065116, 0.13267905107554379, 0.07405095006697371, 0.13202226319886012, 0.028247872074165348, 0.07281083823649459, 0.12051183010461863, 0.23515185012222672, 0.0, 0.18432527548043587, 0.0, 0.0, 0.0, 0.0, 0.013311742189785258, 0.0, 0.0, 0.0, 0.0, 0.08860656267025102, 0.04623946794921763, 0.07980494993727394, 0.06260033981246471, 0.010208583408780059, 0.02498637271107329, 0.07466096926131527, 0.055847451868973774, 0.04630492181802348, 0.0, 0.2148176257696468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003247750738368249, 0.0, 0.0, 0.017830719133332562, 0.0, 0.0, 0.00026824428217042673, 0.3888933623132703, 0.42708207935396836, 0.29742885539663877, 0.21196525307605352, 0.16506815629290938, 0.15502476361766382, 0.43404450676349493, 0.4100614477015956, 0.3395386306697492, 0.049848606791376704, 0.03328131353457009, 0.026560246529394482, 0.10526295214953407, 0.055673162841874735, 0.1265110792559233, 0.07322213843692427, 0.10015802949469566, 0.06505321416565546, 0.1557729812137335, 0.09565540142255635, 0.2183825987918232, 0.15452844512703812, 0.11347562592478022, 0.14458046268969904, 0.1866657957122263, 0.17849586399195416, 0.20920221747896972, 0.16795465687803335, 0.2075301620127874, 0.17032502286451068, 0.21735329178069396, 0.20118589883709015, 0.20264713589017236, 0.17273066646856694, 0.2561253003321018, 0.15368289988018602, 0.11037376810516486, 0.17600733301590188, 0.2013412425245027, 0.18152540126856442, 0.14623342060878697, 0.2313716519647946, 0.16309416951457845, 0.20035471584676212, 0.12674706989292284, 0.2237129605477891, 0.24114539308677818, 0.2090708221457378, 0.21833613590543954, 0.2061628197300419, 0.2059528970174267, 0.26704583168585205, 0.21529296597067704, 0.21661817438746023, 0.16134756939548278, 0.19023078977547592, 0.17536910602435496, 0.1922418599885114, 0.16486027341221543, 0.1644199419268989, 0.16541505084344643, 0.2209746520021234, 0.15790632877941568, 0.16763284455113459, 0.18356652095912984, 0.14721352923830688, 0.4367683461402132, 0.1833443264465684, 0.17370514818007865, 0.09435801371681896, 0.15683179991714946, 0.12004276049846963, 0.22666978117225722, 0.1554944825358724, 0.21554149443691017, 0.1661521908224618, 0.16062772498186895, 0.30322798379642457, 0.10706397047101168, 0.14642942222065813, 0.22361268570830295, 0.17845886006328238, 0.19094192849960967, 0.19844415189603948, 0.16791585902710882, 0.2117299300304769, 0.20407190133353192, 0.19005335076817043, 0.21225566799006867, 0.1893188570717872, 0.0874534477666914, 0.09045630345415234, 0.09348267918687192, 0.07650068437017199, 0.07899921328960935, 0.0884883110849396, 0.08394162620989487, 0.06746773130334227, 0.07064671248429599]}, "mutation_prompt": null}
{"id": "7085310d-1f76-4cde-bcd0-1144c05c06cc", "solution": "import numpy as np\n\nclass FastQIPSO(QIPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.alpha_min = 0.1\n        self.alpha_max = 0.9\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                    improvement_ratio = (self.global_best_value - fitness) / self.global_best_value\n                    self.alpha = self.alpha_min + improvement_ratio * (self.alpha_max - self.alpha_min)\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FastQIPSO", "description": "Introducing a dynamic alpha value based on fitness improvement to adaptively adjust particle velocities for faster convergence.", "configspace": "", "generation": 9, "fitness": 0.10772363860834222, "feedback": "The algorithm FastQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.12.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.24760416927895035, 0.3808120370795516, 0.4481759862865128, 0.11356813007886901, 0.1055987441195777, 0.17657675038077303, 0.17132253901452899, 0.1507973590259546, 0.1459410151865519, 0.0, 0.0, 0.0, 0.0, 0.0017689135913464549, 0.0, 0.0, 0.0, 0.0, 0.06519135622003591, 0.11671629524439542, 0.07927935017297949, 0.06784034968712438, 0.08645326423584465, 0.07415151322664748, 0.06492206699906489, 0.10677442851314478, 0.09237435635808089, 0.04936040756629423, 0.06395326092507492, 0.035594328275957765, 0.0693749981648285, 0.03816404964845255, 0.041467131466107254, 0.08520648424868249, 0.051054240911378335, 0.01863882204250422, 0.04661201767475631, 0.978391445272974, 0.9783913848965115, 0.054665972079832814, 0.047798106886029035, 0.039571496647621496, 0.06387951701434103, 0.05016139543382725, 0.04029934163561333, 0.10317763802201096, 0.12378091658993129, 0.011366131106494315, 0.08568883403794314, 0.09298698894388746, 0.06776073403539506, 0.04110825843515031, 0.08334175676807043, 0.0, 0.2197471321903649, 0.1562367424688207, 0.1308581600172205, 0.2599640509300686, 0.08727192671007722, 0.25132215656867196, 0.08245704402232712, 0.06236033224375748, 0.05842718397172775, 0.0, 0.0, 0.011371544600260353, 0.09326162163495788, 0.0, 0.10341768134282625, 0.09289018476184208, 0.10620086963981235, 0.01688612248990451, 0.0, 0.0, 0.0, 0.0, 0.10508590403209961, 0.1257952401282988, 0.0, 0.08187156891895242, 0.07153148492164296, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04491786300721323, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.017161570191120745, 0.0, 0.0096959066766803, 0.014998578530956763, 0.0, 0.10290850997538781, 0.0, 0.30869809551853067, 0.2890807258639245, 0.2938337114314159, 0.19189607945410703, 0.149059041554231, 0.1461243348687551, 0.2782671695451765, 0.3682452699520995, 0.39778022929102985, 0.04195114176865988, 0.024347399981160533, 0.0, 0.07580507447535934, 0.0580873669602171, 0.08008832069178284, 0.034564259192887636, 0.02664544250556411, 0.026668336265785353, 0.10127493693321754, 0.0898674932538508, 0.11105933664415002, 0.10447899178931752, 0.1137146916720243, 0.08202851010652179, 0.09719276764465246, 0.12283148980893732, 0.10052207783949052, 0.14510990327197393, 0.18084963391383713, 0.19619388585247322, 0.255358730172222, 0.22255103218163963, 0.2681276907741946, 0.1581792770157061, 0.24087313578139247, 0.14356210390770607, 0.07734609869670261, 0.07673187114415503, 0.0725542022365222, 0.2203117274035178, 0.18617813786742432, 0.1691116169446526, 0.12284278178630625, 0.15591174312627976, 0.09311153792725457, 0.20163310146700097, 0.2394629441640126, 0.1487948913693119, 0.16274661260419376, 0.19375425904578425, 0.19672633259654415, 0.22510880357352092, 0.2273566593709052, 0.16435505394199168, 0.19903866839873985, 0.16248732700363544, 0.1549474206251461, 0.19118322982338676, 0.18111244853741515, 0.17130513193181995, 0.14531548003303485, 0.1659277166727965, 0.15500953532589246, 0.18120490139297907, 0.1828431746020952, 0.11222215406379987, 0.16909390190996987, 0.16033708466042174, 0.10599080742892897, 0.1100368880506809, 0.12316797897243703, 0.11248829854208309, 0.20329740970410792, 0.14965919739668843, 0.22190284848007236, 0.12546917284505, 0.13404597024287035, 0.19920627248297207, 0.10482971156491006, 0.1641357149757996, 0.15064841817135055, 0.17750490764361804, 0.15689943686276053, 0.16737365959690065, 0.18314567793578385, 0.20336073232391427, 0.17717238342869246, 0.173727336190037, 0.1936554035650282, 0.18450381003845784, 0.0818832694554279, 0.06284958556234921, 0.05699839133174245, 0.0680251010792099, 0.08227038777916529, 0.047610920348240104, 0.06399645407740939, 0.08219712500449572, 0.04496476678493111]}, "mutation_prompt": null}
{"id": "c27813c0-08cb-47b4-a853-f875870bcd3b", "solution": "import numpy as np\n\nclass AdaptiveQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.inertia_weight = 0.5  # Initial inertia weight\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.inertia_weight * self.velocities[i] + self.alpha * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n            \n            self.inertia_weight = max(0.1, self.inertia_weight - 0.01)  # Decay the inertia weight\n            \n        return self.global_best_value", "name": "AdaptiveQIPSO", "description": "Introduce adaptive inertia weight to dynamically adjust the particle velocities for faster convergence.", "configspace": "", "generation": 10, "fitness": 0.12044662611317304, "feedback": "The algorithm AdaptiveQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.23957154191167063, 0.21914890333453518, 0.32523322134678256, 0.1421472833040065, 0.13546479212860796, 0.20636867681873494, 0.3180862099342898, 0.23566356767453012, 0.1663337233925959, 0.0, 0.0, 0.0, 0.026702768524406784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09022498843487514, 0.08775788859578626, 0.0649501800785165, 0.08193289204424925, 0.13685793144730174, 0.08962140260711926, 0.07792310430297367, 0.09260595313072117, 0.08126150890037442, 0.05186137880712849, 0.06492241605003823, 0.06828296710758819, 0.07205404349110633, 0.03303640965971877, 0.04933763872327179, 0.061596962727927695, 0.04224965707663797, 0.05527772473641657, 0.07878802154998088, 0.06439013849949715, 0.06839870172790419, 0.06958032652918666, 0.06538413939468335, 0.06517352417478561, 0.08875639768058385, 0.06885662784907998, 0.06258818761092211, 0.06205401274644751, 0.04333327306451462, 0.027021375652326096, 0.09276274991587774, 0.06449054825195, 0.06077277491137034, 0.13778177655101354, 0.07337031481846368, 0.07612989000350867, 0.18805296098748847, 0.11687234243758671, 0.13250521144366756, 0.2564409204072887, 0.1608788933434776, 0.17759606589386234, 0.11029277939664184, 0.14544353388620967, 0.10342993116055754, 0.04989358860988191, 0.10114590649445421, 0.0, 0.0, 0.2334666914335478, 0.0, 0.10869337471404272, 0.128916303908022, 0.14612560572861855, 0.14633922783217657, 0.03836536970533544, 0.13205867623367773, 0.14188164451037844, 0.12089696659186921, 0.10547666750750728, 0.2846303132374184, 0.10312522625219189, 0.11374225230917057, 0.0, 0.0, 0.0, 0.0, 0.07066470236319433, 0.0, 0.0, 0.0, 0.0, 0.08972218397837695, 0.07725867780240991, 0.08874995962123156, 0.06476844982858143, 0.011126408038505176, 0.02881963240660501, 0.0779989858728668, 0.07927977732609814, 0.11932098759953602, 0.0, 0.042625237318696274, 0.0, 0.0, 0.0, 0.10328147471560656, 0.0, 0.0, 0.0, 0.0, 0.0034588234158833275, 0.012220901763904113, 0.0, 0.004381794970565345, 0.007897199327019155, 0.0, 0.0, 0.037572692829664134, 0.35408181018022, 0.45483479451390063, 0.267524584071962, 0.22942654100812487, 0.14157229000931404, 0.1623247933693729, 0.4251354028443445, 0.4005220085236316, 0.3125945255835987, 0.039282282104463384, 0.035881909040573756, 0.020139201509425053, 0.0831309797030595, 0.05229533811557374, 0.07342580095242879, 0.07699021831744934, 0.10642058519041253, 0.06780684209704435, 0.1040737265816799, 0.12834737580639777, 0.16802893371312166, 0.112118916455619, 0.12475182296004317, 0.11779854292106196, 0.17044164777205006, 0.14015575511444733, 0.21079315430235024, 0.17120117901316056, 0.2042789232564578, 0.20475451388226862, 0.21380782157894296, 0.17298969007188547, 0.2618891479591664, 0.17927678312505035, 0.22805788941968375, 0.15109731919535263, 0.19571518904427887, 0.22252157402946127, 0.11730696406827956, 0.23665971533317676, 0.23817866188305514, 0.18389038407715064, 0.16319365679819298, 0.16961803351093763, 0.12882040483505752, 0.2180091908174958, 0.18637761147791287, 0.18086847423040464, 0.2618007835791878, 0.1853200384637077, 0.20541790008276561, 0.22775458843901553, 0.1919777078357603, 0.1669758902496542, 0.2066658118153475, 0.1881233575454202, 0.1773101230502485, 0.18131712789565224, 0.17099250112360065, 0.1701540457650037, 0.16884125015358453, 0.1858025724243384, 0.1811502390499683, 0.16259410423011778, 0.18271275646553198, 0.14808601866843552, 0.4548925949595578, 0.19427964308520218, 0.16914289283833317, 0.10989765136614604, 0.16115731249315668, 0.12788142154858984, 0.2672681729836931, 0.15549406000266097, 0.2287143233753005, 0.16487543381457548, 0.15958358056114286, 0.2382155311925832, 0.11153025201795119, 0.15314390933867594, 0.20159052141760636, 0.16870313146197147, 0.16019148281621087, 0.18071120244012473, 0.20771475438671438, 0.17729844530973715, 0.21895750249582002, 0.18235975107191138, 0.17658008376139678, 0.15567589167812934, 0.08434854456141383, 0.07671292966160304, 0.0672453292854972, 0.07384229550080657, 0.07513017519784537, 0.04915423972846855, 0.05878679128515818, 0.1191675588383041, 0.06328724233488103]}, "mutation_prompt": null}
{"id": "5185b02e-99c2-4d7b-aacb-b5dfd3bd3d09", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_value = np.inf\n        \n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.global_best_position = np.zeros(self.dim)\n        self.inertia_weights = np.random.uniform(0.1, 0.9, self.max_iter)\n\n    def __call__(self, func):\n        for t in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                \n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.inertia_weights[t] * self.velocities[i] + 0.4 * (self.personal_best_positions[i] - self.particles[i]) + 0.4 * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introducing dynamic inertia weights to adaptively adjust the exploration and exploitation balance, enhancing convergence speed.", "configspace": "", "generation": 11, "fitness": 0.12162260685429331, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.28782237803834965, 0.29719589158550086, 0.4120285415225654, 0.12197769353390064, 0.12701902148891586, 0.24021400856516517, 0.15282936313966877, 0.34845102771164016, 0.18496794184611054, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09361242680947746, 0.08367539102131027, 0.07414945417244212, 0.11307565693739907, 0.12186288036189785, 0.12617720669763943, 0.0813011771424772, 0.10948287991849281, 0.1359583774633909, 0.08230631432814284, 0.04217112863547223, 0.0470797812138084, 0.09969378638152515, 0.06047734594110932, 0.034535645369594525, 0.041081210082713926, 0.03932903606489857, 0.05474355507256545, 0.054694270128031186, 0.1054547542271077, 0.07897983387097451, 0.059632262662096536, 0.07650027547954141, 0.09115581528276906, 0.06624154716714437, 0.07878535526167174, 0.08843587538057474, 0.04364741421450613, 0.06150414921136105, 0.06926299339041853, 0.0896471561857376, 0.03793164620806688, 0.0642287169161615, 0.11959166521044096, 0.03546076583588931, 0.039215675923349624, 0.14872571774946663, 0.11213210006239782, 0.131597704767363, 0.16283320980871308, 0.1198355572671913, 0.15377087295146108, 0.10470825959078534, 0.13973048327549986, 0.11543612714157248, 0.12038085035622093, 0.09880825207768595, 0.05333897494811335, 0.019747963613302777, 0.0003477801892146637, 0.0, 0.15525438480589016, 0.1680111732469115, 0.1605540093854152, 0.1588400412834664, 0.13843190500413127, 0.12872708593347415, 0.031252421891663884, 0.14228305865681357, 0.1362253286763202, 0.1601678067700837, 0.0, 0.07142257531881335, 0.0, 0.0, 0.0, 0.0, 0.017290102368505367, 0.0, 0.0, 0.0, 0.09139223940341012, 0.1317070678537946, 0.058967572242359934, 0.08714621776771514, 0.04085263228707259, 0.013229876619203829, 0.0232167470356055, 0.14102156478872152, 0.06546726537374215, 0.07076173269769803, 0.0, 0.20355811280883895, 0.06989758164385818, 0.0, 0.0, 0.00032931966081728437, 0.0, 0.0, 0.0, 0.0, 0.09835497865816956, 0.1043379987085522, 0.0, 0.0, 0.0036891549470725593, 0.0, 0.02354630408880276, 0.08515702859550489, 0.31307821033685446, 0.2386108155608565, 0.42436007947628207, 0.15286626051286079, 0.1642726496172725, 0.2934474205210488, 0.35033423843626865, 0.4290954210889901, 0.39095776467269283, 0.05865045626060672, 0.06282994946212239, 0.008348493961479964, 0.06242769024167161, 0.0686218933288032, 0.1644034743871029, 0.08654730361252039, 0.08371236116758574, 0.09336247514149631, 0.1109856922094914, 0.24118074993997818, 0.13883639702460204, 0.14850960553349613, 0.2106908038290457, 0.15190687566306893, 0.13931946517622018, 0.11876242210181986, 0.1801656242143903, 0.14364896374895164, 0.2604470497907546, 0.1704280175949059, 0.21857643966433837, 0.20462898940586538, 0.288333712562692, 0.16459363477660194, 0.21358583036098855, 0.17925611815912268, 0.10536326153445297, 0.26585371583790207, 0.08897670295302818, 0.1304786368043548, 0.13051234482691254, 0.23146337358721847, 0.17120050555473132, 0.1830086354849293, 0.0987022627366454, 0.20928738956391002, 0.17459085553545173, 0.14980903306697146, 0.20595121144705764, 0.20409789975055181, 0.17409567569235174, 0.22761288691755832, 0.17213403396372196, 0.24306910867237452, 0.1985281192656887, 0.17076597089409917, 0.16653993605536688, 0.17958350408526458, 0.19316331010371934, 0.16582691598261334, 0.1650247934892345, 0.19150732389254432, 0.17873048224042265, 0.17030793098427421, 0.17463509746262829, 0.18172267299873845, 0.1696297471698337, 0.2012303161522413, 0.19433810784370076, 0.14536617774085847, 0.16780082692928133, 0.16553157171182142, 0.2275364241541491, 0.1563915279004996, 0.2936807607509607, 0.3113303156692223, 0.10874741644704555, 0.10168284130178962, 0.09615780768055371, 0.1438221785711432, 0.1717483653873384, 0.18756967165172145, 0.1945234675395574, 0.18601069965057682, 0.17859667699049264, 0.18528240832636522, 0.18345757785059402, 0.24543814189543578, 0.20986686106556052, 0.19199593208809485, 0.07567592072499152, 0.07567023739358159, 0.06521623192952597, 0.07761722934289172, 0.09734030536525284, 0.08073486315112, 0.07545694924584934, 0.06557337133627661, 0.07105877271802441]}, "mutation_prompt": null}
{"id": "7494a148-c028-4cee-be38-ab6f5cb9d78e", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "295f2186-6d4a-4143-9ab5-ad9d69deee44", "solution": "class EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.initial_alpha = self.alpha\n        self.initial_beta = self.beta\n        self.inertia_weight = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                    self.alpha = self.initial_alpha + 0.1 * (self.global_best_value - fitness)\n                    self.beta = self.initial_beta + 0.05 * (self.global_best_value - fitness)\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introducing dynamic adjustment of inertia weight based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 13, "fitness": 0.11062894315465444, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.21.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.1773818807473866, 0.2177543617717146, 0.1625479228179424, 0.7483973119791949, 0.15823454905731027, 0.2063448274769799, 0.1720556822013921, 0.12726341252221918, 0.6719656627508253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006086222525447882, 0.014572254734063428, 0.008056245070459545, 0.010544468052270939, 0.0011187632349112242, 0.02556478754622915, 0.01815007885326736, 0.0, 0.03214412667947397, 0.0, 0.0, 0.0, 0.019501673109805107, 0.004484978905349601, 0.0, 0.0, 0.004630015234444174, 0.0, 0.9935979188403943, 0.9741680020562112, 0.9939593731930928, 0.09955813720367279, 0.9845183090307784, 0.9728076529160001, 0.9843502272658401, 0.9819684952546209, 0.9809550143652913, 0.0, 0.0, 0.0, 0.0, 0.00021551809530395705, 0.0, 0.0, 0.011194453811968152, 0.0, 0.10018685869137223, 0.037659716988798, 0.052139046482094775, 0.13346130437791182, 0.027157688250687206, 0.016029450257094457, 0.06131672837772151, 0.08562018355111745, 0.04055033447073442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.49603910599732837, 0.2026691541469059, 0.4624346985191612, 0.5398806948670885, 0.20972571703583853, 0.4601636664818832, 0.20583443142957636, 0.4776768507480711, 0.47975779139592656, 0.0, 0.0, 0.0, 0.017890158375109988, 0.0, 0.017501683791252387, 0.00048731482729613695, 0.01040473086003657, 0.026668336265785353, 0.14009879112092438, 0.10697307371668763, 0.1379737962211468, 0.1453628182299872, 0.13328078010796485, 0.1500071416374149, 0.12340807550390187, 0.11530070554082972, 0.13099216106626776, 0.14253710774105544, 0.23672163896446163, 0.14344245626168106, 0.24067196590769924, 0.24413973203557315, 0.2147951567909021, 0.20656210533904384, 0.17436217671630805, 0.25511272037752286, 0.05623149690483842, 0.041016403327042594, 0.06920358806380811, 0.07070533339650686, 0.06855799353942127, 0.06333484497585506, 0.08364015581191053, 0.10824517018342628, 0.08361038568460077, 0.13027493457895856, 0.2180056027423578, 0.13336421106426755, 0.1837863722151869, 0.128447542614064, 0.17147618056965808, 0.12449675273873761, 0.16441413610940203, 0.13528962491948548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13359362211676673, 0.0, 0.0, 0.1350193676369712, 0.09410403431070014, 0.16339562222977, 0.09424558615652079, 0.14009213358721695, 0.10278563840589794, 0.10065226441400554, 0.10013944113081052, 0.08836863937303063, 0.11031370369945248, 0.10042736099156935, 0.07122568679144647, 0.05718195713544483, 0.06523774783181757, 0.05785705374512595, 0.07563161295925458, 0.10324224834248019, 0.08274517916657553, 0.1837058173562387, 0.21358884370230935, 0.21789325562210715, 0.20148562196310726, 0.19397736273438937, 0.18103095759307708, 0.19876663703449704, 0.20256078594932092, 0.18458763710796844, 0.03567474769694712, 0.015817976510988374, 0.03129662407787326, 0.028354450097061612, 0.03415436066357691, 0.03331592787033655, 0.016129998991522787, 0.02414749659485893, 0.021913213602766546]}, "mutation_prompt": null}
{"id": "6bdb9aab-5770-4a44-b64b-a12e72de8ad8", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "edf13895-5204-4551-a288-902836eda77d", "solution": "class ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.inertia_weights = np.linspace(0.9, 0.4, self.max_iter)  # Dynamic inertia weight adjustment\n\n    def __call__(self, func):\n        for t in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.inertia_weights[t] * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "ImprovedQIPSO", "description": "Introducing dynamic inertia weight adjustment to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 15, "fitness": 0.26556626183013393, "feedback": "The algorithm ImprovedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.8593020525495636, 0.8546730300403631, 0.856202689850405, 0.8687325951962909, 0.8576306729619037, 0.8654249909419747, 0.8622635855515712, 0.8553480669238933, 0.8583567409905934, 0.09558382400393206, 0.037426392939898356, 0.08965023391917581, 0.0875834360372777, 0.06382714179468496, 0.0786063530446921, 0.050426285091137446, 0.06441115181802126, 0.07303911187172962, 0.11018037581541851, 0.1166653998730326, 0.0955365141434924, 0.1008565098548897, 0.17556832114681187, 0.12840551815391432, 0.15277460547290134, 0.10977945777694609, 0.0908878414239056, 0.07288819023852688, 0.12027227125667417, 0.10584637745215353, 0.1298237967788477, 0.10736072023838861, 0.11487638552256318, 0.1425396695097394, 0.035570695897918614, 0.0862625138283103, 0.9751447188658708, 0.9814883101874707, 0.9783739224595279, 0.9620681205245235, 0.9675278800736801, 0.9615663477519726, 0.9753897329848202, 0.9665270603176509, 0.9662325172353633, 0.3442044724837551, 0.2994011362062732, 0.6363594381684412, 0.47217738614089344, 0.5590217384329184, 0.34100568459261027, 0.4368854969690392, 0.367257985482237, 0.5927493186676607, 0.20670091346560227, 0.16922721658593887, 0.22603444917178206, 0.2780485943536677, 0.19215737171405833, 0.20458366963246566, 0.22089185247319043, 0.12999831729336186, 0.23376850455436438, 0.1465846135564921, 0.17409041663742952, 0.15015862564402027, 0.16513395456318847, 0.21867873409713046, 0.1498779372925093, 0.30400448929244217, 0.15728796727976446, 0.1635676710444932, 0.15495084369820156, 0.18722470700780414, 0.12597424050871942, 0.12634984558491869, 0.1467389256018118, 0.14835005504741772, 0.21549899198581968, 0.2573659983032386, 0.17276843144281206, 0.0, 0.0, 0.05496128285460944, 0.06619417650131199, 0.042209282432746464, 0.014675144938502305, 0.0, 0.0, 0.052316095525342776, 0.06449761320398917, 0.05841360014608854, 0.09114372876417876, 0.06798439376690801, 0.0001434670809848937, 0.008439940705035731, 0.07190686650254541, 0.06203167182643432, 0.03352417746359748, 0.05813413239722176, 0.10707448443041645, 0.1721154951419478, 0.15224014243441475, 0.12358390331479041, 0.10923750939521903, 0.09361142495852148, 0.21640893202619915, 0.0915943155941581, 0.10628160931099773, 0.23550806932651291, 0.23729956783265405, 0.006126817811512586, 0.08314250314897564, 0.11892866426127824, 0.13239873778260847, 0.048901602624271234, 0.0803834799939408, 0.47907242107161496, 0.4758416433296345, 0.5065843431512964, 0.6366041466982244, 0.46661406756747315, 0.48643030318988456, 0.5507916937111936, 0.499893583124258, 0.5126050742339403, 0.09704241107239608, 0.1316657912558643, 0.09398033167738118, 0.15502492053785843, 0.09241866921700492, 0.08907968296897384, 0.10218436138351628, 0.15939718581783258, 0.09443112097451833, 0.2703383232550034, 0.3455165577319026, 0.35277386063427607, 0.25331867167450395, 0.24873771271341927, 0.20413795068087748, 0.4287679307461182, 0.20374609482107542, 0.21689399883416327, 0.3460406892089838, 0.31723852929801655, 0.28314416927643216, 0.3472714563419843, 0.3022979376250846, 0.3829703922130996, 0.35671159760751014, 0.3166985550008239, 0.47128904947279726, 0.13391308212286768, 0.18522122223926174, 0.3689663575171722, 0.31314733481272994, 0.18519993908451637, 0.2527293991510017, 0.21377986872099008, 0.2853886819129787, 0.25038500769493444, 0.23705338799358333, 0.24318858500861695, 0.20780548237373897, 0.18658769121389174, 0.24263157786046985, 0.19341234608017022, 0.21628832194767222, 0.19966550967957386, 0.23946911085587774, 0.20790175977189307, 0.2211797835108178, 0.18800559821919893, 0.18060410291731765, 0.18573109646069652, 0.20087677822611127, 0.18281178691033906, 0.19023530149365475, 0.18538408604491974, 0.8454353314394739, 0.12601255195240868, 0.1543193705484357, 0.8973966830806478, 0.2009444430550702, 0.19946582790139233, 0.09966351197947643, 0.16983197954624796, 0.918243465365928, 0.6562808550938624, 0.15664891868942632, 0.3909016456514086, 0.21151822235292472, 0.16888711662484945, 0.6876629192424096, 0.10354238092321133, 0.16680069707908118, 0.4142904991716362, 0.188308790324914, 0.18701513610503684, 0.17857137937074008, 0.2141703170675826, 0.21026144807202296, 0.17762491822026427, 0.21336059829409204, 0.18465089537882617, 0.20344771741161205, 0.09038217314616837, 0.10919228883637166, 0.1048985190874584, 0.08605098152720547, 0.08327549942127366, 0.0762941848349532, 0.0747940681308028, 0.0898887485579779, 0.10176508509298965]}, "mutation_prompt": null}
{"id": "632507c1-488e-4f70-b03b-d084553db004", "solution": "class EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_max - (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introducing dynamic inertia weight to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 16, "fitness": 0.2642447389552578, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.8589815068477842, 0.8560277031938264, 0.8572070802386371, 0.8682522234948218, 0.8629970430622873, 0.868912037329208, 0.8686235529581783, 0.8561354364860222, 0.8591281613177595, 0.016549488564931547, 0.04105275293186583, 0.13614321696868825, 0.08766848190901677, 0.06944391663282223, 0.0657671106197748, 0.05674367462956176, 0.054004583797868544, 0.09161257391286504, 0.11017745336090301, 0.11655178004451117, 0.12603901876920476, 0.10085406361414839, 0.15382280074012744, 0.11391734255018005, 0.1677483486398894, 0.10977270407605266, 0.09129874981900488, 0.11036714693086436, 0.12022338229162355, 0.12585158440481758, 0.14021821609649254, 0.11330638294854656, 0.11003880832477975, 0.14229965399966626, 0.035602256635079876, 0.08630986100829718, 0.9751447884476484, 0.981488426808301, 0.9783739583310359, 0.9620682437492568, 0.9675280342629159, 0.961566669205497, 0.9753898578355411, 0.9665281376785253, 0.9662326206239832, 0.3337176490589704, 0.29159870995874193, 0.20164724929469124, 0.3307150493008031, 0.3124794202972415, 0.3815726263517585, 0.5542723981006061, 0.7335954406170018, 0.42474743664203163, 0.20670091346560227, 0.20563352319430683, 0.22603444917178206, 0.27805031577313843, 0.19215737171405833, 0.20458366963246566, 0.22089185247319043, 0.12999831729336186, 0.23376850455436438, 0.14806342978540576, 0.17177419774400804, 0.1476309499625975, 0.16135449370684107, 0.21529089889794017, 0.14827925613889625, 0.30401409482906394, 0.15703029866347384, 0.16357808660704742, 0.15771366113064356, 0.18637380494473166, 0.12601491044736435, 0.12638596731995344, 0.14633088215711965, 0.1526156107624259, 0.21724572085515093, 0.257570432590538, 0.17268973226906814, 0.0, 0.0, 0.05432918353501559, 0.047286375409472337, 0.04237608170085927, 0.0, 0.0, 0.0, 0.05184345661093903, 0.06418475992754025, 0.058467053864726726, 0.09133782488638065, 0.07010990736842992, 0.0, 0.008324279555525949, 0.07084266077520607, 0.05707778033503841, 0.03357798798679468, 0.05823808148323517, 0.1062115439385023, 0.1748509583527843, 0.15177708475333673, 0.12359432405806692, 0.10911571567114153, 0.09363521089154914, 0.206168522157275, 0.09156464874528647, 0.10621060787117387, 0.2318433213242167, 0.23692144349549626, 0.006134330656390907, 0.08310463852476535, 0.11791145904533729, 0.13245330450572312, 0.04890229136093349, 0.08039160039592352, 0.5150771465046999, 0.4807704150395805, 0.49862887201700556, 0.592604883545764, 0.49582831239205194, 0.4860339573469814, 0.5316218764400931, 0.49569950148588904, 0.5018649935833325, 0.09704231817622877, 0.13166577567688442, 0.09411155463856591, 0.155007295345039, 0.09242497260235882, 0.08908372257496067, 0.10274692664844676, 0.15941967744221386, 0.09465557905818045, 0.28118692980023985, 0.4054345167621404, 0.37319234603812446, 0.24567914742969843, 0.263828485914659, 0.1975816641251983, 0.4196793353369792, 0.2146425683299179, 0.20046956212622813, 0.34215177541970787, 0.31682856039658414, 0.2728963268895781, 0.32948072291348685, 0.3091146150694344, 0.3931573315549527, 0.32786009528724036, 0.2818892131380798, 0.48684739589030634, 0.12934933991840736, 0.197411786841848, 0.2300389321409928, 0.29093060892376243, 0.20810854508583077, 0.30388978580397796, 0.2129419087284562, 0.3009281910886268, 0.26562467461493366, 0.20859250879419067, 0.24563000765813325, 0.20517574276223038, 0.2777397989941207, 0.2690811163434278, 0.2063037197298787, 0.19311419786236173, 0.22280790516297022, 0.26097184969116116, 0.20789934026349088, 0.22114332822851224, 0.18780056395089817, 0.18060162842275784, 0.1857317304731375, 0.2009701103492657, 0.18281142588050814, 0.22168462112887355, 0.18779224171333753, 0.8442916032285427, 0.12589892978193662, 0.1543194407985271, 0.8975201394044556, 0.2009440647855063, 0.1994658414746301, 0.09966355176695907, 0.16982447056888117, 0.906604892837266, 0.6147416170726031, 0.15664896379172533, 0.3807127038472642, 0.21151762806873275, 0.16888717173453605, 0.7043685405449238, 0.10354237406217448, 0.16680075670127203, 0.4118628579746634, 0.19632679012990017, 0.19229097607978707, 0.21243189698499765, 0.2092438653853067, 0.25541848551846846, 0.18559338267982295, 0.20057324459979076, 0.17968229664911817, 0.2030180480948488, 0.09019434291748785, 0.10227977458429627, 0.08849402812129559, 0.09711831443304764, 0.08665382440521407, 0.07528529153673758, 0.0900921384184501, 0.09571693628099509, 0.10267184458832834]}, "mutation_prompt": null}
{"id": "9dd01a84-0169-4819-b325-749ba1a77a7a", "solution": "class QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha_min = 0.5\n        self.alpha_max = 1.0\n        self.beta_min = 0.2\n        self.beta_max = 0.6\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = np.clip(self.alpha_min + np.random.rand() * (self.alpha_max - self.alpha_min) * self.velocities[i] + self.beta_min + np.random.rand() * (self.beta_max - self.beta_min) * (self.personal_best_positions[i] - self.particles[i]) + self.beta_min + np.random.rand() * (self.beta_max - self.beta_min) * (self.global_best_position - self.particles[i]), -0.2, 0.2)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Introducing dynamic adaptation of acceleration coefficients to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 17, "fitness": 0.06216025132715378, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.09663418496374565, 0.07758228405152023, 0.09295856618189902, 0.08943128444456905, 0.06211197037407035, 0.07700439226554878, 0.08573824251296391, 0.07626061032849829, 0.06992617805402701, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01813425367810939, 0.025845972381201454, 0.025056348081120117, 0.021013950211123622, 0.010424305416733448, 0.03476476753721103, 0.018150078853293228, 0.009771842477595771, 0.026272314366095673, 0.01996364684950136, 0.021406476097990734, 0.01662743503636377, 0.0237363454037397, 0.0103821967208656, 0.004510189726337321, 0.026007377175185864, 0.01652265398140884, 0.00573658218201234, 0.049236983668973, 0.04302970678271545, 0.047217181147141685, 0.05324558914834965, 0.04683224811817377, 0.03733246297295645, 0.06379241875039388, 0.04889164439368143, 0.03910579656877622, 0.08140753000189416, 0.0, 0.0, 0.03587095417699726, 0.011942778177957192, 0.0, 0.0, 0.011223212667634819, 0.0, 0.13153810261380838, 0.06884660220410332, 0.09718405797645302, 0.10180068440712153, 0.05264007931160164, 0.05032912461965755, 0.10865853627004485, 0.07699025052709962, 0.10575274604286655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.037181556786785586, 0.02523512307286835, 0.06032515387963466, 0.011725048396412974, 0.02595506331353792, 0.043139628773140926, 0.02361500549328699, 0.019406216827983602, 0.041917857187232954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15555234392481454, 0.13871047537962367, 0.19610279575403222, 0.1566110834018597, 0.1313589795702712, 0.14264535063579187, 0.16104568613242554, 0.11571226084895503, 0.16134341143444686, 0.05350361103146628, 0.033608764094997245, 0.020847975587911294, 0.019980518386848223, 0.01711469125405707, 0.034626276527296995, 0.02670957064943158, 0.014030056549289793, 0.02666833626578957, 0.09736505876282986, 0.14720162674888904, 0.11485602540728845, 0.10756643775544794, 0.1294356076868004, 0.11251442458996952, 0.13022090937599007, 0.10734623655153375, 0.12756458730495557, 0.14681800363419895, 0.14284958183030994, 0.17366193192979007, 0.15860078341284456, 0.1336109618928878, 0.1430731338232899, 0.14226284139823897, 0.17369512487630423, 0.140644287511826, 0.11164085443008698, 0.08480281711524063, 0.11149425755355857, 0.1139165480977099, 0.08295495490729132, 0.07296860890921075, 0.0977062393305157, 0.09968109929822744, 0.09617248179531956, 0.13708060005483536, 0.14056444371857613, 0.14303470031621512, 0.12691212960524823, 0.12356045151348605, 0.13280988082730838, 0.1742762342473736, 0.1155828676732501, 0.16332813066235152, 0.0, 0.0, 0.0, 0.029274229878837987, 0.0, 0.0286924016516934, 0.14038620356003373, 0.10391377951783087, 0.05839260297604543, 0.1612662103998247, 0.15847119478365312, 0.15482054047183536, 0.09746971072257549, 0.15665287609205913, 0.11000630966336866, 0.20627929356474317, 0.09798192762891644, 0.12807695689390708, 0.11744813734047621, 0.11643403929812468, 0.0741259524917044, 0.07981960452971648, 0.11431932935730071, 0.07147306951998345, 0.11075255388814642, 0.09130966672819463, 0.09356523501094127, 0.17378913088905212, 0.1765517490434455, 0.1897307389985048, 0.1712261097545439, 0.18664071694536055, 0.1905636079110472, 0.19028595589398567, 0.17122903194692407, 0.19887938584464948, 0.03460719817216518, 0.04216798503959385, 0.05450836564987405, 0.045735882834203934, 0.05105116389373887, 0.0569352744299515, 0.041519757292458936, 0.04285795551355476, 0.03011160503172483]}, "mutation_prompt": null}
{"id": "a40f8553-81d6-4753-93d6-556c90d43b94", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "26da721b-02e5-4ad0-81d2-c7d1c29667db", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n        self.dynamic_inertia_weight = 0.5  # New dynamic inertia weight\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.dynamic_inertia_weight * self.velocities[i] + self.alpha * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])  # Updated inertia weight\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the QIPSO algorithm.", "configspace": "", "generation": 19, "fitness": 0.1402086492743605, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.2934411901667817, 0.2796111475937122, 0.723806142541972, 0.19093125533489996, 0.17369299106904879, 0.27759906421582414, 0.6107527058532801, 0.4175947784670965, 0.2256050955701756, 0.0, 0.05041614894385438, 0.0, 0.002298635341354771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06575497282257292, 0.15187799707742977, 0.06293213229240846, 0.08660095422690572, 0.1121652194258197, 0.13471528259121746, 0.1023973010561614, 0.11980409332902964, 0.0939302992146146, 0.0707778947586799, 0.05842315833085865, 0.0950879979706939, 0.07701906555330273, 0.03669889130294812, 0.0554141938584467, 0.08793053015363328, 0.04263696567658226, 0.06415391304903917, 0.09790703277656743, 0.07796253265746023, 0.07842729403854742, 0.07411697458352395, 0.07297734386747723, 0.07487635706014684, 0.09609000323718997, 0.07474322247203669, 0.06849391594537668, 0.06888188309557264, 0.06022386265195179, 0.03674092252975658, 0.14048441994335348, 0.08612338392730035, 0.0694697354215279, 0.15279434505696043, 0.08766118916694199, 0.06588386199029406, 0.18699209095337266, 0.11840683913244954, 0.16671859307340042, 0.23512466532339982, 0.1380271928431246, 0.23710382083302461, 0.09456296052521251, 0.15248212325682708, 0.10331518499028736, 0.11787644299479705, 0.09601995143590214, 0.0, 0.13550970581604782, 0.23723687580313357, 0.08662654072110143, 0.12613186744250848, 0.15231540217186068, 0.15059852616268765, 0.14678974748873186, 0.1286530094603595, 0.13078900478527156, 0.23051540550627103, 0.1340062099014847, 0.15481463321830669, 0.26897880089620163, 0.12766440184632688, 0.174685293995682, 0.0, 0.0, 0.0, 0.0, 0.07991878213673465, 0.0, 0.0, 0.0, 0.0, 0.10156114817538964, 0.09265252379166378, 0.10196784000458992, 0.06420447395031859, 0.00576221195891613, 0.015659680126482778, 0.1001356299261883, 0.0861770569398348, 0.06355269386959439, 0.0, 0.17468837021238537, 0.17826099789593008, 0.0, 0.13328839809016502, 0.10218667433461792, 0.0, 0.0, 0.0, 0.01433829188678104, 0.05448032678874337, 0.10635278430404593, 0.0, 0.030054829105080172, 0.002374138462991171, 0.0, 0.0, 0.06200996867908792, 0.41347663673359825, 0.4905062742762183, 0.35041310929486136, 0.30078398385896066, 0.15628733258107042, 0.21067372781233984, 0.4666188213767697, 0.43254190478508603, 0.37201658998582565, 0.052583001696918874, 0.03544714318986231, 0.04287341385726817, 0.10216200119744279, 0.07556557362169025, 0.12778385274343818, 0.07628736416667703, 0.11160899081395437, 0.07871881517512336, 0.10669413824442597, 0.13909682308143767, 0.14964487225476064, 0.11577550371262368, 0.12132722106622873, 0.1557624311561958, 0.15351994403128233, 0.10351331746375525, 0.2868432880851417, 0.1794333579556744, 0.2858716439627922, 0.20139128014643315, 0.22454737078461395, 0.17578259044788014, 0.2831274856097178, 0.20635482919329096, 0.20833610651697787, 0.17293148151033855, 0.18701353275657684, 0.28968977770701354, 0.11390825381158032, 0.25533482321349066, 0.17736731260993455, 0.17007451715667954, 0.16508340412867417, 0.1755247754025917, 0.18500092524752842, 0.21450651803689158, 0.19992961735750636, 0.2188828890075497, 0.2393764361830708, 0.18690294997729517, 0.20664671511855015, 0.191179370299987, 0.19925471819027585, 0.19515659324465207, 0.16436151549580647, 0.16907650650985828, 0.1697290889034868, 0.18629134834303274, 0.16870245552821472, 0.19431092406905626, 0.18025838043426157, 0.18595694618394354, 0.16177373771541914, 0.16732230024747574, 0.17865063372665557, 0.15344540583668054, 0.6131819064025676, 0.20106990744733055, 0.1888391461573612, 0.11825252860822366, 0.16941488243947567, 0.14414425015256926, 0.35865732981211174, 0.15550186619553275, 0.2272132168479094, 0.1693807292945283, 0.1677378179321075, 0.27506433961746724, 0.11351994700868417, 0.1607832025047381, 0.20412243853048118, 0.1757527650003371, 0.1830003009615505, 0.18493066704940753, 0.19537407848834798, 0.17617587380004007, 0.20951773797088136, 0.1625074087600753, 0.2362122063110499, 0.16169988353318154, 0.08151617459413407, 0.06115509651909301, 0.07067374794342163, 0.08191347400976934, 0.07453023122816194, 0.09303664674618617, 0.04988846913426115, 0.07158584357694131, 0.08219912442187394]}, "mutation_prompt": null}
{"id": "4cd7dd8d-76ff-41fa-83e3-c260a02ad11d", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "6fce4f68-6637-4d59-a6f6-b4fa7ad95fc2", "solution": "class QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.inertia_min = 0.4\n        self.inertia_max = 1.2  # Modified inertia weight bounds\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_min + (_ / self.max_iter) * (self.inertia_max - self.inertia_min)  # Adaptive inertia weight\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Introducing adaptive inertia weight to enhance exploration-exploitation balance and convergence speed.", "configspace": "", "generation": 21, "fitness": 0.12132302083993214, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.24773120356992173, 0.2117564598200048, 0.4659407058042294, 0.12866558691837693, 0.13160842785682347, 0.19199098452207397, 0.29012040474865797, 0.21017630183754, 0.156566425258986, 0.0, 0.0, 0.0, 0.0, 0.003440279613718844, 0.0, 0.043528645466781146, 0.0, 0.0, 0.08494420640050537, 0.11374904271608954, 0.06866022491685797, 0.09063358443118852, 0.11479301391286534, 0.0896863029117223, 0.07507099143078289, 0.10653509363212066, 0.10355908914967327, 0.06806045465359423, 0.04733606419845815, 0.07992345708186055, 0.05673270499090721, 0.05228604655656377, 0.05363391424711239, 0.06207496947514701, 0.033286964917156325, 0.03773437090666154, 0.0649769565828987, 0.06293876134929033, 0.062433115484907264, 0.06910439985660488, 0.06172476642384028, 0.06605801083464269, 0.0869624498911995, 0.06551408580077656, 0.06618291479289151, 0.06252876605171132, 0.052421050047644524, 0.04651088226380595, 0.12785629922504194, 0.07710236956648753, 0.061301597161816934, 0.1430323145823773, 0.08409408712851496, 0.06375973591468842, 0.1565161547052938, 0.1351904897042332, 0.15869501538366126, 0.22890446914011175, 0.15485352357474225, 0.11106324857933325, 0.11720986537347378, 0.15263507057180925, 0.08702043613189347, 0.014983117606921614, 0.07907269652392734, 0.0, 0.009810236585857668, 0.1888390741051159, 0.00331774430437326, 0.14575114916021792, 0.09249391894196868, 0.1197615167227224, 0.13643527610241857, 0.08557132790256605, 0.1304735463229808, 0.04031488831913754, 0.07993006865161534, 0.12294946158882358, 0.2575661364990266, 0.0, 0.1852141252266163, 0.0, 0.0, 0.0, 0.0, 0.0013466743288957916, 0.0, 0.0, 0.0, 0.0, 0.060840213900425044, 0.056435658069247774, 0.07531414843488837, 0.05950094598284317, 0.009357916413046619, 0.02529372492133075, 0.0830986355210569, 0.06050803657135262, 0.037405779248134596, 0.0, 0.21238056770292435, 0.0, 0.0, 0.0, 0.0, 0.18355776650167432, 0.0, 0.0, 0.0, 0.0, 0.007221283599147088, 0.0, 0.00124201571410687, 0.02486427844963146, 0.0, 0.0, 0.0014382044783495251, 0.3907646418644285, 0.41708497679455536, 0.30186961333566775, 0.22062780308222762, 0.16654063333795388, 0.172190319370096, 0.38816129032477953, 0.40386843175671894, 0.3393724188575331, 0.04876746319023273, 0.033345743578778064, 0.023274390814298607, 0.08101993508615501, 0.05598903393703947, 0.12517062666190992, 0.0765290549064459, 0.10543754294445751, 0.06616807630528143, 0.16650593104516942, 0.09707204707773653, 0.1560327719057517, 0.1248592127144984, 0.12151195336468668, 0.14783363503546043, 0.22147030709654714, 0.21671790446215022, 0.19015133059775458, 0.17760343296681802, 0.2248465532415751, 0.17490080420404885, 0.2517804997679306, 0.2014752716763083, 0.2052126266549108, 0.17423025651685953, 0.26693257134716564, 0.15626617014212918, 0.10059366051468843, 0.18902227277839123, 0.14377807772468243, 0.18374112521064967, 0.16252323347452968, 0.23583076752345822, 0.18851606012107336, 0.17607663941755325, 0.12093956397855232, 0.20729582369834476, 0.23923933553079646, 0.2541667759825996, 0.22557329504849533, 0.2636889179991, 0.19271844887638578, 0.2185852515506852, 0.24226289959611835, 0.18620463940392773, 0.1601449026601518, 0.19058439151179185, 0.17678373775747458, 0.18067238930517238, 0.16491334301867755, 0.1642555513052979, 0.1654241576801847, 0.22505910445913346, 0.15798052987525302, 0.16874215409572446, 0.18563799015106752, 0.149477352931498, 0.4454659584970585, 0.1847765494926079, 0.17568282380256495, 0.09554753434681185, 0.15719487950794864, 0.13175730203064562, 0.2322408558079212, 0.1545053596312711, 0.21824455449458113, 0.16709447457952642, 0.16313366902475135, 0.31021386457607425, 0.1085561045270601, 0.14865061030599447, 0.22534131012655756, 0.19277356827555447, 0.17019069419070587, 0.17154258746662165, 0.1815888546882336, 0.17231890494934554, 0.19599804856042546, 0.18920503139570888, 0.18613989202447423, 0.1974616933902439, 0.06493597424455388, 0.0816068005706111, 0.08570768481839608, 0.08226672734593499, 0.07519866693570054, 0.10937268786298959, 0.05623692738748065, 0.05969364260681975, 0.06400370234122821]}, "mutation_prompt": null}
{"id": "63f0f2cd-2b31-4b96-9446-cfeefa3b1e5c", "solution": "import numpy as np\n\nclass AdaptiveQIPSO(QIPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.init_inertia = 0.9\n        self.final_inertia = 0.4\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            inertia_weight = self.init_inertia - ((_ + 1) / self.max_iter) * (self.init_inertia - self.final_inertia)\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "AdaptiveQIPSO", "description": "Introducing an adaptive inertia weight to dynamically adjust the exploration and exploitation balance, enhancing convergence speed.", "configspace": "", "generation": 22, "fitness": 0.26519716913254276, "feedback": "The algorithm AdaptiveQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.8632045629942933, 0.8611081972045797, 0.8553487397652896, 0.8650630823498298, 0.8547689860081079, 0.8648223447275858, 0.8715810586970506, 0.8508775264451696, 0.8596136790058876, 0.3410743746001954, 0.056229412198161466, 0.15656652291862883, 0.08784980544786447, 0.05266160205807824, 0.031510959316843, 0.0435777831654095, 0.0016510178782500606, 0.06321430782629645, 0.09997478986660713, 0.11658552208395956, 0.11486054982287064, 0.0947679224458512, 0.13863384723578875, 0.1162982266830086, 0.12178413825702572, 0.09081974259988035, 0.11351074395707605, 0.10907221766627462, 0.10791910821357376, 0.08657822941477966, 0.09514279407481518, 0.07899214516788544, 0.10221486256010304, 0.09270795354862693, 0.08582014231764246, 0.09195667204432789, 0.974722113326116, 0.9813712212509654, 0.9783691386722088, 0.9619737830651385, 0.9675176141017326, 0.9606331742232214, 0.9753779951559188, 0.9664775994394106, 0.9662247420963656, 0.5408704313175676, 0.22174941649425095, 0.4888211019555181, 0.4769138216466471, 0.25342781375210055, 0.31272032456004495, 0.5049452833961263, 0.24095128507715113, 0.3369340569500465, 0.22422711433353082, 0.16962345920927824, 0.2260434624545844, 0.21915968927367302, 0.1913654051177791, 0.20436901942257302, 0.17531457834906905, 0.12989810023739956, 0.1936849405380775, 0.1563059144685609, 0.16047153181123774, 0.13261323564647753, 0.20778828024982043, 0.22184052597185078, 0.15220462361011267, 0.2857532933218546, 0.1538622317414181, 0.13075779171141333, 0.163583041139285, 0.18330003040909137, 0.1253726450363538, 0.13049631633794356, 0.12868886613663066, 0.1605000967849719, 0.2045553897660939, 0.2531694450913413, 0.17611991012744688, 0.0, 0.0, 0.08712923107401094, 0.07469861951711865, 0.04565616836751074, 0.0, 0.0, 0.0, 0.03213741820504934, 0.06239494808664736, 0.056709418818797874, 0.09830248001688846, 0.07464174263700296, 0.003127229649056984, 0.008746531930527324, 0.06958114447118346, 0.05754830462632288, 0.04975105085863374, 0.05356615052203584, 0.10471143702520735, 0.20461399702038618, 0.16517296643794432, 0.13677925258119306, 0.12651128260355304, 0.09482675808284224, 0.17199629891288626, 0.09179512572732784, 0.08445869398247707, 0.25686863956756, 0.2579130406410318, 0.006161492798309687, 0.02737358176771376, 0.1078588681337096, 0.1240395518700439, 0.04893560740430891, 0.08047072046594861, 0.45310639638805716, 0.4659771833981361, 0.44381353387496514, 0.5434128885317526, 0.49498430638529356, 0.5457046964026393, 0.5461723163787615, 0.5074375168452675, 0.5490305710181911, 0.10015170257499939, 0.13044046148936927, 0.13118852117607893, 0.1275713833386466, 0.13462691480423072, 0.08946509694997362, 0.13149778561273595, 0.7408584184645686, 0.09019418087885445, 0.2809164076312344, 0.43764305089966515, 0.29582695121699254, 0.24772363850909607, 0.246925290511402, 0.33696462345488487, 0.3217391792756361, 0.26877567021748583, 0.2157099061977794, 0.28766717102877515, 0.3825716190821917, 0.5766785465777529, 0.4518488525404093, 0.39198560839131735, 0.33192748758366475, 0.2552216608689075, 0.289815097528222, 0.26866784038572, 0.2559652381207842, 0.2175440764592279, 0.2014600627657358, 0.2864938352164469, 0.1877752859183076, 0.2610958160555259, 0.24019104213721176, 0.4032234873827254, 0.25413575715622916, 0.21854850173350326, 0.204338888091678, 0.20678995662111777, 0.26280967333895733, 0.21679523818244706, 0.18599871016914982, 0.23982934834513647, 0.18354591523186892, 0.23334824905949014, 0.19714097328944336, 0.1972398776062646, 0.18901513518113056, 0.1802166027094445, 0.17851513157382648, 0.18914566668619714, 0.19114861683430873, 0.1896056930582537, 0.1752098426409313, 0.8597660570474296, 0.126177130252496, 0.15429734931919825, 0.8969226368450479, 0.20097443282720517, 0.19944149809749256, 0.09965305864640883, 0.1698229762071256, 0.8888457695847174, 0.49382774969111065, 0.15665969926379786, 0.48204927195016467, 0.21157109147550568, 0.16887941800313588, 0.5729026637182624, 0.10354354340016214, 0.16679378283653112, 0.38384138356459074, 0.1812313975527784, 0.2518143768915241, 0.19417930321628196, 0.19875035506252936, 0.166542832972701, 0.21565264582844246, 0.1895954723554727, 0.17858264509455746, 0.2012349231984245, 0.09658052576639042, 0.09932706585221462, 0.07954001597158733, 0.08085917724899594, 0.08725622962488888, 0.09300957396771814, 0.10150481004582668, 0.1013793273761252, 0.09429806474414437]}, "mutation_prompt": null}
{"id": "7b49612a-2ba0-4464-bb09-a389f56ae1d5", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "48aca815-c4f3-41ee-96f8-6d0066710351", "solution": "class QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                inertia_weight = 0.5 + 0.5 * (1 - fitness / (self.global_best_value + 1e-8))  # Adaptive inertia weight\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Introducing an adaptive inertia weight factor based on fitness evaluation to improve convergence speed.", "configspace": "", "generation": 24, "fitness": 0.12027067156124945, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.14.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.2802283423817151, 0.2062179954319775, 0.3896469212109056, 0.1549647466200491, 0.16807647488088728, 0.2674585670696823, 0.790150809755172, 0.41197940369121777, 0.38179450222831024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08796387748515622, 0.107113013813539, 0.10555786279339352, 0.09773556394389016, 0.09820777717335494, 0.10255129718302103, 0.08046446186626321, 0.12295586517988433, 0.08033924343320775, 0.07914752224930921, 0.0686374180252497, 0.06844970805839146, 0.07199412425237084, 0.05033481591103117, 0.015865532817758377, 0.07050987762261662, 0.023249502293337, 0.020810635833936053, 0.978027829080624, 0.05182688494517129, 0.9579257856768449, 0.07330475382262869, 0.07029622274802827, 0.07134098766311758, 0.08951180910067191, 0.07124197386867037, 0.05866907644428088, 0.0, 0.0, 0.011469538456525097, 0.009574402942416183, 0.008897414409756443, 0.0315192210413312, 0.055484355818416375, 0.022795661593339345, 0.0, 0.2271642181791126, 0.1184013406759481, 0.13610668309605012, 0.11598154385368253, 0.14974502587046967, 0.09422573222000696, 0.09456204264029877, 0.10271857998329326, 0.09521600067827529, 0.0, 0.011300465853427477, 0.0, 0.0, 0.01608386001801898, 0.0, 0.0, 0.0, 0.04382288934199219, 0.037082639141731266, 0.0, 0.0, 0.0, 0.017426306874713138, 0.00917686077205504, 0.0, 0.0, 0.07226122605757412, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04653510442568354, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09374573251780405, 0.02603160232543944, 0.44022914414879855, 0.4236581511938824, 0.34607190576253977, 0.28089314905899, 0.2194624454970605, 0.19171971231871288, 0.39675970084207834, 0.47687692119068925, 0.388672621587419, 0.05274344218563587, 0.03855905152748351, 0.03422646702119059, 0.061149989322122233, 0.04703924464601694, 0.08182066976093594, 0.033206081784667885, 0.03554708934312878, 0.027475689570252926, 0.4083021903580958, 0.12284603415410478, 0.14814657606792958, 0.16336614683127537, 0.13939105835181076, 0.1575566307265288, 0.1507925445003191, 0.1236709602362529, 0.17847961406994983, 0.2114517730075539, 0.1744315760673777, 0.27868823440984813, 0.24227796403129198, 0.25376814569697204, 0.3168808788792926, 0.1750993703368846, 0.20183056312648917, 0.16306915752306905, 0.10445855007626392, 0.10554489362354658, 0.13463624847973554, 0.1570706874015495, 0.19946669780413995, 0.17994282440155873, 0.18171593565919875, 0.2538849416290705, 0.1396995829720583, 0.17033850761463087, 0.18619974072617496, 0.17684485313960863, 0.20432290781083673, 0.18869818913230252, 0.19206791333233408, 0.21759033089419078, 0.2342241634590806, 0.2134612613332424, 0.0812279935494371, 0.0, 0.17683647954252624, 0.17112520390170516, 0.14226614956069805, 0.15120034916213443, 0.1497807747037565, 0.15688550466249507, 0.14743583938176086, 0.1480559176460431, 0.1882196439797339, 0.14187426570851625, 0.21716456375230997, 0.13590269439034253, 0.14039499980328018, 0.1067434955629658, 0.16900332472542612, 0.287897173395399, 0.4283595631468914, 0.1570368103549814, 0.22652980797895605, 0.17258988721853352, 0.16772380990863878, 0.3158616075643298, 0.19883348758386432, 0.1674613404028642, 0.20619264272945825, 0.19483519615171208, 0.18153076334424056, 0.19606927445221023, 0.16617758004757144, 0.19092575011585589, 0.15772142801513456, 0.19556013941407135, 0.20070722644126515, 0.18430492252094932, 0.07900199352630355, 0.06509807063093653, 0.07381087605286918, 0.07905011928063399, 0.0710255127190994, 0.07111463841206678, 0.06328429235059263, 0.07589690244223057, 0.08153828102588301]}, "mutation_prompt": null}
{"id": "c0b51aba-e082-4806-ae21-cd6422e89aea", "solution": "class ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.initial_alpha = self.alpha\n        self.initial_beta = self.beta\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                adaptive_alpha = self.initial_alpha - ((_ + 1) / self.max_iter) * self.initial_alpha  # Adaptive alpha\n                adaptive_beta = self.initial_beta + ((_ + 1) / self.max_iter) * (1 - self.initial_beta)  # Adaptive beta\n                self.velocities[i] = adaptive_alpha * self.velocities[i] + adaptive_beta * (self.personal_best_positions[i] - self.particles[i]) + adaptive_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "ImprovedQIPSO", "description": "Improved QIPSO algorithm with adaptive inertia weight to enhance convergence speed.", "configspace": "", "generation": 25, "fitness": 0.2712077396704147, "feedback": "The algorithm ImprovedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.8831548566555549, 0.8767541378524212, 0.8863082412228962, 0.8906418990290972, 0.8774825130694127, 0.8926946962326493, 0.8799995812240264, 0.871369575110237, 0.8785978318126973, 0.10580921870593651, 0.054612487412313726, 0.11358313749577975, 0.15058480617452152, 0.053869023744536726, 0.05313103441399303, 0.06510622035480029, 0.6391853653697734, 0.032404884835456116, 0.11054081462083598, 0.15972864902388628, 0.09640536136097977, 0.105530418006344, 0.12265234035010741, 0.0978991077608865, 0.0723163148159538, 0.14360645752658763, 0.08919366413495022, 0.11455559120108916, 0.11008039704399819, 0.07711693815200937, 0.09530600394745958, 0.04797195342329419, 0.08445126855826401, 0.15310727107237165, 0.06355792333353472, 0.08662138503195638, 0.9736271655794213, 0.9814893331863037, 0.9783697997658652, 0.9620788420543658, 0.9674952751887946, 0.959138787529783, 0.97536326849673, 0.9666397068660932, 0.9662232376519786, 0.4616284634875003, 0.1689516466160097, 0.558260014376116, 0.5942229797919294, 0.72329106814365, 0.27291151242582434, 0.5012666763326983, 0.3627156520337075, 0.37267305225332437, 0.891585333845285, 0.1551793699498465, 0.38033936759406684, 0.20734858433989478, 0.19209132156870767, 0.20272225505168617, 0.1293029951840039, 0.17776303028200313, 0.21927822977333222, 0.1550007932828934, 0.1600706401112657, 0.16646330095694428, 0.1607837371459676, 0.22285005672292224, 0.1469969879685601, 0.2900354769495027, 0.15554296684387314, 0.15197199041939058, 0.15167684292054961, 0.1584006138222941, 0.12863849320419762, 0.13004396026215503, 0.1282530586812658, 0.12799671271901303, 0.1930071735681228, 0.0, 0.17361097457660857, 0.0, 0.0, 0.11477273758926765, 0.05834946629173132, 0.03979809970882542, 0.0, 0.003617468034013971, 0.0, 0.11359665551111575, 0.07220336612792577, 0.058973283087552564, 0.10025801476667096, 0.06719773773668603, 0.01932825126367388, 0.013134102110525459, 0.16838298015212427, 0.05625681773170943, 0.05926679017315528, 0.0486275461831952, 0.12246095098328147, 0.14120349419094658, 0.14919049147679908, 0.08800513662222853, 0.14998534070674363, 0.09678512173585152, 0.1738420189764629, 0.07126447023346194, 0.099816700199994, 0.13831479128688173, 0.26613405656714284, 0.0061742002198241774, 0.049296666620929686, 0.12473409252592516, 0.15023976568972486, 0.048291426180845365, 0.0815836002679291, 0.4846212569746664, 0.49918792538471746, 0.48879116975491166, 0.49937597796332234, 0.5078296623166856, 0.5405061432530125, 0.5492185826412932, 0.49097471007831794, 0.5166409593410122, 0.1323098390523153, 0.08407137580088186, 0.11629465096949754, 0.157607771716187, 0.1166472053922355, 0.09334124752325712, 0.16020879095023244, 0.15264545910665928, 0.08823067623785086, 0.2828792808708277, 0.190664766790967, 0.24028961687264105, 0.24913280290509388, 0.26808907938145454, 0.19431567184722331, 0.27055895231087723, 0.15114311801505464, 0.21763717715839725, 0.4082755696763657, 0.3259154925193538, 0.5373229671184414, 0.3395000428926723, 0.5395860880356202, 0.3053620493246374, 0.3247738581207935, 0.38985887510783346, 0.38576278219434346, 0.13878224724019672, 0.2531642488574358, 0.14344773857347193, 0.31449109034097855, 0.2079836457377271, 0.21658939799173127, 0.2354841634215662, 0.2436129266598135, 0.2437181758886976, 0.22094340422209058, 0.2339138969974328, 0.20408787122086525, 0.2449925019134671, 0.21249892075287735, 0.1983965581207089, 0.21321725755416043, 0.20303467368579342, 0.24210809098149477, 0.2513457042780809, 0.8313104986329025, 0.18476547811657018, 0.20145544658566927, 0.1907835580528222, 0.1763850913697923, 0.182928067209693, 0.21005940419391156, 0.18075932771741932, 0.7421585123831332, 0.12636469006706774, 0.1542576048760722, 0.9207903271985325, 0.20103998706451476, 0.19949819903631483, 0.09965023381684535, 0.1697738732865951, 0.8837415096764185, 0.43138593524075775, 0.1565072994435961, 0.5243531510396695, 0.21205537126832963, 0.16892330864620764, 0.5605128179497894, 0.10393451457977221, 0.1669840310364521, 0.28729399722982196, 0.21874518367796503, 0.23069091418242083, 0.18689075866903626, 0.238190024349622, 0.21924518372814428, 0.19770891137584712, 0.20275151502674948, 0.18209557312225344, 0.21025018518446037, 0.10603129226016117, 0.0915105329191036, 0.0766751168350518, 0.08855179472435792, 0.08909394169694385, 0.0860574934165228, 0.08100234054343802, 0.09977578918029772, 0.09623111160208642]}, "mutation_prompt": null}
{"id": "cb4087ff-723f-4a45-86bf-4369dff87491", "solution": "import numpy as np\n\nclass FastQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.inertia_init = 0.9\n        self.inertia_final = 0.1\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for t in range(self.max_iter):\n            inertia_weight = self.inertia_init - (self.inertia_init - self.inertia_final) * t / self.max_iter\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.alpha * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FastQIPSO", "description": "Introducing dynamically adjusted inertia weight for faster convergence.", "configspace": "", "generation": 26, "fitness": 0.26474730126341045, "feedback": "The algorithm FastQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.8725549784434171, 0.8673078091154135, 0.8761717973732577, 0.8854819830915603, 0.877550501050931, 0.8694123378685558, 0.8665899853444963, 0.8810036839424684, 0.8657128074263732, 0.19183378543687724, 0.04855963479291059, 0.1740019603054076, 0.20269716374415125, 0.061446021002743545, 0.1865065184406962, 0.0, 0.05589546722386096, 0.14820691744787795, 0.15467910649174188, 0.14020858997012653, 0.12321046397429003, 0.12542271270870975, 0.1068181935712168, 0.11633191378026564, 0.12367842224887882, 0.08947690904086558, 0.12320213548819625, 0.10284605166418259, 0.09620504581997269, 0.0750574979006553, 0.13790104783722323, 0.12605594628217787, 0.09041159929676446, 0.09496226630623061, 0.10896130369689583, 0.0900867461494177, 0.974715472465733, 0.9813684910630824, 0.9783656202042376, 0.9620695212046576, 0.9675565831679027, 0.9596134953200108, 0.9753671194334902, 0.9680506738183176, 0.9645213178789948, 0.2302680328359641, 0.1324604900722708, 0.4154489799890049, 0.5133691074140334, 0.44142953667652995, 0.14968705736434262, 0.5354910082783975, 0.5454004789407606, 0.45426825871443166, 0.2228250362571239, 0.20365154633803328, 0.20884238531033084, 0.2191056107998376, 0.2120382155285564, 0.21245751886292608, 0.17107991621104068, 0.152019114309081, 0.17713496131506035, 0.17279783264958948, 0.15616612624373738, 0.16101577212477947, 0.1539626467559938, 0.24427211593506748, 0.13254550432526335, 0.4746165824157206, 0.15995174742845686, 0.13008668059472606, 0.15920967814204245, 0.13144230953145375, 0.1291412550706067, 0.13510838152640225, 0.1589445888221186, 0.15882371074577784, 0.19810692368745864, 0.20483366156977323, 0.17295129223584194, 0.0, 0.0, 0.09486100336785619, 0.07734664214949893, 0.023270714169108087, 0.0, 0.0, 0.0, 0.003476086343883078, 0.0803046400946672, 0.12308497133566965, 0.1070147815145166, 0.06632839488305253, 0.022354965496321322, 0.03593522529188797, 0.16904333626109913, 0.09169958646700671, 0.05779189855401201, 0.0469979906279383, 0.14710843669818985, 0.1920762109992653, 0.12805921425903688, 0.13082624551274347, 0.12270298147112368, 0.11457977910945849, 0.10543274826704141, 0.07059811670294236, 0.27065553035554235, 0.26545473819118526, 0.1415624606396546, 0.05225033854220762, 0.08188953266909971, 0.13625401393527647, 0.10208309921474645, 0.05995212438963282, 0.0829014334324687, 0.4997609662047968, 0.4822478781587778, 0.48928603942948135, 0.4800178721746683, 0.49176144218489226, 0.46120568210011503, 0.47799802464975205, 0.5531787021743433, 0.4787623742780873, 0.08953882866381513, 0.12664290584480764, 0.12201927211601216, 0.12002460208820553, 0.1350564652708761, 0.08163578062412358, 0.14764970885770834, 0.10735583457622144, 0.09582069018745043, 0.16240749246686814, 0.28095308486897863, 0.2538312997578561, 0.2040074370367878, 0.24064101448543995, 0.15955513813444955, 0.20339028764063183, 0.1412520347494306, 0.15374292594912053, 0.3914025860433916, 0.39826549017004464, 0.3883311427430326, 0.3623023683842944, 0.3450234192639168, 0.3488182564369887, 0.2508638131178522, 0.39099524248358264, 0.44142451325707777, 0.25402861879593297, 0.32118204256909644, 0.20623949604903968, 0.32885524135232025, 0.20650250663157954, 0.21357715071903483, 0.2125294389798168, 0.25526794388536356, 0.28568349542262805, 0.20532982288150547, 0.23507228052608975, 0.20036047644374666, 0.18866187473884555, 0.21787993024813435, 0.1962196678611835, 0.23919541339101902, 0.22768766707848254, 0.22075499712682434, 0.20937461785936606, 0.19947848809428181, 0.19001766288525146, 0.17498247073428264, 0.20030206777390658, 0.18037269663212752, 0.1851685763627473, 0.39214187820481416, 0.1790172448476418, 0.899251980098743, 0.12658652866489373, 0.1539226798328207, 0.894292010775899, 0.20111597680369842, 0.19901116392046203, 0.38611579328144463, 0.16980060880751646, 0.7986599439951392, 0.4286787648132475, 0.15670812696525227, 0.5154003898440886, 0.21228686894066284, 0.16887095259120766, 0.6107570734384065, 0.22405609664818427, 0.16755558706803275, 0.26056360797802647, 0.20839176631937906, 0.24980241081616228, 0.18906887223084123, 0.19849275395364863, 0.1896688582135192, 0.17194821805999094, 0.2065367102549528, 0.21986927288010405, 0.20135656707832006, 0.09870044681117596, 0.0876437414933573, 0.06667767593461194, 0.08713733100973753, 0.08576170836848995, 0.09508203611588939, 0.08324772092941679, 0.08003451721918953, 0.08637902126729846]}, "mutation_prompt": null}
{"id": "ecc10f12-d536-4e53-8319-9806e9c82869", "solution": "class EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n        \n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_max - ((_ + 1) / self.max_iter) * (self.inertia_max - self.inertia_min)\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introducing dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 27, "fitness": 0.26519716913254276, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.8632045629942933, 0.8611081972045797, 0.8553487397652896, 0.8650630823498298, 0.8547689860081079, 0.8648223447275858, 0.8715810586970506, 0.8508775264451696, 0.8596136790058876, 0.3410743746001954, 0.056229412198161466, 0.15656652291862883, 0.08784980544786447, 0.05266160205807824, 0.031510959316843, 0.0435777831654095, 0.0016510178782500606, 0.06321430782629645, 0.09997478986660713, 0.11658552208395956, 0.11486054982287064, 0.0947679224458512, 0.13863384723578875, 0.1162982266830086, 0.12178413825702572, 0.09081974259988035, 0.11351074395707605, 0.10907221766627462, 0.10791910821357376, 0.08657822941477966, 0.09514279407481518, 0.07899214516788544, 0.10221486256010304, 0.09270795354862693, 0.08582014231764246, 0.09195667204432789, 0.974722113326116, 0.9813712212509654, 0.9783691386722088, 0.9619737830651385, 0.9675176141017326, 0.9606331742232214, 0.9753779951559188, 0.9664775994394106, 0.9662247420963656, 0.5408704313175676, 0.22174941649425095, 0.4888211019555181, 0.4769138216466471, 0.25342781375210055, 0.31272032456004495, 0.5049452833961263, 0.24095128507715113, 0.3369340569500465, 0.22422711433353082, 0.16962345920927824, 0.2260434624545844, 0.21915968927367302, 0.1913654051177791, 0.20436901942257302, 0.17531457834906905, 0.12989810023739956, 0.1936849405380775, 0.1563059144685609, 0.16047153181123774, 0.13261323564647753, 0.20778828024982043, 0.22184052597185078, 0.15220462361011267, 0.2857532933218546, 0.1538622317414181, 0.13075779171141333, 0.163583041139285, 0.18330003040909137, 0.1253726450363538, 0.13049631633794356, 0.12868886613663066, 0.1605000967849719, 0.2045553897660939, 0.2531694450913413, 0.17611991012744688, 0.0, 0.0, 0.08712923107401094, 0.07469861951711865, 0.04565616836751074, 0.0, 0.0, 0.0, 0.03213741820504934, 0.06239494808664736, 0.056709418818797874, 0.09830248001688846, 0.07464174263700296, 0.003127229649056984, 0.008746531930527324, 0.06958114447118346, 0.05754830462632288, 0.04975105085863374, 0.05356615052203584, 0.10471143702520735, 0.20461399702038618, 0.16517296643794432, 0.13677925258119306, 0.12651128260355304, 0.09482675808284224, 0.17199629891288626, 0.09179512572732784, 0.08445869398247707, 0.25686863956756, 0.2579130406410318, 0.006161492798309687, 0.02737358176771376, 0.1078588681337096, 0.1240395518700439, 0.04893560740430891, 0.08047072046594861, 0.45310639638805716, 0.4659771833981361, 0.44381353387496514, 0.5434128885317526, 0.49498430638529356, 0.5457046964026393, 0.5461723163787615, 0.5074375168452675, 0.5490305710181911, 0.10015170257499939, 0.13044046148936927, 0.13118852117607893, 0.1275713833386466, 0.13462691480423072, 0.08946509694997362, 0.13149778561273595, 0.7408584184645686, 0.09019418087885445, 0.2809164076312344, 0.43764305089966515, 0.29582695121699254, 0.24772363850909607, 0.246925290511402, 0.33696462345488487, 0.3217391792756361, 0.26877567021748583, 0.2157099061977794, 0.28766717102877515, 0.3825716190821917, 0.5766785465777529, 0.4518488525404093, 0.39198560839131735, 0.33192748758366475, 0.2552216608689075, 0.289815097528222, 0.26866784038572, 0.2559652381207842, 0.2175440764592279, 0.2014600627657358, 0.2864938352164469, 0.1877752859183076, 0.2610958160555259, 0.24019104213721176, 0.4032234873827254, 0.25413575715622916, 0.21854850173350326, 0.204338888091678, 0.20678995662111777, 0.26280967333895733, 0.21679523818244706, 0.18599871016914982, 0.23982934834513647, 0.18354591523186892, 0.23334824905949014, 0.19714097328944336, 0.1972398776062646, 0.18901513518113056, 0.1802166027094445, 0.17851513157382648, 0.18914566668619714, 0.19114861683430873, 0.1896056930582537, 0.1752098426409313, 0.8597660570474296, 0.126177130252496, 0.15429734931919825, 0.8969226368450479, 0.20097443282720517, 0.19944149809749256, 0.09965305864640883, 0.1698229762071256, 0.8888457695847174, 0.49382774969111065, 0.15665969926379786, 0.48204927195016467, 0.21157109147550568, 0.16887941800313588, 0.5729026637182624, 0.10354354340016214, 0.16679378283653112, 0.38384138356459074, 0.1812313975527784, 0.2518143768915241, 0.19417930321628196, 0.19875035506252936, 0.166542832972701, 0.21565264582844246, 0.1895954723554727, 0.17858264509455746, 0.2012349231984245, 0.09658052576639042, 0.09932706585221462, 0.07954001597158733, 0.08085917724899594, 0.08725622962488888, 0.09300957396771814, 0.10150481004582668, 0.1013793273761252, 0.09429806474414437]}, "mutation_prompt": null}
{"id": "cd8cd1a5-0ec6-4e64-b126-4a6deb359728", "solution": "class QIPSO_DynamicInertia(QIPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_min + ((_ + 1) / self.max_iter) * (self.inertia_max - self.inertia_min)\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO_DynamicInertia", "description": "Introducing dynamic inertia weight adaptation to improve exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 28, "fitness": 0.11836404644679564, "feedback": "The algorithm QIPSO_DynamicInertia got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.2415243034307144, 0.20446272678275446, 0.43409816760952724, 0.12407862569060057, 0.12482529421820054, 0.18562679502310664, 0.26624407197902855, 0.18470147602288156, 0.14359330836103779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08261774922011322, 0.11342753982003173, 0.06631493787551312, 0.0944812743961938, 0.10607255309706654, 0.0931778418510949, 0.08224733145565566, 0.10761447958886017, 0.10111241032678131, 0.07987009889277108, 0.048669923892393885, 0.0779682509374432, 0.054842757573642986, 0.04974988283252746, 0.04554121361507002, 0.06296660284099775, 0.03565839101296042, 0.04806675059829324, 0.06285421694854254, 0.0601033421607583, 0.05814722549024076, 0.0661143378505904, 0.060302592303794866, 0.05668330869417659, 0.08226931450440533, 0.0638793203278708, 0.056938402745564054, 0.0589973316270862, 0.04843388891044598, 0.039830283771042585, 0.10000139117544515, 0.07181050343176087, 0.05977230503187059, 0.13509470800362855, 0.08135235505164184, 0.06574277980968823, 0.15658561202544263, 0.14313194105457694, 0.15868856567985912, 0.2216496323277637, 0.15461778823851569, 0.11106324857933325, 0.1181307378387213, 0.15263507057180925, 0.09651314918655951, 0.013821015791624647, 0.06763506836033262, 0.0, 0.006534807950285937, 0.18905732927041408, 0.0, 0.14362113745132443, 0.076482632057575, 0.11141026928960052, 0.1333351812050131, 0.076073405662203, 0.13192210486913736, 0.028488809367841483, 0.07383238858719521, 0.12086089037095882, 0.2354336487689651, 0.0, 0.1842294217591962, 0.0, 0.0, 0.0, 0.0, 0.012359607927415195, 0.0, 0.0, 0.0, 0.0, 0.06876753390046064, 0.05619343208573824, 0.07494506863095651, 0.05979967307862988, 0.009333621857955277, 0.02347513970509607, 0.07756956350522581, 0.06098376177882525, 0.051282268584609714, 0.0, 0.21288297624377228, 0.0, 0.0, 0.0, 0.0, 0.18080819814777638, 0.0, 0.0, 0.0, 0.0, 0.00355211310595438, 0.0, 0.0, 0.018525325623582334, 0.0, 0.0, 0.00021924565795272688, 0.3829006513017935, 0.44468347281573284, 0.29803382415063284, 0.2125503743981474, 0.16500786659504807, 0.15522738819426196, 0.3873233224077438, 0.41224675135439326, 0.33937164872868975, 0.0486156155070403, 0.03334376879103673, 0.027427442740543873, 0.07946054429834659, 0.05567663353162444, 0.12348741672298968, 0.07313105277500398, 0.10126952517244736, 0.06480431980268875, 0.17931966169252955, 0.08794900900797642, 0.21516151743954515, 0.12292242843871481, 0.11222723568725945, 0.1355977419022254, 0.21836505649994364, 0.17973303367758886, 0.18466912238712807, 0.17407947133855084, 0.23394742270000302, 0.17493124256390058, 0.21341074427219353, 0.2053198701674691, 0.2026239731334426, 0.17423108743297655, 0.2668533545280978, 0.1548291156499395, 0.09870436417364747, 0.17601603416340605, 0.14722741623663738, 0.18497401277722048, 0.14626212711065512, 0.2250329778269079, 0.18101387304546324, 0.17735011085275998, 0.12667963077075273, 0.2077994086513083, 0.18385028461710173, 0.16862110281782605, 0.2416366111409427, 0.20032159475589206, 0.18548391153891042, 0.20498813931527315, 0.2439202814591197, 0.20051693184918884, 0.16961438309465993, 0.1903650396985488, 0.1760901005737876, 0.18126208749457928, 0.16478914102953401, 0.16450975749307994, 0.16539854070213567, 0.22318770158297074, 0.17549208445073816, 0.16771271005611765, 0.1836725190564249, 0.14678598760864114, 0.4369902557195259, 0.18042564635194847, 0.1740071950645864, 0.09458528819429723, 0.15599032643503796, 0.12037288496074638, 0.2269134649694623, 0.15548884857445844, 0.21601375018159363, 0.16618371450196556, 0.161024238705756, 0.30336380180541866, 0.10797829768031264, 0.14677392131061373, 0.22361636421095832, 0.17213704634984173, 0.18246433546261553, 0.161459611946702, 0.17848169593336027, 0.17061639965491537, 0.2067648679898466, 0.19005520360031614, 0.18153004884865498, 0.19717726781183598, 0.08815701934671671, 0.09121378320470541, 0.08641626950908121, 0.07502230909267416, 0.08106633577315137, 0.09389008517923958, 0.05195435084323785, 0.06761800671375551, 0.06653606994663608]}, "mutation_prompt": null}
{"id": "3ad64c40-e0eb-4960-a09e-899148cd2d44", "solution": "import numpy as np\n\nclass FastQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.inertia_weight = 0.5  # Adaptive inertia weight\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.inertia_weight * self.velocities[i] + self.alpha * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.velocities[i] = np.clip(self.velocities[i], -0.2, 0.2)  # Velocity clamping for exploration\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n            \n            self.inertia_weight = max(0.4, self.inertia_weight - 0.001)  # Update adaptive inertia weight\n        \n        return self.global_best_value", "name": "FastQIPSO", "description": "Introducing adaptive inertia weight and velocity clamping to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 29, "fitness": 0.10259151862495573, "feedback": "The algorithm FastQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.28968966386584116, 0.23439214537834885, 0.2644775327639489, 0.09930294689694652, 0.0909969618911497, 0.12799709605537268, 0.12990954284091838, 0.13382210781334158, 0.11444531999348495, 0.1242472649135965, 0.08399961881663298, 0.0, 0.0, 0.08651227917434479, 0.0, 0.0, 0.0, 0.0, 0.0715105923685816, 0.06892489923202372, 0.07810814564708657, 0.08570916236847681, 0.12793358322082127, 0.06879121745948147, 0.054842283394057056, 0.06788321818728893, 0.09440992768522771, 0.08221819586143297, 0.05537525527206111, 0.07163304175365504, 0.08695533362314978, 0.08294906234906574, 0.03497696916987447, 0.0259369350329276, 0.037646610810016856, 0.06446947247136525, 0.052524207489261454, 0.044642875390869086, 0.04586095314199412, 0.05840539160708069, 0.05544405737119684, 0.04109000147891162, 0.06851879492997137, 0.05334743201088821, 0.04478200371133101, 0.08149321963987244, 0.031630330188896716, 0.07541948234580054, 0.09569713229706944, 0.0871165818424412, 0.08000786860359532, 0.0, 0.030220576170650548, 0.0, 0.1796728909318014, 0.12753335743553484, 0.16102547778886178, 0.10132863226811384, 0.11698052997442865, 0.05299311704891041, 0.12699791149991813, 0.13719230458920006, 0.14273381595016033, 0.09517219767705987, 0.10626801662762952, 0.0, 0.0, 0.025710695660618565, 0.0, 0.1820138289737544, 0.06740014611322809, 0.0, 0.1602860518129413, 0.014211837649330872, 0.08460570826943381, 0.006974517575191519, 0.06505207510226119, 0.02083646600862754, 0.12490408269748587, 0.0, 0.1362888883005784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09400265646831885, 0.10062686071707116, 0.1125879208863898, 0.04306657688177251, 0.00760541469667364, 0.04348355221991984, 0.11666320860914714, 0.07592799147060925, 0.040679182659883684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006417657475205063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29418465855269527, 0.2446595477421879, 0.17280460902922112, 0.18096549911504167, 0.1344221439342066, 0.1525244770450136, 0.2994965273403952, 0.34188942751485296, 0.3375160530871072, 0.06612021954074065, 0.012214587672619404, 0.0, 0.05110808362044206, 0.08662060294601237, 0.07318114790548658, 0.06553403902952026, 0.05751322716271934, 0.04146278354440014, 0.13192483906874586, 0.16308265762587548, 0.15220929240655545, 0.12599324599210016, 0.14577731091521096, 0.09467013267107871, 0.14266551552398343, 0.09914401158233199, 0.10928565876341145, 0.14985725777312542, 0.17061398265215388, 0.17298579888553445, 0.19871431023527253, 0.19688042903781333, 0.2291675079666886, 0.15751397905988673, 0.20511400646223288, 0.13960069274924225, 0.07772512571621193, 0.13791248570775683, 0.1042407523285851, 0.17552461307738298, 0.14827004111537823, 0.14541281293419706, 0.13818500258533695, 0.16728933662060497, 0.0861024900506342, 0.20976287731441412, 0.18534251852086558, 0.23672109939042485, 0.22662811390547088, 0.18696526142702163, 0.22889700420127979, 0.19400506714597, 0.20270229690271446, 0.1907366572138871, 0.17106101288987374, 0.16597706592607442, 0.15810804305189852, 0.18292954990149657, 0.1927068345476246, 0.1572841041748494, 0.17281764435630376, 0.19475192820011278, 0.1469428097491895, 0.10630036874108717, 0.07748376629453924, 0.08726208655127643, 0.2725630879673906, 0.16875038622999694, 0.3074584421706197, 0.10801287845261287, 0.10947894172677497, 0.11876671533793848, 0.22712961478678895, 0.13938531217767303, 0.1370908316051047, 0.31390040883403236, 0.12122778124383804, 0.22834782967505896, 0.093824701313168, 0.19755138065583489, 0.1545219534384743, 0.18122641392082905, 0.19019239260925247, 0.20042886209474542, 0.1588904374035094, 0.1700742912147849, 0.2219188810341528, 0.1962677883988948, 0.15881268553935424, 0.18267026893702965, 0.09007017308758147, 0.07680525817927841, 0.07901643177830397, 0.08382838774333323, 0.07659411436633656, 0.07263618898754653, 0.07815093052152222, 0.0803434073772823, 0.05262883464229584]}, "mutation_prompt": null}
{"id": "0c3f245b-ad9f-4318-a262-75af02772a82", "solution": "class QIPSOImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        inertia_weight = 0.5\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                new_inertia_weight = inertia_weight * (1 - 0.9 * fitness)  # Dynamic inertia weight adjustment\n                self.velocities[i] = new_inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSOImproved", "description": "Introducing a dynamic inertia weight adjustment based on solution improvement to improve convergence speed.", "configspace": "", "generation": 30, "fitness": 0.0812497062266573, "feedback": "The algorithm QIPSOImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.19.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.12245859347481636, 0.08194390739027635, 0.1301094651905259, 0.08943128444456905, 0.06204510195650603, 0.07700439226554878, 0.07786194868245844, 0.07438820132325741, 0.06854154161060866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012991366922011416, 0.01457225473404744, 0.005275638633662649, 0.010544468052300915, 0.0029006126744134386, 0.006570620486411438, 0.018150078853293228, 0.0, 0.010575797721526392, 0.016342160906689607, 0.0, 0.0, 0.023168020268037992, 0.00039528563310364806, 0.0, 0.0, 0.0, 0.0, 0.9906814275443643, 0.9892325615079096, 0.990513515532733, 0.9940584614128279, 0.9911399727439728, 0.9900663634196668, 0.09971544297604196, 0.9929550568518941, 0.9942428034058239, 0.0, 0.0, 0.0, 0.0, 0.01392916240971065, 0.0, 0.0, 0.011194453811976035, 0.0, 0.10018685869139876, 0.03765971698882764, 0.05213904648208645, 0.06661749824762087, 0.04358449780947726, 0.08446434145217885, 0.08038625472460204, 0.059216496363672766, 0.06285589850910422, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1087911925041366, 0.1411256650235838, 0.14829537673696325, 0.12613734996855797, 0.09699835892692388, 0.1088809040788361, 0.16104568613242554, 0.1112681272811813, 0.13037310929127288, 0.0, 0.0, 0.0, 0.006002370323504702, 0.0, 0.017501683791264266, 0.00948510565959082, 0.012958167953318278, 0.040234225577007954, 0.07621113283330638, 0.11394171153708232, 0.09315758414181619, 0.14548266936434107, 0.10844057434017595, 0.07649929842552561, 0.08799080449347874, 0.10895964583517503, 0.10413629073424668, 0.1186352172852948, 0.1561831265055067, 0.1434424562616725, 0.13792052181382497, 0.11371875507613927, 0.10996925971905314, 0.12247603320752865, 0.17369512487630423, 0.11354482774798758, 0.05423793082049977, 0.03391154036130939, 0.06967363134841675, 0.056862900510017966, 0.06672685804289125, 0.06333484497585817, 0.08364015581189743, 0.09968109929822744, 0.06403167692630829, 0.11934558904173465, 0.09379139630457334, 0.13336421106425755, 0.11151709141741761, 0.10070583731410043, 0.1005753353923805, 0.12237199858748082, 0.08435600454798153, 0.126108974692001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0762204736147194, 0.15090185422898883, 0.08157840845397091, 0.08326380410040946, 0.14705024826083335, 0.06760062110168308, 0.0755055633146069, 0.09634568763976836, 0.09218884668882565, 0.11031370369947813, 0.10042736099156047, 0.05458351990460886, 0.050590853463497676, 0.04657391243931086, 0.04541561500201219, 0.08332819784892964, 0.11061403076598364, 0.07446011531628971, 0.16580909757694384, 0.12840867766730857, 0.14754498426890972, 0.14800914108140528, 0.172404142519354, 0.15000507484625758, 0.14961211855424683, 0.13673899229531705, 0.1468047635094908, 0.010370662313802903, 0.015817976510993814, 0.031296624077891244, 0.0269179893162087, 0.03415436066355304, 0.0221678753153961, 0.016129998991510575, 0.018641435834147124, 0.024289806765423805]}, "mutation_prompt": null}
{"id": "44a4b7ca-f13c-4c4c-8c54-077b67d7cda5", "solution": "class QIPSO_Enhanced(QIPSO):\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n\n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.velocities[i] += self.beta * np.random.uniform(0, 1, self.dim) * (self.personal_best_positions[i] - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n\n        return self.global_best_value", "name": "QIPSO_Enhanced", "description": "Introducing velocity update based on particle best history to enhance exploitation and convergence speed.", "configspace": "", "generation": 31, "fitness": 0.27495078241976917, "feedback": "The algorithm QIPSO_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7955541236049732, 0.723144413978916, 0.742370767985936, 0.778200548078693, 0.7572742564487014, 0.7438537266820013, 0.7926417438813116, 0.7579519592621786, 0.7436793652388908, 0.22640137498269175, 0.277381260152449, 0.3087008030050401, 0.31580095508246486, 0.04248692539848287, 0.24443450805851386, 0.34789306416925236, 0.25817931668813177, 0.23900645402723752, 0.1835082102736023, 0.16476966537540216, 0.15282488668584882, 0.13585804754033182, 0.1494711231792839, 0.12628340433611407, 0.08662984962842024, 0.1550271875503939, 0.1430610199804303, 0.12134947216231418, 0.1320760901000838, 0.12006218685917391, 0.1330260577656176, 0.10490382890091587, 0.11346520874534094, 0.1122062563895293, 0.1138516924670615, 0.10443524070387245, 0.9823283712647971, 0.9836997210322419, 0.9796596582476054, 0.9690057941822948, 0.9712131938842203, 0.9643244707478951, 0.9700916934450601, 0.9757067744050985, 0.9752272664083663, 0.4794282420898086, 0.4833357903671863, 0.5208012852905428, 0.4406950601353242, 0.5041747070697877, 0.29107524131429807, 0.4414427720245937, 0.08819696170910596, 0.4530941452233085, 0.360814267830583, 0.22339401169631135, 0.16912571910803287, 0.21108801474141636, 0.27601707086954275, 0.19237550065611508, 0.1473453440387924, 0.1631575269699379, 0.24136998766970696, 0.128070576627355, 0.16887030171661788, 0.1620652661495109, 0.17511816841764516, 0.2572556739195785, 0.19733994944097855, 0.17612166703270704, 0.42029635237009244, 0.181408968672632, 0.27739178969796463, 0.13711287416963092, 0.18196879252943177, 0.1331953117147041, 0.16749353211916063, 0.17910779566946933, 0.30777799460975463, 0.10609057789107468, 0.15460213164755676, 0.0, 8.733444443964622e-05, 0.0, 0.0, 0.004701913109473543, 0.0, 0.0, 0.0, 0.06010450679511081, 0.06913139939633095, 0.08761722454841525, 0.11920644469256236, 0.07253983549859955, 0.012583762350797612, 0.013303643148361521, 0.1640350859784374, 0.07399573619479849, 0.053718384672388875, 0.03958392725547022, 0.1027170455702362, 0.13378732121875403, 0.2173099673506531, 0.06516220410217233, 0.1093517744653909, 0.17454403612758929, 0.06714087410270386, 0.05348228828920076, 0.23852462636916216, 0.0417455015206013, 0.12844517226639218, 0.03587429734399028, 0.0054547956885767634, 0.05571944331158396, 0.15327459163863988, 0.21580762407791332, 0.07994829791732705, 0.5260877416279719, 0.4760687549262852, 0.4434222311579885, 0.4892613904468791, 0.5487258432067097, 0.47598631518053214, 0.45782037251753593, 0.5005682652552759, 0.506872441543362, 0.10229153724611373, 0.07145787033477713, 0.0896629476300761, 0.10854089865779848, 0.12515545349971302, 0.11600995774797374, 0.10273462176172743, 0.13805906465666484, 0.09162119250036993, 0.1596833580168674, 0.25985769475248055, 0.17951275301930714, 0.2653035305796779, 0.2799124309578348, 0.32609586017128545, 0.23382314165825013, 0.3202757867934767, 0.1558455758340952, 0.38878695791021944, 0.2452354226985758, 0.43637892940474843, 0.32480039196839616, 0.248184375156128, 0.3474348296265555, 0.27382582203425854, 0.36659383456612327, 0.38568779878862247, 0.1706283774607542, 0.2174704890660406, 0.24812945723880953, 0.2939634956868703, 0.20607909748391806, 0.3400656206723395, 0.19661568465150925, 0.2627131567071417, 0.32998256049797425, 0.23072678408209446, 0.19882360102277585, 0.19710668121817, 0.22672541597080387, 0.20448774752837007, 0.2021728427812659, 0.2538314185138483, 0.2143023254574875, 0.1857509286387008, 0.40362591773522294, 0.2152163007595791, 0.22101379415425992, 0.5127040024259651, 0.21400281038285562, 0.18196199878079156, 0.21781275280455048, 0.22282259383854697, 0.19654670245132744, 0.7866050494302006, 0.1864418309718302, 0.15229113779357162, 0.8417258746368714, 0.20047232039184648, 0.877051458976218, 0.15340527093764345, 0.16568621204439538, 0.8476327043610348, 0.5958718558362608, 0.789739543162556, 0.5585482678489151, 0.466483760058199, 0.14776592558448842, 0.2099652301481516, 0.10372500998435275, 0.10472723552630725, 0.5037033429593871, 0.18578722335369835, 0.18152077136997358, 0.19037033796434222, 0.18568310375072772, 0.17733837247110296, 0.18141378495362903, 0.2212224904873793, 0.19108953848328847, 0.18526149567411898, 0.08179675450080737, 0.10697479079173411, 0.08462734553602203, 0.09392567291304565, 0.07080735186323017, 0.07891175836983144, 0.09506803464204827, 0.09778603806168207, 0.08893378335110902]}, "mutation_prompt": null}
{"id": "48710b2b-4705-4ed4-a5fc-0ef76af71f87", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "03ca9625-8bb7-4f12-8376-6354aa80fc48", "solution": "import numpy as np\n\nclass ImprovedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        inertia_min = 0.4\n        inertia_max = 1.0\n        fitness_prev = float('inf')\n\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n\n                inertia_weight = inertia_min + (inertia_max - inertia_min) * (fitness_prev - fitness) / fitness_prev\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.alpha * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n                fitness_prev = fitness\n                \n        return self.global_best_value", "name": "ImprovedQIPSO", "description": "Introducing dynamic inertia weight adaptation based on fitness improvement to expedite convergence.", "configspace": "", "generation": 33, "fitness": 0.12109429702812811, "feedback": "The algorithm ImprovedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.13.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.20711429531409675, 0.1826101776075464, 0.3958567562506381, 0.1204621602098408, 0.11599355866589811, 0.18210479986081152, 0.2256345638402636, 0.18818583012563317, 0.1450602398153078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06178936591028139, 0.09648664860898282, 0.08346743759748021, 0.08278899465238387, 0.07798945017690717, 0.10825961706468956, 0.05236866094757131, 0.06702193194583961, 0.06203169781376583, 0.03536134387506462, 0.05691073963380311, 0.053487136413127745, 0.03937011259081957, 0.053401905085232126, 0.03990878095137229, 0.06054113803882377, 0.023556324410720975, 0.053779923450556266, 0.9698477109953889, 0.9854097464060962, 0.9685355994686665, 0.06195617697437428, 0.05873211882364271, 0.05256498723166714, 0.08836986990157725, 0.07151217636430052, 0.06422396900219995, 0.12121428465977857, 0.12002262359728577, 0.06158853021840238, 0.08836712941109903, 0.061925663921514884, 0.0847043581273641, 0.11308735053671937, 0.06472207482506198, 0.06653284509564361, 0.1836154482656226, 0.13148244842851597, 0.13621753434710593, 0.21079183438107607, 0.16079459087448378, 0.1946056304981365, 0.10013761937979593, 0.14384855115122264, 0.12167983859500142, 0.06073976174617923, 0.07902328953031179, 0.0, 0.00014590167380412744, 0.06566889322906333, 0.017972765116298972, 0.07502854097696376, 0.08036189612627787, 0.12624350524214845, 0.14500776900517742, 0.08027599077566605, 0.04977712140245527, 0.06773405307483404, 0.20306099220160034, 0.09333163346565265, 0.08191903991050042, 0.011660938120461428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04914157980278977, 0.0, 0.010094391550683812, 0.05299509902223121, 0.0013764832109207648, 0.023974037700431272, 0.0722839904163709, 0.09439584424893943, 0.033624925226324875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04794349761928696, 0.16071240227701178, 0.0515702428741277, 0.00457025870869332, 0.042770671016122086, 0.046441956962088415, 0.0034312633509231416, 0.0, 0.02630919153460909, 0.3642281422650542, 0.3529681137233128, 0.2632163825417433, 0.25513810382053836, 0.14071440169347627, 0.1651655323110255, 0.39790770369676587, 0.460533184175556, 0.32487549900102797, 0.04315096707117505, 0.04551941868367848, 0.016510768276978505, 0.06547787119486526, 0.05611618946836805, 0.06981566434992748, 0.05976261277109607, 0.06856176171679484, 0.07930597059962785, 0.08070940226954082, 0.09342186525344165, 0.1278262848719074, 0.11785772272940354, 0.11193747551836475, 0.08425609184883054, 0.13990453511683898, 0.13711262781316924, 0.15048723387242058, 0.15423393110925954, 0.17237839070241612, 0.17902842211598124, 0.2877151403657363, 0.16141074594750482, 0.20238226601392018, 0.17109289462306587, 0.26944979507080924, 0.14737086659660725, 0.14862246237600862, 0.12496500322498649, 0.12318153285936062, 0.17315287457617523, 0.18347850267607113, 0.190032782675141, 0.1415600039520366, 0.14882510303249274, 0.10720934612896871, 0.18149836367114258, 0.1651942882989602, 0.1909750280113398, 0.23008479508911261, 0.16886654154098213, 0.18769714403227977, 0.1994807541962531, 0.18883300046226492, 0.19314988580718784, 0.15733109096368803, 0.15976765610909005, 0.1665104106745643, 0.16752093782469202, 0.17235952433039803, 0.1607539234694384, 0.1533952843718942, 0.16024738294074237, 0.15352414667634806, 0.18311686186001241, 0.08411042805618363, 0.13884404394760497, 0.46978141816958163, 0.17635315317072564, 0.16625272779925893, 0.07549555055179191, 0.13251192397201195, 0.12441212211369279, 0.23060869605760403, 0.20377804653659382, 0.24439611836213548, 0.1586826491068306, 0.12705826774257256, 0.23762544606966984, 0.09801894653586474, 0.16398003789150262, 0.20722112404204351, 0.1560108143568747, 0.1675434193606854, 0.19033230312597293, 0.15056283633940215, 0.1567046533373726, 0.18513717844982513, 0.16253187504562316, 0.1655709858956288, 0.1647937073999961, 0.07292837326768609, 0.059956467220770304, 0.0698851537453371, 0.07323859721409076, 0.062328302468166674, 0.05425875907326494, 0.06487329671389308, 0.07333856059922672, 0.0707413338461722]}, "mutation_prompt": null}
{"id": "52822e51-28f4-4d8c-9fb3-ff5de0f054bf", "solution": "import numpy as np\n\nclass AcceleratedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n        self.inertia_weights = np.ones(self.num_particles)\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                    self.inertia_weights[i] += 0.1  # Increase inertia weight for improved fitness\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.inertia_weights[i] * self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "AcceleratedQIPSO", "description": "Introducing dynamic inertia weight adaptation based on fitness improvement to accelerate convergence.", "configspace": "", "generation": 34, "fitness": 0.2108512847159431, "feedback": "The algorithm AcceleratedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.44080882828298584, 0.43580135865862835, 0.44124519591396205, 0.3890463381931297, 0.4130409914541314, 0.45693571434209657, 0.43690680595854814, 0.4653565114665593, 0.3932569973992943, 0.13328259535249654, 0.06408749011368398, 0.04508581323601979, 0.08144667322581212, 0.059487060530809543, 0.048626996360858876, 0.05428442045295301, 0.061355596898781006, 0.02346384814275715, 0.14509145240268695, 0.13438169756824103, 0.14785361466241775, 0.1346669728115456, 0.11512233967332963, 0.14896520608804809, 0.10814785663404114, 0.1419193225268489, 0.12297928042422956, 0.10815237175307835, 0.12537837980488453, 0.09387858481862454, 0.11324255896320812, 0.13418348664851854, 0.14157542022573344, 0.10512991259506066, 0.1007482790526808, 0.09352539371912061, 0.9811561794691871, 0.9840981926357486, 0.980930463829126, 0.9717183117254438, 0.9732282606641125, 0.9761793053524302, 0.9789003682914383, 0.9782735093392136, 0.9708580223841812, 0.2546268483426507, 0.17146871096938954, 0.25275808645361963, 0.1527500374666999, 0.2966511887768255, 0.14812458349776447, 0.25240969173153194, 0.08836163278576947, 0.08036356477586126, 0.16993565781357411, 0.17061856535261666, 0.3076553880763456, 0.25652638434394104, 0.18495442517826843, 0.20121895762439668, 0.23285068153028965, 0.12575860775703218, 0.2396737515576307, 0.12347892174483643, 0.15792963055459308, 0.13508266264569246, 0.15527372495730962, 0.1434828104098067, 0.1220358033593788, 0.21880329165182466, 0.12774379546413495, 0.13706618556733974, 0.1785646851248326, 0.13516218721365203, 0.11111325230429592, 0.1617335807615986, 0.16626582015336477, 0.1235093760788244, 0.14580487891375193, 0.1277641731522512, 0.1209900037798286, 0.0, 0.0, 0.00038680605083185604, 0.03208792274779737, 0.0, 0.010126013547543722, 0.0, 0.0, 0.0002095277763637382, 0.0815378730561912, 0.03393581450839156, 0.0878422601011265, 0.11566555272668155, 0.01667783937801537, 0.003651626292365484, 0.1417834539574242, 0.09977025341474988, 0.03960993257120027, 0.0, 0.003483361809511365, 0.0011686242248181156, 0.0, 0.0, 0.0, 8.931813932178123e-05, 0.0, 0.0010094630170742747, 0.1351550753054186, 0.10357741031449463, 0.12044681505928545, 0.006499076790762559, 0.0036820034898235043, 0.03837340680111534, 0.11601628203647418, 0.05468777294000793, 0.08360868668108234, 0.40883924160744245, 0.4369937486604297, 0.39837092766848614, 0.41573168819399986, 0.3936939213684738, 0.39866543136461174, 0.41403655114600824, 0.3992398303269964, 0.4083967666447891, 0.11344342794344697, 0.07369793418941828, 0.15690201605394372, 0.10097946325120644, 0.13362149190291273, 0.09538867483684577, 0.10565699676082962, 0.10524737875814227, 0.06854662560350722, 0.24227682305330767, 0.1612522261424425, 0.22006762226972132, 0.3251471712915478, 0.22088183186945332, 0.20556229069726284, 0.21995228914096543, 0.1674435156491556, 0.21586500171155754, 0.27152070417064644, 0.2848287437644934, 0.28231175792185903, 0.2789064155741938, 0.2249140445191431, 0.309542793269759, 0.3163572073944191, 0.29165447913494325, 0.2978318330557388, 0.17208634022819513, 0.22077534402481258, 0.19783544259920527, 0.25141000954115933, 0.15300612291821925, 0.21688561153031394, 0.2300091653524089, 0.20122397431878947, 0.14917304005305743, 0.21505009586536172, 0.20164193584535073, 0.21267244770037952, 0.20718364208328144, 0.22298570896832515, 0.22728902124352934, 0.20469480857214006, 0.20091035715938066, 0.2410623187812626, 0.2258557604533572, 0.2021154716150596, 0.23665756982113229, 0.2624163548779659, 0.2191010764537834, 0.21462104485046607, 0.1916860330806529, 0.20036279715120375, 0.18961318456070309, 0.5966280882521249, 0.16038131548208678, 0.15449952992886828, 0.6989791147366697, 0.2011223569469418, 0.19732900341640836, 0.09968313311650723, 0.16957015153135757, 0.6599988963333611, 0.544117185682427, 0.15599490187236165, 0.4201648225372584, 0.20844093329864988, 0.1759531200711797, 0.20777049882848853, 0.10346842051607186, 0.16776138611131408, 0.3274191267726534, 0.17619452696837234, 0.19269928263774416, 0.1758948249657264, 0.197804139807371, 0.1986568026942116, 0.182953695640383, 0.19669472462734117, 0.19614055453111134, 0.18410449158817033, 0.08563791617022487, 0.0881908601669138, 0.1046359527268258, 0.09063787483066066, 0.09020420133605822, 0.08541030450797915, 0.08298703564340904, 0.09066139209869506, 0.07959568505009706]}, "mutation_prompt": null}
{"id": "befae7df-72dc-4bce-90ae-6f4528b3592c", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n        self.inertia_weight = 0.9\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.inertia_weight * self.velocities[i] + self.alpha * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n            \n            # Update inertia weight dynamically\n            self.inertia_weight = 0.5 + 0.4 * (self.max_iter - _) / self.max_iter\n\n        return self.global_best_value", "name": "QIPSO", "description": "Incorporating a dynamic inertia weight updating mechanism to adjust the exploration and exploitation balance during optimization.", "configspace": "", "generation": 35, "fitness": 0.27118928222548166, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.8480419956061036, 0.8449496733187392, 0.8497878524065398, 0.8396350908648837, 0.8427855719713568, 0.844294883303606, 0.8531574250158048, 0.8517745591970681, 0.8390195697056517, 0.09556168513568208, 0.2971106165120173, 0.2995244287375671, 0.28852625682160205, 0.5010999141693623, 0.10913868060805598, 0.2019015430924992, 0.08970190789672539, 0.04174651064412649, 0.11035585596923392, 0.13841358629386813, 0.1117488618941781, 0.14103901244041805, 0.16061669847246507, 0.07029019722211127, 0.08680622861586851, 0.11508886571446197, 0.11257895263128903, 0.10595790745473244, 0.08281715776342613, 0.0869818885537672, 0.12039181002675303, 0.10641405554695427, 0.10817079636576177, 0.10545064996585152, 0.10329836947862536, 0.1077510501769231, 0.975155562461312, 0.9815105991741242, 0.9783790125061915, 0.962385328039429, 0.9678422642942486, 0.9615277828246472, 0.9754094087883891, 0.9704837608467393, 0.9662350203882885, 0.5255865337451204, 0.24598995199175278, 0.44113566079398314, 0.5409522130890981, 0.46483442221373894, 0.16897177891389126, 0.42465082177057834, 0.622987788312423, 0.3959770002273262, 0.20960706757020908, 0.20818395058225125, 0.2258836632036838, 0.2753497227041458, 0.1922268702608131, 0.21260485647134586, 0.10919250958076443, 0.1506339871930753, 0.17719340178779386, 0.1711444242576674, 0.16605833532370484, 0.18130185570698087, 0.1637820576669068, 0.24618532157328543, 0.2537277731568498, 0.31324933506667485, 0.162367714716519, 0.13035721085283603, 0.16916800108693153, 0.17133050575548225, 0.12356826826028666, 0.15010792928405114, 0.16957192175286506, 0.1586475794776383, 0.21610999041600776, 0.2533783371118129, 0.17059434141229923, 0.0, 0.0, 0.07370083596210841, 0.05087790995838348, 0.05831533263197486, 0.03390857372368261, 0.0, 0.0, 0.09347702687505066, 0.11063122303372963, 0.09228869240172566, 0.10452152426324168, 0.06718251855699131, 0.02382090170739115, 0.02253663320535182, 0.10367991864718917, 0.09566889764375552, 0.04494431458978909, 0.07891136124395726, 0.09835001140600907, 0.18478129448810254, 0.1506609502310352, 0.14028113837220968, 0.12293751053972479, 0.1189589904673185, 0.0755046691598995, 0.06674353902125496, 0.2983829333942798, 0.23898305625886296, 0.12355639257030815, 0.06054770868983472, 0.07456634014612062, 0.11233520400298325, 0.10021660906620455, 0.06769663503393908, 0.08066039253562374, 0.4684241259296924, 0.5280311302452314, 0.5045468170140398, 0.48512111238736666, 0.48127473703614543, 0.4780075702529064, 0.5149464924672899, 0.5378616290519682, 0.5324016481196963, 0.07385858003598844, 0.10492068174779956, 0.10517817224291981, 0.15368428079360363, 0.07278672795278418, 0.1559251014571189, 0.1237225442120804, 0.14798563329986425, 0.07872165756920624, 0.1612666811117326, 0.20405600158651827, 0.22144729103369876, 0.19534032410454205, 0.2569866523508224, 0.2279516521962941, 0.24996366390762903, 0.2768853614939446, 0.32603101961170877, 0.2944350458631805, 0.36415633944225934, 0.32117991408616964, 0.34373139209006776, 0.3483171173876285, 0.33000621175727674, 0.28571086415298885, 0.3628708684482638, 0.5278182270499219, 0.26916136708285143, 0.2836110813618081, 0.2098068197683055, 0.26936895449312603, 0.19653060435745817, 0.25024209597043157, 0.1965736263628789, 0.2775108572657332, 0.2661684923784111, 0.222854385395992, 0.24164699692687475, 0.2549331829512397, 0.19865504355244634, 0.24029294201115037, 0.22562499442803796, 0.21760200394412688, 0.20534580202540598, 0.2427771268294323, 0.193273253262351, 0.18455910860661429, 0.19141113080047478, 0.1874068576665313, 0.18737863308619473, 0.18762895746833952, 0.18968969138901826, 0.7523066376475451, 0.21551806609529378, 0.18568820649997508, 0.12566277311763296, 0.15379376858572136, 0.9158394248617044, 0.20111710860733578, 0.19906654965151804, 0.4284946376956913, 0.16981747756924848, 0.8578702566113413, 0.46338976058334735, 0.15640120664336732, 0.6490988793956161, 0.21248325072908414, 0.168843958201233, 0.5663832620027094, 0.25256873883497233, 0.1675889964296703, 0.35041162164590467, 0.20020392761346695, 0.2282860189261302, 0.17412587931427193, 0.19669725871118804, 0.218567508338819, 0.1876904541647123, 0.18754293613883366, 0.2043781058875015, 0.20798870598000008, 0.10463249215862647, 0.0810482764489423, 0.07994747744437758, 0.07603416664825235, 0.08030339299093903, 0.08352788449826132, 0.08044924831540923, 0.08761980460456342, 0.0867885701989699]}, "mutation_prompt": null}
{"id": "93373b87-ad5a-4c9c-af8b-58f6a91396bd", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "ec0b9e27-2b69-4aee-b630-e98a08285fb9", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.alpha = self.alpha * 0.95  # Adjust alpha dynamically\n                self.beta = self.beta * 1.05  # Adjust beta dynamically\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Enhancing exploration and exploitation balance by dynamically adjusting velocity coefficients during optimization.", "configspace": "", "generation": 37, "fitness": 0.09907825073769452, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.14968106396891812, 0.08300734360297957, 0.1340350887463705, 0.11895035455535419, 0.13250862246769524, 0.12995400133763835, 0.1643094855315278, 0.10397058377541257, 0.09825296370035252, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02019523520975075, 0.02715855156367397, 0.0140644728992938, 0.011458569276587505, 0.020644418145643773, 0.0336943591494151, 0.04269793541887246, 0.03566837405492129, 0.02071544346914378, 0.006191391220862208, 0.008795846776263883, 0.02219834426665479, 0.06705214973861418, 0.002588443611538205, 0.008200635999700667, 0.0, 0.0, 0.015830640520707484, 0.9882882931243948, 0.9920029017376175, 0.9907843766637143, 0.9889622080244268, 0.9901746011145109, 0.9887886529794431, 0.9894660911500438, 0.9910674341446486, 0.9884717320311617, 0.030822474975570335, 0.025011875988588117, 0.028049879373047926, 0.03580102031407717, 0.0010300879922356954, 0.021626761013790574, 0.0, 0.03458173890661853, 0.0, 0.1450657028119422, 0.07238605795336805, 0.11424924811032522, 0.10019661733068097, 0.0811555826037591, 0.09346365302882387, 0.06091644889998915, 0.08111019303508493, 0.06455937769470366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04102204400371834, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14236424690149652, 0.1633274045342803, 0.16976862323566078, 0.2195481728259434, 0.1094039214849839, 0.13060845156577616, 0.17409730026588754, 0.18423907751564572, 0.18284199798867473, 0.02869236242929385, 0.028870637694272006, 0.0049011154911376975, 0.03297483047474492, 0.009814859269164478, 0.04296791645341491, 0.05724798317024449, 0.041503988750458354, 0.03778269701008652, 0.11837787340531836, 0.10444539135924658, 0.15173250870390365, 0.10373573969010286, 0.11617833903974639, 0.07555301144483895, 0.13550265522912486, 0.1393155327952631, 0.07747881758276765, 0.11470117972445881, 0.12726397573903447, 0.14573639589753107, 0.1475102690927197, 0.12387109539529917, 0.16404070840892693, 0.13899410212956498, 0.17521795754505742, 0.13716763470730042, 0.05991147008095177, 0.045057873538474236, 0.07623398049425445, 0.0649595252717019, 0.08142858601379399, 0.12632327959804424, 0.08364015581189743, 0.10316165621832929, 0.0987425320764902, 0.13129745905338297, 0.10140588588525135, 0.13473199793097324, 0.14054654445437442, 0.11291301397677367, 0.11333006917185007, 0.12237199858748082, 0.10378580957243466, 0.126108974692001, 0.03813153118744572, 0.0, 0.14485582586271106, 0.0861683058155277, 0.14540438772193665, 0.005747770466860813, 0.0, 0.0, 0.09522988447418268, 0.08697298699879319, 0.11399141517167921, 0.1129319763364176, 0.11833831236043935, 0.12927261919083444, 0.12670657479814995, 0.11727323833179437, 0.11012181562903856, 0.11295962332599574, 0.11252941698026497, 0.10158844433485015, 0.05964491911498404, 0.1589827079072531, 0.06964157553625394, 0.07251033810948138, 0.07270998792740102, 0.11062474198194217, 0.07929854181115714, 0.13786898982320617, 0.1427683289668441, 0.15202808611743024, 0.1816666443970294, 0.14289680251990777, 0.15436492206675012, 0.16451267129766545, 0.14253504994642785, 0.16935140347685051, 0.028201342457521372, 0.025168987515804986, 0.037516255216747396, 0.0499237098975156, 0.04702556128758628, 0.042975272505855755, 0.017600496459745596, 0.037977470670650604, 0.050274261949073695]}, "mutation_prompt": null}
{"id": "5f1f8109-9b8c-4930-ab00-36c8f5109036", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n        self.convergence_threshold = 0.001\n\n    def __call__(self, func):\n        convergence_speed = 1.0\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n            \n            prev_global_best = self.global_best_value\n            convergence_speed = abs((prev_global_best - self.global_best_value) / prev_global_best) if prev_global_best != 0 else 1.0\n\n            if convergence_speed < self.convergence_threshold:\n                self.alpha *= 1.2\n                self.beta *= 1.1\n\n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introducing dynamic adjustment of alpha and beta parameters based on convergence speed to accelerate the convergence of the algorithm.", "configspace": "", "generation": 38, "fitness": 0.11168791247086969, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.15560689564011776, 0.12626472215157558, 0.22019070357930892, 0.14721853988410605, 0.12860458020539822, 0.15364455932164, 0.16774752102820734, 0.13232510417514187, 0.11791226109998465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04801168184000071, 0.03308311514718376, 0.03983776512633763, 0.04456063591728121, 0.04495584073246095, 0.035120845333790895, 0.032162760614173, 0.038472605042078944, 0.03913636574632584, 0.024831123627521046, 0.017880917683697928, 0.023982437888067087, 0.029360821343187626, 0.011020189065998998, 0.010367243473814014, 0.03311781935899327, 0.00040284078172592164, 0.017762790219878477, 0.9863798975617661, 0.9860759208830405, 0.988106884726307, 0.9827191289898838, 0.9818979594986539, 0.9815656940692908, 0.9857389569393203, 0.9835348845543663, 0.9820570358175452, 0.03635627348568238, 0.038954238254428675, 0.020630556264566113, 0.06366706692905555, 0.02494310136180955, 0.03298905375685268, 0.0896262417394641, 0.04389225656380624, 0.0, 0.1308803362145291, 0.10425463751657538, 0.08222332973592217, 0.14977011534244522, 0.08055043248578353, 0.08142305791494275, 0.0811241123934977, 0.1034208111859849, 0.11528586339967695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019877121485559868, 0.0, 0.01900856385099725, 0.04064916677179009, 0.0, 0.0, 0.0, 0.0017186449150287109, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08405006718709629, 0.00015468159561748962, 0.0, 0.0, 0.04949143952572521, 0.05154215340556689, 0.03158600616451768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20893186675812536, 0.19841768841209195, 0.1796071950603182, 0.19606059262739084, 0.12860345979562593, 0.14003248219866637, 0.28850177082038564, 0.20052283566761375, 0.18923651534929786, 0.0698122475330234, 0.011152228171371958, 0.00863781985099632, 0.060451576478443125, 0.020558619985392768, 0.05336851538518661, 0.04157844019572854, 0.030387846221471282, 0.03775202892542273, 0.10394920020247156, 0.09059433315282717, 0.10873250926440836, 0.11629669496898531, 0.113542956522936, 0.11280878524463134, 0.11594144442668108, 0.10797962616465717, 0.10908001674613788, 0.14078401181241407, 0.18308995004349804, 0.1665855979790818, 0.15836438461568447, 0.1407026013609427, 0.17153068010825423, 0.15272496164374239, 0.19323346294688692, 0.15834344594005068, 0.06466634035492935, 0.13063100073829337, 0.07343826125111153, 0.11172895270373118, 0.0964787616091548, 0.10723202350945937, 0.10506043354974226, 0.12883843658877236, 0.08301943372057008, 0.15519417497502075, 0.13574828325101584, 0.13336421106425755, 0.15590890858312123, 0.1176130347746186, 0.12887477015202498, 0.14820757835627407, 0.13559308424639327, 0.18492192591505385, 0.14429271236702768, 0.0, 0.14921348082354857, 0.13672150189830667, 0.15021370831347303, 0.13699837141110294, 0.15505669785950504, 0.06709964034743554, 0.132402711576888, 0.11265040738274656, 0.10989309615753973, 0.10910781744695308, 0.16860035143323115, 0.1580715581370905, 0.10586366001415204, 0.08274102547319129, 0.11119000278193669, 0.19278831387355733, 0.17332504782789182, 0.10283143961987229, 0.09265589390847362, 0.1039642407084781, 0.07290396862895432, 0.21553272828827819, 0.09013692164658116, 0.10430860694447341, 0.07047727781032587, 0.16582489889688623, 0.13745384976908404, 0.18663838600620963, 0.15675899516697067, 0.192427847264123, 0.1497547690476102, 0.15027953599717003, 0.16730539710251047, 0.1468047635094908, 0.036619655162504205, 0.03418431584109238, 0.05394584784847045, 0.033037619165034116, 0.051050361079967854, 0.045548188006447665, 0.06116526029868108, 0.02460155221546234, 0.06800028220964616]}, "mutation_prompt": null}
{"id": "a7c9968f-bfc7-4c43-9695-6417339a76a8", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n                \n                # Opposite particle update\n                opposite_particle = 2 * self.global_best_position - self.particles[i]\n                opposite_fitness = func(opposite_particle)\n                if opposite_fitness < self.personal_best_values[i]:\n                    self.particles[i] = opposite_particle\n                    self.personal_best_values[i] = opposite_fitness\n                    self.personal_best_positions[i] = opposite_particle\n                \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Utilize opposition-based learning to enhance the exploration and exploitation balance of the QIPSO algorithm for faster convergence.", "configspace": "", "generation": 39, "fitness": 0.24129317625787453, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.6514131174732669, 0.6140844457403586, 0.6291602842117312, 0.6407537393473386, 0.6745144614849443, 0.6569882967062683, 0.6961892392347864, 0.6560378320697039, 0.6660988319192531, 0.07065180792015435, 0.028716695117599333, 9.999999999998899e-05, 0.14964767362768017, 0.03458576457829765, 0.23460887755918114, 0.2564586887510445, 0.1884880727757745, 0.03736549784950072, 0.14115941864243486, 0.16481770380478555, 0.10795798281522662, 0.11510037873455381, 0.12028545104544697, 0.1664023874183489, 0.10396289077671295, 0.06818614768663611, 0.10463374325060593, 0.06607243434952959, 0.09091140173448953, 0.06606848982564695, 0.1310718056873469, 0.08374135074845546, 0.1251217571614519, 0.13647258920156202, 0.09062857859933415, 0.136164249483682, 0.9892580209692116, 0.9953198880629004, 0.9932108218551633, 0.9789662416496415, 0.9906203856030569, 0.9776569540231599, 0.9899255114438505, 0.9903707253520143, 0.9831924152941365, 0.3750020383026882, 0.38282815739780784, 0.3606499154702235, 0.14856480302513886, 0.26641872852106463, 0.3622998971542096, 0.3873951993840751, 0.40758475643384096, 0.08560650212981091, 0.22158532103809525, 0.2220185173313448, 0.21922810384144642, 0.2726227287657532, 0.20131760729282577, 0.19112082552843335, 0.22831142415037597, 0.22654452016551463, 0.12345923763260236, 0.10888635418985526, 0.12274534065242027, 0.20059912578133499, 0.1743681570279637, 0.17523789197469164, 0.2128266129260924, 0.24224969512202532, 0.18999219686335145, 0.12141221827913107, 0.1936607656758712, 0.18919418201250404, 0.1107955704784035, 0.20078494710847983, 0.2005349219825393, 0.1854428072372465, 0.22830097205582678, 0.1987641068437317, 0.16399294650342433, 0.004614637443501102, 9.999999999998899e-05, 9.999999999998899e-05, 0.011575109963085528, 9.999999999998899e-05, 9.999999999998899e-05, 0.04845549524731685, 9.999999999998899e-05, 0.013765661416266228, 0.06323474870719614, 0.0413617207582021, 0.011726735880539851, 0.09411631614099991, 9.999999999998899e-05, 0.012301699623807116, 0.09180227582524236, 0.07573179224273296, 0.010343875819666337, 0.11465938805258247, 0.08231867655995062, 0.14096806206620827, 0.139995174278289, 0.11486983445454335, 0.06890962896822606, 9.999999999998899e-05, 0.09368715424947116, 0.15529906752595457, 9.999999999998899e-05, 0.119372291055311, 0.12254969591527298, 0.13817541534705646, 0.11272904819896978, 0.11155225013439118, 0.15419112720719608, 0.13658101194581285, 0.11440066418866313, 0.4688166555342126, 0.45498068045107387, 0.5123667770320841, 0.47440400962768536, 0.44959099962268334, 0.49080082437821204, 0.44299924171766103, 0.4327255773484153, 0.48417264968073814, 0.060880374569593054, 0.05007461248451617, 0.11140073833738717, 0.08500416607732664, 0.11711707120252868, 0.15088951640570303, 0.08438046614910932, 0.08954177860886703, 0.07149589463318284, 0.25127003595504005, 0.2498230970871118, 0.2502791046960616, 0.1791958291903054, 0.31209003300115934, 0.2857206663173839, 0.2537930026170855, 0.21738599892717825, 0.188071021760855, 0.2587894392259885, 0.25913643857897184, 0.32686595544676733, 0.2354403777768317, 0.23077111880075163, 0.3192364741844028, 0.2730431482039768, 0.3538932408692703, 0.31172864674254763, 0.15925494181480515, 0.23344495847007152, 0.2202650782338571, 0.2267849915081338, 0.1848783205304143, 0.2246199880134251, 0.2874006710467877, 0.20930481134186296, 0.19241207225388357, 0.18236932001635597, 0.1873862827559879, 0.1978307867121114, 0.2059358522783601, 0.213271736569156, 0.194204466399457, 0.25049700160892363, 0.2261863279352867, 0.19869711567490767, 0.4079447527211161, 0.2019805866521448, 0.22374516303684688, 0.19248917777514873, 0.19954862456019917, 0.2114532281007, 0.20431562248294532, 0.21517591560151528, 0.22473839769764614, 0.18515306398099463, 0.12592646711382727, 0.1511437264186678, 0.8164774203340451, 0.19856394216044204, 0.1963898203728649, 0.09921715060435532, 0.16789746573944653, 0.1264439350327844, 0.687407844895116, 0.5922626132626251, 0.5238685406544006, 0.20954001017195378, 0.16719024694325513, 0.6817588357329964, 0.1025865798552924, 0.16372973572441984, 0.6652236198508101, 0.1720830530979447, 0.18276956281943835, 0.1998444713811406, 0.18446039221936295, 0.1807281137094766, 0.17400608126828576, 0.22316443063742086, 0.1891138790923409, 0.20771776274378706, 0.0808610255007447, 0.09659185408570614, 0.08775955361354193, 0.08537403212940076, 0.08789431683316484, 0.07616843371165483, 0.09510202858549544, 0.0839151357917497, 0.09110036351435302]}, "mutation_prompt": null}
{"id": "80e88b6c-51c6-4304-8b9f-1ac636041830", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n        self.inertia_weights = np.full(self.num_particles, self.alpha)\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    # Update personal best values and positions\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                    # Update inertia weight based on fitness improvement\n                    improvement = self.personal_best_values[i] - fitness\n                    self.inertia_weights[i] = self.alpha - (self.alpha - 0.1) * (improvement / self.alpha)\n                    \n                if fitness < self.global_best_value:\n                    # Update global best value and position\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                    \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.inertia_weights[i] * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n                \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introducing a dynamic inertia weight that adapts based on the fitness improvement of personal best positions, encouraging faster convergence.", "configspace": "", "generation": 40, "fitness": 0.27960624350573793, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "23721c80-85bb-47d8-bc4b-3033a8e8278c", "solution": "import numpy as np\n\nclass QIPSO_AdaptiveInertia:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_min + (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 0.4 * (self.personal_best_positions[i] - self.particles[i]) + 0.4 * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO_AdaptiveInertia", "description": "Introducing adaptive inertia weight to dynamically adjust the particle movement based on the particle's historical performance, enhancing convergence speed.", "configspace": "", "generation": 41, "fitness": 0.1191879183284154, "feedback": "The algorithm QIPSO_AdaptiveInertia got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.24239232410736244, 0.20441214863240298, 0.43585720252559323, 0.1236552585851024, 0.12435970717393774, 0.1822300101656339, 0.26369136647219815, 0.18382258820647523, 0.14290667609732022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07953582142794369, 0.11298598364320855, 0.06170753696155573, 0.09237116427165637, 0.10722214706654376, 0.09247436358544969, 0.08151328879018749, 0.09414576592760127, 0.10108018206313318, 0.08225461586200122, 0.047935720662033776, 0.08317425250539001, 0.055129097121081605, 0.04982943328340683, 0.050214680056609895, 0.06321817408114572, 0.03884677727059849, 0.032115412671496424, 0.06271768810368938, 0.059583662336848864, 0.05798965096086395, 0.0659703821502875, 0.060173743639404864, 0.05647344682115307, 0.08206703689523842, 0.06370234205254988, 0.056828102018471105, 0.058976514778814826, 0.048428699797205765, 0.0398974028051835, 0.09975021799083317, 0.07143940316455732, 0.059540452922200005, 0.13498228392433498, 0.08121915311102346, 0.0632502533461593, 0.13025363620694808, 0.14313194105457694, 0.15833792299331506, 0.2627522126506999, 0.15324273431570057, 0.11106318142675697, 0.11813134567621086, 0.1526219144681099, 0.09651098254551049, 0.014113933917042076, 0.06670771727197822, 0.0, 0.006362019113569817, 0.19341531244061017, 0.0, 0.13234569905429616, 0.07429359247286105, 0.10766363271065116, 0.13267905107554379, 0.07405095006697371, 0.13202226319886012, 0.028247872074165348, 0.07281083823649459, 0.12051183010461863, 0.23515185012222672, 0.0, 0.18432527548043587, 0.0, 0.0, 0.0, 0.0, 0.013311742189785258, 0.0, 0.0, 0.0, 0.0, 0.08860656267025102, 0.04623946794921763, 0.07980494993727394, 0.06260033981246471, 0.010208583408780059, 0.02498637271107329, 0.07466096926131527, 0.055847451868973774, 0.04630492181802348, 0.0, 0.2148176257696468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003247750738368249, 0.0, 0.0, 0.017830719133332562, 0.0, 0.0, 0.00026824428217042673, 0.3888933623132703, 0.42708207935396836, 0.29742885539663877, 0.21196525307605352, 0.16506815629290938, 0.15502476361766382, 0.43404450676349493, 0.4100614477015956, 0.3395386306697492, 0.049848606791376704, 0.03328131353457009, 0.026560246529394482, 0.10526295214953407, 0.055673162841874735, 0.1265110792559233, 0.07322213843692427, 0.10015802949469566, 0.06505321416565546, 0.1557729812137335, 0.09565540142255635, 0.2183825987918232, 0.15452844512703812, 0.11347562592478022, 0.14458046268969904, 0.1866657957122263, 0.17849586399195416, 0.20920221747896972, 0.16795465687803335, 0.2075301620127874, 0.17032502286451068, 0.21735329178069396, 0.20118589883709015, 0.20264713589017236, 0.17273066646856694, 0.2561253003321018, 0.15368289988018602, 0.11037376810516486, 0.17600733301590188, 0.2013412425245027, 0.18152540126856442, 0.14623342060878697, 0.2313716519647946, 0.16309416951457845, 0.20035471584676212, 0.12674706989292284, 0.2237129605477891, 0.24114539308677818, 0.2090708221457378, 0.21833613590543954, 0.2061628197300419, 0.2059528970174267, 0.26704583168585205, 0.21529296597067704, 0.21661817438746023, 0.16134756939548278, 0.19023078977547592, 0.17536910602435496, 0.1922418599885114, 0.16486027341221543, 0.1644199419268989, 0.16541505084344643, 0.2209746520021234, 0.15790632877941568, 0.16763284455113459, 0.18356652095912984, 0.14721352923830688, 0.4367683461402132, 0.1833443264465684, 0.17370514818007865, 0.09435801371681896, 0.15683179991714946, 0.12004276049846963, 0.22666978117225722, 0.1554944825358724, 0.21554149443691017, 0.1661521908224618, 0.16062772498186895, 0.30322798379642457, 0.10706397047101168, 0.14642942222065813, 0.22361268570830295, 0.17845886006328238, 0.19094192849960967, 0.19844415189603948, 0.16791585902710882, 0.2117299300304769, 0.20407190133353192, 0.19005335076817043, 0.21225566799006867, 0.1893188570717872, 0.0874534477666914, 0.09045630345415234, 0.09348267918687192, 0.07650068437017199, 0.07899921328960935, 0.0884883110849396, 0.08394162620989487, 0.06746773130334227, 0.07064671248429599]}, "mutation_prompt": null}
{"id": "d43c82fb-caae-4f3d-a114-34b2abf9da39", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "9286e176-f36a-46e0-a809-b32267a52fbe", "solution": "class QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for t in range(self.max_iter):\n            alpha = 0.9 / (1 + t)  # Dynamic alpha parameter\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Introduce a dynamic alpha parameter that adapts based on the current iteration to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 43, "fitness": 0.10291670860761709, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.09.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.23730159923256944, 0.18920181587165175, 0.43929203813167716, 0.10249178745703835, 0.1060745514078657, 0.16320057845785285, 0.17131135857730784, 0.14800269039925118, 0.12255149174338897, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0765922801087674, 0.055743400686945055, 0.08240531476398572, 0.07232650807361007, 0.07330505137255228, 0.0690497602320691, 0.06585861521650382, 0.07904613495874091, 0.04484565300418819, 0.06277350503515133, 0.04591513432134742, 0.057124200667534764, 0.06264362201940965, 0.06411523611957015, 0.029283600220625372, 0.058979149197327385, 0.011259083268337022, 0.05728719396544535, 0.04643872087458989, 0.04311150840863465, 0.043405506932350235, 0.05502178962363191, 0.04764810518284934, 0.03941698833718488, 0.06493629286976976, 0.05006879588976865, 0.04067879650022699, 0.06013451184707741, 0.03944678352278497, 0.03424230741440626, 0.08666637933695676, 0.06135094758687232, 0.037460559426629514, 0.12285099764071361, 0.06342160253839246, 0.0, 0.1605090565995937, 0.1519824162707586, 0.1358749333649435, 0.12672401994834037, 0.1314959170558503, 0.06704555502686149, 0.10550554566490356, 0.12878351481286665, 0.08994342803619781, 0.011704313907300312, 0.01088843015499219, 0.0, 0.0, 0.20661174104026614, 0.0, 0.1208336382540861, 0.02273873609605781, 0.027255450845117823, 0.1287732562616286, 0.03667493211284034, 0.0871922510014258, 0.018046701425234124, 0.07923688567379727, 0.11410203103667393, 0.13767710106754383, 0.0, 0.05986298963308745, 0.0, 0.0, 0.0, 0.0, 0.06381254605948739, 0.0, 0.0, 0.0, 0.0, 0.1107753595373484, 0.04274305558501512, 0.07052505630866013, 0.05212239629109283, 0.010184945647416899, 0.014942731905947193, 0.0671231450575237, 0.09370888226993523, 0.06691924860933474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3553642802137478, 0.3120559305918661, 0.2838445336704142, 0.18175190128105556, 0.14823136967554162, 0.14579711163673437, 0.40751688974336087, 0.4233249865571752, 0.3133370414665807, 0.04606065674616033, 0.011405540981529905, 0.006006566660779367, 0.08097127546137906, 0.04620988600895215, 0.09709691983138691, 0.06358326596253594, 0.061024332227211375, 0.07213376311573627, 0.07667555844769991, 0.14488038493862643, 0.1168010243541594, 0.10354370334789542, 0.11907469939926596, 0.13579829544278255, 0.09884740963324834, 0.18938749129358456, 0.14339095456106699, 0.1503574099215269, 0.19794170615533735, 0.18574004135316313, 0.22293848257940474, 0.19439935445314205, 0.21442448021512506, 0.15509138652946708, 0.23434096040761265, 0.15735429376108423, 0.09150826549968571, 0.14668691246278964, 0.11807965621344052, 0.22164697797124655, 0.18527831395231942, 0.130309986038462, 0.13603740416636267, 0.17263076973345814, 0.10468525475376922, 0.1880553901264841, 0.20308102838785957, 0.2293328848015509, 0.1744413618121905, 0.22098466794889493, 0.16905489883097946, 0.20513455774337752, 0.252184622724295, 0.1989757696629113, 0.18116739490894007, 0.183525417835527, 0.17477872705089792, 0.1651393736572363, 0.16970329725679845, 0.16265736306200396, 0.1676397570215722, 0.1959269536940531, 0.16196564230413346, 0.16656776173357268, 0.15884358148745736, 0.1121366716775456, 0.37244106517672126, 0.16901928047662818, 0.15061685320755192, 0.07434170683235919, 0.12411567317480476, 0.10229039302866094, 0.21127983212387003, 0.15232015542887023, 0.20393992787707615, 0.14815474056530709, 0.1323710744154447, 0.291045779099371, 0.10786711391597947, 0.13592690086723702, 0.21733217727604293, 0.19938929979744668, 0.17026474491145294, 0.1769219843993316, 0.1746474863156101, 0.1608842567764508, 0.16775169808000956, 0.15056720719554795, 0.16699251803280135, 0.16825157184598505, 0.07073947980962858, 0.0618474779878454, 0.06117201692566343, 0.07345249419051747, 0.08004957279381086, 0.05006287850044466, 0.07511412645009752, 0.07262370875935797, 0.0747471488555228]}, "mutation_prompt": null}
{"id": "ecc48a02-99c9-47fd-83a9-e109f1a9eda1", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "9d462d80-d88b-4408-a12e-708f49341d84", "solution": "class QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.gamma = 0.2  # New dynamic adjustment factor\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i]) + self.gamma * (np.mean(self.personal_best_positions, axis=0) - self.particles[i])  # Velocity update with dynamic adjustment\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Introducing a dynamic adjustment factor for the velocity update to adapt the search behavior based on particle performance.", "configspace": "", "generation": 45, "fitness": 0.24119358294787777, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.6799181142558994, 0.680702311329656, 0.6641015294877771, 0.18232568276390626, 0.732099667242587, 0.7328515666344216, 0.7244271270868519, 0.7131766587573043, 0.7130249573296658, 0.013837247593801894, 0.08627634495898273, 0.03350712599573258, 0.23014426808107036, 0.12791791545478914, 0.028500602320249757, 0.034126611814947694, 0.23261111011124735, 0.06959288261052754, 0.1228260394428844, 0.13200355364125538, 0.11323919366712887, 0.12114071112910008, 0.11648431044269347, 0.09340401293586331, 0.11279852200811025, 0.13452075915829498, 0.10761762850500622, 0.1312210821019325, 0.09952984145379329, 0.10149422268320174, 0.10309259450530406, 0.12308902023013468, 0.11552484825556586, 0.09573230489742868, 0.09990490758818882, 0.12361291718232681, 0.9759819132211334, 0.9838719838478712, 0.978409472324929, 0.9589633326779617, 0.9683413953471485, 0.9559021925080051, 0.9779667702508008, 0.9727002008745158, 0.9716142583929672, 0.27323586272758693, 0.39252727967190015, 0.3647288704300101, 0.37406878763551044, 0.4235268001542254, 0.1498900023282831, 0.39122436095884416, 0.08821670004066307, 0.3162510709125257, 0.28384202506891276, 0.22181256602387267, 0.17215099161430114, 0.19409727480035488, 0.2764179859786108, 0.1935177784363724, 0.210567324880363, 0.12896586964485812, 0.23001250749748792, 0.25658371996105933, 0.14761387058010422, 0.14855634644917504, 0.15478944246795168, 0.1852649354117092, 0.14841501189801876, 0.15276550804681044, 0.1652560672478035, 0.14636659985237144, 0.139567159918899, 0.14844708322408462, 0.11817245100467932, 0.13904683391706107, 0.14892716640682224, 0.13799986221770522, 0.18479833885933172, 0.19483455460844978, 0.18113186882111665, 0.0, 0.0, 0.00011377114288024792, 0.03572442990322289, 0.06936698211972925, 0.015187002787351966, 0.00044919870532866835, 0.0, 0.09175202405426264, 0.10049758832507072, 0.06693021148195766, 0.10247323306286305, 0.102553130245293, 0.0021286651068949114, 0.02335335086774848, 0.08982024876808337, 0.11222933287985593, 0.0497941702826078, 0.1174019629868186, 0.0938782816610787, 0.07777366951137099, 0.06030836179410448, 0.13301610007731002, 0.1698472835999728, 0.06913451055805375, 0.07378282010418935, 0.060447676826156926, 0.13012433954046665, 0.10878712328843487, 0.11554692104181175, 0.07566755781310419, 0.11646209634480342, 0.08394995373880498, 0.05080312282859578, 0.07955536364416527, 0.0935258264803015, 0.5607974102678794, 0.48946494075350033, 0.48148129495053515, 0.5355529082661497, 0.48896053220632796, 0.42776112545660083, 0.5095352328860558, 0.4820733961328515, 0.5071490738752601, 0.14801719925594736, 0.09540419829217062, 0.0815817584244658, 0.13285274819411552, 0.11179552306895024, 0.14142056787196178, 0.1512797967441587, 0.11162723178955569, 0.10145844076227206, 0.15223051972546586, 0.23596412003875988, 0.26549187361401017, 0.18016215223080267, 0.22498772526296928, 0.17234046150171123, 0.2084582725746309, 0.1824436249501501, 0.16604152755105173, 0.2936128043952543, 0.36938791682899474, 0.40884958724836795, 0.3045107192495775, 0.2642831002966619, 0.36714307032083593, 0.3606425151289646, 0.31533184849103524, 0.2109419235754535, 0.1636814603035346, 0.30802813302800136, 0.20983548685568887, 0.23177292484986334, 0.20339492165892803, 0.22254555242018748, 0.2321203994338077, 0.2928245805334273, 0.2183872775586675, 0.22207305566436797, 0.2086976435009481, 0.2287223374306283, 0.24176586034037117, 0.2096124689707517, 0.20780784118225637, 0.22067238154068036, 0.21736467116372604, 0.240459225623617, 0.17202749591755806, 0.18941332846806513, 0.212964210342115, 0.2125148103472757, 0.3633221381941858, 0.17690613966498603, 0.1936325480347989, 0.3069358643353085, 0.18346476850930926, 0.18744067633408645, 0.1869348517129994, 0.15174478943319059, 0.8664834762551243, 0.19940405980699483, 0.1986896708677467, 0.09942294870750135, 0.169128234368091, 0.7835189363697692, 0.5445672955340516, 0.15630392415202277, 0.4957693543350091, 0.21053059167832333, 0.16866202651688522, 0.6774065338315538, 0.10489327544017668, 0.16701187804006823, 0.3257376296882979, 0.1895916166385364, 0.18205766734917006, 0.18099251230767377, 0.17211691160811282, 0.17841959897222515, 0.18175191715268768, 0.17490556959617642, 0.17221910585502342, 0.1837623236123196, 0.09781537388999006, 0.08581415472183418, 0.08867110269251066, 0.09425560920361076, 0.08891535844328169, 0.08196149562410648, 0.103940621664241, 0.09700365924283272, 0.09187759266537665]}, "mutation_prompt": null}
{"id": "2d6509dc-d955-4051-a03c-489b5c9c82d6", "solution": "import numpy as np\n\nclass FasterQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                inertia_weight = 0.5 + 0.5 * np.exp(-10 * (fitness - self.personal_best_values[i]) / (self.global_best_value - self.personal_best_values[i]))\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.alpha * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FasterQIPSO", "description": "Introducing dynamic inertia weight adjustment based on individual particle performance to enhance convergence speed.", "configspace": "", "generation": 46, "fitness": 0.10767115631453181, "feedback": "The algorithm FasterQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.13382197663244477, 0.1260859877323537, 0.18854793109600854, 0.1517157100760843, 0.15053996995219654, 0.15058825057148284, 0.18065268768896237, 0.14474691717932986, 0.1443571309866144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.048166401516927526, 0.02846973235529915, 0.027358405103518835, 0.051229458824878615, 0.03370465679214607, 0.0446119800964665, 0.025678333272915688, 0.03533936046350683, 0.02505855434858928, 0.031087271414294237, 0.018475525855310426, 0.03821856197455997, 0.03453005366174089, 0.008212368011922044, 0.014206663615920267, 0.02893694954671644, 0.0, 0.017894475053600534, 0.9803369728094214, 0.98348145192004, 0.982679777339417, 0.972938314468573, 0.9694011269258568, 0.9788712535620854, 0.9834384518947825, 0.9767850010724056, 0.9779310821041446, 0.04055658230150472, 0.03793470126250742, 0.005964268534418449, 0.06375335153520467, 0.027243172027275775, 0.03324175473404989, 0.07989196170207669, 0.04555451070939909, 0.0, 0.10886492388339686, 0.07845797667665388, 0.08570868267595, 0.12413951453956673, 0.058719500388140666, 0.13183084553770608, 0.07204034444192753, 0.06584972502507647, 0.11439770836290641, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008223464558274052, 0.0696930933473221, 0.0, 0.0, 0.0, 0.01007523971248081, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.048993527861051045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20558195403390656, 0.18342595740253742, 0.2012457130651183, 0.18059350732001078, 0.11708918038627669, 0.13925427082738207, 0.20708739861157455, 0.17954718071403664, 0.20659957224614423, 0.0337410796595774, 0.03860468062480105, 0.030320515850101537, 0.03697607898913735, 0.022062585955617386, 0.03751817396975965, 0.03482592460101008, 0.06297219239873086, 0.03742862561107818, 0.08870000339686834, 0.09326810247208994, 0.09312275556008276, 0.09846289938800112, 0.10844057434017085, 0.0835191254256411, 0.08799080449346752, 0.08338016332437381, 0.10004933246190306, 0.15209624894040985, 0.17194334072910755, 0.14344245626169794, 0.14765912344043952, 0.13409628188668832, 0.17242921519101906, 0.14159260190228984, 0.17369512487627703, 0.14115638865278812, 0.08680318756813321, 0.08561550440790011, 0.09003122285729137, 0.13145111921490882, 0.08907982003280235, 0.09379523680938584, 0.10904079433656555, 0.12761207403023378, 0.14775935579307065, 0.17151433438162655, 0.13784351395677896, 0.1333642110642873, 0.15815872460581415, 0.164042107596566, 0.12061545858145806, 0.19737319410304344, 0.12752220189088437, 0.1712563355849014, 0.1424783963832309, 0.0, 0.14726162221060113, 0.15038714422796107, 0.13434344016855315, 0.1405960611281185, 0.141220808837908, 0.1368434752893707, 0.1356051150048031, 0.12062903797972357, 0.07457348599179381, 0.11108292987700041, 0.10627508815122766, 0.13116709049682418, 0.10717433743101978, 0.07474478118154004, 0.13803520398940416, 0.12367474845137871, 0.1331798545610312, 0.10695707425221568, 0.09257837918367784, 0.102315447190228, 0.10157068076035136, 0.08475012012210648, 0.060854849523812704, 0.11156378452148585, 0.13916724449758144, 0.13471522306123696, 0.1282849674498613, 0.14754498426889973, 0.1309588430582842, 0.1526517048324849, 0.14993503797309005, 0.1496121185541588, 0.15019534229717446, 0.16751761719927705, 0.04215106486568365, 0.032807524354015016, 0.04977889457191087, 0.045593241284898056, 0.04067132673205853, 0.037548237424126496, 0.059660111625184475, 0.034828827614097335, 0.041453367796301266]}, "mutation_prompt": null}
{"id": "b2f12623-1f88-4eae-ab0c-5803d862622d", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = self.alpha - (_ / self.max_iter) * 0.5\n                dynamic_beta = self.beta + (_ / self.max_iter) * 0.2\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introducing dynamic adjustment of alpha and beta values during optimization to encourage exploration and exploitation at different stages of the search.", "configspace": "", "generation": 47, "fitness": 0.26961161932550204, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.8620460363609882, 0.8603771550676438, 0.8678642333639895, 0.8636421013291312, 0.8567509157169175, 0.8644598266451275, 0.8636030990305039, 0.8563278758461011, 0.8482845594224763, 0.07143513090407017, 0.06844680533781011, 0.21384645044625106, 0.10666597764974994, 0.21572913411147765, 0.08493830778108791, 0.19212049224100014, 0.08781228276781239, 0.0916551291638964, 0.09950955660500893, 0.11650947202501016, 0.11455211495010464, 0.11061063660981652, 0.14052120024224934, 0.10880469251375036, 0.09060190182617567, 0.11674394328813609, 0.09272827646034454, 0.06829040317376789, 0.11850090073966424, 0.07678417081676836, 0.11970712620862556, 0.10747978342344044, 0.11193357528530667, 0.15520206139291803, 0.05985665486573866, 0.11970077543597668, 0.9751467896828672, 0.9814996075709821, 0.9783764534042685, 0.9623771277034077, 0.9675349483290521, 0.9614883487760634, 0.975394844867134, 0.9678085146271524, 0.9662402211926494, 0.7083344514402834, 0.4382405250542112, 0.4819496734669837, 0.31353148230422434, 0.4336895948276056, 0.3968813643145589, 0.28739995544910124, 0.35763156463455537, 0.5945415795514968, 0.22795782368111628, 0.15573863672042332, 0.17035539755200424, 0.2723220035008196, 0.19219445271460067, 0.2065489243227291, 0.1751844071885178, 0.11143401716163348, 0.23407909880438593, 0.1488678302752141, 0.1576174310304137, 0.15406082316574665, 0.1614398275149901, 0.19981110405185065, 0.15518335930582217, 0.28779261781916166, 0.21904671461517333, 0.16715881401947896, 0.19714486644429785, 0.16877026628405334, 0.12634285778310017, 0.12901534949778704, 0.18716189289811025, 0.17881445547423513, 0.20627960631055364, 0.2471338679799644, 0.1577104858220859, 0.0, 0.0, 0.06755843213075419, 0.0560884149724985, 0.03005053132545832, 0.0, 0.0, 0.0, 0.030364512352333062, 0.061213580399156475, 0.06806874194148482, 0.08393847723554804, 0.06535075927165812, 0.0, 0.009017266044337724, 0.07579577336750243, 0.0660750493172334, 0.052923286962705096, 0.04649595580007426, 0.11216950909390311, 0.18368436556525003, 0.15406609118985248, 0.11305196343143054, 0.10954062866238723, 0.0962171336837746, 0.09066507654540945, 0.08664446682773119, 0.1188317340250945, 0.1686146506898154, 0.3705522325896813, 0.0061490959420889, 0.06057224809781003, 0.1097046953361227, 0.08360942839917984, 0.05569394423894769, 0.08041091247996957, 0.4587674295888525, 0.4892623690487662, 0.4563055458641998, 0.45649149651484044, 0.5701410074672211, 0.5385701811795851, 0.5033293858085526, 0.4719251295673529, 0.5258672878239876, 0.13377542522125496, 0.14153153660724116, 0.1415678667307635, 0.08784284671298415, 0.13150473978619814, 0.12205690013985837, 0.1522040620687105, 0.1399224184210841, 0.07821982574696995, 0.26312664023987054, 0.40010755140410303, 0.24185232793562128, 0.5784197507834519, 0.2619653023588707, 0.22910526364960238, 0.3446262396586969, 0.18841472418588479, 0.32412921414447304, 0.3099454787924134, 0.349754527422114, 0.24728709913711322, 0.48379278175096685, 0.28188450614301075, 0.419246181486463, 0.3076514359673995, 0.36728522934368835, 0.28924482412390373, 0.2793953436250486, 0.24398564605022044, 0.2880069597432745, 0.3223561393340246, 0.18732518476989812, 0.2607607415990739, 0.2725691337717011, 0.2635928507381634, 0.29498843209666425, 0.20612251401763337, 0.21516280059751292, 0.17758522598612236, 0.2271097066559945, 0.20057720069952945, 0.18688693461340478, 0.2280732789543456, 0.2195611234251491, 0.23739124784543641, 0.20801395412343082, 0.19578362110820224, 0.17917502134748242, 0.17309826314941124, 0.17549161209978537, 0.21975571553158424, 0.2481876171505386, 0.21447826739440257, 0.18793291286401714, 0.8687932894090136, 0.12615536715328035, 0.15431007352700998, 0.9030417534297559, 0.20105394167852797, 0.19954155110751104, 0.09966985823467533, 0.16977754515072918, 0.9206881959224056, 0.4409168386472876, 0.15667621372621487, 0.8198249541308872, 0.21174982768863337, 0.1688828803628143, 0.704880132584168, 0.10446065273398908, 0.16660719971902238, 0.3669237510389941, 0.20396773173853533, 0.19066862606490664, 0.19858271920794757, 0.2010287012258154, 0.1901234927382639, 0.19133609105257565, 0.20940935014639028, 0.19329138973283944, 0.2227923579616895, 0.10144012080473697, 0.09158287836864709, 0.08987367268560398, 0.0930692010722276, 0.10467574152544434, 0.06376767378543968, 0.08227290946786414, 0.07629372226662168, 0.08709168999696015]}, "mutation_prompt": null}
{"id": "053be17e-5d7b-4057-997f-ea741717cb00", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.personal_best_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.inertia_weights = np.ones(self.num_particles) * 0.5\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.personal_best_positions[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.personal_best_positions[i].copy()\n                    if fitness < self.global_best_value:\n                        self.global_best_value = fitness\n                        self.global_best_position = self.personal_best_positions[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.personal_best_positions[i]) + self.beta * (self.global_best_position - self.personal_best_positions[i])\n                self.inertia_weights[i] = np.clip(0.5 + 0.5 * (self.personal_best_values[i] - fitness) / self.personal_best_values[i], 0.1, 1.0)\n                self.personal_best_positions[i] = np.clip(self.personal_best_positions[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introducing dynamic inertia weight adaptation based on fitness improvement to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 48, "fitness": 0.25840510265166755, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.698588991071944, 0.7089010156576872, 0.6755812549033731, 0.6797213415445227, 0.18224845002536727, 0.7186269887803688, 0.7178189796719455, 0.6934028369298548, 0.6836471205162077, 0.2652393304702, 0.0, 0.17698970629462585, 0.09402500163676575, 0.05577495571228119, 0.03639344014756518, 0.039392627028226546, 0.014625434628879552, 0.18412401436362957, 0.08752949108601482, 0.1689203807630294, 0.1251155001445613, 0.1438081461955879, 0.06690488189298904, 0.081793226442195, 0.1391977636942271, 0.10958607757625827, 0.07985235267939428, 0.07639225698244845, 0.15084986068658546, 0.08252803033444178, 0.09486952358545753, 0.04551322698681903, 0.107730371190909, 0.08909417573266054, 0.0373250607237382, 0.1172124274784122, 0.9751689896001192, 0.9815328220996632, 0.9783872067913137, 0.9623886571755103, 0.9675926765216359, 0.9632853327435085, 0.9739621142487768, 0.9666785162571625, 0.9662350127320486, 0.5309691517163997, 0.0550542878026794, 0.059142252823425556, 0.570931038151457, 0.14684898620988174, 0.5450907705182627, 0.5418728764503351, 0.5245091526572896, 0.08384771600208574, 0.17042920285595087, 0.3495522175031036, 0.7703080665732721, 0.355011288257542, 0.20164116836983026, 0.19107671783401214, 0.12480731518183186, 0.220867707793433, 0.7763868614830362, 0.13313377358683642, 0.22760995848706367, 0.3365597127498554, 0.1727129554601744, 0.1272508895082708, 0.2561780357785959, 0.16767250063261485, 0.22729660492355663, 0.2187281171495591, 0.23673402127048015, 0.1990993439261043, 0.11989704325392836, 0.12113349336301305, 0.12488990108526288, 0.23145347340452727, 0.12741162713507315, 0.18150752619032484, 0.16456849382129934, 0.0, 0.04302713463934982, 0.0002542267139781229, 0.04694144793436805, 0.07614527032870355, 0.0, 0.04589303431398584, 0.0, 0.0009701458204642854, 0.05610335528793131, 0.056514271145645445, 0.08069813308187568, 0.09649039989192332, 0.005033534106666071, 0.006466052811392564, 0.11654293929741666, 0.017794711592991508, 0.047899606892254476, 0.07238612821192059, 0.09292625047303316, 0.14605529471185286, 0.10247044137098604, 0.055268354777277096, 0.09747384456261765, 0.07247408406842037, 0.13133755083062082, 0.10442870893991785, 0.11110234879504655, 0.1568712519292993, 0.009901239913218118, 0.005570449605621475, 0.005642517439259032, 0.10704788614447391, 0.07454586232820914, 0.04605643518202818, 0.07623524094137246, 0.4931203265484474, 0.511087621974148, 0.5449504115958286, 0.5805359027586201, 0.20550717001648955, 0.4944454851924206, 0.5398355910159168, 0.5147066867612288, 0.557764764124355, 0.09450956519238751, 0.05055166372831099, 0.06653434535927749, 0.13432864318138205, 0.12285540645181048, 0.11678630932716827, 0.12165816882340186, 0.08965277792249648, 0.11859131448409466, 0.25310364104392835, 0.3209576158175973, 0.18148722101095038, 0.27698085999023514, 0.21748504889897358, 0.1356649482273109, 0.19587403662677005, 0.4910417713865439, 0.19407835370556736, 0.2487035996057153, 0.24147328571550408, 0.37084081348491094, 0.32591386623273066, 0.34541355449279876, 0.3736643773552659, 0.39611910127133443, 0.41813316537456735, 0.4076437775913476, 0.2481209746600005, 0.2322937160156161, 0.14490078942928963, 0.2662042317211202, 0.1847749984892243, 0.26709628084123127, 0.19842535365695224, 0.23708179170920562, 0.31091080786934144, 0.21484925595812587, 0.22189797901363517, 0.20701347654000313, 0.2316933235908729, 0.20301660910805275, 0.21603547492491992, 0.23510484849739077, 0.1887099789106066, 0.19426774440644856, 0.2105224197919967, 0.23972207706870208, 0.5261244579229809, 0.2033589573866711, 0.20426696352664375, 0.18827495117000448, 0.19499492096136373, 0.19758716037976487, 0.1960419968516981, 0.7967493455229473, 0.1670942657525084, 0.12379968769955974, 0.8518453044671153, 0.19985441748854627, 0.1961825083399774, 0.09016239364910361, 0.16972312565710868, 0.8149278651500664, 0.7877536551159837, 0.1554025303983544, 0.16696037314346723, 0.21106366155587242, 0.704854412317103, 0.796651810692836, 0.10272777863299998, 0.16407528284781836, 0.7760362913532561, 0.20037375124482593, 0.18884842120856493, 0.23268528593513016, 0.20096298316688332, 0.2118067161867222, 0.19689491935871561, 0.20285965088966673, 0.22196898867149328, 0.2640687608908888, 0.08941093274571144, 0.08339444697671261, 0.09170127991277643, 0.0925883309611385, 0.07781729051952302, 0.08847996625167853, 0.08030786225894138, 0.08879116653435926, 0.09007600084673306]}, "mutation_prompt": null}
{"id": "1bfda321-234b-44d4-9885-f24ce764bb34", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "1240f73b-e2dd-4e44-a89b-acde00da20ad", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "958a462a-7216-41a1-842c-5c43c2ea3386", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            inertia_weight = self.inertia_min + (_ / self.max_iter) * (self.inertia_max - self.inertia_min)\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introducing dynamic inertia weight to balance exploration and exploitation, enhancing convergence speed.", "configspace": "", "generation": 51, "fitness": 0.1191879183284154, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.24239232410736244, 0.20441214863240298, 0.43585720252559323, 0.1236552585851024, 0.12435970717393774, 0.1822300101656339, 0.26369136647219815, 0.18382258820647523, 0.14290667609732022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07953582142794369, 0.11298598364320855, 0.06170753696155573, 0.09237116427165637, 0.10722214706654376, 0.09247436358544969, 0.08151328879018749, 0.09414576592760127, 0.10108018206313318, 0.08225461586200122, 0.047935720662033776, 0.08317425250539001, 0.055129097121081605, 0.04982943328340683, 0.050214680056609895, 0.06321817408114572, 0.03884677727059849, 0.032115412671496424, 0.06271768810368938, 0.059583662336848864, 0.05798965096086395, 0.0659703821502875, 0.060173743639404864, 0.05647344682115307, 0.08206703689523842, 0.06370234205254988, 0.056828102018471105, 0.058976514778814826, 0.048428699797205765, 0.0398974028051835, 0.09975021799083317, 0.07143940316455732, 0.059540452922200005, 0.13498228392433498, 0.08121915311102346, 0.0632502533461593, 0.13025363620694808, 0.14313194105457694, 0.15833792299331506, 0.2627522126506999, 0.15324273431570057, 0.11106318142675697, 0.11813134567621086, 0.1526219144681099, 0.09651098254551049, 0.014113933917042076, 0.06670771727197822, 0.0, 0.006362019113569817, 0.19341531244061017, 0.0, 0.13234569905429616, 0.07429359247286105, 0.10766363271065116, 0.13267905107554379, 0.07405095006697371, 0.13202226319886012, 0.028247872074165348, 0.07281083823649459, 0.12051183010461863, 0.23515185012222672, 0.0, 0.18432527548043587, 0.0, 0.0, 0.0, 0.0, 0.013311742189785258, 0.0, 0.0, 0.0, 0.0, 0.08860656267025102, 0.04623946794921763, 0.07980494993727394, 0.06260033981246471, 0.010208583408780059, 0.02498637271107329, 0.07466096926131527, 0.055847451868973774, 0.04630492181802348, 0.0, 0.2148176257696468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003247750738368249, 0.0, 0.0, 0.017830719133332562, 0.0, 0.0, 0.00026824428217042673, 0.3888933623132703, 0.42708207935396836, 0.29742885539663877, 0.21196525307605352, 0.16506815629290938, 0.15502476361766382, 0.43404450676349493, 0.4100614477015956, 0.3395386306697492, 0.049848606791376704, 0.03328131353457009, 0.026560246529394482, 0.10526295214953407, 0.055673162841874735, 0.1265110792559233, 0.07322213843692427, 0.10015802949469566, 0.06505321416565546, 0.1557729812137335, 0.09565540142255635, 0.2183825987918232, 0.15452844512703812, 0.11347562592478022, 0.14458046268969904, 0.1866657957122263, 0.17849586399195416, 0.20920221747896972, 0.16795465687803335, 0.2075301620127874, 0.17032502286451068, 0.21735329178069396, 0.20118589883709015, 0.20264713589017236, 0.17273066646856694, 0.2561253003321018, 0.15368289988018602, 0.11037376810516486, 0.17600733301590188, 0.2013412425245027, 0.18152540126856442, 0.14623342060878697, 0.2313716519647946, 0.16309416951457845, 0.20035471584676212, 0.12674706989292284, 0.2237129605477891, 0.24114539308677818, 0.2090708221457378, 0.21833613590543954, 0.2061628197300419, 0.2059528970174267, 0.26704583168585205, 0.21529296597067704, 0.21661817438746023, 0.16134756939548278, 0.19023078977547592, 0.17536910602435496, 0.1922418599885114, 0.16486027341221543, 0.1644199419268989, 0.16541505084344643, 0.2209746520021234, 0.15790632877941568, 0.16763284455113459, 0.18356652095912984, 0.14721352923830688, 0.4367683461402132, 0.1833443264465684, 0.17370514818007865, 0.09435801371681896, 0.15683179991714946, 0.12004276049846963, 0.22666978117225722, 0.1554944825358724, 0.21554149443691017, 0.1661521908224618, 0.16062772498186895, 0.30322798379642457, 0.10706397047101168, 0.14642942222065813, 0.22361268570830295, 0.17845886006328238, 0.19094192849960967, 0.19844415189603948, 0.16791585902710882, 0.2117299300304769, 0.20407190133353192, 0.19005335076817043, 0.21225566799006867, 0.1893188570717872, 0.0874534477666914, 0.09045630345415234, 0.09348267918687192, 0.07650068437017199, 0.07899921328960935, 0.0884883110849396, 0.08394162620989487, 0.06746773130334227, 0.07064671248429599]}, "mutation_prompt": null}
{"id": "d0aa0a3e-7bef-49d9-9223-3355d018faa8", "solution": "import numpy as np\n\nclass FastQIPSO(QIPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.4\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                inertia_weight = self.initial_inertia - (_ / self.max_iter) * (self.initial_inertia - self.final_inertia)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FastQIPSO", "description": "Introducing dynamic inertia weight adaptation based on particle performance to improve convergence speed.", "configspace": "", "generation": 52, "fitness": 0.2642447389552578, "feedback": "The algorithm FastQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.8589815068477842, 0.8560277031938264, 0.8572070802386371, 0.8682522234948218, 0.8629970430622873, 0.868912037329208, 0.8686235529581783, 0.8561354364860222, 0.8591281613177595, 0.016549488564931547, 0.04105275293186583, 0.13614321696868825, 0.08766848190901677, 0.06944391663282223, 0.0657671106197748, 0.05674367462956176, 0.054004583797868544, 0.09161257391286504, 0.11017745336090301, 0.11655178004451117, 0.12603901876920476, 0.10085406361414839, 0.15382280074012744, 0.11391734255018005, 0.1677483486398894, 0.10977270407605266, 0.09129874981900488, 0.11036714693086436, 0.12022338229162355, 0.12585158440481758, 0.14021821609649254, 0.11330638294854656, 0.11003880832477975, 0.14229965399966626, 0.035602256635079876, 0.08630986100829718, 0.9751447884476484, 0.981488426808301, 0.9783739583310359, 0.9620682437492568, 0.9675280342629159, 0.961566669205497, 0.9753898578355411, 0.9665281376785253, 0.9662326206239832, 0.3337176490589704, 0.29159870995874193, 0.20164724929469124, 0.3307150493008031, 0.3124794202972415, 0.3815726263517585, 0.5542723981006061, 0.7335954406170018, 0.42474743664203163, 0.20670091346560227, 0.20563352319430683, 0.22603444917178206, 0.27805031577313843, 0.19215737171405833, 0.20458366963246566, 0.22089185247319043, 0.12999831729336186, 0.23376850455436438, 0.14806342978540576, 0.17177419774400804, 0.1476309499625975, 0.16135449370684107, 0.21529089889794017, 0.14827925613889625, 0.30401409482906394, 0.15703029866347384, 0.16357808660704742, 0.15771366113064356, 0.18637380494473166, 0.12601491044736435, 0.12638596731995344, 0.14633088215711965, 0.1526156107624259, 0.21724572085515093, 0.257570432590538, 0.17268973226906814, 0.0, 0.0, 0.05432918353501559, 0.047286375409472337, 0.04237608170085927, 0.0, 0.0, 0.0, 0.05184345661093903, 0.06418475992754025, 0.058467053864726726, 0.09133782488638065, 0.07010990736842992, 0.0, 0.008324279555525949, 0.07084266077520607, 0.05707778033503841, 0.03357798798679468, 0.05823808148323517, 0.1062115439385023, 0.1748509583527843, 0.15177708475333673, 0.12359432405806692, 0.10911571567114153, 0.09363521089154914, 0.206168522157275, 0.09156464874528647, 0.10621060787117387, 0.2318433213242167, 0.23692144349549626, 0.006134330656390907, 0.08310463852476535, 0.11791145904533729, 0.13245330450572312, 0.04890229136093349, 0.08039160039592352, 0.5150771465046999, 0.4807704150395805, 0.49862887201700556, 0.592604883545764, 0.49582831239205194, 0.4860339573469814, 0.5316218764400931, 0.49569950148588904, 0.5018649935833325, 0.09704231817622877, 0.13166577567688442, 0.09411155463856591, 0.155007295345039, 0.09242497260235882, 0.08908372257496067, 0.10274692664844676, 0.15941967744221386, 0.09465557905818045, 0.28118692980023985, 0.4054345167621404, 0.37319234603812446, 0.24567914742969843, 0.263828485914659, 0.1975816641251983, 0.4196793353369792, 0.2146425683299179, 0.20046956212622813, 0.34215177541970787, 0.31682856039658414, 0.2728963268895781, 0.32948072291348685, 0.3091146150694344, 0.3931573315549527, 0.32786009528724036, 0.2818892131380798, 0.48684739589030634, 0.12934933991840736, 0.197411786841848, 0.2300389321409928, 0.29093060892376243, 0.20810854508583077, 0.30388978580397796, 0.2129419087284562, 0.3009281910886268, 0.26562467461493366, 0.20859250879419067, 0.24563000765813325, 0.20517574276223038, 0.2777397989941207, 0.2690811163434278, 0.2063037197298787, 0.19311419786236173, 0.22280790516297022, 0.26097184969116116, 0.20789934026349088, 0.22114332822851224, 0.18780056395089817, 0.18060162842275784, 0.1857317304731375, 0.2009701103492657, 0.18281142588050814, 0.22168462112887355, 0.18779224171333753, 0.8442916032285427, 0.12589892978193662, 0.1543194407985271, 0.8975201394044556, 0.2009440647855063, 0.1994658414746301, 0.09966355176695907, 0.16982447056888117, 0.906604892837266, 0.6147416170726031, 0.15664896379172533, 0.3807127038472642, 0.21151762806873275, 0.16888717173453605, 0.7043685405449238, 0.10354237406217448, 0.16680075670127203, 0.4118628579746634, 0.19632679012990017, 0.19229097607978707, 0.21243189698499765, 0.2092438653853067, 0.25541848551846846, 0.18559338267982295, 0.20057324459979076, 0.17968229664911817, 0.2030180480948488, 0.09019434291748785, 0.10227977458429627, 0.08849402812129559, 0.09711831443304764, 0.08665382440521407, 0.07528529153673758, 0.0900921384184501, 0.09571693628099509, 0.10267184458832834]}, "mutation_prompt": null}
{"id": "099890c4-fcbe-4ac0-9938-1f748beead31", "solution": "import numpy as np\n\nclass DynamicQIPSO(QIPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.inertia_weight = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n\n                r = np.random.uniform(0, 1, self.dim)\n                inertia_weight = self.inertia_weight - (_ / self.max_iter) * self.inertia_weight  # Dynamic inertia weight adjustment\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n\n        return self.global_best_value", "name": "DynamicQIPSO", "description": "Introducing dynamic inertia weight adjustment to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 53, "fitness": 0.13197441530189888, "feedback": "The algorithm DynamicQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.28715331388929555, 0.22898109855706072, 0.3973739141329694, 0.17979568741181629, 0.16423614358882255, 0.26596343472039785, 0.6405741764310837, 0.34515599852913337, 0.21791636394764458, 0.0, 0.04390128541366434, 0.0, 0.033941298079550375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08767622450397261, 0.16961301716674027, 0.04682135142764965, 0.09615776081089311, 0.14115423296887675, 0.12440149202615736, 0.06058612010202724, 0.07286701862609912, 0.07693178092356046, 0.057045526698971116, 0.07415720217072463, 0.05804237485665509, 0.0764089713480689, 0.04281070261884412, 0.0505864874585259, 0.08365045733022758, 0.04016031296647504, 0.051779495704115996, 0.09445435748364339, 0.07537377179282778, 0.0781193258014713, 0.07333556416126652, 0.06906556036702971, 0.07239031041461108, 0.09544721576888204, 0.07231610144711154, 0.06087258760943337, 0.060946177417689484, 0.050775296485574994, 0.05092642136960035, 0.12097120788824811, 0.07342205761990228, 0.06582182726327557, 0.14396944457336047, 0.08660297404134976, 0.06071473414434991, 0.18771960957519018, 0.11789711919948653, 0.16669161788500264, 0.21105742201208744, 0.13837155137695012, 0.17847725897177058, 0.10268841492004888, 0.15243273637024468, 0.10334541722198631, 0.006000297411094868, 0.0860323845797184, 0.0, 0.10578573829401339, 0.2463420630751384, 0.026542484891938667, 0.1138407382988249, 0.15170770489857077, 0.14520632487322815, 0.14740650754715456, 0.08684189679993326, 0.1317051466278235, 0.18119331565676844, 0.1310953745727491, 0.13550826143836658, 0.21244590756929316, 0.013089965793173342, 0.16593556288367617, 0.0, 0.0, 0.0, 0.0, 0.016352164958489235, 0.0, 0.0, 0.0, 0.0, 0.10104320051104643, 0.09794146866013076, 0.08136221432898638, 0.06200540635275298, 0.005198126567948602, 0.01330758962930323, 0.09676306906249521, 0.06590490439429764, 0.04952533455154573, 0.0, 0.0, 0.18795365424765653, 0.0, 0.039183630533798364, 0.08166571387495969, 0.0, 0.0, 0.0, 0.002807484900339996, 0.04548011508545857, 0.05799022224486783, 0.0, 0.021849869334356287, 0.013417173146267447, 0.018255167714384846, 0.0, 0.08963152810923436, 0.4197781506006223, 0.4561012809954176, 0.2948724211581205, 0.26494140319767423, 0.14897390571424818, 0.171709086435618, 0.40572060693629, 0.44660027148646664, 0.357899760338384, 0.05379214395103393, 0.03830279803428982, 0.037195933341149456, 0.08343409507393751, 0.06248919564989175, 0.13873722468252292, 0.0829715457546194, 0.13409771159720207, 0.1128072419935765, 0.3191945741851765, 0.16989896169977914, 0.13465331104815437, 0.14167514038069218, 0.12664289886485036, 0.10511779401524013, 0.13229399559117605, 0.2279184515204965, 0.18570793580882827, 0.1703673747713037, 0.3054680998623217, 0.19700016960976408, 0.2290231200863616, 0.19449984509484597, 0.27727041201110125, 0.1760002433599257, 0.2157591529756997, 0.166485663783712, 0.14386733063177448, 0.18575172040143706, 0.11670534675657107, 0.21383501667357518, 0.16356532389487233, 0.2582167614516324, 0.16854531519392135, 0.2078288699900085, 0.17205181050266838, 0.19466624832096835, 0.18903651121202814, 0.18677283909278242, 0.18953774486175312, 0.1807226143629983, 0.19676035875612974, 0.20495344426589623, 0.23445401271750077, 0.17284183657290886, 0.18906359366851333, 0.17622399794521226, 0.17724234155777208, 0.18647524512701918, 0.17798915217312428, 0.194639016235988, 0.17999287485373172, 0.185952876019151, 0.16663818175927003, 0.16198580423608056, 0.12196285991684197, 0.14807135708055708, 0.6492102902812209, 0.19552319387497785, 0.17185003914727082, 0.09863631001523532, 0.16706100890370312, 0.12898991915415314, 0.347702242750732, 0.15737010811700858, 0.22541918655083926, 0.1839553470966666, 0.16764087871868139, 0.2835141061623182, 0.10890859724860369, 0.16326025839191827, 0.20308867661800445, 0.18914347436785262, 0.16855259294809144, 0.1883640278685822, 0.17033745999255212, 0.17982606353284514, 0.23786281064857073, 0.19794711501051576, 0.16558009685671826, 0.19851488019336672, 0.085993803312443, 0.09457349898072587, 0.07238912192450431, 0.09349860827028711, 0.07498363189521007, 0.06480741759575814, 0.05621371499810068, 0.0937024714698087, 0.07593338345750578]}, "mutation_prompt": null}
{"id": "9fa96b5b-8af8-4473-9bb9-9aac5227d290", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "cfedf5fb-356f-4af6-ac49-739314a1c525", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = self.alpha * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that combines quantum-inspired operators with the particle swarm optimization framework to efficiently explore the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7599576739018358, 0.7881822219375406, 0.7813740855011784, 0.7829205834991162, 0.8069345215437016, 0.7812720376107937, 0.7880867157395887, 0.7773402710795629, 0.791648605560568, 0.15819681718699885, 0.31156980116583755, 0.33675171601707676, 0.37206912492101907, 0.2519652856964648, 0.2595603240950046, 0.26243648361086636, 0.23485737268744067, 0.18958659595041072, 0.09828962550617615, 0.15276892519994723, 0.13589313815627757, 0.11932682102406567, 0.14160856704440716, 0.14928626542776313, 0.11536430131486342, 0.0927319418578485, 0.08893421090495324, 0.0785688902132704, 0.09477163638440977, 0.08716185904715856, 0.11878789902967168, 0.10669365233670547, 0.10220741960386681, 0.1488326837776569, 0.06981004754835485, 0.08691081982389603, 0.9751689896001192, 0.9815328220996632, 0.9783861259662042, 0.9624157346441841, 0.9675926765216359, 0.9631217076097122, 0.9754408854578206, 0.9678409338588856, 0.9662650449412129, 0.5440965462805059, 0.5433961193800203, 0.560876593392722, 0.5463850932868795, 0.5231697728865219, 0.5334443510813888, 0.5607159082869004, 0.5093850966684168, 0.5637539871338544, 0.22815323057046766, 0.21197811659819088, 0.22677830624916273, 0.2121838430509536, 0.1917998675387662, 0.2014852551513221, 0.174995621557535, 0.12566620935368988, 0.2331907668543326, 0.1488471299898303, 0.1825430228233924, 0.18355657658744484, 0.18816811684247492, 0.2320980339925266, 0.17470203721896438, 0.2640743169927944, 0.18964309377513777, 0.19673205022259876, 0.15142596885474924, 0.25293496388327485, 0.12404629167847303, 0.12999333518197387, 0.1872114062379152, 0.19218252502082434, 0.21970856542208006, 0.29395940923012853, 0.16736281970624456, 0.0, 0.002036569022080603, 0.0, 0.05170318457550549, 0.046389484675874115, 0.0, 0.0, 0.0, 0.05599547548937167, 0.07933254025201553, 0.06071967796237421, 0.10228796345994429, 0.04406992984032454, 0.024627727505603825, 0.020934975811790157, 0.06910466866887421, 0.0690400231821221, 0.083398730206652, 0.05253434735176965, 0.08337779893761477, 0.15333762096621395, 0.116080268353148, 0.10415736062802539, 0.12467995470926652, 0.08502747192121829, 0.13752391153767407, 0.07194244906046099, 0.11270088333149653, 0.1528944444962843, 0.13439849838639262, 0.006056761094022423, 0.08887161197478777, 0.10725543401107751, 0.08364600938780842, 0.04834792734133242, 0.07947784549791759, 0.4806647036616558, 0.5022104248220254, 0.5253391044443582, 0.49002395538622645, 0.5447578183950027, 0.5518523305065131, 0.5067064524163379, 0.4968700362655363, 0.5117415324950203, 0.09329533192115691, 0.10638810986027525, 0.06674044460050477, 0.09590239787119048, 0.1231341039381747, 0.08931446910849394, 0.1079487671990399, 0.08769415131919445, 0.13568382974271065, 0.25997618504473363, 0.3421252230389952, 0.40987018777106154, 0.30255458528680423, 0.23364068536714766, 0.2513335149957937, 0.37852324012285876, 0.24406782400599147, 0.22260231023143695, 0.35264149033221814, 0.42406858060936103, 0.4099899561044773, 0.2651852391845625, 0.2772781758123152, 0.37411587013979286, 0.2125322962760312, 0.32552740172949357, 0.386154045022979, 0.36469901547584094, 0.19346798354120165, 0.18327343076003522, 0.2664381864255534, 0.19475163915160976, 0.2767246225348964, 0.2126644510661556, 0.3053787251444383, 0.3179332424088632, 0.2160419187860665, 0.22214123020516985, 0.20758590475542116, 0.21128653750082826, 0.21951313974444442, 0.19943398937944046, 0.24798782393484353, 0.22217235266859092, 0.2169586037114818, 0.6265667479927026, 0.21968639030742532, 0.18563715324216623, 0.20243831436445547, 0.19001834535004847, 0.22161163609538226, 0.20796493248236292, 0.5725076374562243, 0.19187715112683212, 0.8412225046460162, 0.1265632403044643, 0.15433270631014206, 0.8815272490858405, 0.201116470150548, 0.19945390966060073, 0.09968157647294718, 0.1698208309422342, 0.8691663621699198, 0.618878874943511, 0.15655018758188177, 0.5657204424987252, 0.2115025832188896, 0.16887443526914103, 0.8359833284490462, 0.10354336234074202, 0.1669133742890403, 0.5335654742838842, 0.1737065236118981, 0.1930223897333171, 0.19336853904647067, 0.20704396046470142, 0.19388615843386292, 0.21377244451055732, 0.18689358742737772, 0.21855670925752824, 0.19675714663416988, 0.10646518212282463, 0.08797184695773452, 0.0874468829572399, 0.10706615978209266, 0.10084309702613681, 0.0839719877159556, 0.08700641159458378, 0.0925448595551327, 0.0919721559210449]}, "mutation_prompt": null}
{"id": "d417cf57-3b39-4753-9c23-5ec9d5357aa1", "solution": "import numpy as np\n\nclass FastQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                inertia_weight = 0.5 + 0.3 * (self.personal_best_values[i] - fitness) / (self.personal_best_values[i] + 1e-8)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FastQIPSO", "description": "Introducing dynamic inertia weight adjustment based on particle performance for faster convergence.", "configspace": "", "generation": 56, "fitness": 0.13888543310684617, "feedback": "The algorithm FastQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.29343894585748254, 0.23849854637954104, 0.4901927130207766, 0.19095646604553107, 0.1749112290178747, 0.2805153802538721, 0.663525381984379, 0.4612549371025795, 0.22497774738986331, 0.0, 0.046690610121826515, 0.0, 0.011326725768353252, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09140113064033972, 0.1542489180778055, 0.06906411397452417, 0.10960995031472953, 0.11375558217256654, 0.1252791097740421, 0.06384086667956013, 0.09662111731142797, 0.07677460211535181, 0.06067317272784478, 0.06146445655950705, 0.08557822570397422, 0.07875906325445015, 0.0371428679546556, 0.04920408837037449, 0.08342395482565335, 0.043946521625296886, 0.059021720195078675, 0.09789412122027386, 0.07985305384865549, 0.07855268762504797, 0.0740024943961951, 0.06952129243305571, 0.07484461873607884, 0.09608749256000682, 0.07306260111472351, 0.06176032312595503, 0.062313187701557804, 0.05705856998766179, 0.062355435799944514, 0.16937089523530036, 0.07457670612343104, 0.06829459526717907, 0.15010579936921165, 0.08930753922500712, 0.06138754982177452, 0.18766185253436107, 0.14059023513276658, 0.16666571016533693, 0.23626237759240554, 0.13617613995129663, 0.17850545318962452, 0.09452394610422965, 0.1525544431054503, 0.1032987952364951, 0.05658630342722426, 0.09933859510079368, 0.0, 0.14071271959969778, 0.21993025508598296, 0.0607771285561981, 0.12669122144975808, 0.15264274674110345, 0.14730166037133663, 0.14813037619774427, 0.12757151038907155, 0.1310984574810249, 0.22629737029015118, 0.133313996556364, 0.13784733381637526, 0.26755430377032785, 0.0138204169170687, 0.15933850139705696, 0.0, 0.0, 0.0, 0.0, 0.07305892270952208, 0.0, 0.0, 0.0, 0.0, 0.14317800061659725, 0.0840045952263716, 0.07376523875321295, 0.06348065249865809, 0.008899686562354514, 0.01541078203766233, 0.08567661868816989, 0.07369068443451521, 0.036978963531161035, 0.0, 0.1644671150649607, 0.13167732388562914, 0.0, 0.1334058058696701, 0.09861291966447439, 0.0, 0.0, 0.0, 0.013696885441482842, 0.055499579774120344, 0.11996052862754536, 0.0, 0.03080316033832242, 0.004571348706762346, 0.028670776596262493, 0.00025420863876901567, 0.08796017285217983, 0.4227991810401037, 0.500782404163596, 0.3056176524683737, 0.2723000271546, 0.1524001314975969, 0.1819311784486295, 0.412737547675189, 0.3990854215593498, 0.37375301243196557, 0.0539040606134491, 0.04519404026695939, 0.0374481433533419, 0.10691173026200851, 0.0665783210378702, 0.1433919196889708, 0.05095163341798248, 0.11306780145223239, 0.10268565045927192, 0.13556500250459047, 0.13195251213078185, 0.20952412780472973, 0.1511525647759907, 0.14546747514356995, 0.1342715010891905, 0.16146113913053395, 0.14819323427251851, 0.1983159841351666, 0.15469883146562546, 0.2723696479375466, 0.1910399827635445, 0.22739390216481814, 0.19452099069200313, 0.2578620143568007, 0.20440952373150423, 0.22656254641321993, 0.18098797162693303, 0.17726916449390717, 0.16800535788451476, 0.18279326374017923, 0.24814504414210536, 0.15373965331054917, 0.1678440662738725, 0.1761009807548719, 0.1991180403809928, 0.19244389004488982, 0.1961382746607485, 0.19339977725132806, 0.18624990255327967, 0.1825214087128182, 0.18346576955164395, 0.18381673541019095, 0.16655404688200537, 0.22046863919622006, 0.1723971179055317, 0.17837372442010513, 0.16977104876332505, 0.1876781799619318, 0.19493570509790104, 0.17713696981831184, 0.19469974432364778, 0.18049872152534485, 0.18603105408421527, 0.1774175928026963, 0.19021535737613104, 0.18428185052000368, 0.1486112001359099, 0.890783544914148, 0.1965092218177732, 0.16699359322920282, 0.09750431096819134, 0.1688505606892986, 0.1322410114693413, 0.365918873888605, 0.1572656519479979, 0.2259869570974652, 0.18683452793466582, 0.16816541941969176, 0.3779362838369358, 0.21359933065233327, 0.16530971986432486, 0.1976088983520926, 0.2067810528690165, 0.15912001529494424, 0.17287580935006952, 0.21841397777410232, 0.17097527650441935, 0.20147196132944678, 0.19956777605159304, 0.18225468292378522, 0.18482210837916202, 0.07520771702273465, 0.08235597396051109, 0.0793506984929101, 0.08495712428837776, 0.07500401502247356, 0.0923106693919652, 0.064922154854134, 0.08499103069452485, 0.05558958019482996]}, "mutation_prompt": null}
{"id": "2c5571fb-0880-4014-b5a9-2a5f6dedda59", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for t in range(1, self.max_iter + 1):\n            inertia_weight = 0.5 + 0.5 * (1 - t / self.max_iter)  # Dynamic inertia weight update\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                    # Update global best within if statement for faster convergence\n                    if fitness < self.global_best_value:\n                        self.global_best_value = fitness\n                        self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.alpha * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Incorporating a dynamic inertia weight update mechanism to adjust particle velocities based on function evaluations for faster convergence.", "configspace": "", "generation": 57, "fitness": 0.25604015072741904, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.7372553968475271, 0.7230115330121206, 0.7221060212023703, 0.7296100244719056, 0.7593603381612447, 0.7460186409840189, 0.7298601973056674, 0.7493430199108861, 0.7423738486608467, 0.15337173635571688, 0.32602936343503486, 0.043044482468738376, 0.18663218109890456, 0.034849137319923784, 0.00353081004429201, 0.2396140873419197, 0.13034032338677315, 0.08256926465295567, 0.1018055250179758, 0.12015854298746287, 0.15815386147605093, 0.13350172365648527, 0.09962057128685042, 0.12502367049002094, 0.08400726198379194, 0.11847084103000893, 0.10356309053590995, 0.08744458480977757, 0.09329130171610289, 0.10225103046087114, 0.10026358564792004, 0.08645781619891846, 0.10571814053045636, 0.10010051017657029, 0.08448678663266984, 0.10710348899169364, 0.9786174122824898, 0.98382025060438, 0.979908417415581, 0.9673148402214162, 0.9711703488972624, 0.9733033410823426, 0.9787146286379581, 0.9741573230494953, 0.9673297425411751, 0.37143273843860936, 0.37874630572250423, 0.3672498672678449, 0.5417685534738919, 0.37598313868377786, 0.49776889126557866, 0.4445016543311825, 0.49521851383357773, 0.305509006478786, 0.21841360267651766, 0.2197230833126973, 0.29487009639117434, 0.26426659007505793, 0.1942827842717183, 0.1998767762098428, 0.17230140830839613, 0.2984846909790102, 0.30194217169410253, 0.13979732741831052, 0.15335784208254877, 0.14496940381318457, 0.12369958602129794, 0.13088852447378718, 0.12013832261504098, 0.16422028476495742, 0.1621875967099684, 0.17029296267109606, 0.12553167513759067, 0.14794113403944087, 0.10811772107113105, 0.20547836126878583, 0.11029682822624076, 0.14404461757304743, 0.1846185663010328, 0.09100544733623006, 0.16288615969361486, 0.0, 0.008725459973520477, 0.022363712776780065, 0.06020430516083419, 0.0, 0.0377208951605531, 0.0, 0.0, 0.06264822491797839, 0.09887820656509994, 0.09780955212912246, 0.10628599359568547, 0.07550927945293484, 0.019831119803683905, 0.021579219205712485, 0.13387637134414565, 0.07450371031144865, 0.09921961979923655, 0.03662568651013043, 0.09154705173120492, 0.2712698784954517, 0.0542413099884097, 0.09175058729440899, 0.087488353287129, 0.07648122147099834, 0.06981018494525704, 0.05745633285174612, 0.3071608926406738, 0.15580644601639138, 0.15833825863410655, 0.014974595584404726, 0.03371555339367582, 0.2407598011364378, 0.15752229843421994, 0.12951441633957406, 0.0723114680544733, 0.42012559569518426, 0.531657374885901, 0.5320793998815014, 0.45094234954742174, 0.4749901366350461, 0.4493846491302793, 0.4570021408088544, 0.4586586983193731, 0.4645325903680402, 0.09543471827286065, 0.11723683273646779, 0.07127113686135655, 0.1313339261583093, 0.16075490880406285, 0.10113411583357224, 0.09706498848490541, 0.0849137510123692, 0.13524012791947482, 0.24330732793303933, 0.2401951720979395, 0.22775917117671718, 0.2523690398637738, 0.22132193152697321, 0.15987862174166712, 0.2208070211395059, 0.20691322577524085, 0.22988787165613334, 0.3743701355478294, 0.3631140927122033, 0.44477585352488824, 0.2489778691841773, 0.21693176125614377, 0.29452617255165003, 0.3291018772155849, 0.2992050125939274, 0.2777177717930728, 0.27727652266336134, 0.24437271226583435, 0.18936543416004736, 0.25693675072896893, 0.21278920143985236, 0.2770390803313829, 0.23197878914997605, 0.21773227224535074, 0.22640925152084357, 0.2094365418877533, 0.26924051750660694, 0.23985731200787586, 0.20678778669885456, 0.21519900838097372, 0.23837019746838772, 0.23473559494493978, 0.21233682496360062, 0.1997811823947463, 0.19253426711199495, 0.19544308136018573, 0.18924340669715867, 0.21556641768270102, 0.18685612460578727, 0.23515700430653663, 0.19465122717664318, 0.2128219779965107, 0.2032368604364202, 0.7377957895843233, 0.17015719963510167, 0.15343114064817986, 0.8144612644515614, 0.19952165789027787, 0.19679870547163136, 0.11964318574794675, 0.1690430040165538, 0.8009919125885953, 0.7957959681249597, 0.15570049935534003, 0.44953614075714554, 0.2092443640106909, 0.1683934381392297, 0.6017778518579006, 0.20317681570340806, 0.16736794353887985, 0.5044883082416347, 0.19427888525579728, 0.19837638467616225, 0.22512174435299592, 0.18576444872101483, 0.1973472332043852, 0.19014596721485644, 0.2020877189752126, 0.18579450895832283, 0.18707190034031407, 0.08650464203263142, 0.08809296006388889, 0.08012045810462354, 0.07295714985644985, 0.09230961132170468, 0.09198365867754088, 0.08372247764829421, 0.08666955202182636, 0.08650406049489578]}, "mutation_prompt": null}
{"id": "1a742598-6b69-4e14-90f8-37f872a6d881", "solution": "class FastQIPSO(QIPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.min_alpha = 0.4\n        self.max_alpha = 0.9\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                inertia_weight = self.min_alpha + (_ / self.max_iter) * (self.max_alpha - self.min_alpha)\n                self.velocities[i] = inertia_weight * self.velocities[i] + self.beta * (self.personal_best_positions[i] - self.particles[i]) + self.beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FastQIPSO", "description": "Introducing adaptive inertia weight for velocity update to enhance convergence speed.", "configspace": "", "generation": 58, "fitness": 0.1191879183284154, "feedback": "The algorithm FastQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.24239232410736244, 0.20441214863240298, 0.43585720252559323, 0.1236552585851024, 0.12435970717393774, 0.1822300101656339, 0.26369136647219815, 0.18382258820647523, 0.14290667609732022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07953582142794369, 0.11298598364320855, 0.06170753696155573, 0.09237116427165637, 0.10722214706654376, 0.09247436358544969, 0.08151328879018749, 0.09414576592760127, 0.10108018206313318, 0.08225461586200122, 0.047935720662033776, 0.08317425250539001, 0.055129097121081605, 0.04982943328340683, 0.050214680056609895, 0.06321817408114572, 0.03884677727059849, 0.032115412671496424, 0.06271768810368938, 0.059583662336848864, 0.05798965096086395, 0.0659703821502875, 0.060173743639404864, 0.05647344682115307, 0.08206703689523842, 0.06370234205254988, 0.056828102018471105, 0.058976514778814826, 0.048428699797205765, 0.0398974028051835, 0.09975021799083317, 0.07143940316455732, 0.059540452922200005, 0.13498228392433498, 0.08121915311102346, 0.0632502533461593, 0.13025363620694808, 0.14313194105457694, 0.15833792299331506, 0.2627522126506999, 0.15324273431570057, 0.11106318142675697, 0.11813134567621086, 0.1526219144681099, 0.09651098254551049, 0.014113933917042076, 0.06670771727197822, 0.0, 0.006362019113569817, 0.19341531244061017, 0.0, 0.13234569905429616, 0.07429359247286105, 0.10766363271065116, 0.13267905107554379, 0.07405095006697371, 0.13202226319886012, 0.028247872074165348, 0.07281083823649459, 0.12051183010461863, 0.23515185012222672, 0.0, 0.18432527548043587, 0.0, 0.0, 0.0, 0.0, 0.013311742189785258, 0.0, 0.0, 0.0, 0.0, 0.08860656267025102, 0.04623946794921763, 0.07980494993727394, 0.06260033981246471, 0.010208583408780059, 0.02498637271107329, 0.07466096926131527, 0.055847451868973774, 0.04630492181802348, 0.0, 0.2148176257696468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003247750738368249, 0.0, 0.0, 0.017830719133332562, 0.0, 0.0, 0.00026824428217042673, 0.3888933623132703, 0.42708207935396836, 0.29742885539663877, 0.21196525307605352, 0.16506815629290938, 0.15502476361766382, 0.43404450676349493, 0.4100614477015956, 0.3395386306697492, 0.049848606791376704, 0.03328131353457009, 0.026560246529394482, 0.10526295214953407, 0.055673162841874735, 0.1265110792559233, 0.07322213843692427, 0.10015802949469566, 0.06505321416565546, 0.1557729812137335, 0.09565540142255635, 0.2183825987918232, 0.15452844512703812, 0.11347562592478022, 0.14458046268969904, 0.1866657957122263, 0.17849586399195416, 0.20920221747896972, 0.16795465687803335, 0.2075301620127874, 0.17032502286451068, 0.21735329178069396, 0.20118589883709015, 0.20264713589017236, 0.17273066646856694, 0.2561253003321018, 0.15368289988018602, 0.11037376810516486, 0.17600733301590188, 0.2013412425245027, 0.18152540126856442, 0.14623342060878697, 0.2313716519647946, 0.16309416951457845, 0.20035471584676212, 0.12674706989292284, 0.2237129605477891, 0.24114539308677818, 0.2090708221457378, 0.21833613590543954, 0.2061628197300419, 0.2059528970174267, 0.26704583168585205, 0.21529296597067704, 0.21661817438746023, 0.16134756939548278, 0.19023078977547592, 0.17536910602435496, 0.1922418599885114, 0.16486027341221543, 0.1644199419268989, 0.16541505084344643, 0.2209746520021234, 0.15790632877941568, 0.16763284455113459, 0.18356652095912984, 0.14721352923830688, 0.4367683461402132, 0.1833443264465684, 0.17370514818007865, 0.09435801371681896, 0.15683179991714946, 0.12004276049846963, 0.22666978117225722, 0.1554944825358724, 0.21554149443691017, 0.1661521908224618, 0.16062772498186895, 0.30322798379642457, 0.10706397047101168, 0.14642942222065813, 0.22361268570830295, 0.17845886006328238, 0.19094192849960967, 0.19844415189603948, 0.16791585902710882, 0.2117299300304769, 0.20407190133353192, 0.19005335076817043, 0.21225566799006867, 0.1893188570717872, 0.0874534477666914, 0.09045630345415234, 0.09348267918687192, 0.07650068437017199, 0.07899921328960935, 0.0884883110849396, 0.08394162620989487, 0.06746773130334227, 0.07064671248429599]}, "mutation_prompt": null}
{"id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 59, "fitness": 0.2803829428987203, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "0da390ed-feb3-4e46-9c38-d081193c834a", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "b16fd488-ca8a-4a60-8416-2f65829828e4", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "87b59438-1f9f-4cd2-8770-3c2705418812", "solution": "import numpy as np\n\nclass FastConvergingQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                step_size = 0.1 * (1 - fitness / self.global_best_value)  # Variable step size based on fitness improvement\n                self.particles[i] = np.clip(self.particles[i] + step_size * self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FastConvergingQIPSO", "description": "Improve convergence speed by adding a variable step size adaptation mechanism based on fitness improvement.", "configspace": "", "generation": 61, "fitness": 0.046200668730400775, "feedback": "The algorithm FastConvergingQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.08765692947001935, 0.06423415049951742, 0.09160418974400164, 0.08943128444456905, 0.06204510195650603, 0.07700439226554878, 0.07786194868245844, 0.0742204302051026, 0.06854154161060866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01457225473404744, 0.005275638633662649, 0.010544468052300915, 0.0011200441862807553, 0.0065729707950665794, 0.018150078853293228, 0.0, 0.010575797721526392, 0.006793229133231993, 0.0, 0.005055961737761794, 0.019501673109777906, 0.00039528563310364806, 0.0, 0.0, 0.0, 0.0, 0.04508425064962307, 0.04210363830167896, 0.04278205048633987, 0.05324558914834965, 0.04678013722717811, 0.03733246297295645, 0.06379241875039388, 0.04889164439368143, 0.03910579656877622, 0.0, 0.0, 0.0, 0.0, 0.0002155180953176128, 0.0, 0.0, 0.03438676509131089, 0.0, 0.10018685869139876, 0.04511079850757682, 0.05213904648208645, 0.06661749824762087, 0.027157688250678214, 0.0, 0.026699184482841698, 0.059216496363672766, 0.031442932127579315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1087911925041366, 0.13871047537962367, 0.14829537673696325, 0.09416865854227674, 0.09699835892692388, 0.09571399605668462, 0.16104568613242554, 0.09707379230410096, 0.12096781838997028, 0.0, 0.0, 0.0, 0.006002370323504702, 0.0, 0.017501683791264266, 0.0, 0.0, 0.02666833626578957, 0.11099401060941183, 0.13743719573849356, 0.10451251359225155, 0.10179472258232947, 0.10964711184337961, 0.08285757782347614, 0.13132270590579487, 0.11134356297875203, 0.12435575540944133, 0.13911962309484138, 0.15807326212202877, 0.1451009854721822, 0.13792052181382497, 0.11371875507613927, 0.10829748269726946, 0.12019368026048993, 0.17369512487630423, 0.11354482774798758, 0.0507229157138801, 0.03766808292113588, 0.058185452569584406, 0.06558747519391894, 0.06397588397007725, 0.06333484497585817, 0.08364015581189743, 0.09968109929822744, 0.06403167692630829, 0.21339211479545106, 0.1845327080497592, 0.20998769582711851, 0.15543984133622746, 0.08450648772504843, 0.11565647013481861, 0.12907791159357185, 0.0847287155824008, 0.126108974692001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06411144063950891, 0.07457348599179736, 0.08157840845397091, 0.07550380049608152, 0.12070353966557557, 0.0730937455574725, 0.07236292692525292, 0.09634568763976836, 0.0692681884497639, 0.11031370369947813, 0.10042736099156047, 0.020478899054901523, 0.050590853463497676, 0.037286323337989646, 0.04541561500201219, 0.060896138065444805, 0.05016947557078033, 0.08895012779203093, 0.1688294142185025, 0.1680224544996921, 0.21008105029919333, 0.1559116545389343, 0.15823389887433292, 0.17002477669021931, 0.18610178843545777, 0.20439774956307333, 0.1786327421684648, 0.01556289629636265, 0.015885350143232557, 0.035649841460627774, 0.0269179893162087, 0.03765096667665779, 0.02481403286853745, 0.02031639543123187, 0.0073222626957203385, 0.023345642370436903]}, "mutation_prompt": null}
{"id": "6199b1e8-97b8-41d7-bc5c-36321f37cef7", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "2f5f97a6-a79b-4ec5-81e0-e74ec82a93fb", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "08b81b94-9b0b-4d37-9be6-b8b0afc6e7b2", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "4b97df66-34bb-41b5-9720-81a0b63d37ad", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "748af59a-d918-46b6-8589-abc959859c59", "solution": "class MemoryEnhancedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.memory = np.zeros((self.num_particles, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i]) + 0.1 * self.memory[i]\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n                if fitness < self.personal_best_values[i]:\n                    self.memory[i] = 0.5 * self.memory[i] + 0.5 * self.personal_best_positions[i]\n        \n        return self.global_best_value", "name": "MemoryEnhancedQIPSO", "description": "Enhancing particle velocity update by introducing a memory mechanism to incorporate historical best positions for more informed direction updates.", "configspace": "", "generation": 66, "fitness": 0.2803829428987203, "feedback": "The algorithm MemoryEnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "848524e5-2421-46f8-aaf7-34a0258437da", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "3426bbf9-d51d-4a5a-8687-4ded9b6f552a", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "2c9cf39f-00fd-43a0-a03e-ac94bda96622", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "a9afdb0a-920a-4721-8f73-96d713771f0a", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "35bf5765-8882-4474-b142-71051e7ba079", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "509896db-42d2-497c-a168-092531a182c9", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "b797feae-1b17-4e66-84d2-366c05bd3c74", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "65e0c59d-d5bc-4d1b-8e59-4ccd383b8310", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "a562ba4c-da2a-42e9-acbc-bc667331b704", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "fdb7f033-3fa3-4562-b08e-1e0b98437860", "solution": "import numpy as np\n\nclass EnhancedQIPSOConvergenceSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                inertia_weight = 0.5 + 0.4 * (1 - fitness / self.global_best_value)\n                self.velocities[i] = dynamic_alpha * inertia_weight * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSOConvergenceSpeed", "description": "Implement a dynamic inertia weight to adjust particle velocities based on individual and global performance, aiming to enhance convergence speed.", "configspace": "", "generation": 76, "fitness": 0.1036507750888999, "feedback": "The algorithm EnhancedQIPSOConvergenceSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.2517558480943214, 0.20066521246454994, 0.4278117840963961, 0.13197580923098284, 0.13741418778686054, 0.2068977286509216, 0.2816186444753094, 0.27061060450122887, 0.20716079826269773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09182490587028391, 0.13737673002198802, 0.06826922451978568, 0.10563251614227087, 0.12495016048256513, 0.0804119081973036, 0.09645921072155361, 0.15478646863289092, 0.07438851275208014, 0.08679162538483776, 0.061555831591514676, 0.06225280527147048, 0.08441146553558432, 0.03678290091999992, 0.02499936754119847, 0.03035270400777157, 0.028116886334500824, 0.04618495934333644, 0.05430916245089701, 0.050252205560848195, 0.04916147868867793, 0.07060453817094481, 0.06685216195128274, 0.056694190441364145, 0.08324718802384634, 0.06720329303564598, 0.05712291277417658, 0.0, 0.0, 0.02331579495161551, 0.011933426438895167, 0.010206091566221764, 0.029134364480922548, 0.06693239983486932, 0.04502863980406513, 0.0, 0.15758555765560267, 0.15170117591878585, 0.17103694290248583, 0.19080800376526608, 0.15588978719835778, 0.09593966489795291, 0.09456194834360654, 0.10304301702782881, 0.08605540954195201, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004541688417966316, 0.05252568357515319, 0.06213762695151037, 0.019815299654619256, 0.0, 0.0, 0.014906185493912538, 0.007796982812849684, 0.0, 0.013529866610301755, 0.13765836950183696, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009268504579621695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006401781776704252, 0.0, 0.10341457557144385, 0.0, 0.37513120174014614, 0.4209974577484833, 0.31091302174579905, 0.24676741604194263, 0.15480775593420426, 0.16907328859875892, 0.3525879592767117, 0.40567364489371704, 0.339119625705263, 0.04153631402170155, 0.025990427487048717, 0.019006596926163133, 0.11534123761758996, 0.042505650589810595, 0.0707184423011753, 0.03733060766698504, 0.03544050100540863, 0.028545067554153314, 0.20888329081190238, 0.08711459703046243, 0.13665745918537064, 0.13841595886285663, 0.16313282724643963, 0.10253353035582768, 0.17310583948177938, 0.09021173023152296, 0.14483403923973237, 0.2851820419756156, 0.23932640854258902, 0.20093764736737374, 0.23044326576163854, 0.2276863807459525, 0.24156669505451278, 0.17661339668040787, 0.25860218818455905, 0.15982774642260478, 0.07552793064553065, 0.1374071539813263, 0.09820517832536513, 0.22562354980954602, 0.17031908092468984, 0.20324700387276262, 0.13777391694895946, 0.20183811161181897, 0.1903051824423706, 0.2305988379004097, 0.1998210300982841, 0.22025404967424556, 0.20794343168158458, 0.19507371527292539, 0.17960745163543324, 0.22296840564692033, 0.24649687811477494, 0.21092888331113768, 0.15453636786799085, 0.0, 0.17335863433389664, 0.1790579282553315, 0.147935072912746, 0.16051056005517494, 0.15794852352723543, 0.16268342896584653, 0.14701124250471398, 0.1197988404588739, 0.18774236307313208, 0.12927059458685586, 0.2060813638757416, 0.1610529935910614, 0.15127437228843932, 0.09790740136199816, 0.16387244892374253, 0.12568018682931437, 0.30680241843373735, 0.1566691294441087, 0.21822843830291005, 0.16688609561247414, 0.16328584378793276, 0.2842990117665929, 0.10502242158579245, 0.16817225452733542, 0.20170809177837, 0.1992670364610334, 0.166743612629774, 0.16631800631379412, 0.17317546612577295, 0.1704185661971913, 0.16844635166886746, 0.20948029033276194, 0.16102414806496468, 0.17102385698892886, 0.0895659539041449, 0.07342343083213232, 0.07236013622936421, 0.0785446682769021, 0.0747079122526666, 0.06785144629325768, 0.06110458953331088, 0.08655327513626399, 0.099186870169368]}, "mutation_prompt": null}
{"id": "4e3915bc-5fd9-496d-930f-b33e54557acc", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "67e24ef9-16d5-45c2-8931-7492153d3b1c", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "751e0715-46de-4f51-9570-aabf06f16189", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "67813009-43c6-4af8-b5e0-2cc314bfd6d7", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "c270904b-9e12-48c3-a8ae-18621a3a952c", "solution": "import numpy as np\n\nclass DynamicQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i]) + np.random.uniform(-0.1, 0.1, self.dim)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "DynamicQIPSO", "description": "Introduce a dynamic adjustment of velocity update with randomization to enhance exploration and convergence speed.", "configspace": "", "generation": 81, "fitness": 0.2385064760974265, "feedback": "The algorithm DynamicQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.5027937801334598, 0.5114862710688985, 0.5070732207164392, 0.508299008967375, 0.4843629876883693, 0.48725027720879144, 0.4867361257823023, 0.47513085805523647, 0.47819702191665936, 0.097717999224184, 0.0672876349154734, 0.0, 0.08287362817793942, 0.002666991030155219, 0.0, 0.0, 0.035699030021486, 0.0, 0.13372955226289718, 0.10104758029446725, 0.11005859655531114, 0.13485601294802363, 0.12547942134568857, 0.1050658505606018, 0.09467254355892352, 0.1244985450164875, 0.10187827774379221, 0.11083042891772732, 0.10569172864138365, 0.11062276960659023, 0.08832352955238787, 0.13987500372048378, 0.07872250409866555, 0.10830574148107386, 0.08143873917039579, 0.08082731193037285, 0.982364890678731, 0.9836954132589736, 0.9796555829415992, 0.9674792475851803, 0.9717992876320823, 0.9640082070399028, 0.9705844900499419, 0.9743159418016016, 0.9729695683448276, 0.37761037204413883, 0.3472712360612934, 0.347162906035009, 0.3458566653767431, 0.3481793712912198, 0.3422441449638912, 0.357732131441881, 0.33860215069009425, 0.364777817829947, 0.21122294229349126, 0.1298838736654574, 0.2228666974152046, 0.27859164743518827, 0.18193388547405343, 0.19229540456949246, 0.13018482292407685, 0.13785062322581054, 0.23314718361788989, 0.1281091772227917, 0.1830241897083149, 0.17712905824114844, 0.16758317086049124, 0.2508407054873124, 0.16411062523149245, 0.17068584750364058, 0.12894888023987328, 0.19640177064220077, 0.18420242874105575, 0.128058509256612, 0.1816173980992688, 0.2418259334083276, 0.1496403825131698, 0.11778736350223717, 0.21571529444918702, 0.13525323362170927, 0.15939801541571397, 0.08511136994421209, 0.0, 0.0, 0.023848719387562056, 0.004231417773348567, 0.0, 0.0, 0.0, 0.0, 0.12227754074364128, 0.05117354355220671, 0.09609769788573197, 0.07314059238095738, 0.009898388054077056, 0.0644078615974244, 0.21355399652112106, 0.06407826193699218, 0.06183541193257802, 0.0, 0.0014454926405585988, 0.0, 0.029416429689152257, 0.015175014626891414, 0.004057085523209603, 0.0007696524998749288, 0.023765629068728367, 0.0001924671982665993, 0.08021639011110315, 0.07186715071372252, 0.10572438345508295, 0.03140582391897073, 0.03141515417834306, 0.05336880961230561, 0.08798053989378607, 0.12837172892104232, 0.07576829961370024, 0.45365522386591883, 0.4436398003028076, 0.45236470376256144, 0.4856103971373492, 0.45237062213146173, 0.43360590933708065, 0.4460357696973136, 0.46711846210743346, 0.4497626377167412, 0.08786455635918133, 0.1127921300153395, 0.09957147980799386, 0.09137906568996146, 0.11881926823994016, 0.14569223406698206, 0.1259804665232599, 0.13735358858348878, 0.11054868418690489, 0.32819946539887246, 0.3190734199180739, 0.22867471563647546, 0.32023546781218415, 0.3264365310979713, 0.3203834365514828, 0.33487731797721476, 0.2943529174363273, 0.2077312124163916, 0.32019163365431547, 0.319778526191721, 0.28655910376755367, 0.3275446852571593, 0.2434056539891506, 0.3243172068514305, 0.3160895410574055, 0.32399514960518194, 0.27365446887585154, 0.16902130240142665, 0.24488242126722293, 0.255719639293729, 0.2333551835357227, 0.20171043765406882, 0.2256593655305985, 0.1856640186226668, 0.23195943618562154, 0.25796382503296844, 0.21834967036603714, 0.187199878330774, 0.24898381070169695, 0.2084104547835377, 0.20754425360558293, 0.24020868288949282, 0.24347177854874447, 0.22296038397490814, 0.21462315735371384, 0.1998321756730601, 0.22079128669532477, 0.1847020008891167, 0.184155738147465, 0.22377545427080736, 0.203427909455005, 0.18813236690459023, 0.22417839011811724, 0.20005676320526022, 0.7535517865479249, 0.18625461960801226, 0.1533184587918417, 0.7634064291043878, 0.2006042228062327, 0.7775266781132936, 0.15274941174365453, 0.1661616776394852, 0.7712727966588903, 0.6470230242329114, 0.5284197705804766, 0.6657860680983839, 0.8157180118681862, 0.15329335472193673, 0.21010476204697537, 0.10473542328260788, 0.10479144112019312, 0.5134345403949839, 0.1957964042340622, 0.1782052145392321, 0.18656631121037093, 0.19007179111774797, 0.19809894752103285, 0.1870929929444911, 0.19034870772292045, 0.18244525249337462, 0.18850269762692817, 0.08746571429225936, 0.07775065906691403, 0.0829453625607639, 0.08522291893258349, 0.08144130407389183, 0.0757446805814398, 0.09823252131259819, 0.099144388239924, 0.09905293723055897]}, "mutation_prompt": null}
{"id": "5a49deaa-521a-40e2-bcf6-86b1a236b4bc", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "445f68da-b903-4618-8751-7784f908a91d", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "d27bbedf-2b41-4f9a-b101-0082c9e6fa1b", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "ca0eb40b-6fdd-4182-bd14-9ffb1bbcd74c", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "6b2cae6f-1dcc-4878-9771-980933132de9", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "c9143ec1-936f-42a8-95c0-63e22edc07d2", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "90d7b360-2290-432c-981d-5737ed18c9e9", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "1a66d98f-b092-402c-ad55-2fa2c5161d62", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "e626bf70-5c7e-4f45-95d4-f42e180bf583", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "cd55ae82-9624-4de4-82f8-e8c220b2a097", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "50327238-c303-4845-b30a-037c3d533a1f", "solution": "import numpy as np\n\nclass AcceleratedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.inertia_weight = 0.5\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n            \n            self.inertia_weight = 0.5 + 0.3 * (_ / self.max_iter)  # Dynamic inertia weight update\n            self.velocities *= self.inertia_weight  # Apply inertia weight to velocities\n        \n        return self.global_best_value", "name": "AcceleratedQIPSO", "description": "Introduce a dynamic inertia weight to enhance the balance between exploration and exploitation, improving convergence speed.", "configspace": "", "generation": 92, "fitness": 0.12441285754349804, "feedback": "The algorithm AcceleratedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.10.", "error": "", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.25891775569372577, 0.2175118938142806, 0.3757839453417977, 0.1452834180184549, 0.1287200032950384, 0.22208819120538947, 0.3379209913212564, 0.2276226383075146, 0.17661136775750363, 0.0, 0.05960953179920725, 0.0, 0.02924829123101258, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07926776312269035, 0.10294281845197673, 0.0823825027764673, 0.10977761960886678, 0.0687393368114223, 0.05528956404986474, 0.0814876018743802, 0.09731298456879867, 0.07871498817557954, 0.06770261766121088, 0.08151785077880902, 0.06548405870996998, 0.06769104353832267, 0.07906640356278638, 0.051366025911440016, 0.060398716620738147, 0.04227392555116016, 0.05885092741474729, 0.0796204455405004, 0.06584124863903362, 0.06760974153740462, 0.07318231094129501, 0.06659527539987797, 0.05784033015980927, 0.09456369913103668, 0.07007140851147742, 0.05773251137130142, 0.06015413206434439, 0.04691464062821504, 0.04712376627586401, 0.10571199357699712, 0.0721674548812562, 0.06292714738553917, 0.14272293171306394, 0.08874533855022071, 0.07734733257649773, 0.15791677860350806, 0.11790418859015517, 0.13373658827062607, 0.283348607450577, 0.1639423284071374, 0.11101754977130296, 0.11026699297909959, 0.15250383084156782, 0.08701725116531034, 0.007169858696991271, 0.25249174691974885, 0.0, 0.004936470389238057, 0.26724417978676096, 0.005916969304760822, 0.12005050726983968, 0.1440503247682644, 0.14665730263946586, 0.15395115642511814, 0.05984442636329801, 0.1325175927965967, 0.030192433912690664, 0.12966678997807524, 0.12093807383854893, 0.3155621169946742, 0.013384994989505294, 0.151874882635452, 0.0, 0.0, 0.0, 0.0, 0.026885457506849564, 0.0, 0.0, 0.0, 0.0, 0.10726616826842184, 0.04013802379793374, 0.08658110222825022, 0.06294869757103283, 0.011831874130853848, 0.013187915008931128, 0.05859484705441742, 0.08857688910612527, 0.04386934731894632, 0.0, 0.22848677513098514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016623034304447004, 0.02676201068712003, 0.0, 0.030255247186102507, 0.021324958389445925, 0.00013943599680732444, 0.0, 0.04894263267605059, 0.3823185568292786, 0.39710522950480953, 0.3017122922281513, 0.23964112234231838, 0.15580221891148371, 0.1639070961613448, 0.49569811268160846, 0.4453990656537552, 0.3218534656037939, 0.05387462237939067, 0.03613149357765666, 0.01490587867925297, 0.1189013183902814, 0.06541680710543929, 0.11502971264335882, 0.0809011656476063, 0.11176168072867398, 0.08338892028394496, 0.13416995577284374, 0.097116195689812, 0.12902667486827435, 0.13357101144090322, 0.1509892678339927, 0.18401831551197467, 0.21678443346317677, 0.19411918175255483, 0.18091657725670218, 0.1484001216712315, 0.25179548995048306, 0.20491682404229072, 0.2586242501097695, 0.2033469032392331, 0.28477582682589064, 0.17292071814945897, 0.263236304833371, 0.17642874137495423, 0.09581112355803811, 0.19257180547682684, 0.11420825091437203, 0.27268684599408466, 0.18109182726664974, 0.1779577747351786, 0.14054158455584165, 0.25874676256090845, 0.1476824585841081, 0.18999358751593143, 0.25019050953023636, 0.20016681906942824, 0.20589490394083343, 0.19287674383434528, 0.18738227896551563, 0.19382889246721302, 0.22597968507014088, 0.20453238898753712, 0.16383634937801994, 0.19169182701375775, 0.16744254192533314, 0.16981294069240882, 0.17036090785617874, 0.15953368309532656, 0.1659517365573926, 0.18612671380122414, 0.15969016157380378, 0.16460467860132522, 0.18614307568069532, 0.14622386152217515, 0.5554733465467623, 0.1869319865282698, 0.17050210621850004, 0.09772823039492484, 0.1627765213567114, 0.1294144955811125, 0.2320530746525724, 0.15526926975282018, 0.22681327990595712, 0.1633434902576668, 0.1568737724264, 0.2938807937095257, 0.09450521384575894, 0.1487595422847655, 0.1980720184573903, 0.17551869073416637, 0.17541972059845246, 0.21420545205582298, 0.17543879954792652, 0.17924282553819615, 0.16271421679226516, 0.20249146891856895, 0.1616286911274516, 0.1970466665958358, 0.07362258579715564, 0.06132335466982508, 0.0781727700411089, 0.08113851941930639, 0.07291063803085562, 0.0787776979486503, 0.06899100169216366, 0.09800872766893554, 0.0786851404266774]}, "mutation_prompt": null}
{"id": "917dfe2d-72c4-4f93-8424-147206e3857e", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "c5e8c7a9-54ba-4d37-a73e-d49db20ea5df", "solution": "import numpy as np\n\nclass EnhancedQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                self.velocities[i] = dynamic_alpha * self.velocities[i] + dynamic_beta * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedQIPSO", "description": "Introduce dynamic adjustment of alpha and beta parameters to enhance exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8549574408124201, 0.855134483719579, 0.8583907322836444, 0.8606386451930437, 0.8616003722186416, 0.8662444531564149, 0.855303391823625, 0.8446306829988346, 0.8530172076263076, 0.11315122742839034, 0.3549067101393253, 0.5472198801937032, 0.616819137131455, 0.23657476731794191, 0.06165438385202271, 0.12991336712798307, 0.2786222988054201, 0.15399179042694922, 0.12969202229271137, 0.11700852515947613, 0.1529596214387008, 0.09509194640724472, 0.11067365679081964, 0.08811246309242415, 0.10800150044006585, 0.1161481582016497, 0.08760927392338835, 0.10991715019059611, 0.10889908618408717, 0.1360929194302447, 0.11442239251754605, 0.10660858374778204, 0.09749193575670578, 0.13912428856778136, 0.11428316883774459, 0.0897707098857452, 0.9751508017665811, 0.9815246863357284, 0.9783814811458467, 0.9624182545113446, 0.9675499620508946, 0.9623403265858418, 0.9754051717044429, 0.9678312716998696, 0.9662567074031888, 0.7315885114466195, 0.3549150161304838, 0.33618050307337866, 0.614420311562819, 0.6034337492218664, 0.5386839191097652, 0.6693213744958819, 0.5906043796654961, 0.6504863045876401, 0.22842513110357077, 0.13935182166490845, 0.17082513052895154, 0.21881956885586684, 0.1603565011229544, 0.20495308782626087, 0.21809146674926905, 0.21981594117333614, 0.35552757368094634, 0.14927256076697126, 0.17552913133470416, 0.16267531974923355, 0.16603479968885426, 0.20629863508992485, 0.14691408161556885, 0.2992583093060419, 0.19554003202514092, 0.15951190113439184, 0.17820826529994427, 0.12690165687450694, 0.12380742128511868, 0.12941028961845713, 0.14400251516561124, 0.16305507819126874, 0.2295106565707853, 0.3150330768536742, 0.17396279223633282, 0.0, 0.0769299500383811, 0.10685486575419523, 0.08179450089380647, 0.07789468272086875, 0.0, 0.0041727371650293055, 0.0, 0.0448903326842075, 0.07686685048864106, 0.07306222310537902, 0.07539325600783375, 0.06718410733287983, 0.04617936086172414, 0.01748701871297431, 0.08588438743414695, 0.06569973687925901, 0.03743810469371933, 0.05156863201979356, 0.11995903241077266, 0.18688426637873412, 0.11895447422238903, 0.10947482521073748, 0.10605981859657565, 0.0927002555615889, 0.17169706789299066, 0.0669018981129853, 0.0742661635884726, 0.1793386905427602, 0.2146652250300367, 0.006091041362509153, 0.045771952240271085, 0.11462408231171628, 0.12648725421325013, 0.04887037687797746, 0.08041480755812658, 0.5089416206045818, 0.5004331240807391, 0.49946185178259217, 0.48984981748730283, 0.5159762397846721, 0.5206012975644476, 0.5173148914401109, 0.5075946374135942, 0.5155762794368328, 0.11066748188158526, 0.1365553318958842, 0.10033253387445862, 0.14684305645511808, 0.1124199435496177, 0.11480866319876482, 0.09995390511697677, 0.1827626419202405, 0.08782617264655523, 0.2686646715025387, 0.19292062855314407, 0.30396562373135516, 0.37034175451922813, 0.29268866560245654, 0.23100642840896457, 0.266413918998449, 0.2316018988405555, 0.18950507522604132, 0.36473446484645433, 0.3826062510464391, 0.2128671052508211, 0.37962667067243916, 0.3093788529942181, 0.30576577334297816, 0.2607790082707241, 0.40718533299261417, 0.38987576818821923, 0.12995622294643194, 0.23591127733004313, 0.19122053749820545, 0.31615217032892473, 0.18630863866697578, 0.24479064470721967, 0.20742616423250682, 0.28033568860471336, 0.2235844084804578, 0.23157194668598557, 0.24752489031628766, 0.21641262141628637, 0.22248991653754968, 0.23784389787950977, 0.17415177659952752, 0.21731390167847142, 0.2240658485531989, 0.2092653851125107, 0.1994634890465743, 0.20423952391165334, 0.22761877731860136, 0.2242493076858465, 0.17361242845072755, 0.19644273454474315, 0.18298185131249234, 0.19879367800307968, 0.19205532461480157, 0.8447565272028553, 0.12650172088015932, 0.1542858995487284, 0.9114226758132444, 0.2008226998179855, 0.19934496033602156, 0.09963203127122255, 0.16982613109278155, 0.8766107335994534, 0.5556577965245175, 0.15641571314742364, 0.4981387172799485, 0.21210153668586795, 0.16888222247556717, 0.8462017195893047, 0.1045374672637146, 0.16601232846366398, 0.7011296908299792, 0.2103689262797892, 0.206711730176807, 0.1991689304357065, 0.224098734583278, 0.20460131772168355, 0.18386591513012496, 0.19455374149472737, 0.17468571329599547, 0.23946204481852018, 0.11067243400095994, 0.10027774557302493, 0.08723460450182086, 0.0953458676247868, 0.09250214704249682, 0.08703078246032148, 0.10039051587485337, 0.0824943267390954, 0.08861334892668782]}, "mutation_prompt": null}
{"id": "abd8022b-98bd-47e7-bd8b-6e8949b7b2a5", "solution": "import numpy as np\n\nclass FasterQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                inertia_weight = 0.5 + 0.4 * (1 - _ / self.max_iter)  # Adaptive inertia weight\n                self.velocities[i] = inertia_weight * self.velocities[i] + dynamic_alpha * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FasterQIPSO", "description": "Introducing a novel adaptive inertia weight strategy to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 95, "fitness": 0.2924200179574529, "feedback": "The algorithm FasterQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "c0303f49-6887-4b1b-85f8-49cdb83ad3f1", "metadata": {"aucs": [0.8461231541928071, 0.8409272185989365, 0.8556387937865989, 0.8426996400241583, 0.8630825515461042, 0.8481293836568543, 0.8460296378497489, 0.8519602639962162, 0.8515120462066985, 0.6121581061126846, 0.20498004292899707, 0.4971120769488716, 0.5662357739614616, 0.4860194487830678, 0.5356033834071585, 0.5985688031862813, 0.5972823976864932, 0.22001351988854645, 0.17591106988679273, 0.10033872976635538, 0.14881074372121839, 0.13170885631496276, 0.13775986129983053, 0.17580933397254161, 0.11606843178544679, 0.12113588607693926, 0.1377291791098345, 0.09043200523547112, 0.09246237598623852, 0.07548834798565607, 0.09683655316952622, 0.11315022060693591, 0.09087057509202745, 0.11812421120081706, 0.11154886224481164, 0.1259282612825846, 0.9751555038792207, 0.9815349558942055, 0.9783826686526415, 0.9624406319562725, 0.9684956630314394, 0.9623619928304761, 0.9754148223417738, 0.9704908770210587, 0.9662526666433058, 0.6496558567888994, 0.25486349913763984, 0.6076588459211631, 0.4812766446213693, 0.5694293833317098, 0.5331553056475882, 0.4876869712866899, 0.2678243148495689, 0.6992452722848577, 0.17153129940611456, 0.20160477265250187, 0.2267861990381449, 0.2680684553156608, 0.21752781240820618, 0.27334049995796916, 0.17181509264371309, 0.17735228394475366, 0.21724655666505321, 0.16253516392417933, 0.17108547189479284, 0.1706183763942274, 0.18783054918193653, 0.2894685948102167, 0.1305244749481097, 0.37042116846109663, 0.1823857694223472, 0.16752274507453735, 0.17742005817950135, 0.1387008250004086, 0.12265993467710445, 0.16062746836442965, 0.17784596232010752, 0.19406842681215564, 0.23796314885121117, 0.19956102044698232, 0.16884685863851823, 0.0, 0.012607205334952076, 0.06698488699447058, 0.04791571345626, 0.009307280929853001, 0.043209567198109866, 0.0, 0.0, 0.0498999682312975, 0.07763363189541195, 0.07587804182426683, 0.07598522648717776, 0.05712399275993829, 0.023752170516744497, 0.03273563749739117, 0.14995514766858054, 0.0945956719881027, 0.0635870123475557, 0.07364760992070385, 0.09026725923460854, 0.22065096146498075, 0.13072886828805075, 0.1404283327513789, 0.10995439895932446, 0.11036190239902166, 0.07332887729489612, 0.06880845511626665, 0.2275075490696551, 0.21916533018846618, 0.1271865147734358, 0.06759870418165559, 0.03518031381301567, 0.1312631937987857, 0.09451533607029738, 0.05570065768295773, 0.08180176308946152, 0.4943001943605603, 0.48150860581086885, 0.4564478962098383, 0.4874788032511732, 0.5567879272754539, 0.5494472695137778, 0.5316172929530697, 0.5208899180681217, 0.5564101391444969, 0.09927421608697118, 0.11345733981398443, 0.13965153607421632, 0.12997433960933324, 0.12992828902226738, 0.1252192451441002, 0.12272546080442681, 0.15588133092626355, 0.09016209656224872, 0.16973766534951573, 0.4203213718911514, 0.22655538185343338, 0.1618031734287808, 0.29568138290783985, 0.17611648188854911, 0.17661148304686813, 0.19219418212562978, 0.2246017819838062, 0.44456340759332547, 0.3479762072040301, 0.4139046268031109, 0.3125584971429136, 0.3165720254121175, 0.3422541530263289, 0.24708305090073113, 0.6386023930951205, 0.4659015307834017, 0.2637382908154533, 0.34450755888973605, 0.2263394808464585, 0.3322701936894915, 0.2035535725931411, 0.2602828674907338, 0.22820928733728263, 0.2788972645234177, 0.23757348173188342, 0.2000886308286175, 0.23159318409587482, 0.21908175680143105, 0.23407117656704446, 0.20650644213268965, 0.20778493391125774, 0.24106005374798956, 0.23469798666355857, 0.2410695433539366, 0.21624995952094428, 0.20479567948681143, 0.19706361741482636, 0.1947205644382849, 0.2074681894921917, 0.1879875912374006, 0.18467686726227994, 0.7274278863393929, 0.18309696546692844, 0.8558362548450182, 0.12630540074382113, 0.15376436793657577, 0.9080021046361748, 0.20110668277782529, 0.1993396521638361, 0.33890484515817954, 0.16983306153277955, 0.8871624148294673, 0.5589812942116835, 0.1566101016983995, 0.5441600413836067, 0.21215618373751965, 0.1688488559800384, 0.5317217258265978, 0.2857580614835188, 0.16757035370160578, 0.4484787774955784, 0.18213236153181056, 0.199852023411894, 0.20044665378202675, 0.190190317429773, 0.1871198923448526, 0.2065569526823564, 0.19088995079014726, 0.1656090561322664, 0.20812413942811425, 0.11358114699237154, 0.07943876525798155, 0.07775647499235927, 0.09059355147852988, 0.09701300274408786, 0.08531631746167823, 0.0825870298066459, 0.10096537904158553, 0.09085516333162535]}, "mutation_prompt": null}
{"id": "ac3bd3b9-cc6c-4f99-88c8-397578f0eb64", "solution": "import numpy as np\n\nclass EnhancedFasterQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                inertia_weight = 0.5 + 0.4 * (1 - _ / self.max_iter)  # Adaptive inertia weight\n                mutation_factor = 0.1 + 0.2 * (_ / self.max_iter)  # Dynamic mutation strategy\n                self.velocities[i] = inertia_weight * self.velocities[i] + dynamic_alpha * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i]) + mutation_factor * np.random.uniform(-1, 1, self.dim)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "EnhancedFasterQIPSO", "description": "Implementing a dynamic mutation strategy to promote diversity and enhance exploration capabilities for faster convergence.", "configspace": "", "generation": 96, "fitness": 0.2268188489999167, "feedback": "The algorithm EnhancedFasterQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "abd8022b-98bd-47e7-bd8b-6e8949b7b2a5", "metadata": {"aucs": [0.4449390127927433, 0.45596078849636656, 0.43591881821187883, 0.43365066212928494, 0.4612814001497859, 0.4521975643598526, 0.45657712627938296, 0.44191067732266465, 0.44817213227478137, 0.054195743423034015, 0.04398859895603413, 0.0, 0.001618942593261452, 0.023099465296291255, 0.0, 0.008372442420592652, 0.07944074105069121, 0.0, 0.1349160132336219, 0.09168731120165086, 0.15936393168523189, 0.130960117903418, 0.09762496949059918, 0.14965745436676225, 0.10943324043917424, 0.12359964772805254, 0.10146809983049465, 0.10905831803340693, 0.0625709862347652, 0.09622598896685708, 0.12668864255234458, 0.09815612232474646, 0.09419839914629391, 0.11524625611612405, 0.1088823951282849, 0.0947692430844923, 0.9823671432216791, 0.9836967144984028, 0.979660325090472, 0.9674834678037175, 0.9756442569358439, 0.9640265437104167, 0.9707549881032201, 0.9743266641482992, 0.9730096683059132, 0.2914113556823039, 0.3002726173236484, 0.31464106903611533, 0.29219819951437564, 0.30135125924488204, 0.29072453771039564, 0.3311252158657978, 0.293972766065858, 0.3161736353727108, 0.22631800080789555, 0.16410980310923184, 0.16775752722584458, 0.21830585321303497, 0.21572984559757258, 0.21157229643109232, 0.13047550489307136, 0.1733361709186385, 0.22887300931877042, 0.23078136917153969, 0.15279040379755338, 0.12123787009600495, 0.16055284584156848, 0.14364054265953252, 0.1256949631830424, 0.16951193207203052, 0.21619158839546548, 0.18556886468630662, 0.20251422366552063, 0.1466653343425136, 0.1677687800437423, 0.225536106269136, 0.23859597275360578, 0.11721586672716766, 0.24923020038645594, 0.15154763984383013, 0.15232016364649714, 0.0, 0.0, 0.0, 0.024288558014368578, 0.0954429887036935, 0.0, 0.0, 0.0, 0.010232186702216484, 0.07349012853636139, 0.053059752411029115, 0.09883361828784143, 0.07098764971720739, 0.010975384711669034, 0.029468668383676566, 0.15421866566922326, 0.0673362131254347, 0.04545921164618105, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11059862520993591, 0.10973425525321545, 0.10575808151917931, 0.03796496080523648, 0.04165411107268735, 0.05728705071464957, 0.08380045524676083, 0.11627010297187934, 0.07619660161929098, 0.41754368012159704, 0.4277133089440105, 0.4328322848916686, 0.4063137487177808, 0.429165243877782, 0.4273976770636304, 0.40545927949364036, 0.3897146584925536, 0.40349356405160464, 0.07255395390874564, 0.13398574862601365, 0.11246703622876064, 0.10888885712183305, 0.10055756172987473, 0.116104226833181, 0.0885706613763606, 0.14430749938383358, 0.07700535442030887, 0.18648399008527772, 0.2638118938339429, 0.23239792603631815, 0.22541456372407298, 0.170415870307701, 0.3113746699559401, 0.3086563787105101, 0.16964437665787724, 0.23088065773564426, 0.3038364922496748, 0.2647942909923824, 0.3112486596213807, 0.28683544997529176, 0.21717200120587232, 0.29681704836910927, 0.31207564832543355, 0.3017520664332507, 0.30337413577668637, 0.22778969376936864, 0.19992495830583368, 0.24745238354781873, 0.24703310032739068, 0.187490817343842, 0.24276978680168837, 0.20423299698323794, 0.23256152819047315, 0.24337024852525269, 0.2462651447846781, 0.18845778112823253, 0.26945130194274547, 0.21689782628517362, 0.18580981544798902, 0.23011062404021354, 0.2745828355515674, 0.20308305979304675, 0.2274136016029844, 0.19580715616468447, 0.2212784752691963, 0.17741097321681587, 0.27494029729496516, 0.22862860257570783, 0.20086611936534382, 0.21748966813512471, 0.19914596090783632, 0.23542414199355166, 0.6390505258886854, 0.1860925044846896, 0.16865288976027515, 0.6849598943630824, 0.20037976808523095, 0.6425323864793993, 0.15995590792584735, 0.43596636378655906, 0.663373103574536, 0.5787198733287685, 0.5715304263090679, 0.5848960380461015, 0.4720011632269716, 0.20757694780242963, 0.20794898741100842, 0.10468510337313996, 0.10470961759147379, 0.3865853305260383, 0.19364378561945494, 0.17910621338914168, 0.1795745479140154, 0.18049694873302247, 0.1699535530639512, 0.17667274046216075, 0.1826967609869088, 0.1940532450731013, 0.1859270909477434, 0.10027091728597481, 0.09454360801891748, 0.07340298176729299, 0.09414956176675127, 0.08721561832351543, 0.08854416487106287, 0.08959902550931642, 0.09391510666266023, 0.09716768677397791]}, "mutation_prompt": null}
{"id": "1edaadff-11eb-49a8-b890-c4fdef460a77", "solution": "import numpy as np\n\nclass FasterQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                inertia_weight = 0.5 + 0.4 * (1 - _ / self.max_iter)  # Adaptive inertia weight\n                self.velocities[i] = inertia_weight * self.velocities[i] + dynamic_alpha * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FasterQIPSO", "description": "Introducing a novel adaptive inertia weight strategy to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abd8022b-98bd-47e7-bd8b-6e8949b7b2a5", "metadata": {"aucs": [0.8461231541928071, 0.8409272185989365, 0.8556387937865989, 0.8426996400241583, 0.8630825515461042, 0.8481293836568543, 0.8460296378497489, 0.8519602639962162, 0.8515120462066985, 0.6121581061126846, 0.20498004292899707, 0.4971120769488716, 0.5662357739614616, 0.4860194487830678, 0.5356033834071585, 0.5985688031862813, 0.5972823976864932, 0.22001351988854645, 0.17591106988679273, 0.10033872976635538, 0.14881074372121839, 0.13170885631496276, 0.13775986129983053, 0.17580933397254161, 0.11606843178544679, 0.12113588607693926, 0.1377291791098345, 0.09043200523547112, 0.09246237598623852, 0.07548834798565607, 0.09683655316952622, 0.11315022060693591, 0.09087057509202745, 0.11812421120081706, 0.11154886224481164, 0.1259282612825846, 0.9751555038792207, 0.9815349558942055, 0.9783826686526415, 0.9624406319562725, 0.9684956630314394, 0.9623619928304761, 0.9754148223417738, 0.9704908770210587, 0.9662526666433058, 0.6496558567888994, 0.25486349913763984, 0.6076588459211631, 0.4812766446213693, 0.5694293833317098, 0.5331553056475882, 0.4876869712866899, 0.2678243148495689, 0.6992452722848577, 0.17153129940611456, 0.20160477265250187, 0.2267861990381449, 0.2680684553156608, 0.21752781240820618, 0.27334049995796916, 0.17181509264371309, 0.17735228394475366, 0.21724655666505321, 0.16253516392417933, 0.17108547189479284, 0.1706183763942274, 0.18783054918193653, 0.2894685948102167, 0.1305244749481097, 0.37042116846109663, 0.1823857694223472, 0.16752274507453735, 0.17742005817950135, 0.1387008250004086, 0.12265993467710445, 0.16062746836442965, 0.17784596232010752, 0.19406842681215564, 0.23796314885121117, 0.19956102044698232, 0.16884685863851823, 0.0, 0.012607205334952076, 0.06698488699447058, 0.04791571345626, 0.009307280929853001, 0.043209567198109866, 0.0, 0.0, 0.0498999682312975, 0.07763363189541195, 0.07587804182426683, 0.07598522648717776, 0.05712399275993829, 0.023752170516744497, 0.03273563749739117, 0.14995514766858054, 0.0945956719881027, 0.0635870123475557, 0.07364760992070385, 0.09026725923460854, 0.22065096146498075, 0.13072886828805075, 0.1404283327513789, 0.10995439895932446, 0.11036190239902166, 0.07332887729489612, 0.06880845511626665, 0.2275075490696551, 0.21916533018846618, 0.1271865147734358, 0.06759870418165559, 0.03518031381301567, 0.1312631937987857, 0.09451533607029738, 0.05570065768295773, 0.08180176308946152, 0.4943001943605603, 0.48150860581086885, 0.4564478962098383, 0.4874788032511732, 0.5567879272754539, 0.5494472695137778, 0.5316172929530697, 0.5208899180681217, 0.5564101391444969, 0.09927421608697118, 0.11345733981398443, 0.13965153607421632, 0.12997433960933324, 0.12992828902226738, 0.1252192451441002, 0.12272546080442681, 0.15588133092626355, 0.09016209656224872, 0.16973766534951573, 0.4203213718911514, 0.22655538185343338, 0.1618031734287808, 0.29568138290783985, 0.17611648188854911, 0.17661148304686813, 0.19219418212562978, 0.2246017819838062, 0.44456340759332547, 0.3479762072040301, 0.4139046268031109, 0.3125584971429136, 0.3165720254121175, 0.3422541530263289, 0.24708305090073113, 0.6386023930951205, 0.4659015307834017, 0.2637382908154533, 0.34450755888973605, 0.2263394808464585, 0.3322701936894915, 0.2035535725931411, 0.2602828674907338, 0.22820928733728263, 0.2788972645234177, 0.23757348173188342, 0.2000886308286175, 0.23159318409587482, 0.21908175680143105, 0.23407117656704446, 0.20650644213268965, 0.20778493391125774, 0.24106005374798956, 0.23469798666355857, 0.2410695433539366, 0.21624995952094428, 0.20479567948681143, 0.19706361741482636, 0.1947205644382849, 0.2074681894921917, 0.1879875912374006, 0.18467686726227994, 0.7274278863393929, 0.18309696546692844, 0.8558362548450182, 0.12630540074382113, 0.15376436793657577, 0.9080021046361748, 0.20110668277782529, 0.1993396521638361, 0.33890484515817954, 0.16983306153277955, 0.8871624148294673, 0.5589812942116835, 0.1566101016983995, 0.5441600413836067, 0.21215618373751965, 0.1688488559800384, 0.5317217258265978, 0.2857580614835188, 0.16757035370160578, 0.4484787774955784, 0.18213236153181056, 0.199852023411894, 0.20044665378202675, 0.190190317429773, 0.1871198923448526, 0.2065569526823564, 0.19088995079014726, 0.1656090561322664, 0.20812413942811425, 0.11358114699237154, 0.07943876525798155, 0.07775647499235927, 0.09059355147852988, 0.09701300274408786, 0.08531631746167823, 0.0825870298066459, 0.10096537904158553, 0.09085516333162535]}, "mutation_prompt": null}
{"id": "61109f4a-add7-49b0-98c4-546185dc53a7", "solution": "import numpy as np\n\nclass FasterQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                inertia_weight = 0.5 + 0.4 * (1 - _ / self.max_iter)  # Adaptive inertia weight\n                self.velocities[i] = inertia_weight * self.velocities[i] + dynamic_alpha * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FasterQIPSO", "description": "Introducing a novel adaptive inertia weight strategy to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abd8022b-98bd-47e7-bd8b-6e8949b7b2a5", "metadata": {"aucs": [0.8461231541928071, 0.8409272185989365, 0.8556387937865989, 0.8426996400241583, 0.8630825515461042, 0.8481293836568543, 0.8460296378497489, 0.8519602639962162, 0.8515120462066985, 0.6121581061126846, 0.20498004292899707, 0.4971120769488716, 0.5662357739614616, 0.4860194487830678, 0.5356033834071585, 0.5985688031862813, 0.5972823976864932, 0.22001351988854645, 0.17591106988679273, 0.10033872976635538, 0.14881074372121839, 0.13170885631496276, 0.13775986129983053, 0.17580933397254161, 0.11606843178544679, 0.12113588607693926, 0.1377291791098345, 0.09043200523547112, 0.09246237598623852, 0.07548834798565607, 0.09683655316952622, 0.11315022060693591, 0.09087057509202745, 0.11812421120081706, 0.11154886224481164, 0.1259282612825846, 0.9751555038792207, 0.9815349558942055, 0.9783826686526415, 0.9624406319562725, 0.9684956630314394, 0.9623619928304761, 0.9754148223417738, 0.9704908770210587, 0.9662526666433058, 0.6496558567888994, 0.25486349913763984, 0.6076588459211631, 0.4812766446213693, 0.5694293833317098, 0.5331553056475882, 0.4876869712866899, 0.2678243148495689, 0.6992452722848577, 0.17153129940611456, 0.20160477265250187, 0.2267861990381449, 0.2680684553156608, 0.21752781240820618, 0.27334049995796916, 0.17181509264371309, 0.17735228394475366, 0.21724655666505321, 0.16253516392417933, 0.17108547189479284, 0.1706183763942274, 0.18783054918193653, 0.2894685948102167, 0.1305244749481097, 0.37042116846109663, 0.1823857694223472, 0.16752274507453735, 0.17742005817950135, 0.1387008250004086, 0.12265993467710445, 0.16062746836442965, 0.17784596232010752, 0.19406842681215564, 0.23796314885121117, 0.19956102044698232, 0.16884685863851823, 0.0, 0.012607205334952076, 0.06698488699447058, 0.04791571345626, 0.009307280929853001, 0.043209567198109866, 0.0, 0.0, 0.0498999682312975, 0.07763363189541195, 0.07587804182426683, 0.07598522648717776, 0.05712399275993829, 0.023752170516744497, 0.03273563749739117, 0.14995514766858054, 0.0945956719881027, 0.0635870123475557, 0.07364760992070385, 0.09026725923460854, 0.22065096146498075, 0.13072886828805075, 0.1404283327513789, 0.10995439895932446, 0.11036190239902166, 0.07332887729489612, 0.06880845511626665, 0.2275075490696551, 0.21916533018846618, 0.1271865147734358, 0.06759870418165559, 0.03518031381301567, 0.1312631937987857, 0.09451533607029738, 0.05570065768295773, 0.08180176308946152, 0.4943001943605603, 0.48150860581086885, 0.4564478962098383, 0.4874788032511732, 0.5567879272754539, 0.5494472695137778, 0.5316172929530697, 0.5208899180681217, 0.5564101391444969, 0.09927421608697118, 0.11345733981398443, 0.13965153607421632, 0.12997433960933324, 0.12992828902226738, 0.1252192451441002, 0.12272546080442681, 0.15588133092626355, 0.09016209656224872, 0.16973766534951573, 0.4203213718911514, 0.22655538185343338, 0.1618031734287808, 0.29568138290783985, 0.17611648188854911, 0.17661148304686813, 0.19219418212562978, 0.2246017819838062, 0.44456340759332547, 0.3479762072040301, 0.4139046268031109, 0.3125584971429136, 0.3165720254121175, 0.3422541530263289, 0.24708305090073113, 0.6386023930951205, 0.4659015307834017, 0.2637382908154533, 0.34450755888973605, 0.2263394808464585, 0.3322701936894915, 0.2035535725931411, 0.2602828674907338, 0.22820928733728263, 0.2788972645234177, 0.23757348173188342, 0.2000886308286175, 0.23159318409587482, 0.21908175680143105, 0.23407117656704446, 0.20650644213268965, 0.20778493391125774, 0.24106005374798956, 0.23469798666355857, 0.2410695433539366, 0.21624995952094428, 0.20479567948681143, 0.19706361741482636, 0.1947205644382849, 0.2074681894921917, 0.1879875912374006, 0.18467686726227994, 0.7274278863393929, 0.18309696546692844, 0.8558362548450182, 0.12630540074382113, 0.15376436793657577, 0.9080021046361748, 0.20110668277782529, 0.1993396521638361, 0.33890484515817954, 0.16983306153277955, 0.8871624148294673, 0.5589812942116835, 0.1566101016983995, 0.5441600413836067, 0.21215618373751965, 0.1688488559800384, 0.5317217258265978, 0.2857580614835188, 0.16757035370160578, 0.4484787774955784, 0.18213236153181056, 0.199852023411894, 0.20044665378202675, 0.190190317429773, 0.1871198923448526, 0.2065569526823564, 0.19088995079014726, 0.1656090561322664, 0.20812413942811425, 0.11358114699237154, 0.07943876525798155, 0.07775647499235927, 0.09059355147852988, 0.09701300274408786, 0.08531631746167823, 0.0825870298066459, 0.10096537904158553, 0.09085516333162535]}, "mutation_prompt": null}
{"id": "727dcea7-e4a2-4aa9-90b2-37a75ece2233", "solution": "import numpy as np\n\nclass FasterQIPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.alpha = 0.9\n        self.beta = 0.4\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        self.personal_best_positions = self.particles.copy()\n        self.personal_best_values = np.full(self.num_particles, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                fitness = func(self.particles[i])\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.particles[i].copy()\n                \n                r = np.random.uniform(0, 1, self.dim)\n                dynamic_alpha = 0.9 - (_ / self.max_iter) * 0.5\n                dynamic_beta = 0.4 + (_ / self.max_iter) * 0.6\n                inertia_weight = 0.5 + 0.4 * (1 - _ / self.max_iter)  # Adaptive inertia weight\n                self.velocities[i] = inertia_weight * self.velocities[i] + dynamic_alpha * (self.personal_best_positions[i] - self.particles[i]) + dynamic_beta * (self.global_best_position - self.particles[i])\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i] * r, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_value", "name": "FasterQIPSO", "description": "Introducing a novel adaptive inertia weight strategy to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abd8022b-98bd-47e7-bd8b-6e8949b7b2a5", "metadata": {"aucs": [0.8461231541928071, 0.8409272185989365, 0.8556387937865989, 0.8426996400241583, 0.8630825515461042, 0.8481293836568543, 0.8460296378497489, 0.8519602639962162, 0.8515120462066985, 0.6121581061126846, 0.20498004292899707, 0.4971120769488716, 0.5662357739614616, 0.4860194487830678, 0.5356033834071585, 0.5985688031862813, 0.5972823976864932, 0.22001351988854645, 0.17591106988679273, 0.10033872976635538, 0.14881074372121839, 0.13170885631496276, 0.13775986129983053, 0.17580933397254161, 0.11606843178544679, 0.12113588607693926, 0.1377291791098345, 0.09043200523547112, 0.09246237598623852, 0.07548834798565607, 0.09683655316952622, 0.11315022060693591, 0.09087057509202745, 0.11812421120081706, 0.11154886224481164, 0.1259282612825846, 0.9751555038792207, 0.9815349558942055, 0.9783826686526415, 0.9624406319562725, 0.9684956630314394, 0.9623619928304761, 0.9754148223417738, 0.9704908770210587, 0.9662526666433058, 0.6496558567888994, 0.25486349913763984, 0.6076588459211631, 0.4812766446213693, 0.5694293833317098, 0.5331553056475882, 0.4876869712866899, 0.2678243148495689, 0.6992452722848577, 0.17153129940611456, 0.20160477265250187, 0.2267861990381449, 0.2680684553156608, 0.21752781240820618, 0.27334049995796916, 0.17181509264371309, 0.17735228394475366, 0.21724655666505321, 0.16253516392417933, 0.17108547189479284, 0.1706183763942274, 0.18783054918193653, 0.2894685948102167, 0.1305244749481097, 0.37042116846109663, 0.1823857694223472, 0.16752274507453735, 0.17742005817950135, 0.1387008250004086, 0.12265993467710445, 0.16062746836442965, 0.17784596232010752, 0.19406842681215564, 0.23796314885121117, 0.19956102044698232, 0.16884685863851823, 0.0, 0.012607205334952076, 0.06698488699447058, 0.04791571345626, 0.009307280929853001, 0.043209567198109866, 0.0, 0.0, 0.0498999682312975, 0.07763363189541195, 0.07587804182426683, 0.07598522648717776, 0.05712399275993829, 0.023752170516744497, 0.03273563749739117, 0.14995514766858054, 0.0945956719881027, 0.0635870123475557, 0.07364760992070385, 0.09026725923460854, 0.22065096146498075, 0.13072886828805075, 0.1404283327513789, 0.10995439895932446, 0.11036190239902166, 0.07332887729489612, 0.06880845511626665, 0.2275075490696551, 0.21916533018846618, 0.1271865147734358, 0.06759870418165559, 0.03518031381301567, 0.1312631937987857, 0.09451533607029738, 0.05570065768295773, 0.08180176308946152, 0.4943001943605603, 0.48150860581086885, 0.4564478962098383, 0.4874788032511732, 0.5567879272754539, 0.5494472695137778, 0.5316172929530697, 0.5208899180681217, 0.5564101391444969, 0.09927421608697118, 0.11345733981398443, 0.13965153607421632, 0.12997433960933324, 0.12992828902226738, 0.1252192451441002, 0.12272546080442681, 0.15588133092626355, 0.09016209656224872, 0.16973766534951573, 0.4203213718911514, 0.22655538185343338, 0.1618031734287808, 0.29568138290783985, 0.17611648188854911, 0.17661148304686813, 0.19219418212562978, 0.2246017819838062, 0.44456340759332547, 0.3479762072040301, 0.4139046268031109, 0.3125584971429136, 0.3165720254121175, 0.3422541530263289, 0.24708305090073113, 0.6386023930951205, 0.4659015307834017, 0.2637382908154533, 0.34450755888973605, 0.2263394808464585, 0.3322701936894915, 0.2035535725931411, 0.2602828674907338, 0.22820928733728263, 0.2788972645234177, 0.23757348173188342, 0.2000886308286175, 0.23159318409587482, 0.21908175680143105, 0.23407117656704446, 0.20650644213268965, 0.20778493391125774, 0.24106005374798956, 0.23469798666355857, 0.2410695433539366, 0.21624995952094428, 0.20479567948681143, 0.19706361741482636, 0.1947205644382849, 0.2074681894921917, 0.1879875912374006, 0.18467686726227994, 0.7274278863393929, 0.18309696546692844, 0.8558362548450182, 0.12630540074382113, 0.15376436793657577, 0.9080021046361748, 0.20110668277782529, 0.1993396521638361, 0.33890484515817954, 0.16983306153277955, 0.8871624148294673, 0.5589812942116835, 0.1566101016983995, 0.5441600413836067, 0.21215618373751965, 0.1688488559800384, 0.5317217258265978, 0.2857580614835188, 0.16757035370160578, 0.4484787774955784, 0.18213236153181056, 0.199852023411894, 0.20044665378202675, 0.190190317429773, 0.1871198923448526, 0.2065569526823564, 0.19088995079014726, 0.1656090561322664, 0.20812413942811425, 0.11358114699237154, 0.07943876525798155, 0.07775647499235927, 0.09059355147852988, 0.09701300274408786, 0.08531631746167823, 0.0825870298066459, 0.10096537904158553, 0.09085516333162535]}, "mutation_prompt": null}
